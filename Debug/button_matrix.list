
button_matrix.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000037ec  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003980  08003980  00013980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003998  08003998  00020010  2**0
                  CONTENTS
  4 .ARM          00000008  08003998  08003998  00013998  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080039a0  080039a0  00020010  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080039a0  080039a0  000139a0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080039a4  080039a4  000139a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000010  20000000  080039a8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000158  20000010  080039b8  00020010  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000168  080039b8  00020168  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020010  2**0
                  CONTENTS, READONLY
 12 .debug_info   000111e6  00000000  00000000  00020040  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eee  00000000  00000000  00031226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001040  00000000  00000000  00033118  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fa0  00000000  00000000  00034158  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000160bc  00000000  00000000  000350f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001298a  00000000  00000000  0004b1b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d5c9  00000000  00000000  0005db3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000eb107  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004644  00000000  00000000  000eb158  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20000010 	.word	0x20000010
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08003968 	.word	0x08003968

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20000014 	.word	0x20000014
 80001d0:	08003968 	.word	0x08003968

080001d4 <__aeabi_uldivmod>:
 80001d4:	b953      	cbnz	r3, 80001ec <__aeabi_uldivmod+0x18>
 80001d6:	b94a      	cbnz	r2, 80001ec <__aeabi_uldivmod+0x18>
 80001d8:	2900      	cmp	r1, #0
 80001da:	bf08      	it	eq
 80001dc:	2800      	cmpeq	r0, #0
 80001de:	bf1c      	itt	ne
 80001e0:	f04f 31ff 	movne.w	r1, #4294967295
 80001e4:	f04f 30ff 	movne.w	r0, #4294967295
 80001e8:	f000 b974 	b.w	80004d4 <__aeabi_idiv0>
 80001ec:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f0:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f4:	f000 f806 	bl	8000204 <__udivmoddi4>
 80001f8:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001fc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000200:	b004      	add	sp, #16
 8000202:	4770      	bx	lr

08000204 <__udivmoddi4>:
 8000204:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000208:	9d08      	ldr	r5, [sp, #32]
 800020a:	4604      	mov	r4, r0
 800020c:	468e      	mov	lr, r1
 800020e:	2b00      	cmp	r3, #0
 8000210:	d14d      	bne.n	80002ae <__udivmoddi4+0xaa>
 8000212:	428a      	cmp	r2, r1
 8000214:	4694      	mov	ip, r2
 8000216:	d969      	bls.n	80002ec <__udivmoddi4+0xe8>
 8000218:	fab2 f282 	clz	r2, r2
 800021c:	b152      	cbz	r2, 8000234 <__udivmoddi4+0x30>
 800021e:	fa01 f302 	lsl.w	r3, r1, r2
 8000222:	f1c2 0120 	rsb	r1, r2, #32
 8000226:	fa20 f101 	lsr.w	r1, r0, r1
 800022a:	fa0c fc02 	lsl.w	ip, ip, r2
 800022e:	ea41 0e03 	orr.w	lr, r1, r3
 8000232:	4094      	lsls	r4, r2
 8000234:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000238:	0c21      	lsrs	r1, r4, #16
 800023a:	fbbe f6f8 	udiv	r6, lr, r8
 800023e:	fa1f f78c 	uxth.w	r7, ip
 8000242:	fb08 e316 	mls	r3, r8, r6, lr
 8000246:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800024a:	fb06 f107 	mul.w	r1, r6, r7
 800024e:	4299      	cmp	r1, r3
 8000250:	d90a      	bls.n	8000268 <__udivmoddi4+0x64>
 8000252:	eb1c 0303 	adds.w	r3, ip, r3
 8000256:	f106 30ff 	add.w	r0, r6, #4294967295
 800025a:	f080 811f 	bcs.w	800049c <__udivmoddi4+0x298>
 800025e:	4299      	cmp	r1, r3
 8000260:	f240 811c 	bls.w	800049c <__udivmoddi4+0x298>
 8000264:	3e02      	subs	r6, #2
 8000266:	4463      	add	r3, ip
 8000268:	1a5b      	subs	r3, r3, r1
 800026a:	b2a4      	uxth	r4, r4
 800026c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000270:	fb08 3310 	mls	r3, r8, r0, r3
 8000274:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000278:	fb00 f707 	mul.w	r7, r0, r7
 800027c:	42a7      	cmp	r7, r4
 800027e:	d90a      	bls.n	8000296 <__udivmoddi4+0x92>
 8000280:	eb1c 0404 	adds.w	r4, ip, r4
 8000284:	f100 33ff 	add.w	r3, r0, #4294967295
 8000288:	f080 810a 	bcs.w	80004a0 <__udivmoddi4+0x29c>
 800028c:	42a7      	cmp	r7, r4
 800028e:	f240 8107 	bls.w	80004a0 <__udivmoddi4+0x29c>
 8000292:	4464      	add	r4, ip
 8000294:	3802      	subs	r0, #2
 8000296:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800029a:	1be4      	subs	r4, r4, r7
 800029c:	2600      	movs	r6, #0
 800029e:	b11d      	cbz	r5, 80002a8 <__udivmoddi4+0xa4>
 80002a0:	40d4      	lsrs	r4, r2
 80002a2:	2300      	movs	r3, #0
 80002a4:	e9c5 4300 	strd	r4, r3, [r5]
 80002a8:	4631      	mov	r1, r6
 80002aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ae:	428b      	cmp	r3, r1
 80002b0:	d909      	bls.n	80002c6 <__udivmoddi4+0xc2>
 80002b2:	2d00      	cmp	r5, #0
 80002b4:	f000 80ef 	beq.w	8000496 <__udivmoddi4+0x292>
 80002b8:	2600      	movs	r6, #0
 80002ba:	e9c5 0100 	strd	r0, r1, [r5]
 80002be:	4630      	mov	r0, r6
 80002c0:	4631      	mov	r1, r6
 80002c2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002c6:	fab3 f683 	clz	r6, r3
 80002ca:	2e00      	cmp	r6, #0
 80002cc:	d14a      	bne.n	8000364 <__udivmoddi4+0x160>
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d302      	bcc.n	80002d8 <__udivmoddi4+0xd4>
 80002d2:	4282      	cmp	r2, r0
 80002d4:	f200 80f9 	bhi.w	80004ca <__udivmoddi4+0x2c6>
 80002d8:	1a84      	subs	r4, r0, r2
 80002da:	eb61 0303 	sbc.w	r3, r1, r3
 80002de:	2001      	movs	r0, #1
 80002e0:	469e      	mov	lr, r3
 80002e2:	2d00      	cmp	r5, #0
 80002e4:	d0e0      	beq.n	80002a8 <__udivmoddi4+0xa4>
 80002e6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002ea:	e7dd      	b.n	80002a8 <__udivmoddi4+0xa4>
 80002ec:	b902      	cbnz	r2, 80002f0 <__udivmoddi4+0xec>
 80002ee:	deff      	udf	#255	; 0xff
 80002f0:	fab2 f282 	clz	r2, r2
 80002f4:	2a00      	cmp	r2, #0
 80002f6:	f040 8092 	bne.w	800041e <__udivmoddi4+0x21a>
 80002fa:	eba1 010c 	sub.w	r1, r1, ip
 80002fe:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000302:	fa1f fe8c 	uxth.w	lr, ip
 8000306:	2601      	movs	r6, #1
 8000308:	0c20      	lsrs	r0, r4, #16
 800030a:	fbb1 f3f7 	udiv	r3, r1, r7
 800030e:	fb07 1113 	mls	r1, r7, r3, r1
 8000312:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000316:	fb0e f003 	mul.w	r0, lr, r3
 800031a:	4288      	cmp	r0, r1
 800031c:	d908      	bls.n	8000330 <__udivmoddi4+0x12c>
 800031e:	eb1c 0101 	adds.w	r1, ip, r1
 8000322:	f103 38ff 	add.w	r8, r3, #4294967295
 8000326:	d202      	bcs.n	800032e <__udivmoddi4+0x12a>
 8000328:	4288      	cmp	r0, r1
 800032a:	f200 80cb 	bhi.w	80004c4 <__udivmoddi4+0x2c0>
 800032e:	4643      	mov	r3, r8
 8000330:	1a09      	subs	r1, r1, r0
 8000332:	b2a4      	uxth	r4, r4
 8000334:	fbb1 f0f7 	udiv	r0, r1, r7
 8000338:	fb07 1110 	mls	r1, r7, r0, r1
 800033c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000340:	fb0e fe00 	mul.w	lr, lr, r0
 8000344:	45a6      	cmp	lr, r4
 8000346:	d908      	bls.n	800035a <__udivmoddi4+0x156>
 8000348:	eb1c 0404 	adds.w	r4, ip, r4
 800034c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000350:	d202      	bcs.n	8000358 <__udivmoddi4+0x154>
 8000352:	45a6      	cmp	lr, r4
 8000354:	f200 80bb 	bhi.w	80004ce <__udivmoddi4+0x2ca>
 8000358:	4608      	mov	r0, r1
 800035a:	eba4 040e 	sub.w	r4, r4, lr
 800035e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000362:	e79c      	b.n	800029e <__udivmoddi4+0x9a>
 8000364:	f1c6 0720 	rsb	r7, r6, #32
 8000368:	40b3      	lsls	r3, r6
 800036a:	fa22 fc07 	lsr.w	ip, r2, r7
 800036e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000372:	fa20 f407 	lsr.w	r4, r0, r7
 8000376:	fa01 f306 	lsl.w	r3, r1, r6
 800037a:	431c      	orrs	r4, r3
 800037c:	40f9      	lsrs	r1, r7
 800037e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000382:	fa00 f306 	lsl.w	r3, r0, r6
 8000386:	fbb1 f8f9 	udiv	r8, r1, r9
 800038a:	0c20      	lsrs	r0, r4, #16
 800038c:	fa1f fe8c 	uxth.w	lr, ip
 8000390:	fb09 1118 	mls	r1, r9, r8, r1
 8000394:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000398:	fb08 f00e 	mul.w	r0, r8, lr
 800039c:	4288      	cmp	r0, r1
 800039e:	fa02 f206 	lsl.w	r2, r2, r6
 80003a2:	d90b      	bls.n	80003bc <__udivmoddi4+0x1b8>
 80003a4:	eb1c 0101 	adds.w	r1, ip, r1
 80003a8:	f108 3aff 	add.w	sl, r8, #4294967295
 80003ac:	f080 8088 	bcs.w	80004c0 <__udivmoddi4+0x2bc>
 80003b0:	4288      	cmp	r0, r1
 80003b2:	f240 8085 	bls.w	80004c0 <__udivmoddi4+0x2bc>
 80003b6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ba:	4461      	add	r1, ip
 80003bc:	1a09      	subs	r1, r1, r0
 80003be:	b2a4      	uxth	r4, r4
 80003c0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003c4:	fb09 1110 	mls	r1, r9, r0, r1
 80003c8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003cc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003d0:	458e      	cmp	lr, r1
 80003d2:	d908      	bls.n	80003e6 <__udivmoddi4+0x1e2>
 80003d4:	eb1c 0101 	adds.w	r1, ip, r1
 80003d8:	f100 34ff 	add.w	r4, r0, #4294967295
 80003dc:	d26c      	bcs.n	80004b8 <__udivmoddi4+0x2b4>
 80003de:	458e      	cmp	lr, r1
 80003e0:	d96a      	bls.n	80004b8 <__udivmoddi4+0x2b4>
 80003e2:	3802      	subs	r0, #2
 80003e4:	4461      	add	r1, ip
 80003e6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003ea:	fba0 9402 	umull	r9, r4, r0, r2
 80003ee:	eba1 010e 	sub.w	r1, r1, lr
 80003f2:	42a1      	cmp	r1, r4
 80003f4:	46c8      	mov	r8, r9
 80003f6:	46a6      	mov	lr, r4
 80003f8:	d356      	bcc.n	80004a8 <__udivmoddi4+0x2a4>
 80003fa:	d053      	beq.n	80004a4 <__udivmoddi4+0x2a0>
 80003fc:	b15d      	cbz	r5, 8000416 <__udivmoddi4+0x212>
 80003fe:	ebb3 0208 	subs.w	r2, r3, r8
 8000402:	eb61 010e 	sbc.w	r1, r1, lr
 8000406:	fa01 f707 	lsl.w	r7, r1, r7
 800040a:	fa22 f306 	lsr.w	r3, r2, r6
 800040e:	40f1      	lsrs	r1, r6
 8000410:	431f      	orrs	r7, r3
 8000412:	e9c5 7100 	strd	r7, r1, [r5]
 8000416:	2600      	movs	r6, #0
 8000418:	4631      	mov	r1, r6
 800041a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800041e:	f1c2 0320 	rsb	r3, r2, #32
 8000422:	40d8      	lsrs	r0, r3
 8000424:	fa0c fc02 	lsl.w	ip, ip, r2
 8000428:	fa21 f303 	lsr.w	r3, r1, r3
 800042c:	4091      	lsls	r1, r2
 800042e:	4301      	orrs	r1, r0
 8000430:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000434:	fa1f fe8c 	uxth.w	lr, ip
 8000438:	fbb3 f0f7 	udiv	r0, r3, r7
 800043c:	fb07 3610 	mls	r6, r7, r0, r3
 8000440:	0c0b      	lsrs	r3, r1, #16
 8000442:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000446:	fb00 f60e 	mul.w	r6, r0, lr
 800044a:	429e      	cmp	r6, r3
 800044c:	fa04 f402 	lsl.w	r4, r4, r2
 8000450:	d908      	bls.n	8000464 <__udivmoddi4+0x260>
 8000452:	eb1c 0303 	adds.w	r3, ip, r3
 8000456:	f100 38ff 	add.w	r8, r0, #4294967295
 800045a:	d22f      	bcs.n	80004bc <__udivmoddi4+0x2b8>
 800045c:	429e      	cmp	r6, r3
 800045e:	d92d      	bls.n	80004bc <__udivmoddi4+0x2b8>
 8000460:	3802      	subs	r0, #2
 8000462:	4463      	add	r3, ip
 8000464:	1b9b      	subs	r3, r3, r6
 8000466:	b289      	uxth	r1, r1
 8000468:	fbb3 f6f7 	udiv	r6, r3, r7
 800046c:	fb07 3316 	mls	r3, r7, r6, r3
 8000470:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000474:	fb06 f30e 	mul.w	r3, r6, lr
 8000478:	428b      	cmp	r3, r1
 800047a:	d908      	bls.n	800048e <__udivmoddi4+0x28a>
 800047c:	eb1c 0101 	adds.w	r1, ip, r1
 8000480:	f106 38ff 	add.w	r8, r6, #4294967295
 8000484:	d216      	bcs.n	80004b4 <__udivmoddi4+0x2b0>
 8000486:	428b      	cmp	r3, r1
 8000488:	d914      	bls.n	80004b4 <__udivmoddi4+0x2b0>
 800048a:	3e02      	subs	r6, #2
 800048c:	4461      	add	r1, ip
 800048e:	1ac9      	subs	r1, r1, r3
 8000490:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000494:	e738      	b.n	8000308 <__udivmoddi4+0x104>
 8000496:	462e      	mov	r6, r5
 8000498:	4628      	mov	r0, r5
 800049a:	e705      	b.n	80002a8 <__udivmoddi4+0xa4>
 800049c:	4606      	mov	r6, r0
 800049e:	e6e3      	b.n	8000268 <__udivmoddi4+0x64>
 80004a0:	4618      	mov	r0, r3
 80004a2:	e6f8      	b.n	8000296 <__udivmoddi4+0x92>
 80004a4:	454b      	cmp	r3, r9
 80004a6:	d2a9      	bcs.n	80003fc <__udivmoddi4+0x1f8>
 80004a8:	ebb9 0802 	subs.w	r8, r9, r2
 80004ac:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004b0:	3801      	subs	r0, #1
 80004b2:	e7a3      	b.n	80003fc <__udivmoddi4+0x1f8>
 80004b4:	4646      	mov	r6, r8
 80004b6:	e7ea      	b.n	800048e <__udivmoddi4+0x28a>
 80004b8:	4620      	mov	r0, r4
 80004ba:	e794      	b.n	80003e6 <__udivmoddi4+0x1e2>
 80004bc:	4640      	mov	r0, r8
 80004be:	e7d1      	b.n	8000464 <__udivmoddi4+0x260>
 80004c0:	46d0      	mov	r8, sl
 80004c2:	e77b      	b.n	80003bc <__udivmoddi4+0x1b8>
 80004c4:	3b02      	subs	r3, #2
 80004c6:	4461      	add	r1, ip
 80004c8:	e732      	b.n	8000330 <__udivmoddi4+0x12c>
 80004ca:	4630      	mov	r0, r6
 80004cc:	e709      	b.n	80002e2 <__udivmoddi4+0xde>
 80004ce:	4464      	add	r4, ip
 80004d0:	3802      	subs	r0, #2
 80004d2:	e742      	b.n	800035a <__udivmoddi4+0x156>

080004d4 <__aeabi_idiv0>:
 80004d4:	4770      	bx	lr
 80004d6:	bf00      	nop

080004d8 <enable_button>:

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 80004d8:	b480      	push	{r7}
 80004da:	b083      	sub	sp, #12
 80004dc:	af00      	add	r7, sp, #0
 80004de:	4603      	mov	r3, r0
 80004e0:	71fb      	strb	r3, [r7, #7]
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 80004e2:	79fb      	ldrb	r3, [r7, #7]
 80004e4:	2b09      	cmp	r3, #9
 80004e6:	d107      	bne.n	80004f8 <enable_button+0x20>
		io_ctrl_2 &= ~(0b1);
 80004e8:	4b10      	ldr	r3, [pc, #64]	; (800052c <enable_button+0x54>)
 80004ea:	781b      	ldrb	r3, [r3, #0]
 80004ec:	f023 0301 	bic.w	r3, r3, #1
 80004f0:	b2da      	uxtb	r2, r3
 80004f2:	4b0e      	ldr	r3, [pc, #56]	; (800052c <enable_button+0x54>)
 80004f4:	701a      	strb	r2, [r3, #0]
	} else if (button <= 8) {
		io_ctrl_1 &= ~(0b1 << (button - 1));
	}
}
 80004f6:	e012      	b.n	800051e <enable_button+0x46>
	} else if (button <= 8) {
 80004f8:	79fb      	ldrb	r3, [r7, #7]
 80004fa:	2b08      	cmp	r3, #8
 80004fc:	d80f      	bhi.n	800051e <enable_button+0x46>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 80004fe:	79fb      	ldrb	r3, [r7, #7]
 8000500:	3b01      	subs	r3, #1
 8000502:	2201      	movs	r2, #1
 8000504:	fa02 f303 	lsl.w	r3, r2, r3
 8000508:	b25b      	sxtb	r3, r3
 800050a:	43db      	mvns	r3, r3
 800050c:	b25a      	sxtb	r2, r3
 800050e:	4b08      	ldr	r3, [pc, #32]	; (8000530 <enable_button+0x58>)
 8000510:	781b      	ldrb	r3, [r3, #0]
 8000512:	b25b      	sxtb	r3, r3
 8000514:	4013      	ands	r3, r2
 8000516:	b25b      	sxtb	r3, r3
 8000518:	b2da      	uxtb	r2, r3
 800051a:	4b05      	ldr	r3, [pc, #20]	; (8000530 <enable_button+0x58>)
 800051c:	701a      	strb	r2, [r3, #0]
}
 800051e:	bf00      	nop
 8000520:	370c      	adds	r7, #12
 8000522:	46bd      	mov	sp, r7
 8000524:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000528:	4770      	bx	lr
 800052a:	bf00      	nop
 800052c:	20000001 	.word	0x20000001
 8000530:	20000000 	.word	0x20000000

08000534 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 8000534:	b480      	push	{r7}
 8000536:	b083      	sub	sp, #12
 8000538:	af00      	add	r7, sp, #0
 800053a:	4603      	mov	r3, r0
 800053c:	71fb      	strb	r3, [r7, #7]
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 800053e:	79fb      	ldrb	r3, [r7, #7]
 8000540:	2b09      	cmp	r3, #9
 8000542:	d107      	bne.n	8000554 <disable_button+0x20>
		io_ctrl_2 |= 0b1;
 8000544:	4b0f      	ldr	r3, [pc, #60]	; (8000584 <disable_button+0x50>)
 8000546:	781b      	ldrb	r3, [r3, #0]
 8000548:	f043 0301 	orr.w	r3, r3, #1
 800054c:	b2da      	uxtb	r2, r3
 800054e:	4b0d      	ldr	r3, [pc, #52]	; (8000584 <disable_button+0x50>)
 8000550:	701a      	strb	r2, [r3, #0]
	} else if (button <= 8) {
		io_ctrl_1 |= 0b1 << (button - 1);
	}
}
 8000552:	e010      	b.n	8000576 <disable_button+0x42>
	} else if (button <= 8) {
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b08      	cmp	r3, #8
 8000558:	d80d      	bhi.n	8000576 <disable_button+0x42>
		io_ctrl_1 |= 0b1 << (button - 1);
 800055a:	79fb      	ldrb	r3, [r7, #7]
 800055c:	3b01      	subs	r3, #1
 800055e:	2201      	movs	r2, #1
 8000560:	fa02 f303 	lsl.w	r3, r2, r3
 8000564:	b25a      	sxtb	r2, r3
 8000566:	4b08      	ldr	r3, [pc, #32]	; (8000588 <disable_button+0x54>)
 8000568:	781b      	ldrb	r3, [r3, #0]
 800056a:	b25b      	sxtb	r3, r3
 800056c:	4313      	orrs	r3, r2
 800056e:	b25b      	sxtb	r3, r3
 8000570:	b2da      	uxtb	r2, r3
 8000572:	4b05      	ldr	r3, [pc, #20]	; (8000588 <disable_button+0x54>)
 8000574:	701a      	strb	r2, [r3, #0]
}
 8000576:	bf00      	nop
 8000578:	370c      	adds	r7, #12
 800057a:	46bd      	mov	sp, r7
 800057c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000580:	4770      	bx	lr
 8000582:	bf00      	nop
 8000584:	20000001 	.word	0x20000001
 8000588:	20000000 	.word	0x20000000

0800058c <disable_all_buttons>:
		enable_button(i);
	}
}

// Disable all of the buttons
void disable_all_buttons() {
 800058c:	b580      	push	{r7, lr}
 800058e:	b082      	sub	sp, #8
 8000590:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 8000592:	2301      	movs	r3, #1
 8000594:	71fb      	strb	r3, [r7, #7]
 8000596:	e006      	b.n	80005a6 <disable_all_buttons+0x1a>
		disable_button(i);
 8000598:	79fb      	ldrb	r3, [r7, #7]
 800059a:	4618      	mov	r0, r3
 800059c:	f7ff ffca 	bl	8000534 <disable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 80005a0:	79fb      	ldrb	r3, [r7, #7]
 80005a2:	3301      	adds	r3, #1
 80005a4:	71fb      	strb	r3, [r7, #7]
 80005a6:	79fb      	ldrb	r3, [r7, #7]
 80005a8:	2b09      	cmp	r3, #9
 80005aa:	d9f5      	bls.n	8000598 <disable_all_buttons+0xc>
	}
}
 80005ac:	bf00      	nop
 80005ae:	bf00      	nop
 80005b0:	3708      	adds	r7, #8
 80005b2:	46bd      	mov	sp, r7
 80005b4:	bd80      	pop	{r7, pc}
	...

080005b8 <update_buttons>:

// Write the updated button configuration to the remote
void update_buttons() {
 80005b8:	b580      	push	{r7, lr}
 80005ba:	b084      	sub	sp, #16
 80005bc:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 80005be:	23f2      	movs	r3, #242	; 0xf2
 80005c0:	713b      	strb	r3, [r7, #4]
 80005c2:	4b09      	ldr	r3, [pc, #36]	; (80005e8 <update_buttons+0x30>)
 80005c4:	781b      	ldrb	r3, [r3, #0]
 80005c6:	717b      	strb	r3, [r7, #5]
 80005c8:	4b08      	ldr	r3, [pc, #32]	; (80005ec <update_buttons+0x34>)
 80005ca:	781b      	ldrb	r3, [r3, #0]
 80005cc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 80005ce:	1d3a      	adds	r2, r7, #4
 80005d0:	f04f 33ff 	mov.w	r3, #4294967295
 80005d4:	9300      	str	r3, [sp, #0]
 80005d6:	2303      	movs	r3, #3
 80005d8:	21a0      	movs	r1, #160	; 0xa0
 80005da:	4805      	ldr	r0, [pc, #20]	; (80005f0 <update_buttons+0x38>)
 80005dc:	f001 f890 	bl	8001700 <HAL_I2C_Master_Transmit>
}
 80005e0:	bf00      	nop
 80005e2:	3708      	adds	r7, #8
 80005e4:	46bd      	mov	sp, r7
 80005e6:	bd80      	pop	{r7, pc}
 80005e8:	20000000 	.word	0x20000000
 80005ec:	20000001 	.word	0x20000001
 80005f0:	2000002c 	.word	0x2000002c

080005f4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005f4:	b580      	push	{r7, lr}
 80005f6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005f8:	f000 fc24 	bl	8000e44 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005fc:	f000 f830 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000600:	f000 f99e 	bl	8000940 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000604:	f000 f8c6 	bl	8000794 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000608:	f000 f8fa 	bl	8000800 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 800060c:	f000 f96e 	bl	80008ec <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000610:	f000 f892 	bl	8000738 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  // Initialize Button Brightness
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000614:	2108      	movs	r1, #8
 8000616:	4811      	ldr	r0, [pc, #68]	; (800065c <main+0x68>)
 8000618:	f002 f944 	bl	80028a4 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 200);
 800061c:	4b0f      	ldr	r3, [pc, #60]	; (800065c <main+0x68>)
 800061e:	681b      	ldr	r3, [r3, #0]
 8000620:	22c8      	movs	r2, #200	; 0xc8
 8000622:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  //enable_all_buttons();
	  enable_button(1);
 8000624:	2001      	movs	r0, #1
 8000626:	f7ff ff57 	bl	80004d8 <enable_button>
	  enable_button(3);
 800062a:	2003      	movs	r0, #3
 800062c:	f7ff ff54 	bl	80004d8 <enable_button>
	  enable_button(7);
 8000630:	2007      	movs	r0, #7
 8000632:	f7ff ff51 	bl	80004d8 <enable_button>
	  enable_button(9);
 8000636:	2009      	movs	r0, #9
 8000638:	f7ff ff4e 	bl	80004d8 <enable_button>
	  update_buttons();
 800063c:	f7ff ffbc 	bl	80005b8 <update_buttons>
	  HAL_Delay(1000);
 8000640:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000644:	f000 fc70 	bl	8000f28 <HAL_Delay>

	  disable_all_buttons();
 8000648:	f7ff ffa0 	bl	800058c <disable_all_buttons>
	  update_buttons();
 800064c:	f7ff ffb4 	bl	80005b8 <update_buttons>
	  HAL_Delay(1000);
 8000650:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000654:	f000 fc68 	bl	8000f28 <HAL_Delay>
	  enable_button(1);
 8000658:	e7e4      	b.n	8000624 <main+0x30>
 800065a:	bf00      	nop
 800065c:	200000d8 	.word	0x200000d8

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f003 f972 	bl	8003958 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b29      	ldr	r3, [pc, #164]	; (8000730 <SystemClock_Config+0xd0>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a28      	ldr	r2, [pc, #160]	; (8000730 <SystemClock_Config+0xd0>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b26      	ldr	r3, [pc, #152]	; (8000730 <SystemClock_Config+0xd0>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b23      	ldr	r3, [pc, #140]	; (8000734 <SystemClock_Config+0xd4>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80006ac:	4a21      	ldr	r2, [pc, #132]	; (8000734 <SystemClock_Config+0xd4>)
 80006ae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80006b2:	6013      	str	r3, [r2, #0]
 80006b4:	4b1f      	ldr	r3, [pc, #124]	; (8000734 <SystemClock_Config+0xd4>)
 80006b6:	681b      	ldr	r3, [r3, #0]
 80006b8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006bc:	607b      	str	r3, [r7, #4]
 80006be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006c0:	2302      	movs	r3, #2
 80006c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c4:	2301      	movs	r3, #1
 80006c6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c8:	2310      	movs	r3, #16
 80006ca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006cc:	2302      	movs	r3, #2
 80006ce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006d0:	2300      	movs	r3, #0
 80006d2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80006d4:	2310      	movs	r3, #16
 80006d6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80006d8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80006dc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80006de:	2304      	movs	r3, #4
 80006e0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80006e2:	2307      	movs	r3, #7
 80006e4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e6:	f107 0320 	add.w	r3, r7, #32
 80006ea:	4618      	mov	r0, r3
 80006ec:	f001 fb10 	bl	8001d10 <HAL_RCC_OscConfig>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80006f6:	f000 f9c1 	bl	8000a7c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80006fa:	230f      	movs	r3, #15
 80006fc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80006fe:	2302      	movs	r3, #2
 8000700:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000702:	2300      	movs	r3, #0
 8000704:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000706:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800070a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800070c:	2300      	movs	r3, #0
 800070e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000710:	f107 030c 	add.w	r3, r7, #12
 8000714:	2102      	movs	r1, #2
 8000716:	4618      	mov	r0, r3
 8000718:	f001 fd72 	bl	8002200 <HAL_RCC_ClockConfig>
 800071c:	4603      	mov	r3, r0
 800071e:	2b00      	cmp	r3, #0
 8000720:	d001      	beq.n	8000726 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000722:	f000 f9ab 	bl	8000a7c <Error_Handler>
  }
}
 8000726:	bf00      	nop
 8000728:	3750      	adds	r7, #80	; 0x50
 800072a:	46bd      	mov	sp, r7
 800072c:	bd80      	pop	{r7, pc}
 800072e:	bf00      	nop
 8000730:	40023800 	.word	0x40023800
 8000734:	40007000 	.word	0x40007000

08000738 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800073c:	4b12      	ldr	r3, [pc, #72]	; (8000788 <MX_I2C1_Init+0x50>)
 800073e:	4a13      	ldr	r2, [pc, #76]	; (800078c <MX_I2C1_Init+0x54>)
 8000740:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000742:	4b11      	ldr	r3, [pc, #68]	; (8000788 <MX_I2C1_Init+0x50>)
 8000744:	4a12      	ldr	r2, [pc, #72]	; (8000790 <MX_I2C1_Init+0x58>)
 8000746:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000748:	4b0f      	ldr	r3, [pc, #60]	; (8000788 <MX_I2C1_Init+0x50>)
 800074a:	2200      	movs	r2, #0
 800074c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800074e:	4b0e      	ldr	r3, [pc, #56]	; (8000788 <MX_I2C1_Init+0x50>)
 8000750:	2200      	movs	r2, #0
 8000752:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000754:	4b0c      	ldr	r3, [pc, #48]	; (8000788 <MX_I2C1_Init+0x50>)
 8000756:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800075a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800075c:	4b0a      	ldr	r3, [pc, #40]	; (8000788 <MX_I2C1_Init+0x50>)
 800075e:	2200      	movs	r2, #0
 8000760:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000762:	4b09      	ldr	r3, [pc, #36]	; (8000788 <MX_I2C1_Init+0x50>)
 8000764:	2200      	movs	r2, #0
 8000766:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000768:	4b07      	ldr	r3, [pc, #28]	; (8000788 <MX_I2C1_Init+0x50>)
 800076a:	2200      	movs	r2, #0
 800076c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800076e:	4b06      	ldr	r3, [pc, #24]	; (8000788 <MX_I2C1_Init+0x50>)
 8000770:	2200      	movs	r2, #0
 8000772:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000774:	4804      	ldr	r0, [pc, #16]	; (8000788 <MX_I2C1_Init+0x50>)
 8000776:	f000 fe7f 	bl	8001478 <HAL_I2C_Init>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000780:	f000 f97c 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	bd80      	pop	{r7, pc}
 8000788:	2000002c 	.word	0x2000002c
 800078c:	40005400 	.word	0x40005400
 8000790:	000186a0 	.word	0x000186a0

08000794 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000794:	b580      	push	{r7, lr}
 8000796:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000798:	4b17      	ldr	r3, [pc, #92]	; (80007f8 <MX_SPI2_Init+0x64>)
 800079a:	4a18      	ldr	r2, [pc, #96]	; (80007fc <MX_SPI2_Init+0x68>)
 800079c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800079e:	4b16      	ldr	r3, [pc, #88]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007a0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80007a4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80007a6:	4b14      	ldr	r3, [pc, #80]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007a8:	2200      	movs	r2, #0
 80007aa:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80007ac:	4b12      	ldr	r3, [pc, #72]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007ae:	2200      	movs	r2, #0
 80007b0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80007b2:	4b11      	ldr	r3, [pc, #68]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007b4:	2200      	movs	r2, #0
 80007b6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80007b8:	4b0f      	ldr	r3, [pc, #60]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007ba:	2200      	movs	r2, #0
 80007bc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80007be:	4b0e      	ldr	r3, [pc, #56]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80007c4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80007c6:	4b0c      	ldr	r3, [pc, #48]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007c8:	2200      	movs	r2, #0
 80007ca:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80007cc:	4b0a      	ldr	r3, [pc, #40]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007ce:	2200      	movs	r2, #0
 80007d0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80007d2:	4b09      	ldr	r3, [pc, #36]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007d4:	2200      	movs	r2, #0
 80007d6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80007d8:	4b07      	ldr	r3, [pc, #28]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007da:	2200      	movs	r2, #0
 80007dc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80007de:	4b06      	ldr	r3, [pc, #24]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007e0:	220a      	movs	r2, #10
 80007e2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80007e4:	4804      	ldr	r0, [pc, #16]	; (80007f8 <MX_SPI2_Init+0x64>)
 80007e6:	f001 ff2b 	bl	8002640 <HAL_SPI_Init>
 80007ea:	4603      	mov	r3, r0
 80007ec:	2b00      	cmp	r3, #0
 80007ee:	d001      	beq.n	80007f4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80007f0:	f000 f944 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80007f4:	bf00      	nop
 80007f6:	bd80      	pop	{r7, pc}
 80007f8:	20000080 	.word	0x20000080
 80007fc:	40003800 	.word	0x40003800

08000800 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000800:	b580      	push	{r7, lr}
 8000802:	b08e      	sub	sp, #56	; 0x38
 8000804:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000806:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800080a:	2200      	movs	r2, #0
 800080c:	601a      	str	r2, [r3, #0]
 800080e:	605a      	str	r2, [r3, #4]
 8000810:	609a      	str	r2, [r3, #8]
 8000812:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000814:	f107 0320 	add.w	r3, r7, #32
 8000818:	2200      	movs	r2, #0
 800081a:	601a      	str	r2, [r3, #0]
 800081c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800081e:	1d3b      	adds	r3, r7, #4
 8000820:	2200      	movs	r2, #0
 8000822:	601a      	str	r2, [r3, #0]
 8000824:	605a      	str	r2, [r3, #4]
 8000826:	609a      	str	r2, [r3, #8]
 8000828:	60da      	str	r2, [r3, #12]
 800082a:	611a      	str	r2, [r3, #16]
 800082c:	615a      	str	r2, [r3, #20]
 800082e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000830:	4b2d      	ldr	r3, [pc, #180]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000832:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000836:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 2047;
 8000838:	4b2b      	ldr	r3, [pc, #172]	; (80008e8 <MX_TIM2_Init+0xe8>)
 800083a:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800083e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000840:	4b29      	ldr	r3, [pc, #164]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000842:	2200      	movs	r2, #0
 8000844:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000846:	4b28      	ldr	r3, [pc, #160]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000848:	f240 32e7 	movw	r2, #999	; 0x3e7
 800084c:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800084e:	4b26      	ldr	r3, [pc, #152]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000850:	2200      	movs	r2, #0
 8000852:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000854:	4b24      	ldr	r3, [pc, #144]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000856:	2200      	movs	r2, #0
 8000858:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800085a:	4823      	ldr	r0, [pc, #140]	; (80008e8 <MX_TIM2_Init+0xe8>)
 800085c:	f001 ff79 	bl	8002752 <HAL_TIM_Base_Init>
 8000860:	4603      	mov	r3, r0
 8000862:	2b00      	cmp	r3, #0
 8000864:	d001      	beq.n	800086a <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000866:	f000 f909 	bl	8000a7c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800086a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800086e:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000870:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000874:	4619      	mov	r1, r3
 8000876:	481c      	ldr	r0, [pc, #112]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000878:	f002 f986 	bl	8002b88 <HAL_TIM_ConfigClockSource>
 800087c:	4603      	mov	r3, r0
 800087e:	2b00      	cmp	r3, #0
 8000880:	d001      	beq.n	8000886 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000882:	f000 f8fb 	bl	8000a7c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000886:	4818      	ldr	r0, [pc, #96]	; (80008e8 <MX_TIM2_Init+0xe8>)
 8000888:	f001 ffb2 	bl	80027f0 <HAL_TIM_PWM_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000892:	f000 f8f3 	bl	8000a7c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000896:	2300      	movs	r3, #0
 8000898:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800089a:	2300      	movs	r3, #0
 800089c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800089e:	f107 0320 	add.w	r3, r7, #32
 80008a2:	4619      	mov	r1, r3
 80008a4:	4810      	ldr	r0, [pc, #64]	; (80008e8 <MX_TIM2_Init+0xe8>)
 80008a6:	f002 fd03 	bl	80032b0 <HAL_TIMEx_MasterConfigSynchronization>
 80008aa:	4603      	mov	r3, r0
 80008ac:	2b00      	cmp	r3, #0
 80008ae:	d001      	beq.n	80008b4 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80008b0:	f000 f8e4 	bl	8000a7c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80008b4:	2370      	movs	r3, #112	; 0x70
 80008b6:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80008b8:	2300      	movs	r3, #0
 80008ba:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80008bc:	2300      	movs	r3, #0
 80008be:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80008c0:	2300      	movs	r3, #0
 80008c2:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80008c4:	1d3b      	adds	r3, r7, #4
 80008c6:	2208      	movs	r2, #8
 80008c8:	4619      	mov	r1, r3
 80008ca:	4807      	ldr	r0, [pc, #28]	; (80008e8 <MX_TIM2_Init+0xe8>)
 80008cc:	f002 f89a 	bl	8002a04 <HAL_TIM_PWM_ConfigChannel>
 80008d0:	4603      	mov	r3, r0
 80008d2:	2b00      	cmp	r3, #0
 80008d4:	d001      	beq.n	80008da <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80008d6:	f000 f8d1 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80008da:	4803      	ldr	r0, [pc, #12]	; (80008e8 <MX_TIM2_Init+0xe8>)
 80008dc:	f000 f9cc 	bl	8000c78 <HAL_TIM_MspPostInit>

}
 80008e0:	bf00      	nop
 80008e2:	3738      	adds	r7, #56	; 0x38
 80008e4:	46bd      	mov	sp, r7
 80008e6:	bd80      	pop	{r7, pc}
 80008e8:	200000d8 	.word	0x200000d8

080008ec <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80008ec:	b580      	push	{r7, lr}
 80008ee:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80008f0:	4b11      	ldr	r3, [pc, #68]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f2:	4a12      	ldr	r2, [pc, #72]	; (800093c <MX_USART1_UART_Init+0x50>)
 80008f4:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80008f6:	4b10      	ldr	r3, [pc, #64]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 80008f8:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80008fc:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80008fe:	4b0e      	ldr	r3, [pc, #56]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000900:	2200      	movs	r2, #0
 8000902:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000904:	4b0c      	ldr	r3, [pc, #48]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000906:	2200      	movs	r2, #0
 8000908:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800090a:	4b0b      	ldr	r3, [pc, #44]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 800090c:	2200      	movs	r2, #0
 800090e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000910:	4b09      	ldr	r3, [pc, #36]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000912:	220c      	movs	r2, #12
 8000914:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000916:	4b08      	ldr	r3, [pc, #32]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000918:	2200      	movs	r2, #0
 800091a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800091c:	4b06      	ldr	r3, [pc, #24]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 800091e:	2200      	movs	r2, #0
 8000920:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000922:	4805      	ldr	r0, [pc, #20]	; (8000938 <MX_USART1_UART_Init+0x4c>)
 8000924:	f002 fd32 	bl	800338c <HAL_UART_Init>
 8000928:	4603      	mov	r3, r0
 800092a:	2b00      	cmp	r3, #0
 800092c:	d001      	beq.n	8000932 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800092e:	f000 f8a5 	bl	8000a7c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000932:	bf00      	nop
 8000934:	bd80      	pop	{r7, pc}
 8000936:	bf00      	nop
 8000938:	20000120 	.word	0x20000120
 800093c:	40011000 	.word	0x40011000

08000940 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000940:	b580      	push	{r7, lr}
 8000942:	b088      	sub	sp, #32
 8000944:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000946:	f107 030c 	add.w	r3, r7, #12
 800094a:	2200      	movs	r2, #0
 800094c:	601a      	str	r2, [r3, #0]
 800094e:	605a      	str	r2, [r3, #4]
 8000950:	609a      	str	r2, [r3, #8]
 8000952:	60da      	str	r2, [r3, #12]
 8000954:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000956:	2300      	movs	r3, #0
 8000958:	60bb      	str	r3, [r7, #8]
 800095a:	4b44      	ldr	r3, [pc, #272]	; (8000a6c <MX_GPIO_Init+0x12c>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a43      	ldr	r2, [pc, #268]	; (8000a6c <MX_GPIO_Init+0x12c>)
 8000960:	f043 0304 	orr.w	r3, r3, #4
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b41      	ldr	r3, [pc, #260]	; (8000a6c <MX_GPIO_Init+0x12c>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0304 	and.w	r3, r3, #4
 800096e:	60bb      	str	r3, [r7, #8]
 8000970:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000972:	2300      	movs	r3, #0
 8000974:	607b      	str	r3, [r7, #4]
 8000976:	4b3d      	ldr	r3, [pc, #244]	; (8000a6c <MX_GPIO_Init+0x12c>)
 8000978:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800097a:	4a3c      	ldr	r2, [pc, #240]	; (8000a6c <MX_GPIO_Init+0x12c>)
 800097c:	f043 0301 	orr.w	r3, r3, #1
 8000980:	6313      	str	r3, [r2, #48]	; 0x30
 8000982:	4b3a      	ldr	r3, [pc, #232]	; (8000a6c <MX_GPIO_Init+0x12c>)
 8000984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000986:	f003 0301 	and.w	r3, r3, #1
 800098a:	607b      	str	r3, [r7, #4]
 800098c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800098e:	2300      	movs	r3, #0
 8000990:	603b      	str	r3, [r7, #0]
 8000992:	4b36      	ldr	r3, [pc, #216]	; (8000a6c <MX_GPIO_Init+0x12c>)
 8000994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000996:	4a35      	ldr	r2, [pc, #212]	; (8000a6c <MX_GPIO_Init+0x12c>)
 8000998:	f043 0302 	orr.w	r3, r3, #2
 800099c:	6313      	str	r3, [r2, #48]	; 0x30
 800099e:	4b33      	ldr	r3, [pc, #204]	; (8000a6c <MX_GPIO_Init+0x12c>)
 80009a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009a2:	f003 0302 	and.w	r3, r3, #2
 80009a6:	603b      	str	r3, [r7, #0]
 80009a8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80009aa:	2200      	movs	r2, #0
 80009ac:	21f3      	movs	r1, #243	; 0xf3
 80009ae:	4830      	ldr	r0, [pc, #192]	; (8000a70 <MX_GPIO_Init+0x130>)
 80009b0:	f000 fd48 	bl	8001444 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80009b4:	2200      	movs	r2, #0
 80009b6:	2140      	movs	r1, #64	; 0x40
 80009b8:	482e      	ldr	r0, [pc, #184]	; (8000a74 <MX_GPIO_Init+0x134>)
 80009ba:	f000 fd43 	bl	8001444 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80009be:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80009c4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80009c8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009ca:	2300      	movs	r3, #0
 80009cc:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80009ce:	f107 030c 	add.w	r3, r7, #12
 80009d2:	4619      	mov	r1, r3
 80009d4:	4828      	ldr	r0, [pc, #160]	; (8000a78 <MX_GPIO_Init+0x138>)
 80009d6:	f000 fbb1 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80009da:	23f3      	movs	r3, #243	; 0xf3
 80009dc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009de:	2301      	movs	r3, #1
 80009e0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e2:	2300      	movs	r3, #0
 80009e4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009e6:	2300      	movs	r3, #0
 80009e8:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009ea:	f107 030c 	add.w	r3, r7, #12
 80009ee:	4619      	mov	r1, r3
 80009f0:	481f      	ldr	r0, [pc, #124]	; (8000a70 <MX_GPIO_Init+0x130>)
 80009f2:	f000 fba3 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80009f6:	230c      	movs	r3, #12
 80009f8:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009fa:	2302      	movs	r3, #2
 80009fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a02:	2303      	movs	r3, #3
 8000a04:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000a06:	2307      	movs	r3, #7
 8000a08:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a0a:	f107 030c 	add.w	r3, r7, #12
 8000a0e:	4619      	mov	r1, r3
 8000a10:	4817      	ldr	r0, [pc, #92]	; (8000a70 <MX_GPIO_Init+0x130>)
 8000a12:	f000 fb93 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000a16:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000a1a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a1c:	2300      	movs	r3, #0
 8000a1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a20:	2300      	movs	r3, #0
 8000a22:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4619      	mov	r1, r3
 8000a2a:	4813      	ldr	r0, [pc, #76]	; (8000a78 <MX_GPIO_Init+0x138>)
 8000a2c:	f000 fb86 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000a30:	2338      	movs	r3, #56	; 0x38
 8000a32:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a34:	2300      	movs	r3, #0
 8000a36:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000a38:	2301      	movs	r3, #1
 8000a3a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a3c:	f107 030c 	add.w	r3, r7, #12
 8000a40:	4619      	mov	r1, r3
 8000a42:	480c      	ldr	r0, [pc, #48]	; (8000a74 <MX_GPIO_Init+0x134>)
 8000a44:	f000 fb7a 	bl	800113c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000a48:	2340      	movs	r3, #64	; 0x40
 8000a4a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a50:	2300      	movs	r3, #0
 8000a52:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a54:	2300      	movs	r3, #0
 8000a56:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000a58:	f107 030c 	add.w	r3, r7, #12
 8000a5c:	4619      	mov	r1, r3
 8000a5e:	4805      	ldr	r0, [pc, #20]	; (8000a74 <MX_GPIO_Init+0x134>)
 8000a60:	f000 fb6c 	bl	800113c <HAL_GPIO_Init>

}
 8000a64:	bf00      	nop
 8000a66:	3720      	adds	r7, #32
 8000a68:	46bd      	mov	sp, r7
 8000a6a:	bd80      	pop	{r7, pc}
 8000a6c:	40023800 	.word	0x40023800
 8000a70:	40020000 	.word	0x40020000
 8000a74:	40020400 	.word	0x40020400
 8000a78:	40020800 	.word	0x40020800

08000a7c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000a7c:	b480      	push	{r7}
 8000a7e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000a80:	b672      	cpsid	i
}
 8000a82:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000a84:	e7fe      	b.n	8000a84 <Error_Handler+0x8>
	...

08000a88 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	b082      	sub	sp, #8
 8000a8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000a8e:	2300      	movs	r3, #0
 8000a90:	607b      	str	r3, [r7, #4]
 8000a92:	4b10      	ldr	r3, [pc, #64]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000a96:	4a0f      	ldr	r2, [pc, #60]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000a98:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000a9c:	6453      	str	r3, [r2, #68]	; 0x44
 8000a9e:	4b0d      	ldr	r3, [pc, #52]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000aa0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aa2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000aa6:	607b      	str	r3, [r7, #4]
 8000aa8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000aaa:	2300      	movs	r3, #0
 8000aac:	603b      	str	r3, [r7, #0]
 8000aae:	4b09      	ldr	r3, [pc, #36]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab2:	4a08      	ldr	r2, [pc, #32]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000ab4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ab8:	6413      	str	r3, [r2, #64]	; 0x40
 8000aba:	4b06      	ldr	r3, [pc, #24]	; (8000ad4 <HAL_MspInit+0x4c>)
 8000abc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000abe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ac2:	603b      	str	r3, [r7, #0]
 8000ac4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8000ac6:	2007      	movs	r0, #7
 8000ac8:	f000 fb04 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000acc:	bf00      	nop
 8000ace:	3708      	adds	r7, #8
 8000ad0:	46bd      	mov	sp, r7
 8000ad2:	bd80      	pop	{r7, pc}
 8000ad4:	40023800 	.word	0x40023800

08000ad8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b08a      	sub	sp, #40	; 0x28
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ae0:	f107 0314 	add.w	r3, r7, #20
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	601a      	str	r2, [r3, #0]
 8000ae8:	605a      	str	r2, [r3, #4]
 8000aea:	609a      	str	r2, [r3, #8]
 8000aec:	60da      	str	r2, [r3, #12]
 8000aee:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	4a19      	ldr	r2, [pc, #100]	; (8000b5c <HAL_I2C_MspInit+0x84>)
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d12c      	bne.n	8000b54 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000afa:	2300      	movs	r3, #0
 8000afc:	613b      	str	r3, [r7, #16]
 8000afe:	4b18      	ldr	r3, [pc, #96]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b02:	4a17      	ldr	r2, [pc, #92]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b04:	f043 0302 	orr.w	r3, r3, #2
 8000b08:	6313      	str	r3, [r2, #48]	; 0x30
 8000b0a:	4b15      	ldr	r3, [pc, #84]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b0e:	f003 0302 	and.w	r3, r3, #2
 8000b12:	613b      	str	r3, [r7, #16]
 8000b14:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000b16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000b1a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000b1c:	2312      	movs	r3, #18
 8000b1e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b20:	2300      	movs	r3, #0
 8000b22:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000b24:	2303      	movs	r3, #3
 8000b26:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000b28:	2304      	movs	r3, #4
 8000b2a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000b2c:	f107 0314 	add.w	r3, r7, #20
 8000b30:	4619      	mov	r1, r3
 8000b32:	480c      	ldr	r0, [pc, #48]	; (8000b64 <HAL_I2C_MspInit+0x8c>)
 8000b34:	f000 fb02 	bl	800113c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000b38:	2300      	movs	r3, #0
 8000b3a:	60fb      	str	r3, [r7, #12]
 8000b3c:	4b08      	ldr	r3, [pc, #32]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b40:	4a07      	ldr	r2, [pc, #28]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b42:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000b46:	6413      	str	r3, [r2, #64]	; 0x40
 8000b48:	4b05      	ldr	r3, [pc, #20]	; (8000b60 <HAL_I2C_MspInit+0x88>)
 8000b4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b4c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8000b54:	bf00      	nop
 8000b56:	3728      	adds	r7, #40	; 0x28
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	bd80      	pop	{r7, pc}
 8000b5c:	40005400 	.word	0x40005400
 8000b60:	40023800 	.word	0x40023800
 8000b64:	40020400 	.word	0x40020400

08000b68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a28      	ldr	r2, [pc, #160]	; (8000c28 <HAL_SPI_MspInit+0xc0>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d14a      	bne.n	8000c20 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	613b      	str	r3, [r7, #16]
 8000b8e:	4b27      	ldr	r3, [pc, #156]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b92:	4a26      	ldr	r2, [pc, #152]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000b94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b98:	6413      	str	r3, [r2, #64]	; 0x40
 8000b9a:	4b24      	ldr	r3, [pc, #144]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000b9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000ba2:	613b      	str	r3, [r7, #16]
 8000ba4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000ba6:	2300      	movs	r3, #0
 8000ba8:	60fb      	str	r3, [r7, #12]
 8000baa:	4b20      	ldr	r3, [pc, #128]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a1f      	ldr	r2, [pc, #124]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000bb0:	f043 0304 	orr.w	r3, r3, #4
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b1d      	ldr	r3, [pc, #116]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0304 	and.w	r3, r3, #4
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	60bb      	str	r3, [r7, #8]
 8000bc6:	4b19      	ldr	r3, [pc, #100]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bca:	4a18      	ldr	r2, [pc, #96]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000bcc:	f043 0302 	orr.w	r3, r3, #2
 8000bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8000bd2:	4b16      	ldr	r3, [pc, #88]	; (8000c2c <HAL_SPI_MspInit+0xc4>)
 8000bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd6:	f003 0302 	and.w	r3, r3, #2
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000bde:	2308      	movs	r3, #8
 8000be0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000be2:	2302      	movs	r3, #2
 8000be4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bea:	2303      	movs	r3, #3
 8000bec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000bee:	2305      	movs	r3, #5
 8000bf0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000bf2:	f107 0314 	add.w	r3, r7, #20
 8000bf6:	4619      	mov	r1, r3
 8000bf8:	480d      	ldr	r0, [pc, #52]	; (8000c30 <HAL_SPI_MspInit+0xc8>)
 8000bfa:	f000 fa9f 	bl	800113c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000bfe:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000c02:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c04:	2302      	movs	r3, #2
 8000c06:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000c0c:	2303      	movs	r3, #3
 8000c0e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8000c10:	2305      	movs	r3, #5
 8000c12:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c14:	f107 0314 	add.w	r3, r7, #20
 8000c18:	4619      	mov	r1, r3
 8000c1a:	4806      	ldr	r0, [pc, #24]	; (8000c34 <HAL_SPI_MspInit+0xcc>)
 8000c1c:	f000 fa8e 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8000c20:	bf00      	nop
 8000c22:	3728      	adds	r7, #40	; 0x28
 8000c24:	46bd      	mov	sp, r7
 8000c26:	bd80      	pop	{r7, pc}
 8000c28:	40003800 	.word	0x40003800
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40020800 	.word	0x40020800
 8000c34:	40020400 	.word	0x40020400

08000c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b480      	push	{r7}
 8000c3a:	b085      	sub	sp, #20
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c48:	d10d      	bne.n	8000c66 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	2300      	movs	r3, #0
 8000c4c:	60fb      	str	r3, [r7, #12]
 8000c4e:	4b09      	ldr	r3, [pc, #36]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c52:	4a08      	ldr	r2, [pc, #32]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c54:	f043 0301 	orr.w	r3, r3, #1
 8000c58:	6413      	str	r3, [r2, #64]	; 0x40
 8000c5a:	4b06      	ldr	r3, [pc, #24]	; (8000c74 <HAL_TIM_Base_MspInit+0x3c>)
 8000c5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c5e:	f003 0301 	and.w	r3, r3, #1
 8000c62:	60fb      	str	r3, [r7, #12]
 8000c64:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 8000c66:	bf00      	nop
 8000c68:	3714      	adds	r7, #20
 8000c6a:	46bd      	mov	sp, r7
 8000c6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c70:	4770      	bx	lr
 8000c72:	bf00      	nop
 8000c74:	40023800 	.word	0x40023800

08000c78 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c78:	b580      	push	{r7, lr}
 8000c7a:	b088      	sub	sp, #32
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c80:	f107 030c 	add.w	r3, r7, #12
 8000c84:	2200      	movs	r2, #0
 8000c86:	601a      	str	r2, [r3, #0]
 8000c88:	605a      	str	r2, [r3, #4]
 8000c8a:	609a      	str	r2, [r3, #8]
 8000c8c:	60da      	str	r2, [r3, #12]
 8000c8e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000c90:	687b      	ldr	r3, [r7, #4]
 8000c92:	681b      	ldr	r3, [r3, #0]
 8000c94:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8000c98:	d11e      	bne.n	8000cd8 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c9a:	2300      	movs	r3, #0
 8000c9c:	60bb      	str	r3, [r7, #8]
 8000c9e:	4b10      	ldr	r3, [pc, #64]	; (8000ce0 <HAL_TIM_MspPostInit+0x68>)
 8000ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca2:	4a0f      	ldr	r2, [pc, #60]	; (8000ce0 <HAL_TIM_MspPostInit+0x68>)
 8000ca4:	f043 0302 	orr.w	r3, r3, #2
 8000ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8000caa:	4b0d      	ldr	r3, [pc, #52]	; (8000ce0 <HAL_TIM_MspPostInit+0x68>)
 8000cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cae:	f003 0302 	and.w	r3, r3, #2
 8000cb2:	60bb      	str	r3, [r7, #8]
 8000cb4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000cb6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8000cba:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000cbc:	2302      	movs	r3, #2
 8000cbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc0:	2300      	movs	r3, #0
 8000cc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cc4:	2300      	movs	r3, #0
 8000cc6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000cc8:	2301      	movs	r3, #1
 8000cca:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ccc:	f107 030c 	add.w	r3, r7, #12
 8000cd0:	4619      	mov	r1, r3
 8000cd2:	4804      	ldr	r0, [pc, #16]	; (8000ce4 <HAL_TIM_MspPostInit+0x6c>)
 8000cd4:	f000 fa32 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000cd8:	bf00      	nop
 8000cda:	3720      	adds	r7, #32
 8000cdc:	46bd      	mov	sp, r7
 8000cde:	bd80      	pop	{r7, pc}
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020400 	.word	0x40020400

08000ce8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b08a      	sub	sp, #40	; 0x28
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cf0:	f107 0314 	add.w	r3, r7, #20
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	601a      	str	r2, [r3, #0]
 8000cf8:	605a      	str	r2, [r3, #4]
 8000cfa:	609a      	str	r2, [r3, #8]
 8000cfc:	60da      	str	r2, [r3, #12]
 8000cfe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	681b      	ldr	r3, [r3, #0]
 8000d04:	4a19      	ldr	r2, [pc, #100]	; (8000d6c <HAL_UART_MspInit+0x84>)
 8000d06:	4293      	cmp	r3, r2
 8000d08:	d12c      	bne.n	8000d64 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d0a:	2300      	movs	r3, #0
 8000d0c:	613b      	str	r3, [r7, #16]
 8000d0e:	4b18      	ldr	r3, [pc, #96]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d12:	4a17      	ldr	r2, [pc, #92]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d14:	f043 0310 	orr.w	r3, r3, #16
 8000d18:	6453      	str	r3, [r2, #68]	; 0x44
 8000d1a:	4b15      	ldr	r3, [pc, #84]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000d1e:	f003 0310 	and.w	r3, r3, #16
 8000d22:	613b      	str	r3, [r7, #16]
 8000d24:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000d26:	2300      	movs	r3, #0
 8000d28:	60fb      	str	r3, [r7, #12]
 8000d2a:	4b11      	ldr	r3, [pc, #68]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d2e:	4a10      	ldr	r2, [pc, #64]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d30:	f043 0301 	orr.w	r3, r3, #1
 8000d34:	6313      	str	r3, [r2, #48]	; 0x30
 8000d36:	4b0e      	ldr	r3, [pc, #56]	; (8000d70 <HAL_UART_MspInit+0x88>)
 8000d38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d3a:	f003 0301 	and.w	r3, r3, #1
 8000d3e:	60fb      	str	r3, [r7, #12]
 8000d40:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8000d42:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8000d46:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d48:	2302      	movs	r3, #2
 8000d4a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d4c:	2300      	movs	r3, #0
 8000d4e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d50:	2303      	movs	r3, #3
 8000d52:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d54:	2307      	movs	r3, #7
 8000d56:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d58:	f107 0314 	add.w	r3, r7, #20
 8000d5c:	4619      	mov	r1, r3
 8000d5e:	4805      	ldr	r0, [pc, #20]	; (8000d74 <HAL_UART_MspInit+0x8c>)
 8000d60:	f000 f9ec 	bl	800113c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d64:	bf00      	nop
 8000d66:	3728      	adds	r7, #40	; 0x28
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	bd80      	pop	{r7, pc}
 8000d6c:	40011000 	.word	0x40011000
 8000d70:	40023800 	.word	0x40023800
 8000d74:	40020000 	.word	0x40020000

08000d78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d7c:	e7fe      	b.n	8000d7c <NMI_Handler+0x4>

08000d7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7e:	b480      	push	{r7}
 8000d80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d82:	e7fe      	b.n	8000d82 <HardFault_Handler+0x4>

08000d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d84:	b480      	push	{r7}
 8000d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d88:	e7fe      	b.n	8000d88 <MemManage_Handler+0x4>

08000d8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d8a:	b480      	push	{r7}
 8000d8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8e:	e7fe      	b.n	8000d8e <BusFault_Handler+0x4>

08000d90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d94:	e7fe      	b.n	8000d94 <UsageFault_Handler+0x4>

08000d96 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d9a:	bf00      	nop
 8000d9c:	46bd      	mov	sp, r7
 8000d9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da2:	4770      	bx	lr

08000da4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000da4:	b480      	push	{r7}
 8000da6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000da8:	bf00      	nop
 8000daa:	46bd      	mov	sp, r7
 8000dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db0:	4770      	bx	lr

08000db2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000db2:	b480      	push	{r7}
 8000db4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000db6:	bf00      	nop
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr

08000dc0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dc0:	b580      	push	{r7, lr}
 8000dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000dc4:	f000 f890 	bl	8000ee8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000dc8:	bf00      	nop
 8000dca:	bd80      	pop	{r7, pc}

08000dcc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000dcc:	b480      	push	{r7}
 8000dce:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000dd0:	4b06      	ldr	r3, [pc, #24]	; (8000dec <SystemInit+0x20>)
 8000dd2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000dd6:	4a05      	ldr	r2, [pc, #20]	; (8000dec <SystemInit+0x20>)
 8000dd8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000ddc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000de0:	bf00      	nop
 8000de2:	46bd      	mov	sp, r7
 8000de4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000de8:	4770      	bx	lr
 8000dea:	bf00      	nop
 8000dec:	e000ed00 	.word	0xe000ed00

08000df0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000df0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e28 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000df4:	480d      	ldr	r0, [pc, #52]	; (8000e2c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000df6:	490e      	ldr	r1, [pc, #56]	; (8000e30 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000df8:	4a0e      	ldr	r2, [pc, #56]	; (8000e34 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dfa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000dfc:	e002      	b.n	8000e04 <LoopCopyDataInit>

08000dfe <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dfe:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e00:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e02:	3304      	adds	r3, #4

08000e04 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e04:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e06:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e08:	d3f9      	bcc.n	8000dfe <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e0a:	4a0b      	ldr	r2, [pc, #44]	; (8000e38 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000e0c:	4c0b      	ldr	r4, [pc, #44]	; (8000e3c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000e0e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e10:	e001      	b.n	8000e16 <LoopFillZerobss>

08000e12 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e12:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e14:	3204      	adds	r2, #4

08000e16 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e16:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e18:	d3fb      	bcc.n	8000e12 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000e1a:	f7ff ffd7 	bl	8000dcc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000e1e:	f002 fd77 	bl	8003910 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e22:	f7ff fbe7 	bl	80005f4 <main>
  bx  lr    
 8000e26:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000e28:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8000e2c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000e30:	20000010 	.word	0x20000010
  ldr r2, =_sidata
 8000e34:	080039a8 	.word	0x080039a8
  ldr r2, =_sbss
 8000e38:	20000010 	.word	0x20000010
  ldr r4, =_ebss
 8000e3c:	20000168 	.word	0x20000168

08000e40 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000e40:	e7fe      	b.n	8000e40 <ADC_IRQHandler>
	...

08000e44 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000e48:	4b0e      	ldr	r3, [pc, #56]	; (8000e84 <HAL_Init+0x40>)
 8000e4a:	681b      	ldr	r3, [r3, #0]
 8000e4c:	4a0d      	ldr	r2, [pc, #52]	; (8000e84 <HAL_Init+0x40>)
 8000e4e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000e52:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000e54:	4b0b      	ldr	r3, [pc, #44]	; (8000e84 <HAL_Init+0x40>)
 8000e56:	681b      	ldr	r3, [r3, #0]
 8000e58:	4a0a      	ldr	r2, [pc, #40]	; (8000e84 <HAL_Init+0x40>)
 8000e5a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000e5e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000e60:	4b08      	ldr	r3, [pc, #32]	; (8000e84 <HAL_Init+0x40>)
 8000e62:	681b      	ldr	r3, [r3, #0]
 8000e64:	4a07      	ldr	r2, [pc, #28]	; (8000e84 <HAL_Init+0x40>)
 8000e66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000e6a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e6c:	2003      	movs	r0, #3
 8000e6e:	f000 f931 	bl	80010d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e72:	2000      	movs	r0, #0
 8000e74:	f000 f808 	bl	8000e88 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e78:	f7ff fe06 	bl	8000a88 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e7c:	2300      	movs	r3, #0
}
 8000e7e:	4618      	mov	r0, r3
 8000e80:	bd80      	pop	{r7, pc}
 8000e82:	bf00      	nop
 8000e84:	40023c00 	.word	0x40023c00

08000e88 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e88:	b580      	push	{r7, lr}
 8000e8a:	b082      	sub	sp, #8
 8000e8c:	af00      	add	r7, sp, #0
 8000e8e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e90:	4b12      	ldr	r3, [pc, #72]	; (8000edc <HAL_InitTick+0x54>)
 8000e92:	681a      	ldr	r2, [r3, #0]
 8000e94:	4b12      	ldr	r3, [pc, #72]	; (8000ee0 <HAL_InitTick+0x58>)
 8000e96:	781b      	ldrb	r3, [r3, #0]
 8000e98:	4619      	mov	r1, r3
 8000e9a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000e9e:	fbb3 f3f1 	udiv	r3, r3, r1
 8000ea2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	f000 f93b 	bl	8001122 <HAL_SYSTICK_Config>
 8000eac:	4603      	mov	r3, r0
 8000eae:	2b00      	cmp	r3, #0
 8000eb0:	d001      	beq.n	8000eb6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000eb2:	2301      	movs	r3, #1
 8000eb4:	e00e      	b.n	8000ed4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	2b0f      	cmp	r3, #15
 8000eba:	d80a      	bhi.n	8000ed2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	6879      	ldr	r1, [r7, #4]
 8000ec0:	f04f 30ff 	mov.w	r0, #4294967295
 8000ec4:	f000 f911 	bl	80010ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000ec8:	4a06      	ldr	r2, [pc, #24]	; (8000ee4 <HAL_InitTick+0x5c>)
 8000eca:	687b      	ldr	r3, [r7, #4]
 8000ecc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	e000      	b.n	8000ed4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000ed2:	2301      	movs	r3, #1
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	3708      	adds	r7, #8
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bd80      	pop	{r7, pc}
 8000edc:	20000004 	.word	0x20000004
 8000ee0:	2000000c 	.word	0x2000000c
 8000ee4:	20000008 	.word	0x20000008

08000ee8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000ee8:	b480      	push	{r7}
 8000eea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000eec:	4b06      	ldr	r3, [pc, #24]	; (8000f08 <HAL_IncTick+0x20>)
 8000eee:	781b      	ldrb	r3, [r3, #0]
 8000ef0:	461a      	mov	r2, r3
 8000ef2:	4b06      	ldr	r3, [pc, #24]	; (8000f0c <HAL_IncTick+0x24>)
 8000ef4:	681b      	ldr	r3, [r3, #0]
 8000ef6:	4413      	add	r3, r2
 8000ef8:	4a04      	ldr	r2, [pc, #16]	; (8000f0c <HAL_IncTick+0x24>)
 8000efa:	6013      	str	r3, [r2, #0]
}
 8000efc:	bf00      	nop
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr
 8000f06:	bf00      	nop
 8000f08:	2000000c 	.word	0x2000000c
 8000f0c:	20000164 	.word	0x20000164

08000f10 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000f10:	b480      	push	{r7}
 8000f12:	af00      	add	r7, sp, #0
  return uwTick;
 8000f14:	4b03      	ldr	r3, [pc, #12]	; (8000f24 <HAL_GetTick+0x14>)
 8000f16:	681b      	ldr	r3, [r3, #0]
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	46bd      	mov	sp, r7
 8000f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f20:	4770      	bx	lr
 8000f22:	bf00      	nop
 8000f24:	20000164 	.word	0x20000164

08000f28 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000f28:	b580      	push	{r7, lr}
 8000f2a:	b084      	sub	sp, #16
 8000f2c:	af00      	add	r7, sp, #0
 8000f2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000f30:	f7ff ffee 	bl	8000f10 <HAL_GetTick>
 8000f34:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000f36:	687b      	ldr	r3, [r7, #4]
 8000f38:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000f3a:	68fb      	ldr	r3, [r7, #12]
 8000f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000f40:	d005      	beq.n	8000f4e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000f42:	4b0a      	ldr	r3, [pc, #40]	; (8000f6c <HAL_Delay+0x44>)
 8000f44:	781b      	ldrb	r3, [r3, #0]
 8000f46:	461a      	mov	r2, r3
 8000f48:	68fb      	ldr	r3, [r7, #12]
 8000f4a:	4413      	add	r3, r2
 8000f4c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000f4e:	bf00      	nop
 8000f50:	f7ff ffde 	bl	8000f10 <HAL_GetTick>
 8000f54:	4602      	mov	r2, r0
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	1ad3      	subs	r3, r2, r3
 8000f5a:	68fa      	ldr	r2, [r7, #12]
 8000f5c:	429a      	cmp	r2, r3
 8000f5e:	d8f7      	bhi.n	8000f50 <HAL_Delay+0x28>
  {
  }
}
 8000f60:	bf00      	nop
 8000f62:	bf00      	nop
 8000f64:	3710      	adds	r7, #16
 8000f66:	46bd      	mov	sp, r7
 8000f68:	bd80      	pop	{r7, pc}
 8000f6a:	bf00      	nop
 8000f6c:	2000000c 	.word	0x2000000c

08000f70 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000f70:	b480      	push	{r7}
 8000f72:	b085      	sub	sp, #20
 8000f74:	af00      	add	r7, sp, #0
 8000f76:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000f78:	687b      	ldr	r3, [r7, #4]
 8000f7a:	f003 0307 	and.w	r3, r3, #7
 8000f7e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000f80:	4b0c      	ldr	r3, [pc, #48]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000f82:	68db      	ldr	r3, [r3, #12]
 8000f84:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000f86:	68ba      	ldr	r2, [r7, #8]
 8000f88:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000f8c:	4013      	ands	r3, r2
 8000f8e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000f90:	68fb      	ldr	r3, [r7, #12]
 8000f92:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000f94:	68bb      	ldr	r3, [r7, #8]
 8000f96:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000f98:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000f9c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000fa0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000fa2:	4a04      	ldr	r2, [pc, #16]	; (8000fb4 <__NVIC_SetPriorityGrouping+0x44>)
 8000fa4:	68bb      	ldr	r3, [r7, #8]
 8000fa6:	60d3      	str	r3, [r2, #12]
}
 8000fa8:	bf00      	nop
 8000faa:	3714      	adds	r7, #20
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	e000ed00 	.word	0xe000ed00

08000fb8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000fbc:	4b04      	ldr	r3, [pc, #16]	; (8000fd0 <__NVIC_GetPriorityGrouping+0x18>)
 8000fbe:	68db      	ldr	r3, [r3, #12]
 8000fc0:	0a1b      	lsrs	r3, r3, #8
 8000fc2:	f003 0307 	and.w	r3, r3, #7
}
 8000fc6:	4618      	mov	r0, r3
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	e000ed00 	.word	0xe000ed00

08000fd4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	b083      	sub	sp, #12
 8000fd8:	af00      	add	r7, sp, #0
 8000fda:	4603      	mov	r3, r0
 8000fdc:	6039      	str	r1, [r7, #0]
 8000fde:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000fe0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	db0a      	blt.n	8000ffe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000fe8:	683b      	ldr	r3, [r7, #0]
 8000fea:	b2da      	uxtb	r2, r3
 8000fec:	490c      	ldr	r1, [pc, #48]	; (8001020 <__NVIC_SetPriority+0x4c>)
 8000fee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ff2:	0112      	lsls	r2, r2, #4
 8000ff4:	b2d2      	uxtb	r2, r2
 8000ff6:	440b      	add	r3, r1
 8000ff8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000ffc:	e00a      	b.n	8001014 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000ffe:	683b      	ldr	r3, [r7, #0]
 8001000:	b2da      	uxtb	r2, r3
 8001002:	4908      	ldr	r1, [pc, #32]	; (8001024 <__NVIC_SetPriority+0x50>)
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	f003 030f 	and.w	r3, r3, #15
 800100a:	3b04      	subs	r3, #4
 800100c:	0112      	lsls	r2, r2, #4
 800100e:	b2d2      	uxtb	r2, r2
 8001010:	440b      	add	r3, r1
 8001012:	761a      	strb	r2, [r3, #24]
}
 8001014:	bf00      	nop
 8001016:	370c      	adds	r7, #12
 8001018:	46bd      	mov	sp, r7
 800101a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800101e:	4770      	bx	lr
 8001020:	e000e100 	.word	0xe000e100
 8001024:	e000ed00 	.word	0xe000ed00

08001028 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001028:	b480      	push	{r7}
 800102a:	b089      	sub	sp, #36	; 0x24
 800102c:	af00      	add	r7, sp, #0
 800102e:	60f8      	str	r0, [r7, #12]
 8001030:	60b9      	str	r1, [r7, #8]
 8001032:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001034:	68fb      	ldr	r3, [r7, #12]
 8001036:	f003 0307 	and.w	r3, r3, #7
 800103a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800103c:	69fb      	ldr	r3, [r7, #28]
 800103e:	f1c3 0307 	rsb	r3, r3, #7
 8001042:	2b04      	cmp	r3, #4
 8001044:	bf28      	it	cs
 8001046:	2304      	movcs	r3, #4
 8001048:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800104a:	69fb      	ldr	r3, [r7, #28]
 800104c:	3304      	adds	r3, #4
 800104e:	2b06      	cmp	r3, #6
 8001050:	d902      	bls.n	8001058 <NVIC_EncodePriority+0x30>
 8001052:	69fb      	ldr	r3, [r7, #28]
 8001054:	3b03      	subs	r3, #3
 8001056:	e000      	b.n	800105a <NVIC_EncodePriority+0x32>
 8001058:	2300      	movs	r3, #0
 800105a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800105c:	f04f 32ff 	mov.w	r2, #4294967295
 8001060:	69bb      	ldr	r3, [r7, #24]
 8001062:	fa02 f303 	lsl.w	r3, r2, r3
 8001066:	43da      	mvns	r2, r3
 8001068:	68bb      	ldr	r3, [r7, #8]
 800106a:	401a      	ands	r2, r3
 800106c:	697b      	ldr	r3, [r7, #20]
 800106e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001070:	f04f 31ff 	mov.w	r1, #4294967295
 8001074:	697b      	ldr	r3, [r7, #20]
 8001076:	fa01 f303 	lsl.w	r3, r1, r3
 800107a:	43d9      	mvns	r1, r3
 800107c:	687b      	ldr	r3, [r7, #4]
 800107e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001080:	4313      	orrs	r3, r2
         );
}
 8001082:	4618      	mov	r0, r3
 8001084:	3724      	adds	r7, #36	; 0x24
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr
	...

08001090 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001090:	b580      	push	{r7, lr}
 8001092:	b082      	sub	sp, #8
 8001094:	af00      	add	r7, sp, #0
 8001096:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	3b01      	subs	r3, #1
 800109c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80010a0:	d301      	bcc.n	80010a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80010a2:	2301      	movs	r3, #1
 80010a4:	e00f      	b.n	80010c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80010a6:	4a0a      	ldr	r2, [pc, #40]	; (80010d0 <SysTick_Config+0x40>)
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	3b01      	subs	r3, #1
 80010ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80010ae:	210f      	movs	r1, #15
 80010b0:	f04f 30ff 	mov.w	r0, #4294967295
 80010b4:	f7ff ff8e 	bl	8000fd4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80010b8:	4b05      	ldr	r3, [pc, #20]	; (80010d0 <SysTick_Config+0x40>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80010be:	4b04      	ldr	r3, [pc, #16]	; (80010d0 <SysTick_Config+0x40>)
 80010c0:	2207      	movs	r2, #7
 80010c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80010c4:	2300      	movs	r3, #0
}
 80010c6:	4618      	mov	r0, r3
 80010c8:	3708      	adds	r7, #8
 80010ca:	46bd      	mov	sp, r7
 80010cc:	bd80      	pop	{r7, pc}
 80010ce:	bf00      	nop
 80010d0:	e000e010 	.word	0xe000e010

080010d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80010dc:	6878      	ldr	r0, [r7, #4]
 80010de:	f7ff ff47 	bl	8000f70 <__NVIC_SetPriorityGrouping>
}
 80010e2:	bf00      	nop
 80010e4:	3708      	adds	r7, #8
 80010e6:	46bd      	mov	sp, r7
 80010e8:	bd80      	pop	{r7, pc}

080010ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80010ea:	b580      	push	{r7, lr}
 80010ec:	b086      	sub	sp, #24
 80010ee:	af00      	add	r7, sp, #0
 80010f0:	4603      	mov	r3, r0
 80010f2:	60b9      	str	r1, [r7, #8]
 80010f4:	607a      	str	r2, [r7, #4]
 80010f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80010f8:	2300      	movs	r3, #0
 80010fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80010fc:	f7ff ff5c 	bl	8000fb8 <__NVIC_GetPriorityGrouping>
 8001100:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001102:	687a      	ldr	r2, [r7, #4]
 8001104:	68b9      	ldr	r1, [r7, #8]
 8001106:	6978      	ldr	r0, [r7, #20]
 8001108:	f7ff ff8e 	bl	8001028 <NVIC_EncodePriority>
 800110c:	4602      	mov	r2, r0
 800110e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001112:	4611      	mov	r1, r2
 8001114:	4618      	mov	r0, r3
 8001116:	f7ff ff5d 	bl	8000fd4 <__NVIC_SetPriority>
}
 800111a:	bf00      	nop
 800111c:	3718      	adds	r7, #24
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}

08001122 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001122:	b580      	push	{r7, lr}
 8001124:	b082      	sub	sp, #8
 8001126:	af00      	add	r7, sp, #0
 8001128:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800112a:	6878      	ldr	r0, [r7, #4]
 800112c:	f7ff ffb0 	bl	8001090 <SysTick_Config>
 8001130:	4603      	mov	r3, r0
}
 8001132:	4618      	mov	r0, r3
 8001134:	3708      	adds	r7, #8
 8001136:	46bd      	mov	sp, r7
 8001138:	bd80      	pop	{r7, pc}
	...

0800113c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800113c:	b480      	push	{r7}
 800113e:	b089      	sub	sp, #36	; 0x24
 8001140:	af00      	add	r7, sp, #0
 8001142:	6078      	str	r0, [r7, #4]
 8001144:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001146:	2300      	movs	r3, #0
 8001148:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800114a:	2300      	movs	r3, #0
 800114c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800114e:	2300      	movs	r3, #0
 8001150:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001152:	2300      	movs	r3, #0
 8001154:	61fb      	str	r3, [r7, #28]
 8001156:	e159      	b.n	800140c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001158:	2201      	movs	r2, #1
 800115a:	69fb      	ldr	r3, [r7, #28]
 800115c:	fa02 f303 	lsl.w	r3, r2, r3
 8001160:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001162:	683b      	ldr	r3, [r7, #0]
 8001164:	681b      	ldr	r3, [r3, #0]
 8001166:	697a      	ldr	r2, [r7, #20]
 8001168:	4013      	ands	r3, r2
 800116a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800116c:	693a      	ldr	r2, [r7, #16]
 800116e:	697b      	ldr	r3, [r7, #20]
 8001170:	429a      	cmp	r2, r3
 8001172:	f040 8148 	bne.w	8001406 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001176:	683b      	ldr	r3, [r7, #0]
 8001178:	685b      	ldr	r3, [r3, #4]
 800117a:	f003 0303 	and.w	r3, r3, #3
 800117e:	2b01      	cmp	r3, #1
 8001180:	d005      	beq.n	800118e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001182:	683b      	ldr	r3, [r7, #0]
 8001184:	685b      	ldr	r3, [r3, #4]
 8001186:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800118a:	2b02      	cmp	r3, #2
 800118c:	d130      	bne.n	80011f0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	689b      	ldr	r3, [r3, #8]
 8001192:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001194:	69fb      	ldr	r3, [r7, #28]
 8001196:	005b      	lsls	r3, r3, #1
 8001198:	2203      	movs	r2, #3
 800119a:	fa02 f303 	lsl.w	r3, r2, r3
 800119e:	43db      	mvns	r3, r3
 80011a0:	69ba      	ldr	r2, [r7, #24]
 80011a2:	4013      	ands	r3, r2
 80011a4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80011a6:	683b      	ldr	r3, [r7, #0]
 80011a8:	68da      	ldr	r2, [r3, #12]
 80011aa:	69fb      	ldr	r3, [r7, #28]
 80011ac:	005b      	lsls	r3, r3, #1
 80011ae:	fa02 f303 	lsl.w	r3, r2, r3
 80011b2:	69ba      	ldr	r2, [r7, #24]
 80011b4:	4313      	orrs	r3, r2
 80011b6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80011b8:	687b      	ldr	r3, [r7, #4]
 80011ba:	69ba      	ldr	r2, [r7, #24]
 80011bc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80011be:	687b      	ldr	r3, [r7, #4]
 80011c0:	685b      	ldr	r3, [r3, #4]
 80011c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80011c4:	2201      	movs	r2, #1
 80011c6:	69fb      	ldr	r3, [r7, #28]
 80011c8:	fa02 f303 	lsl.w	r3, r2, r3
 80011cc:	43db      	mvns	r3, r3
 80011ce:	69ba      	ldr	r2, [r7, #24]
 80011d0:	4013      	ands	r3, r2
 80011d2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80011d4:	683b      	ldr	r3, [r7, #0]
 80011d6:	685b      	ldr	r3, [r3, #4]
 80011d8:	091b      	lsrs	r3, r3, #4
 80011da:	f003 0201 	and.w	r2, r3, #1
 80011de:	69fb      	ldr	r3, [r7, #28]
 80011e0:	fa02 f303 	lsl.w	r3, r2, r3
 80011e4:	69ba      	ldr	r2, [r7, #24]
 80011e6:	4313      	orrs	r3, r2
 80011e8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	69ba      	ldr	r2, [r7, #24]
 80011ee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	685b      	ldr	r3, [r3, #4]
 80011f4:	f003 0303 	and.w	r3, r3, #3
 80011f8:	2b03      	cmp	r3, #3
 80011fa:	d017      	beq.n	800122c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	68db      	ldr	r3, [r3, #12]
 8001200:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001202:	69fb      	ldr	r3, [r7, #28]
 8001204:	005b      	lsls	r3, r3, #1
 8001206:	2203      	movs	r2, #3
 8001208:	fa02 f303 	lsl.w	r3, r2, r3
 800120c:	43db      	mvns	r3, r3
 800120e:	69ba      	ldr	r2, [r7, #24]
 8001210:	4013      	ands	r3, r2
 8001212:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001214:	683b      	ldr	r3, [r7, #0]
 8001216:	689a      	ldr	r2, [r3, #8]
 8001218:	69fb      	ldr	r3, [r7, #28]
 800121a:	005b      	lsls	r3, r3, #1
 800121c:	fa02 f303 	lsl.w	r3, r2, r3
 8001220:	69ba      	ldr	r2, [r7, #24]
 8001222:	4313      	orrs	r3, r2
 8001224:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	69ba      	ldr	r2, [r7, #24]
 800122a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	685b      	ldr	r3, [r3, #4]
 8001230:	f003 0303 	and.w	r3, r3, #3
 8001234:	2b02      	cmp	r3, #2
 8001236:	d123      	bne.n	8001280 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001238:	69fb      	ldr	r3, [r7, #28]
 800123a:	08da      	lsrs	r2, r3, #3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	3208      	adds	r2, #8
 8001240:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001244:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001246:	69fb      	ldr	r3, [r7, #28]
 8001248:	f003 0307 	and.w	r3, r3, #7
 800124c:	009b      	lsls	r3, r3, #2
 800124e:	220f      	movs	r2, #15
 8001250:	fa02 f303 	lsl.w	r3, r2, r3
 8001254:	43db      	mvns	r3, r3
 8001256:	69ba      	ldr	r2, [r7, #24]
 8001258:	4013      	ands	r3, r2
 800125a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800125c:	683b      	ldr	r3, [r7, #0]
 800125e:	691a      	ldr	r2, [r3, #16]
 8001260:	69fb      	ldr	r3, [r7, #28]
 8001262:	f003 0307 	and.w	r3, r3, #7
 8001266:	009b      	lsls	r3, r3, #2
 8001268:	fa02 f303 	lsl.w	r3, r2, r3
 800126c:	69ba      	ldr	r2, [r7, #24]
 800126e:	4313      	orrs	r3, r2
 8001270:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001272:	69fb      	ldr	r3, [r7, #28]
 8001274:	08da      	lsrs	r2, r3, #3
 8001276:	687b      	ldr	r3, [r7, #4]
 8001278:	3208      	adds	r2, #8
 800127a:	69b9      	ldr	r1, [r7, #24]
 800127c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001280:	687b      	ldr	r3, [r7, #4]
 8001282:	681b      	ldr	r3, [r3, #0]
 8001284:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001286:	69fb      	ldr	r3, [r7, #28]
 8001288:	005b      	lsls	r3, r3, #1
 800128a:	2203      	movs	r2, #3
 800128c:	fa02 f303 	lsl.w	r3, r2, r3
 8001290:	43db      	mvns	r3, r3
 8001292:	69ba      	ldr	r2, [r7, #24]
 8001294:	4013      	ands	r3, r2
 8001296:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001298:	683b      	ldr	r3, [r7, #0]
 800129a:	685b      	ldr	r3, [r3, #4]
 800129c:	f003 0203 	and.w	r2, r3, #3
 80012a0:	69fb      	ldr	r3, [r7, #28]
 80012a2:	005b      	lsls	r3, r3, #1
 80012a4:	fa02 f303 	lsl.w	r3, r2, r3
 80012a8:	69ba      	ldr	r2, [r7, #24]
 80012aa:	4313      	orrs	r3, r2
 80012ac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	69ba      	ldr	r2, [r7, #24]
 80012b2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80012b4:	683b      	ldr	r3, [r7, #0]
 80012b6:	685b      	ldr	r3, [r3, #4]
 80012b8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80012bc:	2b00      	cmp	r3, #0
 80012be:	f000 80a2 	beq.w	8001406 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80012c2:	2300      	movs	r3, #0
 80012c4:	60fb      	str	r3, [r7, #12]
 80012c6:	4b57      	ldr	r3, [pc, #348]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80012c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012ca:	4a56      	ldr	r2, [pc, #344]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80012cc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80012d0:	6453      	str	r3, [r2, #68]	; 0x44
 80012d2:	4b54      	ldr	r3, [pc, #336]	; (8001424 <HAL_GPIO_Init+0x2e8>)
 80012d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80012d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80012da:	60fb      	str	r3, [r7, #12]
 80012dc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80012de:	4a52      	ldr	r2, [pc, #328]	; (8001428 <HAL_GPIO_Init+0x2ec>)
 80012e0:	69fb      	ldr	r3, [r7, #28]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	3302      	adds	r3, #2
 80012e6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80012ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	f003 0303 	and.w	r3, r3, #3
 80012f2:	009b      	lsls	r3, r3, #2
 80012f4:	220f      	movs	r2, #15
 80012f6:	fa02 f303 	lsl.w	r3, r2, r3
 80012fa:	43db      	mvns	r3, r3
 80012fc:	69ba      	ldr	r2, [r7, #24]
 80012fe:	4013      	ands	r3, r2
 8001300:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001302:	687b      	ldr	r3, [r7, #4]
 8001304:	4a49      	ldr	r2, [pc, #292]	; (800142c <HAL_GPIO_Init+0x2f0>)
 8001306:	4293      	cmp	r3, r2
 8001308:	d019      	beq.n	800133e <HAL_GPIO_Init+0x202>
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	4a48      	ldr	r2, [pc, #288]	; (8001430 <HAL_GPIO_Init+0x2f4>)
 800130e:	4293      	cmp	r3, r2
 8001310:	d013      	beq.n	800133a <HAL_GPIO_Init+0x1fe>
 8001312:	687b      	ldr	r3, [r7, #4]
 8001314:	4a47      	ldr	r2, [pc, #284]	; (8001434 <HAL_GPIO_Init+0x2f8>)
 8001316:	4293      	cmp	r3, r2
 8001318:	d00d      	beq.n	8001336 <HAL_GPIO_Init+0x1fa>
 800131a:	687b      	ldr	r3, [r7, #4]
 800131c:	4a46      	ldr	r2, [pc, #280]	; (8001438 <HAL_GPIO_Init+0x2fc>)
 800131e:	4293      	cmp	r3, r2
 8001320:	d007      	beq.n	8001332 <HAL_GPIO_Init+0x1f6>
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	4a45      	ldr	r2, [pc, #276]	; (800143c <HAL_GPIO_Init+0x300>)
 8001326:	4293      	cmp	r3, r2
 8001328:	d101      	bne.n	800132e <HAL_GPIO_Init+0x1f2>
 800132a:	2304      	movs	r3, #4
 800132c:	e008      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800132e:	2307      	movs	r3, #7
 8001330:	e006      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001332:	2303      	movs	r3, #3
 8001334:	e004      	b.n	8001340 <HAL_GPIO_Init+0x204>
 8001336:	2302      	movs	r3, #2
 8001338:	e002      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133a:	2301      	movs	r3, #1
 800133c:	e000      	b.n	8001340 <HAL_GPIO_Init+0x204>
 800133e:	2300      	movs	r3, #0
 8001340:	69fa      	ldr	r2, [r7, #28]
 8001342:	f002 0203 	and.w	r2, r2, #3
 8001346:	0092      	lsls	r2, r2, #2
 8001348:	4093      	lsls	r3, r2
 800134a:	69ba      	ldr	r2, [r7, #24]
 800134c:	4313      	orrs	r3, r2
 800134e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001350:	4935      	ldr	r1, [pc, #212]	; (8001428 <HAL_GPIO_Init+0x2ec>)
 8001352:	69fb      	ldr	r3, [r7, #28]
 8001354:	089b      	lsrs	r3, r3, #2
 8001356:	3302      	adds	r3, #2
 8001358:	69ba      	ldr	r2, [r7, #24]
 800135a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800135e:	4b38      	ldr	r3, [pc, #224]	; (8001440 <HAL_GPIO_Init+0x304>)
 8001360:	689b      	ldr	r3, [r3, #8]
 8001362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001364:	693b      	ldr	r3, [r7, #16]
 8001366:	43db      	mvns	r3, r3
 8001368:	69ba      	ldr	r2, [r7, #24]
 800136a:	4013      	ands	r3, r2
 800136c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	685b      	ldr	r3, [r3, #4]
 8001372:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001376:	2b00      	cmp	r3, #0
 8001378:	d003      	beq.n	8001382 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800137a:	69ba      	ldr	r2, [r7, #24]
 800137c:	693b      	ldr	r3, [r7, #16]
 800137e:	4313      	orrs	r3, r2
 8001380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001382:	4a2f      	ldr	r2, [pc, #188]	; (8001440 <HAL_GPIO_Init+0x304>)
 8001384:	69bb      	ldr	r3, [r7, #24]
 8001386:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001388:	4b2d      	ldr	r3, [pc, #180]	; (8001440 <HAL_GPIO_Init+0x304>)
 800138a:	68db      	ldr	r3, [r3, #12]
 800138c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800138e:	693b      	ldr	r3, [r7, #16]
 8001390:	43db      	mvns	r3, r3
 8001392:	69ba      	ldr	r2, [r7, #24]
 8001394:	4013      	ands	r3, r2
 8001396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001398:	683b      	ldr	r3, [r7, #0]
 800139a:	685b      	ldr	r3, [r3, #4]
 800139c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d003      	beq.n	80013ac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80013a4:	69ba      	ldr	r2, [r7, #24]
 80013a6:	693b      	ldr	r3, [r7, #16]
 80013a8:	4313      	orrs	r3, r2
 80013aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80013ac:	4a24      	ldr	r2, [pc, #144]	; (8001440 <HAL_GPIO_Init+0x304>)
 80013ae:	69bb      	ldr	r3, [r7, #24]
 80013b0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80013b2:	4b23      	ldr	r3, [pc, #140]	; (8001440 <HAL_GPIO_Init+0x304>)
 80013b4:	685b      	ldr	r3, [r3, #4]
 80013b6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013b8:	693b      	ldr	r3, [r7, #16]
 80013ba:	43db      	mvns	r3, r3
 80013bc:	69ba      	ldr	r2, [r7, #24]
 80013be:	4013      	ands	r3, r2
 80013c0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80013c2:	683b      	ldr	r3, [r7, #0]
 80013c4:	685b      	ldr	r3, [r3, #4]
 80013c6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d003      	beq.n	80013d6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80013ce:	69ba      	ldr	r2, [r7, #24]
 80013d0:	693b      	ldr	r3, [r7, #16]
 80013d2:	4313      	orrs	r3, r2
 80013d4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80013d6:	4a1a      	ldr	r2, [pc, #104]	; (8001440 <HAL_GPIO_Init+0x304>)
 80013d8:	69bb      	ldr	r3, [r7, #24]
 80013da:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80013dc:	4b18      	ldr	r3, [pc, #96]	; (8001440 <HAL_GPIO_Init+0x304>)
 80013de:	681b      	ldr	r3, [r3, #0]
 80013e0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	43db      	mvns	r3, r3
 80013e6:	69ba      	ldr	r2, [r7, #24]
 80013e8:	4013      	ands	r3, r2
 80013ea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80013ec:	683b      	ldr	r3, [r7, #0]
 80013ee:	685b      	ldr	r3, [r3, #4]
 80013f0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d003      	beq.n	8001400 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80013f8:	69ba      	ldr	r2, [r7, #24]
 80013fa:	693b      	ldr	r3, [r7, #16]
 80013fc:	4313      	orrs	r3, r2
 80013fe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001400:	4a0f      	ldr	r2, [pc, #60]	; (8001440 <HAL_GPIO_Init+0x304>)
 8001402:	69bb      	ldr	r3, [r7, #24]
 8001404:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001406:	69fb      	ldr	r3, [r7, #28]
 8001408:	3301      	adds	r3, #1
 800140a:	61fb      	str	r3, [r7, #28]
 800140c:	69fb      	ldr	r3, [r7, #28]
 800140e:	2b0f      	cmp	r3, #15
 8001410:	f67f aea2 	bls.w	8001158 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001414:	bf00      	nop
 8001416:	bf00      	nop
 8001418:	3724      	adds	r7, #36	; 0x24
 800141a:	46bd      	mov	sp, r7
 800141c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001420:	4770      	bx	lr
 8001422:	bf00      	nop
 8001424:	40023800 	.word	0x40023800
 8001428:	40013800 	.word	0x40013800
 800142c:	40020000 	.word	0x40020000
 8001430:	40020400 	.word	0x40020400
 8001434:	40020800 	.word	0x40020800
 8001438:	40020c00 	.word	0x40020c00
 800143c:	40021000 	.word	0x40021000
 8001440:	40013c00 	.word	0x40013c00

08001444 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001444:	b480      	push	{r7}
 8001446:	b083      	sub	sp, #12
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
 800144c:	460b      	mov	r3, r1
 800144e:	807b      	strh	r3, [r7, #2]
 8001450:	4613      	mov	r3, r2
 8001452:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001454:	787b      	ldrb	r3, [r7, #1]
 8001456:	2b00      	cmp	r3, #0
 8001458:	d003      	beq.n	8001462 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800145a:	887a      	ldrh	r2, [r7, #2]
 800145c:	687b      	ldr	r3, [r7, #4]
 800145e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001460:	e003      	b.n	800146a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001462:	887b      	ldrh	r3, [r7, #2]
 8001464:	041a      	lsls	r2, r3, #16
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	619a      	str	r2, [r3, #24]
}
 800146a:	bf00      	nop
 800146c:	370c      	adds	r7, #12
 800146e:	46bd      	mov	sp, r7
 8001470:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001474:	4770      	bx	lr
	...

08001478 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001478:	b580      	push	{r7, lr}
 800147a:	b084      	sub	sp, #16
 800147c:	af00      	add	r7, sp, #0
 800147e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	2b00      	cmp	r3, #0
 8001484:	d101      	bne.n	800148a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001486:	2301      	movs	r3, #1
 8001488:	e12b      	b.n	80016e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800148a:	687b      	ldr	r3, [r7, #4]
 800148c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001490:	b2db      	uxtb	r3, r3
 8001492:	2b00      	cmp	r3, #0
 8001494:	d106      	bne.n	80014a4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	2200      	movs	r2, #0
 800149a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800149e:	6878      	ldr	r0, [r7, #4]
 80014a0:	f7ff fb1a 	bl	8000ad8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80014a4:	687b      	ldr	r3, [r7, #4]
 80014a6:	2224      	movs	r2, #36	; 0x24
 80014a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80014ac:	687b      	ldr	r3, [r7, #4]
 80014ae:	681b      	ldr	r3, [r3, #0]
 80014b0:	681a      	ldr	r2, [r3, #0]
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	f022 0201 	bic.w	r2, r2, #1
 80014ba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80014bc:	687b      	ldr	r3, [r7, #4]
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	681a      	ldr	r2, [r3, #0]
 80014c2:	687b      	ldr	r3, [r7, #4]
 80014c4:	681b      	ldr	r3, [r3, #0]
 80014c6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80014ca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	681a      	ldr	r2, [r3, #0]
 80014d2:	687b      	ldr	r3, [r7, #4]
 80014d4:	681b      	ldr	r3, [r3, #0]
 80014d6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80014da:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80014dc:	f001 f888 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 80014e0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80014e2:	687b      	ldr	r3, [r7, #4]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	4a81      	ldr	r2, [pc, #516]	; (80016ec <HAL_I2C_Init+0x274>)
 80014e8:	4293      	cmp	r3, r2
 80014ea:	d807      	bhi.n	80014fc <HAL_I2C_Init+0x84>
 80014ec:	68fb      	ldr	r3, [r7, #12]
 80014ee:	4a80      	ldr	r2, [pc, #512]	; (80016f0 <HAL_I2C_Init+0x278>)
 80014f0:	4293      	cmp	r3, r2
 80014f2:	bf94      	ite	ls
 80014f4:	2301      	movls	r3, #1
 80014f6:	2300      	movhi	r3, #0
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	e006      	b.n	800150a <HAL_I2C_Init+0x92>
 80014fc:	68fb      	ldr	r3, [r7, #12]
 80014fe:	4a7d      	ldr	r2, [pc, #500]	; (80016f4 <HAL_I2C_Init+0x27c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	bf94      	ite	ls
 8001504:	2301      	movls	r3, #1
 8001506:	2300      	movhi	r3, #0
 8001508:	b2db      	uxtb	r3, r3
 800150a:	2b00      	cmp	r3, #0
 800150c:	d001      	beq.n	8001512 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800150e:	2301      	movs	r3, #1
 8001510:	e0e7      	b.n	80016e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	4a78      	ldr	r2, [pc, #480]	; (80016f8 <HAL_I2C_Init+0x280>)
 8001516:	fba2 2303 	umull	r2, r3, r2, r3
 800151a:	0c9b      	lsrs	r3, r3, #18
 800151c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800151e:	687b      	ldr	r3, [r7, #4]
 8001520:	681b      	ldr	r3, [r3, #0]
 8001522:	685b      	ldr	r3, [r3, #4]
 8001524:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001528:	687b      	ldr	r3, [r7, #4]
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	68ba      	ldr	r2, [r7, #8]
 800152e:	430a      	orrs	r2, r1
 8001530:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	6a1b      	ldr	r3, [r3, #32]
 8001538:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800153c:	687b      	ldr	r3, [r7, #4]
 800153e:	685b      	ldr	r3, [r3, #4]
 8001540:	4a6a      	ldr	r2, [pc, #424]	; (80016ec <HAL_I2C_Init+0x274>)
 8001542:	4293      	cmp	r3, r2
 8001544:	d802      	bhi.n	800154c <HAL_I2C_Init+0xd4>
 8001546:	68bb      	ldr	r3, [r7, #8]
 8001548:	3301      	adds	r3, #1
 800154a:	e009      	b.n	8001560 <HAL_I2C_Init+0xe8>
 800154c:	68bb      	ldr	r3, [r7, #8]
 800154e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	4a69      	ldr	r2, [pc, #420]	; (80016fc <HAL_I2C_Init+0x284>)
 8001558:	fba2 2303 	umull	r2, r3, r2, r3
 800155c:	099b      	lsrs	r3, r3, #6
 800155e:	3301      	adds	r3, #1
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6812      	ldr	r2, [r2, #0]
 8001564:	430b      	orrs	r3, r1
 8001566:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001568:	687b      	ldr	r3, [r7, #4]
 800156a:	681b      	ldr	r3, [r3, #0]
 800156c:	69db      	ldr	r3, [r3, #28]
 800156e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001572:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	685b      	ldr	r3, [r3, #4]
 800157a:	495c      	ldr	r1, [pc, #368]	; (80016ec <HAL_I2C_Init+0x274>)
 800157c:	428b      	cmp	r3, r1
 800157e:	d819      	bhi.n	80015b4 <HAL_I2C_Init+0x13c>
 8001580:	68fb      	ldr	r3, [r7, #12]
 8001582:	1e59      	subs	r1, r3, #1
 8001584:	687b      	ldr	r3, [r7, #4]
 8001586:	685b      	ldr	r3, [r3, #4]
 8001588:	005b      	lsls	r3, r3, #1
 800158a:	fbb1 f3f3 	udiv	r3, r1, r3
 800158e:	1c59      	adds	r1, r3, #1
 8001590:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001594:	400b      	ands	r3, r1
 8001596:	2b00      	cmp	r3, #0
 8001598:	d00a      	beq.n	80015b0 <HAL_I2C_Init+0x138>
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	1e59      	subs	r1, r3, #1
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	685b      	ldr	r3, [r3, #4]
 80015a2:	005b      	lsls	r3, r3, #1
 80015a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80015a8:	3301      	adds	r3, #1
 80015aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015ae:	e051      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 80015b0:	2304      	movs	r3, #4
 80015b2:	e04f      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	689b      	ldr	r3, [r3, #8]
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	d111      	bne.n	80015e0 <HAL_I2C_Init+0x168>
 80015bc:	68fb      	ldr	r3, [r7, #12]
 80015be:	1e58      	subs	r0, r3, #1
 80015c0:	687b      	ldr	r3, [r7, #4]
 80015c2:	6859      	ldr	r1, [r3, #4]
 80015c4:	460b      	mov	r3, r1
 80015c6:	005b      	lsls	r3, r3, #1
 80015c8:	440b      	add	r3, r1
 80015ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80015ce:	3301      	adds	r3, #1
 80015d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015d4:	2b00      	cmp	r3, #0
 80015d6:	bf0c      	ite	eq
 80015d8:	2301      	moveq	r3, #1
 80015da:	2300      	movne	r3, #0
 80015dc:	b2db      	uxtb	r3, r3
 80015de:	e012      	b.n	8001606 <HAL_I2C_Init+0x18e>
 80015e0:	68fb      	ldr	r3, [r7, #12]
 80015e2:	1e58      	subs	r0, r3, #1
 80015e4:	687b      	ldr	r3, [r7, #4]
 80015e6:	6859      	ldr	r1, [r3, #4]
 80015e8:	460b      	mov	r3, r1
 80015ea:	009b      	lsls	r3, r3, #2
 80015ec:	440b      	add	r3, r1
 80015ee:	0099      	lsls	r1, r3, #2
 80015f0:	440b      	add	r3, r1
 80015f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80015f6:	3301      	adds	r3, #1
 80015f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80015fc:	2b00      	cmp	r3, #0
 80015fe:	bf0c      	ite	eq
 8001600:	2301      	moveq	r3, #1
 8001602:	2300      	movne	r3, #0
 8001604:	b2db      	uxtb	r3, r3
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <HAL_I2C_Init+0x196>
 800160a:	2301      	movs	r3, #1
 800160c:	e022      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 800160e:	687b      	ldr	r3, [r7, #4]
 8001610:	689b      	ldr	r3, [r3, #8]
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10e      	bne.n	8001634 <HAL_I2C_Init+0x1bc>
 8001616:	68fb      	ldr	r3, [r7, #12]
 8001618:	1e58      	subs	r0, r3, #1
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	6859      	ldr	r1, [r3, #4]
 800161e:	460b      	mov	r3, r1
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	440b      	add	r3, r1
 8001624:	fbb0 f3f3 	udiv	r3, r0, r3
 8001628:	3301      	adds	r3, #1
 800162a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800162e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001632:	e00f      	b.n	8001654 <HAL_I2C_Init+0x1dc>
 8001634:	68fb      	ldr	r3, [r7, #12]
 8001636:	1e58      	subs	r0, r3, #1
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	6859      	ldr	r1, [r3, #4]
 800163c:	460b      	mov	r3, r1
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	440b      	add	r3, r1
 8001642:	0099      	lsls	r1, r3, #2
 8001644:	440b      	add	r3, r1
 8001646:	fbb0 f3f3 	udiv	r3, r0, r3
 800164a:	3301      	adds	r3, #1
 800164c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001650:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001654:	6879      	ldr	r1, [r7, #4]
 8001656:	6809      	ldr	r1, [r1, #0]
 8001658:	4313      	orrs	r3, r2
 800165a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	69da      	ldr	r2, [r3, #28]
 800166a:	687b      	ldr	r3, [r7, #4]
 800166c:	6a1b      	ldr	r3, [r3, #32]
 800166e:	431a      	orrs	r2, r3
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	681b      	ldr	r3, [r3, #0]
 8001674:	430a      	orrs	r2, r1
 8001676:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	689b      	ldr	r3, [r3, #8]
 800167e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001682:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001686:	687a      	ldr	r2, [r7, #4]
 8001688:	6911      	ldr	r1, [r2, #16]
 800168a:	687a      	ldr	r2, [r7, #4]
 800168c:	68d2      	ldr	r2, [r2, #12]
 800168e:	4311      	orrs	r1, r2
 8001690:	687a      	ldr	r2, [r7, #4]
 8001692:	6812      	ldr	r2, [r2, #0]
 8001694:	430b      	orrs	r3, r1
 8001696:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	68db      	ldr	r3, [r3, #12]
 800169e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80016a2:	687b      	ldr	r3, [r7, #4]
 80016a4:	695a      	ldr	r2, [r3, #20]
 80016a6:	687b      	ldr	r3, [r7, #4]
 80016a8:	699b      	ldr	r3, [r3, #24]
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	681b      	ldr	r3, [r3, #0]
 80016b0:	430a      	orrs	r2, r1
 80016b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	681a      	ldr	r2, [r3, #0]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	681b      	ldr	r3, [r3, #0]
 80016be:	f042 0201 	orr.w	r2, r2, #1
 80016c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80016c4:	687b      	ldr	r3, [r7, #4]
 80016c6:	2200      	movs	r2, #0
 80016c8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	2220      	movs	r2, #32
 80016ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80016d2:	687b      	ldr	r3, [r7, #4]
 80016d4:	2200      	movs	r2, #0
 80016d6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80016d8:	687b      	ldr	r3, [r7, #4]
 80016da:	2200      	movs	r2, #0
 80016dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80016e0:	2300      	movs	r3, #0
}
 80016e2:	4618      	mov	r0, r3
 80016e4:	3710      	adds	r7, #16
 80016e6:	46bd      	mov	sp, r7
 80016e8:	bd80      	pop	{r7, pc}
 80016ea:	bf00      	nop
 80016ec:	000186a0 	.word	0x000186a0
 80016f0:	001e847f 	.word	0x001e847f
 80016f4:	003d08ff 	.word	0x003d08ff
 80016f8:	431bde83 	.word	0x431bde83
 80016fc:	10624dd3 	.word	0x10624dd3

08001700 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b088      	sub	sp, #32
 8001704:	af02      	add	r7, sp, #8
 8001706:	60f8      	str	r0, [r7, #12]
 8001708:	607a      	str	r2, [r7, #4]
 800170a:	461a      	mov	r2, r3
 800170c:	460b      	mov	r3, r1
 800170e:	817b      	strh	r3, [r7, #10]
 8001710:	4613      	mov	r3, r2
 8001712:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001714:	f7ff fbfc 	bl	8000f10 <HAL_GetTick>
 8001718:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800171a:	68fb      	ldr	r3, [r7, #12]
 800171c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001720:	b2db      	uxtb	r3, r3
 8001722:	2b20      	cmp	r3, #32
 8001724:	f040 80e0 	bne.w	80018e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001728:	697b      	ldr	r3, [r7, #20]
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2319      	movs	r3, #25
 800172e:	2201      	movs	r2, #1
 8001730:	4970      	ldr	r1, [pc, #448]	; (80018f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8001732:	68f8      	ldr	r0, [r7, #12]
 8001734:	f000 f964 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 8001738:	4603      	mov	r3, r0
 800173a:	2b00      	cmp	r3, #0
 800173c:	d001      	beq.n	8001742 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800173e:	2302      	movs	r3, #2
 8001740:	e0d3      	b.n	80018ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001742:	68fb      	ldr	r3, [r7, #12]
 8001744:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001748:	2b01      	cmp	r3, #1
 800174a:	d101      	bne.n	8001750 <HAL_I2C_Master_Transmit+0x50>
 800174c:	2302      	movs	r3, #2
 800174e:	e0cc      	b.n	80018ea <HAL_I2C_Master_Transmit+0x1ea>
 8001750:	68fb      	ldr	r3, [r7, #12]
 8001752:	2201      	movs	r2, #1
 8001754:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001758:	68fb      	ldr	r3, [r7, #12]
 800175a:	681b      	ldr	r3, [r3, #0]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	f003 0301 	and.w	r3, r3, #1
 8001762:	2b01      	cmp	r3, #1
 8001764:	d007      	beq.n	8001776 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001766:	68fb      	ldr	r3, [r7, #12]
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	681a      	ldr	r2, [r3, #0]
 800176c:	68fb      	ldr	r3, [r7, #12]
 800176e:	681b      	ldr	r3, [r3, #0]
 8001770:	f042 0201 	orr.w	r2, r2, #1
 8001774:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001776:	68fb      	ldr	r3, [r7, #12]
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	681a      	ldr	r2, [r3, #0]
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	681b      	ldr	r3, [r3, #0]
 8001780:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001784:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001786:	68fb      	ldr	r3, [r7, #12]
 8001788:	2221      	movs	r2, #33	; 0x21
 800178a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800178e:	68fb      	ldr	r3, [r7, #12]
 8001790:	2210      	movs	r2, #16
 8001792:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001796:	68fb      	ldr	r3, [r7, #12]
 8001798:	2200      	movs	r2, #0
 800179a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800179c:	68fb      	ldr	r3, [r7, #12]
 800179e:	687a      	ldr	r2, [r7, #4]
 80017a0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80017a2:	68fb      	ldr	r3, [r7, #12]
 80017a4:	893a      	ldrh	r2, [r7, #8]
 80017a6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80017a8:	68fb      	ldr	r3, [r7, #12]
 80017aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80017ac:	b29a      	uxth	r2, r3
 80017ae:	68fb      	ldr	r3, [r7, #12]
 80017b0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80017b2:	68fb      	ldr	r3, [r7, #12]
 80017b4:	4a50      	ldr	r2, [pc, #320]	; (80018f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80017b6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80017b8:	8979      	ldrh	r1, [r7, #10]
 80017ba:	697b      	ldr	r3, [r7, #20]
 80017bc:	6a3a      	ldr	r2, [r7, #32]
 80017be:	68f8      	ldr	r0, [r7, #12]
 80017c0:	f000 f89c 	bl	80018fc <I2C_MasterRequestWrite>
 80017c4:	4603      	mov	r3, r0
 80017c6:	2b00      	cmp	r3, #0
 80017c8:	d001      	beq.n	80017ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80017ca:	2301      	movs	r3, #1
 80017cc:	e08d      	b.n	80018ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80017ce:	2300      	movs	r3, #0
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	68fb      	ldr	r3, [r7, #12]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	695b      	ldr	r3, [r3, #20]
 80017d8:	613b      	str	r3, [r7, #16]
 80017da:	68fb      	ldr	r3, [r7, #12]
 80017dc:	681b      	ldr	r3, [r3, #0]
 80017de:	699b      	ldr	r3, [r3, #24]
 80017e0:	613b      	str	r3, [r7, #16]
 80017e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80017e4:	e066      	b.n	80018b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80017e6:	697a      	ldr	r2, [r7, #20]
 80017e8:	6a39      	ldr	r1, [r7, #32]
 80017ea:	68f8      	ldr	r0, [r7, #12]
 80017ec:	f000 f9de 	bl	8001bac <I2C_WaitOnTXEFlagUntilTimeout>
 80017f0:	4603      	mov	r3, r0
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	d00d      	beq.n	8001812 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80017f6:	68fb      	ldr	r3, [r7, #12]
 80017f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80017fa:	2b04      	cmp	r3, #4
 80017fc:	d107      	bne.n	800180e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80017fe:	68fb      	ldr	r3, [r7, #12]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	681a      	ldr	r2, [r3, #0]
 8001804:	68fb      	ldr	r3, [r7, #12]
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800180c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800180e:	2301      	movs	r3, #1
 8001810:	e06b      	b.n	80018ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001812:	68fb      	ldr	r3, [r7, #12]
 8001814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001816:	781a      	ldrb	r2, [r3, #0]
 8001818:	68fb      	ldr	r3, [r7, #12]
 800181a:	681b      	ldr	r3, [r3, #0]
 800181c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001822:	1c5a      	adds	r2, r3, #1
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001828:	68fb      	ldr	r3, [r7, #12]
 800182a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800182c:	b29b      	uxth	r3, r3
 800182e:	3b01      	subs	r3, #1
 8001830:	b29a      	uxth	r2, r3
 8001832:	68fb      	ldr	r3, [r7, #12]
 8001834:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001836:	68fb      	ldr	r3, [r7, #12]
 8001838:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800183a:	3b01      	subs	r3, #1
 800183c:	b29a      	uxth	r2, r3
 800183e:	68fb      	ldr	r3, [r7, #12]
 8001840:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001842:	68fb      	ldr	r3, [r7, #12]
 8001844:	681b      	ldr	r3, [r3, #0]
 8001846:	695b      	ldr	r3, [r3, #20]
 8001848:	f003 0304 	and.w	r3, r3, #4
 800184c:	2b04      	cmp	r3, #4
 800184e:	d11b      	bne.n	8001888 <HAL_I2C_Master_Transmit+0x188>
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001854:	2b00      	cmp	r3, #0
 8001856:	d017      	beq.n	8001888 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001858:	68fb      	ldr	r3, [r7, #12]
 800185a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800185c:	781a      	ldrb	r2, [r3, #0]
 800185e:	68fb      	ldr	r3, [r7, #12]
 8001860:	681b      	ldr	r3, [r3, #0]
 8001862:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001868:	1c5a      	adds	r2, r3, #1
 800186a:	68fb      	ldr	r3, [r7, #12]
 800186c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800186e:	68fb      	ldr	r3, [r7, #12]
 8001870:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001872:	b29b      	uxth	r3, r3
 8001874:	3b01      	subs	r3, #1
 8001876:	b29a      	uxth	r2, r3
 8001878:	68fb      	ldr	r3, [r7, #12]
 800187a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800187c:	68fb      	ldr	r3, [r7, #12]
 800187e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001880:	3b01      	subs	r3, #1
 8001882:	b29a      	uxth	r2, r3
 8001884:	68fb      	ldr	r3, [r7, #12]
 8001886:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001888:	697a      	ldr	r2, [r7, #20]
 800188a:	6a39      	ldr	r1, [r7, #32]
 800188c:	68f8      	ldr	r0, [r7, #12]
 800188e:	f000 f9ce 	bl	8001c2e <I2C_WaitOnBTFFlagUntilTimeout>
 8001892:	4603      	mov	r3, r0
 8001894:	2b00      	cmp	r3, #0
 8001896:	d00d      	beq.n	80018b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001898:	68fb      	ldr	r3, [r7, #12]
 800189a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800189c:	2b04      	cmp	r3, #4
 800189e:	d107      	bne.n	80018b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018a0:	68fb      	ldr	r3, [r7, #12]
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	681a      	ldr	r2, [r3, #0]
 80018a6:	68fb      	ldr	r3, [r7, #12]
 80018a8:	681b      	ldr	r3, [r3, #0]
 80018aa:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80018b0:	2301      	movs	r3, #1
 80018b2:	e01a      	b.n	80018ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80018b4:	68fb      	ldr	r3, [r7, #12]
 80018b6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	d194      	bne.n	80017e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80018bc:	68fb      	ldr	r3, [r7, #12]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	681a      	ldr	r2, [r3, #0]
 80018c2:	68fb      	ldr	r3, [r7, #12]
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80018ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	2220      	movs	r2, #32
 80018d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80018d4:	68fb      	ldr	r3, [r7, #12]
 80018d6:	2200      	movs	r2, #0
 80018d8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80018dc:	68fb      	ldr	r3, [r7, #12]
 80018de:	2200      	movs	r2, #0
 80018e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80018e4:	2300      	movs	r3, #0
 80018e6:	e000      	b.n	80018ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80018e8:	2302      	movs	r3, #2
  }
}
 80018ea:	4618      	mov	r0, r3
 80018ec:	3718      	adds	r7, #24
 80018ee:	46bd      	mov	sp, r7
 80018f0:	bd80      	pop	{r7, pc}
 80018f2:	bf00      	nop
 80018f4:	00100002 	.word	0x00100002
 80018f8:	ffff0000 	.word	0xffff0000

080018fc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b088      	sub	sp, #32
 8001900:	af02      	add	r7, sp, #8
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	607a      	str	r2, [r7, #4]
 8001906:	603b      	str	r3, [r7, #0]
 8001908:	460b      	mov	r3, r1
 800190a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800190c:	68fb      	ldr	r3, [r7, #12]
 800190e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001910:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001912:	697b      	ldr	r3, [r7, #20]
 8001914:	2b08      	cmp	r3, #8
 8001916:	d006      	beq.n	8001926 <I2C_MasterRequestWrite+0x2a>
 8001918:	697b      	ldr	r3, [r7, #20]
 800191a:	2b01      	cmp	r3, #1
 800191c:	d003      	beq.n	8001926 <I2C_MasterRequestWrite+0x2a>
 800191e:	697b      	ldr	r3, [r7, #20]
 8001920:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001924:	d108      	bne.n	8001938 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001926:	68fb      	ldr	r3, [r7, #12]
 8001928:	681b      	ldr	r3, [r3, #0]
 800192a:	681a      	ldr	r2, [r3, #0]
 800192c:	68fb      	ldr	r3, [r7, #12]
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001934:	601a      	str	r2, [r3, #0]
 8001936:	e00b      	b.n	8001950 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001938:	68fb      	ldr	r3, [r7, #12]
 800193a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800193c:	2b12      	cmp	r3, #18
 800193e:	d107      	bne.n	8001950 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001940:	68fb      	ldr	r3, [r7, #12]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	681a      	ldr	r2, [r3, #0]
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800194e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	9300      	str	r3, [sp, #0]
 8001954:	687b      	ldr	r3, [r7, #4]
 8001956:	2200      	movs	r2, #0
 8001958:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800195c:	68f8      	ldr	r0, [r7, #12]
 800195e:	f000 f84f 	bl	8001a00 <I2C_WaitOnFlagUntilTimeout>
 8001962:	4603      	mov	r3, r0
 8001964:	2b00      	cmp	r3, #0
 8001966:	d00d      	beq.n	8001984 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001972:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001976:	d103      	bne.n	8001980 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001978:	68fb      	ldr	r3, [r7, #12]
 800197a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800197e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001980:	2303      	movs	r3, #3
 8001982:	e035      	b.n	80019f0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001984:	68fb      	ldr	r3, [r7, #12]
 8001986:	691b      	ldr	r3, [r3, #16]
 8001988:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800198c:	d108      	bne.n	80019a0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800198e:	897b      	ldrh	r3, [r7, #10]
 8001990:	b2db      	uxtb	r3, r3
 8001992:	461a      	mov	r2, r3
 8001994:	68fb      	ldr	r3, [r7, #12]
 8001996:	681b      	ldr	r3, [r3, #0]
 8001998:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800199c:	611a      	str	r2, [r3, #16]
 800199e:	e01b      	b.n	80019d8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80019a0:	897b      	ldrh	r3, [r7, #10]
 80019a2:	11db      	asrs	r3, r3, #7
 80019a4:	b2db      	uxtb	r3, r3
 80019a6:	f003 0306 	and.w	r3, r3, #6
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	f063 030f 	orn	r3, r3, #15
 80019b0:	b2da      	uxtb	r2, r3
 80019b2:	68fb      	ldr	r3, [r7, #12]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80019b8:	683b      	ldr	r3, [r7, #0]
 80019ba:	687a      	ldr	r2, [r7, #4]
 80019bc:	490e      	ldr	r1, [pc, #56]	; (80019f8 <I2C_MasterRequestWrite+0xfc>)
 80019be:	68f8      	ldr	r0, [r7, #12]
 80019c0:	f000 f875 	bl	8001aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019c4:	4603      	mov	r3, r0
 80019c6:	2b00      	cmp	r3, #0
 80019c8:	d001      	beq.n	80019ce <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80019ca:	2301      	movs	r3, #1
 80019cc:	e010      	b.n	80019f0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80019ce:	897b      	ldrh	r3, [r7, #10]
 80019d0:	b2da      	uxtb	r2, r3
 80019d2:	68fb      	ldr	r3, [r7, #12]
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	4907      	ldr	r1, [pc, #28]	; (80019fc <I2C_MasterRequestWrite+0x100>)
 80019de:	68f8      	ldr	r0, [r7, #12]
 80019e0:	f000 f865 	bl	8001aae <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80019e4:	4603      	mov	r3, r0
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d001      	beq.n	80019ee <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80019ea:	2301      	movs	r3, #1
 80019ec:	e000      	b.n	80019f0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80019ee:	2300      	movs	r3, #0
}
 80019f0:	4618      	mov	r0, r3
 80019f2:	3718      	adds	r7, #24
 80019f4:	46bd      	mov	sp, r7
 80019f6:	bd80      	pop	{r7, pc}
 80019f8:	00010008 	.word	0x00010008
 80019fc:	00010002 	.word	0x00010002

08001a00 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b084      	sub	sp, #16
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	60f8      	str	r0, [r7, #12]
 8001a08:	60b9      	str	r1, [r7, #8]
 8001a0a:	603b      	str	r3, [r7, #0]
 8001a0c:	4613      	mov	r3, r2
 8001a0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a10:	e025      	b.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001a12:	683b      	ldr	r3, [r7, #0]
 8001a14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001a18:	d021      	beq.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001a1a:	f7ff fa79 	bl	8000f10 <HAL_GetTick>
 8001a1e:	4602      	mov	r2, r0
 8001a20:	69bb      	ldr	r3, [r7, #24]
 8001a22:	1ad3      	subs	r3, r2, r3
 8001a24:	683a      	ldr	r2, [r7, #0]
 8001a26:	429a      	cmp	r2, r3
 8001a28:	d302      	bcc.n	8001a30 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001a2a:	683b      	ldr	r3, [r7, #0]
 8001a2c:	2b00      	cmp	r3, #0
 8001a2e:	d116      	bne.n	8001a5e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001a30:	68fb      	ldr	r3, [r7, #12]
 8001a32:	2200      	movs	r2, #0
 8001a34:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001a36:	68fb      	ldr	r3, [r7, #12]
 8001a38:	2220      	movs	r2, #32
 8001a3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001a3e:	68fb      	ldr	r3, [r7, #12]
 8001a40:	2200      	movs	r2, #0
 8001a42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001a46:	68fb      	ldr	r3, [r7, #12]
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	f043 0220 	orr.w	r2, r3, #32
 8001a4e:	68fb      	ldr	r3, [r7, #12]
 8001a50:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	2200      	movs	r2, #0
 8001a56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	e023      	b.n	8001aa6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001a5e:	68bb      	ldr	r3, [r7, #8]
 8001a60:	0c1b      	lsrs	r3, r3, #16
 8001a62:	b2db      	uxtb	r3, r3
 8001a64:	2b01      	cmp	r3, #1
 8001a66:	d10d      	bne.n	8001a84 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001a68:	68fb      	ldr	r3, [r7, #12]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	695b      	ldr	r3, [r3, #20]
 8001a6e:	43da      	mvns	r2, r3
 8001a70:	68bb      	ldr	r3, [r7, #8]
 8001a72:	4013      	ands	r3, r2
 8001a74:	b29b      	uxth	r3, r3
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	bf0c      	ite	eq
 8001a7a:	2301      	moveq	r3, #1
 8001a7c:	2300      	movne	r3, #0
 8001a7e:	b2db      	uxtb	r3, r3
 8001a80:	461a      	mov	r2, r3
 8001a82:	e00c      	b.n	8001a9e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001a84:	68fb      	ldr	r3, [r7, #12]
 8001a86:	681b      	ldr	r3, [r3, #0]
 8001a88:	699b      	ldr	r3, [r3, #24]
 8001a8a:	43da      	mvns	r2, r3
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	4013      	ands	r3, r2
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	2b00      	cmp	r3, #0
 8001a94:	bf0c      	ite	eq
 8001a96:	2301      	moveq	r3, #1
 8001a98:	2300      	movne	r3, #0
 8001a9a:	b2db      	uxtb	r3, r3
 8001a9c:	461a      	mov	r2, r3
 8001a9e:	79fb      	ldrb	r3, [r7, #7]
 8001aa0:	429a      	cmp	r2, r3
 8001aa2:	d0b6      	beq.n	8001a12 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001aa4:	2300      	movs	r3, #0
}
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	3710      	adds	r7, #16
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}

08001aae <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001aae:	b580      	push	{r7, lr}
 8001ab0:	b084      	sub	sp, #16
 8001ab2:	af00      	add	r7, sp, #0
 8001ab4:	60f8      	str	r0, [r7, #12]
 8001ab6:	60b9      	str	r1, [r7, #8]
 8001ab8:	607a      	str	r2, [r7, #4]
 8001aba:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001abc:	e051      	b.n	8001b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	695b      	ldr	r3, [r3, #20]
 8001ac4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001ac8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001acc:	d123      	bne.n	8001b16 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001ace:	68fb      	ldr	r3, [r7, #12]
 8001ad0:	681b      	ldr	r3, [r3, #0]
 8001ad2:	681a      	ldr	r2, [r3, #0]
 8001ad4:	68fb      	ldr	r3, [r7, #12]
 8001ad6:	681b      	ldr	r3, [r3, #0]
 8001ad8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001adc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001ade:	68fb      	ldr	r3, [r7, #12]
 8001ae0:	681b      	ldr	r3, [r3, #0]
 8001ae2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001ae6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8001ae8:	68fb      	ldr	r3, [r7, #12]
 8001aea:	2200      	movs	r2, #0
 8001aec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8001aee:	68fb      	ldr	r3, [r7, #12]
 8001af0:	2220      	movs	r2, #32
 8001af2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001af6:	68fb      	ldr	r3, [r7, #12]
 8001af8:	2200      	movs	r2, #0
 8001afa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b02:	f043 0204 	orr.w	r2, r3, #4
 8001b06:	68fb      	ldr	r3, [r7, #12]
 8001b08:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8001b0a:	68fb      	ldr	r3, [r7, #12]
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8001b12:	2301      	movs	r3, #1
 8001b14:	e046      	b.n	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001b16:	687b      	ldr	r3, [r7, #4]
 8001b18:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001b1c:	d021      	beq.n	8001b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001b1e:	f7ff f9f7 	bl	8000f10 <HAL_GetTick>
 8001b22:	4602      	mov	r2, r0
 8001b24:	683b      	ldr	r3, [r7, #0]
 8001b26:	1ad3      	subs	r3, r2, r3
 8001b28:	687a      	ldr	r2, [r7, #4]
 8001b2a:	429a      	cmp	r2, r3
 8001b2c:	d302      	bcc.n	8001b34 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d116      	bne.n	8001b62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001b34:	68fb      	ldr	r3, [r7, #12]
 8001b36:	2200      	movs	r2, #0
 8001b38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001b3a:	68fb      	ldr	r3, [r7, #12]
 8001b3c:	2220      	movs	r2, #32
 8001b3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001b42:	68fb      	ldr	r3, [r7, #12]
 8001b44:	2200      	movs	r2, #0
 8001b46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001b4a:	68fb      	ldr	r3, [r7, #12]
 8001b4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b4e:	f043 0220 	orr.w	r2, r3, #32
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	2200      	movs	r2, #0
 8001b5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001b5e:	2301      	movs	r3, #1
 8001b60:	e020      	b.n	8001ba4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001b62:	68bb      	ldr	r3, [r7, #8]
 8001b64:	0c1b      	lsrs	r3, r3, #16
 8001b66:	b2db      	uxtb	r3, r3
 8001b68:	2b01      	cmp	r3, #1
 8001b6a:	d10c      	bne.n	8001b86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8001b6c:	68fb      	ldr	r3, [r7, #12]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	695b      	ldr	r3, [r3, #20]
 8001b72:	43da      	mvns	r2, r3
 8001b74:	68bb      	ldr	r3, [r7, #8]
 8001b76:	4013      	ands	r3, r2
 8001b78:	b29b      	uxth	r3, r3
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	bf14      	ite	ne
 8001b7e:	2301      	movne	r3, #1
 8001b80:	2300      	moveq	r3, #0
 8001b82:	b2db      	uxtb	r3, r3
 8001b84:	e00b      	b.n	8001b9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8001b86:	68fb      	ldr	r3, [r7, #12]
 8001b88:	681b      	ldr	r3, [r3, #0]
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	43da      	mvns	r2, r3
 8001b8e:	68bb      	ldr	r3, [r7, #8]
 8001b90:	4013      	ands	r3, r2
 8001b92:	b29b      	uxth	r3, r3
 8001b94:	2b00      	cmp	r3, #0
 8001b96:	bf14      	ite	ne
 8001b98:	2301      	movne	r3, #1
 8001b9a:	2300      	moveq	r3, #0
 8001b9c:	b2db      	uxtb	r3, r3
 8001b9e:	2b00      	cmp	r3, #0
 8001ba0:	d18d      	bne.n	8001abe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8001ba2:	2300      	movs	r3, #0
}
 8001ba4:	4618      	mov	r0, r3
 8001ba6:	3710      	adds	r7, #16
 8001ba8:	46bd      	mov	sp, r7
 8001baa:	bd80      	pop	{r7, pc}

08001bac <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001bac:	b580      	push	{r7, lr}
 8001bae:	b084      	sub	sp, #16
 8001bb0:	af00      	add	r7, sp, #0
 8001bb2:	60f8      	str	r0, [r7, #12]
 8001bb4:	60b9      	str	r1, [r7, #8]
 8001bb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001bb8:	e02d      	b.n	8001c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001bba:	68f8      	ldr	r0, [r7, #12]
 8001bbc:	f000 f878 	bl	8001cb0 <I2C_IsAcknowledgeFailed>
 8001bc0:	4603      	mov	r3, r0
 8001bc2:	2b00      	cmp	r3, #0
 8001bc4:	d001      	beq.n	8001bca <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001bc6:	2301      	movs	r3, #1
 8001bc8:	e02d      	b.n	8001c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001bca:	68bb      	ldr	r3, [r7, #8]
 8001bcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001bd0:	d021      	beq.n	8001c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001bd2:	f7ff f99d 	bl	8000f10 <HAL_GetTick>
 8001bd6:	4602      	mov	r2, r0
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	1ad3      	subs	r3, r2, r3
 8001bdc:	68ba      	ldr	r2, [r7, #8]
 8001bde:	429a      	cmp	r2, r3
 8001be0:	d302      	bcc.n	8001be8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8001be2:	68bb      	ldr	r3, [r7, #8]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	d116      	bne.n	8001c16 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001be8:	68fb      	ldr	r3, [r7, #12]
 8001bea:	2200      	movs	r2, #0
 8001bec:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001bee:	68fb      	ldr	r3, [r7, #12]
 8001bf0:	2220      	movs	r2, #32
 8001bf2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001bf6:	68fb      	ldr	r3, [r7, #12]
 8001bf8:	2200      	movs	r2, #0
 8001bfa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001bfe:	68fb      	ldr	r3, [r7, #12]
 8001c00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c02:	f043 0220 	orr.w	r2, r3, #32
 8001c06:	68fb      	ldr	r3, [r7, #12]
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c0a:	68fb      	ldr	r3, [r7, #12]
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c12:	2301      	movs	r3, #1
 8001c14:	e007      	b.n	8001c26 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	695b      	ldr	r3, [r3, #20]
 8001c1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001c20:	2b80      	cmp	r3, #128	; 0x80
 8001c22:	d1ca      	bne.n	8001bba <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001c24:	2300      	movs	r3, #0
}
 8001c26:	4618      	mov	r0, r3
 8001c28:	3710      	adds	r7, #16
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	bd80      	pop	{r7, pc}

08001c2e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8001c2e:	b580      	push	{r7, lr}
 8001c30:	b084      	sub	sp, #16
 8001c32:	af00      	add	r7, sp, #0
 8001c34:	60f8      	str	r0, [r7, #12]
 8001c36:	60b9      	str	r1, [r7, #8]
 8001c38:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c3a:	e02d      	b.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8001c3c:	68f8      	ldr	r0, [r7, #12]
 8001c3e:	f000 f837 	bl	8001cb0 <I2C_IsAcknowledgeFailed>
 8001c42:	4603      	mov	r3, r0
 8001c44:	2b00      	cmp	r3, #0
 8001c46:	d001      	beq.n	8001c4c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	e02d      	b.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001c4c:	68bb      	ldr	r3, [r7, #8]
 8001c4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c52:	d021      	beq.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001c54:	f7ff f95c 	bl	8000f10 <HAL_GetTick>
 8001c58:	4602      	mov	r2, r0
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	1ad3      	subs	r3, r2, r3
 8001c5e:	68ba      	ldr	r2, [r7, #8]
 8001c60:	429a      	cmp	r2, r3
 8001c62:	d302      	bcc.n	8001c6a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8001c64:	68bb      	ldr	r3, [r7, #8]
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d116      	bne.n	8001c98 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8001c6a:	68fb      	ldr	r3, [r7, #12]
 8001c6c:	2200      	movs	r2, #0
 8001c6e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	2220      	movs	r2, #32
 8001c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	2200      	movs	r2, #0
 8001c7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8001c80:	68fb      	ldr	r3, [r7, #12]
 8001c82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001c84:	f043 0220 	orr.w	r2, r3, #32
 8001c88:	68fb      	ldr	r3, [r7, #12]
 8001c8a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001c8c:	68fb      	ldr	r3, [r7, #12]
 8001c8e:	2200      	movs	r2, #0
 8001c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e007      	b.n	8001ca8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	695b      	ldr	r3, [r3, #20]
 8001c9e:	f003 0304 	and.w	r3, r3, #4
 8001ca2:	2b04      	cmp	r3, #4
 8001ca4:	d1ca      	bne.n	8001c3c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8001ca6:	2300      	movs	r3, #0
}
 8001ca8:	4618      	mov	r0, r3
 8001caa:	3710      	adds	r7, #16
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}

08001cb0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8001cb0:	b480      	push	{r7}
 8001cb2:	b083      	sub	sp, #12
 8001cb4:	af00      	add	r7, sp, #0
 8001cb6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001cb8:	687b      	ldr	r3, [r7, #4]
 8001cba:	681b      	ldr	r3, [r3, #0]
 8001cbc:	695b      	ldr	r3, [r3, #20]
 8001cbe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001cc2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001cc6:	d11b      	bne.n	8001d00 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8001cd0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2200      	movs	r2, #0
 8001cd6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	2220      	movs	r2, #32
 8001cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8001ce0:	687b      	ldr	r3, [r7, #4]
 8001ce2:	2200      	movs	r2, #0
 8001ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001cec:	f043 0204 	orr.w	r2, r3, #4
 8001cf0:	687b      	ldr	r3, [r7, #4]
 8001cf2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001cf4:	687b      	ldr	r3, [r7, #4]
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8001cfc:	2301      	movs	r3, #1
 8001cfe:	e000      	b.n	8001d02 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8001d00:	2300      	movs	r3, #0
}
 8001d02:	4618      	mov	r0, r3
 8001d04:	370c      	adds	r7, #12
 8001d06:	46bd      	mov	sp, r7
 8001d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d0c:	4770      	bx	lr
	...

08001d10 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b086      	sub	sp, #24
 8001d14:	af00      	add	r7, sp, #0
 8001d16:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2b00      	cmp	r3, #0
 8001d1c:	d101      	bne.n	8001d22 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d1e:	2301      	movs	r3, #1
 8001d20:	e267      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d22:	687b      	ldr	r3, [r7, #4]
 8001d24:	681b      	ldr	r3, [r3, #0]
 8001d26:	f003 0301 	and.w	r3, r3, #1
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d075      	beq.n	8001e1a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d2e:	4b88      	ldr	r3, [pc, #544]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d30:	689b      	ldr	r3, [r3, #8]
 8001d32:	f003 030c 	and.w	r3, r3, #12
 8001d36:	2b04      	cmp	r3, #4
 8001d38:	d00c      	beq.n	8001d54 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d3a:	4b85      	ldr	r3, [pc, #532]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d3c:	689b      	ldr	r3, [r3, #8]
 8001d3e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8001d42:	2b08      	cmp	r3, #8
 8001d44:	d112      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001d46:	4b82      	ldr	r3, [pc, #520]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d48:	685b      	ldr	r3, [r3, #4]
 8001d4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001d4e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8001d52:	d10b      	bne.n	8001d6c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d54:	4b7e      	ldr	r3, [pc, #504]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d05b      	beq.n	8001e18 <HAL_RCC_OscConfig+0x108>
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	685b      	ldr	r3, [r3, #4]
 8001d64:	2b00      	cmp	r3, #0
 8001d66:	d157      	bne.n	8001e18 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001d68:	2301      	movs	r3, #1
 8001d6a:	e242      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d6c:	687b      	ldr	r3, [r7, #4]
 8001d6e:	685b      	ldr	r3, [r3, #4]
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d106      	bne.n	8001d84 <HAL_RCC_OscConfig+0x74>
 8001d76:	4b76      	ldr	r3, [pc, #472]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	4a75      	ldr	r2, [pc, #468]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d7c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001d80:	6013      	str	r3, [r2, #0]
 8001d82:	e01d      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	685b      	ldr	r3, [r3, #4]
 8001d88:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001d8c:	d10c      	bne.n	8001da8 <HAL_RCC_OscConfig+0x98>
 8001d8e:	4b70      	ldr	r3, [pc, #448]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	4a6f      	ldr	r2, [pc, #444]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d94:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001d98:	6013      	str	r3, [r2, #0]
 8001d9a:	4b6d      	ldr	r3, [pc, #436]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	4a6c      	ldr	r2, [pc, #432]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001da0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da4:	6013      	str	r3, [r2, #0]
 8001da6:	e00b      	b.n	8001dc0 <HAL_RCC_OscConfig+0xb0>
 8001da8:	4b69      	ldr	r3, [pc, #420]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	4a68      	ldr	r2, [pc, #416]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001dae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db2:	6013      	str	r3, [r2, #0]
 8001db4:	4b66      	ldr	r3, [pc, #408]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001db6:	681b      	ldr	r3, [r3, #0]
 8001db8:	4a65      	ldr	r2, [pc, #404]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001dba:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dbe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001dc0:	687b      	ldr	r3, [r7, #4]
 8001dc2:	685b      	ldr	r3, [r3, #4]
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d013      	beq.n	8001df0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001dc8:	f7ff f8a2 	bl	8000f10 <HAL_GetTick>
 8001dcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001dce:	e008      	b.n	8001de2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001dd0:	f7ff f89e 	bl	8000f10 <HAL_GetTick>
 8001dd4:	4602      	mov	r2, r0
 8001dd6:	693b      	ldr	r3, [r7, #16]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	2b64      	cmp	r3, #100	; 0x64
 8001ddc:	d901      	bls.n	8001de2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001dde:	2303      	movs	r3, #3
 8001de0:	e207      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001de2:	4b5b      	ldr	r3, [pc, #364]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001dea:	2b00      	cmp	r3, #0
 8001dec:	d0f0      	beq.n	8001dd0 <HAL_RCC_OscConfig+0xc0>
 8001dee:	e014      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001df0:	f7ff f88e 	bl	8000f10 <HAL_GetTick>
 8001df4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001df6:	e008      	b.n	8001e0a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8001df8:	f7ff f88a 	bl	8000f10 <HAL_GetTick>
 8001dfc:	4602      	mov	r2, r0
 8001dfe:	693b      	ldr	r3, [r7, #16]
 8001e00:	1ad3      	subs	r3, r2, r3
 8001e02:	2b64      	cmp	r3, #100	; 0x64
 8001e04:	d901      	bls.n	8001e0a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001e06:	2303      	movs	r3, #3
 8001e08:	e1f3      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e0a:	4b51      	ldr	r3, [pc, #324]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e12:	2b00      	cmp	r3, #0
 8001e14:	d1f0      	bne.n	8001df8 <HAL_RCC_OscConfig+0xe8>
 8001e16:	e000      	b.n	8001e1a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e18:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e1a:	687b      	ldr	r3, [r7, #4]
 8001e1c:	681b      	ldr	r3, [r3, #0]
 8001e1e:	f003 0302 	and.w	r3, r3, #2
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d063      	beq.n	8001eee <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e26:	4b4a      	ldr	r3, [pc, #296]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e28:	689b      	ldr	r3, [r3, #8]
 8001e2a:	f003 030c 	and.w	r3, r3, #12
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d00b      	beq.n	8001e4a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8001e3a:	2b08      	cmp	r3, #8
 8001e3c:	d11c      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001e3e:	4b44      	ldr	r3, [pc, #272]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e40:	685b      	ldr	r3, [r3, #4]
 8001e42:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001e46:	2b00      	cmp	r3, #0
 8001e48:	d116      	bne.n	8001e78 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e4a:	4b41      	ldr	r3, [pc, #260]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	f003 0302 	and.w	r3, r3, #2
 8001e52:	2b00      	cmp	r3, #0
 8001e54:	d005      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	68db      	ldr	r3, [r3, #12]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d001      	beq.n	8001e62 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8001e5e:	2301      	movs	r3, #1
 8001e60:	e1c7      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001e62:	4b3b      	ldr	r3, [pc, #236]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e64:	681b      	ldr	r3, [r3, #0]
 8001e66:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	691b      	ldr	r3, [r3, #16]
 8001e6e:	00db      	lsls	r3, r3, #3
 8001e70:	4937      	ldr	r1, [pc, #220]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001e72:	4313      	orrs	r3, r2
 8001e74:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e76:	e03a      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	68db      	ldr	r3, [r3, #12]
 8001e7c:	2b00      	cmp	r3, #0
 8001e7e:	d020      	beq.n	8001ec2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001e80:	4b34      	ldr	r3, [pc, #208]	; (8001f54 <HAL_RCC_OscConfig+0x244>)
 8001e82:	2201      	movs	r2, #1
 8001e84:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001e86:	f7ff f843 	bl	8000f10 <HAL_GetTick>
 8001e8a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001e8c:	e008      	b.n	8001ea0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001e8e:	f7ff f83f 	bl	8000f10 <HAL_GetTick>
 8001e92:	4602      	mov	r2, r0
 8001e94:	693b      	ldr	r3, [r7, #16]
 8001e96:	1ad3      	subs	r3, r2, r3
 8001e98:	2b02      	cmp	r3, #2
 8001e9a:	d901      	bls.n	8001ea0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001e9c:	2303      	movs	r3, #3
 8001e9e:	e1a8      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ea0:	4b2b      	ldr	r3, [pc, #172]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	f003 0302 	and.w	r3, r3, #2
 8001ea8:	2b00      	cmp	r3, #0
 8001eaa:	d0f0      	beq.n	8001e8e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001eac:	4b28      	ldr	r3, [pc, #160]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001eae:	681b      	ldr	r3, [r3, #0]
 8001eb0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	691b      	ldr	r3, [r3, #16]
 8001eb8:	00db      	lsls	r3, r3, #3
 8001eba:	4925      	ldr	r1, [pc, #148]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ebc:	4313      	orrs	r3, r2
 8001ebe:	600b      	str	r3, [r1, #0]
 8001ec0:	e015      	b.n	8001eee <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001ec2:	4b24      	ldr	r3, [pc, #144]	; (8001f54 <HAL_RCC_OscConfig+0x244>)
 8001ec4:	2200      	movs	r2, #0
 8001ec6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001ec8:	f7ff f822 	bl	8000f10 <HAL_GetTick>
 8001ecc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ece:	e008      	b.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8001ed0:	f7ff f81e 	bl	8000f10 <HAL_GetTick>
 8001ed4:	4602      	mov	r2, r0
 8001ed6:	693b      	ldr	r3, [r7, #16]
 8001ed8:	1ad3      	subs	r3, r2, r3
 8001eda:	2b02      	cmp	r3, #2
 8001edc:	d901      	bls.n	8001ee2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001ede:	2303      	movs	r3, #3
 8001ee0:	e187      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001ee2:	4b1b      	ldr	r3, [pc, #108]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001ee4:	681b      	ldr	r3, [r3, #0]
 8001ee6:	f003 0302 	and.w	r3, r3, #2
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d1f0      	bne.n	8001ed0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	681b      	ldr	r3, [r3, #0]
 8001ef2:	f003 0308 	and.w	r3, r3, #8
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d036      	beq.n	8001f68 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	695b      	ldr	r3, [r3, #20]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d016      	beq.n	8001f30 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f02:	4b15      	ldr	r3, [pc, #84]	; (8001f58 <HAL_RCC_OscConfig+0x248>)
 8001f04:	2201      	movs	r2, #1
 8001f06:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001f08:	f7ff f802 	bl	8000f10 <HAL_GetTick>
 8001f0c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f0e:	e008      	b.n	8001f22 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f10:	f7fe fffe 	bl	8000f10 <HAL_GetTick>
 8001f14:	4602      	mov	r2, r0
 8001f16:	693b      	ldr	r3, [r7, #16]
 8001f18:	1ad3      	subs	r3, r2, r3
 8001f1a:	2b02      	cmp	r3, #2
 8001f1c:	d901      	bls.n	8001f22 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001f1e:	2303      	movs	r3, #3
 8001f20:	e167      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f22:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <HAL_RCC_OscConfig+0x240>)
 8001f24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f26:	f003 0302 	and.w	r3, r3, #2
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d0f0      	beq.n	8001f10 <HAL_RCC_OscConfig+0x200>
 8001f2e:	e01b      	b.n	8001f68 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f30:	4b09      	ldr	r3, [pc, #36]	; (8001f58 <HAL_RCC_OscConfig+0x248>)
 8001f32:	2200      	movs	r2, #0
 8001f34:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f36:	f7fe ffeb 	bl	8000f10 <HAL_GetTick>
 8001f3a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f3c:	e00e      	b.n	8001f5c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8001f3e:	f7fe ffe7 	bl	8000f10 <HAL_GetTick>
 8001f42:	4602      	mov	r2, r0
 8001f44:	693b      	ldr	r3, [r7, #16]
 8001f46:	1ad3      	subs	r3, r2, r3
 8001f48:	2b02      	cmp	r3, #2
 8001f4a:	d907      	bls.n	8001f5c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001f4c:	2303      	movs	r3, #3
 8001f4e:	e150      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
 8001f50:	40023800 	.word	0x40023800
 8001f54:	42470000 	.word	0x42470000
 8001f58:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f5c:	4b88      	ldr	r3, [pc, #544]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f5e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001f60:	f003 0302 	and.w	r3, r3, #2
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d1ea      	bne.n	8001f3e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001f68:	687b      	ldr	r3, [r7, #4]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f003 0304 	and.w	r3, r3, #4
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	f000 8097 	beq.w	80020a4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001f76:	2300      	movs	r3, #0
 8001f78:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001f7a:	4b81      	ldr	r3, [pc, #516]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f7e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d10f      	bne.n	8001fa6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001f86:	2300      	movs	r3, #0
 8001f88:	60bb      	str	r3, [r7, #8]
 8001f8a:	4b7d      	ldr	r3, [pc, #500]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8e:	4a7c      	ldr	r2, [pc, #496]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f90:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001f94:	6413      	str	r3, [r2, #64]	; 0x40
 8001f96:	4b7a      	ldr	r3, [pc, #488]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001f9e:	60bb      	str	r3, [r7, #8]
 8001fa0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fa2:	2301      	movs	r3, #1
 8001fa4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fa6:	4b77      	ldr	r3, [pc, #476]	; (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d118      	bne.n	8001fe4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001fb2:	4b74      	ldr	r3, [pc, #464]	; (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	4a73      	ldr	r2, [pc, #460]	; (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fb8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001fbc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001fbe:	f7fe ffa7 	bl	8000f10 <HAL_GetTick>
 8001fc2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fc4:	e008      	b.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001fc6:	f7fe ffa3 	bl	8000f10 <HAL_GetTick>
 8001fca:	4602      	mov	r2, r0
 8001fcc:	693b      	ldr	r3, [r7, #16]
 8001fce:	1ad3      	subs	r3, r2, r3
 8001fd0:	2b02      	cmp	r3, #2
 8001fd2:	d901      	bls.n	8001fd8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001fd4:	2303      	movs	r3, #3
 8001fd6:	e10c      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fd8:	4b6a      	ldr	r3, [pc, #424]	; (8002184 <HAL_RCC_OscConfig+0x474>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001fe0:	2b00      	cmp	r3, #0
 8001fe2:	d0f0      	beq.n	8001fc6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001fe4:	687b      	ldr	r3, [r7, #4]
 8001fe6:	689b      	ldr	r3, [r3, #8]
 8001fe8:	2b01      	cmp	r3, #1
 8001fea:	d106      	bne.n	8001ffa <HAL_RCC_OscConfig+0x2ea>
 8001fec:	4b64      	ldr	r3, [pc, #400]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001fee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001ff0:	4a63      	ldr	r2, [pc, #396]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8001ff2:	f043 0301 	orr.w	r3, r3, #1
 8001ff6:	6713      	str	r3, [r2, #112]	; 0x70
 8001ff8:	e01c      	b.n	8002034 <HAL_RCC_OscConfig+0x324>
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	689b      	ldr	r3, [r3, #8]
 8001ffe:	2b05      	cmp	r3, #5
 8002000:	d10c      	bne.n	800201c <HAL_RCC_OscConfig+0x30c>
 8002002:	4b5f      	ldr	r3, [pc, #380]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002004:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002006:	4a5e      	ldr	r2, [pc, #376]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002008:	f043 0304 	orr.w	r3, r3, #4
 800200c:	6713      	str	r3, [r2, #112]	; 0x70
 800200e:	4b5c      	ldr	r3, [pc, #368]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002010:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002012:	4a5b      	ldr	r2, [pc, #364]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002014:	f043 0301 	orr.w	r3, r3, #1
 8002018:	6713      	str	r3, [r2, #112]	; 0x70
 800201a:	e00b      	b.n	8002034 <HAL_RCC_OscConfig+0x324>
 800201c:	4b58      	ldr	r3, [pc, #352]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800201e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002020:	4a57      	ldr	r2, [pc, #348]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002022:	f023 0301 	bic.w	r3, r3, #1
 8002026:	6713      	str	r3, [r2, #112]	; 0x70
 8002028:	4b55      	ldr	r3, [pc, #340]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800202a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800202c:	4a54      	ldr	r2, [pc, #336]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800202e:	f023 0304 	bic.w	r3, r3, #4
 8002032:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	689b      	ldr	r3, [r3, #8]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d015      	beq.n	8002068 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800203c:	f7fe ff68 	bl	8000f10 <HAL_GetTick>
 8002040:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002042:	e00a      	b.n	800205a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002044:	f7fe ff64 	bl	8000f10 <HAL_GetTick>
 8002048:	4602      	mov	r2, r0
 800204a:	693b      	ldr	r3, [r7, #16]
 800204c:	1ad3      	subs	r3, r2, r3
 800204e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002052:	4293      	cmp	r3, r2
 8002054:	d901      	bls.n	800205a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002056:	2303      	movs	r3, #3
 8002058:	e0cb      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800205a:	4b49      	ldr	r3, [pc, #292]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800205c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800205e:	f003 0302 	and.w	r3, r3, #2
 8002062:	2b00      	cmp	r3, #0
 8002064:	d0ee      	beq.n	8002044 <HAL_RCC_OscConfig+0x334>
 8002066:	e014      	b.n	8002092 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002068:	f7fe ff52 	bl	8000f10 <HAL_GetTick>
 800206c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800206e:	e00a      	b.n	8002086 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002070:	f7fe ff4e 	bl	8000f10 <HAL_GetTick>
 8002074:	4602      	mov	r2, r0
 8002076:	693b      	ldr	r3, [r7, #16]
 8002078:	1ad3      	subs	r3, r2, r3
 800207a:	f241 3288 	movw	r2, #5000	; 0x1388
 800207e:	4293      	cmp	r3, r2
 8002080:	d901      	bls.n	8002086 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002082:	2303      	movs	r3, #3
 8002084:	e0b5      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002086:	4b3e      	ldr	r3, [pc, #248]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800208a:	f003 0302 	and.w	r3, r3, #2
 800208e:	2b00      	cmp	r3, #0
 8002090:	d1ee      	bne.n	8002070 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002092:	7dfb      	ldrb	r3, [r7, #23]
 8002094:	2b01      	cmp	r3, #1
 8002096:	d105      	bne.n	80020a4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002098:	4b39      	ldr	r3, [pc, #228]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800209a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800209c:	4a38      	ldr	r2, [pc, #224]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800209e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80020a2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80020a4:	687b      	ldr	r3, [r7, #4]
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	f000 80a1 	beq.w	80021f0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80020ae:	4b34      	ldr	r3, [pc, #208]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 80020b0:	689b      	ldr	r3, [r3, #8]
 80020b2:	f003 030c 	and.w	r3, r3, #12
 80020b6:	2b08      	cmp	r3, #8
 80020b8:	d05c      	beq.n	8002174 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	699b      	ldr	r3, [r3, #24]
 80020be:	2b02      	cmp	r3, #2
 80020c0:	d141      	bne.n	8002146 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80020c2:	4b31      	ldr	r3, [pc, #196]	; (8002188 <HAL_RCC_OscConfig+0x478>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020c8:	f7fe ff22 	bl	8000f10 <HAL_GetTick>
 80020cc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020ce:	e008      	b.n	80020e2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80020d0:	f7fe ff1e 	bl	8000f10 <HAL_GetTick>
 80020d4:	4602      	mov	r2, r0
 80020d6:	693b      	ldr	r3, [r7, #16]
 80020d8:	1ad3      	subs	r3, r2, r3
 80020da:	2b02      	cmp	r3, #2
 80020dc:	d901      	bls.n	80020e2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80020de:	2303      	movs	r3, #3
 80020e0:	e087      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80020e2:	4b27      	ldr	r3, [pc, #156]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 80020e4:	681b      	ldr	r3, [r3, #0]
 80020e6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80020ea:	2b00      	cmp	r3, #0
 80020ec:	d1f0      	bne.n	80020d0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	69da      	ldr	r2, [r3, #28]
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	6a1b      	ldr	r3, [r3, #32]
 80020f6:	431a      	orrs	r2, r3
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80020fc:	019b      	lsls	r3, r3, #6
 80020fe:	431a      	orrs	r2, r3
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002104:	085b      	lsrs	r3, r3, #1
 8002106:	3b01      	subs	r3, #1
 8002108:	041b      	lsls	r3, r3, #16
 800210a:	431a      	orrs	r2, r3
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002110:	061b      	lsls	r3, r3, #24
 8002112:	491b      	ldr	r1, [pc, #108]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002114:	4313      	orrs	r3, r2
 8002116:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002118:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCC_OscConfig+0x478>)
 800211a:	2201      	movs	r2, #1
 800211c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800211e:	f7fe fef7 	bl	8000f10 <HAL_GetTick>
 8002122:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002124:	e008      	b.n	8002138 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002126:	f7fe fef3 	bl	8000f10 <HAL_GetTick>
 800212a:	4602      	mov	r2, r0
 800212c:	693b      	ldr	r3, [r7, #16]
 800212e:	1ad3      	subs	r3, r2, r3
 8002130:	2b02      	cmp	r3, #2
 8002132:	d901      	bls.n	8002138 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002134:	2303      	movs	r3, #3
 8002136:	e05c      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002138:	4b11      	ldr	r3, [pc, #68]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002140:	2b00      	cmp	r3, #0
 8002142:	d0f0      	beq.n	8002126 <HAL_RCC_OscConfig+0x416>
 8002144:	e054      	b.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002146:	4b10      	ldr	r3, [pc, #64]	; (8002188 <HAL_RCC_OscConfig+0x478>)
 8002148:	2200      	movs	r2, #0
 800214a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800214c:	f7fe fee0 	bl	8000f10 <HAL_GetTick>
 8002150:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002152:	e008      	b.n	8002166 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002154:	f7fe fedc 	bl	8000f10 <HAL_GetTick>
 8002158:	4602      	mov	r2, r0
 800215a:	693b      	ldr	r3, [r7, #16]
 800215c:	1ad3      	subs	r3, r2, r3
 800215e:	2b02      	cmp	r3, #2
 8002160:	d901      	bls.n	8002166 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002162:	2303      	movs	r3, #3
 8002164:	e045      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002166:	4b06      	ldr	r3, [pc, #24]	; (8002180 <HAL_RCC_OscConfig+0x470>)
 8002168:	681b      	ldr	r3, [r3, #0]
 800216a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800216e:	2b00      	cmp	r3, #0
 8002170:	d1f0      	bne.n	8002154 <HAL_RCC_OscConfig+0x444>
 8002172:	e03d      	b.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	699b      	ldr	r3, [r3, #24]
 8002178:	2b01      	cmp	r3, #1
 800217a:	d107      	bne.n	800218c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800217c:	2301      	movs	r3, #1
 800217e:	e038      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
 8002180:	40023800 	.word	0x40023800
 8002184:	40007000 	.word	0x40007000
 8002188:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800218c:	4b1b      	ldr	r3, [pc, #108]	; (80021fc <HAL_RCC_OscConfig+0x4ec>)
 800218e:	685b      	ldr	r3, [r3, #4]
 8002190:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	699b      	ldr	r3, [r3, #24]
 8002196:	2b01      	cmp	r3, #1
 8002198:	d028      	beq.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80021a4:	429a      	cmp	r2, r3
 80021a6:	d121      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021a8:	68fb      	ldr	r3, [r7, #12]
 80021aa:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80021ae:	687b      	ldr	r3, [r7, #4]
 80021b0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021b2:	429a      	cmp	r2, r3
 80021b4:	d11a      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021b6:	68fa      	ldr	r2, [r7, #12]
 80021b8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80021bc:	4013      	ands	r3, r2
 80021be:	687a      	ldr	r2, [r7, #4]
 80021c0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80021c2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80021c4:	4293      	cmp	r3, r2
 80021c6:	d111      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80021d2:	085b      	lsrs	r3, r3, #1
 80021d4:	3b01      	subs	r3, #1
 80021d6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80021d8:	429a      	cmp	r2, r3
 80021da:	d107      	bne.n	80021ec <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80021dc:	68fb      	ldr	r3, [r7, #12]
 80021de:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80021e2:	687b      	ldr	r3, [r7, #4]
 80021e4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80021e6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80021e8:	429a      	cmp	r2, r3
 80021ea:	d001      	beq.n	80021f0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80021ec:	2301      	movs	r3, #1
 80021ee:	e000      	b.n	80021f2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80021f0:	2300      	movs	r3, #0
}
 80021f2:	4618      	mov	r0, r3
 80021f4:	3718      	adds	r7, #24
 80021f6:	46bd      	mov	sp, r7
 80021f8:	bd80      	pop	{r7, pc}
 80021fa:	bf00      	nop
 80021fc:	40023800 	.word	0x40023800

08002200 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002200:	b580      	push	{r7, lr}
 8002202:	b084      	sub	sp, #16
 8002204:	af00      	add	r7, sp, #0
 8002206:	6078      	str	r0, [r7, #4]
 8002208:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	2b00      	cmp	r3, #0
 800220e:	d101      	bne.n	8002214 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002210:	2301      	movs	r3, #1
 8002212:	e0cc      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002214:	4b68      	ldr	r3, [pc, #416]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	f003 0307 	and.w	r3, r3, #7
 800221c:	683a      	ldr	r2, [r7, #0]
 800221e:	429a      	cmp	r2, r3
 8002220:	d90c      	bls.n	800223c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002222:	4b65      	ldr	r3, [pc, #404]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002224:	683a      	ldr	r2, [r7, #0]
 8002226:	b2d2      	uxtb	r2, r2
 8002228:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800222a:	4b63      	ldr	r3, [pc, #396]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	f003 0307 	and.w	r3, r3, #7
 8002232:	683a      	ldr	r2, [r7, #0]
 8002234:	429a      	cmp	r2, r3
 8002236:	d001      	beq.n	800223c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002238:	2301      	movs	r3, #1
 800223a:	e0b8      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	f003 0302 	and.w	r3, r3, #2
 8002244:	2b00      	cmp	r3, #0
 8002246:	d020      	beq.n	800228a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002248:	687b      	ldr	r3, [r7, #4]
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	f003 0304 	and.w	r3, r3, #4
 8002250:	2b00      	cmp	r3, #0
 8002252:	d005      	beq.n	8002260 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002254:	4b59      	ldr	r3, [pc, #356]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002256:	689b      	ldr	r3, [r3, #8]
 8002258:	4a58      	ldr	r2, [pc, #352]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800225a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800225e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	f003 0308 	and.w	r3, r3, #8
 8002268:	2b00      	cmp	r3, #0
 800226a:	d005      	beq.n	8002278 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800226c:	4b53      	ldr	r3, [pc, #332]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800226e:	689b      	ldr	r3, [r3, #8]
 8002270:	4a52      	ldr	r2, [pc, #328]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002272:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002276:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002278:	4b50      	ldr	r3, [pc, #320]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800227a:	689b      	ldr	r3, [r3, #8]
 800227c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	689b      	ldr	r3, [r3, #8]
 8002284:	494d      	ldr	r1, [pc, #308]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002286:	4313      	orrs	r3, r2
 8002288:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0301 	and.w	r3, r3, #1
 8002292:	2b00      	cmp	r3, #0
 8002294:	d044      	beq.n	8002320 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	685b      	ldr	r3, [r3, #4]
 800229a:	2b01      	cmp	r3, #1
 800229c:	d107      	bne.n	80022ae <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800229e:	4b47      	ldr	r3, [pc, #284]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022a6:	2b00      	cmp	r3, #0
 80022a8:	d119      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022aa:	2301      	movs	r3, #1
 80022ac:	e07f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	685b      	ldr	r3, [r3, #4]
 80022b2:	2b02      	cmp	r3, #2
 80022b4:	d003      	beq.n	80022be <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80022b6:	687b      	ldr	r3, [r7, #4]
 80022b8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80022ba:	2b03      	cmp	r3, #3
 80022bc:	d107      	bne.n	80022ce <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022be:	4b3f      	ldr	r3, [pc, #252]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022c0:	681b      	ldr	r3, [r3, #0]
 80022c2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d109      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022ca:	2301      	movs	r3, #1
 80022cc:	e06f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022ce:	4b3b      	ldr	r3, [pc, #236]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f003 0302 	and.w	r3, r3, #2
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d101      	bne.n	80022de <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022da:	2301      	movs	r3, #1
 80022dc:	e067      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80022de:	4b37      	ldr	r3, [pc, #220]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022e0:	689b      	ldr	r3, [r3, #8]
 80022e2:	f023 0203 	bic.w	r2, r3, #3
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	4934      	ldr	r1, [pc, #208]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 80022ec:	4313      	orrs	r3, r2
 80022ee:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80022f0:	f7fe fe0e 	bl	8000f10 <HAL_GetTick>
 80022f4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80022f6:	e00a      	b.n	800230e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80022f8:	f7fe fe0a 	bl	8000f10 <HAL_GetTick>
 80022fc:	4602      	mov	r2, r0
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	1ad3      	subs	r3, r2, r3
 8002302:	f241 3288 	movw	r2, #5000	; 0x1388
 8002306:	4293      	cmp	r3, r2
 8002308:	d901      	bls.n	800230e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800230a:	2303      	movs	r3, #3
 800230c:	e04f      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800230e:	4b2b      	ldr	r3, [pc, #172]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	f003 020c 	and.w	r2, r3, #12
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	009b      	lsls	r3, r3, #2
 800231c:	429a      	cmp	r2, r3
 800231e:	d1eb      	bne.n	80022f8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002320:	4b25      	ldr	r3, [pc, #148]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	f003 0307 	and.w	r3, r3, #7
 8002328:	683a      	ldr	r2, [r7, #0]
 800232a:	429a      	cmp	r2, r3
 800232c:	d20c      	bcs.n	8002348 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800232e:	4b22      	ldr	r3, [pc, #136]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002330:	683a      	ldr	r2, [r7, #0]
 8002332:	b2d2      	uxtb	r2, r2
 8002334:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002336:	4b20      	ldr	r3, [pc, #128]	; (80023b8 <HAL_RCC_ClockConfig+0x1b8>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f003 0307 	and.w	r3, r3, #7
 800233e:	683a      	ldr	r2, [r7, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d001      	beq.n	8002348 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e032      	b.n	80023ae <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	f003 0304 	and.w	r3, r3, #4
 8002350:	2b00      	cmp	r3, #0
 8002352:	d008      	beq.n	8002366 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002354:	4b19      	ldr	r3, [pc, #100]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002356:	689b      	ldr	r3, [r3, #8]
 8002358:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800235c:	687b      	ldr	r3, [r7, #4]
 800235e:	68db      	ldr	r3, [r3, #12]
 8002360:	4916      	ldr	r1, [pc, #88]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002362:	4313      	orrs	r3, r2
 8002364:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	f003 0308 	and.w	r3, r3, #8
 800236e:	2b00      	cmp	r3, #0
 8002370:	d009      	beq.n	8002386 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002372:	4b12      	ldr	r3, [pc, #72]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	691b      	ldr	r3, [r3, #16]
 800237e:	00db      	lsls	r3, r3, #3
 8002380:	490e      	ldr	r1, [pc, #56]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 8002382:	4313      	orrs	r3, r2
 8002384:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002386:	f000 f821 	bl	80023cc <HAL_RCC_GetSysClockFreq>
 800238a:	4602      	mov	r2, r0
 800238c:	4b0b      	ldr	r3, [pc, #44]	; (80023bc <HAL_RCC_ClockConfig+0x1bc>)
 800238e:	689b      	ldr	r3, [r3, #8]
 8002390:	091b      	lsrs	r3, r3, #4
 8002392:	f003 030f 	and.w	r3, r3, #15
 8002396:	490a      	ldr	r1, [pc, #40]	; (80023c0 <HAL_RCC_ClockConfig+0x1c0>)
 8002398:	5ccb      	ldrb	r3, [r1, r3]
 800239a:	fa22 f303 	lsr.w	r3, r2, r3
 800239e:	4a09      	ldr	r2, [pc, #36]	; (80023c4 <HAL_RCC_ClockConfig+0x1c4>)
 80023a0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80023a2:	4b09      	ldr	r3, [pc, #36]	; (80023c8 <HAL_RCC_ClockConfig+0x1c8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4618      	mov	r0, r3
 80023a8:	f7fe fd6e 	bl	8000e88 <HAL_InitTick>

  return HAL_OK;
 80023ac:	2300      	movs	r3, #0
}
 80023ae:	4618      	mov	r0, r3
 80023b0:	3710      	adds	r7, #16
 80023b2:	46bd      	mov	sp, r7
 80023b4:	bd80      	pop	{r7, pc}
 80023b6:	bf00      	nop
 80023b8:	40023c00 	.word	0x40023c00
 80023bc:	40023800 	.word	0x40023800
 80023c0:	08003980 	.word	0x08003980
 80023c4:	20000004 	.word	0x20000004
 80023c8:	20000008 	.word	0x20000008

080023cc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80023cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80023d0:	b094      	sub	sp, #80	; 0x50
 80023d2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80023d4:	2300      	movs	r3, #0
 80023d6:	647b      	str	r3, [r7, #68]	; 0x44
 80023d8:	2300      	movs	r3, #0
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
 80023dc:	2300      	movs	r3, #0
 80023de:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80023e0:	2300      	movs	r3, #0
 80023e2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80023e4:	4b79      	ldr	r3, [pc, #484]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 80023e6:	689b      	ldr	r3, [r3, #8]
 80023e8:	f003 030c 	and.w	r3, r3, #12
 80023ec:	2b08      	cmp	r3, #8
 80023ee:	d00d      	beq.n	800240c <HAL_RCC_GetSysClockFreq+0x40>
 80023f0:	2b08      	cmp	r3, #8
 80023f2:	f200 80e1 	bhi.w	80025b8 <HAL_RCC_GetSysClockFreq+0x1ec>
 80023f6:	2b00      	cmp	r3, #0
 80023f8:	d002      	beq.n	8002400 <HAL_RCC_GetSysClockFreq+0x34>
 80023fa:	2b04      	cmp	r3, #4
 80023fc:	d003      	beq.n	8002406 <HAL_RCC_GetSysClockFreq+0x3a>
 80023fe:	e0db      	b.n	80025b8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002400:	4b73      	ldr	r3, [pc, #460]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x204>)
 8002402:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002404:	e0db      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002406:	4b73      	ldr	r3, [pc, #460]	; (80025d4 <HAL_RCC_GetSysClockFreq+0x208>)
 8002408:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800240a:	e0d8      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800240c:	4b6f      	ldr	r3, [pc, #444]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002414:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002416:	4b6d      	ldr	r3, [pc, #436]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002418:	685b      	ldr	r3, [r3, #4]
 800241a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800241e:	2b00      	cmp	r3, #0
 8002420:	d063      	beq.n	80024ea <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002422:	4b6a      	ldr	r3, [pc, #424]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 8002424:	685b      	ldr	r3, [r3, #4]
 8002426:	099b      	lsrs	r3, r3, #6
 8002428:	2200      	movs	r2, #0
 800242a:	63bb      	str	r3, [r7, #56]	; 0x38
 800242c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800242e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002430:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002434:	633b      	str	r3, [r7, #48]	; 0x30
 8002436:	2300      	movs	r3, #0
 8002438:	637b      	str	r3, [r7, #52]	; 0x34
 800243a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800243e:	4622      	mov	r2, r4
 8002440:	462b      	mov	r3, r5
 8002442:	f04f 0000 	mov.w	r0, #0
 8002446:	f04f 0100 	mov.w	r1, #0
 800244a:	0159      	lsls	r1, r3, #5
 800244c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002450:	0150      	lsls	r0, r2, #5
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4621      	mov	r1, r4
 8002458:	1a51      	subs	r1, r2, r1
 800245a:	6139      	str	r1, [r7, #16]
 800245c:	4629      	mov	r1, r5
 800245e:	eb63 0301 	sbc.w	r3, r3, r1
 8002462:	617b      	str	r3, [r7, #20]
 8002464:	f04f 0200 	mov.w	r2, #0
 8002468:	f04f 0300 	mov.w	r3, #0
 800246c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002470:	4659      	mov	r1, fp
 8002472:	018b      	lsls	r3, r1, #6
 8002474:	4651      	mov	r1, sl
 8002476:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800247a:	4651      	mov	r1, sl
 800247c:	018a      	lsls	r2, r1, #6
 800247e:	4651      	mov	r1, sl
 8002480:	ebb2 0801 	subs.w	r8, r2, r1
 8002484:	4659      	mov	r1, fp
 8002486:	eb63 0901 	sbc.w	r9, r3, r1
 800248a:	f04f 0200 	mov.w	r2, #0
 800248e:	f04f 0300 	mov.w	r3, #0
 8002492:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002496:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800249a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800249e:	4690      	mov	r8, r2
 80024a0:	4699      	mov	r9, r3
 80024a2:	4623      	mov	r3, r4
 80024a4:	eb18 0303 	adds.w	r3, r8, r3
 80024a8:	60bb      	str	r3, [r7, #8]
 80024aa:	462b      	mov	r3, r5
 80024ac:	eb49 0303 	adc.w	r3, r9, r3
 80024b0:	60fb      	str	r3, [r7, #12]
 80024b2:	f04f 0200 	mov.w	r2, #0
 80024b6:	f04f 0300 	mov.w	r3, #0
 80024ba:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80024be:	4629      	mov	r1, r5
 80024c0:	024b      	lsls	r3, r1, #9
 80024c2:	4621      	mov	r1, r4
 80024c4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80024c8:	4621      	mov	r1, r4
 80024ca:	024a      	lsls	r2, r1, #9
 80024cc:	4610      	mov	r0, r2
 80024ce:	4619      	mov	r1, r3
 80024d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80024d2:	2200      	movs	r2, #0
 80024d4:	62bb      	str	r3, [r7, #40]	; 0x28
 80024d6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80024d8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80024dc:	f7fd fe7a 	bl	80001d4 <__aeabi_uldivmod>
 80024e0:	4602      	mov	r2, r0
 80024e2:	460b      	mov	r3, r1
 80024e4:	4613      	mov	r3, r2
 80024e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80024e8:	e058      	b.n	800259c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80024ea:	4b38      	ldr	r3, [pc, #224]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 80024ec:	685b      	ldr	r3, [r3, #4]
 80024ee:	099b      	lsrs	r3, r3, #6
 80024f0:	2200      	movs	r2, #0
 80024f2:	4618      	mov	r0, r3
 80024f4:	4611      	mov	r1, r2
 80024f6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80024fa:	623b      	str	r3, [r7, #32]
 80024fc:	2300      	movs	r3, #0
 80024fe:	627b      	str	r3, [r7, #36]	; 0x24
 8002500:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002504:	4642      	mov	r2, r8
 8002506:	464b      	mov	r3, r9
 8002508:	f04f 0000 	mov.w	r0, #0
 800250c:	f04f 0100 	mov.w	r1, #0
 8002510:	0159      	lsls	r1, r3, #5
 8002512:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002516:	0150      	lsls	r0, r2, #5
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4641      	mov	r1, r8
 800251e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002522:	4649      	mov	r1, r9
 8002524:	eb63 0b01 	sbc.w	fp, r3, r1
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	f04f 0300 	mov.w	r3, #0
 8002530:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002534:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002538:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800253c:	ebb2 040a 	subs.w	r4, r2, sl
 8002540:	eb63 050b 	sbc.w	r5, r3, fp
 8002544:	f04f 0200 	mov.w	r2, #0
 8002548:	f04f 0300 	mov.w	r3, #0
 800254c:	00eb      	lsls	r3, r5, #3
 800254e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002552:	00e2      	lsls	r2, r4, #3
 8002554:	4614      	mov	r4, r2
 8002556:	461d      	mov	r5, r3
 8002558:	4643      	mov	r3, r8
 800255a:	18e3      	adds	r3, r4, r3
 800255c:	603b      	str	r3, [r7, #0]
 800255e:	464b      	mov	r3, r9
 8002560:	eb45 0303 	adc.w	r3, r5, r3
 8002564:	607b      	str	r3, [r7, #4]
 8002566:	f04f 0200 	mov.w	r2, #0
 800256a:	f04f 0300 	mov.w	r3, #0
 800256e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002572:	4629      	mov	r1, r5
 8002574:	028b      	lsls	r3, r1, #10
 8002576:	4621      	mov	r1, r4
 8002578:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800257c:	4621      	mov	r1, r4
 800257e:	028a      	lsls	r2, r1, #10
 8002580:	4610      	mov	r0, r2
 8002582:	4619      	mov	r1, r3
 8002584:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002586:	2200      	movs	r2, #0
 8002588:	61bb      	str	r3, [r7, #24]
 800258a:	61fa      	str	r2, [r7, #28]
 800258c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002590:	f7fd fe20 	bl	80001d4 <__aeabi_uldivmod>
 8002594:	4602      	mov	r2, r0
 8002596:	460b      	mov	r3, r1
 8002598:	4613      	mov	r3, r2
 800259a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800259c:	4b0b      	ldr	r3, [pc, #44]	; (80025cc <HAL_RCC_GetSysClockFreq+0x200>)
 800259e:	685b      	ldr	r3, [r3, #4]
 80025a0:	0c1b      	lsrs	r3, r3, #16
 80025a2:	f003 0303 	and.w	r3, r3, #3
 80025a6:	3301      	adds	r3, #1
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80025ac:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80025ae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80025b0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025b4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025b6:	e002      	b.n	80025be <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80025b8:	4b05      	ldr	r3, [pc, #20]	; (80025d0 <HAL_RCC_GetSysClockFreq+0x204>)
 80025ba:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80025bc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80025be:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80025c0:	4618      	mov	r0, r3
 80025c2:	3750      	adds	r7, #80	; 0x50
 80025c4:	46bd      	mov	sp, r7
 80025c6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80025ca:	bf00      	nop
 80025cc:	40023800 	.word	0x40023800
 80025d0:	00f42400 	.word	0x00f42400
 80025d4:	007a1200 	.word	0x007a1200

080025d8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80025d8:	b480      	push	{r7}
 80025da:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80025dc:	4b03      	ldr	r3, [pc, #12]	; (80025ec <HAL_RCC_GetHCLKFreq+0x14>)
 80025de:	681b      	ldr	r3, [r3, #0]
}
 80025e0:	4618      	mov	r0, r3
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	20000004 	.word	0x20000004

080025f0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80025f0:	b580      	push	{r7, lr}
 80025f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80025f4:	f7ff fff0 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 80025f8:	4602      	mov	r2, r0
 80025fa:	4b05      	ldr	r3, [pc, #20]	; (8002610 <HAL_RCC_GetPCLK1Freq+0x20>)
 80025fc:	689b      	ldr	r3, [r3, #8]
 80025fe:	0a9b      	lsrs	r3, r3, #10
 8002600:	f003 0307 	and.w	r3, r3, #7
 8002604:	4903      	ldr	r1, [pc, #12]	; (8002614 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002606:	5ccb      	ldrb	r3, [r1, r3]
 8002608:	fa22 f303 	lsr.w	r3, r2, r3
}
 800260c:	4618      	mov	r0, r3
 800260e:	bd80      	pop	{r7, pc}
 8002610:	40023800 	.word	0x40023800
 8002614:	08003990 	.word	0x08003990

08002618 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002618:	b580      	push	{r7, lr}
 800261a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800261c:	f7ff ffdc 	bl	80025d8 <HAL_RCC_GetHCLKFreq>
 8002620:	4602      	mov	r2, r0
 8002622:	4b05      	ldr	r3, [pc, #20]	; (8002638 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002624:	689b      	ldr	r3, [r3, #8]
 8002626:	0b5b      	lsrs	r3, r3, #13
 8002628:	f003 0307 	and.w	r3, r3, #7
 800262c:	4903      	ldr	r1, [pc, #12]	; (800263c <HAL_RCC_GetPCLK2Freq+0x24>)
 800262e:	5ccb      	ldrb	r3, [r1, r3]
 8002630:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002634:	4618      	mov	r0, r3
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40023800 	.word	0x40023800
 800263c:	08003990 	.word	0x08003990

08002640 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	b082      	sub	sp, #8
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	2b00      	cmp	r3, #0
 800264c:	d101      	bne.n	8002652 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800264e:	2301      	movs	r3, #1
 8002650:	e07b      	b.n	800274a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002656:	2b00      	cmp	r3, #0
 8002658:	d108      	bne.n	800266c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	685b      	ldr	r3, [r3, #4]
 800265e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002662:	d009      	beq.n	8002678 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	2200      	movs	r2, #0
 8002668:	61da      	str	r2, [r3, #28]
 800266a:	e005      	b.n	8002678 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	2200      	movs	r2, #0
 8002670:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002672:	687b      	ldr	r3, [r7, #4]
 8002674:	2200      	movs	r2, #0
 8002676:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	2200      	movs	r2, #0
 800267c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d106      	bne.n	8002698 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	2200      	movs	r2, #0
 800268e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002692:	6878      	ldr	r0, [r7, #4]
 8002694:	f7fe fa68 	bl	8000b68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2202      	movs	r2, #2
 800269c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	681a      	ldr	r2, [r3, #0]
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80026ae:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	689b      	ldr	r3, [r3, #8]
 80026bc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80026c0:	431a      	orrs	r2, r3
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	68db      	ldr	r3, [r3, #12]
 80026c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80026ca:	431a      	orrs	r2, r3
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	691b      	ldr	r3, [r3, #16]
 80026d0:	f003 0302 	and.w	r3, r3, #2
 80026d4:	431a      	orrs	r2, r3
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	f003 0301 	and.w	r3, r3, #1
 80026de:	431a      	orrs	r2, r3
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	699b      	ldr	r3, [r3, #24]
 80026e4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80026e8:	431a      	orrs	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	69db      	ldr	r3, [r3, #28]
 80026ee:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80026f2:	431a      	orrs	r2, r3
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	6a1b      	ldr	r3, [r3, #32]
 80026f8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026fc:	ea42 0103 	orr.w	r1, r2, r3
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002704:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002708:	687b      	ldr	r3, [r7, #4]
 800270a:	681b      	ldr	r3, [r3, #0]
 800270c:	430a      	orrs	r2, r1
 800270e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	699b      	ldr	r3, [r3, #24]
 8002714:	0c1b      	lsrs	r3, r3, #16
 8002716:	f003 0104 	and.w	r1, r3, #4
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800271e:	f003 0210 	and.w	r2, r3, #16
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	681b      	ldr	r3, [r3, #0]
 8002726:	430a      	orrs	r2, r1
 8002728:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	69da      	ldr	r2, [r3, #28]
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002738:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	2200      	movs	r2, #0
 800273e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002740:	687b      	ldr	r3, [r7, #4]
 8002742:	2201      	movs	r2, #1
 8002744:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002748:	2300      	movs	r3, #0
}
 800274a:	4618      	mov	r0, r3
 800274c:	3708      	adds	r7, #8
 800274e:	46bd      	mov	sp, r7
 8002750:	bd80      	pop	{r7, pc}

08002752 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002752:	b580      	push	{r7, lr}
 8002754:	b082      	sub	sp, #8
 8002756:	af00      	add	r7, sp, #0
 8002758:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	2b00      	cmp	r3, #0
 800275e:	d101      	bne.n	8002764 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002760:	2301      	movs	r3, #1
 8002762:	e041      	b.n	80027e8 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800276a:	b2db      	uxtb	r3, r3
 800276c:	2b00      	cmp	r3, #0
 800276e:	d106      	bne.n	800277e <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	2200      	movs	r2, #0
 8002774:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002778:	6878      	ldr	r0, [r7, #4]
 800277a:	f7fe fa5d 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	2202      	movs	r2, #2
 8002782:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	681a      	ldr	r2, [r3, #0]
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	3304      	adds	r3, #4
 800278e:	4619      	mov	r1, r3
 8002790:	4610      	mov	r0, r2
 8002792:	f000 fac1 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002796:	687b      	ldr	r3, [r7, #4]
 8002798:	2201      	movs	r2, #1
 800279a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	2201      	movs	r2, #1
 80027a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	2201      	movs	r2, #1
 80027aa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	2201      	movs	r2, #1
 80027b2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	2201      	movs	r2, #1
 80027ba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	2201      	movs	r2, #1
 80027c2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2201      	movs	r2, #1
 80027ca:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	2201      	movs	r2, #1
 80027d2:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	2201      	movs	r2, #1
 80027da:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	2201      	movs	r2, #1
 80027e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80027e6:	2300      	movs	r3, #0
}
 80027e8:	4618      	mov	r0, r3
 80027ea:	3708      	adds	r7, #8
 80027ec:	46bd      	mov	sp, r7
 80027ee:	bd80      	pop	{r7, pc}

080027f0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2b00      	cmp	r3, #0
 80027fc:	d101      	bne.n	8002802 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80027fe:	2301      	movs	r3, #1
 8002800:	e041      	b.n	8002886 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002808:	b2db      	uxtb	r3, r3
 800280a:	2b00      	cmp	r3, #0
 800280c:	d106      	bne.n	800281c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	2200      	movs	r2, #0
 8002812:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002816:	6878      	ldr	r0, [r7, #4]
 8002818:	f000 f839 	bl	800288e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	2202      	movs	r2, #2
 8002820:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	3304      	adds	r3, #4
 800282c:	4619      	mov	r1, r3
 800282e:	4610      	mov	r0, r2
 8002830:	f000 fa72 	bl	8002d18 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	2201      	movs	r2, #1
 8002838:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	2201      	movs	r2, #1
 8002840:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	2201      	movs	r2, #1
 8002848:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2201      	movs	r2, #1
 8002850:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	2201      	movs	r2, #1
 8002858:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	2201      	movs	r2, #1
 8002860:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	2201      	movs	r2, #1
 8002868:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	2201      	movs	r2, #1
 8002870:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	2201      	movs	r2, #1
 8002878:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	2201      	movs	r2, #1
 8002880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8002884:	2300      	movs	r3, #0
}
 8002886:	4618      	mov	r0, r3
 8002888:	3708      	adds	r7, #8
 800288a:	46bd      	mov	sp, r7
 800288c:	bd80      	pop	{r7, pc}

0800288e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr
	...

080028a4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80028a4:	b580      	push	{r7, lr}
 80028a6:	b084      	sub	sp, #16
 80028a8:	af00      	add	r7, sp, #0
 80028aa:	6078      	str	r0, [r7, #4]
 80028ac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	d109      	bne.n	80028c8 <HAL_TIM_PWM_Start+0x24>
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80028ba:	b2db      	uxtb	r3, r3
 80028bc:	2b01      	cmp	r3, #1
 80028be:	bf14      	ite	ne
 80028c0:	2301      	movne	r3, #1
 80028c2:	2300      	moveq	r3, #0
 80028c4:	b2db      	uxtb	r3, r3
 80028c6:	e022      	b.n	800290e <HAL_TIM_PWM_Start+0x6a>
 80028c8:	683b      	ldr	r3, [r7, #0]
 80028ca:	2b04      	cmp	r3, #4
 80028cc:	d109      	bne.n	80028e2 <HAL_TIM_PWM_Start+0x3e>
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80028d4:	b2db      	uxtb	r3, r3
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	bf14      	ite	ne
 80028da:	2301      	movne	r3, #1
 80028dc:	2300      	moveq	r3, #0
 80028de:	b2db      	uxtb	r3, r3
 80028e0:	e015      	b.n	800290e <HAL_TIM_PWM_Start+0x6a>
 80028e2:	683b      	ldr	r3, [r7, #0]
 80028e4:	2b08      	cmp	r3, #8
 80028e6:	d109      	bne.n	80028fc <HAL_TIM_PWM_Start+0x58>
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80028ee:	b2db      	uxtb	r3, r3
 80028f0:	2b01      	cmp	r3, #1
 80028f2:	bf14      	ite	ne
 80028f4:	2301      	movne	r3, #1
 80028f6:	2300      	moveq	r3, #0
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	e008      	b.n	800290e <HAL_TIM_PWM_Start+0x6a>
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8002902:	b2db      	uxtb	r3, r3
 8002904:	2b01      	cmp	r3, #1
 8002906:	bf14      	ite	ne
 8002908:	2301      	movne	r3, #1
 800290a:	2300      	moveq	r3, #0
 800290c:	b2db      	uxtb	r3, r3
 800290e:	2b00      	cmp	r3, #0
 8002910:	d001      	beq.n	8002916 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002912:	2301      	movs	r3, #1
 8002914:	e068      	b.n	80029e8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002916:	683b      	ldr	r3, [r7, #0]
 8002918:	2b00      	cmp	r3, #0
 800291a:	d104      	bne.n	8002926 <HAL_TIM_PWM_Start+0x82>
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2202      	movs	r2, #2
 8002920:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8002924:	e013      	b.n	800294e <HAL_TIM_PWM_Start+0xaa>
 8002926:	683b      	ldr	r3, [r7, #0]
 8002928:	2b04      	cmp	r3, #4
 800292a:	d104      	bne.n	8002936 <HAL_TIM_PWM_Start+0x92>
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2202      	movs	r2, #2
 8002930:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8002934:	e00b      	b.n	800294e <HAL_TIM_PWM_Start+0xaa>
 8002936:	683b      	ldr	r3, [r7, #0]
 8002938:	2b08      	cmp	r3, #8
 800293a:	d104      	bne.n	8002946 <HAL_TIM_PWM_Start+0xa2>
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2202      	movs	r2, #2
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8002944:	e003      	b.n	800294e <HAL_TIM_PWM_Start+0xaa>
 8002946:	687b      	ldr	r3, [r7, #4]
 8002948:	2202      	movs	r2, #2
 800294a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	2201      	movs	r2, #1
 8002954:	6839      	ldr	r1, [r7, #0]
 8002956:	4618      	mov	r0, r3
 8002958:	f000 fc84 	bl	8003264 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	681b      	ldr	r3, [r3, #0]
 8002960:	4a23      	ldr	r2, [pc, #140]	; (80029f0 <HAL_TIM_PWM_Start+0x14c>)
 8002962:	4293      	cmp	r3, r2
 8002964:	d107      	bne.n	8002976 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	681b      	ldr	r3, [r3, #0]
 8002970:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002974:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a1d      	ldr	r2, [pc, #116]	; (80029f0 <HAL_TIM_PWM_Start+0x14c>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d018      	beq.n	80029b2 <HAL_TIM_PWM_Start+0x10e>
 8002980:	687b      	ldr	r3, [r7, #4]
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002988:	d013      	beq.n	80029b2 <HAL_TIM_PWM_Start+0x10e>
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	681b      	ldr	r3, [r3, #0]
 800298e:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_TIM_PWM_Start+0x150>)
 8002990:	4293      	cmp	r3, r2
 8002992:	d00e      	beq.n	80029b2 <HAL_TIM_PWM_Start+0x10e>
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_TIM_PWM_Start+0x154>)
 800299a:	4293      	cmp	r3, r2
 800299c:	d009      	beq.n	80029b2 <HAL_TIM_PWM_Start+0x10e>
 800299e:	687b      	ldr	r3, [r7, #4]
 80029a0:	681b      	ldr	r3, [r3, #0]
 80029a2:	4a16      	ldr	r2, [pc, #88]	; (80029fc <HAL_TIM_PWM_Start+0x158>)
 80029a4:	4293      	cmp	r3, r2
 80029a6:	d004      	beq.n	80029b2 <HAL_TIM_PWM_Start+0x10e>
 80029a8:	687b      	ldr	r3, [r7, #4]
 80029aa:	681b      	ldr	r3, [r3, #0]
 80029ac:	4a14      	ldr	r2, [pc, #80]	; (8002a00 <HAL_TIM_PWM_Start+0x15c>)
 80029ae:	4293      	cmp	r3, r2
 80029b0:	d111      	bne.n	80029d6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	689b      	ldr	r3, [r3, #8]
 80029b8:	f003 0307 	and.w	r3, r3, #7
 80029bc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029be:	68fb      	ldr	r3, [r7, #12]
 80029c0:	2b06      	cmp	r3, #6
 80029c2:	d010      	beq.n	80029e6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	681a      	ldr	r2, [r3, #0]
 80029ca:	687b      	ldr	r3, [r7, #4]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f042 0201 	orr.w	r2, r2, #1
 80029d2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029d4:	e007      	b.n	80029e6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	681a      	ldr	r2, [r3, #0]
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	f042 0201 	orr.w	r2, r2, #1
 80029e4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80029e6:	2300      	movs	r3, #0
}
 80029e8:	4618      	mov	r0, r3
 80029ea:	3710      	adds	r7, #16
 80029ec:	46bd      	mov	sp, r7
 80029ee:	bd80      	pop	{r7, pc}
 80029f0:	40010000 	.word	0x40010000
 80029f4:	40000400 	.word	0x40000400
 80029f8:	40000800 	.word	0x40000800
 80029fc:	40000c00 	.word	0x40000c00
 8002a00:	40014000 	.word	0x40014000

08002a04 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002a04:	b580      	push	{r7, lr}
 8002a06:	b086      	sub	sp, #24
 8002a08:	af00      	add	r7, sp, #0
 8002a0a:	60f8      	str	r0, [r7, #12]
 8002a0c:	60b9      	str	r1, [r7, #8]
 8002a0e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002a10:	2300      	movs	r3, #0
 8002a12:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002a1a:	2b01      	cmp	r3, #1
 8002a1c:	d101      	bne.n	8002a22 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002a1e:	2302      	movs	r3, #2
 8002a20:	e0ae      	b.n	8002b80 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002a22:	68fb      	ldr	r3, [r7, #12]
 8002a24:	2201      	movs	r2, #1
 8002a26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	2b0c      	cmp	r3, #12
 8002a2e:	f200 809f 	bhi.w	8002b70 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002a32:	a201      	add	r2, pc, #4	; (adr r2, 8002a38 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002a34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002a38:	08002a6d 	.word	0x08002a6d
 8002a3c:	08002b71 	.word	0x08002b71
 8002a40:	08002b71 	.word	0x08002b71
 8002a44:	08002b71 	.word	0x08002b71
 8002a48:	08002aad 	.word	0x08002aad
 8002a4c:	08002b71 	.word	0x08002b71
 8002a50:	08002b71 	.word	0x08002b71
 8002a54:	08002b71 	.word	0x08002b71
 8002a58:	08002aef 	.word	0x08002aef
 8002a5c:	08002b71 	.word	0x08002b71
 8002a60:	08002b71 	.word	0x08002b71
 8002a64:	08002b71 	.word	0x08002b71
 8002a68:	08002b2f 	.word	0x08002b2f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002a6c:	68fb      	ldr	r3, [r7, #12]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	68b9      	ldr	r1, [r7, #8]
 8002a72:	4618      	mov	r0, r3
 8002a74:	f000 f9d0 	bl	8002e18 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	699a      	ldr	r2, [r3, #24]
 8002a7e:	68fb      	ldr	r3, [r7, #12]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f042 0208 	orr.w	r2, r2, #8
 8002a86:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002a88:	68fb      	ldr	r3, [r7, #12]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	699a      	ldr	r2, [r3, #24]
 8002a8e:	68fb      	ldr	r3, [r7, #12]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f022 0204 	bic.w	r2, r2, #4
 8002a96:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	6999      	ldr	r1, [r3, #24]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
 8002aa0:	691a      	ldr	r2, [r3, #16]
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	681b      	ldr	r3, [r3, #0]
 8002aa6:	430a      	orrs	r2, r1
 8002aa8:	619a      	str	r2, [r3, #24]
      break;
 8002aaa:	e064      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	681b      	ldr	r3, [r3, #0]
 8002ab0:	68b9      	ldr	r1, [r7, #8]
 8002ab2:	4618      	mov	r0, r3
 8002ab4:	f000 fa16 	bl	8002ee4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002ab8:	68fb      	ldr	r3, [r7, #12]
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	699a      	ldr	r2, [r3, #24]
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002ac6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	699a      	ldr	r2, [r3, #24]
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	681b      	ldr	r3, [r3, #0]
 8002ad2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002ad6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002ad8:	68fb      	ldr	r3, [r7, #12]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	6999      	ldr	r1, [r3, #24]
 8002ade:	68bb      	ldr	r3, [r7, #8]
 8002ae0:	691b      	ldr	r3, [r3, #16]
 8002ae2:	021a      	lsls	r2, r3, #8
 8002ae4:	68fb      	ldr	r3, [r7, #12]
 8002ae6:	681b      	ldr	r3, [r3, #0]
 8002ae8:	430a      	orrs	r2, r1
 8002aea:	619a      	str	r2, [r3, #24]
      break;
 8002aec:	e043      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002aee:	68fb      	ldr	r3, [r7, #12]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	68b9      	ldr	r1, [r7, #8]
 8002af4:	4618      	mov	r0, r3
 8002af6:	f000 fa61 	bl	8002fbc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002afa:	68fb      	ldr	r3, [r7, #12]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	69da      	ldr	r2, [r3, #28]
 8002b00:	68fb      	ldr	r3, [r7, #12]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	f042 0208 	orr.w	r2, r2, #8
 8002b08:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002b0a:	68fb      	ldr	r3, [r7, #12]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	69da      	ldr	r2, [r3, #28]
 8002b10:	68fb      	ldr	r3, [r7, #12]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	f022 0204 	bic.w	r2, r2, #4
 8002b18:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	69d9      	ldr	r1, [r3, #28]
 8002b20:	68bb      	ldr	r3, [r7, #8]
 8002b22:	691a      	ldr	r2, [r3, #16]
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	430a      	orrs	r2, r1
 8002b2a:	61da      	str	r2, [r3, #28]
      break;
 8002b2c:	e023      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002b2e:	68fb      	ldr	r3, [r7, #12]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	68b9      	ldr	r1, [r7, #8]
 8002b34:	4618      	mov	r0, r3
 8002b36:	f000 faab 	bl	8003090 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002b3a:	68fb      	ldr	r3, [r7, #12]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	69da      	ldr	r2, [r3, #28]
 8002b40:	68fb      	ldr	r3, [r7, #12]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002b48:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	69da      	ldr	r2, [r3, #28]
 8002b50:	68fb      	ldr	r3, [r7, #12]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002b58:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002b5a:	68fb      	ldr	r3, [r7, #12]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69d9      	ldr	r1, [r3, #28]
 8002b60:	68bb      	ldr	r3, [r7, #8]
 8002b62:	691b      	ldr	r3, [r3, #16]
 8002b64:	021a      	lsls	r2, r3, #8
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	430a      	orrs	r2, r1
 8002b6c:	61da      	str	r2, [r3, #28]
      break;
 8002b6e:	e002      	b.n	8002b76 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002b70:	2301      	movs	r3, #1
 8002b72:	75fb      	strb	r3, [r7, #23]
      break;
 8002b74:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	2200      	movs	r2, #0
 8002b7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002b7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8002b80:	4618      	mov	r0, r3
 8002b82:	3718      	adds	r7, #24
 8002b84:	46bd      	mov	sp, r7
 8002b86:	bd80      	pop	{r7, pc}

08002b88 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	b084      	sub	sp, #16
 8002b8c:	af00      	add	r7, sp, #0
 8002b8e:	6078      	str	r0, [r7, #4]
 8002b90:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002b92:	2300      	movs	r3, #0
 8002b94:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b9c:	2b01      	cmp	r3, #1
 8002b9e:	d101      	bne.n	8002ba4 <HAL_TIM_ConfigClockSource+0x1c>
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	e0b4      	b.n	8002d0e <HAL_TIM_ConfigClockSource+0x186>
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2202      	movs	r2, #2
 8002bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	689b      	ldr	r3, [r3, #8]
 8002bba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002bbc:	68bb      	ldr	r3, [r7, #8]
 8002bbe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8002bc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002bc4:	68bb      	ldr	r3, [r7, #8]
 8002bc6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8002bca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	68ba      	ldr	r2, [r7, #8]
 8002bd2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002bd4:	683b      	ldr	r3, [r7, #0]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002bdc:	d03e      	beq.n	8002c5c <HAL_TIM_ConfigClockSource+0xd4>
 8002bde:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002be2:	f200 8087 	bhi.w	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002be6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bea:	f000 8086 	beq.w	8002cfa <HAL_TIM_ConfigClockSource+0x172>
 8002bee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bf2:	d87f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bf4:	2b70      	cmp	r3, #112	; 0x70
 8002bf6:	d01a      	beq.n	8002c2e <HAL_TIM_ConfigClockSource+0xa6>
 8002bf8:	2b70      	cmp	r3, #112	; 0x70
 8002bfa:	d87b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002bfc:	2b60      	cmp	r3, #96	; 0x60
 8002bfe:	d050      	beq.n	8002ca2 <HAL_TIM_ConfigClockSource+0x11a>
 8002c00:	2b60      	cmp	r3, #96	; 0x60
 8002c02:	d877      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c04:	2b50      	cmp	r3, #80	; 0x50
 8002c06:	d03c      	beq.n	8002c82 <HAL_TIM_ConfigClockSource+0xfa>
 8002c08:	2b50      	cmp	r3, #80	; 0x50
 8002c0a:	d873      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c0c:	2b40      	cmp	r3, #64	; 0x40
 8002c0e:	d058      	beq.n	8002cc2 <HAL_TIM_ConfigClockSource+0x13a>
 8002c10:	2b40      	cmp	r3, #64	; 0x40
 8002c12:	d86f      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c14:	2b30      	cmp	r3, #48	; 0x30
 8002c16:	d064      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c18:	2b30      	cmp	r3, #48	; 0x30
 8002c1a:	d86b      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c1c:	2b20      	cmp	r3, #32
 8002c1e:	d060      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c20:	2b20      	cmp	r3, #32
 8002c22:	d867      	bhi.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d05c      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c28:	2b10      	cmp	r3, #16
 8002c2a:	d05a      	beq.n	8002ce2 <HAL_TIM_ConfigClockSource+0x15a>
 8002c2c:	e062      	b.n	8002cf4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	6818      	ldr	r0, [r3, #0]
 8002c32:	683b      	ldr	r3, [r7, #0]
 8002c34:	6899      	ldr	r1, [r3, #8]
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	685a      	ldr	r2, [r3, #4]
 8002c3a:	683b      	ldr	r3, [r7, #0]
 8002c3c:	68db      	ldr	r3, [r3, #12]
 8002c3e:	f000 faf1 	bl	8003224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002c4a:	68bb      	ldr	r3, [r7, #8]
 8002c4c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8002c50:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	68ba      	ldr	r2, [r7, #8]
 8002c58:	609a      	str	r2, [r3, #8]
      break;
 8002c5a:	e04f      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	6818      	ldr	r0, [r3, #0]
 8002c60:	683b      	ldr	r3, [r7, #0]
 8002c62:	6899      	ldr	r1, [r3, #8]
 8002c64:	683b      	ldr	r3, [r7, #0]
 8002c66:	685a      	ldr	r2, [r3, #4]
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	f000 fada 	bl	8003224 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	689a      	ldr	r2, [r3, #8]
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002c7e:	609a      	str	r2, [r3, #8]
      break;
 8002c80:	e03c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	6818      	ldr	r0, [r3, #0]
 8002c86:	683b      	ldr	r3, [r7, #0]
 8002c88:	6859      	ldr	r1, [r3, #4]
 8002c8a:	683b      	ldr	r3, [r7, #0]
 8002c8c:	68db      	ldr	r3, [r3, #12]
 8002c8e:	461a      	mov	r2, r3
 8002c90:	f000 fa4e 	bl	8003130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	2150      	movs	r1, #80	; 0x50
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	f000 faa7 	bl	80031ee <TIM_ITRx_SetConfig>
      break;
 8002ca0:	e02c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002ca2:	687b      	ldr	r3, [r7, #4]
 8002ca4:	6818      	ldr	r0, [r3, #0]
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	6859      	ldr	r1, [r3, #4]
 8002caa:	683b      	ldr	r3, [r7, #0]
 8002cac:	68db      	ldr	r3, [r3, #12]
 8002cae:	461a      	mov	r2, r3
 8002cb0:	f000 fa6d 	bl	800318e <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002cb4:	687b      	ldr	r3, [r7, #4]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	2160      	movs	r1, #96	; 0x60
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f000 fa97 	bl	80031ee <TIM_ITRx_SetConfig>
      break;
 8002cc0:	e01c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	6818      	ldr	r0, [r3, #0]
 8002cc6:	683b      	ldr	r3, [r7, #0]
 8002cc8:	6859      	ldr	r1, [r3, #4]
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	68db      	ldr	r3, [r3, #12]
 8002cce:	461a      	mov	r2, r3
 8002cd0:	f000 fa2e 	bl	8003130 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	2140      	movs	r1, #64	; 0x40
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f000 fa87 	bl	80031ee <TIM_ITRx_SetConfig>
      break;
 8002ce0:	e00c      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681a      	ldr	r2, [r3, #0]
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	4619      	mov	r1, r3
 8002cec:	4610      	mov	r0, r2
 8002cee:	f000 fa7e 	bl	80031ee <TIM_ITRx_SetConfig>
      break;
 8002cf2:	e003      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002cf4:	2301      	movs	r3, #1
 8002cf6:	73fb      	strb	r3, [r7, #15]
      break;
 8002cf8:	e000      	b.n	8002cfc <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002cfa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8002d0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}
	...

08002d18 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8002d18:	b480      	push	{r7}
 8002d1a:	b085      	sub	sp, #20
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	4a34      	ldr	r2, [pc, #208]	; (8002dfc <TIM_Base_SetConfig+0xe4>)
 8002d2c:	4293      	cmp	r3, r2
 8002d2e:	d00f      	beq.n	8002d50 <TIM_Base_SetConfig+0x38>
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d36:	d00b      	beq.n	8002d50 <TIM_Base_SetConfig+0x38>
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	4a31      	ldr	r2, [pc, #196]	; (8002e00 <TIM_Base_SetConfig+0xe8>)
 8002d3c:	4293      	cmp	r3, r2
 8002d3e:	d007      	beq.n	8002d50 <TIM_Base_SetConfig+0x38>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	4a30      	ldr	r2, [pc, #192]	; (8002e04 <TIM_Base_SetConfig+0xec>)
 8002d44:	4293      	cmp	r3, r2
 8002d46:	d003      	beq.n	8002d50 <TIM_Base_SetConfig+0x38>
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	4a2f      	ldr	r2, [pc, #188]	; (8002e08 <TIM_Base_SetConfig+0xf0>)
 8002d4c:	4293      	cmp	r3, r2
 8002d4e:	d108      	bne.n	8002d62 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002d56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	68fa      	ldr	r2, [r7, #12]
 8002d5e:	4313      	orrs	r3, r2
 8002d60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002d62:	687b      	ldr	r3, [r7, #4]
 8002d64:	4a25      	ldr	r2, [pc, #148]	; (8002dfc <TIM_Base_SetConfig+0xe4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d01b      	beq.n	8002da2 <TIM_Base_SetConfig+0x8a>
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002d70:	d017      	beq.n	8002da2 <TIM_Base_SetConfig+0x8a>
 8002d72:	687b      	ldr	r3, [r7, #4]
 8002d74:	4a22      	ldr	r2, [pc, #136]	; (8002e00 <TIM_Base_SetConfig+0xe8>)
 8002d76:	4293      	cmp	r3, r2
 8002d78:	d013      	beq.n	8002da2 <TIM_Base_SetConfig+0x8a>
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	4a21      	ldr	r2, [pc, #132]	; (8002e04 <TIM_Base_SetConfig+0xec>)
 8002d7e:	4293      	cmp	r3, r2
 8002d80:	d00f      	beq.n	8002da2 <TIM_Base_SetConfig+0x8a>
 8002d82:	687b      	ldr	r3, [r7, #4]
 8002d84:	4a20      	ldr	r2, [pc, #128]	; (8002e08 <TIM_Base_SetConfig+0xf0>)
 8002d86:	4293      	cmp	r3, r2
 8002d88:	d00b      	beq.n	8002da2 <TIM_Base_SetConfig+0x8a>
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	4a1f      	ldr	r2, [pc, #124]	; (8002e0c <TIM_Base_SetConfig+0xf4>)
 8002d8e:	4293      	cmp	r3, r2
 8002d90:	d007      	beq.n	8002da2 <TIM_Base_SetConfig+0x8a>
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	4a1e      	ldr	r2, [pc, #120]	; (8002e10 <TIM_Base_SetConfig+0xf8>)
 8002d96:	4293      	cmp	r3, r2
 8002d98:	d003      	beq.n	8002da2 <TIM_Base_SetConfig+0x8a>
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a1d      	ldr	r2, [pc, #116]	; (8002e14 <TIM_Base_SetConfig+0xfc>)
 8002d9e:	4293      	cmp	r3, r2
 8002da0:	d108      	bne.n	8002db4 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002da8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002daa:	683b      	ldr	r3, [r7, #0]
 8002dac:	68db      	ldr	r3, [r3, #12]
 8002dae:	68fa      	ldr	r2, [r7, #12]
 8002db0:	4313      	orrs	r3, r2
 8002db2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8002dba:	683b      	ldr	r3, [r7, #0]
 8002dbc:	695b      	ldr	r3, [r3, #20]
 8002dbe:	4313      	orrs	r3, r2
 8002dc0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	68fa      	ldr	r2, [r7, #12]
 8002dc6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	689a      	ldr	r2, [r3, #8]
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002dd0:	683b      	ldr	r3, [r7, #0]
 8002dd2:	681a      	ldr	r2, [r3, #0]
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	4a08      	ldr	r2, [pc, #32]	; (8002dfc <TIM_Base_SetConfig+0xe4>)
 8002ddc:	4293      	cmp	r3, r2
 8002dde:	d103      	bne.n	8002de8 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	691a      	ldr	r2, [r3, #16]
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	2201      	movs	r2, #1
 8002dec:	615a      	str	r2, [r3, #20]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	40010000 	.word	0x40010000
 8002e00:	40000400 	.word	0x40000400
 8002e04:	40000800 	.word	0x40000800
 8002e08:	40000c00 	.word	0x40000c00
 8002e0c:	40014000 	.word	0x40014000
 8002e10:	40014400 	.word	0x40014400
 8002e14:	40014800 	.word	0x40014800

08002e18 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002e18:	b480      	push	{r7}
 8002e1a:	b087      	sub	sp, #28
 8002e1c:	af00      	add	r7, sp, #0
 8002e1e:	6078      	str	r0, [r7, #4]
 8002e20:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	6a1b      	ldr	r3, [r3, #32]
 8002e26:	f023 0201 	bic.w	r2, r3, #1
 8002e2a:	687b      	ldr	r3, [r7, #4]
 8002e2c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	6a1b      	ldr	r3, [r3, #32]
 8002e32:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	685b      	ldr	r3, [r3, #4]
 8002e38:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002e3a:	687b      	ldr	r3, [r7, #4]
 8002e3c:	699b      	ldr	r3, [r3, #24]
 8002e3e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002e40:	68fb      	ldr	r3, [r7, #12]
 8002e42:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002e46:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f023 0303 	bic.w	r3, r3, #3
 8002e4e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002e50:	683b      	ldr	r3, [r7, #0]
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	68fa      	ldr	r2, [r7, #12]
 8002e56:	4313      	orrs	r3, r2
 8002e58:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	f023 0302 	bic.w	r3, r3, #2
 8002e60:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002e62:	683b      	ldr	r3, [r7, #0]
 8002e64:	689b      	ldr	r3, [r3, #8]
 8002e66:	697a      	ldr	r2, [r7, #20]
 8002e68:	4313      	orrs	r3, r2
 8002e6a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a1c      	ldr	r2, [pc, #112]	; (8002ee0 <TIM_OC1_SetConfig+0xc8>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d10c      	bne.n	8002e8e <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8002e74:	697b      	ldr	r3, [r7, #20]
 8002e76:	f023 0308 	bic.w	r3, r3, #8
 8002e7a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	68db      	ldr	r3, [r3, #12]
 8002e80:	697a      	ldr	r2, [r7, #20]
 8002e82:	4313      	orrs	r3, r2
 8002e84:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8002e86:	697b      	ldr	r3, [r7, #20]
 8002e88:	f023 0304 	bic.w	r3, r3, #4
 8002e8c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	4a13      	ldr	r2, [pc, #76]	; (8002ee0 <TIM_OC1_SetConfig+0xc8>)
 8002e92:	4293      	cmp	r3, r2
 8002e94:	d111      	bne.n	8002eba <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8002e96:	693b      	ldr	r3, [r7, #16]
 8002e98:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8002e9c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8002e9e:	693b      	ldr	r3, [r7, #16]
 8002ea0:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8002ea4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	695b      	ldr	r3, [r3, #20]
 8002eaa:	693a      	ldr	r2, [r7, #16]
 8002eac:	4313      	orrs	r3, r2
 8002eae:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8002eb0:	683b      	ldr	r3, [r7, #0]
 8002eb2:	699b      	ldr	r3, [r3, #24]
 8002eb4:	693a      	ldr	r2, [r7, #16]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	693a      	ldr	r2, [r7, #16]
 8002ebe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	68fa      	ldr	r2, [r7, #12]
 8002ec4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002ec6:	683b      	ldr	r3, [r7, #0]
 8002ec8:	685a      	ldr	r2, [r3, #4]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	697a      	ldr	r2, [r7, #20]
 8002ed2:	621a      	str	r2, [r3, #32]
}
 8002ed4:	bf00      	nop
 8002ed6:	371c      	adds	r7, #28
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ede:	4770      	bx	lr
 8002ee0:	40010000 	.word	0x40010000

08002ee4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	b087      	sub	sp, #28
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
 8002eec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	6a1b      	ldr	r3, [r3, #32]
 8002ef2:	f023 0210 	bic.w	r2, r3, #16
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	6a1b      	ldr	r3, [r3, #32]
 8002efe:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	699b      	ldr	r3, [r3, #24]
 8002f0a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8002f12:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002f1a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	021b      	lsls	r3, r3, #8
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	4313      	orrs	r3, r2
 8002f26:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002f28:	697b      	ldr	r3, [r7, #20]
 8002f2a:	f023 0320 	bic.w	r3, r3, #32
 8002f2e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002f30:	683b      	ldr	r3, [r7, #0]
 8002f32:	689b      	ldr	r3, [r3, #8]
 8002f34:	011b      	lsls	r3, r3, #4
 8002f36:	697a      	ldr	r2, [r7, #20]
 8002f38:	4313      	orrs	r3, r2
 8002f3a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	4a1e      	ldr	r2, [pc, #120]	; (8002fb8 <TIM_OC2_SetConfig+0xd4>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d10d      	bne.n	8002f60 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002f44:	697b      	ldr	r3, [r7, #20]
 8002f46:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8002f4a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002f4c:	683b      	ldr	r3, [r7, #0]
 8002f4e:	68db      	ldr	r3, [r3, #12]
 8002f50:	011b      	lsls	r3, r3, #4
 8002f52:	697a      	ldr	r2, [r7, #20]
 8002f54:	4313      	orrs	r3, r2
 8002f56:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8002f58:	697b      	ldr	r3, [r7, #20]
 8002f5a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8002f5e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002f60:	687b      	ldr	r3, [r7, #4]
 8002f62:	4a15      	ldr	r2, [pc, #84]	; (8002fb8 <TIM_OC2_SetConfig+0xd4>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d113      	bne.n	8002f90 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8002f6e:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8002f70:	693b      	ldr	r3, [r7, #16]
 8002f72:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8002f76:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8002f78:	683b      	ldr	r3, [r7, #0]
 8002f7a:	695b      	ldr	r3, [r3, #20]
 8002f7c:	009b      	lsls	r3, r3, #2
 8002f7e:	693a      	ldr	r2, [r7, #16]
 8002f80:	4313      	orrs	r3, r2
 8002f82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	699b      	ldr	r3, [r3, #24]
 8002f88:	009b      	lsls	r3, r3, #2
 8002f8a:	693a      	ldr	r2, [r7, #16]
 8002f8c:	4313      	orrs	r3, r2
 8002f8e:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	693a      	ldr	r2, [r7, #16]
 8002f94:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	68fa      	ldr	r2, [r7, #12]
 8002f9a:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685a      	ldr	r2, [r3, #4]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	697a      	ldr	r2, [r7, #20]
 8002fa8:	621a      	str	r2, [r3, #32]
}
 8002faa:	bf00      	nop
 8002fac:	371c      	adds	r7, #28
 8002fae:	46bd      	mov	sp, r7
 8002fb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb4:	4770      	bx	lr
 8002fb6:	bf00      	nop
 8002fb8:	40010000 	.word	0x40010000

08002fbc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8002fbc:	b480      	push	{r7}
 8002fbe:	b087      	sub	sp, #28
 8002fc0:	af00      	add	r7, sp, #0
 8002fc2:	6078      	str	r0, [r7, #4]
 8002fc4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	6a1b      	ldr	r3, [r3, #32]
 8002fca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	6a1b      	ldr	r3, [r3, #32]
 8002fd6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	685b      	ldr	r3, [r3, #4]
 8002fdc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	69db      	ldr	r3, [r3, #28]
 8002fe2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8002fea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	f023 0303 	bic.w	r3, r3, #3
 8002ff2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	68fa      	ldr	r2, [r7, #12]
 8002ffa:	4313      	orrs	r3, r2
 8002ffc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8002ffe:	697b      	ldr	r3, [r7, #20]
 8003000:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003004:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003006:	683b      	ldr	r3, [r7, #0]
 8003008:	689b      	ldr	r3, [r3, #8]
 800300a:	021b      	lsls	r3, r3, #8
 800300c:	697a      	ldr	r2, [r7, #20]
 800300e:	4313      	orrs	r3, r2
 8003010:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	4a1d      	ldr	r2, [pc, #116]	; (800308c <TIM_OC3_SetConfig+0xd0>)
 8003016:	4293      	cmp	r3, r2
 8003018:	d10d      	bne.n	8003036 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800301a:	697b      	ldr	r3, [r7, #20]
 800301c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8003020:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003022:	683b      	ldr	r3, [r7, #0]
 8003024:	68db      	ldr	r3, [r3, #12]
 8003026:	021b      	lsls	r3, r3, #8
 8003028:	697a      	ldr	r2, [r7, #20]
 800302a:	4313      	orrs	r3, r2
 800302c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800302e:	697b      	ldr	r3, [r7, #20]
 8003030:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003034:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	4a14      	ldr	r2, [pc, #80]	; (800308c <TIM_OC3_SetConfig+0xd0>)
 800303a:	4293      	cmp	r3, r2
 800303c:	d113      	bne.n	8003066 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800303e:	693b      	ldr	r3, [r7, #16]
 8003040:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003044:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003046:	693b      	ldr	r3, [r7, #16]
 8003048:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800304c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	695b      	ldr	r3, [r3, #20]
 8003052:	011b      	lsls	r3, r3, #4
 8003054:	693a      	ldr	r2, [r7, #16]
 8003056:	4313      	orrs	r3, r2
 8003058:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	699b      	ldr	r3, [r3, #24]
 800305e:	011b      	lsls	r3, r3, #4
 8003060:	693a      	ldr	r2, [r7, #16]
 8003062:	4313      	orrs	r3, r2
 8003064:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	693a      	ldr	r2, [r7, #16]
 800306a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	68fa      	ldr	r2, [r7, #12]
 8003070:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	685a      	ldr	r2, [r3, #4]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	697a      	ldr	r2, [r7, #20]
 800307e:	621a      	str	r2, [r3, #32]
}
 8003080:	bf00      	nop
 8003082:	371c      	adds	r7, #28
 8003084:	46bd      	mov	sp, r7
 8003086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800308a:	4770      	bx	lr
 800308c:	40010000 	.word	0x40010000

08003090 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003090:	b480      	push	{r7}
 8003092:	b087      	sub	sp, #28
 8003094:	af00      	add	r7, sp, #0
 8003096:	6078      	str	r0, [r7, #4]
 8003098:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	6a1b      	ldr	r3, [r3, #32]
 800309e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6a1b      	ldr	r3, [r3, #32]
 80030aa:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	685b      	ldr	r3, [r3, #4]
 80030b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69db      	ldr	r3, [r3, #28]
 80030b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80030b8:	68fb      	ldr	r3, [r7, #12]
 80030ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80030be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80030c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	021b      	lsls	r3, r3, #8
 80030ce:	68fa      	ldr	r2, [r7, #12]
 80030d0:	4313      	orrs	r3, r2
 80030d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80030d4:	693b      	ldr	r3, [r7, #16]
 80030d6:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80030da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	689b      	ldr	r3, [r3, #8]
 80030e0:	031b      	lsls	r3, r3, #12
 80030e2:	693a      	ldr	r2, [r7, #16]
 80030e4:	4313      	orrs	r3, r2
 80030e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	4a10      	ldr	r2, [pc, #64]	; (800312c <TIM_OC4_SetConfig+0x9c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	d109      	bne.n	8003104 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80030f0:	697b      	ldr	r3, [r7, #20]
 80030f2:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80030f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80030f8:	683b      	ldr	r3, [r7, #0]
 80030fa:	695b      	ldr	r3, [r3, #20]
 80030fc:	019b      	lsls	r3, r3, #6
 80030fe:	697a      	ldr	r2, [r7, #20]
 8003100:	4313      	orrs	r3, r2
 8003102:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	697a      	ldr	r2, [r7, #20]
 8003108:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	68fa      	ldr	r2, [r7, #12]
 800310e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003110:	683b      	ldr	r3, [r7, #0]
 8003112:	685a      	ldr	r2, [r3, #4]
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	693a      	ldr	r2, [r7, #16]
 800311c:	621a      	str	r2, [r3, #32]
}
 800311e:	bf00      	nop
 8003120:	371c      	adds	r7, #28
 8003122:	46bd      	mov	sp, r7
 8003124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003128:	4770      	bx	lr
 800312a:	bf00      	nop
 800312c:	40010000 	.word	0x40010000

08003130 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003130:	b480      	push	{r7}
 8003132:	b087      	sub	sp, #28
 8003134:	af00      	add	r7, sp, #0
 8003136:	60f8      	str	r0, [r7, #12]
 8003138:	60b9      	str	r1, [r7, #8]
 800313a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800313c:	68fb      	ldr	r3, [r7, #12]
 800313e:	6a1b      	ldr	r3, [r3, #32]
 8003140:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	6a1b      	ldr	r3, [r3, #32]
 8003146:	f023 0201 	bic.w	r2, r3, #1
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	699b      	ldr	r3, [r3, #24]
 8003152:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003154:	693b      	ldr	r3, [r7, #16]
 8003156:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800315a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	011b      	lsls	r3, r3, #4
 8003160:	693a      	ldr	r2, [r7, #16]
 8003162:	4313      	orrs	r3, r2
 8003164:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003166:	697b      	ldr	r3, [r7, #20]
 8003168:	f023 030a 	bic.w	r3, r3, #10
 800316c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800316e:	697a      	ldr	r2, [r7, #20]
 8003170:	68bb      	ldr	r3, [r7, #8]
 8003172:	4313      	orrs	r3, r2
 8003174:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	693a      	ldr	r2, [r7, #16]
 800317a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	697a      	ldr	r2, [r7, #20]
 8003180:	621a      	str	r2, [r3, #32]
}
 8003182:	bf00      	nop
 8003184:	371c      	adds	r7, #28
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr

0800318e <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800318e:	b480      	push	{r7}
 8003190:	b087      	sub	sp, #28
 8003192:	af00      	add	r7, sp, #0
 8003194:	60f8      	str	r0, [r7, #12]
 8003196:	60b9      	str	r1, [r7, #8]
 8003198:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800319a:	68fb      	ldr	r3, [r7, #12]
 800319c:	6a1b      	ldr	r3, [r3, #32]
 800319e:	f023 0210 	bic.w	r2, r3, #16
 80031a2:	68fb      	ldr	r3, [r7, #12]
 80031a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80031ac:	68fb      	ldr	r3, [r7, #12]
 80031ae:	6a1b      	ldr	r3, [r3, #32]
 80031b0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80031b2:	697b      	ldr	r3, [r7, #20]
 80031b4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80031b8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	031b      	lsls	r3, r3, #12
 80031be:	697a      	ldr	r2, [r7, #20]
 80031c0:	4313      	orrs	r3, r2
 80031c2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80031ca:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80031cc:	68bb      	ldr	r3, [r7, #8]
 80031ce:	011b      	lsls	r3, r3, #4
 80031d0:	693a      	ldr	r2, [r7, #16]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	697a      	ldr	r2, [r7, #20]
 80031da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80031dc:	68fb      	ldr	r3, [r7, #12]
 80031de:	693a      	ldr	r2, [r7, #16]
 80031e0:	621a      	str	r2, [r3, #32]
}
 80031e2:	bf00      	nop
 80031e4:	371c      	adds	r7, #28
 80031e6:	46bd      	mov	sp, r7
 80031e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ec:	4770      	bx	lr

080031ee <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b085      	sub	sp, #20
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	689b      	ldr	r3, [r3, #8]
 80031fc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80031fe:	68fb      	ldr	r3, [r7, #12]
 8003200:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003204:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003206:	683a      	ldr	r2, [r7, #0]
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	4313      	orrs	r3, r2
 800320c:	f043 0307 	orr.w	r3, r3, #7
 8003210:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68fa      	ldr	r2, [r7, #12]
 8003216:	609a      	str	r2, [r3, #8]
}
 8003218:	bf00      	nop
 800321a:	3714      	adds	r7, #20
 800321c:	46bd      	mov	sp, r7
 800321e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003222:	4770      	bx	lr

08003224 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003224:	b480      	push	{r7}
 8003226:	b087      	sub	sp, #28
 8003228:	af00      	add	r7, sp, #0
 800322a:	60f8      	str	r0, [r7, #12]
 800322c:	60b9      	str	r1, [r7, #8]
 800322e:	607a      	str	r2, [r7, #4]
 8003230:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003232:	68fb      	ldr	r3, [r7, #12]
 8003234:	689b      	ldr	r3, [r3, #8]
 8003236:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003238:	697b      	ldr	r3, [r7, #20]
 800323a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800323e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003240:	683b      	ldr	r3, [r7, #0]
 8003242:	021a      	lsls	r2, r3, #8
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	431a      	orrs	r2, r3
 8003248:	68bb      	ldr	r3, [r7, #8]
 800324a:	4313      	orrs	r3, r2
 800324c:	697a      	ldr	r2, [r7, #20]
 800324e:	4313      	orrs	r3, r2
 8003250:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	697a      	ldr	r2, [r7, #20]
 8003256:	609a      	str	r2, [r3, #8]
}
 8003258:	bf00      	nop
 800325a:	371c      	adds	r7, #28
 800325c:	46bd      	mov	sp, r7
 800325e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003262:	4770      	bx	lr

08003264 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003264:	b480      	push	{r7}
 8003266:	b087      	sub	sp, #28
 8003268:	af00      	add	r7, sp, #0
 800326a:	60f8      	str	r0, [r7, #12]
 800326c:	60b9      	str	r1, [r7, #8]
 800326e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003270:	68bb      	ldr	r3, [r7, #8]
 8003272:	f003 031f 	and.w	r3, r3, #31
 8003276:	2201      	movs	r2, #1
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800327e:	68fb      	ldr	r3, [r7, #12]
 8003280:	6a1a      	ldr	r2, [r3, #32]
 8003282:	697b      	ldr	r3, [r7, #20]
 8003284:	43db      	mvns	r3, r3
 8003286:	401a      	ands	r2, r3
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	6a1a      	ldr	r2, [r3, #32]
 8003290:	68bb      	ldr	r3, [r7, #8]
 8003292:	f003 031f 	and.w	r3, r3, #31
 8003296:	6879      	ldr	r1, [r7, #4]
 8003298:	fa01 f303 	lsl.w	r3, r1, r3
 800329c:	431a      	orrs	r2, r3
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	621a      	str	r2, [r3, #32]
}
 80032a2:	bf00      	nop
 80032a4:	371c      	adds	r7, #28
 80032a6:	46bd      	mov	sp, r7
 80032a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ac:	4770      	bx	lr
	...

080032b0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80032b0:	b480      	push	{r7}
 80032b2:	b085      	sub	sp, #20
 80032b4:	af00      	add	r7, sp, #0
 80032b6:	6078      	str	r0, [r7, #4]
 80032b8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80032ba:	687b      	ldr	r3, [r7, #4]
 80032bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032c0:	2b01      	cmp	r3, #1
 80032c2:	d101      	bne.n	80032c8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80032c4:	2302      	movs	r3, #2
 80032c6:	e050      	b.n	800336a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	2201      	movs	r2, #1
 80032cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	2202      	movs	r2, #2
 80032d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	685b      	ldr	r3, [r3, #4]
 80032de:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	689b      	ldr	r3, [r3, #8]
 80032e6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	68fa      	ldr	r2, [r7, #12]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	68fa      	ldr	r2, [r7, #12]
 8003300:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	4a1c      	ldr	r2, [pc, #112]	; (8003378 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003308:	4293      	cmp	r3, r2
 800330a:	d018      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003314:	d013      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a18      	ldr	r2, [pc, #96]	; (800337c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800331c:	4293      	cmp	r3, r2
 800331e:	d00e      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	4a16      	ldr	r2, [pc, #88]	; (8003380 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003326:	4293      	cmp	r3, r2
 8003328:	d009      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	4a15      	ldr	r2, [pc, #84]	; (8003384 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003330:	4293      	cmp	r3, r2
 8003332:	d004      	beq.n	800333e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	4a13      	ldr	r2, [pc, #76]	; (8003388 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800333a:	4293      	cmp	r3, r2
 800333c:	d10c      	bne.n	8003358 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800333e:	68bb      	ldr	r3, [r7, #8]
 8003340:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003344:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	68ba      	ldr	r2, [r7, #8]
 800334c:	4313      	orrs	r3, r2
 800334e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	68ba      	ldr	r2, [r7, #8]
 8003356:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	2201      	movs	r2, #1
 800335c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	2200      	movs	r2, #0
 8003364:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003368:	2300      	movs	r3, #0
}
 800336a:	4618      	mov	r0, r3
 800336c:	3714      	adds	r7, #20
 800336e:	46bd      	mov	sp, r7
 8003370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003374:	4770      	bx	lr
 8003376:	bf00      	nop
 8003378:	40010000 	.word	0x40010000
 800337c:	40000400 	.word	0x40000400
 8003380:	40000800 	.word	0x40000800
 8003384:	40000c00 	.word	0x40000c00
 8003388:	40014000 	.word	0x40014000

0800338c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d101      	bne.n	800339e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800339a:	2301      	movs	r3, #1
 800339c:	e03f      	b.n	800341e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d106      	bne.n	80033b8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	2200      	movs	r2, #0
 80033ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80033b2:	6878      	ldr	r0, [r7, #4]
 80033b4:	f7fd fc98 	bl	8000ce8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	2224      	movs	r2, #36	; 0x24
 80033bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	68da      	ldr	r2, [r3, #12]
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80033ce:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80033d0:	6878      	ldr	r0, [r7, #4]
 80033d2:	f000 f829 	bl	8003428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	691a      	ldr	r2, [r3, #16]
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80033e4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	695a      	ldr	r2, [r3, #20]
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80033f4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	68da      	ldr	r2, [r3, #12]
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003404:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	2200      	movs	r2, #0
 800340a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	2220      	movs	r2, #32
 8003410:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2220      	movs	r2, #32
 8003418:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800341c:	2300      	movs	r3, #0
}
 800341e:	4618      	mov	r0, r3
 8003420:	3708      	adds	r7, #8
 8003422:	46bd      	mov	sp, r7
 8003424:	bd80      	pop	{r7, pc}
	...

08003428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800342c:	b0c0      	sub	sp, #256	; 0x100
 800342e:	af00      	add	r7, sp, #0
 8003430:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	691b      	ldr	r3, [r3, #16]
 800343c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003444:	68d9      	ldr	r1, [r3, #12]
 8003446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800344a:	681a      	ldr	r2, [r3, #0]
 800344c:	ea40 0301 	orr.w	r3, r0, r1
 8003450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800345c:	691b      	ldr	r3, [r3, #16]
 800345e:	431a      	orrs	r2, r3
 8003460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003464:	695b      	ldr	r3, [r3, #20]
 8003466:	431a      	orrs	r2, r3
 8003468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800346c:	69db      	ldr	r3, [r3, #28]
 800346e:	4313      	orrs	r3, r2
 8003470:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	68db      	ldr	r3, [r3, #12]
 800347c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003480:	f021 010c 	bic.w	r1, r1, #12
 8003484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003488:	681a      	ldr	r2, [r3, #0]
 800348a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800348e:	430b      	orrs	r3, r1
 8003490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800349e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a2:	6999      	ldr	r1, [r3, #24]
 80034a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034a8:	681a      	ldr	r2, [r3, #0]
 80034aa:	ea40 0301 	orr.w	r3, r0, r1
 80034ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80034b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	4b8f      	ldr	r3, [pc, #572]	; (80036f4 <UART_SetConfig+0x2cc>)
 80034b8:	429a      	cmp	r2, r3
 80034ba:	d005      	beq.n	80034c8 <UART_SetConfig+0xa0>
 80034bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034c0:	681a      	ldr	r2, [r3, #0]
 80034c2:	4b8d      	ldr	r3, [pc, #564]	; (80036f8 <UART_SetConfig+0x2d0>)
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d104      	bne.n	80034d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80034c8:	f7ff f8a6 	bl	8002618 <HAL_RCC_GetPCLK2Freq>
 80034cc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80034d0:	e003      	b.n	80034da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80034d2:	f7ff f88d 	bl	80025f0 <HAL_RCC_GetPCLK1Freq>
 80034d6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80034da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80034de:	69db      	ldr	r3, [r3, #28]
 80034e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80034e4:	f040 810c 	bne.w	8003700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80034e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80034ec:	2200      	movs	r2, #0
 80034ee:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80034f2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80034f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80034fa:	4622      	mov	r2, r4
 80034fc:	462b      	mov	r3, r5
 80034fe:	1891      	adds	r1, r2, r2
 8003500:	65b9      	str	r1, [r7, #88]	; 0x58
 8003502:	415b      	adcs	r3, r3
 8003504:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800350a:	4621      	mov	r1, r4
 800350c:	eb12 0801 	adds.w	r8, r2, r1
 8003510:	4629      	mov	r1, r5
 8003512:	eb43 0901 	adc.w	r9, r3, r1
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	f04f 0300 	mov.w	r3, #0
 800351e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800352a:	4690      	mov	r8, r2
 800352c:	4699      	mov	r9, r3
 800352e:	4623      	mov	r3, r4
 8003530:	eb18 0303 	adds.w	r3, r8, r3
 8003534:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003538:	462b      	mov	r3, r5
 800353a:	eb49 0303 	adc.w	r3, r9, r3
 800353e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003546:	685b      	ldr	r3, [r3, #4]
 8003548:	2200      	movs	r2, #0
 800354a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800354e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003556:	460b      	mov	r3, r1
 8003558:	18db      	adds	r3, r3, r3
 800355a:	653b      	str	r3, [r7, #80]	; 0x50
 800355c:	4613      	mov	r3, r2
 800355e:	eb42 0303 	adc.w	r3, r2, r3
 8003562:	657b      	str	r3, [r7, #84]	; 0x54
 8003564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800356c:	f7fc fe32 	bl	80001d4 <__aeabi_uldivmod>
 8003570:	4602      	mov	r2, r0
 8003572:	460b      	mov	r3, r1
 8003574:	4b61      	ldr	r3, [pc, #388]	; (80036fc <UART_SetConfig+0x2d4>)
 8003576:	fba3 2302 	umull	r2, r3, r3, r2
 800357a:	095b      	lsrs	r3, r3, #5
 800357c:	011c      	lsls	r4, r3, #4
 800357e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003582:	2200      	movs	r2, #0
 8003584:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003588:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800358c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003590:	4642      	mov	r2, r8
 8003592:	464b      	mov	r3, r9
 8003594:	1891      	adds	r1, r2, r2
 8003596:	64b9      	str	r1, [r7, #72]	; 0x48
 8003598:	415b      	adcs	r3, r3
 800359a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800359c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80035a0:	4641      	mov	r1, r8
 80035a2:	eb12 0a01 	adds.w	sl, r2, r1
 80035a6:	4649      	mov	r1, r9
 80035a8:	eb43 0b01 	adc.w	fp, r3, r1
 80035ac:	f04f 0200 	mov.w	r2, #0
 80035b0:	f04f 0300 	mov.w	r3, #0
 80035b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80035b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80035bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80035c0:	4692      	mov	sl, r2
 80035c2:	469b      	mov	fp, r3
 80035c4:	4643      	mov	r3, r8
 80035c6:	eb1a 0303 	adds.w	r3, sl, r3
 80035ca:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80035ce:	464b      	mov	r3, r9
 80035d0:	eb4b 0303 	adc.w	r3, fp, r3
 80035d4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80035d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80035dc:	685b      	ldr	r3, [r3, #4]
 80035de:	2200      	movs	r2, #0
 80035e0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80035e4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80035e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80035ec:	460b      	mov	r3, r1
 80035ee:	18db      	adds	r3, r3, r3
 80035f0:	643b      	str	r3, [r7, #64]	; 0x40
 80035f2:	4613      	mov	r3, r2
 80035f4:	eb42 0303 	adc.w	r3, r2, r3
 80035f8:	647b      	str	r3, [r7, #68]	; 0x44
 80035fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80035fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003602:	f7fc fde7 	bl	80001d4 <__aeabi_uldivmod>
 8003606:	4602      	mov	r2, r0
 8003608:	460b      	mov	r3, r1
 800360a:	4611      	mov	r1, r2
 800360c:	4b3b      	ldr	r3, [pc, #236]	; (80036fc <UART_SetConfig+0x2d4>)
 800360e:	fba3 2301 	umull	r2, r3, r3, r1
 8003612:	095b      	lsrs	r3, r3, #5
 8003614:	2264      	movs	r2, #100	; 0x64
 8003616:	fb02 f303 	mul.w	r3, r2, r3
 800361a:	1acb      	subs	r3, r1, r3
 800361c:	00db      	lsls	r3, r3, #3
 800361e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003622:	4b36      	ldr	r3, [pc, #216]	; (80036fc <UART_SetConfig+0x2d4>)
 8003624:	fba3 2302 	umull	r2, r3, r3, r2
 8003628:	095b      	lsrs	r3, r3, #5
 800362a:	005b      	lsls	r3, r3, #1
 800362c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003630:	441c      	add	r4, r3
 8003632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003636:	2200      	movs	r2, #0
 8003638:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800363c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003644:	4642      	mov	r2, r8
 8003646:	464b      	mov	r3, r9
 8003648:	1891      	adds	r1, r2, r2
 800364a:	63b9      	str	r1, [r7, #56]	; 0x38
 800364c:	415b      	adcs	r3, r3
 800364e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003654:	4641      	mov	r1, r8
 8003656:	1851      	adds	r1, r2, r1
 8003658:	6339      	str	r1, [r7, #48]	; 0x30
 800365a:	4649      	mov	r1, r9
 800365c:	414b      	adcs	r3, r1
 800365e:	637b      	str	r3, [r7, #52]	; 0x34
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	f04f 0300 	mov.w	r3, #0
 8003668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800366c:	4659      	mov	r1, fp
 800366e:	00cb      	lsls	r3, r1, #3
 8003670:	4651      	mov	r1, sl
 8003672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003676:	4651      	mov	r1, sl
 8003678:	00ca      	lsls	r2, r1, #3
 800367a:	4610      	mov	r0, r2
 800367c:	4619      	mov	r1, r3
 800367e:	4603      	mov	r3, r0
 8003680:	4642      	mov	r2, r8
 8003682:	189b      	adds	r3, r3, r2
 8003684:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003688:	464b      	mov	r3, r9
 800368a:	460a      	mov	r2, r1
 800368c:	eb42 0303 	adc.w	r3, r2, r3
 8003690:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80036a0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80036a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80036a8:	460b      	mov	r3, r1
 80036aa:	18db      	adds	r3, r3, r3
 80036ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80036ae:	4613      	mov	r3, r2
 80036b0:	eb42 0303 	adc.w	r3, r2, r3
 80036b4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80036b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80036ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80036be:	f7fc fd89 	bl	80001d4 <__aeabi_uldivmod>
 80036c2:	4602      	mov	r2, r0
 80036c4:	460b      	mov	r3, r1
 80036c6:	4b0d      	ldr	r3, [pc, #52]	; (80036fc <UART_SetConfig+0x2d4>)
 80036c8:	fba3 1302 	umull	r1, r3, r3, r2
 80036cc:	095b      	lsrs	r3, r3, #5
 80036ce:	2164      	movs	r1, #100	; 0x64
 80036d0:	fb01 f303 	mul.w	r3, r1, r3
 80036d4:	1ad3      	subs	r3, r2, r3
 80036d6:	00db      	lsls	r3, r3, #3
 80036d8:	3332      	adds	r3, #50	; 0x32
 80036da:	4a08      	ldr	r2, [pc, #32]	; (80036fc <UART_SetConfig+0x2d4>)
 80036dc:	fba2 2303 	umull	r2, r3, r2, r3
 80036e0:	095b      	lsrs	r3, r3, #5
 80036e2:	f003 0207 	and.w	r2, r3, #7
 80036e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	4422      	add	r2, r4
 80036ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80036f0:	e105      	b.n	80038fe <UART_SetConfig+0x4d6>
 80036f2:	bf00      	nop
 80036f4:	40011000 	.word	0x40011000
 80036f8:	40011400 	.word	0x40011400
 80036fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8003700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003704:	2200      	movs	r2, #0
 8003706:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800370a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800370e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8003712:	4642      	mov	r2, r8
 8003714:	464b      	mov	r3, r9
 8003716:	1891      	adds	r1, r2, r2
 8003718:	6239      	str	r1, [r7, #32]
 800371a:	415b      	adcs	r3, r3
 800371c:	627b      	str	r3, [r7, #36]	; 0x24
 800371e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8003722:	4641      	mov	r1, r8
 8003724:	1854      	adds	r4, r2, r1
 8003726:	4649      	mov	r1, r9
 8003728:	eb43 0501 	adc.w	r5, r3, r1
 800372c:	f04f 0200 	mov.w	r2, #0
 8003730:	f04f 0300 	mov.w	r3, #0
 8003734:	00eb      	lsls	r3, r5, #3
 8003736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800373a:	00e2      	lsls	r2, r4, #3
 800373c:	4614      	mov	r4, r2
 800373e:	461d      	mov	r5, r3
 8003740:	4643      	mov	r3, r8
 8003742:	18e3      	adds	r3, r4, r3
 8003744:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8003748:	464b      	mov	r3, r9
 800374a:	eb45 0303 	adc.w	r3, r5, r3
 800374e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8003752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003756:	685b      	ldr	r3, [r3, #4]
 8003758:	2200      	movs	r2, #0
 800375a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800375e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8003762:	f04f 0200 	mov.w	r2, #0
 8003766:	f04f 0300 	mov.w	r3, #0
 800376a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800376e:	4629      	mov	r1, r5
 8003770:	008b      	lsls	r3, r1, #2
 8003772:	4621      	mov	r1, r4
 8003774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003778:	4621      	mov	r1, r4
 800377a:	008a      	lsls	r2, r1, #2
 800377c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8003780:	f7fc fd28 	bl	80001d4 <__aeabi_uldivmod>
 8003784:	4602      	mov	r2, r0
 8003786:	460b      	mov	r3, r1
 8003788:	4b60      	ldr	r3, [pc, #384]	; (800390c <UART_SetConfig+0x4e4>)
 800378a:	fba3 2302 	umull	r2, r3, r3, r2
 800378e:	095b      	lsrs	r3, r3, #5
 8003790:	011c      	lsls	r4, r3, #4
 8003792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003796:	2200      	movs	r2, #0
 8003798:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800379c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80037a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80037a4:	4642      	mov	r2, r8
 80037a6:	464b      	mov	r3, r9
 80037a8:	1891      	adds	r1, r2, r2
 80037aa:	61b9      	str	r1, [r7, #24]
 80037ac:	415b      	adcs	r3, r3
 80037ae:	61fb      	str	r3, [r7, #28]
 80037b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80037b4:	4641      	mov	r1, r8
 80037b6:	1851      	adds	r1, r2, r1
 80037b8:	6139      	str	r1, [r7, #16]
 80037ba:	4649      	mov	r1, r9
 80037bc:	414b      	adcs	r3, r1
 80037be:	617b      	str	r3, [r7, #20]
 80037c0:	f04f 0200 	mov.w	r2, #0
 80037c4:	f04f 0300 	mov.w	r3, #0
 80037c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80037cc:	4659      	mov	r1, fp
 80037ce:	00cb      	lsls	r3, r1, #3
 80037d0:	4651      	mov	r1, sl
 80037d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80037d6:	4651      	mov	r1, sl
 80037d8:	00ca      	lsls	r2, r1, #3
 80037da:	4610      	mov	r0, r2
 80037dc:	4619      	mov	r1, r3
 80037de:	4603      	mov	r3, r0
 80037e0:	4642      	mov	r2, r8
 80037e2:	189b      	adds	r3, r3, r2
 80037e4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80037e8:	464b      	mov	r3, r9
 80037ea:	460a      	mov	r2, r1
 80037ec:	eb42 0303 	adc.w	r3, r2, r3
 80037f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80037f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2200      	movs	r2, #0
 80037fc:	67bb      	str	r3, [r7, #120]	; 0x78
 80037fe:	67fa      	str	r2, [r7, #124]	; 0x7c
 8003800:	f04f 0200 	mov.w	r2, #0
 8003804:	f04f 0300 	mov.w	r3, #0
 8003808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800380c:	4649      	mov	r1, r9
 800380e:	008b      	lsls	r3, r1, #2
 8003810:	4641      	mov	r1, r8
 8003812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8003816:	4641      	mov	r1, r8
 8003818:	008a      	lsls	r2, r1, #2
 800381a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800381e:	f7fc fcd9 	bl	80001d4 <__aeabi_uldivmod>
 8003822:	4602      	mov	r2, r0
 8003824:	460b      	mov	r3, r1
 8003826:	4b39      	ldr	r3, [pc, #228]	; (800390c <UART_SetConfig+0x4e4>)
 8003828:	fba3 1302 	umull	r1, r3, r3, r2
 800382c:	095b      	lsrs	r3, r3, #5
 800382e:	2164      	movs	r1, #100	; 0x64
 8003830:	fb01 f303 	mul.w	r3, r1, r3
 8003834:	1ad3      	subs	r3, r2, r3
 8003836:	011b      	lsls	r3, r3, #4
 8003838:	3332      	adds	r3, #50	; 0x32
 800383a:	4a34      	ldr	r2, [pc, #208]	; (800390c <UART_SetConfig+0x4e4>)
 800383c:	fba2 2303 	umull	r2, r3, r2, r3
 8003840:	095b      	lsrs	r3, r3, #5
 8003842:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003846:	441c      	add	r4, r3
 8003848:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800384c:	2200      	movs	r2, #0
 800384e:	673b      	str	r3, [r7, #112]	; 0x70
 8003850:	677a      	str	r2, [r7, #116]	; 0x74
 8003852:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8003856:	4642      	mov	r2, r8
 8003858:	464b      	mov	r3, r9
 800385a:	1891      	adds	r1, r2, r2
 800385c:	60b9      	str	r1, [r7, #8]
 800385e:	415b      	adcs	r3, r3
 8003860:	60fb      	str	r3, [r7, #12]
 8003862:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8003866:	4641      	mov	r1, r8
 8003868:	1851      	adds	r1, r2, r1
 800386a:	6039      	str	r1, [r7, #0]
 800386c:	4649      	mov	r1, r9
 800386e:	414b      	adcs	r3, r1
 8003870:	607b      	str	r3, [r7, #4]
 8003872:	f04f 0200 	mov.w	r2, #0
 8003876:	f04f 0300 	mov.w	r3, #0
 800387a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800387e:	4659      	mov	r1, fp
 8003880:	00cb      	lsls	r3, r1, #3
 8003882:	4651      	mov	r1, sl
 8003884:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003888:	4651      	mov	r1, sl
 800388a:	00ca      	lsls	r2, r1, #3
 800388c:	4610      	mov	r0, r2
 800388e:	4619      	mov	r1, r3
 8003890:	4603      	mov	r3, r0
 8003892:	4642      	mov	r2, r8
 8003894:	189b      	adds	r3, r3, r2
 8003896:	66bb      	str	r3, [r7, #104]	; 0x68
 8003898:	464b      	mov	r3, r9
 800389a:	460a      	mov	r2, r1
 800389c:	eb42 0303 	adc.w	r3, r2, r3
 80038a0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80038a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038a6:	685b      	ldr	r3, [r3, #4]
 80038a8:	2200      	movs	r2, #0
 80038aa:	663b      	str	r3, [r7, #96]	; 0x60
 80038ac:	667a      	str	r2, [r7, #100]	; 0x64
 80038ae:	f04f 0200 	mov.w	r2, #0
 80038b2:	f04f 0300 	mov.w	r3, #0
 80038b6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80038ba:	4649      	mov	r1, r9
 80038bc:	008b      	lsls	r3, r1, #2
 80038be:	4641      	mov	r1, r8
 80038c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80038c4:	4641      	mov	r1, r8
 80038c6:	008a      	lsls	r2, r1, #2
 80038c8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80038cc:	f7fc fc82 	bl	80001d4 <__aeabi_uldivmod>
 80038d0:	4602      	mov	r2, r0
 80038d2:	460b      	mov	r3, r1
 80038d4:	4b0d      	ldr	r3, [pc, #52]	; (800390c <UART_SetConfig+0x4e4>)
 80038d6:	fba3 1302 	umull	r1, r3, r3, r2
 80038da:	095b      	lsrs	r3, r3, #5
 80038dc:	2164      	movs	r1, #100	; 0x64
 80038de:	fb01 f303 	mul.w	r3, r1, r3
 80038e2:	1ad3      	subs	r3, r2, r3
 80038e4:	011b      	lsls	r3, r3, #4
 80038e6:	3332      	adds	r3, #50	; 0x32
 80038e8:	4a08      	ldr	r2, [pc, #32]	; (800390c <UART_SetConfig+0x4e4>)
 80038ea:	fba2 2303 	umull	r2, r3, r2, r3
 80038ee:	095b      	lsrs	r3, r3, #5
 80038f0:	f003 020f 	and.w	r2, r3, #15
 80038f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80038f8:	681b      	ldr	r3, [r3, #0]
 80038fa:	4422      	add	r2, r4
 80038fc:	609a      	str	r2, [r3, #8]
}
 80038fe:	bf00      	nop
 8003900:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8003904:	46bd      	mov	sp, r7
 8003906:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800390a:	bf00      	nop
 800390c:	51eb851f 	.word	0x51eb851f

08003910 <__libc_init_array>:
 8003910:	b570      	push	{r4, r5, r6, lr}
 8003912:	4d0d      	ldr	r5, [pc, #52]	; (8003948 <__libc_init_array+0x38>)
 8003914:	4c0d      	ldr	r4, [pc, #52]	; (800394c <__libc_init_array+0x3c>)
 8003916:	1b64      	subs	r4, r4, r5
 8003918:	10a4      	asrs	r4, r4, #2
 800391a:	2600      	movs	r6, #0
 800391c:	42a6      	cmp	r6, r4
 800391e:	d109      	bne.n	8003934 <__libc_init_array+0x24>
 8003920:	4d0b      	ldr	r5, [pc, #44]	; (8003950 <__libc_init_array+0x40>)
 8003922:	4c0c      	ldr	r4, [pc, #48]	; (8003954 <__libc_init_array+0x44>)
 8003924:	f000 f820 	bl	8003968 <_init>
 8003928:	1b64      	subs	r4, r4, r5
 800392a:	10a4      	asrs	r4, r4, #2
 800392c:	2600      	movs	r6, #0
 800392e:	42a6      	cmp	r6, r4
 8003930:	d105      	bne.n	800393e <__libc_init_array+0x2e>
 8003932:	bd70      	pop	{r4, r5, r6, pc}
 8003934:	f855 3b04 	ldr.w	r3, [r5], #4
 8003938:	4798      	blx	r3
 800393a:	3601      	adds	r6, #1
 800393c:	e7ee      	b.n	800391c <__libc_init_array+0xc>
 800393e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003942:	4798      	blx	r3
 8003944:	3601      	adds	r6, #1
 8003946:	e7f2      	b.n	800392e <__libc_init_array+0x1e>
 8003948:	080039a0 	.word	0x080039a0
 800394c:	080039a0 	.word	0x080039a0
 8003950:	080039a0 	.word	0x080039a0
 8003954:	080039a4 	.word	0x080039a4

08003958 <memset>:
 8003958:	4402      	add	r2, r0
 800395a:	4603      	mov	r3, r0
 800395c:	4293      	cmp	r3, r2
 800395e:	d100      	bne.n	8003962 <memset+0xa>
 8003960:	4770      	bx	lr
 8003962:	f803 1b01 	strb.w	r1, [r3], #1
 8003966:	e7f9      	b.n	800395c <memset+0x4>

08003968 <_init>:
 8003968:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800396a:	bf00      	nop
 800396c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800396e:	bc08      	pop	{r3}
 8003970:	469e      	mov	lr, r3
 8003972:	4770      	bx	lr

08003974 <_fini>:
 8003974:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003976:	bf00      	nop
 8003978:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800397a:	bc08      	pop	{r3}
 800397c:	469e      	mov	lr, r3
 800397e:	4770      	bx	lr
