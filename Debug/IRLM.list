
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007678  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000bc  0800780c  0800780c  0001780c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080078c8  080078c8  00021454  2**0
                  CONTENTS
  4 .ARM          00000008  080078c8  080078c8  000178c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080078d0  080078d0  00021454  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080078d0  080078d0  000178d0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080078d4  080078d4  000178d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001454  20000000  080078d8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000c024  20001454  08008d2c  00021454  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  2000d478  08008d2c  0002d478  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021454  2**0
                  CONTENTS, READONLY
 12 .debug_info   00016283  00000000  00000000  00021484  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002c3f  00000000  00000000  00037707  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013a0  00000000  00000000  0003a348  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012d0  00000000  00000000  0003b6e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018cbc  00000000  00000000  0003c9b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00017cc0  00000000  00000000  00055674  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cf3b  00000000  00000000  0006d334  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010a26f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000054f8  00000000  00000000  0010a2c0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20001454 	.word	0x20001454
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080077f4 	.word	0x080077f4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001458 	.word	0x20001458
 80001d0:	080077f4 	.word	0x080077f4

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000208:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800020c:	f000 b974 	b.w	80004f8 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	4604      	mov	r4, r0
 8000230:	468e      	mov	lr, r1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d14d      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000236:	428a      	cmp	r2, r1
 8000238:	4694      	mov	ip, r2
 800023a:	d969      	bls.n	8000310 <__udivmoddi4+0xe8>
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b152      	cbz	r2, 8000258 <__udivmoddi4+0x30>
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	f1c2 0120 	rsb	r1, r2, #32
 800024a:	fa20 f101 	lsr.w	r1, r0, r1
 800024e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000252:	ea41 0e03 	orr.w	lr, r1, r3
 8000256:	4094      	lsls	r4, r2
 8000258:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800025c:	0c21      	lsrs	r1, r4, #16
 800025e:	fbbe f6f8 	udiv	r6, lr, r8
 8000262:	fa1f f78c 	uxth.w	r7, ip
 8000266:	fb08 e316 	mls	r3, r8, r6, lr
 800026a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026e:	fb06 f107 	mul.w	r1, r6, r7
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800027e:	f080 811f 	bcs.w	80004c0 <__udivmoddi4+0x298>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 811c 	bls.w	80004c0 <__udivmoddi4+0x298>
 8000288:	3e02      	subs	r6, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 f707 	mul.w	r7, r0, r7
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x92>
 80002a4:	eb1c 0404 	adds.w	r4, ip, r4
 80002a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ac:	f080 810a 	bcs.w	80004c4 <__udivmoddi4+0x29c>
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	f240 8107 	bls.w	80004c4 <__udivmoddi4+0x29c>
 80002b6:	4464      	add	r4, ip
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002be:	1be4      	subs	r4, r4, r7
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa4>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xc2>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80ef 	beq.w	80004ba <__udivmoddi4+0x292>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x160>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd4>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80f9 	bhi.w	80004ee <__udivmoddi4+0x2c6>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa4>
 800030a:	e9c5 4e00 	strd	r4, lr, [r5]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa4>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xec>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 8092 	bne.w	8000442 <__udivmoddi4+0x21a>
 800031e:	eba1 010c 	sub.w	r1, r1, ip
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2601      	movs	r6, #1
 800032c:	0c20      	lsrs	r0, r4, #16
 800032e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000332:	fb07 1113 	mls	r1, r7, r3, r1
 8000336:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033a:	fb0e f003 	mul.w	r0, lr, r3
 800033e:	4288      	cmp	r0, r1
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x12c>
 8000342:	eb1c 0101 	adds.w	r1, ip, r1
 8000346:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x12a>
 800034c:	4288      	cmp	r0, r1
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2c0>
 8000352:	4643      	mov	r3, r8
 8000354:	1a09      	subs	r1, r1, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb1 f0f7 	udiv	r0, r1, r7
 800035c:	fb07 1110 	mls	r1, r7, r0, r1
 8000360:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x156>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x154>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2ca>
 800037c:	4608      	mov	r0, r1
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000386:	e79c      	b.n	80002c2 <__udivmoddi4+0x9a>
 8000388:	f1c6 0720 	rsb	r7, r6, #32
 800038c:	40b3      	lsls	r3, r6
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa20 f407 	lsr.w	r4, r0, r7
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	431c      	orrs	r4, r3
 80003a0:	40f9      	lsrs	r1, r7
 80003a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a6:	fa00 f306 	lsl.w	r3, r0, r6
 80003aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ae:	0c20      	lsrs	r0, r4, #16
 80003b0:	fa1f fe8c 	uxth.w	lr, ip
 80003b4:	fb09 1118 	mls	r1, r9, r8, r1
 80003b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003bc:	fb08 f00e 	mul.w	r0, r8, lr
 80003c0:	4288      	cmp	r0, r1
 80003c2:	fa02 f206 	lsl.w	r2, r2, r6
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b8>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2bc>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2bc>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4461      	add	r1, ip
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e8:	fb09 1110 	mls	r1, r9, r0, r1
 80003ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	458e      	cmp	lr, r1
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1e2>
 80003f8:	eb1c 0101 	adds.w	r1, ip, r1
 80003fc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2b4>
 8000402:	458e      	cmp	lr, r1
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2b4>
 8000406:	3802      	subs	r0, #2
 8000408:	4461      	add	r1, ip
 800040a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040e:	fba0 9402 	umull	r9, r4, r0, r2
 8000412:	eba1 010e 	sub.w	r1, r1, lr
 8000416:	42a1      	cmp	r1, r4
 8000418:	46c8      	mov	r8, r9
 800041a:	46a6      	mov	lr, r4
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x2a4>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x2a0>
 8000420:	b15d      	cbz	r5, 800043a <__udivmoddi4+0x212>
 8000422:	ebb3 0208 	subs.w	r2, r3, r8
 8000426:	eb61 010e 	sbc.w	r1, r1, lr
 800042a:	fa01 f707 	lsl.w	r7, r1, r7
 800042e:	fa22 f306 	lsr.w	r3, r2, r6
 8000432:	40f1      	lsrs	r1, r6
 8000434:	431f      	orrs	r7, r3
 8000436:	e9c5 7100 	strd	r7, r1, [r5]
 800043a:	2600      	movs	r6, #0
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	f1c2 0320 	rsb	r3, r2, #32
 8000446:	40d8      	lsrs	r0, r3
 8000448:	fa0c fc02 	lsl.w	ip, ip, r2
 800044c:	fa21 f303 	lsr.w	r3, r1, r3
 8000450:	4091      	lsls	r1, r2
 8000452:	4301      	orrs	r1, r0
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3610 	mls	r6, r7, r0, r3
 8000464:	0c0b      	lsrs	r3, r1, #16
 8000466:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046a:	fb00 f60e 	mul.w	r6, r0, lr
 800046e:	429e      	cmp	r6, r3
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x260>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b8>
 8000480:	429e      	cmp	r6, r3
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b8>
 8000484:	3802      	subs	r0, #2
 8000486:	4463      	add	r3, ip
 8000488:	1b9b      	subs	r3, r3, r6
 800048a:	b289      	uxth	r1, r1
 800048c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000490:	fb07 3316 	mls	r3, r7, r6, r3
 8000494:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000498:	fb06 f30e 	mul.w	r3, r6, lr
 800049c:	428b      	cmp	r3, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x28a>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2b0>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2b0>
 80004ae:	3e02      	subs	r6, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0x104>
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e705      	b.n	80002cc <__udivmoddi4+0xa4>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e3      	b.n	800028c <__udivmoddi4+0x64>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6f8      	b.n	80002ba <__udivmoddi4+0x92>
 80004c8:	454b      	cmp	r3, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f8>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f8>
 80004d8:	4646      	mov	r6, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x28a>
 80004dc:	4620      	mov	r0, r4
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1e2>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x260>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b8>
 80004e8:	3b02      	subs	r3, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x12c>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e709      	b.n	8000306 <__udivmoddi4+0xde>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x156>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <disable_button_EEPROM_writes>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

void disable_button_EEPROM_writes(void) {
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b084      	sub	sp, #16
 8000500:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 8000502:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000506:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 2, HAL_MAX_DELAY);
 8000508:	1d3a      	adds	r2, r7, #4
 800050a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800050e:	9300      	str	r3, [sp, #0]
 8000510:	2302      	movs	r3, #2
 8000512:	21a0      	movs	r1, #160	; 0xa0
 8000514:	4803      	ldr	r0, [pc, #12]	; (8000524 <disable_button_EEPROM_writes+0x28>)
 8000516:	f003 fa2b 	bl	8003970 <HAL_I2C_Master_Transmit>
}
 800051a:	bf00      	nop
 800051c:	3708      	adds	r7, #8
 800051e:	46bd      	mov	sp, r7
 8000520:	bd80      	pop	{r7, pc}
 8000522:	bf00      	nop
 8000524:	200014b8 	.word	0x200014b8

08000528 <initialize_buttons>:

// Initialize Buttons
void initialize_buttons(void) {
 8000528:	b580      	push	{r7, lr}
 800052a:	af00      	add	r7, sp, #0
	disable_button_EEPROM_writes();
 800052c:	f7ff ffe6 	bl	80004fc <disable_button_EEPROM_writes>
	enable_all_buttons();
 8000530:	f000 f89a 	bl	8000668 <enable_all_buttons>
	update_buttons();
 8000534:	f000 f8ae 	bl	8000694 <update_buttons>
	HAL_Delay(1);
 8000538:	2001      	movs	r0, #1
 800053a:	f002 f9a9 	bl	8002890 <HAL_Delay>
}
 800053e:	bf00      	nop
 8000540:	bd80      	pop	{r7, pc}
	...

08000544 <enable_button>:

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 8000544:	b480      	push	{r7}
 8000546:	b083      	sub	sp, #12
 8000548:	af00      	add	r7, sp, #0
 800054a:	4603      	mov	r3, r0
 800054c:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800054e:	79fb      	ldrb	r3, [r7, #7]
 8000550:	2b00      	cmp	r3, #0
 8000552:	d01e      	beq.n	8000592 <enable_button+0x4e>
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 8000554:	79fb      	ldrb	r3, [r7, #7]
 8000556:	2b09      	cmp	r3, #9
 8000558:	d107      	bne.n	800056a <enable_button+0x26>
		io_ctrl_2 &= ~(0b1);
 800055a:	4b11      	ldr	r3, [pc, #68]	; (80005a0 <enable_button+0x5c>)
 800055c:	781b      	ldrb	r3, [r3, #0]
 800055e:	f023 0301 	bic.w	r3, r3, #1
 8000562:	b2da      	uxtb	r2, r3
 8000564:	4b0e      	ldr	r3, [pc, #56]	; (80005a0 <enable_button+0x5c>)
 8000566:	701a      	strb	r2, [r3, #0]
 8000568:	e014      	b.n	8000594 <enable_button+0x50>
	} else if (button <= 8) {
 800056a:	79fb      	ldrb	r3, [r7, #7]
 800056c:	2b08      	cmp	r3, #8
 800056e:	d811      	bhi.n	8000594 <enable_button+0x50>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 8000570:	79fb      	ldrb	r3, [r7, #7]
 8000572:	3b01      	subs	r3, #1
 8000574:	2201      	movs	r2, #1
 8000576:	fa02 f303 	lsl.w	r3, r2, r3
 800057a:	b25b      	sxtb	r3, r3
 800057c:	43db      	mvns	r3, r3
 800057e:	b25a      	sxtb	r2, r3
 8000580:	4b08      	ldr	r3, [pc, #32]	; (80005a4 <enable_button+0x60>)
 8000582:	781b      	ldrb	r3, [r3, #0]
 8000584:	b25b      	sxtb	r3, r3
 8000586:	4013      	ands	r3, r2
 8000588:	b25b      	sxtb	r3, r3
 800058a:	b2da      	uxtb	r2, r3
 800058c:	4b05      	ldr	r3, [pc, #20]	; (80005a4 <enable_button+0x60>)
 800058e:	701a      	strb	r2, [r3, #0]
 8000590:	e000      	b.n	8000594 <enable_button+0x50>
	if (!button) return;
 8000592:	bf00      	nop
	}
}
 8000594:	370c      	adds	r7, #12
 8000596:	46bd      	mov	sp, r7
 8000598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800059c:	4770      	bx	lr
 800059e:	bf00      	nop
 80005a0:	20000001 	.word	0x20000001
 80005a4:	20000000 	.word	0x20000000

080005a8 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 80005a8:	b480      	push	{r7}
 80005aa:	b083      	sub	sp, #12
 80005ac:	af00      	add	r7, sp, #0
 80005ae:	4603      	mov	r3, r0
 80005b0:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 80005b2:	79fb      	ldrb	r3, [r7, #7]
 80005b4:	2b00      	cmp	r3, #0
 80005b6:	d01c      	beq.n	80005f2 <disable_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 80005b8:	79fb      	ldrb	r3, [r7, #7]
 80005ba:	2b09      	cmp	r3, #9
 80005bc:	d107      	bne.n	80005ce <disable_button+0x26>
		io_ctrl_2 |= 0b1;
 80005be:	4b10      	ldr	r3, [pc, #64]	; (8000600 <disable_button+0x58>)
 80005c0:	781b      	ldrb	r3, [r3, #0]
 80005c2:	f043 0301 	orr.w	r3, r3, #1
 80005c6:	b2da      	uxtb	r2, r3
 80005c8:	4b0d      	ldr	r3, [pc, #52]	; (8000600 <disable_button+0x58>)
 80005ca:	701a      	strb	r2, [r3, #0]
 80005cc:	e012      	b.n	80005f4 <disable_button+0x4c>
	} else if (button <= 8) {
 80005ce:	79fb      	ldrb	r3, [r7, #7]
 80005d0:	2b08      	cmp	r3, #8
 80005d2:	d80f      	bhi.n	80005f4 <disable_button+0x4c>
		io_ctrl_1 |= 0b1 << (button - 1);
 80005d4:	79fb      	ldrb	r3, [r7, #7]
 80005d6:	3b01      	subs	r3, #1
 80005d8:	2201      	movs	r2, #1
 80005da:	fa02 f303 	lsl.w	r3, r2, r3
 80005de:	b25a      	sxtb	r2, r3
 80005e0:	4b08      	ldr	r3, [pc, #32]	; (8000604 <disable_button+0x5c>)
 80005e2:	781b      	ldrb	r3, [r3, #0]
 80005e4:	b25b      	sxtb	r3, r3
 80005e6:	4313      	orrs	r3, r2
 80005e8:	b25b      	sxtb	r3, r3
 80005ea:	b2da      	uxtb	r2, r3
 80005ec:	4b05      	ldr	r3, [pc, #20]	; (8000604 <disable_button+0x5c>)
 80005ee:	701a      	strb	r2, [r3, #0]
 80005f0:	e000      	b.n	80005f4 <disable_button+0x4c>
	if (!button) return;
 80005f2:	bf00      	nop
	}
}
 80005f4:	370c      	adds	r7, #12
 80005f6:	46bd      	mov	sp, r7
 80005f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005fc:	4770      	bx	lr
 80005fe:	bf00      	nop
 8000600:	20000001 	.word	0x20000001
 8000604:	20000000 	.word	0x20000000

08000608 <toggle_button>:

// Toggle a button (1 indexed, left-to-right, top-to-bottom)
void toggle_button(uint8_t button) {
 8000608:	b480      	push	{r7}
 800060a:	b083      	sub	sp, #12
 800060c:	af00      	add	r7, sp, #0
 800060e:	4603      	mov	r3, r0
 8000610:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 8000612:	79fb      	ldrb	r3, [r7, #7]
 8000614:	2b00      	cmp	r3, #0
 8000616:	d01c      	beq.n	8000652 <toggle_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 8000618:	79fb      	ldrb	r3, [r7, #7]
 800061a:	2b09      	cmp	r3, #9
 800061c:	d107      	bne.n	800062e <toggle_button+0x26>
		io_ctrl_2 ^= 0b1;
 800061e:	4b10      	ldr	r3, [pc, #64]	; (8000660 <toggle_button+0x58>)
 8000620:	781b      	ldrb	r3, [r3, #0]
 8000622:	f083 0301 	eor.w	r3, r3, #1
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b0d      	ldr	r3, [pc, #52]	; (8000660 <toggle_button+0x58>)
 800062a:	701a      	strb	r2, [r3, #0]
 800062c:	e012      	b.n	8000654 <toggle_button+0x4c>
	} else if (button <= 8) {
 800062e:	79fb      	ldrb	r3, [r7, #7]
 8000630:	2b08      	cmp	r3, #8
 8000632:	d80f      	bhi.n	8000654 <toggle_button+0x4c>
		io_ctrl_1 ^= 0b1 << (button - 1);
 8000634:	79fb      	ldrb	r3, [r7, #7]
 8000636:	3b01      	subs	r3, #1
 8000638:	2201      	movs	r2, #1
 800063a:	fa02 f303 	lsl.w	r3, r2, r3
 800063e:	b25a      	sxtb	r2, r3
 8000640:	4b08      	ldr	r3, [pc, #32]	; (8000664 <toggle_button+0x5c>)
 8000642:	781b      	ldrb	r3, [r3, #0]
 8000644:	b25b      	sxtb	r3, r3
 8000646:	4053      	eors	r3, r2
 8000648:	b25b      	sxtb	r3, r3
 800064a:	b2da      	uxtb	r2, r3
 800064c:	4b05      	ldr	r3, [pc, #20]	; (8000664 <toggle_button+0x5c>)
 800064e:	701a      	strb	r2, [r3, #0]
 8000650:	e000      	b.n	8000654 <toggle_button+0x4c>
	if (!button) return;
 8000652:	bf00      	nop
	}
}
 8000654:	370c      	adds	r7, #12
 8000656:	46bd      	mov	sp, r7
 8000658:	f85d 7b04 	ldr.w	r7, [sp], #4
 800065c:	4770      	bx	lr
 800065e:	bf00      	nop
 8000660:	20000001 	.word	0x20000001
 8000664:	20000000 	.word	0x20000000

08000668 <enable_all_buttons>:

// Enable all of the buttons
void enable_all_buttons(void) {
 8000668:	b580      	push	{r7, lr}
 800066a:	b082      	sub	sp, #8
 800066c:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 800066e:	2301      	movs	r3, #1
 8000670:	71fb      	strb	r3, [r7, #7]
 8000672:	e006      	b.n	8000682 <enable_all_buttons+0x1a>
		enable_button(i);
 8000674:	79fb      	ldrb	r3, [r7, #7]
 8000676:	4618      	mov	r0, r3
 8000678:	f7ff ff64 	bl	8000544 <enable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	3301      	adds	r3, #1
 8000680:	71fb      	strb	r3, [r7, #7]
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	2b09      	cmp	r3, #9
 8000686:	d9f5      	bls.n	8000674 <enable_all_buttons+0xc>
	}
}
 8000688:	bf00      	nop
 800068a:	bf00      	nop
 800068c:	3708      	adds	r7, #8
 800068e:	46bd      	mov	sp, r7
 8000690:	bd80      	pop	{r7, pc}
	...

08000694 <update_buttons>:
		toggle_button(i);
	}
}

// Write the updated button configuration to the remote
void update_buttons(void) {
 8000694:	b580      	push	{r7, lr}
 8000696:	b084      	sub	sp, #16
 8000698:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 800069a:	23f2      	movs	r3, #242	; 0xf2
 800069c:	713b      	strb	r3, [r7, #4]
 800069e:	4b09      	ldr	r3, [pc, #36]	; (80006c4 <update_buttons+0x30>)
 80006a0:	781b      	ldrb	r3, [r3, #0]
 80006a2:	717b      	strb	r3, [r7, #5]
 80006a4:	4b08      	ldr	r3, [pc, #32]	; (80006c8 <update_buttons+0x34>)
 80006a6:	781b      	ldrb	r3, [r3, #0]
 80006a8:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 80006aa:	1d3a      	adds	r2, r7, #4
 80006ac:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006b0:	9300      	str	r3, [sp, #0]
 80006b2:	2303      	movs	r3, #3
 80006b4:	21a0      	movs	r1, #160	; 0xa0
 80006b6:	4805      	ldr	r0, [pc, #20]	; (80006cc <update_buttons+0x38>)
 80006b8:	f003 f95a 	bl	8003970 <HAL_I2C_Master_Transmit>
}
 80006bc:	bf00      	nop
 80006be:	3708      	adds	r7, #8
 80006c0:	46bd      	mov	sp, r7
 80006c2:	bd80      	pop	{r7, pc}
 80006c4:	20000000 	.word	0x20000000
 80006c8:	20000001 	.word	0x20000001
 80006cc:	200014b8 	.word	0x200014b8

080006d0 <poll_buttons>:

// Poll buttons, returns the first pressed button
// or zero if no button is pressed
uint8_t poll_buttons(void) {
 80006d0:	b580      	push	{r7, lr}
 80006d2:	af00      	add	r7, sp, #0
	C1_HIGH();
 80006d4:	2201      	movs	r2, #1
 80006d6:	2180      	movs	r1, #128	; 0x80
 80006d8:	483c      	ldr	r0, [pc, #240]	; (80007cc <poll_buttons+0xfc>)
 80006da:	f002 ffeb 	bl	80036b4 <HAL_GPIO_WritePin>
	C2_HIGH();
 80006de:	2201      	movs	r2, #1
 80006e0:	2140      	movs	r1, #64	; 0x40
 80006e2:	483a      	ldr	r0, [pc, #232]	; (80007cc <poll_buttons+0xfc>)
 80006e4:	f002 ffe6 	bl	80036b4 <HAL_GPIO_WritePin>
	C0_LOW();
 80006e8:	2200      	movs	r2, #0
 80006ea:	2140      	movs	r1, #64	; 0x40
 80006ec:	4838      	ldr	r0, [pc, #224]	; (80007d0 <poll_buttons+0x100>)
 80006ee:	f002 ffe1 	bl	80036b4 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 1;
 80006f2:	2108      	movs	r1, #8
 80006f4:	4836      	ldr	r0, [pc, #216]	; (80007d0 <poll_buttons+0x100>)
 80006f6:	f002 ffc5 	bl	8003684 <HAL_GPIO_ReadPin>
 80006fa:	4603      	mov	r3, r0
 80006fc:	2b00      	cmp	r3, #0
 80006fe:	d101      	bne.n	8000704 <poll_buttons+0x34>
 8000700:	2301      	movs	r3, #1
 8000702:	e061      	b.n	80007c8 <poll_buttons+0xf8>
	if (!R1_READ()) return 4;
 8000704:	2120      	movs	r1, #32
 8000706:	4832      	ldr	r0, [pc, #200]	; (80007d0 <poll_buttons+0x100>)
 8000708:	f002 ffbc 	bl	8003684 <HAL_GPIO_ReadPin>
 800070c:	4603      	mov	r3, r0
 800070e:	2b00      	cmp	r3, #0
 8000710:	d101      	bne.n	8000716 <poll_buttons+0x46>
 8000712:	2304      	movs	r3, #4
 8000714:	e058      	b.n	80007c8 <poll_buttons+0xf8>
	if (!R2_READ()) return 7;
 8000716:	2110      	movs	r1, #16
 8000718:	482d      	ldr	r0, [pc, #180]	; (80007d0 <poll_buttons+0x100>)
 800071a:	f002 ffb3 	bl	8003684 <HAL_GPIO_ReadPin>
 800071e:	4603      	mov	r3, r0
 8000720:	2b00      	cmp	r3, #0
 8000722:	d101      	bne.n	8000728 <poll_buttons+0x58>
 8000724:	2307      	movs	r3, #7
 8000726:	e04f      	b.n	80007c8 <poll_buttons+0xf8>
	C0_HIGH();
 8000728:	2201      	movs	r2, #1
 800072a:	2140      	movs	r1, #64	; 0x40
 800072c:	4828      	ldr	r0, [pc, #160]	; (80007d0 <poll_buttons+0x100>)
 800072e:	f002 ffc1 	bl	80036b4 <HAL_GPIO_WritePin>

	C1_LOW();
 8000732:	2200      	movs	r2, #0
 8000734:	2180      	movs	r1, #128	; 0x80
 8000736:	4825      	ldr	r0, [pc, #148]	; (80007cc <poll_buttons+0xfc>)
 8000738:	f002 ffbc 	bl	80036b4 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 2;
 800073c:	2108      	movs	r1, #8
 800073e:	4824      	ldr	r0, [pc, #144]	; (80007d0 <poll_buttons+0x100>)
 8000740:	f002 ffa0 	bl	8003684 <HAL_GPIO_ReadPin>
 8000744:	4603      	mov	r3, r0
 8000746:	2b00      	cmp	r3, #0
 8000748:	d101      	bne.n	800074e <poll_buttons+0x7e>
 800074a:	2302      	movs	r3, #2
 800074c:	e03c      	b.n	80007c8 <poll_buttons+0xf8>
	if (!R1_READ()) return 5;
 800074e:	2120      	movs	r1, #32
 8000750:	481f      	ldr	r0, [pc, #124]	; (80007d0 <poll_buttons+0x100>)
 8000752:	f002 ff97 	bl	8003684 <HAL_GPIO_ReadPin>
 8000756:	4603      	mov	r3, r0
 8000758:	2b00      	cmp	r3, #0
 800075a:	d101      	bne.n	8000760 <poll_buttons+0x90>
 800075c:	2305      	movs	r3, #5
 800075e:	e033      	b.n	80007c8 <poll_buttons+0xf8>
	if (!R2_READ()) return 8;
 8000760:	2110      	movs	r1, #16
 8000762:	481b      	ldr	r0, [pc, #108]	; (80007d0 <poll_buttons+0x100>)
 8000764:	f002 ff8e 	bl	8003684 <HAL_GPIO_ReadPin>
 8000768:	4603      	mov	r3, r0
 800076a:	2b00      	cmp	r3, #0
 800076c:	d101      	bne.n	8000772 <poll_buttons+0xa2>
 800076e:	2308      	movs	r3, #8
 8000770:	e02a      	b.n	80007c8 <poll_buttons+0xf8>
	C1_HIGH();
 8000772:	2201      	movs	r2, #1
 8000774:	2180      	movs	r1, #128	; 0x80
 8000776:	4815      	ldr	r0, [pc, #84]	; (80007cc <poll_buttons+0xfc>)
 8000778:	f002 ff9c 	bl	80036b4 <HAL_GPIO_WritePin>

	C2_LOW();
 800077c:	2200      	movs	r2, #0
 800077e:	2140      	movs	r1, #64	; 0x40
 8000780:	4812      	ldr	r0, [pc, #72]	; (80007cc <poll_buttons+0xfc>)
 8000782:	f002 ff97 	bl	80036b4 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 3;
 8000786:	2108      	movs	r1, #8
 8000788:	4811      	ldr	r0, [pc, #68]	; (80007d0 <poll_buttons+0x100>)
 800078a:	f002 ff7b 	bl	8003684 <HAL_GPIO_ReadPin>
 800078e:	4603      	mov	r3, r0
 8000790:	2b00      	cmp	r3, #0
 8000792:	d101      	bne.n	8000798 <poll_buttons+0xc8>
 8000794:	2303      	movs	r3, #3
 8000796:	e017      	b.n	80007c8 <poll_buttons+0xf8>
	if (!R1_READ()) return 6;
 8000798:	2120      	movs	r1, #32
 800079a:	480d      	ldr	r0, [pc, #52]	; (80007d0 <poll_buttons+0x100>)
 800079c:	f002 ff72 	bl	8003684 <HAL_GPIO_ReadPin>
 80007a0:	4603      	mov	r3, r0
 80007a2:	2b00      	cmp	r3, #0
 80007a4:	d101      	bne.n	80007aa <poll_buttons+0xda>
 80007a6:	2306      	movs	r3, #6
 80007a8:	e00e      	b.n	80007c8 <poll_buttons+0xf8>
	if (!R2_READ()) return 9;
 80007aa:	2110      	movs	r1, #16
 80007ac:	4808      	ldr	r0, [pc, #32]	; (80007d0 <poll_buttons+0x100>)
 80007ae:	f002 ff69 	bl	8003684 <HAL_GPIO_ReadPin>
 80007b2:	4603      	mov	r3, r0
 80007b4:	2b00      	cmp	r3, #0
 80007b6:	d101      	bne.n	80007bc <poll_buttons+0xec>
 80007b8:	2309      	movs	r3, #9
 80007ba:	e005      	b.n	80007c8 <poll_buttons+0xf8>
	C2_HIGH();
 80007bc:	2201      	movs	r2, #1
 80007be:	2140      	movs	r1, #64	; 0x40
 80007c0:	4802      	ldr	r0, [pc, #8]	; (80007cc <poll_buttons+0xfc>)
 80007c2:	f002 ff77 	bl	80036b4 <HAL_GPIO_WritePin>

	return 0;
 80007c6:	2300      	movs	r3, #0
}
 80007c8:	4618      	mov	r0, r3
 80007ca:	bd80      	pop	{r7, pc}
 80007cc:	40020000 	.word	0x40020000
 80007d0:	40020400 	.word	0x40020400

080007d4 <init_default_controller>:

extern UART_HandleTypeDef huart1;
extern Controller controller;
extern unsigned char UART1_rxBuffer[8192];

void init_default_controller() {
 80007d4:	b580      	push	{r7, lr}
 80007d6:	b084      	sub	sp, #16
 80007d8:	af00      	add	r7, sp, #0
	char device_number[3];
	char cmd_number[3];
	for (uint8_t i = 0; i < 18; ++i) {
 80007da:	2300      	movs	r3, #0
 80007dc:	73fb      	strb	r3, [r7, #15]
 80007de:	e05f      	b.n	80008a0 <init_default_controller+0xcc>
		strcpy(controller.devices[i].name, "Device ");
 80007e0:	7bfb      	ldrb	r3, [r7, #15]
 80007e2:	f640 0294 	movw	r2, #2196	; 0x894
 80007e6:	fb02 f303 	mul.w	r3, r2, r3
 80007ea:	f603 0388 	addw	r3, r3, #2184	; 0x888
 80007ee:	4a33      	ldr	r2, [pc, #204]	; (80008bc <init_default_controller+0xe8>)
 80007f0:	4413      	add	r3, r2
 80007f2:	4933      	ldr	r1, [pc, #204]	; (80008c0 <init_default_controller+0xec>)
 80007f4:	461a      	mov	r2, r3
 80007f6:	460b      	mov	r3, r1
 80007f8:	cb03      	ldmia	r3!, {r0, r1}
 80007fa:	6010      	str	r0, [r2, #0]
 80007fc:	6051      	str	r1, [r2, #4]
		itoa(i + 1, device_number, 10);
 80007fe:	7bfb      	ldrb	r3, [r7, #15]
 8000800:	3301      	adds	r3, #1
 8000802:	f107 0108 	add.w	r1, r7, #8
 8000806:	220a      	movs	r2, #10
 8000808:	4618      	mov	r0, r3
 800080a:	f006 ff8f 	bl	800772c <itoa>
		strcat(controller.devices[i].name, device_number);
 800080e:	7bfb      	ldrb	r3, [r7, #15]
 8000810:	f640 0294 	movw	r2, #2196	; 0x894
 8000814:	fb02 f303 	mul.w	r3, r2, r3
 8000818:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800081c:	4a27      	ldr	r2, [pc, #156]	; (80008bc <init_default_controller+0xe8>)
 800081e:	4413      	add	r3, r2
 8000820:	f107 0208 	add.w	r2, r7, #8
 8000824:	4611      	mov	r1, r2
 8000826:	4618      	mov	r0, r3
 8000828:	f006 ff8a 	bl	8007740 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 800082c:	2300      	movs	r3, #0
 800082e:	73bb      	strb	r3, [r7, #14]
 8000830:	e030      	b.n	8000894 <init_default_controller+0xc0>
			strcpy(controller.devices[i].commands[j].desc, "Command ");
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	7bba      	ldrb	r2, [r7, #14]
 8000836:	215b      	movs	r1, #91	; 0x5b
 8000838:	fb01 f202 	mul.w	r2, r1, r2
 800083c:	f640 0194 	movw	r1, #2196	; 0x894
 8000840:	fb01 f303 	mul.w	r3, r1, r3
 8000844:	4413      	add	r3, r2
 8000846:	3350      	adds	r3, #80	; 0x50
 8000848:	4a1c      	ldr	r2, [pc, #112]	; (80008bc <init_default_controller+0xe8>)
 800084a:	4413      	add	r3, r2
 800084c:	491d      	ldr	r1, [pc, #116]	; (80008c4 <init_default_controller+0xf0>)
 800084e:	461a      	mov	r2, r3
 8000850:	460b      	mov	r3, r1
 8000852:	cb03      	ldmia	r3!, {r0, r1}
 8000854:	6010      	str	r0, [r2, #0]
 8000856:	6051      	str	r1, [r2, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	7213      	strb	r3, [r2, #8]
			itoa(j + 1, cmd_number, 10);
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	3301      	adds	r3, #1
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	220a      	movs	r2, #10
 8000864:	4618      	mov	r0, r3
 8000866:	f006 ff61 	bl	800772c <itoa>
			strcat(controller.devices[i].commands[j].desc, cmd_number);
 800086a:	7bfb      	ldrb	r3, [r7, #15]
 800086c:	7bba      	ldrb	r2, [r7, #14]
 800086e:	215b      	movs	r1, #91	; 0x5b
 8000870:	fb01 f202 	mul.w	r2, r1, r2
 8000874:	f640 0194 	movw	r1, #2196	; 0x894
 8000878:	fb01 f303 	mul.w	r3, r1, r3
 800087c:	4413      	add	r3, r2
 800087e:	3350      	adds	r3, #80	; 0x50
 8000880:	4a0e      	ldr	r2, [pc, #56]	; (80008bc <init_default_controller+0xe8>)
 8000882:	4413      	add	r3, r2
 8000884:	1d3a      	adds	r2, r7, #4
 8000886:	4611      	mov	r1, r2
 8000888:	4618      	mov	r0, r3
 800088a:	f006 ff59 	bl	8007740 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 800088e:	7bbb      	ldrb	r3, [r7, #14]
 8000890:	3301      	adds	r3, #1
 8000892:	73bb      	strb	r3, [r7, #14]
 8000894:	7bbb      	ldrb	r3, [r7, #14]
 8000896:	2b17      	cmp	r3, #23
 8000898:	d9cb      	bls.n	8000832 <init_default_controller+0x5e>
	for (uint8_t i = 0; i < 18; ++i) {
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	3301      	adds	r3, #1
 800089e:	73fb      	strb	r3, [r7, #15]
 80008a0:	7bfb      	ldrb	r3, [r7, #15]
 80008a2:	2b11      	cmp	r3, #17
 80008a4:	d99c      	bls.n	80007e0 <init_default_controller+0xc>
		}
	}
	controller.num_devices = 18;
 80008a6:	4b05      	ldr	r3, [pc, #20]	; (80008bc <init_default_controller+0xe8>)
 80008a8:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 80008ac:	2212      	movs	r2, #18
 80008ae:	f883 2a68 	strb.w	r2, [r3, #2664]	; 0xa68
}
 80008b2:	bf00      	nop
 80008b4:	3710      	adds	r7, #16
 80008b6:	46bd      	mov	sp, r7
 80008b8:	bd80      	pop	{r7, pc}
 80008ba:	bf00      	nop
 80008bc:	20001714 	.word	0x20001714
 80008c0:	08007814 	.word	0x08007814
 80008c4:	0800781c 	.word	0x0800781c

080008c8 <init_xbee_communication>:

void init_xbee_communication() {
 80008c8:	b580      	push	{r7, lr}
 80008ca:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 80008cc:	2201      	movs	r2, #1
 80008ce:	4903      	ldr	r1, [pc, #12]	; (80008dc <init_xbee_communication+0x14>)
 80008d0:	4803      	ldr	r0, [pc, #12]	; (80008e0 <init_xbee_communication+0x18>)
 80008d2:	f005 ff56 	bl	8006782 <HAL_UART_Receive_IT>
}
 80008d6:	bf00      	nop
 80008d8:	bd80      	pop	{r7, pc}
 80008da:	bf00      	nop
 80008dc:	2000b180 	.word	0x2000b180
 80008e0:	200016cc 	.word	0x200016cc

080008e4 <print_number>:

void print_number(uint8_t n) {
 80008e4:	b580      	push	{r7, lr}
 80008e6:	b084      	sub	sp, #16
 80008e8:	af00      	add	r7, sp, #0
 80008ea:	4603      	mov	r3, r0
 80008ec:	71fb      	strb	r3, [r7, #7]
	char buf[3];
	itoa(n,buf,10);
 80008ee:	79fb      	ldrb	r3, [r7, #7]
 80008f0:	f107 010c 	add.w	r1, r7, #12
 80008f4:	220a      	movs	r2, #10
 80008f6:	4618      	mov	r0, r3
 80008f8:	f006 ff18 	bl	800772c <itoa>
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, 1, 0xFFFF);
 80008fc:	f107 010c 	add.w	r1, r7, #12
 8000900:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000904:	2201      	movs	r2, #1
 8000906:	4807      	ldr	r0, [pc, #28]	; (8000924 <print_number+0x40>)
 8000908:	f005 fea9 	bl	800665e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)deliminator, 1, 0xFFFF);
 800090c:	4b06      	ldr	r3, [pc, #24]	; (8000928 <print_number+0x44>)
 800090e:	6819      	ldr	r1, [r3, #0]
 8000910:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000914:	2201      	movs	r2, #1
 8000916:	4803      	ldr	r0, [pc, #12]	; (8000924 <print_number+0x40>)
 8000918:	f005 fea1 	bl	800665e <HAL_UART_Transmit>
}
 800091c:	bf00      	nop
 800091e:	3710      	adds	r7, #16
 8000920:	46bd      	mov	sp, r7
 8000922:	bd80      	pop	{r7, pc}
 8000924:	200016cc 	.word	0x200016cc
 8000928:	20000004 	.word	0x20000004

0800092c <print_device>:

void print_device(uint8_t device) {
 800092c:	b590      	push	{r4, r7, lr}
 800092e:	b083      	sub	sp, #12
 8000930:	af00      	add	r7, sp, #0
 8000932:	4603      	mov	r3, r0
 8000934:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)(controller.devices[device].name),strlen(controller.devices[device].name),0xFFFF);
 8000936:	79fb      	ldrb	r3, [r7, #7]
 8000938:	f640 0294 	movw	r2, #2196	; 0x894
 800093c:	fb02 f303 	mul.w	r3, r2, r3
 8000940:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8000944:	4a10      	ldr	r2, [pc, #64]	; (8000988 <print_device+0x5c>)
 8000946:	189c      	adds	r4, r3, r2
 8000948:	79fb      	ldrb	r3, [r7, #7]
 800094a:	f640 0294 	movw	r2, #2196	; 0x894
 800094e:	fb02 f303 	mul.w	r3, r2, r3
 8000952:	f603 0388 	addw	r3, r3, #2184	; 0x888
 8000956:	4a0c      	ldr	r2, [pc, #48]	; (8000988 <print_device+0x5c>)
 8000958:	4413      	add	r3, r2
 800095a:	4618      	mov	r0, r3
 800095c:	f7ff fc44 	bl	80001e8 <strlen>
 8000960:	4603      	mov	r3, r0
 8000962:	b29a      	uxth	r2, r3
 8000964:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000968:	4621      	mov	r1, r4
 800096a:	4808      	ldr	r0, [pc, #32]	; (800098c <print_device+0x60>)
 800096c:	f005 fe77 	bl	800665e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)deliminator, 1, 0xFFFF);
 8000970:	4b07      	ldr	r3, [pc, #28]	; (8000990 <print_device+0x64>)
 8000972:	6819      	ldr	r1, [r3, #0]
 8000974:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000978:	2201      	movs	r2, #1
 800097a:	4804      	ldr	r0, [pc, #16]	; (800098c <print_device+0x60>)
 800097c:	f005 fe6f 	bl	800665e <HAL_UART_Transmit>
}
 8000980:	bf00      	nop
 8000982:	370c      	adds	r7, #12
 8000984:	46bd      	mov	sp, r7
 8000986:	bd90      	pop	{r4, r7, pc}
 8000988:	20001714 	.word	0x20001714
 800098c:	200016cc 	.word	0x200016cc
 8000990:	20000004 	.word	0x20000004

08000994 <print_command>:
	for (uint8_t i = 0; i < controller.num_devices; ++i) {
		print_device(i);
	}
}

void print_command(uint8_t device, uint8_t command) {
 8000994:	b590      	push	{r4, r7, lr}
 8000996:	b085      	sub	sp, #20
 8000998:	af00      	add	r7, sp, #0
 800099a:	4603      	mov	r3, r0
 800099c:	460a      	mov	r2, r1
 800099e:	71fb      	strb	r3, [r7, #7]
 80009a0:	4613      	mov	r3, r2
 80009a2:	71bb      	strb	r3, [r7, #6]
	char data_buffer[3];
	itoa(controller.devices[device].commands[command].UART_Data, data_buffer, 16);
 80009a4:	79fb      	ldrb	r3, [r7, #7]
 80009a6:	79ba      	ldrb	r2, [r7, #6]
 80009a8:	215b      	movs	r1, #91	; 0x5b
 80009aa:	fb01 f202 	mul.w	r2, r1, r2
 80009ae:	f640 0194 	movw	r1, #2196	; 0x894
 80009b2:	fb01 f303 	mul.w	r3, r1, r3
 80009b6:	4413      	add	r3, r2
 80009b8:	4a27      	ldr	r2, [pc, #156]	; (8000a58 <print_command+0xc4>)
 80009ba:	4413      	add	r3, r2
 80009bc:	4618      	mov	r0, r3
 80009be:	f107 030c 	add.w	r3, r7, #12
 80009c2:	2210      	movs	r2, #16
 80009c4:	4619      	mov	r1, r3
 80009c6:	f006 feb1 	bl	800772c <itoa>

	HAL_UART_Transmit(&huart1, (uint8_t*)(controller.devices[device].commands[command].desc),strlen(controller.devices[device].commands[command].desc),0xFFFF);
 80009ca:	79fb      	ldrb	r3, [r7, #7]
 80009cc:	79ba      	ldrb	r2, [r7, #6]
 80009ce:	215b      	movs	r1, #91	; 0x5b
 80009d0:	fb01 f202 	mul.w	r2, r1, r2
 80009d4:	f640 0194 	movw	r1, #2196	; 0x894
 80009d8:	fb01 f303 	mul.w	r3, r1, r3
 80009dc:	4413      	add	r3, r2
 80009de:	3350      	adds	r3, #80	; 0x50
 80009e0:	4a1d      	ldr	r2, [pc, #116]	; (8000a58 <print_command+0xc4>)
 80009e2:	189c      	adds	r4, r3, r2
 80009e4:	79fb      	ldrb	r3, [r7, #7]
 80009e6:	79ba      	ldrb	r2, [r7, #6]
 80009e8:	215b      	movs	r1, #91	; 0x5b
 80009ea:	fb01 f202 	mul.w	r2, r1, r2
 80009ee:	f640 0194 	movw	r1, #2196	; 0x894
 80009f2:	fb01 f303 	mul.w	r3, r1, r3
 80009f6:	4413      	add	r3, r2
 80009f8:	3350      	adds	r3, #80	; 0x50
 80009fa:	4a17      	ldr	r2, [pc, #92]	; (8000a58 <print_command+0xc4>)
 80009fc:	4413      	add	r3, r2
 80009fe:	4618      	mov	r0, r3
 8000a00:	f7ff fbf2 	bl	80001e8 <strlen>
 8000a04:	4603      	mov	r3, r0
 8000a06:	b29a      	uxth	r2, r3
 8000a08:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a0c:	4621      	mov	r1, r4
 8000a0e:	4813      	ldr	r0, [pc, #76]	; (8000a5c <print_command+0xc8>)
 8000a10:	f005 fe25 	bl	800665e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)section_deliminator, 1, 0xFFFF);
 8000a14:	4b12      	ldr	r3, [pc, #72]	; (8000a60 <print_command+0xcc>)
 8000a16:	6819      	ldr	r1, [r3, #0]
 8000a18:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a1c:	2201      	movs	r2, #1
 8000a1e:	480f      	ldr	r0, [pc, #60]	; (8000a5c <print_command+0xc8>)
 8000a20:	f005 fe1d 	bl	800665e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)data_buffer,strlen(data_buffer),0xFFFF);
 8000a24:	f107 030c 	add.w	r3, r7, #12
 8000a28:	4618      	mov	r0, r3
 8000a2a:	f7ff fbdd 	bl	80001e8 <strlen>
 8000a2e:	4603      	mov	r3, r0
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	f107 010c 	add.w	r1, r7, #12
 8000a36:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a3a:	4808      	ldr	r0, [pc, #32]	; (8000a5c <print_command+0xc8>)
 8000a3c:	f005 fe0f 	bl	800665e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)deliminator, 1, 0xFFFF);
 8000a40:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <print_command+0xd0>)
 8000a42:	6819      	ldr	r1, [r3, #0]
 8000a44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a48:	2201      	movs	r2, #1
 8000a4a:	4804      	ldr	r0, [pc, #16]	; (8000a5c <print_command+0xc8>)
 8000a4c:	f005 fe07 	bl	800665e <HAL_UART_Transmit>
}
 8000a50:	bf00      	nop
 8000a52:	3714      	adds	r7, #20
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bd90      	pop	{r4, r7, pc}
 8000a58:	20001714 	.word	0x20001714
 8000a5c:	200016cc 	.word	0x200016cc
 8000a60:	20000008 	.word	0x20000008
 8000a64:	20000004 	.word	0x20000004

08000a68 <print_commands>:

void print_commands(uint8_t device) {
 8000a68:	b580      	push	{r7, lr}
 8000a6a:	b084      	sub	sp, #16
 8000a6c:	af00      	add	r7, sp, #0
 8000a6e:	4603      	mov	r3, r0
 8000a70:	71fb      	strb	r3, [r7, #7]
	for (uint8_t i = 0; i < controller.devices[device].num_button_commands; ++i) {
 8000a72:	2300      	movs	r3, #0
 8000a74:	73fb      	strb	r3, [r7, #15]
 8000a76:	e008      	b.n	8000a8a <print_commands+0x22>
		print_command(device, i);
 8000a78:	7bfa      	ldrb	r2, [r7, #15]
 8000a7a:	79fb      	ldrb	r3, [r7, #7]
 8000a7c:	4611      	mov	r1, r2
 8000a7e:	4618      	mov	r0, r3
 8000a80:	f7ff ff88 	bl	8000994 <print_command>
	for (uint8_t i = 0; i < controller.devices[device].num_button_commands; ++i) {
 8000a84:	7bfb      	ldrb	r3, [r7, #15]
 8000a86:	3301      	adds	r3, #1
 8000a88:	73fb      	strb	r3, [r7, #15]
 8000a8a:	79fb      	ldrb	r3, [r7, #7]
 8000a8c:	4a08      	ldr	r2, [pc, #32]	; (8000ab0 <print_commands+0x48>)
 8000a8e:	f640 0194 	movw	r1, #2196	; 0x894
 8000a92:	fb01 f303 	mul.w	r3, r1, r3
 8000a96:	4413      	add	r3, r2
 8000a98:	f603 0393 	addw	r3, r3, #2195	; 0x893
 8000a9c:	781b      	ldrb	r3, [r3, #0]
 8000a9e:	7bfa      	ldrb	r2, [r7, #15]
 8000aa0:	429a      	cmp	r2, r3
 8000aa2:	d3e9      	bcc.n	8000a78 <print_commands+0x10>
	}
}
 8000aa4:	bf00      	nop
 8000aa6:	bf00      	nop
 8000aa8:	3710      	adds	r7, #16
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	20001714 	.word	0x20001714

08000ab4 <export_device>:
 * ...
 * Number of Touch Commands
 * Command #1 Long Name, Short Name, Data
 * Command #2 Long Name, Short Name, Data
 */
void export_device(uint8_t device) {
 8000ab4:	b580      	push	{r7, lr}
 8000ab6:	b082      	sub	sp, #8
 8000ab8:	af00      	add	r7, sp, #0
 8000aba:	4603      	mov	r3, r0
 8000abc:	71fb      	strb	r3, [r7, #7]
	print_device(device);
 8000abe:	79fb      	ldrb	r3, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f7ff ff33 	bl	800092c <print_device>

	print_number(controller.devices[device].num_button_commands);
 8000ac6:	79fb      	ldrb	r3, [r7, #7]
 8000ac8:	4a09      	ldr	r2, [pc, #36]	; (8000af0 <export_device+0x3c>)
 8000aca:	f640 0194 	movw	r1, #2196	; 0x894
 8000ace:	fb01 f303 	mul.w	r3, r1, r3
 8000ad2:	4413      	add	r3, r2
 8000ad4:	f603 0393 	addw	r3, r3, #2195	; 0x893
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	4618      	mov	r0, r3
 8000adc:	f7ff ff02 	bl	80008e4 <print_number>
	print_commands(device);
 8000ae0:	79fb      	ldrb	r3, [r7, #7]
 8000ae2:	4618      	mov	r0, r3
 8000ae4:	f7ff ffc0 	bl	8000a68 <print_commands>
}
 8000ae8:	bf00      	nop
 8000aea:	3708      	adds	r7, #8
 8000aec:	46bd      	mov	sp, r7
 8000aee:	bd80      	pop	{r7, pc}
 8000af0:	20001714 	.word	0x20001714

08000af4 <export_configuration>:
 * Command #2 Name, Data
 * (blank line)
 * Device #2 Name
 * ...
*/
void export_configuration() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	b082      	sub	sp, #8
 8000af8:	af00      	add	r7, sp, #0
	print_number(controller.num_devices);
 8000afa:	4b13      	ldr	r3, [pc, #76]	; (8000b48 <export_configuration+0x54>)
 8000afc:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000b00:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8000b04:	4618      	mov	r0, r3
 8000b06:	f7ff feed 	bl	80008e4 <print_number>

	for (uint8_t i = 0; i < controller.num_devices; ++i) {
 8000b0a:	2300      	movs	r3, #0
 8000b0c:	71fb      	strb	r3, [r7, #7]
 8000b0e:	e00e      	b.n	8000b2e <export_configuration+0x3a>
		export_device(i);
 8000b10:	79fb      	ldrb	r3, [r7, #7]
 8000b12:	4618      	mov	r0, r3
 8000b14:	f7ff ffce 	bl	8000ab4 <export_device>
		HAL_UART_Transmit(&huart1, (uint8_t*)deliminator, 1, 0xFFFF);
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <export_configuration+0x58>)
 8000b1a:	6819      	ldr	r1, [r3, #0]
 8000b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000b20:	2201      	movs	r2, #1
 8000b22:	480b      	ldr	r0, [pc, #44]	; (8000b50 <export_configuration+0x5c>)
 8000b24:	f005 fd9b 	bl	800665e <HAL_UART_Transmit>
	for (uint8_t i = 0; i < controller.num_devices; ++i) {
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	71fb      	strb	r3, [r7, #7]
 8000b2e:	4b06      	ldr	r3, [pc, #24]	; (8000b48 <export_configuration+0x54>)
 8000b30:	f503 4310 	add.w	r3, r3, #36864	; 0x9000
 8000b34:	f893 3a68 	ldrb.w	r3, [r3, #2664]	; 0xa68
 8000b38:	79fa      	ldrb	r2, [r7, #7]
 8000b3a:	429a      	cmp	r2, r3
 8000b3c:	d3e8      	bcc.n	8000b10 <export_configuration+0x1c>
	}
}
 8000b3e:	bf00      	nop
 8000b40:	bf00      	nop
 8000b42:	3708      	adds	r7, #8
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bd80      	pop	{r7, pc}
 8000b48:	20001714 	.word	0x20001714
 8000b4c:	20000004 	.word	0x20000004
 8000b50:	200016cc 	.word	0x200016cc

08000b54 <Toggle>:
#include "main.h"
#include "stm32f4xx_hal.h"
#define dataL 66
extern uint16_t data[];
extern TIM_HandleTypeDef htim3;
void Toggle(int on){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	b082      	sub	sp, #8
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	6078      	str	r0, [r7, #4]
	if(!on){
 8000b5c:	687b      	ldr	r3, [r7, #4]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d104      	bne.n	8000b6c <Toggle+0x18>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000b62:	2104      	movs	r1, #4
 8000b64:	4805      	ldr	r0, [pc, #20]	; (8000b7c <Toggle+0x28>)
 8000b66:	f004 fa35 	bl	8004fd4 <HAL_TIM_PWM_Start>
	}
	else{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	}
}
 8000b6a:	e003      	b.n	8000b74 <Toggle+0x20>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 8000b6c:	2104      	movs	r1, #4
 8000b6e:	4803      	ldr	r0, [pc, #12]	; (8000b7c <Toggle+0x28>)
 8000b70:	f004 fae0 	bl	8005134 <HAL_TIM_PWM_Stop>
}
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	200015f4 	.word	0x200015f4

08000b80 <Delay>:
void Delay(uint16_t delay){
 8000b80:	b480      	push	{r7}
 8000b82:	b083      	sub	sp, #12
 8000b84:	af00      	add	r7, sp, #0
 8000b86:	4603      	mov	r3, r0
 8000b88:	80fb      	strh	r3, [r7, #6]

	if(delay == 0)
 8000b8a:	88fb      	ldrh	r3, [r7, #6]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d01c      	beq.n	8000bca <Delay+0x4a>
			return;
	TIM1->SR = 0;
 8000b90:	4b11      	ldr	r3, [pc, #68]	; (8000bd8 <Delay+0x58>)
 8000b92:	2200      	movs	r2, #0
 8000b94:	611a      	str	r2, [r3, #16]
	TIM1->ARR = delay;
 8000b96:	4a10      	ldr	r2, [pc, #64]	; (8000bd8 <Delay+0x58>)
 8000b98:	88fb      	ldrh	r3, [r7, #6]
 8000b9a:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CNT = 0;
 8000b9c:	4b0e      	ldr	r3, [pc, #56]	; (8000bd8 <Delay+0x58>)
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CR1 |= 1; //enables timer 1
 8000ba2:	4b0d      	ldr	r3, [pc, #52]	; (8000bd8 <Delay+0x58>)
 8000ba4:	681b      	ldr	r3, [r3, #0]
 8000ba6:	4a0c      	ldr	r2, [pc, #48]	; (8000bd8 <Delay+0x58>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6013      	str	r3, [r2, #0]
	while(!(TIM1->SR & TIM_SR_UIF));
 8000bae:	bf00      	nop
 8000bb0:	4b09      	ldr	r3, [pc, #36]	; (8000bd8 <Delay+0x58>)
 8000bb2:	691b      	ldr	r3, [r3, #16]
 8000bb4:	f003 0301 	and.w	r3, r3, #1
 8000bb8:	2b00      	cmp	r3, #0
 8000bba:	d0f9      	beq.n	8000bb0 <Delay+0x30>
	TIM1->CR1 &= ~(1); //disables timer 1
 8000bbc:	4b06      	ldr	r3, [pc, #24]	; (8000bd8 <Delay+0x58>)
 8000bbe:	681b      	ldr	r3, [r3, #0]
 8000bc0:	4a05      	ldr	r2, [pc, #20]	; (8000bd8 <Delay+0x58>)
 8000bc2:	f023 0301 	bic.w	r3, r3, #1
 8000bc6:	6013      	str	r3, [r2, #0]
 8000bc8:	e000      	b.n	8000bcc <Delay+0x4c>
			return;
 8000bca:	bf00      	nop
}
 8000bcc:	370c      	adds	r7, #12
 8000bce:	46bd      	mov	sp, r7
 8000bd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bd4:	4770      	bx	lr
 8000bd6:	bf00      	nop
 8000bd8:	40010000 	.word	0x40010000

08000bdc <Transmit>:
void Transmit(){
 8000bdc:	b580      	push	{r7, lr}
 8000bde:	b082      	sub	sp, #8
 8000be0:	af00      	add	r7, sp, #0
	int on = 0;
 8000be2:	2300      	movs	r3, #0
 8000be4:	607b      	str	r3, [r7, #4]
	for(size_t i = 0; i<dataL;++i){
 8000be6:	2300      	movs	r3, #0
 8000be8:	603b      	str	r3, [r7, #0]
 8000bea:	e010      	b.n	8000c0e <Transmit+0x32>
		Toggle(on);
 8000bec:	6878      	ldr	r0, [r7, #4]
 8000bee:	f7ff ffb1 	bl	8000b54 <Toggle>
		on^=1;
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	f083 0301 	eor.w	r3, r3, #1
 8000bf8:	607b      	str	r3, [r7, #4]
		Delay(data[i]);
 8000bfa:	4a0a      	ldr	r2, [pc, #40]	; (8000c24 <Transmit+0x48>)
 8000bfc:	683b      	ldr	r3, [r7, #0]
 8000bfe:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8000c02:	4618      	mov	r0, r3
 8000c04:	f7ff ffbc 	bl	8000b80 <Delay>
	for(size_t i = 0; i<dataL;++i){
 8000c08:	683b      	ldr	r3, [r7, #0]
 8000c0a:	3301      	adds	r3, #1
 8000c0c:	603b      	str	r3, [r7, #0]
 8000c0e:	683b      	ldr	r3, [r7, #0]
 8000c10:	2b41      	cmp	r3, #65	; 0x41
 8000c12:	d9eb      	bls.n	8000bec <Transmit+0x10>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 8000c14:	2100      	movs	r1, #0
 8000c16:	4804      	ldr	r0, [pc, #16]	; (8000c28 <Transmit+0x4c>)
 8000c18:	f004 fa8c 	bl	8005134 <HAL_TIM_PWM_Stop>

}
 8000c1c:	bf00      	nop
 8000c1e:	3708      	adds	r7, #8
 8000c20:	46bd      	mov	sp, r7
 8000c22:	bd80      	pop	{r7, pc}
 8000c24:	2000d184 	.word	0x2000d184
 8000c28:	200015f4 	.word	0x200015f4

08000c2c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c2c:	b580      	push	{r7, lr}
 8000c2e:	b084      	sub	sp, #16
 8000c30:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c32:	f001 fdbb 	bl	80027ac <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c36:	f000 f893 	bl	8000d60 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c3a:	f000 fbbd 	bl	80013b8 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000c3e:	f000 f97b 	bl	8000f38 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000c42:	f000 fa01 	bl	8001048 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000c46:	f000 fb8d 	bl	8001364 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000c4a:	f000 f947 	bl	8000edc <MX_I2C1_Init>
  MX_TIM5_Init();
 8000c4e:	f000 fb3b 	bl	80012c8 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000c52:	f000 f9a7 	bl	8000fa4 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000c56:	f000 fa67 	bl	8001128 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000c5a:	f000 fadb 	bl	8001214 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000c5e:	f000 f8eb 	bl	8000e38 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  init_default_controller(&controller);
 8000c62:	4837      	ldr	r0, [pc, #220]	; (8000d40 <main+0x114>)
 8000c64:	f7ff fdb6 	bl	80007d4 <init_default_controller>
  init_displays();
 8000c68:	f000 ffaa 	bl	8001bc0 <init_displays>
  HAL_TIM_Base_Start_IT(&htim5);
 8000c6c:	4835      	ldr	r0, [pc, #212]	; (8000d44 <main+0x118>)
 8000c6e:	f004 f8ff 	bl	8004e70 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000c72:	2108      	movs	r1, #8
 8000c74:	4834      	ldr	r0, [pc, #208]	; (8000d48 <main+0x11c>)
 8000c76:	f004 f9ad 	bl	8004fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000c7a:	2104      	movs	r1, #4
 8000c7c:	4833      	ldr	r0, [pc, #204]	; (8000d4c <main+0x120>)
 8000c7e:	f004 f9a9 	bl	8004fd4 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //Starts timer 2
 8000c82:	2100      	movs	r1, #0
 8000c84:	4830      	ldr	r0, [pc, #192]	; (8000d48 <main+0x11c>)
 8000c86:	f004 fb13 	bl	80052b0 <HAL_TIM_IC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,50);
 8000c8a:	4b31      	ldr	r3, [pc, #196]	; (8000d50 <main+0x124>)
 8000c8c:	681b      	ldr	r3, [r3, #0]
 8000c8e:	2232      	movs	r2, #50	; 0x32
 8000c90:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 999); // Adjust LED Brightness
 8000c92:	4b2e      	ldr	r3, [pc, #184]	; (8000d4c <main+0x120>)
 8000c94:	681b      	ldr	r3, [r3, #0]
 8000c96:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000c9a:	639a      	str	r2, [r3, #56]	; 0x38
  initialize_buttons();
 8000c9c:	f7ff fc44 	bl	8000528 <initialize_buttons>
  //update_buttons();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  display_menu(main_menu, 1, 0);
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	2101      	movs	r1, #1
 8000ca4:	2000      	movs	r0, #0
 8000ca6:	f000 fd15 	bl	80016d4 <display_menu>
  uint8_t pressed_button = 0;
 8000caa:	2300      	movs	r3, #0
 8000cac:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
	  if (button) {
 8000cae:	4b29      	ldr	r3, [pc, #164]	; (8000d54 <main+0x128>)
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	2b00      	cmp	r3, #0
 8000cb4:	d00b      	beq.n	8000cce <main+0xa2>
		  pressed_button = button;
 8000cb6:	4b27      	ldr	r3, [pc, #156]	; (8000d54 <main+0x128>)
 8000cb8:	781b      	ldrb	r3, [r3, #0]
 8000cba:	72fb      	strb	r3, [r7, #11]
		  while(button);
 8000cbc:	bf00      	nop
 8000cbe:	4b25      	ldr	r3, [pc, #148]	; (8000d54 <main+0x128>)
 8000cc0:	781b      	ldrb	r3, [r3, #0]
 8000cc2:	2b00      	cmp	r3, #0
 8000cc4:	d1fb      	bne.n	8000cbe <main+0x92>
		  button_pressed(pressed_button);
 8000cc6:	7afb      	ldrb	r3, [r7, #11]
 8000cc8:	4618      	mov	r0, r3
 8000cca:	f000 fe03 	bl	80018d4 <button_pressed>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8000cce:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000cd2:	4821      	ldr	r0, [pc, #132]	; (8000d58 <main+0x12c>)
 8000cd4:	f002 fcd6 	bl	8003684 <HAL_GPIO_ReadPin>
 8000cd8:	4603      	mov	r3, r0
 8000cda:	2b00      	cmp	r3, #0
 8000cdc:	d113      	bne.n	8000d06 <main+0xda>
		  while(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13));
 8000cde:	bf00      	nop
 8000ce0:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ce4:	481c      	ldr	r0, [pc, #112]	; (8000d58 <main+0x12c>)
 8000ce6:	f002 fccd 	bl	8003684 <HAL_GPIO_ReadPin>
 8000cea:	4603      	mov	r3, r0
 8000cec:	2b00      	cmp	r3, #0
 8000cee:	d0f7      	beq.n	8000ce0 <main+0xb4>
		  for(int i =0; i<2;++i)
 8000cf0:	2300      	movs	r3, #0
 8000cf2:	60fb      	str	r3, [r7, #12]
 8000cf4:	e004      	b.n	8000d00 <main+0xd4>
			  Transmit();
 8000cf6:	f7ff ff71 	bl	8000bdc <Transmit>
		  for(int i =0; i<2;++i)
 8000cfa:	68fb      	ldr	r3, [r7, #12]
 8000cfc:	3301      	adds	r3, #1
 8000cfe:	60fb      	str	r3, [r7, #12]
 8000d00:	68fb      	ldr	r3, [r7, #12]
 8000d02:	2b01      	cmp	r3, #1
 8000d04:	ddf7      	ble.n	8000cf6 <main+0xca>
	  }
	  //ADC testing code
	  uint32_t ADC_VAL;
	  HAL_ADC_Start(&hadc1);//start conversion
 8000d06:	4815      	ldr	r0, [pc, #84]	; (8000d5c <main+0x130>)
 8000d08:	f001 fe2a 	bl	8002960 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);//wait for conversion to finish
 8000d0c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000d10:	4812      	ldr	r0, [pc, #72]	; (8000d5c <main+0x130>)
 8000d12:	f001 fed9 	bl	8002ac8 <HAL_ADC_PollForConversion>
	  ADC_VAL = HAL_ADC_GetValue(&hadc1);//retrieve value
 8000d16:	4811      	ldr	r0, [pc, #68]	; (8000d5c <main+0x130>)
 8000d18:	f001 ff61 	bl	8002bde <HAL_ADC_GetValue>
 8000d1c:	6078      	str	r0, [r7, #4]

	  /*if(ADC_VAL < 500){
		  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 200); // Adjust LED Brightness
	  }*/
	  if(ADC_VAL > 1900){
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	f240 726c 	movw	r2, #1900	; 0x76c
 8000d24:	4293      	cmp	r3, r2
 8000d26:	d905      	bls.n	8000d34 <main+0x108>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1999); // Adjust LED Brightness
 8000d28:	4b08      	ldr	r3, [pc, #32]	; (8000d4c <main+0x120>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000d30:	639a      	str	r2, [r3, #56]	; 0x38
 8000d32:	e7bc      	b.n	8000cae <main+0x82>
	  }
	  else{
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, ADC_VAL+20); // Adjust LED Brightness
 8000d34:	4b05      	ldr	r3, [pc, #20]	; (8000d4c <main+0x120>)
 8000d36:	681b      	ldr	r3, [r3, #0]
 8000d38:	687a      	ldr	r2, [r7, #4]
 8000d3a:	3214      	adds	r2, #20
 8000d3c:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8000d3e:	e7b6      	b.n	8000cae <main+0x82>
 8000d40:	20001714 	.word	0x20001714
 8000d44:	20001684 	.word	0x20001684
 8000d48:	200015ac 	.word	0x200015ac
 8000d4c:	2000163c 	.word	0x2000163c
 8000d50:	200015f4 	.word	0x200015f4
 8000d54:	20001711 	.word	0x20001711
 8000d58:	40020800 	.word	0x40020800
 8000d5c:	20001470 	.word	0x20001470

08000d60 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d60:	b580      	push	{r7, lr}
 8000d62:	b094      	sub	sp, #80	; 0x50
 8000d64:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d66:	f107 0320 	add.w	r3, r7, #32
 8000d6a:	2230      	movs	r2, #48	; 0x30
 8000d6c:	2100      	movs	r1, #0
 8000d6e:	4618      	mov	r0, r3
 8000d70:	f006 fcde 	bl	8007730 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d74:	f107 030c 	add.w	r3, r7, #12
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000d84:	2300      	movs	r3, #0
 8000d86:	60bb      	str	r3, [r7, #8]
 8000d88:	4b29      	ldr	r3, [pc, #164]	; (8000e30 <SystemClock_Config+0xd0>)
 8000d8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d8c:	4a28      	ldr	r2, [pc, #160]	; (8000e30 <SystemClock_Config+0xd0>)
 8000d8e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000d92:	6413      	str	r3, [r2, #64]	; 0x40
 8000d94:	4b26      	ldr	r3, [pc, #152]	; (8000e30 <SystemClock_Config+0xd0>)
 8000d96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d98:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000d9c:	60bb      	str	r3, [r7, #8]
 8000d9e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000da0:	2300      	movs	r3, #0
 8000da2:	607b      	str	r3, [r7, #4]
 8000da4:	4b23      	ldr	r3, [pc, #140]	; (8000e34 <SystemClock_Config+0xd4>)
 8000da6:	681b      	ldr	r3, [r3, #0]
 8000da8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000dac:	4a21      	ldr	r2, [pc, #132]	; (8000e34 <SystemClock_Config+0xd4>)
 8000dae:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000db2:	6013      	str	r3, [r2, #0]
 8000db4:	4b1f      	ldr	r3, [pc, #124]	; (8000e34 <SystemClock_Config+0xd4>)
 8000db6:	681b      	ldr	r3, [r3, #0]
 8000db8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000dbc:	607b      	str	r3, [r7, #4]
 8000dbe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000dc0:	2302      	movs	r3, #2
 8000dc2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000dc4:	2301      	movs	r3, #1
 8000dc6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000dc8:	2310      	movs	r3, #16
 8000dca:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000dcc:	2302      	movs	r3, #2
 8000dce:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000dd4:	2310      	movs	r3, #16
 8000dd6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000dd8:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ddc:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000dde:	2304      	movs	r3, #4
 8000de0:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000de2:	2307      	movs	r3, #7
 8000de4:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000de6:	f107 0320 	add.w	r3, r7, #32
 8000dea:	4618      	mov	r0, r3
 8000dec:	f003 f8c8 	bl	8003f80 <HAL_RCC_OscConfig>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000df6:	f000 fc67 	bl	80016c8 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dfa:	230f      	movs	r3, #15
 8000dfc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dfe:	2302      	movs	r3, #2
 8000e00:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e02:	2300      	movs	r3, #0
 8000e04:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e06:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e0a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e0c:	2300      	movs	r3, #0
 8000e0e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e10:	f107 030c 	add.w	r3, r7, #12
 8000e14:	2102      	movs	r1, #2
 8000e16:	4618      	mov	r0, r3
 8000e18:	f003 fb2a 	bl	8004470 <HAL_RCC_ClockConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000e22:	f000 fc51 	bl	80016c8 <Error_Handler>
  }
}
 8000e26:	bf00      	nop
 8000e28:	3750      	adds	r7, #80	; 0x50
 8000e2a:	46bd      	mov	sp, r7
 8000e2c:	bd80      	pop	{r7, pc}
 8000e2e:	bf00      	nop
 8000e30:	40023800 	.word	0x40023800
 8000e34:	40007000 	.word	0x40007000

08000e38 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	b084      	sub	sp, #16
 8000e3c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000e3e:	463b      	mov	r3, r7
 8000e40:	2200      	movs	r2, #0
 8000e42:	601a      	str	r2, [r3, #0]
 8000e44:	605a      	str	r2, [r3, #4]
 8000e46:	609a      	str	r2, [r3, #8]
 8000e48:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000e4a:	4b21      	ldr	r3, [pc, #132]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e4c:	4a21      	ldr	r2, [pc, #132]	; (8000ed4 <MX_ADC1_Init+0x9c>)
 8000e4e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000e50:	4b1f      	ldr	r3, [pc, #124]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e52:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000e56:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000e58:	4b1d      	ldr	r3, [pc, #116]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000e5e:	4b1c      	ldr	r3, [pc, #112]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e60:	2200      	movs	r2, #0
 8000e62:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000e64:	4b1a      	ldr	r3, [pc, #104]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e66:	2200      	movs	r2, #0
 8000e68:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000e6a:	4b19      	ldr	r3, [pc, #100]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000e72:	4b17      	ldr	r3, [pc, #92]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e74:	2200      	movs	r2, #0
 8000e76:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000e78:	4b15      	ldr	r3, [pc, #84]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e7a:	4a17      	ldr	r2, [pc, #92]	; (8000ed8 <MX_ADC1_Init+0xa0>)
 8000e7c:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000e7e:	4b14      	ldr	r3, [pc, #80]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000e84:	4b12      	ldr	r3, [pc, #72]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e86:	2201      	movs	r2, #1
 8000e88:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000e8a:	4b11      	ldr	r3, [pc, #68]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000e92:	4b0f      	ldr	r3, [pc, #60]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e94:	2201      	movs	r2, #1
 8000e96:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000e98:	480d      	ldr	r0, [pc, #52]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000e9a:	f001 fd1d 	bl	80028d8 <HAL_ADC_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ea4:	f000 fc10 	bl	80016c8 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ea8:	2304      	movs	r3, #4
 8000eaa:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000eac:	2301      	movs	r3, #1
 8000eae:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000eb0:	2302      	movs	r3, #2
 8000eb2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000eb4:	463b      	mov	r3, r7
 8000eb6:	4619      	mov	r1, r3
 8000eb8:	4805      	ldr	r0, [pc, #20]	; (8000ed0 <MX_ADC1_Init+0x98>)
 8000eba:	f001 fe9d 	bl	8002bf8 <HAL_ADC_ConfigChannel>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000ec4:	f000 fc00 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ec8:	bf00      	nop
 8000eca:	3710      	adds	r7, #16
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20001470 	.word	0x20001470
 8000ed4:	40012000 	.word	0x40012000
 8000ed8:	0f000001 	.word	0x0f000001

08000edc <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000edc:	b580      	push	{r7, lr}
 8000ede:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000ee0:	4b12      	ldr	r3, [pc, #72]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee2:	4a13      	ldr	r2, [pc, #76]	; (8000f30 <MX_I2C1_Init+0x54>)
 8000ee4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ee6:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ee8:	4a12      	ldr	r2, [pc, #72]	; (8000f34 <MX_I2C1_Init+0x58>)
 8000eea:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000eec:	4b0f      	ldr	r3, [pc, #60]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000efa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000efe:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f00:	4b0a      	ldr	r3, [pc, #40]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000f06:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f0c:	4b07      	ldr	r3, [pc, #28]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f0e:	2200      	movs	r2, #0
 8000f10:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f12:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f18:	4804      	ldr	r0, [pc, #16]	; (8000f2c <MX_I2C1_Init+0x50>)
 8000f1a:	f002 fbe5 	bl	80036e8 <HAL_I2C_Init>
 8000f1e:	4603      	mov	r3, r0
 8000f20:	2b00      	cmp	r3, #0
 8000f22:	d001      	beq.n	8000f28 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000f24:	f000 fbd0 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f28:	bf00      	nop
 8000f2a:	bd80      	pop	{r7, pc}
 8000f2c:	200014b8 	.word	0x200014b8
 8000f30:	40005400 	.word	0x40005400
 8000f34:	000186a0 	.word	0x000186a0

08000f38 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000f38:	b580      	push	{r7, lr}
 8000f3a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000f3c:	4b17      	ldr	r3, [pc, #92]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f3e:	4a18      	ldr	r2, [pc, #96]	; (8000fa0 <MX_SPI2_Init+0x68>)
 8000f40:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000f42:	4b16      	ldr	r3, [pc, #88]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000f48:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000f4a:	4b14      	ldr	r3, [pc, #80]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000f50:	4b12      	ldr	r3, [pc, #72]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f52:	2200      	movs	r2, #0
 8000f54:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f58:	2200      	movs	r2, #0
 8000f5a:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000f5c:	4b0f      	ldr	r3, [pc, #60]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f5e:	2200      	movs	r2, #0
 8000f60:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000f62:	4b0e      	ldr	r3, [pc, #56]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000f68:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000f6a:	4b0c      	ldr	r3, [pc, #48]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f6c:	2230      	movs	r2, #48	; 0x30
 8000f6e:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000f70:	4b0a      	ldr	r3, [pc, #40]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f72:	2200      	movs	r2, #0
 8000f74:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000f76:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f78:	2200      	movs	r2, #0
 8000f7a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000f7c:	4b07      	ldr	r3, [pc, #28]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f7e:	2200      	movs	r2, #0
 8000f80:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000f82:	4b06      	ldr	r3, [pc, #24]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f84:	220a      	movs	r2, #10
 8000f86:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000f88:	4804      	ldr	r0, [pc, #16]	; (8000f9c <MX_SPI2_Init+0x64>)
 8000f8a:	f003 fc91 	bl	80048b0 <HAL_SPI_Init>
 8000f8e:	4603      	mov	r3, r0
 8000f90:	2b00      	cmp	r3, #0
 8000f92:	d001      	beq.n	8000f98 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000f94:	f000 fb98 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000f98:	bf00      	nop
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	2000150c 	.word	0x2000150c
 8000fa0:	40003800 	.word	0x40003800

08000fa4 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b086      	sub	sp, #24
 8000fa8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000faa:	f107 0308 	add.w	r3, r7, #8
 8000fae:	2200      	movs	r2, #0
 8000fb0:	601a      	str	r2, [r3, #0]
 8000fb2:	605a      	str	r2, [r3, #4]
 8000fb4:	609a      	str	r2, [r3, #8]
 8000fb6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fb8:	463b      	mov	r3, r7
 8000fba:	2200      	movs	r2, #0
 8000fbc:	601a      	str	r2, [r3, #0]
 8000fbe:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000fc0:	4b1f      	ldr	r3, [pc, #124]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fc2:	4a20      	ldr	r2, [pc, #128]	; (8001044 <MX_TIM1_Init+0xa0>)
 8000fc4:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1869;
 8000fc6:	4b1e      	ldr	r3, [pc, #120]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fc8:	f240 724d 	movw	r2, #1869	; 0x74d
 8000fcc:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fce:	4b1c      	ldr	r3, [pc, #112]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000fd4:	4b1a      	ldr	r3, [pc, #104]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fd6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000fda:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fdc:	4b18      	ldr	r3, [pc, #96]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fde:	2200      	movs	r2, #0
 8000fe0:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000fe2:	4b17      	ldr	r3, [pc, #92]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fe4:	2200      	movs	r2, #0
 8000fe6:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe8:	4b15      	ldr	r3, [pc, #84]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000fea:	2200      	movs	r2, #0
 8000fec:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000fee:	4814      	ldr	r0, [pc, #80]	; (8001040 <MX_TIM1_Init+0x9c>)
 8000ff0:	f003 feee 	bl	8004dd0 <HAL_TIM_Base_Init>
 8000ff4:	4603      	mov	r3, r0
 8000ff6:	2b00      	cmp	r3, #0
 8000ff8:	d001      	beq.n	8000ffe <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ffa:	f000 fb65 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ffe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001002:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001004:	f107 0308 	add.w	r3, r7, #8
 8001008:	4619      	mov	r1, r3
 800100a:	480d      	ldr	r0, [pc, #52]	; (8001040 <MX_TIM1_Init+0x9c>)
 800100c:	f004 fd7e 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 8001010:	4603      	mov	r3, r0
 8001012:	2b00      	cmp	r3, #0
 8001014:	d001      	beq.n	800101a <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8001016:	f000 fb57 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800101a:	2300      	movs	r3, #0
 800101c:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800101e:	2300      	movs	r3, #0
 8001020:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001022:	463b      	mov	r3, r7
 8001024:	4619      	mov	r1, r3
 8001026:	4806      	ldr	r0, [pc, #24]	; (8001040 <MX_TIM1_Init+0x9c>)
 8001028:	f005 fa4a 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 800102c:	4603      	mov	r3, r0
 800102e:	2b00      	cmp	r3, #0
 8001030:	d001      	beq.n	8001036 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8001032:	f000 fb49 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001036:	bf00      	nop
 8001038:	3718      	adds	r7, #24
 800103a:	46bd      	mov	sp, r7
 800103c:	bd80      	pop	{r7, pc}
 800103e:	bf00      	nop
 8001040:	20001564 	.word	0x20001564
 8001044:	40010000 	.word	0x40010000

08001048 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001048:	b580      	push	{r7, lr}
 800104a:	b08a      	sub	sp, #40	; 0x28
 800104c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800104e:	f107 0318 	add.w	r3, r7, #24
 8001052:	2200      	movs	r2, #0
 8001054:	601a      	str	r2, [r3, #0]
 8001056:	605a      	str	r2, [r3, #4]
 8001058:	609a      	str	r2, [r3, #8]
 800105a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800105c:	f107 0310 	add.w	r3, r7, #16
 8001060:	2200      	movs	r2, #0
 8001062:	601a      	str	r2, [r3, #0]
 8001064:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001066:	463b      	mov	r3, r7
 8001068:	2200      	movs	r2, #0
 800106a:	601a      	str	r2, [r3, #0]
 800106c:	605a      	str	r2, [r3, #4]
 800106e:	609a      	str	r2, [r3, #8]
 8001070:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001072:	4b2c      	ldr	r3, [pc, #176]	; (8001124 <MX_TIM2_Init+0xdc>)
 8001074:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001078:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1869;
 800107a:	4b2a      	ldr	r3, [pc, #168]	; (8001124 <MX_TIM2_Init+0xdc>)
 800107c:	f240 724d 	movw	r2, #1869	; 0x74d
 8001080:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001082:	4b28      	ldr	r3, [pc, #160]	; (8001124 <MX_TIM2_Init+0xdc>)
 8001084:	2200      	movs	r2, #0
 8001086:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001088:	4b26      	ldr	r3, [pc, #152]	; (8001124 <MX_TIM2_Init+0xdc>)
 800108a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800108e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001090:	4b24      	ldr	r3, [pc, #144]	; (8001124 <MX_TIM2_Init+0xdc>)
 8001092:	2200      	movs	r2, #0
 8001094:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001096:	4b23      	ldr	r3, [pc, #140]	; (8001124 <MX_TIM2_Init+0xdc>)
 8001098:	2200      	movs	r2, #0
 800109a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800109c:	4821      	ldr	r0, [pc, #132]	; (8001124 <MX_TIM2_Init+0xdc>)
 800109e:	f003 fe97 	bl	8004dd0 <HAL_TIM_Base_Init>
 80010a2:	4603      	mov	r3, r0
 80010a4:	2b00      	cmp	r3, #0
 80010a6:	d001      	beq.n	80010ac <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 80010a8:	f000 fb0e 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010ac:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010b0:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80010b2:	f107 0318 	add.w	r3, r7, #24
 80010b6:	4619      	mov	r1, r3
 80010b8:	481a      	ldr	r0, [pc, #104]	; (8001124 <MX_TIM2_Init+0xdc>)
 80010ba:	f004 fd27 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 80010be:	4603      	mov	r3, r0
 80010c0:	2b00      	cmp	r3, #0
 80010c2:	d001      	beq.n	80010c8 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 80010c4:	f000 fb00 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80010c8:	4816      	ldr	r0, [pc, #88]	; (8001124 <MX_TIM2_Init+0xdc>)
 80010ca:	f004 f897 	bl	80051fc <HAL_TIM_IC_Init>
 80010ce:	4603      	mov	r3, r0
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d001      	beq.n	80010d8 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 80010d4:	f000 faf8 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010d8:	2300      	movs	r3, #0
 80010da:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010dc:	2300      	movs	r3, #0
 80010de:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80010e0:	f107 0310 	add.w	r3, r7, #16
 80010e4:	4619      	mov	r1, r3
 80010e6:	480f      	ldr	r0, [pc, #60]	; (8001124 <MX_TIM2_Init+0xdc>)
 80010e8:	f005 f9ea 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 80010ec:	4603      	mov	r3, r0
 80010ee:	2b00      	cmp	r3, #0
 80010f0:	d001      	beq.n	80010f6 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 80010f2:	f000 fae9 	bl	80016c8 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 80010f6:	230a      	movs	r3, #10
 80010f8:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80010fa:	2301      	movs	r3, #1
 80010fc:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80010fe:	2300      	movs	r3, #0
 8001100:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8001102:	2300      	movs	r3, #0
 8001104:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001106:	463b      	mov	r3, r7
 8001108:	2200      	movs	r2, #0
 800110a:	4619      	mov	r1, r3
 800110c:	4805      	ldr	r0, [pc, #20]	; (8001124 <MX_TIM2_Init+0xdc>)
 800110e:	f004 fb9f 	bl	8005850 <HAL_TIM_IC_ConfigChannel>
 8001112:	4603      	mov	r3, r0
 8001114:	2b00      	cmp	r3, #0
 8001116:	d001      	beq.n	800111c <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8001118:	f000 fad6 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800111c:	bf00      	nop
 800111e:	3728      	adds	r7, #40	; 0x28
 8001120:	46bd      	mov	sp, r7
 8001122:	bd80      	pop	{r7, pc}
 8001124:	200015ac 	.word	0x200015ac

08001128 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001128:	b580      	push	{r7, lr}
 800112a:	b08e      	sub	sp, #56	; 0x38
 800112c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800112e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001132:	2200      	movs	r2, #0
 8001134:	601a      	str	r2, [r3, #0]
 8001136:	605a      	str	r2, [r3, #4]
 8001138:	609a      	str	r2, [r3, #8]
 800113a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800113c:	f107 0320 	add.w	r3, r7, #32
 8001140:	2200      	movs	r2, #0
 8001142:	601a      	str	r2, [r3, #0]
 8001144:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001146:	1d3b      	adds	r3, r7, #4
 8001148:	2200      	movs	r2, #0
 800114a:	601a      	str	r2, [r3, #0]
 800114c:	605a      	str	r2, [r3, #4]
 800114e:	609a      	str	r2, [r3, #8]
 8001150:	60da      	str	r2, [r3, #12]
 8001152:	611a      	str	r2, [r3, #16]
 8001154:	615a      	str	r2, [r3, #20]
 8001156:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001158:	4b2c      	ldr	r3, [pc, #176]	; (800120c <MX_TIM3_Init+0xe4>)
 800115a:	4a2d      	ldr	r2, [pc, #180]	; (8001210 <MX_TIM3_Init+0xe8>)
 800115c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21;
 800115e:	4b2b      	ldr	r3, [pc, #172]	; (800120c <MX_TIM3_Init+0xe4>)
 8001160:	2215      	movs	r2, #21
 8001162:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001164:	4b29      	ldr	r3, [pc, #164]	; (800120c <MX_TIM3_Init+0xe4>)
 8001166:	2200      	movs	r2, #0
 8001168:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 800116a:	4b28      	ldr	r3, [pc, #160]	; (800120c <MX_TIM3_Init+0xe4>)
 800116c:	2264      	movs	r2, #100	; 0x64
 800116e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001170:	4b26      	ldr	r3, [pc, #152]	; (800120c <MX_TIM3_Init+0xe4>)
 8001172:	2200      	movs	r2, #0
 8001174:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001176:	4b25      	ldr	r3, [pc, #148]	; (800120c <MX_TIM3_Init+0xe4>)
 8001178:	2200      	movs	r2, #0
 800117a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800117c:	4823      	ldr	r0, [pc, #140]	; (800120c <MX_TIM3_Init+0xe4>)
 800117e:	f003 fe27 	bl	8004dd0 <HAL_TIM_Base_Init>
 8001182:	4603      	mov	r3, r0
 8001184:	2b00      	cmp	r3, #0
 8001186:	d001      	beq.n	800118c <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001188:	f000 fa9e 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800118c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001190:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001192:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001196:	4619      	mov	r1, r3
 8001198:	481c      	ldr	r0, [pc, #112]	; (800120c <MX_TIM3_Init+0xe4>)
 800119a:	f004 fcb7 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 80011a4:	f000 fa90 	bl	80016c8 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80011a8:	4818      	ldr	r0, [pc, #96]	; (800120c <MX_TIM3_Init+0xe4>)
 80011aa:	f003 fec3 	bl	8004f34 <HAL_TIM_PWM_Init>
 80011ae:	4603      	mov	r3, r0
 80011b0:	2b00      	cmp	r3, #0
 80011b2:	d001      	beq.n	80011b8 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 80011b4:	f000 fa88 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80011b8:	2300      	movs	r3, #0
 80011ba:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80011bc:	2300      	movs	r3, #0
 80011be:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80011c0:	f107 0320 	add.w	r3, r7, #32
 80011c4:	4619      	mov	r1, r3
 80011c6:	4811      	ldr	r0, [pc, #68]	; (800120c <MX_TIM3_Init+0xe4>)
 80011c8:	f005 f97a 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 80011cc:	4603      	mov	r3, r0
 80011ce:	2b00      	cmp	r3, #0
 80011d0:	d001      	beq.n	80011d6 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80011d2:	f000 fa79 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80011d6:	2360      	movs	r3, #96	; 0x60
 80011d8:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80011de:	2300      	movs	r3, #0
 80011e0:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80011e2:	2300      	movs	r3, #0
 80011e4:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80011e6:	1d3b      	adds	r3, r7, #4
 80011e8:	2204      	movs	r2, #4
 80011ea:	4619      	mov	r1, r3
 80011ec:	4807      	ldr	r0, [pc, #28]	; (800120c <MX_TIM3_Init+0xe4>)
 80011ee:	f004 fbcb 	bl	8005988 <HAL_TIM_PWM_ConfigChannel>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80011f8:	f000 fa66 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80011fc:	4803      	ldr	r0, [pc, #12]	; (800120c <MX_TIM3_Init+0xe4>)
 80011fe:	f001 f967 	bl	80024d0 <HAL_TIM_MspPostInit>

}
 8001202:	bf00      	nop
 8001204:	3738      	adds	r7, #56	; 0x38
 8001206:	46bd      	mov	sp, r7
 8001208:	bd80      	pop	{r7, pc}
 800120a:	bf00      	nop
 800120c:	200015f4 	.word	0x200015f4
 8001210:	40000400 	.word	0x40000400

08001214 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b08a      	sub	sp, #40	; 0x28
 8001218:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800121a:	f107 0320 	add.w	r3, r7, #32
 800121e:	2200      	movs	r2, #0
 8001220:	601a      	str	r2, [r3, #0]
 8001222:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001224:	1d3b      	adds	r3, r7, #4
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
 800122a:	605a      	str	r2, [r3, #4]
 800122c:	609a      	str	r2, [r3, #8]
 800122e:	60da      	str	r2, [r3, #12]
 8001230:	611a      	str	r2, [r3, #16]
 8001232:	615a      	str	r2, [r3, #20]
 8001234:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001236:	4b22      	ldr	r3, [pc, #136]	; (80012c0 <MX_TIM4_Init+0xac>)
 8001238:	4a22      	ldr	r2, [pc, #136]	; (80012c4 <MX_TIM4_Init+0xb0>)
 800123a:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 511;
 800123c:	4b20      	ldr	r3, [pc, #128]	; (80012c0 <MX_TIM4_Init+0xac>)
 800123e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001242:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001244:	4b1e      	ldr	r3, [pc, #120]	; (80012c0 <MX_TIM4_Init+0xac>)
 8001246:	2200      	movs	r2, #0
 8001248:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 800124a:	4b1d      	ldr	r3, [pc, #116]	; (80012c0 <MX_TIM4_Init+0xac>)
 800124c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001250:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001252:	4b1b      	ldr	r3, [pc, #108]	; (80012c0 <MX_TIM4_Init+0xac>)
 8001254:	2200      	movs	r2, #0
 8001256:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001258:	4b19      	ldr	r3, [pc, #100]	; (80012c0 <MX_TIM4_Init+0xac>)
 800125a:	2200      	movs	r2, #0
 800125c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800125e:	4818      	ldr	r0, [pc, #96]	; (80012c0 <MX_TIM4_Init+0xac>)
 8001260:	f003 fe68 	bl	8004f34 <HAL_TIM_PWM_Init>
 8001264:	4603      	mov	r3, r0
 8001266:	2b00      	cmp	r3, #0
 8001268:	d001      	beq.n	800126e <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 800126a:	f000 fa2d 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800126e:	2300      	movs	r3, #0
 8001270:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001272:	2300      	movs	r3, #0
 8001274:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001276:	f107 0320 	add.w	r3, r7, #32
 800127a:	4619      	mov	r1, r3
 800127c:	4810      	ldr	r0, [pc, #64]	; (80012c0 <MX_TIM4_Init+0xac>)
 800127e:	f005 f91f 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001282:	4603      	mov	r3, r0
 8001284:	2b00      	cmp	r3, #0
 8001286:	d001      	beq.n	800128c <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001288:	f000 fa1e 	bl	80016c8 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 800128c:	2370      	movs	r3, #112	; 0x70
 800128e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001290:	2300      	movs	r3, #0
 8001292:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001294:	2300      	movs	r3, #0
 8001296:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001298:	2300      	movs	r3, #0
 800129a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800129c:	1d3b      	adds	r3, r7, #4
 800129e:	2204      	movs	r2, #4
 80012a0:	4619      	mov	r1, r3
 80012a2:	4807      	ldr	r0, [pc, #28]	; (80012c0 <MX_TIM4_Init+0xac>)
 80012a4:	f004 fb70 	bl	8005988 <HAL_TIM_PWM_ConfigChannel>
 80012a8:	4603      	mov	r3, r0
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d001      	beq.n	80012b2 <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80012ae:	f000 fa0b 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80012b2:	4803      	ldr	r0, [pc, #12]	; (80012c0 <MX_TIM4_Init+0xac>)
 80012b4:	f001 f90c 	bl	80024d0 <HAL_TIM_MspPostInit>

}
 80012b8:	bf00      	nop
 80012ba:	3728      	adds	r7, #40	; 0x28
 80012bc:	46bd      	mov	sp, r7
 80012be:	bd80      	pop	{r7, pc}
 80012c0:	2000163c 	.word	0x2000163c
 80012c4:	40000800 	.word	0x40000800

080012c8 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80012c8:	b580      	push	{r7, lr}
 80012ca:	b086      	sub	sp, #24
 80012cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012ce:	f107 0308 	add.w	r3, r7, #8
 80012d2:	2200      	movs	r2, #0
 80012d4:	601a      	str	r2, [r3, #0]
 80012d6:	605a      	str	r2, [r3, #4]
 80012d8:	609a      	str	r2, [r3, #8]
 80012da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012dc:	463b      	mov	r3, r7
 80012de:	2200      	movs	r2, #0
 80012e0:	601a      	str	r2, [r3, #0]
 80012e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80012e4:	4b1d      	ldr	r3, [pc, #116]	; (800135c <MX_TIM5_Init+0x94>)
 80012e6:	4a1e      	ldr	r2, [pc, #120]	; (8001360 <MX_TIM5_Init+0x98>)
 80012e8:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80012ea:	4b1c      	ldr	r3, [pc, #112]	; (800135c <MX_TIM5_Init+0x94>)
 80012ec:	2253      	movs	r2, #83	; 0x53
 80012ee:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012f0:	4b1a      	ldr	r3, [pc, #104]	; (800135c <MX_TIM5_Init+0x94>)
 80012f2:	2200      	movs	r2, #0
 80012f4:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49999;
 80012f6:	4b19      	ldr	r3, [pc, #100]	; (800135c <MX_TIM5_Init+0x94>)
 80012f8:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80012fc:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012fe:	4b17      	ldr	r3, [pc, #92]	; (800135c <MX_TIM5_Init+0x94>)
 8001300:	2200      	movs	r2, #0
 8001302:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001304:	4b15      	ldr	r3, [pc, #84]	; (800135c <MX_TIM5_Init+0x94>)
 8001306:	2280      	movs	r2, #128	; 0x80
 8001308:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800130a:	4814      	ldr	r0, [pc, #80]	; (800135c <MX_TIM5_Init+0x94>)
 800130c:	f003 fd60 	bl	8004dd0 <HAL_TIM_Base_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001316:	f000 f9d7 	bl	80016c8 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800131a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800131e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001320:	f107 0308 	add.w	r3, r7, #8
 8001324:	4619      	mov	r1, r3
 8001326:	480d      	ldr	r0, [pc, #52]	; (800135c <MX_TIM5_Init+0x94>)
 8001328:	f004 fbf0 	bl	8005b0c <HAL_TIM_ConfigClockSource>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8001332:	f000 f9c9 	bl	80016c8 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001336:	2300      	movs	r3, #0
 8001338:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800133a:	2300      	movs	r3, #0
 800133c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800133e:	463b      	mov	r3, r7
 8001340:	4619      	mov	r1, r3
 8001342:	4806      	ldr	r0, [pc, #24]	; (800135c <MX_TIM5_Init+0x94>)
 8001344:	f005 f8bc 	bl	80064c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001348:	4603      	mov	r3, r0
 800134a:	2b00      	cmp	r3, #0
 800134c:	d001      	beq.n	8001352 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800134e:	f000 f9bb 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8001352:	bf00      	nop
 8001354:	3718      	adds	r7, #24
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20001684 	.word	0x20001684
 8001360:	40000c00 	.word	0x40000c00

08001364 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001368:	4b11      	ldr	r3, [pc, #68]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800136a:	4a12      	ldr	r2, [pc, #72]	; (80013b4 <MX_USART1_UART_Init+0x50>)
 800136c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800136e:	4b10      	ldr	r3, [pc, #64]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001370:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001374:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001376:	4b0e      	ldr	r3, [pc, #56]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001378:	2200      	movs	r2, #0
 800137a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800137c:	4b0c      	ldr	r3, [pc, #48]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800137e:	2200      	movs	r2, #0
 8001380:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8001382:	4b0b      	ldr	r3, [pc, #44]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001384:	2200      	movs	r2, #0
 8001386:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001388:	4b09      	ldr	r3, [pc, #36]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800138a:	220c      	movs	r2, #12
 800138c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800138e:	4b08      	ldr	r3, [pc, #32]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001394:	4b06      	ldr	r3, [pc, #24]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 8001396:	2200      	movs	r2, #0
 8001398:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800139a:	4805      	ldr	r0, [pc, #20]	; (80013b0 <MX_USART1_UART_Init+0x4c>)
 800139c:	f005 f912 	bl	80065c4 <HAL_UART_Init>
 80013a0:	4603      	mov	r3, r0
 80013a2:	2b00      	cmp	r3, #0
 80013a4:	d001      	beq.n	80013aa <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80013a6:	f000 f98f 	bl	80016c8 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80013aa:	bf00      	nop
 80013ac:	bd80      	pop	{r7, pc}
 80013ae:	bf00      	nop
 80013b0:	200016cc 	.word	0x200016cc
 80013b4:	40011000 	.word	0x40011000

080013b8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b088      	sub	sp, #32
 80013bc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80013be:	f107 030c 	add.w	r3, r7, #12
 80013c2:	2200      	movs	r2, #0
 80013c4:	601a      	str	r2, [r3, #0]
 80013c6:	605a      	str	r2, [r3, #4]
 80013c8:	609a      	str	r2, [r3, #8]
 80013ca:	60da      	str	r2, [r3, #12]
 80013cc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ce:	2300      	movs	r3, #0
 80013d0:	60bb      	str	r3, [r7, #8]
 80013d2:	4b44      	ldr	r3, [pc, #272]	; (80014e4 <MX_GPIO_Init+0x12c>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013d6:	4a43      	ldr	r2, [pc, #268]	; (80014e4 <MX_GPIO_Init+0x12c>)
 80013d8:	f043 0304 	orr.w	r3, r3, #4
 80013dc:	6313      	str	r3, [r2, #48]	; 0x30
 80013de:	4b41      	ldr	r3, [pc, #260]	; (80014e4 <MX_GPIO_Init+0x12c>)
 80013e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013e2:	f003 0304 	and.w	r3, r3, #4
 80013e6:	60bb      	str	r3, [r7, #8]
 80013e8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013ea:	2300      	movs	r3, #0
 80013ec:	607b      	str	r3, [r7, #4]
 80013ee:	4b3d      	ldr	r3, [pc, #244]	; (80014e4 <MX_GPIO_Init+0x12c>)
 80013f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013f2:	4a3c      	ldr	r2, [pc, #240]	; (80014e4 <MX_GPIO_Init+0x12c>)
 80013f4:	f043 0301 	orr.w	r3, r3, #1
 80013f8:	6313      	str	r3, [r2, #48]	; 0x30
 80013fa:	4b3a      	ldr	r3, [pc, #232]	; (80014e4 <MX_GPIO_Init+0x12c>)
 80013fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80013fe:	f003 0301 	and.w	r3, r3, #1
 8001402:	607b      	str	r3, [r7, #4]
 8001404:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001406:	2300      	movs	r3, #0
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	4b36      	ldr	r3, [pc, #216]	; (80014e4 <MX_GPIO_Init+0x12c>)
 800140c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800140e:	4a35      	ldr	r2, [pc, #212]	; (80014e4 <MX_GPIO_Init+0x12c>)
 8001410:	f043 0302 	orr.w	r3, r3, #2
 8001414:	6313      	str	r3, [r2, #48]	; 0x30
 8001416:	4b33      	ldr	r3, [pc, #204]	; (80014e4 <MX_GPIO_Init+0x12c>)
 8001418:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800141a:	f003 0302 	and.w	r3, r3, #2
 800141e:	603b      	str	r3, [r7, #0]
 8001420:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 8001422:	2200      	movs	r2, #0
 8001424:	21e3      	movs	r1, #227	; 0xe3
 8001426:	4830      	ldr	r0, [pc, #192]	; (80014e8 <MX_GPIO_Init+0x130>)
 8001428:	f002 f944 	bl	80036b4 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800142c:	2200      	movs	r2, #0
 800142e:	2140      	movs	r1, #64	; 0x40
 8001430:	482e      	ldr	r0, [pc, #184]	; (80014ec <MX_GPIO_Init+0x134>)
 8001432:	f002 f93f 	bl	80036b4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001436:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800143a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800143c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001442:	2300      	movs	r3, #0
 8001444:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	4619      	mov	r1, r3
 800144c:	4828      	ldr	r0, [pc, #160]	; (80014f0 <MX_GPIO_Init+0x138>)
 800144e:	f001 ff95 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 8001452:	23e3      	movs	r3, #227	; 0xe3
 8001454:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001456:	2301      	movs	r3, #1
 8001458:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800145a:	2300      	movs	r3, #0
 800145c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800145e:	2300      	movs	r3, #0
 8001460:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001462:	f107 030c 	add.w	r3, r7, #12
 8001466:	4619      	mov	r1, r3
 8001468:	481f      	ldr	r0, [pc, #124]	; (80014e8 <MX_GPIO_Init+0x130>)
 800146a:	f001 ff87 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800146e:	230c      	movs	r3, #12
 8001470:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001472:	2302      	movs	r3, #2
 8001474:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001476:	2300      	movs	r3, #0
 8001478:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800147a:	2303      	movs	r3, #3
 800147c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800147e:	2307      	movs	r3, #7
 8001480:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001482:	f107 030c 	add.w	r3, r7, #12
 8001486:	4619      	mov	r1, r3
 8001488:	4817      	ldr	r0, [pc, #92]	; (80014e8 <MX_GPIO_Init+0x130>)
 800148a:	f001 ff77 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800148e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8001492:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001494:	2300      	movs	r3, #0
 8001496:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001498:	2300      	movs	r3, #0
 800149a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800149c:	f107 030c 	add.w	r3, r7, #12
 80014a0:	4619      	mov	r1, r3
 80014a2:	4813      	ldr	r0, [pc, #76]	; (80014f0 <MX_GPIO_Init+0x138>)
 80014a4:	f001 ff6a 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80014a8:	2338      	movs	r3, #56	; 0x38
 80014aa:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80014ac:	2300      	movs	r3, #0
 80014ae:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80014b0:	2301      	movs	r3, #1
 80014b2:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014b4:	f107 030c 	add.w	r3, r7, #12
 80014b8:	4619      	mov	r1, r3
 80014ba:	480c      	ldr	r0, [pc, #48]	; (80014ec <MX_GPIO_Init+0x134>)
 80014bc:	f001 ff5e 	bl	800337c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80014c0:	2340      	movs	r3, #64	; 0x40
 80014c2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80014c4:	2301      	movs	r3, #1
 80014c6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014c8:	2300      	movs	r3, #0
 80014ca:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80014cc:	2300      	movs	r3, #0
 80014ce:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80014d0:	f107 030c 	add.w	r3, r7, #12
 80014d4:	4619      	mov	r1, r3
 80014d6:	4805      	ldr	r0, [pc, #20]	; (80014ec <MX_GPIO_Init+0x134>)
 80014d8:	f001 ff50 	bl	800337c <HAL_GPIO_Init>

}
 80014dc:	bf00      	nop
 80014de:	3720      	adds	r7, #32
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40023800 	.word	0x40023800
 80014e8:	40020000 	.word	0x40020000
 80014ec:	40020400 	.word	0x40020400
 80014f0:	40020800 	.word	0x40020800

080014f4 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	b082      	sub	sp, #8
 80014f8:	af00      	add	r7, sp, #0
 80014fa:	6078      	str	r0, [r7, #4]
	// 50ms Poll Button Timer
	if (htim == &htim5 )
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	4a40      	ldr	r2, [pc, #256]	; (8001600 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8001500:	4293      	cmp	r3, r2
 8001502:	d179      	bne.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x104>
		// Count the number of times the interrupt fires for flashing
		static uint8_t i = 0;
		// Set high if the button has been released, low while pressed
		static uint8_t released = 1;

		button = poll_buttons();
 8001504:	f7ff f8e4 	bl	80006d0 <poll_buttons>
 8001508:	4603      	mov	r3, r0
 800150a:	461a      	mov	r2, r3
 800150c:	4b3d      	ldr	r3, [pc, #244]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800150e:	701a      	strb	r2, [r3, #0]
		// If a new button is pressed
		if (button && released) {
 8001510:	4b3c      	ldr	r3, [pc, #240]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001512:	781b      	ldrb	r3, [r3, #0]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d01b      	beq.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x5c>
 8001518:	4b3b      	ldr	r3, [pc, #236]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800151a:	781b      	ldrb	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	d017      	beq.n	8001550 <HAL_TIM_PeriodElapsedCallback+0x5c>
			// Turn on Button Light
			if (current_menu != settings_menu) enable_all_buttons();
 8001520:	4b3a      	ldr	r3, [pc, #232]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001522:	781b      	ldrb	r3, [r3, #0]
 8001524:	2b01      	cmp	r3, #1
 8001526:	d001      	beq.n	800152c <HAL_TIM_PeriodElapsedCallback+0x38>
 8001528:	f7ff f89e 	bl	8000668 <enable_all_buttons>
			disable_button(button);
 800152c:	4b35      	ldr	r3, [pc, #212]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	4618      	mov	r0, r3
 8001532:	f7ff f839 	bl	80005a8 <disable_button>
			// Invert display
			update_buttons();
 8001536:	f7ff f8ad 	bl	8000694 <update_buttons>

			last_pressed = button;
 800153a:	4b32      	ldr	r3, [pc, #200]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800153c:	781a      	ldrb	r2, [r3, #0]
 800153e:	4b34      	ldr	r3, [pc, #208]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001540:	701a      	strb	r2, [r3, #0]
			released = 0;
 8001542:	4b31      	ldr	r3, [pc, #196]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001544:	2200      	movs	r2, #0
 8001546:	701a      	strb	r2, [r3, #0]
			i = 0; // Reset counter
 8001548:	4b32      	ldr	r3, [pc, #200]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800154a:	2200      	movs	r2, #0
 800154c:	701a      	strb	r2, [r3, #0]
				// clear the last pressed button and stop flashing
				last_pressed = 0;
			}
		}
	}
}
 800154e:	e053      	b.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x104>
		} else if (!button && last_pressed) {
 8001550:	4b2c      	ldr	r3, [pc, #176]	; (8001604 <HAL_TIM_PeriodElapsedCallback+0x110>)
 8001552:	781b      	ldrb	r3, [r3, #0]
 8001554:	2b00      	cmp	r3, #0
 8001556:	d14f      	bne.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001558:	4b2d      	ldr	r3, [pc, #180]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800155a:	781b      	ldrb	r3, [r3, #0]
 800155c:	2b00      	cmp	r3, #0
 800155e:	d04b      	beq.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x104>
			released = 1;
 8001560:	4b29      	ldr	r3, [pc, #164]	; (8001608 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8001562:	2201      	movs	r2, #1
 8001564:	701a      	strb	r2, [r3, #0]
			++i;
 8001566:	4b2b      	ldr	r3, [pc, #172]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001568:	781b      	ldrb	r3, [r3, #0]
 800156a:	3301      	adds	r3, #1
 800156c:	b2da      	uxtb	r2, r3
 800156e:	4b29      	ldr	r3, [pc, #164]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001570:	701a      	strb	r2, [r3, #0]
			if (!(i % 4)) {
 8001572:	4b28      	ldr	r3, [pc, #160]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001574:	781b      	ldrb	r3, [r3, #0]
 8001576:	f003 0303 	and.w	r3, r3, #3
 800157a:	b2db      	uxtb	r3, r3
 800157c:	2b00      	cmp	r3, #0
 800157e:	d117      	bne.n	80015b0 <HAL_TIM_PeriodElapsedCallback+0xbc>
				if ((current_menu != settings_menu) || (last_pressed == 1 || last_pressed == 2 || last_pressed == 9))
 8001580:	4b22      	ldr	r3, [pc, #136]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b01      	cmp	r3, #1
 8001586:	d10b      	bne.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001588:	4b21      	ldr	r3, [pc, #132]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	2b01      	cmp	r3, #1
 800158e:	d007      	beq.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001590:	4b1f      	ldr	r3, [pc, #124]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001592:	781b      	ldrb	r3, [r3, #0]
 8001594:	2b02      	cmp	r3, #2
 8001596:	d003      	beq.n	80015a0 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001598:	4b1d      	ldr	r3, [pc, #116]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800159a:	781b      	ldrb	r3, [r3, #0]
 800159c:	2b09      	cmp	r3, #9
 800159e:	d104      	bne.n	80015aa <HAL_TIM_PeriodElapsedCallback+0xb6>
					toggle_button(last_pressed);
 80015a0:	4b1b      	ldr	r3, [pc, #108]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80015a2:	781b      	ldrb	r3, [r3, #0]
 80015a4:	4618      	mov	r0, r3
 80015a6:	f7ff f82f 	bl	8000608 <toggle_button>
				update_buttons();
 80015aa:	f7ff f873 	bl	8000694 <update_buttons>
}
 80015ae:	e023      	b.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x104>
			else if (i > BUTTON_FLASH_DURATION / 50) {
 80015b0:	4b18      	ldr	r3, [pc, #96]	; (8001614 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80015b2:	781b      	ldrb	r3, [r3, #0]
 80015b4:	2b0c      	cmp	r3, #12
 80015b6:	d91f      	bls.n	80015f8 <HAL_TIM_PeriodElapsedCallback+0x104>
				if (current_menu != settings_menu || last_pressed == 1 || last_pressed == 2 || last_pressed == 9)
 80015b8:	4b14      	ldr	r3, [pc, #80]	; (800160c <HAL_TIM_PeriodElapsedCallback+0x118>)
 80015ba:	781b      	ldrb	r3, [r3, #0]
 80015bc:	2b01      	cmp	r3, #1
 80015be:	d10b      	bne.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80015c0:	4b13      	ldr	r3, [pc, #76]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80015c2:	781b      	ldrb	r3, [r3, #0]
 80015c4:	2b01      	cmp	r3, #1
 80015c6:	d007      	beq.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80015c8:	4b11      	ldr	r3, [pc, #68]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80015ca:	781b      	ldrb	r3, [r3, #0]
 80015cc:	2b02      	cmp	r3, #2
 80015ce:	d003      	beq.n	80015d8 <HAL_TIM_PeriodElapsedCallback+0xe4>
 80015d0:	4b0f      	ldr	r3, [pc, #60]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80015d2:	781b      	ldrb	r3, [r3, #0]
 80015d4:	2b09      	cmp	r3, #9
 80015d6:	d105      	bne.n	80015e4 <HAL_TIM_PeriodElapsedCallback+0xf0>
					enable_button(last_pressed);
 80015d8:	4b0d      	ldr	r3, [pc, #52]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80015da:	781b      	ldrb	r3, [r3, #0]
 80015dc:	4618      	mov	r0, r3
 80015de:	f7fe ffb1 	bl	8000544 <enable_button>
 80015e2:	e004      	b.n	80015ee <HAL_TIM_PeriodElapsedCallback+0xfa>
				else disable_button(last_pressed);
 80015e4:	4b0a      	ldr	r3, [pc, #40]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	4618      	mov	r0, r3
 80015ea:	f7fe ffdd 	bl	80005a8 <disable_button>
				update_buttons();
 80015ee:	f7ff f851 	bl	8000694 <update_buttons>
				last_pressed = 0;
 80015f2:	4b07      	ldr	r3, [pc, #28]	; (8001610 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	701a      	strb	r2, [r3, #0]
}
 80015f8:	bf00      	nop
 80015fa:	3708      	adds	r7, #8
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	20001684 	.word	0x20001684
 8001604:	20001711 	.word	0x20001711
 8001608:	20000010 	.word	0x20000010
 800160c:	20001710 	.word	0x20001710
 8001610:	2000d208 	.word	0x2000d208
 8001614:	2000d209 	.word	0x2000d209

08001618 <HAL_UART_RxCpltCallback>:
// Callback, recieved complete set of data from PC
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	6078      	str	r0, [r7, #4]
	// Ensure this only runs for UART 1
	if (huart != &huart1) return;
 8001620:	687b      	ldr	r3, [r7, #4]
 8001622:	4a22      	ldr	r2, [pc, #136]	; (80016ac <HAL_UART_RxCpltCallback+0x94>)
 8001624:	4293      	cmp	r3, r2
 8001626:	d13c      	bne.n	80016a2 <HAL_UART_RxCpltCallback+0x8a>

	// Sync with the PC
    if (!sync) {
 8001628:	4b21      	ldr	r3, [pc, #132]	; (80016b0 <HAL_UART_RxCpltCallback+0x98>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10e      	bne.n	800164e <HAL_UART_RxCpltCallback+0x36>
    	sync = 1;
 8001630:	4b1f      	ldr	r3, [pc, #124]	; (80016b0 <HAL_UART_RxCpltCallback+0x98>)
 8001632:	2201      	movs	r2, #1
 8001634:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(huart, UART1_rxBuffer, 1, 100);
 8001636:	2364      	movs	r3, #100	; 0x64
 8001638:	2201      	movs	r2, #1
 800163a:	491e      	ldr	r1, [pc, #120]	; (80016b4 <HAL_UART_RxCpltCallback+0x9c>)
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f005 f80e 	bl	800665e <HAL_UART_Transmit>
    	HAL_UART_Receive_IT(huart, UART1_rxBuffer, 4);
 8001642:	2204      	movs	r2, #4
 8001644:	491b      	ldr	r1, [pc, #108]	; (80016b4 <HAL_UART_RxCpltCallback+0x9c>)
 8001646:	6878      	ldr	r0, [r7, #4]
 8001648:	f005 f89b 	bl	8006782 <HAL_UART_Receive_IT>
    	return;
 800164c:	e02a      	b.n	80016a4 <HAL_UART_RxCpltCallback+0x8c>
    }

    UART1_rxBuffer[5] = '\0';
 800164e:	4b19      	ldr	r3, [pc, #100]	; (80016b4 <HAL_UART_RxCpltCallback+0x9c>)
 8001650:	2200      	movs	r2, #0
 8001652:	715a      	strb	r2, [r3, #5]

    if (!strcmp((char*)UART1_rxBuffer,"quit")) {
 8001654:	4918      	ldr	r1, [pc, #96]	; (80016b8 <HAL_UART_RxCpltCallback+0xa0>)
 8001656:	4817      	ldr	r0, [pc, #92]	; (80016b4 <HAL_UART_RxCpltCallback+0x9c>)
 8001658:	f7fe fdbc 	bl	80001d4 <strcmp>
 800165c:	4603      	mov	r3, r0
 800165e:	2b00      	cmp	r3, #0
 8001660:	d108      	bne.n	8001674 <HAL_UART_RxCpltCallback+0x5c>
    	sync = 0;
 8001662:	4b13      	ldr	r3, [pc, #76]	; (80016b0 <HAL_UART_RxCpltCallback+0x98>)
 8001664:	2200      	movs	r2, #0
 8001666:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 8001668:	2201      	movs	r2, #1
 800166a:	4912      	ldr	r1, [pc, #72]	; (80016b4 <HAL_UART_RxCpltCallback+0x9c>)
 800166c:	480f      	ldr	r0, [pc, #60]	; (80016ac <HAL_UART_RxCpltCallback+0x94>)
 800166e:	f005 f888 	bl	8006782 <HAL_UART_Receive_IT>
    	return;
 8001672:	e017      	b.n	80016a4 <HAL_UART_RxCpltCallback+0x8c>
    } else if (!strcmp((char*)UART1_rxBuffer,"econ")) {
 8001674:	4911      	ldr	r1, [pc, #68]	; (80016bc <HAL_UART_RxCpltCallback+0xa4>)
 8001676:	480f      	ldr	r0, [pc, #60]	; (80016b4 <HAL_UART_RxCpltCallback+0x9c>)
 8001678:	f7fe fdac 	bl	80001d4 <strcmp>
 800167c:	4603      	mov	r3, r0
 800167e:	2b00      	cmp	r3, #0
 8001680:	d009      	beq.n	8001696 <HAL_UART_RxCpltCallback+0x7e>
    	// If the host wants to export, client needs to import
    	//import_configuration();
    } else if (!strcmp((char*)UART1_rxBuffer,"icon")) {
 8001682:	490f      	ldr	r1, [pc, #60]	; (80016c0 <HAL_UART_RxCpltCallback+0xa8>)
 8001684:	480b      	ldr	r0, [pc, #44]	; (80016b4 <HAL_UART_RxCpltCallback+0x9c>)
 8001686:	f7fe fda5 	bl	80001d4 <strcmp>
 800168a:	4603      	mov	r3, r0
 800168c:	2b00      	cmp	r3, #0
 800168e:	d102      	bne.n	8001696 <HAL_UART_RxCpltCallback+0x7e>
    	// If the host wants to import, client needs to export
    	export_configuration(&controller);
 8001690:	480c      	ldr	r0, [pc, #48]	; (80016c4 <HAL_UART_RxCpltCallback+0xac>)
 8001692:	f7ff fa2f 	bl	8000af4 <export_configuration>
    }

    HAL_UART_Receive_IT(huart, UART1_rxBuffer, 4);
 8001696:	2204      	movs	r2, #4
 8001698:	4906      	ldr	r1, [pc, #24]	; (80016b4 <HAL_UART_RxCpltCallback+0x9c>)
 800169a:	6878      	ldr	r0, [r7, #4]
 800169c:	f005 f871 	bl	8006782 <HAL_UART_Receive_IT>
 80016a0:	e000      	b.n	80016a4 <HAL_UART_RxCpltCallback+0x8c>
	if (huart != &huart1) return;
 80016a2:	bf00      	nop
}
 80016a4:	3708      	adds	r7, #8
 80016a6:	46bd      	mov	sp, r7
 80016a8:	bd80      	pop	{r7, pc}
 80016aa:	bf00      	nop
 80016ac:	200016cc 	.word	0x200016cc
 80016b0:	2000d180 	.word	0x2000d180
 80016b4:	2000b180 	.word	0x2000b180
 80016b8:	08007828 	.word	0x08007828
 80016bc:	08007830 	.word	0x08007830
 80016c0:	08007838 	.word	0x08007838
 80016c4:	20001714 	.word	0x20001714

080016c8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80016c8:	b480      	push	{r7}
 80016ca:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80016cc:	b672      	cpsid	i
}
 80016ce:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80016d0:	e7fe      	b.n	80016d0 <Error_Handler+0x8>
	...

080016d4 <display_menu>:
extern Controller controller;

// Store Menu Commands
static char menu_commands[9][11];

void display_menu(Menu menu, uint8_t page, uint8_t device) {
 80016d4:	b590      	push	{r4, r7, lr}
 80016d6:	b085      	sub	sp, #20
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	71fb      	strb	r3, [r7, #7]
 80016de:	460b      	mov	r3, r1
 80016e0:	71bb      	strb	r3, [r7, #6]
 80016e2:	4613      	mov	r3, r2
 80016e4:	717b      	strb	r3, [r7, #5]
	if (!page) return;
 80016e6:	79bb      	ldrb	r3, [r7, #6]
 80016e8:	2b00      	cmp	r3, #0
 80016ea:	f000 80d1 	beq.w	8001890 <display_menu+0x1bc>
	current_menu = menu;
 80016ee:	4a6b      	ldr	r2, [pc, #428]	; (800189c <display_menu+0x1c8>)
 80016f0:	79fb      	ldrb	r3, [r7, #7]
 80016f2:	7013      	strb	r3, [r2, #0]
	current_page = page;
 80016f4:	4a6a      	ldr	r2, [pc, #424]	; (80018a0 <display_menu+0x1cc>)
 80016f6:	79bb      	ldrb	r3, [r7, #6]
 80016f8:	7013      	strb	r3, [r2, #0]
	switch(menu) {
 80016fa:	79fb      	ldrb	r3, [r7, #7]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d06c      	beq.n	80017da <display_menu+0x106>
 8001700:	2b02      	cmp	r3, #2
 8001702:	f300 80a8 	bgt.w	8001856 <display_menu+0x182>
 8001706:	2b00      	cmp	r3, #0
 8001708:	d002      	beq.n	8001710 <display_menu+0x3c>
 800170a:	2b01      	cmp	r3, #1
 800170c:	d03d      	beq.n	800178a <display_menu+0xb6>
 800170e:	e0a2      	b.n	8001856 <display_menu+0x182>
	case main_menu:
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001710:	79bb      	ldrb	r3, [r7, #6]
 8001712:	2b03      	cmp	r3, #3
 8001714:	f200 80be 	bhi.w	8001894 <display_menu+0x1c0>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 8001718:	2300      	movs	r3, #0
 800171a:	73fb      	strb	r3, [r7, #15]
 800171c:	e01e      	b.n	800175c <display_menu+0x88>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 800171e:	7bfa      	ldrb	r2, [r7, #15]
 8001720:	4613      	mov	r3, r2
 8001722:	009b      	lsls	r3, r3, #2
 8001724:	4413      	add	r3, r2
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	4413      	add	r3, r2
 800172a:	4a5e      	ldr	r2, [pc, #376]	; (80018a4 <display_menu+0x1d0>)
 800172c:	1898      	adds	r0, r3, r2
 800172e:	7bf9      	ldrb	r1, [r7, #15]
 8001730:	4b5b      	ldr	r3, [pc, #364]	; (80018a0 <display_menu+0x1cc>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	1e5a      	subs	r2, r3, #1
 8001736:	4613      	mov	r3, r2
 8001738:	005b      	lsls	r3, r3, #1
 800173a:	4413      	add	r3, r2
 800173c:	005b      	lsls	r3, r3, #1
 800173e:	440b      	add	r3, r1
 8001740:	f640 0294 	movw	r2, #2196	; 0x894
 8001744:	fb02 f303 	mul.w	r3, r2, r3
 8001748:	f603 0388 	addw	r3, r3, #2184	; 0x888
 800174c:	4a56      	ldr	r2, [pc, #344]	; (80018a8 <display_menu+0x1d4>)
 800174e:	4413      	add	r3, r2
 8001750:	4619      	mov	r1, r3
 8001752:	f006 f804 	bl	800775e <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001756:	7bfb      	ldrb	r3, [r7, #15]
 8001758:	3301      	adds	r3, #1
 800175a:	73fb      	strb	r3, [r7, #15]
 800175c:	7bfb      	ldrb	r3, [r7, #15]
 800175e:	2b05      	cmp	r3, #5
 8001760:	d9dd      	bls.n	800171e <display_menu+0x4a>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 8001762:	4a52      	ldr	r2, [pc, #328]	; (80018ac <display_menu+0x1d8>)
 8001764:	4b52      	ldr	r3, [pc, #328]	; (80018b0 <display_menu+0x1dc>)
 8001766:	cb03      	ldmia	r3!, {r0, r1}
 8001768:	6010      	str	r0, [r2, #0]
 800176a:	6051      	str	r1, [r2, #4]
 800176c:	881b      	ldrh	r3, [r3, #0]
 800176e:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Settings");
 8001770:	4a50      	ldr	r2, [pc, #320]	; (80018b4 <display_menu+0x1e0>)
 8001772:	4b51      	ldr	r3, [pc, #324]	; (80018b8 <display_menu+0x1e4>)
 8001774:	cb03      	ldmia	r3!, {r0, r1}
 8001776:	6010      	str	r0, [r2, #0]
 8001778:	6051      	str	r1, [r2, #4]
 800177a:	781b      	ldrb	r3, [r3, #0]
 800177c:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 800177e:	4b4f      	ldr	r3, [pc, #316]	; (80018bc <display_menu+0x1e8>)
 8001780:	4a4f      	ldr	r2, [pc, #316]	; (80018c0 <display_menu+0x1ec>)
 8001782:	ca07      	ldmia	r2, {r0, r1, r2}
 8001784:	c303      	stmia	r3!, {r0, r1}
 8001786:	801a      	strh	r2, [r3, #0]
		break;
 8001788:	e065      	b.n	8001856 <display_menu+0x182>
	case settings_menu:
		strcpy(menu_commands[0], "PC Connect");
 800178a:	4b46      	ldr	r3, [pc, #280]	; (80018a4 <display_menu+0x1d0>)
 800178c:	4a4d      	ldr	r2, [pc, #308]	; (80018c4 <display_menu+0x1f0>)
 800178e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001790:	c303      	stmia	r3!, {r0, r1}
 8001792:	801a      	strh	r2, [r3, #0]
 8001794:	3302      	adds	r3, #2
 8001796:	0c12      	lsrs	r2, r2, #16
 8001798:	701a      	strb	r2, [r3, #0]
		strcpy(menu_commands[1], "Learn Cmd");
 800179a:	4a4b      	ldr	r2, [pc, #300]	; (80018c8 <display_menu+0x1f4>)
 800179c:	4b4b      	ldr	r3, [pc, #300]	; (80018cc <display_menu+0x1f8>)
 800179e:	cb03      	ldmia	r3!, {r0, r1}
 80017a0:	6010      	str	r0, [r2, #0]
 80017a2:	6051      	str	r1, [r2, #4]
 80017a4:	881b      	ldrh	r3, [r3, #0]
 80017a6:	8113      	strh	r3, [r2, #8]
		for (uint8_t i = 2; i <= 7; ++i) {
 80017a8:	2302      	movs	r3, #2
 80017aa:	73bb      	strb	r3, [r7, #14]
 80017ac:	e00c      	b.n	80017c8 <display_menu+0xf4>
			menu_commands[i][0] = '\0';
 80017ae:	7bba      	ldrb	r2, [r7, #14]
 80017b0:	493c      	ldr	r1, [pc, #240]	; (80018a4 <display_menu+0x1d0>)
 80017b2:	4613      	mov	r3, r2
 80017b4:	009b      	lsls	r3, r3, #2
 80017b6:	4413      	add	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	440b      	add	r3, r1
 80017be:	2200      	movs	r2, #0
 80017c0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 2; i <= 7; ++i) {
 80017c2:	7bbb      	ldrb	r3, [r7, #14]
 80017c4:	3301      	adds	r3, #1
 80017c6:	73bb      	strb	r3, [r7, #14]
 80017c8:	7bbb      	ldrb	r3, [r7, #14]
 80017ca:	2b07      	cmp	r3, #7
 80017cc:	d9ef      	bls.n	80017ae <display_menu+0xda>
		}
		strcpy(menu_commands[8], "Main Menu");
 80017ce:	4b3b      	ldr	r3, [pc, #236]	; (80018bc <display_menu+0x1e8>)
 80017d0:	4a3f      	ldr	r2, [pc, #252]	; (80018d0 <display_menu+0x1fc>)
 80017d2:	ca07      	ldmia	r2, {r0, r1, r2}
 80017d4:	c303      	stmia	r3!, {r0, r1}
 80017d6:	801a      	strh	r2, [r3, #0]
		break;
 80017d8:	e03d      	b.n	8001856 <display_menu+0x182>
	case device_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 80017da:	2300      	movs	r3, #0
 80017dc:	737b      	strb	r3, [r7, #13]
 80017de:	e023      	b.n	8001828 <display_menu+0x154>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 80017e0:	7b7a      	ldrb	r2, [r7, #13]
 80017e2:	4613      	mov	r3, r2
 80017e4:	009b      	lsls	r3, r3, #2
 80017e6:	4413      	add	r3, r2
 80017e8:	005b      	lsls	r3, r3, #1
 80017ea:	4413      	add	r3, r2
 80017ec:	4a2d      	ldr	r2, [pc, #180]	; (80018a4 <display_menu+0x1d0>)
 80017ee:	189c      	adds	r4, r3, r2
 80017f0:	7979      	ldrb	r1, [r7, #5]
 80017f2:	7b78      	ldrb	r0, [r7, #13]
 80017f4:	4b2a      	ldr	r3, [pc, #168]	; (80018a0 <display_menu+0x1cc>)
 80017f6:	781b      	ldrb	r3, [r3, #0]
 80017f8:	1e5a      	subs	r2, r3, #1
 80017fa:	4613      	mov	r3, r2
 80017fc:	005b      	lsls	r3, r3, #1
 80017fe:	4413      	add	r3, r2
 8001800:	005b      	lsls	r3, r3, #1
 8001802:	4403      	add	r3, r0
 8001804:	225b      	movs	r2, #91	; 0x5b
 8001806:	fb03 f202 	mul.w	r2, r3, r2
 800180a:	f640 0394 	movw	r3, #2196	; 0x894
 800180e:	fb01 f303 	mul.w	r3, r1, r3
 8001812:	4413      	add	r3, r2
 8001814:	3350      	adds	r3, #80	; 0x50
 8001816:	4a24      	ldr	r2, [pc, #144]	; (80018a8 <display_menu+0x1d4>)
 8001818:	4413      	add	r3, r2
 800181a:	4619      	mov	r1, r3
 800181c:	4620      	mov	r0, r4
 800181e:	f005 ff9e 	bl	800775e <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001822:	7b7b      	ldrb	r3, [r7, #13]
 8001824:	3301      	adds	r3, #1
 8001826:	737b      	strb	r3, [r7, #13]
 8001828:	7b7b      	ldrb	r3, [r7, #13]
 800182a:	2b05      	cmp	r3, #5
 800182c:	d9d8      	bls.n	80017e0 <display_menu+0x10c>
		}
		strcpy(menu_commands[6], "Prev Page");
 800182e:	4a1f      	ldr	r2, [pc, #124]	; (80018ac <display_menu+0x1d8>)
 8001830:	4b1f      	ldr	r3, [pc, #124]	; (80018b0 <display_menu+0x1dc>)
 8001832:	cb03      	ldmia	r3!, {r0, r1}
 8001834:	6010      	str	r0, [r2, #0]
 8001836:	6051      	str	r1, [r2, #4]
 8001838:	881b      	ldrh	r3, [r3, #0]
 800183a:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Main Menu");
 800183c:	4a1d      	ldr	r2, [pc, #116]	; (80018b4 <display_menu+0x1e0>)
 800183e:	4b24      	ldr	r3, [pc, #144]	; (80018d0 <display_menu+0x1fc>)
 8001840:	cb03      	ldmia	r3!, {r0, r1}
 8001842:	6010      	str	r0, [r2, #0]
 8001844:	6051      	str	r1, [r2, #4]
 8001846:	881b      	ldrh	r3, [r3, #0]
 8001848:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 800184a:	4b1c      	ldr	r3, [pc, #112]	; (80018bc <display_menu+0x1e8>)
 800184c:	4a1c      	ldr	r2, [pc, #112]	; (80018c0 <display_menu+0x1ec>)
 800184e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001850:	c303      	stmia	r3!, {r0, r1}
 8001852:	801a      	strh	r2, [r3, #0]
		break;
 8001854:	bf00      	nop
	}
	for (uint8_t i = 1; i <= 9; ++i) {
 8001856:	2301      	movs	r3, #1
 8001858:	733b      	strb	r3, [r7, #12]
 800185a:	e015      	b.n	8001888 <display_menu+0x1b4>
		erase_buffer();
 800185c:	f000 fb1e 	bl	8001e9c <erase_buffer>
		draw_string(menu_commands[i-1], white);
 8001860:	7b3b      	ldrb	r3, [r7, #12]
 8001862:	1e5a      	subs	r2, r3, #1
 8001864:	4613      	mov	r3, r2
 8001866:	009b      	lsls	r3, r3, #2
 8001868:	4413      	add	r3, r2
 800186a:	005b      	lsls	r3, r3, #1
 800186c:	4413      	add	r3, r2
 800186e:	4a0d      	ldr	r2, [pc, #52]	; (80018a4 <display_menu+0x1d0>)
 8001870:	4413      	add	r3, r2
 8001872:	2101      	movs	r1, #1
 8001874:	4618      	mov	r0, r3
 8001876:	f000 fc16 	bl	80020a6 <draw_string>
		update_display(i);
 800187a:	7b3b      	ldrb	r3, [r7, #12]
 800187c:	4618      	mov	r0, r3
 800187e:	f000 fa19 	bl	8001cb4 <update_display>
	for (uint8_t i = 1; i <= 9; ++i) {
 8001882:	7b3b      	ldrb	r3, [r7, #12]
 8001884:	3301      	adds	r3, #1
 8001886:	733b      	strb	r3, [r7, #12]
 8001888:	7b3b      	ldrb	r3, [r7, #12]
 800188a:	2b09      	cmp	r3, #9
 800188c:	d9e6      	bls.n	800185c <display_menu+0x188>
 800188e:	e002      	b.n	8001896 <display_menu+0x1c2>
	if (!page) return;
 8001890:	bf00      	nop
 8001892:	e000      	b.n	8001896 <display_menu+0x1c2>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001894:	bf00      	nop
	}
}
 8001896:	3714      	adds	r7, #20
 8001898:	46bd      	mov	sp, r7
 800189a:	bd90      	pop	{r4, r7, pc}
 800189c:	20001710 	.word	0x20001710
 80018a0:	2000d20a 	.word	0x2000d20a
 80018a4:	2000d20c 	.word	0x2000d20c
 80018a8:	20001714 	.word	0x20001714
 80018ac:	2000d24e 	.word	0x2000d24e
 80018b0:	08007840 	.word	0x08007840
 80018b4:	2000d259 	.word	0x2000d259
 80018b8:	0800784c 	.word	0x0800784c
 80018bc:	2000d264 	.word	0x2000d264
 80018c0:	08007858 	.word	0x08007858
 80018c4:	08007864 	.word	0x08007864
 80018c8:	2000d217 	.word	0x2000d217
 80018cc:	08007870 	.word	0x08007870
 80018d0:	0800787c 	.word	0x0800787c

080018d4 <button_pressed>:

void button_pressed(uint8_t button) {
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	71fb      	strb	r3, [r7, #7]
	static uint8_t in_device_menu = 0;
	if (!button || button > 9) return;
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	f000 80d7 	beq.w	8001a94 <button_pressed+0x1c0>
 80018e6:	79fb      	ldrb	r3, [r7, #7]
 80018e8:	2b09      	cmp	r3, #9
 80018ea:	f200 80d3 	bhi.w	8001a94 <button_pressed+0x1c0>

	switch(current_menu) {
 80018ee:	4b6c      	ldr	r3, [pc, #432]	; (8001aa0 <button_pressed+0x1cc>)
 80018f0:	781b      	ldrb	r3, [r3, #0]
 80018f2:	2b02      	cmp	r3, #2
 80018f4:	d075      	beq.n	80019e2 <button_pressed+0x10e>
 80018f6:	2b02      	cmp	r3, #2
 80018f8:	f300 80ce 	bgt.w	8001a98 <button_pressed+0x1c4>
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d002      	beq.n	8001906 <button_pressed+0x32>
 8001900:	2b01      	cmp	r3, #1
 8001902:	d055      	beq.n	80019b0 <button_pressed+0xdc>
			break;
		}
		in_device_menu = 1;
		break;
	default:
		break;
 8001904:	e0c8      	b.n	8001a98 <button_pressed+0x1c4>
		switch(button) {
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b09      	cmp	r3, #9
 800190a:	d02b      	beq.n	8001964 <button_pressed+0x90>
 800190c:	2b09      	cmp	r3, #9
 800190e:	dc39      	bgt.n	8001984 <button_pressed+0xb0>
 8001910:	2b07      	cmp	r3, #7
 8001912:	d002      	beq.n	800191a <button_pressed+0x46>
 8001914:	2b08      	cmp	r3, #8
 8001916:	d010      	beq.n	800193a <button_pressed+0x66>
 8001918:	e034      	b.n	8001984 <button_pressed+0xb0>
			display_menu(main_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 800191a:	4b62      	ldr	r3, [pc, #392]	; (8001aa4 <button_pressed+0x1d0>)
 800191c:	781b      	ldrb	r3, [r3, #0]
 800191e:	2b01      	cmp	r3, #1
 8001920:	d004      	beq.n	800192c <button_pressed+0x58>
 8001922:	4b60      	ldr	r3, [pc, #384]	; (8001aa4 <button_pressed+0x1d0>)
 8001924:	781b      	ldrb	r3, [r3, #0]
 8001926:	3b01      	subs	r3, #1
 8001928:	b2db      	uxtb	r3, r3
 800192a:	e000      	b.n	800192e <button_pressed+0x5a>
 800192c:	2303      	movs	r3, #3
 800192e:	2200      	movs	r2, #0
 8001930:	4619      	mov	r1, r3
 8001932:	2000      	movs	r0, #0
 8001934:	f7ff fece 	bl	80016d4 <display_menu>
			break;
 8001938:	e036      	b.n	80019a8 <button_pressed+0xd4>
			display_menu(settings_menu, 1, 0);
 800193a:	2200      	movs	r2, #0
 800193c:	2101      	movs	r1, #1
 800193e:	2001      	movs	r0, #1
 8001940:	f7ff fec8 	bl	80016d4 <display_menu>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001944:	2303      	movs	r3, #3
 8001946:	73fb      	strb	r3, [r7, #15]
 8001948:	e006      	b.n	8001958 <button_pressed+0x84>
				disable_button(i);
 800194a:	7bfb      	ldrb	r3, [r7, #15]
 800194c:	4618      	mov	r0, r3
 800194e:	f7fe fe2b 	bl	80005a8 <disable_button>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001952:	7bfb      	ldrb	r3, [r7, #15]
 8001954:	3301      	adds	r3, #1
 8001956:	73fb      	strb	r3, [r7, #15]
 8001958:	7bfb      	ldrb	r3, [r7, #15]
 800195a:	2b08      	cmp	r3, #8
 800195c:	d9f5      	bls.n	800194a <button_pressed+0x76>
			update_buttons();
 800195e:	f7fe fe99 	bl	8000694 <update_buttons>
			break;
 8001962:	e021      	b.n	80019a8 <button_pressed+0xd4>
			display_menu(main_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 8001964:	4b4f      	ldr	r3, [pc, #316]	; (8001aa4 <button_pressed+0x1d0>)
 8001966:	781b      	ldrb	r3, [r3, #0]
 8001968:	2b03      	cmp	r3, #3
 800196a:	d004      	beq.n	8001976 <button_pressed+0xa2>
 800196c:	4b4d      	ldr	r3, [pc, #308]	; (8001aa4 <button_pressed+0x1d0>)
 800196e:	781b      	ldrb	r3, [r3, #0]
 8001970:	3301      	adds	r3, #1
 8001972:	b2db      	uxtb	r3, r3
 8001974:	e000      	b.n	8001978 <button_pressed+0xa4>
 8001976:	2301      	movs	r3, #1
 8001978:	2200      	movs	r2, #0
 800197a:	4619      	mov	r1, r3
 800197c:	2000      	movs	r0, #0
 800197e:	f7ff fea9 	bl	80016d4 <display_menu>
			break;
 8001982:	e011      	b.n	80019a8 <button_pressed+0xd4>
			display_menu(device_menu, 1, button + (6 * (current_page - 1)));
 8001984:	4b47      	ldr	r3, [pc, #284]	; (8001aa4 <button_pressed+0x1d0>)
 8001986:	781b      	ldrb	r3, [r3, #0]
 8001988:	461a      	mov	r2, r3
 800198a:	0052      	lsls	r2, r2, #1
 800198c:	4413      	add	r3, r2
 800198e:	005b      	lsls	r3, r3, #1
 8001990:	b2da      	uxtb	r2, r3
 8001992:	79fb      	ldrb	r3, [r7, #7]
 8001994:	4413      	add	r3, r2
 8001996:	b2db      	uxtb	r3, r3
 8001998:	3b06      	subs	r3, #6
 800199a:	b2db      	uxtb	r3, r3
 800199c:	461a      	mov	r2, r3
 800199e:	2101      	movs	r1, #1
 80019a0:	2002      	movs	r0, #2
 80019a2:	f7ff fe97 	bl	80016d4 <display_menu>
			break;
 80019a6:	bf00      	nop
		in_device_menu = 0;
 80019a8:	4b3f      	ldr	r3, [pc, #252]	; (8001aa8 <button_pressed+0x1d4>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	701a      	strb	r2, [r3, #0]
		break;
 80019ae:	e074      	b.n	8001a9a <button_pressed+0x1c6>
		switch(button) {
 80019b0:	79fb      	ldrb	r3, [r7, #7]
 80019b2:	2b09      	cmp	r3, #9
 80019b4:	d008      	beq.n	80019c8 <button_pressed+0xf4>
 80019b6:	2b09      	cmp	r3, #9
 80019b8:	dc0e      	bgt.n	80019d8 <button_pressed+0x104>
 80019ba:	2b01      	cmp	r3, #1
 80019bc:	d001      	beq.n	80019c2 <button_pressed+0xee>
 80019be:	2b02      	cmp	r3, #2
			break;
 80019c0:	e00b      	b.n	80019da <button_pressed+0x106>
			init_xbee_communication();
 80019c2:	f7fe ff81 	bl	80008c8 <init_xbee_communication>
			break;
 80019c6:	e008      	b.n	80019da <button_pressed+0x106>
			display_menu(main_menu, 1, 0);
 80019c8:	2200      	movs	r2, #0
 80019ca:	2101      	movs	r1, #1
 80019cc:	2000      	movs	r0, #0
 80019ce:	f7ff fe81 	bl	80016d4 <display_menu>
			enable_all_buttons();
 80019d2:	f7fe fe49 	bl	8000668 <enable_all_buttons>
			break;
 80019d6:	e000      	b.n	80019da <button_pressed+0x106>
			break;
 80019d8:	bf00      	nop
		in_device_menu = 0;
 80019da:	4b33      	ldr	r3, [pc, #204]	; (8001aa8 <button_pressed+0x1d4>)
 80019dc:	2200      	movs	r2, #0
 80019de:	701a      	strb	r2, [r3, #0]
		break;
 80019e0:	e05b      	b.n	8001a9a <button_pressed+0x1c6>
		switch(button) {
 80019e2:	79fb      	ldrb	r3, [r7, #7]
 80019e4:	2b09      	cmp	r3, #9
 80019e6:	d02e      	beq.n	8001a46 <button_pressed+0x172>
 80019e8:	2b09      	cmp	r3, #9
 80019ea:	dc4e      	bgt.n	8001a8a <button_pressed+0x1b6>
 80019ec:	2b07      	cmp	r3, #7
 80019ee:	d002      	beq.n	80019f6 <button_pressed+0x122>
 80019f0:	2b08      	cmp	r3, #8
 80019f2:	d022      	beq.n	8001a3a <button_pressed+0x166>
			break;
 80019f4:	e049      	b.n	8001a8a <button_pressed+0x1b6>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 80019f6:	4b2b      	ldr	r3, [pc, #172]	; (8001aa4 <button_pressed+0x1d0>)
 80019f8:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80019fa:	2b01      	cmp	r3, #1
 80019fc:	d004      	beq.n	8001a08 <button_pressed+0x134>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 80019fe:	4b29      	ldr	r3, [pc, #164]	; (8001aa4 <button_pressed+0x1d0>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001a02:	3b01      	subs	r3, #1
 8001a04:	b2d9      	uxtb	r1, r3
 8001a06:	e000      	b.n	8001a0a <button_pressed+0x136>
 8001a08:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001a0a:	4b27      	ldr	r3, [pc, #156]	; (8001aa8 <button_pressed+0x1d4>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d10c      	bne.n	8001a2c <button_pressed+0x158>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001a12:	4b24      	ldr	r3, [pc, #144]	; (8001aa4 <button_pressed+0x1d0>)
 8001a14:	781b      	ldrb	r3, [r3, #0]
 8001a16:	461a      	mov	r2, r3
 8001a18:	0052      	lsls	r2, r2, #1
 8001a1a:	4413      	add	r3, r2
 8001a1c:	005b      	lsls	r3, r3, #1
 8001a1e:	b2da      	uxtb	r2, r3
 8001a20:	79fb      	ldrb	r3, [r7, #7]
 8001a22:	4413      	add	r3, r2
 8001a24:	b2db      	uxtb	r3, r3
			display_menu(
 8001a26:	3b06      	subs	r3, #6
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	e001      	b.n	8001a30 <button_pressed+0x15c>
 8001a2c:	4b1d      	ldr	r3, [pc, #116]	; (8001aa4 <button_pressed+0x1d0>)
 8001a2e:	781b      	ldrb	r3, [r3, #0]
 8001a30:	461a      	mov	r2, r3
 8001a32:	2002      	movs	r0, #2
 8001a34:	f7ff fe4e 	bl	80016d4 <display_menu>
			break;
 8001a38:	e028      	b.n	8001a8c <button_pressed+0x1b8>
			display_menu(main_menu, 1, 0);
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	2101      	movs	r1, #1
 8001a3e:	2000      	movs	r0, #0
 8001a40:	f7ff fe48 	bl	80016d4 <display_menu>
			break;
 8001a44:	e022      	b.n	8001a8c <button_pressed+0x1b8>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001a46:	4b17      	ldr	r3, [pc, #92]	; (8001aa4 <button_pressed+0x1d0>)
 8001a48:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001a4a:	2b04      	cmp	r3, #4
 8001a4c:	d004      	beq.n	8001a58 <button_pressed+0x184>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <button_pressed+0x1d0>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001a52:	3301      	adds	r3, #1
 8001a54:	b2d9      	uxtb	r1, r3
 8001a56:	e000      	b.n	8001a5a <button_pressed+0x186>
 8001a58:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001a5a:	4b13      	ldr	r3, [pc, #76]	; (8001aa8 <button_pressed+0x1d4>)
 8001a5c:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001a5e:	2b00      	cmp	r3, #0
 8001a60:	d10c      	bne.n	8001a7c <button_pressed+0x1a8>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001a62:	4b10      	ldr	r3, [pc, #64]	; (8001aa4 <button_pressed+0x1d0>)
 8001a64:	781b      	ldrb	r3, [r3, #0]
 8001a66:	461a      	mov	r2, r3
 8001a68:	0052      	lsls	r2, r2, #1
 8001a6a:	4413      	add	r3, r2
 8001a6c:	005b      	lsls	r3, r3, #1
 8001a6e:	b2da      	uxtb	r2, r3
 8001a70:	79fb      	ldrb	r3, [r7, #7]
 8001a72:	4413      	add	r3, r2
 8001a74:	b2db      	uxtb	r3, r3
			display_menu(
 8001a76:	3b06      	subs	r3, #6
 8001a78:	b2db      	uxtb	r3, r3
 8001a7a:	e001      	b.n	8001a80 <button_pressed+0x1ac>
 8001a7c:	4b09      	ldr	r3, [pc, #36]	; (8001aa4 <button_pressed+0x1d0>)
 8001a7e:	781b      	ldrb	r3, [r3, #0]
 8001a80:	461a      	mov	r2, r3
 8001a82:	2002      	movs	r0, #2
 8001a84:	f7ff fe26 	bl	80016d4 <display_menu>
			break;
 8001a88:	e000      	b.n	8001a8c <button_pressed+0x1b8>
			break;
 8001a8a:	bf00      	nop
		in_device_menu = 1;
 8001a8c:	4b06      	ldr	r3, [pc, #24]	; (8001aa8 <button_pressed+0x1d4>)
 8001a8e:	2201      	movs	r2, #1
 8001a90:	701a      	strb	r2, [r3, #0]
		break;
 8001a92:	e002      	b.n	8001a9a <button_pressed+0x1c6>
	if (!button || button > 9) return;
 8001a94:	bf00      	nop
 8001a96:	e000      	b.n	8001a9a <button_pressed+0x1c6>
		break;
 8001a98:	bf00      	nop
	}
}
 8001a9a:	3710      	adds	r7, #16
 8001a9c:	46bd      	mov	sp, r7
 8001a9e:	bd80      	pop	{r7, pc}
 8001aa0:	20001710 	.word	0x20001710
 8001aa4:	2000d20a 	.word	0x2000d20a
 8001aa8:	2000d26f 	.word	0x2000d26f

08001aac <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b084      	sub	sp, #16
 8001ab0:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 8001ab2:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001ab6:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 8001ab8:	1d3a      	adds	r2, r7, #4
 8001aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001abe:	9300      	str	r3, [sp, #0]
 8001ac0:	2302      	movs	r3, #2
 8001ac2:	21a2      	movs	r1, #162	; 0xa2
 8001ac4:	4803      	ldr	r0, [pc, #12]	; (8001ad4 <disable_OLED_EEPROM_writes+0x28>)
 8001ac6:	f001 ff53 	bl	8003970 <HAL_I2C_Master_Transmit>
}
 8001aca:	bf00      	nop
 8001acc:	3708      	adds	r7, #8
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	200014b8 	.word	0x200014b8

08001ad8 <drop_all_CS>:

void drop_all_CS(void) {
 8001ad8:	b580      	push	{r7, lr}
 8001ada:	b082      	sub	sp, #8
 8001adc:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 8001ade:	4b0a      	ldr	r3, [pc, #40]	; (8001b08 <drop_all_CS+0x30>)
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 8001ae4:	4b08      	ldr	r3, [pc, #32]	; (8001b08 <drop_all_CS+0x30>)
 8001ae6:	2200      	movs	r2, #0
 8001ae8:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8001aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001aee:	9300      	str	r3, [sp, #0]
 8001af0:	2303      	movs	r3, #3
 8001af2:	4a05      	ldr	r2, [pc, #20]	; (8001b08 <drop_all_CS+0x30>)
 8001af4:	21a2      	movs	r1, #162	; 0xa2
 8001af6:	4805      	ldr	r0, [pc, #20]	; (8001b0c <drop_all_CS+0x34>)
 8001af8:	f001 ff3a 	bl	8003970 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001afc:	2001      	movs	r0, #1
 8001afe:	f000 fec7 	bl	8002890 <HAL_Delay>
}
 8001b02:	bf00      	nop
 8001b04:	46bd      	mov	sp, r7
 8001b06:	bd80      	pop	{r7, pc}
 8001b08:	20001420 	.word	0x20001420
 8001b0c:	200014b8 	.word	0x200014b8

08001b10 <raise_all_CS>:

void raise_all_CS(void) {
 8001b10:	b580      	push	{r7, lr}
 8001b12:	b082      	sub	sp, #8
 8001b14:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 8001b16:	4b09      	ldr	r3, [pc, #36]	; (8001b3c <raise_all_CS+0x2c>)
 8001b18:	22ff      	movs	r2, #255	; 0xff
 8001b1a:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8001b1c:	4b07      	ldr	r3, [pc, #28]	; (8001b3c <raise_all_CS+0x2c>)
 8001b1e:	2201      	movs	r2, #1
 8001b20:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8001b22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b26:	9300      	str	r3, [sp, #0]
 8001b28:	2303      	movs	r3, #3
 8001b2a:	4a04      	ldr	r2, [pc, #16]	; (8001b3c <raise_all_CS+0x2c>)
 8001b2c:	21a2      	movs	r1, #162	; 0xa2
 8001b2e:	4804      	ldr	r0, [pc, #16]	; (8001b40 <raise_all_CS+0x30>)
 8001b30:	f001 ff1e 	bl	8003970 <HAL_I2C_Master_Transmit>
}
 8001b34:	bf00      	nop
 8001b36:	46bd      	mov	sp, r7
 8001b38:	bd80      	pop	{r7, pc}
 8001b3a:	bf00      	nop
 8001b3c:	20001420 	.word	0x20001420
 8001b40:	200014b8 	.word	0x200014b8

08001b44 <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af02      	add	r7, sp, #8
 8001b4a:	4603      	mov	r3, r0
 8001b4c:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 8001b4e:	4b1a      	ldr	r3, [pc, #104]	; (8001bb8 <drop_CS+0x74>)
 8001b50:	22ff      	movs	r2, #255	; 0xff
 8001b52:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8001b54:	4b18      	ldr	r3, [pc, #96]	; (8001bb8 <drop_CS+0x74>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 8001b5a:	79fb      	ldrb	r3, [r7, #7]
 8001b5c:	2b09      	cmp	r3, #9
 8001b5e:	d107      	bne.n	8001b70 <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 8001b60:	4b15      	ldr	r3, [pc, #84]	; (8001bb8 <drop_CS+0x74>)
 8001b62:	789b      	ldrb	r3, [r3, #2]
 8001b64:	f023 0301 	bic.w	r3, r3, #1
 8001b68:	b2da      	uxtb	r2, r3
 8001b6a:	4b13      	ldr	r3, [pc, #76]	; (8001bb8 <drop_CS+0x74>)
 8001b6c:	709a      	strb	r2, [r3, #2]
 8001b6e:	e012      	b.n	8001b96 <drop_CS+0x52>
	} else if (display <= 8) {
 8001b70:	79fb      	ldrb	r3, [r7, #7]
 8001b72:	2b08      	cmp	r3, #8
 8001b74:	d80f      	bhi.n	8001b96 <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 8001b76:	4b10      	ldr	r3, [pc, #64]	; (8001bb8 <drop_CS+0x74>)
 8001b78:	785b      	ldrb	r3, [r3, #1]
 8001b7a:	b25a      	sxtb	r2, r3
 8001b7c:	79fb      	ldrb	r3, [r7, #7]
 8001b7e:	3b01      	subs	r3, #1
 8001b80:	2101      	movs	r1, #1
 8001b82:	fa01 f303 	lsl.w	r3, r1, r3
 8001b86:	b25b      	sxtb	r3, r3
 8001b88:	43db      	mvns	r3, r3
 8001b8a:	b25b      	sxtb	r3, r3
 8001b8c:	4013      	ands	r3, r2
 8001b8e:	b25b      	sxtb	r3, r3
 8001b90:	b2da      	uxtb	r2, r3
 8001b92:	4b09      	ldr	r3, [pc, #36]	; (8001bb8 <drop_CS+0x74>)
 8001b94:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 8001b96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b9a:	9300      	str	r3, [sp, #0]
 8001b9c:	2303      	movs	r3, #3
 8001b9e:	4a06      	ldr	r2, [pc, #24]	; (8001bb8 <drop_CS+0x74>)
 8001ba0:	21a2      	movs	r1, #162	; 0xa2
 8001ba2:	4806      	ldr	r0, [pc, #24]	; (8001bbc <drop_CS+0x78>)
 8001ba4:	f001 fee4 	bl	8003970 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001ba8:	2001      	movs	r0, #1
 8001baa:	f000 fe71 	bl	8002890 <HAL_Delay>
}
 8001bae:	bf00      	nop
 8001bb0:	3708      	adds	r7, #8
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	20001420 	.word	0x20001420
 8001bbc:	200014b8 	.word	0x200014b8

08001bc0 <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8001bc6:	4b37      	ldr	r3, [pc, #220]	; (8001ca4 <init_displays+0xe4>)
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	4a36      	ldr	r2, [pc, #216]	; (8001ca4 <init_displays+0xe4>)
 8001bcc:	f023 0301 	bic.w	r3, r3, #1
 8001bd0:	6013      	str	r3, [r2, #0]
	disable_OLED_EEPROM_writes();
 8001bd2:	f7ff ff6b 	bl	8001aac <disable_OLED_EEPROM_writes>
	raise_all_CS();
 8001bd6:	f7ff ff9b 	bl	8001b10 <raise_all_CS>
	DC_HIGH();
 8001bda:	2201      	movs	r2, #1
 8001bdc:	2101      	movs	r1, #1
 8001bde:	4832      	ldr	r0, [pc, #200]	; (8001ca8 <init_displays+0xe8>)
 8001be0:	f001 fd68 	bl	80036b4 <HAL_GPIO_WritePin>
	RST_HIGH();
 8001be4:	2201      	movs	r2, #1
 8001be6:	2102      	movs	r1, #2
 8001be8:	482f      	ldr	r0, [pc, #188]	; (8001ca8 <init_displays+0xe8>)
 8001bea:	f001 fd63 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001bee:	200a      	movs	r0, #10
 8001bf0:	f000 fe4e 	bl	8002890 <HAL_Delay>
	RST_LOW();
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	2102      	movs	r1, #2
 8001bf8:	482b      	ldr	r0, [pc, #172]	; (8001ca8 <init_displays+0xe8>)
 8001bfa:	f001 fd5b 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 8001bfe:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c02:	2201      	movs	r2, #1
 8001c04:	4929      	ldr	r1, [pc, #164]	; (8001cac <init_displays+0xec>)
 8001c06:	482a      	ldr	r0, [pc, #168]	; (8001cb0 <init_displays+0xf0>)
 8001c08:	f002 fedb 	bl	80049c2 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8001c0c:	200a      	movs	r0, #10
 8001c0e:	f000 fe3f 	bl	8002890 <HAL_Delay>
	RST_HIGH();
 8001c12:	2201      	movs	r2, #1
 8001c14:	2102      	movs	r1, #2
 8001c16:	4824      	ldr	r0, [pc, #144]	; (8001ca8 <init_displays+0xe8>)
 8001c18:	f001 fd4c 	bl	80036b4 <HAL_GPIO_WritePin>

	DC_LOW();
 8001c1c:	2200      	movs	r2, #0
 8001c1e:	2101      	movs	r1, #1
 8001c20:	4821      	ldr	r0, [pc, #132]	; (8001ca8 <init_displays+0xe8>)
 8001c22:	f001 fd47 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001c26:	2001      	movs	r0, #1
 8001c28:	f000 fe32 	bl	8002890 <HAL_Delay>

	drop_all_CS();
 8001c2c:	f7ff ff54 	bl	8001ad8 <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001c30:	2300      	movs	r3, #0
 8001c32:	71fb      	strb	r3, [r7, #7]
 8001c34:	e002      	b.n	8001c3c <init_displays+0x7c>
 8001c36:	79fb      	ldrb	r3, [r7, #7]
 8001c38:	3301      	adds	r3, #1
 8001c3a:	71fb      	strb	r3, [r7, #7]
 8001c3c:	79fb      	ldrb	r3, [r7, #7]
 8001c3e:	2b4f      	cmp	r3, #79	; 0x4f
 8001c40:	d9f9      	bls.n	8001c36 <init_displays+0x76>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8001c42:	2300      	movs	r3, #0
 8001c44:	80bb      	strh	r3, [r7, #4]
 8001c46:	e014      	b.n	8001c72 <init_displays+0xb2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 8001c48:	88bb      	ldrh	r3, [r7, #4]
 8001c4a:	4a18      	ldr	r2, [pc, #96]	; (8001cac <init_displays+0xec>)
 8001c4c:	1899      	adds	r1, r3, r2
 8001c4e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c52:	2201      	movs	r2, #1
 8001c54:	4816      	ldr	r0, [pc, #88]	; (8001cb0 <init_displays+0xf0>)
 8001c56:	f002 feb4 	bl	80049c2 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001c5a:	2300      	movs	r3, #0
 8001c5c:	70fb      	strb	r3, [r7, #3]
 8001c5e:	e002      	b.n	8001c66 <init_displays+0xa6>
 8001c60:	78fb      	ldrb	r3, [r7, #3]
 8001c62:	3301      	adds	r3, #1
 8001c64:	70fb      	strb	r3, [r7, #3]
 8001c66:	78fb      	ldrb	r3, [r7, #3]
 8001c68:	2b09      	cmp	r3, #9
 8001c6a:	d9f9      	bls.n	8001c60 <init_displays+0xa0>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8001c6c:	88bb      	ldrh	r3, [r7, #4]
 8001c6e:	3301      	adds	r3, #1
 8001c70:	80bb      	strh	r3, [r7, #4]
 8001c72:	88bb      	ldrh	r3, [r7, #4]
 8001c74:	2b19      	cmp	r3, #25
 8001c76:	d9e7      	bls.n	8001c48 <init_displays+0x88>
	}

	raise_all_CS();
 8001c78:	f7ff ff4a 	bl	8001b10 <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 8001c7c:	2201      	movs	r2, #1
 8001c7e:	2101      	movs	r1, #1
 8001c80:	4809      	ldr	r0, [pc, #36]	; (8001ca8 <init_displays+0xe8>)
 8001c82:	f001 fd17 	bl	80036b4 <HAL_GPIO_WritePin>
	START_BUTTON_POLL();
 8001c86:	4b07      	ldr	r3, [pc, #28]	; (8001ca4 <init_displays+0xe4>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	4a06      	ldr	r2, [pc, #24]	; (8001ca4 <init_displays+0xe4>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6013      	str	r3, [r2, #0]
	erase_buffer();
 8001c92:	f000 f903 	bl	8001e9c <erase_buffer>
	update_all_displays();
 8001c96:	f000 f889 	bl	8001dac <update_all_displays>
}
 8001c9a:	bf00      	nop
 8001c9c:	3708      	adds	r7, #8
 8001c9e:	46bd      	mov	sp, r7
 8001ca0:	bd80      	pop	{r7, pc}
 8001ca2:	bf00      	nop
 8001ca4:	40000c00 	.word	0x40000c00
 8001ca8:	40020000 	.word	0x40020000
 8001cac:	20001424 	.word	0x20001424
 8001cb0:	2000150c 	.word	0x2000150c

08001cb4 <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 8001cb4:	b580      	push	{r7, lr}
 8001cb6:	b086      	sub	sp, #24
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	4603      	mov	r3, r0
 8001cbc:	71fb      	strb	r3, [r7, #7]
	STOP_BUTTON_POLL();
 8001cbe:	4b36      	ldr	r3, [pc, #216]	; (8001d98 <update_display+0xe4>)
 8001cc0:	681b      	ldr	r3, [r3, #0]
 8001cc2:	4a35      	ldr	r2, [pc, #212]	; (8001d98 <update_display+0xe4>)
 8001cc4:	f023 0301 	bic.w	r3, r3, #1
 8001cc8:	6013      	str	r3, [r2, #0]
	DC_LOW();
 8001cca:	2200      	movs	r2, #0
 8001ccc:	2101      	movs	r1, #1
 8001cce:	4833      	ldr	r0, [pc, #204]	; (8001d9c <update_display+0xe8>)
 8001cd0:	f001 fcf0 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001cd4:	2001      	movs	r0, #1
 8001cd6:	f000 fddb 	bl	8002890 <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 8001cda:	79fb      	ldrb	r3, [r7, #7]
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7ff ff31 	bl	8001b44 <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001ce2:	2300      	movs	r3, #0
 8001ce4:	75fb      	strb	r3, [r7, #23]
 8001ce6:	e002      	b.n	8001cee <update_display+0x3a>
 8001ce8:	7dfb      	ldrb	r3, [r7, #23]
 8001cea:	3301      	adds	r3, #1
 8001cec:	75fb      	strb	r3, [r7, #23]
 8001cee:	7dfb      	ldrb	r3, [r7, #23]
 8001cf0:	2b4f      	cmp	r3, #79	; 0x4f
 8001cf2:	d9f9      	bls.n	8001ce8 <update_display+0x34>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	82bb      	strh	r3, [r7, #20]
 8001cf8:	e014      	b.n	8001d24 <update_display+0x70>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8001cfa:	8abb      	ldrh	r3, [r7, #20]
 8001cfc:	4a28      	ldr	r2, [pc, #160]	; (8001da0 <update_display+0xec>)
 8001cfe:	1899      	adds	r1, r3, r2
 8001d00:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d04:	2201      	movs	r2, #1
 8001d06:	4827      	ldr	r0, [pc, #156]	; (8001da4 <update_display+0xf0>)
 8001d08:	f002 fe5b 	bl	80049c2 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001d0c:	2300      	movs	r3, #0
 8001d0e:	74fb      	strb	r3, [r7, #19]
 8001d10:	e002      	b.n	8001d18 <update_display+0x64>
 8001d12:	7cfb      	ldrb	r3, [r7, #19]
 8001d14:	3301      	adds	r3, #1
 8001d16:	74fb      	strb	r3, [r7, #19]
 8001d18:	7cfb      	ldrb	r3, [r7, #19]
 8001d1a:	2b09      	cmp	r3, #9
 8001d1c:	d9f9      	bls.n	8001d12 <update_display+0x5e>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001d1e:	8abb      	ldrh	r3, [r7, #20]
 8001d20:	3301      	adds	r3, #1
 8001d22:	82bb      	strh	r3, [r7, #20]
 8001d24:	8abb      	ldrh	r3, [r7, #20]
 8001d26:	2b05      	cmp	r3, #5
 8001d28:	d9e7      	bls.n	8001cfa <update_display+0x46>
	}

	DC_HIGH();
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	2101      	movs	r1, #1
 8001d2e:	481b      	ldr	r0, [pc, #108]	; (8001d9c <update_display+0xe8>)
 8001d30:	f001 fcc0 	bl	80036b4 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001d34:	2300      	movs	r3, #0
 8001d36:	74bb      	strb	r3, [r7, #18]
 8001d38:	e002      	b.n	8001d40 <update_display+0x8c>
 8001d3a:	7cbb      	ldrb	r3, [r7, #18]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	74bb      	strb	r3, [r7, #18]
 8001d40:	7cbb      	ldrb	r3, [r7, #18]
 8001d42:	2b4f      	cmp	r3, #79	; 0x4f
 8001d44:	d9f9      	bls.n	8001d3a <update_display+0x86>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001d46:	2300      	movs	r3, #0
 8001d48:	823b      	strh	r3, [r7, #16]
 8001d4a:	e014      	b.n	8001d76 <update_display+0xc2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8001d4c:	8a3b      	ldrh	r3, [r7, #16]
 8001d4e:	4a16      	ldr	r2, [pc, #88]	; (8001da8 <update_display+0xf4>)
 8001d50:	1899      	adds	r1, r3, r2
 8001d52:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d56:	2201      	movs	r2, #1
 8001d58:	4812      	ldr	r0, [pc, #72]	; (8001da4 <update_display+0xf0>)
 8001d5a:	f002 fe32 	bl	80049c2 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8001d5e:	2300      	movs	r3, #0
 8001d60:	73fb      	strb	r3, [r7, #15]
 8001d62:	e002      	b.n	8001d6a <update_display+0xb6>
 8001d64:	7bfb      	ldrb	r3, [r7, #15]
 8001d66:	3301      	adds	r3, #1
 8001d68:	73fb      	strb	r3, [r7, #15]
 8001d6a:	7bfb      	ldrb	r3, [r7, #15]
 8001d6c:	2b09      	cmp	r3, #9
 8001d6e:	d9f9      	bls.n	8001d64 <update_display+0xb0>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001d70:	8a3b      	ldrh	r3, [r7, #16]
 8001d72:	3301      	adds	r3, #1
 8001d74:	823b      	strh	r3, [r7, #16]
 8001d76:	8a3b      	ldrh	r3, [r7, #16]
 8001d78:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001d7c:	d3e6      	bcc.n	8001d4c <update_display+0x98>
	}

	raise_all_CS();
 8001d7e:	f7ff fec7 	bl	8001b10 <raise_all_CS>
	START_BUTTON_POLL();
 8001d82:	4b05      	ldr	r3, [pc, #20]	; (8001d98 <update_display+0xe4>)
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	4a04      	ldr	r2, [pc, #16]	; (8001d98 <update_display+0xe4>)
 8001d88:	f043 0301 	orr.w	r3, r3, #1
 8001d8c:	6013      	str	r3, [r2, #0]
}
 8001d8e:	bf00      	nop
 8001d90:	3718      	adds	r7, #24
 8001d92:	46bd      	mov	sp, r7
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	40000c00 	.word	0x40000c00
 8001d9c:	40020000 	.word	0x40020000
 8001da0:	20001440 	.word	0x20001440
 8001da4:	2000150c 	.word	0x2000150c
 8001da8:	2000d270 	.word	0x2000d270

08001dac <update_all_displays>:

void update_all_displays() {
 8001dac:	b580      	push	{r7, lr}
 8001dae:	b084      	sub	sp, #16
 8001db0:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8001db2:	4b35      	ldr	r3, [pc, #212]	; (8001e88 <update_all_displays+0xdc>)
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	4a34      	ldr	r2, [pc, #208]	; (8001e88 <update_all_displays+0xdc>)
 8001db8:	f023 0301 	bic.w	r3, r3, #1
 8001dbc:	6013      	str	r3, [r2, #0]
	DC_LOW();
 8001dbe:	2200      	movs	r2, #0
 8001dc0:	2101      	movs	r1, #1
 8001dc2:	4832      	ldr	r0, [pc, #200]	; (8001e8c <update_all_displays+0xe0>)
 8001dc4:	f001 fc76 	bl	80036b4 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001dc8:	2001      	movs	r0, #1
 8001dca:	f000 fd61 	bl	8002890 <HAL_Delay>
	drop_all_CS();
 8001dce:	f7ff fe83 	bl	8001ad8 <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001dd2:	2300      	movs	r3, #0
 8001dd4:	73fb      	strb	r3, [r7, #15]
 8001dd6:	e002      	b.n	8001dde <update_all_displays+0x32>
 8001dd8:	7bfb      	ldrb	r3, [r7, #15]
 8001dda:	3301      	adds	r3, #1
 8001ddc:	73fb      	strb	r3, [r7, #15]
 8001dde:	7bfb      	ldrb	r3, [r7, #15]
 8001de0:	2b4f      	cmp	r3, #79	; 0x4f
 8001de2:	d9f9      	bls.n	8001dd8 <update_all_displays+0x2c>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001de4:	2300      	movs	r3, #0
 8001de6:	81bb      	strh	r3, [r7, #12]
 8001de8:	e014      	b.n	8001e14 <update_all_displays+0x68>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8001dea:	89bb      	ldrh	r3, [r7, #12]
 8001dec:	4a28      	ldr	r2, [pc, #160]	; (8001e90 <update_all_displays+0xe4>)
 8001dee:	1899      	adds	r1, r3, r2
 8001df0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001df4:	2201      	movs	r2, #1
 8001df6:	4827      	ldr	r0, [pc, #156]	; (8001e94 <update_all_displays+0xe8>)
 8001df8:	f002 fde3 	bl	80049c2 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	72fb      	strb	r3, [r7, #11]
 8001e00:	e002      	b.n	8001e08 <update_all_displays+0x5c>
 8001e02:	7afb      	ldrb	r3, [r7, #11]
 8001e04:	3301      	adds	r3, #1
 8001e06:	72fb      	strb	r3, [r7, #11]
 8001e08:	7afb      	ldrb	r3, [r7, #11]
 8001e0a:	2b09      	cmp	r3, #9
 8001e0c:	d9f9      	bls.n	8001e02 <update_all_displays+0x56>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001e0e:	89bb      	ldrh	r3, [r7, #12]
 8001e10:	3301      	adds	r3, #1
 8001e12:	81bb      	strh	r3, [r7, #12]
 8001e14:	89bb      	ldrh	r3, [r7, #12]
 8001e16:	2b05      	cmp	r3, #5
 8001e18:	d9e7      	bls.n	8001dea <update_all_displays+0x3e>
	}

	DC_HIGH();
 8001e1a:	2201      	movs	r2, #1
 8001e1c:	2101      	movs	r1, #1
 8001e1e:	481b      	ldr	r0, [pc, #108]	; (8001e8c <update_all_displays+0xe0>)
 8001e20:	f001 fc48 	bl	80036b4 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001e24:	2300      	movs	r3, #0
 8001e26:	72bb      	strb	r3, [r7, #10]
 8001e28:	e002      	b.n	8001e30 <update_all_displays+0x84>
 8001e2a:	7abb      	ldrb	r3, [r7, #10]
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	72bb      	strb	r3, [r7, #10]
 8001e30:	7abb      	ldrb	r3, [r7, #10]
 8001e32:	2b4f      	cmp	r3, #79	; 0x4f
 8001e34:	d9f9      	bls.n	8001e2a <update_all_displays+0x7e>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001e36:	2300      	movs	r3, #0
 8001e38:	813b      	strh	r3, [r7, #8]
 8001e3a:	e014      	b.n	8001e66 <update_all_displays+0xba>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8001e3c:	893b      	ldrh	r3, [r7, #8]
 8001e3e:	4a16      	ldr	r2, [pc, #88]	; (8001e98 <update_all_displays+0xec>)
 8001e40:	1899      	adds	r1, r3, r2
 8001e42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e46:	2201      	movs	r2, #1
 8001e48:	4812      	ldr	r0, [pc, #72]	; (8001e94 <update_all_displays+0xe8>)
 8001e4a:	f002 fdba 	bl	80049c2 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8001e4e:	2300      	movs	r3, #0
 8001e50:	71fb      	strb	r3, [r7, #7]
 8001e52:	e002      	b.n	8001e5a <update_all_displays+0xae>
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	3301      	adds	r3, #1
 8001e58:	71fb      	strb	r3, [r7, #7]
 8001e5a:	79fb      	ldrb	r3, [r7, #7]
 8001e5c:	2b09      	cmp	r3, #9
 8001e5e:	d9f9      	bls.n	8001e54 <update_all_displays+0xa8>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001e60:	893b      	ldrh	r3, [r7, #8]
 8001e62:	3301      	adds	r3, #1
 8001e64:	813b      	strh	r3, [r7, #8]
 8001e66:	893b      	ldrh	r3, [r7, #8]
 8001e68:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001e6c:	d3e6      	bcc.n	8001e3c <update_all_displays+0x90>
	}
	raise_all_CS();
 8001e6e:	f7ff fe4f 	bl	8001b10 <raise_all_CS>
	START_BUTTON_POLL();
 8001e72:	4b05      	ldr	r3, [pc, #20]	; (8001e88 <update_all_displays+0xdc>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4a04      	ldr	r2, [pc, #16]	; (8001e88 <update_all_displays+0xdc>)
 8001e78:	f043 0301 	orr.w	r3, r3, #1
 8001e7c:	6013      	str	r3, [r2, #0]
}
 8001e7e:	bf00      	nop
 8001e80:	3710      	adds	r7, #16
 8001e82:	46bd      	mov	sp, r7
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	40000c00 	.word	0x40000c00
 8001e8c:	40020000 	.word	0x40020000
 8001e90:	20001440 	.word	0x20001440
 8001e94:	2000150c 	.word	0x2000150c
 8001e98:	2000d270 	.word	0x2000d270

08001e9c <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 8001e9c:	b480      	push	{r7}
 8001e9e:	b083      	sub	sp, #12
 8001ea0:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001ea2:	2300      	movs	r3, #0
 8001ea4:	80fb      	strh	r3, [r7, #6]
 8001ea6:	e006      	b.n	8001eb6 <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 8001ea8:	88fb      	ldrh	r3, [r7, #6]
 8001eaa:	4a08      	ldr	r2, [pc, #32]	; (8001ecc <erase_buffer+0x30>)
 8001eac:	2100      	movs	r1, #0
 8001eae:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001eb0:	88fb      	ldrh	r3, [r7, #6]
 8001eb2:	3301      	adds	r3, #1
 8001eb4:	80fb      	strh	r3, [r7, #6]
 8001eb6:	88fb      	ldrh	r3, [r7, #6]
 8001eb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ebc:	d3f4      	bcc.n	8001ea8 <erase_buffer+0xc>
	}
}
 8001ebe:	bf00      	nop
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr
 8001ecc:	2000d270 	.word	0x2000d270

08001ed0 <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 8001ed0:	b480      	push	{r7}
 8001ed2:	b083      	sub	sp, #12
 8001ed4:	af00      	add	r7, sp, #0
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	71fb      	strb	r3, [r7, #7]
 8001eda:	460b      	mov	r3, r1
 8001edc:	71bb      	strb	r3, [r7, #6]
 8001ede:	4613      	mov	r3, r2
 8001ee0:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8001ee2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	db3d      	blt.n	8001f66 <draw_pixel+0x96>
 8001eea:	79bb      	ldrb	r3, [r7, #6]
 8001eec:	2b1f      	cmp	r3, #31
 8001eee:	d83a      	bhi.n	8001f66 <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 8001ef0:	797b      	ldrb	r3, [r7, #5]
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	d01a      	beq.n	8001f2c <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 8001ef6:	79fa      	ldrb	r2, [r7, #7]
 8001ef8:	79bb      	ldrb	r3, [r7, #6]
 8001efa:	08db      	lsrs	r3, r3, #3
 8001efc:	b2d8      	uxtb	r0, r3
 8001efe:	4603      	mov	r3, r0
 8001f00:	01db      	lsls	r3, r3, #7
 8001f02:	4413      	add	r3, r2
 8001f04:	4a1b      	ldr	r2, [pc, #108]	; (8001f74 <draw_pixel+0xa4>)
 8001f06:	5cd3      	ldrb	r3, [r2, r3]
 8001f08:	b25a      	sxtb	r2, r3
 8001f0a:	79bb      	ldrb	r3, [r7, #6]
 8001f0c:	f003 0307 	and.w	r3, r3, #7
 8001f10:	2101      	movs	r1, #1
 8001f12:	fa01 f303 	lsl.w	r3, r1, r3
 8001f16:	b25b      	sxtb	r3, r3
 8001f18:	4313      	orrs	r3, r2
 8001f1a:	b259      	sxtb	r1, r3
 8001f1c:	79fa      	ldrb	r2, [r7, #7]
 8001f1e:	4603      	mov	r3, r0
 8001f20:	01db      	lsls	r3, r3, #7
 8001f22:	4413      	add	r3, r2
 8001f24:	b2c9      	uxtb	r1, r1
 8001f26:	4a13      	ldr	r2, [pc, #76]	; (8001f74 <draw_pixel+0xa4>)
 8001f28:	54d1      	strb	r1, [r2, r3]
 8001f2a:	e01d      	b.n	8001f68 <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 8001f2c:	79fa      	ldrb	r2, [r7, #7]
 8001f2e:	79bb      	ldrb	r3, [r7, #6]
 8001f30:	08db      	lsrs	r3, r3, #3
 8001f32:	b2d8      	uxtb	r0, r3
 8001f34:	4603      	mov	r3, r0
 8001f36:	01db      	lsls	r3, r3, #7
 8001f38:	4413      	add	r3, r2
 8001f3a:	4a0e      	ldr	r2, [pc, #56]	; (8001f74 <draw_pixel+0xa4>)
 8001f3c:	5cd3      	ldrb	r3, [r2, r3]
 8001f3e:	b25a      	sxtb	r2, r3
 8001f40:	79bb      	ldrb	r3, [r7, #6]
 8001f42:	f003 0307 	and.w	r3, r3, #7
 8001f46:	2101      	movs	r1, #1
 8001f48:	fa01 f303 	lsl.w	r3, r1, r3
 8001f4c:	b25b      	sxtb	r3, r3
 8001f4e:	43db      	mvns	r3, r3
 8001f50:	b25b      	sxtb	r3, r3
 8001f52:	4013      	ands	r3, r2
 8001f54:	b259      	sxtb	r1, r3
 8001f56:	79fa      	ldrb	r2, [r7, #7]
 8001f58:	4603      	mov	r3, r0
 8001f5a:	01db      	lsls	r3, r3, #7
 8001f5c:	4413      	add	r3, r2
 8001f5e:	b2c9      	uxtb	r1, r1
 8001f60:	4a04      	ldr	r2, [pc, #16]	; (8001f74 <draw_pixel+0xa4>)
 8001f62:	54d1      	strb	r1, [r2, r3]
 8001f64:	e000      	b.n	8001f68 <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8001f66:	bf00      	nop
	}
}
 8001f68:	370c      	adds	r7, #12
 8001f6a:	46bd      	mov	sp, r7
 8001f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f70:	4770      	bx	lr
 8001f72:	bf00      	nop
 8001f74:	2000d270 	.word	0x2000d270

08001f78 <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 8001f78:	b590      	push	{r4, r7, lr}
 8001f7a:	b085      	sub	sp, #20
 8001f7c:	af02      	add	r7, sp, #8
 8001f7e:	4604      	mov	r4, r0
 8001f80:	4608      	mov	r0, r1
 8001f82:	4611      	mov	r1, r2
 8001f84:	461a      	mov	r2, r3
 8001f86:	4623      	mov	r3, r4
 8001f88:	71fb      	strb	r3, [r7, #7]
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	71bb      	strb	r3, [r7, #6]
 8001f8e:	460b      	mov	r3, r1
 8001f90:	717b      	strb	r3, [r7, #5]
 8001f92:	4613      	mov	r3, r2
 8001f94:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 8001f96:	79fb      	ldrb	r3, [r7, #7]
 8001f98:	2b1f      	cmp	r3, #31
 8001f9a:	d913      	bls.n	8001fc4 <draw_char+0x4c>
 8001f9c:	79fb      	ldrb	r3, [r7, #7]
 8001f9e:	2b7e      	cmp	r3, #126	; 0x7e
 8001fa0:	d810      	bhi.n	8001fc4 <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 8001fa2:	79fb      	ldrb	r3, [r7, #7]
 8001fa4:	3b20      	subs	r3, #32
 8001fa6:	2236      	movs	r2, #54	; 0x36
 8001fa8:	fb02 f303 	mul.w	r3, r2, r3
 8001fac:	4a07      	ldr	r2, [pc, #28]	; (8001fcc <draw_char+0x54>)
 8001fae:	1898      	adds	r0, r3, r2
 8001fb0:	797a      	ldrb	r2, [r7, #5]
 8001fb2:	79b9      	ldrb	r1, [r7, #6]
 8001fb4:	793b      	ldrb	r3, [r7, #4]
 8001fb6:	9301      	str	r3, [sp, #4]
 8001fb8:	231b      	movs	r3, #27
 8001fba:	9300      	str	r3, [sp, #0]
 8001fbc:	230c      	movs	r3, #12
 8001fbe:	f000 f807 	bl	8001fd0 <draw_bmp>
 8001fc2:	e000      	b.n	8001fc6 <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 8001fc4:	bf00      	nop
}
 8001fc6:	370c      	adds	r7, #12
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd90      	pop	{r4, r7, pc}
 8001fcc:	20000014 	.word	0x20000014

08001fd0 <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 8001fd0:	b580      	push	{r7, lr}
 8001fd2:	b084      	sub	sp, #16
 8001fd4:	af00      	add	r7, sp, #0
 8001fd6:	6078      	str	r0, [r7, #4]
 8001fd8:	4608      	mov	r0, r1
 8001fda:	4611      	mov	r1, r2
 8001fdc:	461a      	mov	r2, r3
 8001fde:	4603      	mov	r3, r0
 8001fe0:	70fb      	strb	r3, [r7, #3]
 8001fe2:	460b      	mov	r3, r1
 8001fe4:	70bb      	strb	r3, [r7, #2]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 8001fea:	787b      	ldrb	r3, [r7, #1]
 8001fec:	3307      	adds	r3, #7
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da00      	bge.n	8001ff4 <draw_bmp+0x24>
 8001ff2:	3307      	adds	r3, #7
 8001ff4:	10db      	asrs	r3, r3, #3
 8001ff6:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 8001ff8:	2300      	movs	r3, #0
 8001ffa:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 8001ffc:	2300      	movs	r3, #0
 8001ffe:	81bb      	strh	r3, [r7, #12]
 8002000:	e047      	b.n	8002092 <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 8002002:	2300      	movs	r3, #0
 8002004:	817b      	strh	r3, [r7, #10]
 8002006:	e036      	b.n	8002076 <draw_bmp+0xa6>
			if (i & 7)
 8002008:	897b      	ldrh	r3, [r7, #10]
 800200a:	f003 0307 	and.w	r3, r3, #7
 800200e:	2b00      	cmp	r3, #0
 8002010:	d003      	beq.n	800201a <draw_bmp+0x4a>
				b <<= 1;
 8002012:	7bfb      	ldrb	r3, [r7, #15]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	73fb      	strb	r3, [r7, #15]
 8002018:	e012      	b.n	8002040 <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 800201a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800201e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002022:	fb03 f202 	mul.w	r2, r3, r2
 8002026:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800202a:	2b00      	cmp	r3, #0
 800202c:	da00      	bge.n	8002030 <draw_bmp+0x60>
 800202e:	3307      	adds	r3, #7
 8002030:	10db      	asrs	r3, r3, #3
 8002032:	b21b      	sxth	r3, r3
 8002034:	4413      	add	r3, r2
 8002036:	461a      	mov	r2, r3
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	4413      	add	r3, r2
 800203c:	781b      	ldrb	r3, [r3, #0]
 800203e:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 8002040:	897b      	ldrh	r3, [r7, #10]
 8002042:	b2da      	uxtb	r2, r3
 8002044:	78fb      	ldrb	r3, [r7, #3]
 8002046:	4413      	add	r3, r2
 8002048:	b2d8      	uxtb	r0, r3
 800204a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800204e:	2b00      	cmp	r3, #0
 8002050:	db06      	blt.n	8002060 <draw_bmp+0x90>
 8002052:	7f3b      	ldrb	r3, [r7, #28]
 8002054:	2b00      	cmp	r3, #0
 8002056:	bf0c      	ite	eq
 8002058:	2301      	moveq	r3, #1
 800205a:	2300      	movne	r3, #0
 800205c:	b2db      	uxtb	r3, r3
 800205e:	e000      	b.n	8002062 <draw_bmp+0x92>
 8002060:	7f3b      	ldrb	r3, [r7, #28]
 8002062:	78b9      	ldrb	r1, [r7, #2]
 8002064:	461a      	mov	r2, r3
 8002066:	f7ff ff33 	bl	8001ed0 <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 800206a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800206e:	b29b      	uxth	r3, r3
 8002070:	3301      	adds	r3, #1
 8002072:	b29b      	uxth	r3, r3
 8002074:	817b      	strh	r3, [r7, #10]
 8002076:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800207a:	787b      	ldrb	r3, [r7, #1]
 800207c:	429a      	cmp	r2, r3
 800207e:	dbc3      	blt.n	8002008 <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 8002080:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002084:	b29b      	uxth	r3, r3
 8002086:	3301      	adds	r3, #1
 8002088:	b29b      	uxth	r3, r3
 800208a:	81bb      	strh	r3, [r7, #12]
 800208c:	78bb      	ldrb	r3, [r7, #2]
 800208e:	3301      	adds	r3, #1
 8002090:	70bb      	strb	r3, [r7, #2]
 8002092:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002096:	7e3b      	ldrb	r3, [r7, #24]
 8002098:	429a      	cmp	r2, r3
 800209a:	dbb2      	blt.n	8002002 <draw_bmp+0x32>
		}
	}
}
 800209c:	bf00      	nop
 800209e:	bf00      	nop
 80020a0:	3710      	adds	r7, #16
 80020a2:	46bd      	mov	sp, r7
 80020a4:	bd80      	pop	{r7, pc}

080020a6 <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 80020a6:	b580      	push	{r7, lr}
 80020a8:	b084      	sub	sp, #16
 80020aa:	af00      	add	r7, sp, #0
 80020ac:	6078      	str	r0, [r7, #4]
 80020ae:	460b      	mov	r3, r1
 80020b0:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 80020b2:	6878      	ldr	r0, [r7, #4]
 80020b4:	f7fe f898 	bl	80001e8 <strlen>
 80020b8:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 80020ba:	68fb      	ldr	r3, [r7, #12]
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d02c      	beq.n	800211a <draw_string+0x74>
 80020c0:	68fb      	ldr	r3, [r7, #12]
 80020c2:	2b0a      	cmp	r3, #10
 80020c4:	d829      	bhi.n	800211a <draw_string+0x74>

    uint8_t x = DISPLAY_WIDTH/2;
 80020c6:	2340      	movs	r3, #64	; 0x40
 80020c8:	72fb      	strb	r3, [r7, #11]
    if (len%2) {
 80020ca:	68fb      	ldr	r3, [r7, #12]
 80020cc:	f003 0301 	and.w	r3, r3, #1
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	d005      	beq.n	80020e0 <draw_string+0x3a>
        x -= FONT_WIDTH/2;
 80020d4:	7afb      	ldrb	r3, [r7, #11]
 80020d6:	3b06      	subs	r3, #6
 80020d8:	72fb      	strb	r3, [r7, #11]
        len -= 1;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	3b01      	subs	r3, #1
 80020de:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 80020e0:	68fa      	ldr	r2, [r7, #12]
 80020e2:	4613      	mov	r3, r2
 80020e4:	005b      	lsls	r3, r3, #1
 80020e6:	4413      	add	r3, r2
 80020e8:	009b      	lsls	r3, r3, #2
 80020ea:	085b      	lsrs	r3, r3, #1
 80020ec:	b2db      	uxtb	r3, r3
 80020ee:	7afa      	ldrb	r2, [r7, #11]
 80020f0:	1ad3      	subs	r3, r2, r3
 80020f2:	72fb      	strb	r3, [r7, #11]

    while(*str) {
 80020f4:	e00c      	b.n	8002110 <draw_string+0x6a>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	7818      	ldrb	r0, [r3, #0]
 80020fa:	78fb      	ldrb	r3, [r7, #3]
 80020fc:	7af9      	ldrb	r1, [r7, #11]
 80020fe:	2203      	movs	r2, #3
 8002100:	f7ff ff3a 	bl	8001f78 <draw_char>
        x += FONT_WIDTH;
 8002104:	7afb      	ldrb	r3, [r7, #11]
 8002106:	330c      	adds	r3, #12
 8002108:	72fb      	strb	r3, [r7, #11]
        ++str;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	3301      	adds	r3, #1
 800210e:	607b      	str	r3, [r7, #4]
    while(*str) {
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	781b      	ldrb	r3, [r3, #0]
 8002114:	2b00      	cmp	r3, #0
 8002116:	d1ee      	bne.n	80020f6 <draw_string+0x50>
 8002118:	e000      	b.n	800211c <draw_string+0x76>
    if (len <= 0 || len > 10) return;
 800211a:	bf00      	nop
    }
}
 800211c:	3710      	adds	r7, #16
 800211e:	46bd      	mov	sp, r7
 8002120:	bd80      	pop	{r7, pc}
	...

08002124 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002124:	b580      	push	{r7, lr}
 8002126:	b082      	sub	sp, #8
 8002128:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800212a:	2300      	movs	r3, #0
 800212c:	607b      	str	r3, [r7, #4]
 800212e:	4b10      	ldr	r3, [pc, #64]	; (8002170 <HAL_MspInit+0x4c>)
 8002130:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002132:	4a0f      	ldr	r2, [pc, #60]	; (8002170 <HAL_MspInit+0x4c>)
 8002134:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002138:	6453      	str	r3, [r2, #68]	; 0x44
 800213a:	4b0d      	ldr	r3, [pc, #52]	; (8002170 <HAL_MspInit+0x4c>)
 800213c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002142:	607b      	str	r3, [r7, #4]
 8002144:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002146:	2300      	movs	r3, #0
 8002148:	603b      	str	r3, [r7, #0]
 800214a:	4b09      	ldr	r3, [pc, #36]	; (8002170 <HAL_MspInit+0x4c>)
 800214c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800214e:	4a08      	ldr	r2, [pc, #32]	; (8002170 <HAL_MspInit+0x4c>)
 8002150:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002154:	6413      	str	r3, [r2, #64]	; 0x40
 8002156:	4b06      	ldr	r3, [pc, #24]	; (8002170 <HAL_MspInit+0x4c>)
 8002158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800215a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800215e:	603b      	str	r3, [r7, #0]
 8002160:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002162:	2007      	movs	r0, #7
 8002164:	f001 f836 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002168:	bf00      	nop
 800216a:	3708      	adds	r7, #8
 800216c:	46bd      	mov	sp, r7
 800216e:	bd80      	pop	{r7, pc}
 8002170:	40023800 	.word	0x40023800

08002174 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002174:	b580      	push	{r7, lr}
 8002176:	b08a      	sub	sp, #40	; 0x28
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800217c:	f107 0314 	add.w	r3, r7, #20
 8002180:	2200      	movs	r2, #0
 8002182:	601a      	str	r2, [r3, #0]
 8002184:	605a      	str	r2, [r3, #4]
 8002186:	609a      	str	r2, [r3, #8]
 8002188:	60da      	str	r2, [r3, #12]
 800218a:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	4a17      	ldr	r2, [pc, #92]	; (80021f0 <HAL_ADC_MspInit+0x7c>)
 8002192:	4293      	cmp	r3, r2
 8002194:	d127      	bne.n	80021e6 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002196:	2300      	movs	r3, #0
 8002198:	613b      	str	r3, [r7, #16]
 800219a:	4b16      	ldr	r3, [pc, #88]	; (80021f4 <HAL_ADC_MspInit+0x80>)
 800219c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800219e:	4a15      	ldr	r2, [pc, #84]	; (80021f4 <HAL_ADC_MspInit+0x80>)
 80021a0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021a4:	6453      	str	r3, [r2, #68]	; 0x44
 80021a6:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <HAL_ADC_MspInit+0x80>)
 80021a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80021aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80021ae:	613b      	str	r3, [r7, #16]
 80021b0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80021b2:	2300      	movs	r3, #0
 80021b4:	60fb      	str	r3, [r7, #12]
 80021b6:	4b0f      	ldr	r3, [pc, #60]	; (80021f4 <HAL_ADC_MspInit+0x80>)
 80021b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ba:	4a0e      	ldr	r2, [pc, #56]	; (80021f4 <HAL_ADC_MspInit+0x80>)
 80021bc:	f043 0301 	orr.w	r3, r3, #1
 80021c0:	6313      	str	r3, [r2, #48]	; 0x30
 80021c2:	4b0c      	ldr	r3, [pc, #48]	; (80021f4 <HAL_ADC_MspInit+0x80>)
 80021c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021c6:	f003 0301 	and.w	r3, r3, #1
 80021ca:	60fb      	str	r3, [r7, #12]
 80021cc:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80021ce:	2310      	movs	r3, #16
 80021d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80021d2:	2303      	movs	r3, #3
 80021d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021d6:	2300      	movs	r3, #0
 80021d8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021da:	f107 0314 	add.w	r3, r7, #20
 80021de:	4619      	mov	r1, r3
 80021e0:	4805      	ldr	r0, [pc, #20]	; (80021f8 <HAL_ADC_MspInit+0x84>)
 80021e2:	f001 f8cb 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80021e6:	bf00      	nop
 80021e8:	3728      	adds	r7, #40	; 0x28
 80021ea:	46bd      	mov	sp, r7
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	40012000 	.word	0x40012000
 80021f4:	40023800 	.word	0x40023800
 80021f8:	40020000 	.word	0x40020000

080021fc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b08a      	sub	sp, #40	; 0x28
 8002200:	af00      	add	r7, sp, #0
 8002202:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002204:	f107 0314 	add.w	r3, r7, #20
 8002208:	2200      	movs	r2, #0
 800220a:	601a      	str	r2, [r3, #0]
 800220c:	605a      	str	r2, [r3, #4]
 800220e:	609a      	str	r2, [r3, #8]
 8002210:	60da      	str	r2, [r3, #12]
 8002212:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	4a19      	ldr	r2, [pc, #100]	; (8002280 <HAL_I2C_MspInit+0x84>)
 800221a:	4293      	cmp	r3, r2
 800221c:	d12c      	bne.n	8002278 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800221e:	2300      	movs	r3, #0
 8002220:	613b      	str	r3, [r7, #16]
 8002222:	4b18      	ldr	r3, [pc, #96]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002226:	4a17      	ldr	r2, [pc, #92]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002228:	f043 0302 	orr.w	r3, r3, #2
 800222c:	6313      	str	r3, [r2, #48]	; 0x30
 800222e:	4b15      	ldr	r3, [pc, #84]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002230:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002232:	f003 0302 	and.w	r3, r3, #2
 8002236:	613b      	str	r3, [r7, #16]
 8002238:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800223a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800223e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002240:	2312      	movs	r3, #18
 8002242:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002244:	2300      	movs	r3, #0
 8002246:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002248:	2303      	movs	r3, #3
 800224a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800224c:	2304      	movs	r3, #4
 800224e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002250:	f107 0314 	add.w	r3, r7, #20
 8002254:	4619      	mov	r1, r3
 8002256:	480c      	ldr	r0, [pc, #48]	; (8002288 <HAL_I2C_MspInit+0x8c>)
 8002258:	f001 f890 	bl	800337c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800225c:	2300      	movs	r3, #0
 800225e:	60fb      	str	r3, [r7, #12]
 8002260:	4b08      	ldr	r3, [pc, #32]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002262:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002264:	4a07      	ldr	r2, [pc, #28]	; (8002284 <HAL_I2C_MspInit+0x88>)
 8002266:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800226a:	6413      	str	r3, [r2, #64]	; 0x40
 800226c:	4b05      	ldr	r3, [pc, #20]	; (8002284 <HAL_I2C_MspInit+0x88>)
 800226e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002270:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002278:	bf00      	nop
 800227a:	3728      	adds	r7, #40	; 0x28
 800227c:	46bd      	mov	sp, r7
 800227e:	bd80      	pop	{r7, pc}
 8002280:	40005400 	.word	0x40005400
 8002284:	40023800 	.word	0x40023800
 8002288:	40020400 	.word	0x40020400

0800228c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800228c:	b580      	push	{r7, lr}
 800228e:	b08a      	sub	sp, #40	; 0x28
 8002290:	af00      	add	r7, sp, #0
 8002292:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002294:	f107 0314 	add.w	r3, r7, #20
 8002298:	2200      	movs	r2, #0
 800229a:	601a      	str	r2, [r3, #0]
 800229c:	605a      	str	r2, [r3, #4]
 800229e:	609a      	str	r2, [r3, #8]
 80022a0:	60da      	str	r2, [r3, #12]
 80022a2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	4a28      	ldr	r2, [pc, #160]	; (800234c <HAL_SPI_MspInit+0xc0>)
 80022aa:	4293      	cmp	r3, r2
 80022ac:	d14a      	bne.n	8002344 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80022ae:	2300      	movs	r3, #0
 80022b0:	613b      	str	r3, [r7, #16]
 80022b2:	4b27      	ldr	r3, [pc, #156]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022b6:	4a26      	ldr	r2, [pc, #152]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022b8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80022bc:	6413      	str	r3, [r2, #64]	; 0x40
 80022be:	4b24      	ldr	r3, [pc, #144]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80022c6:	613b      	str	r3, [r7, #16]
 80022c8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80022ca:	2300      	movs	r3, #0
 80022cc:	60fb      	str	r3, [r7, #12]
 80022ce:	4b20      	ldr	r3, [pc, #128]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022d2:	4a1f      	ldr	r2, [pc, #124]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022d4:	f043 0304 	orr.w	r3, r3, #4
 80022d8:	6313      	str	r3, [r2, #48]	; 0x30
 80022da:	4b1d      	ldr	r3, [pc, #116]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022de:	f003 0304 	and.w	r3, r3, #4
 80022e2:	60fb      	str	r3, [r7, #12]
 80022e4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80022e6:	2300      	movs	r3, #0
 80022e8:	60bb      	str	r3, [r7, #8]
 80022ea:	4b19      	ldr	r3, [pc, #100]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ee:	4a18      	ldr	r2, [pc, #96]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022f0:	f043 0302 	orr.w	r3, r3, #2
 80022f4:	6313      	str	r3, [r2, #48]	; 0x30
 80022f6:	4b16      	ldr	r3, [pc, #88]	; (8002350 <HAL_SPI_MspInit+0xc4>)
 80022f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022fa:	f003 0302 	and.w	r3, r3, #2
 80022fe:	60bb      	str	r3, [r7, #8]
 8002300:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002302:	2308      	movs	r3, #8
 8002304:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002306:	2302      	movs	r3, #2
 8002308:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800230a:	2300      	movs	r3, #0
 800230c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800230e:	2303      	movs	r3, #3
 8002310:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002312:	2305      	movs	r3, #5
 8002314:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002316:	f107 0314 	add.w	r3, r7, #20
 800231a:	4619      	mov	r1, r3
 800231c:	480d      	ldr	r0, [pc, #52]	; (8002354 <HAL_SPI_MspInit+0xc8>)
 800231e:	f001 f82d 	bl	800337c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002322:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002326:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002328:	2302      	movs	r3, #2
 800232a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800232c:	2300      	movs	r3, #0
 800232e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002330:	2303      	movs	r3, #3
 8002332:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002334:	2305      	movs	r3, #5
 8002336:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002338:	f107 0314 	add.w	r3, r7, #20
 800233c:	4619      	mov	r1, r3
 800233e:	4806      	ldr	r0, [pc, #24]	; (8002358 <HAL_SPI_MspInit+0xcc>)
 8002340:	f001 f81c 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002344:	bf00      	nop
 8002346:	3728      	adds	r7, #40	; 0x28
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	40003800 	.word	0x40003800
 8002350:	40023800 	.word	0x40023800
 8002354:	40020800 	.word	0x40020800
 8002358:	40020400 	.word	0x40020400

0800235c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800235c:	b580      	push	{r7, lr}
 800235e:	b08c      	sub	sp, #48	; 0x30
 8002360:	af00      	add	r7, sp, #0
 8002362:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002364:	f107 031c 	add.w	r3, r7, #28
 8002368:	2200      	movs	r2, #0
 800236a:	601a      	str	r2, [r3, #0]
 800236c:	605a      	str	r2, [r3, #4]
 800236e:	609a      	str	r2, [r3, #8]
 8002370:	60da      	str	r2, [r3, #12]
 8002372:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002374:	687b      	ldr	r3, [r7, #4]
 8002376:	681b      	ldr	r3, [r3, #0]
 8002378:	4a3f      	ldr	r2, [pc, #252]	; (8002478 <HAL_TIM_Base_MspInit+0x11c>)
 800237a:	4293      	cmp	r3, r2
 800237c:	d10e      	bne.n	800239c <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	61bb      	str	r3, [r7, #24]
 8002382:	4b3e      	ldr	r3, [pc, #248]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 8002384:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002386:	4a3d      	ldr	r2, [pc, #244]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6453      	str	r3, [r2, #68]	; 0x44
 800238e:	4b3b      	ldr	r3, [pc, #236]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 8002390:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	61bb      	str	r3, [r7, #24]
 8002398:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800239a:	e069      	b.n	8002470 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80023a4:	d135      	bne.n	8002412 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 80023a6:	2300      	movs	r3, #0
 80023a8:	617b      	str	r3, [r7, #20]
 80023aa:	4b34      	ldr	r3, [pc, #208]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 80023ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ae:	4a33      	ldr	r2, [pc, #204]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 80023b0:	f043 0301 	orr.w	r3, r3, #1
 80023b4:	6413      	str	r3, [r2, #64]	; 0x40
 80023b6:	4b31      	ldr	r3, [pc, #196]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 80023b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80023ba:	f003 0301 	and.w	r3, r3, #1
 80023be:	617b      	str	r3, [r7, #20]
 80023c0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80023c2:	2300      	movs	r3, #0
 80023c4:	613b      	str	r3, [r7, #16]
 80023c6:	4b2d      	ldr	r3, [pc, #180]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 80023c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023ca:	4a2c      	ldr	r2, [pc, #176]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 80023cc:	f043 0301 	orr.w	r3, r3, #1
 80023d0:	6313      	str	r3, [r2, #48]	; 0x30
 80023d2:	4b2a      	ldr	r3, [pc, #168]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 80023d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023d6:	f003 0301 	and.w	r3, r3, #1
 80023da:	613b      	str	r3, [r7, #16]
 80023dc:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80023de:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80023e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80023e4:	2302      	movs	r3, #2
 80023e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023e8:	2300      	movs	r3, #0
 80023ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80023ec:	2300      	movs	r3, #0
 80023ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80023f0:	2301      	movs	r3, #1
 80023f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023f4:	f107 031c 	add.w	r3, r7, #28
 80023f8:	4619      	mov	r1, r3
 80023fa:	4821      	ldr	r0, [pc, #132]	; (8002480 <HAL_TIM_Base_MspInit+0x124>)
 80023fc:	f000 ffbe 	bl	800337c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002400:	2200      	movs	r2, #0
 8002402:	2100      	movs	r1, #0
 8002404:	201c      	movs	r0, #28
 8002406:	f000 fef0 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800240a:	201c      	movs	r0, #28
 800240c:	f000 ff09 	bl	8003222 <HAL_NVIC_EnableIRQ>
}
 8002410:	e02e      	b.n	8002470 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	681b      	ldr	r3, [r3, #0]
 8002416:	4a1b      	ldr	r2, [pc, #108]	; (8002484 <HAL_TIM_Base_MspInit+0x128>)
 8002418:	4293      	cmp	r3, r2
 800241a:	d10e      	bne.n	800243a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800241c:	2300      	movs	r3, #0
 800241e:	60fb      	str	r3, [r7, #12]
 8002420:	4b16      	ldr	r3, [pc, #88]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 8002422:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002424:	4a15      	ldr	r2, [pc, #84]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 8002426:	f043 0302 	orr.w	r3, r3, #2
 800242a:	6413      	str	r3, [r2, #64]	; 0x40
 800242c:	4b13      	ldr	r3, [pc, #76]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	f003 0302 	and.w	r3, r3, #2
 8002434:	60fb      	str	r3, [r7, #12]
 8002436:	68fb      	ldr	r3, [r7, #12]
}
 8002438:	e01a      	b.n	8002470 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	4a12      	ldr	r2, [pc, #72]	; (8002488 <HAL_TIM_Base_MspInit+0x12c>)
 8002440:	4293      	cmp	r3, r2
 8002442:	d115      	bne.n	8002470 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002444:	2300      	movs	r3, #0
 8002446:	60bb      	str	r3, [r7, #8]
 8002448:	4b0c      	ldr	r3, [pc, #48]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 800244a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800244c:	4a0b      	ldr	r2, [pc, #44]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 800244e:	f043 0308 	orr.w	r3, r3, #8
 8002452:	6413      	str	r3, [r2, #64]	; 0x40
 8002454:	4b09      	ldr	r3, [pc, #36]	; (800247c <HAL_TIM_Base_MspInit+0x120>)
 8002456:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002458:	f003 0308 	and.w	r3, r3, #8
 800245c:	60bb      	str	r3, [r7, #8]
 800245e:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002460:	2200      	movs	r2, #0
 8002462:	2100      	movs	r1, #0
 8002464:	2032      	movs	r0, #50	; 0x32
 8002466:	f000 fec0 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800246a:	2032      	movs	r0, #50	; 0x32
 800246c:	f000 fed9 	bl	8003222 <HAL_NVIC_EnableIRQ>
}
 8002470:	bf00      	nop
 8002472:	3730      	adds	r7, #48	; 0x30
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}
 8002478:	40010000 	.word	0x40010000
 800247c:	40023800 	.word	0x40023800
 8002480:	40020000 	.word	0x40020000
 8002484:	40000400 	.word	0x40000400
 8002488:	40000c00 	.word	0x40000c00

0800248c <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 800248c:	b480      	push	{r7}
 800248e:	b085      	sub	sp, #20
 8002490:	af00      	add	r7, sp, #0
 8002492:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a0b      	ldr	r2, [pc, #44]	; (80024c8 <HAL_TIM_PWM_MspInit+0x3c>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d10d      	bne.n	80024ba <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	60fb      	str	r3, [r7, #12]
 80024a2:	4b0a      	ldr	r3, [pc, #40]	; (80024cc <HAL_TIM_PWM_MspInit+0x40>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024a6:	4a09      	ldr	r2, [pc, #36]	; (80024cc <HAL_TIM_PWM_MspInit+0x40>)
 80024a8:	f043 0304 	orr.w	r3, r3, #4
 80024ac:	6413      	str	r3, [r2, #64]	; 0x40
 80024ae:	4b07      	ldr	r3, [pc, #28]	; (80024cc <HAL_TIM_PWM_MspInit+0x40>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024b2:	f003 0304 	and.w	r3, r3, #4
 80024b6:	60fb      	str	r3, [r7, #12]
 80024b8:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80024ba:	bf00      	nop
 80024bc:	3714      	adds	r7, #20
 80024be:	46bd      	mov	sp, r7
 80024c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c4:	4770      	bx	lr
 80024c6:	bf00      	nop
 80024c8:	40000800 	.word	0x40000800
 80024cc:	40023800 	.word	0x40023800

080024d0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	; 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80024d8:	f107 0314 	add.w	r3, r7, #20
 80024dc:	2200      	movs	r2, #0
 80024de:	601a      	str	r2, [r3, #0]
 80024e0:	605a      	str	r2, [r3, #4]
 80024e2:	609a      	str	r2, [r3, #8]
 80024e4:	60da      	str	r2, [r3, #12]
 80024e6:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a24      	ldr	r2, [pc, #144]	; (8002580 <HAL_TIM_MspPostInit+0xb0>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d11e      	bne.n	8002530 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80024f2:	2300      	movs	r3, #0
 80024f4:	613b      	str	r3, [r7, #16]
 80024f6:	4b23      	ldr	r3, [pc, #140]	; (8002584 <HAL_TIM_MspPostInit+0xb4>)
 80024f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024fa:	4a22      	ldr	r2, [pc, #136]	; (8002584 <HAL_TIM_MspPostInit+0xb4>)
 80024fc:	f043 0304 	orr.w	r3, r3, #4
 8002500:	6313      	str	r3, [r2, #48]	; 0x30
 8002502:	4b20      	ldr	r3, [pc, #128]	; (8002584 <HAL_TIM_MspPostInit+0xb4>)
 8002504:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002506:	f003 0304 	and.w	r3, r3, #4
 800250a:	613b      	str	r3, [r7, #16]
 800250c:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800250e:	2380      	movs	r3, #128	; 0x80
 8002510:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002512:	2302      	movs	r3, #2
 8002514:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002516:	2300      	movs	r3, #0
 8002518:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800251a:	2300      	movs	r3, #0
 800251c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800251e:	2302      	movs	r3, #2
 8002520:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002522:	f107 0314 	add.w	r3, r7, #20
 8002526:	4619      	mov	r1, r3
 8002528:	4817      	ldr	r0, [pc, #92]	; (8002588 <HAL_TIM_MspPostInit+0xb8>)
 800252a:	f000 ff27 	bl	800337c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800252e:	e022      	b.n	8002576 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002530:	687b      	ldr	r3, [r7, #4]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a15      	ldr	r2, [pc, #84]	; (800258c <HAL_TIM_MspPostInit+0xbc>)
 8002536:	4293      	cmp	r3, r2
 8002538:	d11d      	bne.n	8002576 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800253a:	2300      	movs	r3, #0
 800253c:	60fb      	str	r3, [r7, #12]
 800253e:	4b11      	ldr	r3, [pc, #68]	; (8002584 <HAL_TIM_MspPostInit+0xb4>)
 8002540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002542:	4a10      	ldr	r2, [pc, #64]	; (8002584 <HAL_TIM_MspPostInit+0xb4>)
 8002544:	f043 0302 	orr.w	r3, r3, #2
 8002548:	6313      	str	r3, [r2, #48]	; 0x30
 800254a:	4b0e      	ldr	r3, [pc, #56]	; (8002584 <HAL_TIM_MspPostInit+0xb4>)
 800254c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800254e:	f003 0302 	and.w	r3, r3, #2
 8002552:	60fb      	str	r3, [r7, #12]
 8002554:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002556:	2380      	movs	r3, #128	; 0x80
 8002558:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800255a:	2302      	movs	r3, #2
 800255c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800255e:	2300      	movs	r3, #0
 8002560:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002562:	2300      	movs	r3, #0
 8002564:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002566:	2302      	movs	r3, #2
 8002568:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800256a:	f107 0314 	add.w	r3, r7, #20
 800256e:	4619      	mov	r1, r3
 8002570:	4807      	ldr	r0, [pc, #28]	; (8002590 <HAL_TIM_MspPostInit+0xc0>)
 8002572:	f000 ff03 	bl	800337c <HAL_GPIO_Init>
}
 8002576:	bf00      	nop
 8002578:	3728      	adds	r7, #40	; 0x28
 800257a:	46bd      	mov	sp, r7
 800257c:	bd80      	pop	{r7, pc}
 800257e:	bf00      	nop
 8002580:	40000400 	.word	0x40000400
 8002584:	40023800 	.word	0x40023800
 8002588:	40020800 	.word	0x40020800
 800258c:	40000800 	.word	0x40000800
 8002590:	40020400 	.word	0x40020400

08002594 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002594:	b580      	push	{r7, lr}
 8002596:	b08a      	sub	sp, #40	; 0x28
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800259c:	f107 0314 	add.w	r3, r7, #20
 80025a0:	2200      	movs	r2, #0
 80025a2:	601a      	str	r2, [r3, #0]
 80025a4:	605a      	str	r2, [r3, #4]
 80025a6:	609a      	str	r2, [r3, #8]
 80025a8:	60da      	str	r2, [r3, #12]
 80025aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 80025ac:	687b      	ldr	r3, [r7, #4]
 80025ae:	681b      	ldr	r3, [r3, #0]
 80025b0:	4a1d      	ldr	r2, [pc, #116]	; (8002628 <HAL_UART_MspInit+0x94>)
 80025b2:	4293      	cmp	r3, r2
 80025b4:	d134      	bne.n	8002620 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 80025b6:	2300      	movs	r3, #0
 80025b8:	613b      	str	r3, [r7, #16]
 80025ba:	4b1c      	ldr	r3, [pc, #112]	; (800262c <HAL_UART_MspInit+0x98>)
 80025bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025be:	4a1b      	ldr	r2, [pc, #108]	; (800262c <HAL_UART_MspInit+0x98>)
 80025c0:	f043 0310 	orr.w	r3, r3, #16
 80025c4:	6453      	str	r3, [r2, #68]	; 0x44
 80025c6:	4b19      	ldr	r3, [pc, #100]	; (800262c <HAL_UART_MspInit+0x98>)
 80025c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80025ca:	f003 0310 	and.w	r3, r3, #16
 80025ce:	613b      	str	r3, [r7, #16]
 80025d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025d2:	2300      	movs	r3, #0
 80025d4:	60fb      	str	r3, [r7, #12]
 80025d6:	4b15      	ldr	r3, [pc, #84]	; (800262c <HAL_UART_MspInit+0x98>)
 80025d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025da:	4a14      	ldr	r2, [pc, #80]	; (800262c <HAL_UART_MspInit+0x98>)
 80025dc:	f043 0301 	orr.w	r3, r3, #1
 80025e0:	6313      	str	r3, [r2, #48]	; 0x30
 80025e2:	4b12      	ldr	r3, [pc, #72]	; (800262c <HAL_UART_MspInit+0x98>)
 80025e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025e6:	f003 0301 	and.w	r3, r3, #1
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80025ee:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80025f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f4:	2302      	movs	r3, #2
 80025f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025f8:	2300      	movs	r3, #0
 80025fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002600:	2307      	movs	r3, #7
 8002602:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002604:	f107 0314 	add.w	r3, r7, #20
 8002608:	4619      	mov	r1, r3
 800260a:	4809      	ldr	r0, [pc, #36]	; (8002630 <HAL_UART_MspInit+0x9c>)
 800260c:	f000 feb6 	bl	800337c <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 8002610:	2200      	movs	r2, #0
 8002612:	2100      	movs	r1, #0
 8002614:	2025      	movs	r0, #37	; 0x25
 8002616:	f000 fde8 	bl	80031ea <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800261a:	2025      	movs	r0, #37	; 0x25
 800261c:	f000 fe01 	bl	8003222 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002620:	bf00      	nop
 8002622:	3728      	adds	r7, #40	; 0x28
 8002624:	46bd      	mov	sp, r7
 8002626:	bd80      	pop	{r7, pc}
 8002628:	40011000 	.word	0x40011000
 800262c:	40023800 	.word	0x40023800
 8002630:	40020000 	.word	0x40020000

08002634 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002634:	b480      	push	{r7}
 8002636:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002638:	e7fe      	b.n	8002638 <NMI_Handler+0x4>

0800263a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800263a:	b480      	push	{r7}
 800263c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800263e:	e7fe      	b.n	800263e <HardFault_Handler+0x4>

08002640 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002640:	b480      	push	{r7}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002644:	e7fe      	b.n	8002644 <MemManage_Handler+0x4>

08002646 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002646:	b480      	push	{r7}
 8002648:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800264a:	e7fe      	b.n	800264a <BusFault_Handler+0x4>

0800264c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002650:	e7fe      	b.n	8002650 <UsageFault_Handler+0x4>

08002652 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002652:	b480      	push	{r7}
 8002654:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002656:	bf00      	nop
 8002658:	46bd      	mov	sp, r7
 800265a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265e:	4770      	bx	lr

08002660 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002660:	b480      	push	{r7}
 8002662:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	46bd      	mov	sp, r7
 8002668:	f85d 7b04 	ldr.w	r7, [sp], #4
 800266c:	4770      	bx	lr

0800266e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800266e:	b480      	push	{r7}
 8002670:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002672:	bf00      	nop
 8002674:	46bd      	mov	sp, r7
 8002676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800267a:	4770      	bx	lr

0800267c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800267c:	b580      	push	{r7, lr}
 800267e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002680:	f000 f8e6 	bl	8002850 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	bd80      	pop	{r7, pc}

08002688 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002688:	b580      	push	{r7, lr}
 800268a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 800268c:	481a      	ldr	r0, [pc, #104]	; (80026f8 <TIM2_IRQHandler+0x70>)
 800268e:	f002 ffd7 	bl	8005640 <HAL_TIM_IRQHandler>
	if(firsttime){
 8002692:	4b1a      	ldr	r3, [pc, #104]	; (80026fc <TIM2_IRQHandler+0x74>)
 8002694:	781b      	ldrb	r3, [r3, #0]
 8002696:	2b00      	cmp	r3, #0
 8002698:	d00d      	beq.n	80026b6 <TIM2_IRQHandler+0x2e>
		firsttime =0;
 800269a:	4b18      	ldr	r3, [pc, #96]	; (80026fc <TIM2_IRQHandler+0x74>)
 800269c:	2200      	movs	r2, #0
 800269e:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = 0;
 80026a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026a4:	2200      	movs	r2, #0
 80026a6:	625a      	str	r2, [r3, #36]	; 0x24
		index = 0;
 80026a8:	4b15      	ldr	r3, [pc, #84]	; (8002700 <TIM2_IRQHandler+0x78>)
 80026aa:	2200      	movs	r2, #0
 80026ac:	601a      	str	r2, [r3, #0]
		HAL_TIM_IRQHandler(&htim2);
 80026ae:	4812      	ldr	r0, [pc, #72]	; (80026f8 <TIM2_IRQHandler+0x70>)
 80026b0:	f002 ffc6 	bl	8005640 <HAL_TIM_IRQHandler>
		return;
 80026b4:	e01e      	b.n	80026f4 <TIM2_IRQHandler+0x6c>
	}
	data[index] = TIM2->CNT;
 80026b6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80026bc:	4b10      	ldr	r3, [pc, #64]	; (8002700 <TIM2_IRQHandler+0x78>)
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	b291      	uxth	r1, r2
 80026c2:	4a10      	ldr	r2, [pc, #64]	; (8002704 <TIM2_IRQHandler+0x7c>)
 80026c4:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TIM2->CNT =0;
 80026c8:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80026cc:	2200      	movs	r2, #0
 80026ce:	625a      	str	r2, [r3, #36]	; 0x24
	index++;
 80026d0:	4b0b      	ldr	r3, [pc, #44]	; (8002700 <TIM2_IRQHandler+0x78>)
 80026d2:	681b      	ldr	r3, [r3, #0]
 80026d4:	3301      	adds	r3, #1
 80026d6:	4a0a      	ldr	r2, [pc, #40]	; (8002700 <TIM2_IRQHandler+0x78>)
 80026d8:	6013      	str	r3, [r2, #0]
	if(index == dataLen){
 80026da:	4b09      	ldr	r3, [pc, #36]	; (8002700 <TIM2_IRQHandler+0x78>)
 80026dc:	681a      	ldr	r2, [r3, #0]
 80026de:	4b0a      	ldr	r3, [pc, #40]	; (8002708 <TIM2_IRQHandler+0x80>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	429a      	cmp	r2, r3
 80026e4:	d103      	bne.n	80026ee <TIM2_IRQHandler+0x66>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);		//Transmit();
 80026e6:	2100      	movs	r1, #0
 80026e8:	4803      	ldr	r0, [pc, #12]	; (80026f8 <TIM2_IRQHandler+0x70>)
 80026ea:	f002 fefb 	bl	80054e4 <HAL_TIM_IC_Stop_IT>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026ee:	4802      	ldr	r0, [pc, #8]	; (80026f8 <TIM2_IRQHandler+0x70>)
 80026f0:	f002 ffa6 	bl	8005640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026f4:	bd80      	pop	{r7, pc}
 80026f6:	bf00      	nop
 80026f8:	200015ac 	.word	0x200015ac
 80026fc:	20001446 	.word	0x20001446
 8002700:	2000d470 	.word	0x2000d470
 8002704:	2000d184 	.word	0x2000d184
 8002708:	2000000c 	.word	0x2000000c

0800270c <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 800270c:	b580      	push	{r7, lr}
 800270e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8002710:	4802      	ldr	r0, [pc, #8]	; (800271c <USART1_IRQHandler+0x10>)
 8002712:	f004 f867 	bl	80067e4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002716:	bf00      	nop
 8002718:	bd80      	pop	{r7, pc}
 800271a:	bf00      	nop
 800271c:	200016cc 	.word	0x200016cc

08002720 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002720:	b580      	push	{r7, lr}
 8002722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002724:	4802      	ldr	r0, [pc, #8]	; (8002730 <TIM5_IRQHandler+0x10>)
 8002726:	f002 ff8b 	bl	8005640 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 800272a:	bf00      	nop
 800272c:	bd80      	pop	{r7, pc}
 800272e:	bf00      	nop
 8002730:	20001684 	.word	0x20001684

08002734 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002734:	b480      	push	{r7}
 8002736:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002738:	4b06      	ldr	r3, [pc, #24]	; (8002754 <SystemInit+0x20>)
 800273a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800273e:	4a05      	ldr	r2, [pc, #20]	; (8002754 <SystemInit+0x20>)
 8002740:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002744:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002748:	bf00      	nop
 800274a:	46bd      	mov	sp, r7
 800274c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002750:	4770      	bx	lr
 8002752:	bf00      	nop
 8002754:	e000ed00 	.word	0xe000ed00

08002758 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002758:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002790 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800275c:	480d      	ldr	r0, [pc, #52]	; (8002794 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800275e:	490e      	ldr	r1, [pc, #56]	; (8002798 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002760:	4a0e      	ldr	r2, [pc, #56]	; (800279c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002762:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002764:	e002      	b.n	800276c <LoopCopyDataInit>

08002766 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002766:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002768:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800276a:	3304      	adds	r3, #4

0800276c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800276c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800276e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002770:	d3f9      	bcc.n	8002766 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002772:	4a0b      	ldr	r2, [pc, #44]	; (80027a0 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002774:	4c0b      	ldr	r4, [pc, #44]	; (80027a4 <LoopFillZerobss+0x26>)
  movs r3, #0
 8002776:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002778:	e001      	b.n	800277e <LoopFillZerobss>

0800277a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800277a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800277c:	3204      	adds	r2, #4

0800277e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800277e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002780:	d3fb      	bcc.n	800277a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002782:	f7ff ffd7 	bl	8002734 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002786:	f004 ff95 	bl	80076b4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800278a:	f7fe fa4f 	bl	8000c2c <main>
  bx  lr    
 800278e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002790:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002794:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002798:	20001454 	.word	0x20001454
  ldr r2, =_sidata
 800279c:	080078d8 	.word	0x080078d8
  ldr r2, =_sbss
 80027a0:	20001454 	.word	0x20001454
  ldr r4, =_ebss
 80027a4:	2000d478 	.word	0x2000d478

080027a8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027a8:	e7fe      	b.n	80027a8 <ADC_IRQHandler>
	...

080027ac <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027ac:	b580      	push	{r7, lr}
 80027ae:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027b0:	4b0e      	ldr	r3, [pc, #56]	; (80027ec <HAL_Init+0x40>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a0d      	ldr	r2, [pc, #52]	; (80027ec <HAL_Init+0x40>)
 80027b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80027ba:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027bc:	4b0b      	ldr	r3, [pc, #44]	; (80027ec <HAL_Init+0x40>)
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	4a0a      	ldr	r2, [pc, #40]	; (80027ec <HAL_Init+0x40>)
 80027c2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80027c6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027c8:	4b08      	ldr	r3, [pc, #32]	; (80027ec <HAL_Init+0x40>)
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	4a07      	ldr	r2, [pc, #28]	; (80027ec <HAL_Init+0x40>)
 80027ce:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80027d2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027d4:	2003      	movs	r0, #3
 80027d6:	f000 fcfd 	bl	80031d4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027da:	2000      	movs	r0, #0
 80027dc:	f000 f808 	bl	80027f0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027e0:	f7ff fca0 	bl	8002124 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80027e4:	2300      	movs	r3, #0
}
 80027e6:	4618      	mov	r0, r3
 80027e8:	bd80      	pop	{r7, pc}
 80027ea:	bf00      	nop
 80027ec:	40023c00 	.word	0x40023c00

080027f0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80027f0:	b580      	push	{r7, lr}
 80027f2:	b082      	sub	sp, #8
 80027f4:	af00      	add	r7, sp, #0
 80027f6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80027f8:	4b12      	ldr	r3, [pc, #72]	; (8002844 <HAL_InitTick+0x54>)
 80027fa:	681a      	ldr	r2, [r3, #0]
 80027fc:	4b12      	ldr	r3, [pc, #72]	; (8002848 <HAL_InitTick+0x58>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	4619      	mov	r1, r3
 8002802:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002806:	fbb3 f3f1 	udiv	r3, r3, r1
 800280a:	fbb2 f3f3 	udiv	r3, r2, r3
 800280e:	4618      	mov	r0, r3
 8002810:	f000 fd15 	bl	800323e <HAL_SYSTICK_Config>
 8002814:	4603      	mov	r3, r0
 8002816:	2b00      	cmp	r3, #0
 8002818:	d001      	beq.n	800281e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e00e      	b.n	800283c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	2b0f      	cmp	r3, #15
 8002822:	d80a      	bhi.n	800283a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002824:	2200      	movs	r2, #0
 8002826:	6879      	ldr	r1, [r7, #4]
 8002828:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800282c:	f000 fcdd 	bl	80031ea <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002830:	4a06      	ldr	r2, [pc, #24]	; (800284c <HAL_InitTick+0x5c>)
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002836:	2300      	movs	r3, #0
 8002838:	e000      	b.n	800283c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800283a:	2301      	movs	r3, #1
}
 800283c:	4618      	mov	r0, r3
 800283e:	3708      	adds	r7, #8
 8002840:	46bd      	mov	sp, r7
 8002842:	bd80      	pop	{r7, pc}
 8002844:	20001448 	.word	0x20001448
 8002848:	20001450 	.word	0x20001450
 800284c:	2000144c 	.word	0x2000144c

08002850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002850:	b480      	push	{r7}
 8002852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002854:	4b06      	ldr	r3, [pc, #24]	; (8002870 <HAL_IncTick+0x20>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	461a      	mov	r2, r3
 800285a:	4b06      	ldr	r3, [pc, #24]	; (8002874 <HAL_IncTick+0x24>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4413      	add	r3, r2
 8002860:	4a04      	ldr	r2, [pc, #16]	; (8002874 <HAL_IncTick+0x24>)
 8002862:	6013      	str	r3, [r2, #0]
}
 8002864:	bf00      	nop
 8002866:	46bd      	mov	sp, r7
 8002868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800286c:	4770      	bx	lr
 800286e:	bf00      	nop
 8002870:	20001450 	.word	0x20001450
 8002874:	2000d474 	.word	0x2000d474

08002878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002878:	b480      	push	{r7}
 800287a:	af00      	add	r7, sp, #0
  return uwTick;
 800287c:	4b03      	ldr	r3, [pc, #12]	; (800288c <HAL_GetTick+0x14>)
 800287e:	681b      	ldr	r3, [r3, #0]
}
 8002880:	4618      	mov	r0, r3
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	2000d474 	.word	0x2000d474

08002890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002890:	b580      	push	{r7, lr}
 8002892:	b084      	sub	sp, #16
 8002894:	af00      	add	r7, sp, #0
 8002896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002898:	f7ff ffee 	bl	8002878 <HAL_GetTick>
 800289c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80028a8:	d005      	beq.n	80028b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028aa:	4b0a      	ldr	r3, [pc, #40]	; (80028d4 <HAL_Delay+0x44>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	461a      	mov	r2, r3
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	4413      	add	r3, r2
 80028b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028b6:	bf00      	nop
 80028b8:	f7ff ffde 	bl	8002878 <HAL_GetTick>
 80028bc:	4602      	mov	r2, r0
 80028be:	68bb      	ldr	r3, [r7, #8]
 80028c0:	1ad3      	subs	r3, r2, r3
 80028c2:	68fa      	ldr	r2, [r7, #12]
 80028c4:	429a      	cmp	r2, r3
 80028c6:	d8f7      	bhi.n	80028b8 <HAL_Delay+0x28>
  {
  }
}
 80028c8:	bf00      	nop
 80028ca:	bf00      	nop
 80028cc:	3710      	adds	r7, #16
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	20001450 	.word	0x20001450

080028d8 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80028e0:	2300      	movs	r3, #0
 80028e2:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d101      	bne.n	80028ee <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80028ea:	2301      	movs	r3, #1
 80028ec:	e033      	b.n	8002956 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d109      	bne.n	800290a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80028f6:	6878      	ldr	r0, [r7, #4]
 80028f8:	f7ff fc3c 	bl	8002174 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2200      	movs	r2, #0
 8002900:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	2200      	movs	r2, #0
 8002906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800290e:	f003 0310 	and.w	r3, r3, #16
 8002912:	2b00      	cmp	r3, #0
 8002914:	d118      	bne.n	8002948 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002916:	687b      	ldr	r3, [r7, #4]
 8002918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800291a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800291e:	f023 0302 	bic.w	r3, r3, #2
 8002922:	f043 0202 	orr.w	r2, r3, #2
 8002926:	687b      	ldr	r3, [r7, #4]
 8002928:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800292a:	6878      	ldr	r0, [r7, #4]
 800292c:	f000 fa86 	bl	8002e3c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002930:	687b      	ldr	r3, [r7, #4]
 8002932:	2200      	movs	r2, #0
 8002934:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002936:	687b      	ldr	r3, [r7, #4]
 8002938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800293a:	f023 0303 	bic.w	r3, r3, #3
 800293e:	f043 0201 	orr.w	r2, r3, #1
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	641a      	str	r2, [r3, #64]	; 0x40
 8002946:	e001      	b.n	800294c <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002948:	2301      	movs	r3, #1
 800294a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2200      	movs	r2, #0
 8002950:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002954:	7bfb      	ldrb	r3, [r7, #15]
}
 8002956:	4618      	mov	r0, r3
 8002958:	3710      	adds	r7, #16
 800295a:	46bd      	mov	sp, r7
 800295c:	bd80      	pop	{r7, pc}
	...

08002960 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002960:	b480      	push	{r7}
 8002962:	b085      	sub	sp, #20
 8002964:	af00      	add	r7, sp, #0
 8002966:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002968:	2300      	movs	r3, #0
 800296a:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002972:	2b01      	cmp	r3, #1
 8002974:	d101      	bne.n	800297a <HAL_ADC_Start+0x1a>
 8002976:	2302      	movs	r3, #2
 8002978:	e097      	b.n	8002aaa <HAL_ADC_Start+0x14a>
 800297a:	687b      	ldr	r3, [r7, #4]
 800297c:	2201      	movs	r2, #1
 800297e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	689b      	ldr	r3, [r3, #8]
 8002988:	f003 0301 	and.w	r3, r3, #1
 800298c:	2b01      	cmp	r3, #1
 800298e:	d018      	beq.n	80029c2 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	689a      	ldr	r2, [r3, #8]
 8002996:	687b      	ldr	r3, [r7, #4]
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	f042 0201 	orr.w	r2, r2, #1
 800299e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 80029a0:	4b45      	ldr	r3, [pc, #276]	; (8002ab8 <HAL_ADC_Start+0x158>)
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a45      	ldr	r2, [pc, #276]	; (8002abc <HAL_ADC_Start+0x15c>)
 80029a6:	fba2 2303 	umull	r2, r3, r2, r3
 80029aa:	0c9a      	lsrs	r2, r3, #18
 80029ac:	4613      	mov	r3, r2
 80029ae:	005b      	lsls	r3, r3, #1
 80029b0:	4413      	add	r3, r2
 80029b2:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029b4:	e002      	b.n	80029bc <HAL_ADC_Start+0x5c>
    {
      counter--;
 80029b6:	68bb      	ldr	r3, [r7, #8]
 80029b8:	3b01      	subs	r3, #1
 80029ba:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 80029bc:	68bb      	ldr	r3, [r7, #8]
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d1f9      	bne.n	80029b6 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	689b      	ldr	r3, [r3, #8]
 80029c8:	f003 0301 	and.w	r3, r3, #1
 80029cc:	2b01      	cmp	r3, #1
 80029ce:	d15f      	bne.n	8002a90 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d4:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 80029d8:	f023 0301 	bic.w	r3, r3, #1
 80029dc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	685b      	ldr	r3, [r3, #4]
 80029ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80029ee:	2b00      	cmp	r3, #0
 80029f0:	d007      	beq.n	8002a02 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029f6:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80029fa:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a06:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002a0a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002a0e:	d106      	bne.n	8002a1e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a14:	f023 0206 	bic.w	r2, r3, #6
 8002a18:	687b      	ldr	r3, [r7, #4]
 8002a1a:	645a      	str	r2, [r3, #68]	; 0x44
 8002a1c:	e002      	b.n	8002a24 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	2200      	movs	r2, #0
 8002a22:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002a24:	687b      	ldr	r3, [r7, #4]
 8002a26:	2200      	movs	r2, #0
 8002a28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a2c:	4b24      	ldr	r3, [pc, #144]	; (8002ac0 <HAL_ADC_Start+0x160>)
 8002a2e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002a38:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	f003 031f 	and.w	r3, r3, #31
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d10f      	bne.n	8002a66 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a50:	2b00      	cmp	r3, #0
 8002a52:	d129      	bne.n	8002aa8 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a54:	687b      	ldr	r3, [r7, #4]
 8002a56:	681b      	ldr	r3, [r3, #0]
 8002a58:	689a      	ldr	r2, [r3, #8]
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	e020      	b.n	8002aa8 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a16      	ldr	r2, [pc, #88]	; (8002ac4 <HAL_ADC_Start+0x164>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d11b      	bne.n	8002aa8 <HAL_ADC_Start+0x148>
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	689b      	ldr	r3, [r3, #8]
 8002a76:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002a7a:	2b00      	cmp	r3, #0
 8002a7c:	d114      	bne.n	8002aa8 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	689a      	ldr	r2, [r3, #8]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	681b      	ldr	r3, [r3, #0]
 8002a88:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002a8c:	609a      	str	r2, [r3, #8]
 8002a8e:	e00b      	b.n	8002aa8 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a94:	f043 0210 	orr.w	r2, r3, #16
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002aa0:	f043 0201 	orr.w	r2, r3, #1
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3714      	adds	r7, #20
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab4:	4770      	bx	lr
 8002ab6:	bf00      	nop
 8002ab8:	20001448 	.word	0x20001448
 8002abc:	431bde83 	.word	0x431bde83
 8002ac0:	40012300 	.word	0x40012300
 8002ac4:	40012000 	.word	0x40012000

08002ac8 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002ac8:	b580      	push	{r7, lr}
 8002aca:	b084      	sub	sp, #16
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	6078      	str	r0, [r7, #4]
 8002ad0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	689b      	ldr	r3, [r3, #8]
 8002adc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ae0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ae4:	d113      	bne.n	8002b0e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	689b      	ldr	r3, [r3, #8]
 8002aec:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002af0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002af4:	d10b      	bne.n	8002b0e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002afa:	f043 0220 	orr.w	r2, r3, #32
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002b0a:	2301      	movs	r3, #1
 8002b0c:	e063      	b.n	8002bd6 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002b0e:	f7ff feb3 	bl	8002878 <HAL_GetTick>
 8002b12:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b14:	e021      	b.n	8002b5a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002b16:	683b      	ldr	r3, [r7, #0]
 8002b18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002b1c:	d01d      	beq.n	8002b5a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002b1e:	683b      	ldr	r3, [r7, #0]
 8002b20:	2b00      	cmp	r3, #0
 8002b22:	d007      	beq.n	8002b34 <HAL_ADC_PollForConversion+0x6c>
 8002b24:	f7ff fea8 	bl	8002878 <HAL_GetTick>
 8002b28:	4602      	mov	r2, r0
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	1ad3      	subs	r3, r2, r3
 8002b2e:	683a      	ldr	r2, [r7, #0]
 8002b30:	429a      	cmp	r2, r3
 8002b32:	d212      	bcs.n	8002b5a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	2b02      	cmp	r3, #2
 8002b40:	d00b      	beq.n	8002b5a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b46:	f043 0204 	orr.w	r2, r3, #4
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2200      	movs	r2, #0
 8002b52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002b56:	2303      	movs	r3, #3
 8002b58:	e03d      	b.n	8002bd6 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	f003 0302 	and.w	r3, r3, #2
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d1d6      	bne.n	8002b16 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f06f 0212 	mvn.w	r2, #18
 8002b70:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b76:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	689b      	ldr	r3, [r3, #8]
 8002b84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d123      	bne.n	8002bd4 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d11f      	bne.n	8002bd4 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002b9a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d006      	beq.n	8002bb0 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002ba2:	687b      	ldr	r3, [r7, #4]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	689b      	ldr	r3, [r3, #8]
 8002ba8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	d111      	bne.n	8002bd4 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb4:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d105      	bne.n	8002bd4 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bcc:	f043 0201 	orr.w	r2, r3, #1
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002bd4:	2300      	movs	r3, #0
}
 8002bd6:	4618      	mov	r0, r3
 8002bd8:	3710      	adds	r7, #16
 8002bda:	46bd      	mov	sp, r7
 8002bdc:	bd80      	pop	{r7, pc}

08002bde <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002bde:	b480      	push	{r7}
 8002be0:	b083      	sub	sp, #12
 8002be2:	af00      	add	r7, sp, #0
 8002be4:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002bec:	4618      	mov	r0, r3
 8002bee:	370c      	adds	r7, #12
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bf6:	4770      	bx	lr

08002bf8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b085      	sub	sp, #20
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	6078      	str	r0, [r7, #4]
 8002c00:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002c02:	2300      	movs	r3, #0
 8002c04:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c0c:	2b01      	cmp	r3, #1
 8002c0e:	d101      	bne.n	8002c14 <HAL_ADC_ConfigChannel+0x1c>
 8002c10:	2302      	movs	r3, #2
 8002c12:	e105      	b.n	8002e20 <HAL_ADC_ConfigChannel+0x228>
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2201      	movs	r2, #1
 8002c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002c1c:	683b      	ldr	r3, [r7, #0]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	2b09      	cmp	r3, #9
 8002c22:	d925      	bls.n	8002c70 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	68d9      	ldr	r1, [r3, #12]
 8002c2a:	683b      	ldr	r3, [r7, #0]
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	b29b      	uxth	r3, r3
 8002c30:	461a      	mov	r2, r3
 8002c32:	4613      	mov	r3, r2
 8002c34:	005b      	lsls	r3, r3, #1
 8002c36:	4413      	add	r3, r2
 8002c38:	3b1e      	subs	r3, #30
 8002c3a:	2207      	movs	r2, #7
 8002c3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c40:	43da      	mvns	r2, r3
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	400a      	ands	r2, r1
 8002c48:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	681b      	ldr	r3, [r3, #0]
 8002c4e:	68d9      	ldr	r1, [r3, #12]
 8002c50:	683b      	ldr	r3, [r7, #0]
 8002c52:	689a      	ldr	r2, [r3, #8]
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	681b      	ldr	r3, [r3, #0]
 8002c58:	b29b      	uxth	r3, r3
 8002c5a:	4618      	mov	r0, r3
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	005b      	lsls	r3, r3, #1
 8002c60:	4403      	add	r3, r0
 8002c62:	3b1e      	subs	r3, #30
 8002c64:	409a      	lsls	r2, r3
 8002c66:	687b      	ldr	r3, [r7, #4]
 8002c68:	681b      	ldr	r3, [r3, #0]
 8002c6a:	430a      	orrs	r2, r1
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	e022      	b.n	8002cb6 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	6919      	ldr	r1, [r3, #16]
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	681b      	ldr	r3, [r3, #0]
 8002c7a:	b29b      	uxth	r3, r3
 8002c7c:	461a      	mov	r2, r3
 8002c7e:	4613      	mov	r3, r2
 8002c80:	005b      	lsls	r3, r3, #1
 8002c82:	4413      	add	r3, r2
 8002c84:	2207      	movs	r2, #7
 8002c86:	fa02 f303 	lsl.w	r3, r2, r3
 8002c8a:	43da      	mvns	r2, r3
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	400a      	ands	r2, r1
 8002c92:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002c94:	687b      	ldr	r3, [r7, #4]
 8002c96:	681b      	ldr	r3, [r3, #0]
 8002c98:	6919      	ldr	r1, [r3, #16]
 8002c9a:	683b      	ldr	r3, [r7, #0]
 8002c9c:	689a      	ldr	r2, [r3, #8]
 8002c9e:	683b      	ldr	r3, [r7, #0]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	b29b      	uxth	r3, r3
 8002ca4:	4618      	mov	r0, r3
 8002ca6:	4603      	mov	r3, r0
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	4403      	add	r3, r0
 8002cac:	409a      	lsls	r2, r3
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	430a      	orrs	r2, r1
 8002cb4:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	685b      	ldr	r3, [r3, #4]
 8002cba:	2b06      	cmp	r3, #6
 8002cbc:	d824      	bhi.n	8002d08 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002cc4:	683b      	ldr	r3, [r7, #0]
 8002cc6:	685a      	ldr	r2, [r3, #4]
 8002cc8:	4613      	mov	r3, r2
 8002cca:	009b      	lsls	r3, r3, #2
 8002ccc:	4413      	add	r3, r2
 8002cce:	3b05      	subs	r3, #5
 8002cd0:	221f      	movs	r2, #31
 8002cd2:	fa02 f303 	lsl.w	r3, r2, r3
 8002cd6:	43da      	mvns	r2, r3
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	681b      	ldr	r3, [r3, #0]
 8002cdc:	400a      	ands	r2, r1
 8002cde:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	681b      	ldr	r3, [r3, #0]
 8002ce4:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002ce6:	683b      	ldr	r3, [r7, #0]
 8002ce8:	681b      	ldr	r3, [r3, #0]
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	4618      	mov	r0, r3
 8002cee:	683b      	ldr	r3, [r7, #0]
 8002cf0:	685a      	ldr	r2, [r3, #4]
 8002cf2:	4613      	mov	r3, r2
 8002cf4:	009b      	lsls	r3, r3, #2
 8002cf6:	4413      	add	r3, r2
 8002cf8:	3b05      	subs	r3, #5
 8002cfa:	fa00 f203 	lsl.w	r2, r0, r3
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	430a      	orrs	r2, r1
 8002d04:	635a      	str	r2, [r3, #52]	; 0x34
 8002d06:	e04c      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002d08:	683b      	ldr	r3, [r7, #0]
 8002d0a:	685b      	ldr	r3, [r3, #4]
 8002d0c:	2b0c      	cmp	r3, #12
 8002d0e:	d824      	bhi.n	8002d5a <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685a      	ldr	r2, [r3, #4]
 8002d1a:	4613      	mov	r3, r2
 8002d1c:	009b      	lsls	r3, r3, #2
 8002d1e:	4413      	add	r3, r2
 8002d20:	3b23      	subs	r3, #35	; 0x23
 8002d22:	221f      	movs	r2, #31
 8002d24:	fa02 f303 	lsl.w	r3, r2, r3
 8002d28:	43da      	mvns	r2, r3
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	400a      	ands	r2, r1
 8002d30:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	b29b      	uxth	r3, r3
 8002d3e:	4618      	mov	r0, r3
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685a      	ldr	r2, [r3, #4]
 8002d44:	4613      	mov	r3, r2
 8002d46:	009b      	lsls	r3, r3, #2
 8002d48:	4413      	add	r3, r2
 8002d4a:	3b23      	subs	r3, #35	; 0x23
 8002d4c:	fa00 f203 	lsl.w	r2, r0, r3
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	430a      	orrs	r2, r1
 8002d56:	631a      	str	r2, [r3, #48]	; 0x30
 8002d58:	e023      	b.n	8002da2 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	685a      	ldr	r2, [r3, #4]
 8002d64:	4613      	mov	r3, r2
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	4413      	add	r3, r2
 8002d6a:	3b41      	subs	r3, #65	; 0x41
 8002d6c:	221f      	movs	r2, #31
 8002d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8002d72:	43da      	mvns	r2, r3
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	400a      	ands	r2, r1
 8002d7a:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002d7c:	687b      	ldr	r3, [r7, #4]
 8002d7e:	681b      	ldr	r3, [r3, #0]
 8002d80:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	b29b      	uxth	r3, r3
 8002d88:	4618      	mov	r0, r3
 8002d8a:	683b      	ldr	r3, [r7, #0]
 8002d8c:	685a      	ldr	r2, [r3, #4]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	009b      	lsls	r3, r3, #2
 8002d92:	4413      	add	r3, r2
 8002d94:	3b41      	subs	r3, #65	; 0x41
 8002d96:	fa00 f203 	lsl.w	r2, r0, r3
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	681b      	ldr	r3, [r3, #0]
 8002d9e:	430a      	orrs	r2, r1
 8002da0:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002da2:	4b22      	ldr	r3, [pc, #136]	; (8002e2c <HAL_ADC_ConfigChannel+0x234>)
 8002da4:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4a21      	ldr	r2, [pc, #132]	; (8002e30 <HAL_ADC_ConfigChannel+0x238>)
 8002dac:	4293      	cmp	r3, r2
 8002dae:	d109      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1cc>
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	2b12      	cmp	r3, #18
 8002db6:	d105      	bne.n	8002dc4 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	685b      	ldr	r3, [r3, #4]
 8002dbc:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	4a19      	ldr	r2, [pc, #100]	; (8002e30 <HAL_ADC_ConfigChannel+0x238>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d123      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x21e>
 8002dce:	683b      	ldr	r3, [r7, #0]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	2b10      	cmp	r3, #16
 8002dd4:	d003      	beq.n	8002dde <HAL_ADC_ConfigChannel+0x1e6>
 8002dd6:	683b      	ldr	r3, [r7, #0]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	2b11      	cmp	r3, #17
 8002ddc:	d11b      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002dde:	68fb      	ldr	r3, [r7, #12]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002dea:	683b      	ldr	r3, [r7, #0]
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	2b10      	cmp	r3, #16
 8002df0:	d111      	bne.n	8002e16 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002df2:	4b10      	ldr	r3, [pc, #64]	; (8002e34 <HAL_ADC_ConfigChannel+0x23c>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a10      	ldr	r2, [pc, #64]	; (8002e38 <HAL_ADC_ConfigChannel+0x240>)
 8002df8:	fba2 2303 	umull	r2, r3, r2, r3
 8002dfc:	0c9a      	lsrs	r2, r3, #18
 8002dfe:	4613      	mov	r3, r2
 8002e00:	009b      	lsls	r3, r3, #2
 8002e02:	4413      	add	r3, r2
 8002e04:	005b      	lsls	r3, r3, #1
 8002e06:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e08:	e002      	b.n	8002e10 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002e0a:	68bb      	ldr	r3, [r7, #8]
 8002e0c:	3b01      	subs	r3, #1
 8002e0e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002e10:	68bb      	ldr	r3, [r7, #8]
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	d1f9      	bne.n	8002e0a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	2200      	movs	r2, #0
 8002e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002e1e:	2300      	movs	r3, #0
}
 8002e20:	4618      	mov	r0, r3
 8002e22:	3714      	adds	r7, #20
 8002e24:	46bd      	mov	sp, r7
 8002e26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e2a:	4770      	bx	lr
 8002e2c:	40012300 	.word	0x40012300
 8002e30:	40012000 	.word	0x40012000
 8002e34:	20001448 	.word	0x20001448
 8002e38:	431bde83 	.word	0x431bde83

08002e3c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b085      	sub	sp, #20
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002e44:	4b79      	ldr	r3, [pc, #484]	; (800302c <ADC_Init+0x1f0>)
 8002e46:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002e50:	68fb      	ldr	r3, [r7, #12]
 8002e52:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	685a      	ldr	r2, [r3, #4]
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	685b      	ldr	r3, [r3, #4]
 8002e5c:	431a      	orrs	r2, r3
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	685a      	ldr	r2, [r3, #4]
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	681b      	ldr	r3, [r3, #0]
 8002e6c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002e70:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002e72:	687b      	ldr	r3, [r7, #4]
 8002e74:	681b      	ldr	r3, [r3, #0]
 8002e76:	6859      	ldr	r1, [r3, #4]
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	691b      	ldr	r3, [r3, #16]
 8002e7c:	021a      	lsls	r2, r3, #8
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	430a      	orrs	r2, r1
 8002e84:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002e86:	687b      	ldr	r3, [r7, #4]
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	685a      	ldr	r2, [r3, #4]
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002e94:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	6859      	ldr	r1, [r3, #4]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	689a      	ldr	r2, [r3, #8]
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	430a      	orrs	r2, r1
 8002ea6:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	681b      	ldr	r3, [r3, #0]
 8002eac:	689a      	ldr	r2, [r3, #8]
 8002eae:	687b      	ldr	r3, [r7, #4]
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002eb6:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	6899      	ldr	r1, [r3, #8]
 8002ebe:	687b      	ldr	r3, [r7, #4]
 8002ec0:	68da      	ldr	r2, [r3, #12]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	430a      	orrs	r2, r1
 8002ec8:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002ece:	4a58      	ldr	r2, [pc, #352]	; (8003030 <ADC_Init+0x1f4>)
 8002ed0:	4293      	cmp	r3, r2
 8002ed2:	d022      	beq.n	8002f1a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	689a      	ldr	r2, [r3, #8]
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	681b      	ldr	r3, [r3, #0]
 8002ede:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ee2:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	6899      	ldr	r1, [r3, #8]
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	681b      	ldr	r3, [r3, #0]
 8002ef2:	430a      	orrs	r2, r1
 8002ef4:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	681b      	ldr	r3, [r3, #0]
 8002efa:	689a      	ldr	r2, [r3, #8]
 8002efc:	687b      	ldr	r3, [r7, #4]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f04:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	6899      	ldr	r1, [r3, #8]
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	430a      	orrs	r2, r1
 8002f16:	609a      	str	r2, [r3, #8]
 8002f18:	e00f      	b.n	8002f3a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	689a      	ldr	r2, [r3, #8]
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002f28:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	689a      	ldr	r2, [r3, #8]
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	681b      	ldr	r3, [r3, #0]
 8002f34:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002f38:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	689a      	ldr	r2, [r3, #8]
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	f022 0202 	bic.w	r2, r2, #2
 8002f48:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002f4a:	687b      	ldr	r3, [r7, #4]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	6899      	ldr	r1, [r3, #8]
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	7e1b      	ldrb	r3, [r3, #24]
 8002f54:	005a      	lsls	r2, r3, #1
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	430a      	orrs	r2, r1
 8002f5c:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d01b      	beq.n	8002fa0 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	685a      	ldr	r2, [r3, #4]
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002f76:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	685a      	ldr	r2, [r3, #4]
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002f86:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	6859      	ldr	r1, [r3, #4]
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002f92:	3b01      	subs	r3, #1
 8002f94:	035a      	lsls	r2, r3, #13
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	430a      	orrs	r2, r1
 8002f9c:	605a      	str	r2, [r3, #4]
 8002f9e:	e007      	b.n	8002fb0 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	685a      	ldr	r2, [r3, #4]
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002fae:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002fb6:	687b      	ldr	r3, [r7, #4]
 8002fb8:	681b      	ldr	r3, [r3, #0]
 8002fba:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002fbe:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	69db      	ldr	r3, [r3, #28]
 8002fca:	3b01      	subs	r3, #1
 8002fcc:	051a      	lsls	r2, r3, #20
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	430a      	orrs	r2, r1
 8002fd4:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	689a      	ldr	r2, [r3, #8]
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	681b      	ldr	r3, [r3, #0]
 8002fe0:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002fe4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	6899      	ldr	r1, [r3, #8]
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002ff2:	025a      	lsls	r2, r3, #9
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	681b      	ldr	r3, [r3, #0]
 8002ff8:	430a      	orrs	r2, r1
 8002ffa:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002ffc:	687b      	ldr	r3, [r7, #4]
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	689a      	ldr	r2, [r3, #8]
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800300a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	6899      	ldr	r1, [r3, #8]
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	695b      	ldr	r3, [r3, #20]
 8003016:	029a      	lsls	r2, r3, #10
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	681b      	ldr	r3, [r3, #0]
 800301c:	430a      	orrs	r2, r1
 800301e:	609a      	str	r2, [r3, #8]
}
 8003020:	bf00      	nop
 8003022:	3714      	adds	r7, #20
 8003024:	46bd      	mov	sp, r7
 8003026:	f85d 7b04 	ldr.w	r7, [sp], #4
 800302a:	4770      	bx	lr
 800302c:	40012300 	.word	0x40012300
 8003030:	0f000001 	.word	0x0f000001

08003034 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003034:	b480      	push	{r7}
 8003036:	b085      	sub	sp, #20
 8003038:	af00      	add	r7, sp, #0
 800303a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	f003 0307 	and.w	r3, r3, #7
 8003042:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003044:	4b0c      	ldr	r3, [pc, #48]	; (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800304a:	68ba      	ldr	r2, [r7, #8]
 800304c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003050:	4013      	ands	r3, r2
 8003052:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003058:	68bb      	ldr	r3, [r7, #8]
 800305a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800305c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003060:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003064:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003066:	4a04      	ldr	r2, [pc, #16]	; (8003078 <__NVIC_SetPriorityGrouping+0x44>)
 8003068:	68bb      	ldr	r3, [r7, #8]
 800306a:	60d3      	str	r3, [r2, #12]
}
 800306c:	bf00      	nop
 800306e:	3714      	adds	r7, #20
 8003070:	46bd      	mov	sp, r7
 8003072:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003076:	4770      	bx	lr
 8003078:	e000ed00 	.word	0xe000ed00

0800307c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800307c:	b480      	push	{r7}
 800307e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003080:	4b04      	ldr	r3, [pc, #16]	; (8003094 <__NVIC_GetPriorityGrouping+0x18>)
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	0a1b      	lsrs	r3, r3, #8
 8003086:	f003 0307 	and.w	r3, r3, #7
}
 800308a:	4618      	mov	r0, r3
 800308c:	46bd      	mov	sp, r7
 800308e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003092:	4770      	bx	lr
 8003094:	e000ed00 	.word	0xe000ed00

08003098 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003098:	b480      	push	{r7}
 800309a:	b083      	sub	sp, #12
 800309c:	af00      	add	r7, sp, #0
 800309e:	4603      	mov	r3, r0
 80030a0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030a2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	db0b      	blt.n	80030c2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80030aa:	79fb      	ldrb	r3, [r7, #7]
 80030ac:	f003 021f 	and.w	r2, r3, #31
 80030b0:	4907      	ldr	r1, [pc, #28]	; (80030d0 <__NVIC_EnableIRQ+0x38>)
 80030b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030b6:	095b      	lsrs	r3, r3, #5
 80030b8:	2001      	movs	r0, #1
 80030ba:	fa00 f202 	lsl.w	r2, r0, r2
 80030be:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80030c2:	bf00      	nop
 80030c4:	370c      	adds	r7, #12
 80030c6:	46bd      	mov	sp, r7
 80030c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030cc:	4770      	bx	lr
 80030ce:	bf00      	nop
 80030d0:	e000e100 	.word	0xe000e100

080030d4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030d4:	b480      	push	{r7}
 80030d6:	b083      	sub	sp, #12
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	6039      	str	r1, [r7, #0]
 80030de:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030e0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	db0a      	blt.n	80030fe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030e8:	683b      	ldr	r3, [r7, #0]
 80030ea:	b2da      	uxtb	r2, r3
 80030ec:	490c      	ldr	r1, [pc, #48]	; (8003120 <__NVIC_SetPriority+0x4c>)
 80030ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030f2:	0112      	lsls	r2, r2, #4
 80030f4:	b2d2      	uxtb	r2, r2
 80030f6:	440b      	add	r3, r1
 80030f8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030fc:	e00a      	b.n	8003114 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030fe:	683b      	ldr	r3, [r7, #0]
 8003100:	b2da      	uxtb	r2, r3
 8003102:	4908      	ldr	r1, [pc, #32]	; (8003124 <__NVIC_SetPriority+0x50>)
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	f003 030f 	and.w	r3, r3, #15
 800310a:	3b04      	subs	r3, #4
 800310c:	0112      	lsls	r2, r2, #4
 800310e:	b2d2      	uxtb	r2, r2
 8003110:	440b      	add	r3, r1
 8003112:	761a      	strb	r2, [r3, #24]
}
 8003114:	bf00      	nop
 8003116:	370c      	adds	r7, #12
 8003118:	46bd      	mov	sp, r7
 800311a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311e:	4770      	bx	lr
 8003120:	e000e100 	.word	0xe000e100
 8003124:	e000ed00 	.word	0xe000ed00

08003128 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003128:	b480      	push	{r7}
 800312a:	b089      	sub	sp, #36	; 0x24
 800312c:	af00      	add	r7, sp, #0
 800312e:	60f8      	str	r0, [r7, #12]
 8003130:	60b9      	str	r1, [r7, #8]
 8003132:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 0307 	and.w	r3, r3, #7
 800313a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800313c:	69fb      	ldr	r3, [r7, #28]
 800313e:	f1c3 0307 	rsb	r3, r3, #7
 8003142:	2b04      	cmp	r3, #4
 8003144:	bf28      	it	cs
 8003146:	2304      	movcs	r3, #4
 8003148:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800314a:	69fb      	ldr	r3, [r7, #28]
 800314c:	3304      	adds	r3, #4
 800314e:	2b06      	cmp	r3, #6
 8003150:	d902      	bls.n	8003158 <NVIC_EncodePriority+0x30>
 8003152:	69fb      	ldr	r3, [r7, #28]
 8003154:	3b03      	subs	r3, #3
 8003156:	e000      	b.n	800315a <NVIC_EncodePriority+0x32>
 8003158:	2300      	movs	r3, #0
 800315a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800315c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003160:	69bb      	ldr	r3, [r7, #24]
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	43da      	mvns	r2, r3
 8003168:	68bb      	ldr	r3, [r7, #8]
 800316a:	401a      	ands	r2, r3
 800316c:	697b      	ldr	r3, [r7, #20]
 800316e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003170:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003174:	697b      	ldr	r3, [r7, #20]
 8003176:	fa01 f303 	lsl.w	r3, r1, r3
 800317a:	43d9      	mvns	r1, r3
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003180:	4313      	orrs	r3, r2
         );
}
 8003182:	4618      	mov	r0, r3
 8003184:	3724      	adds	r7, #36	; 0x24
 8003186:	46bd      	mov	sp, r7
 8003188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800318c:	4770      	bx	lr
	...

08003190 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003190:	b580      	push	{r7, lr}
 8003192:	b082      	sub	sp, #8
 8003194:	af00      	add	r7, sp, #0
 8003196:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	3b01      	subs	r3, #1
 800319c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80031a0:	d301      	bcc.n	80031a6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80031a2:	2301      	movs	r3, #1
 80031a4:	e00f      	b.n	80031c6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80031a6:	4a0a      	ldr	r2, [pc, #40]	; (80031d0 <SysTick_Config+0x40>)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	3b01      	subs	r3, #1
 80031ac:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80031ae:	210f      	movs	r1, #15
 80031b0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80031b4:	f7ff ff8e 	bl	80030d4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80031b8:	4b05      	ldr	r3, [pc, #20]	; (80031d0 <SysTick_Config+0x40>)
 80031ba:	2200      	movs	r2, #0
 80031bc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80031be:	4b04      	ldr	r3, [pc, #16]	; (80031d0 <SysTick_Config+0x40>)
 80031c0:	2207      	movs	r2, #7
 80031c2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80031c4:	2300      	movs	r3, #0
}
 80031c6:	4618      	mov	r0, r3
 80031c8:	3708      	adds	r7, #8
 80031ca:	46bd      	mov	sp, r7
 80031cc:	bd80      	pop	{r7, pc}
 80031ce:	bf00      	nop
 80031d0:	e000e010 	.word	0xe000e010

080031d4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031d4:	b580      	push	{r7, lr}
 80031d6:	b082      	sub	sp, #8
 80031d8:	af00      	add	r7, sp, #0
 80031da:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80031dc:	6878      	ldr	r0, [r7, #4]
 80031de:	f7ff ff29 	bl	8003034 <__NVIC_SetPriorityGrouping>
}
 80031e2:	bf00      	nop
 80031e4:	3708      	adds	r7, #8
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}

080031ea <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80031ea:	b580      	push	{r7, lr}
 80031ec:	b086      	sub	sp, #24
 80031ee:	af00      	add	r7, sp, #0
 80031f0:	4603      	mov	r3, r0
 80031f2:	60b9      	str	r1, [r7, #8]
 80031f4:	607a      	str	r2, [r7, #4]
 80031f6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031f8:	2300      	movs	r3, #0
 80031fa:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031fc:	f7ff ff3e 	bl	800307c <__NVIC_GetPriorityGrouping>
 8003200:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003202:	687a      	ldr	r2, [r7, #4]
 8003204:	68b9      	ldr	r1, [r7, #8]
 8003206:	6978      	ldr	r0, [r7, #20]
 8003208:	f7ff ff8e 	bl	8003128 <NVIC_EncodePriority>
 800320c:	4602      	mov	r2, r0
 800320e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003212:	4611      	mov	r1, r2
 8003214:	4618      	mov	r0, r3
 8003216:	f7ff ff5d 	bl	80030d4 <__NVIC_SetPriority>
}
 800321a:	bf00      	nop
 800321c:	3718      	adds	r7, #24
 800321e:	46bd      	mov	sp, r7
 8003220:	bd80      	pop	{r7, pc}

08003222 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003222:	b580      	push	{r7, lr}
 8003224:	b082      	sub	sp, #8
 8003226:	af00      	add	r7, sp, #0
 8003228:	4603      	mov	r3, r0
 800322a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800322c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003230:	4618      	mov	r0, r3
 8003232:	f7ff ff31 	bl	8003098 <__NVIC_EnableIRQ>
}
 8003236:	bf00      	nop
 8003238:	3708      	adds	r7, #8
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800323e:	b580      	push	{r7, lr}
 8003240:	b082      	sub	sp, #8
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003246:	6878      	ldr	r0, [r7, #4]
 8003248:	f7ff ffa2 	bl	8003190 <SysTick_Config>
 800324c:	4603      	mov	r3, r0
}
 800324e:	4618      	mov	r0, r3
 8003250:	3708      	adds	r7, #8
 8003252:	46bd      	mov	sp, r7
 8003254:	bd80      	pop	{r7, pc}

08003256 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003256:	b580      	push	{r7, lr}
 8003258:	b084      	sub	sp, #16
 800325a:	af00      	add	r7, sp, #0
 800325c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800325e:	687b      	ldr	r3, [r7, #4]
 8003260:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003262:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003264:	f7ff fb08 	bl	8002878 <HAL_GetTick>
 8003268:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003270:	b2db      	uxtb	r3, r3
 8003272:	2b02      	cmp	r3, #2
 8003274:	d008      	beq.n	8003288 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	2280      	movs	r2, #128	; 0x80
 800327a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2200      	movs	r2, #0
 8003280:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003284:	2301      	movs	r3, #1
 8003286:	e052      	b.n	800332e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	681b      	ldr	r3, [r3, #0]
 800328c:	681a      	ldr	r2, [r3, #0]
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f022 0216 	bic.w	r2, r2, #22
 8003296:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	695a      	ldr	r2, [r3, #20]
 800329e:	687b      	ldr	r3, [r7, #4]
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80032a6:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d103      	bne.n	80032b8 <HAL_DMA_Abort+0x62>
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80032b4:	2b00      	cmp	r3, #0
 80032b6:	d007      	beq.n	80032c8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	681a      	ldr	r2, [r3, #0]
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f022 0208 	bic.w	r2, r2, #8
 80032c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	681a      	ldr	r2, [r3, #0]
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	f022 0201 	bic.w	r2, r2, #1
 80032d6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80032d8:	e013      	b.n	8003302 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80032da:	f7ff facd 	bl	8002878 <HAL_GetTick>
 80032de:	4602      	mov	r2, r0
 80032e0:	68bb      	ldr	r3, [r7, #8]
 80032e2:	1ad3      	subs	r3, r2, r3
 80032e4:	2b05      	cmp	r3, #5
 80032e6:	d90c      	bls.n	8003302 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80032e8:	687b      	ldr	r3, [r7, #4]
 80032ea:	2220      	movs	r2, #32
 80032ec:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	2203      	movs	r2, #3
 80032f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	2200      	movs	r2, #0
 80032fa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80032fe:	2303      	movs	r3, #3
 8003300:	e015      	b.n	800332e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f003 0301 	and.w	r3, r3, #1
 800330c:	2b00      	cmp	r3, #0
 800330e:	d1e4      	bne.n	80032da <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003314:	223f      	movs	r2, #63	; 0x3f
 8003316:	409a      	lsls	r2, r3
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	2201      	movs	r2, #1
 8003320:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003336:	b480      	push	{r7}
 8003338:	b083      	sub	sp, #12
 800333a:	af00      	add	r7, sp, #0
 800333c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003344:	b2db      	uxtb	r3, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d004      	beq.n	8003354 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	2280      	movs	r2, #128	; 0x80
 800334e:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8003350:	2301      	movs	r3, #1
 8003352:	e00c      	b.n	800336e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2205      	movs	r2, #5
 8003358:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	681a      	ldr	r2, [r3, #0]
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f022 0201 	bic.w	r2, r2, #1
 800336a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800336c:	2300      	movs	r3, #0
}
 800336e:	4618      	mov	r0, r3
 8003370:	370c      	adds	r7, #12
 8003372:	46bd      	mov	sp, r7
 8003374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003378:	4770      	bx	lr
	...

0800337c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800337c:	b480      	push	{r7}
 800337e:	b089      	sub	sp, #36	; 0x24
 8003380:	af00      	add	r7, sp, #0
 8003382:	6078      	str	r0, [r7, #4]
 8003384:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003386:	2300      	movs	r3, #0
 8003388:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800338a:	2300      	movs	r3, #0
 800338c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800338e:	2300      	movs	r3, #0
 8003390:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003392:	2300      	movs	r3, #0
 8003394:	61fb      	str	r3, [r7, #28]
 8003396:	e159      	b.n	800364c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003398:	2201      	movs	r2, #1
 800339a:	69fb      	ldr	r3, [r7, #28]
 800339c:	fa02 f303 	lsl.w	r3, r2, r3
 80033a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	697a      	ldr	r2, [r7, #20]
 80033a8:	4013      	ands	r3, r2
 80033aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80033ac:	693a      	ldr	r2, [r7, #16]
 80033ae:	697b      	ldr	r3, [r7, #20]
 80033b0:	429a      	cmp	r2, r3
 80033b2:	f040 8148 	bne.w	8003646 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033b6:	683b      	ldr	r3, [r7, #0]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 0303 	and.w	r3, r3, #3
 80033be:	2b01      	cmp	r3, #1
 80033c0:	d005      	beq.n	80033ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80033c2:	683b      	ldr	r3, [r7, #0]
 80033c4:	685b      	ldr	r3, [r3, #4]
 80033c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d130      	bne.n	8003430 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80033ce:	687b      	ldr	r3, [r7, #4]
 80033d0:	689b      	ldr	r3, [r3, #8]
 80033d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80033d4:	69fb      	ldr	r3, [r7, #28]
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	2203      	movs	r2, #3
 80033da:	fa02 f303 	lsl.w	r3, r2, r3
 80033de:	43db      	mvns	r3, r3
 80033e0:	69ba      	ldr	r2, [r7, #24]
 80033e2:	4013      	ands	r3, r2
 80033e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80033e6:	683b      	ldr	r3, [r7, #0]
 80033e8:	68da      	ldr	r2, [r3, #12]
 80033ea:	69fb      	ldr	r3, [r7, #28]
 80033ec:	005b      	lsls	r3, r3, #1
 80033ee:	fa02 f303 	lsl.w	r3, r2, r3
 80033f2:	69ba      	ldr	r2, [r7, #24]
 80033f4:	4313      	orrs	r3, r2
 80033f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	69ba      	ldr	r2, [r7, #24]
 80033fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	685b      	ldr	r3, [r3, #4]
 8003402:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003404:	2201      	movs	r2, #1
 8003406:	69fb      	ldr	r3, [r7, #28]
 8003408:	fa02 f303 	lsl.w	r3, r2, r3
 800340c:	43db      	mvns	r3, r3
 800340e:	69ba      	ldr	r2, [r7, #24]
 8003410:	4013      	ands	r3, r2
 8003412:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003414:	683b      	ldr	r3, [r7, #0]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	091b      	lsrs	r3, r3, #4
 800341a:	f003 0201 	and.w	r2, r3, #1
 800341e:	69fb      	ldr	r3, [r7, #28]
 8003420:	fa02 f303 	lsl.w	r3, r2, r3
 8003424:	69ba      	ldr	r2, [r7, #24]
 8003426:	4313      	orrs	r3, r2
 8003428:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	685b      	ldr	r3, [r3, #4]
 8003434:	f003 0303 	and.w	r3, r3, #3
 8003438:	2b03      	cmp	r3, #3
 800343a:	d017      	beq.n	800346c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	68db      	ldr	r3, [r3, #12]
 8003440:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003442:	69fb      	ldr	r3, [r7, #28]
 8003444:	005b      	lsls	r3, r3, #1
 8003446:	2203      	movs	r2, #3
 8003448:	fa02 f303 	lsl.w	r3, r2, r3
 800344c:	43db      	mvns	r3, r3
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	4013      	ands	r3, r2
 8003452:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003454:	683b      	ldr	r3, [r7, #0]
 8003456:	689a      	ldr	r2, [r3, #8]
 8003458:	69fb      	ldr	r3, [r7, #28]
 800345a:	005b      	lsls	r3, r3, #1
 800345c:	fa02 f303 	lsl.w	r3, r2, r3
 8003460:	69ba      	ldr	r2, [r7, #24]
 8003462:	4313      	orrs	r3, r2
 8003464:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003466:	687b      	ldr	r3, [r7, #4]
 8003468:	69ba      	ldr	r2, [r7, #24]
 800346a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f003 0303 	and.w	r3, r3, #3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d123      	bne.n	80034c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003478:	69fb      	ldr	r3, [r7, #28]
 800347a:	08da      	lsrs	r2, r3, #3
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	3208      	adds	r2, #8
 8003480:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003484:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003486:	69fb      	ldr	r3, [r7, #28]
 8003488:	f003 0307 	and.w	r3, r3, #7
 800348c:	009b      	lsls	r3, r3, #2
 800348e:	220f      	movs	r2, #15
 8003490:	fa02 f303 	lsl.w	r3, r2, r3
 8003494:	43db      	mvns	r3, r3
 8003496:	69ba      	ldr	r2, [r7, #24]
 8003498:	4013      	ands	r3, r2
 800349a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800349c:	683b      	ldr	r3, [r7, #0]
 800349e:	691a      	ldr	r2, [r3, #16]
 80034a0:	69fb      	ldr	r3, [r7, #28]
 80034a2:	f003 0307 	and.w	r3, r3, #7
 80034a6:	009b      	lsls	r3, r3, #2
 80034a8:	fa02 f303 	lsl.w	r3, r2, r3
 80034ac:	69ba      	ldr	r2, [r7, #24]
 80034ae:	4313      	orrs	r3, r2
 80034b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	08da      	lsrs	r2, r3, #3
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	3208      	adds	r2, #8
 80034ba:	69b9      	ldr	r1, [r7, #24]
 80034bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80034c6:	69fb      	ldr	r3, [r7, #28]
 80034c8:	005b      	lsls	r3, r3, #1
 80034ca:	2203      	movs	r2, #3
 80034cc:	fa02 f303 	lsl.w	r3, r2, r3
 80034d0:	43db      	mvns	r3, r3
 80034d2:	69ba      	ldr	r2, [r7, #24]
 80034d4:	4013      	ands	r3, r2
 80034d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	685b      	ldr	r3, [r3, #4]
 80034dc:	f003 0203 	and.w	r2, r3, #3
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	fa02 f303 	lsl.w	r3, r2, r3
 80034e8:	69ba      	ldr	r2, [r7, #24]
 80034ea:	4313      	orrs	r3, r2
 80034ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69ba      	ldr	r2, [r7, #24]
 80034f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80034f4:	683b      	ldr	r3, [r7, #0]
 80034f6:	685b      	ldr	r3, [r3, #4]
 80034f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f000 80a2 	beq.w	8003646 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003502:	2300      	movs	r3, #0
 8003504:	60fb      	str	r3, [r7, #12]
 8003506:	4b57      	ldr	r3, [pc, #348]	; (8003664 <HAL_GPIO_Init+0x2e8>)
 8003508:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800350a:	4a56      	ldr	r2, [pc, #344]	; (8003664 <HAL_GPIO_Init+0x2e8>)
 800350c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003510:	6453      	str	r3, [r2, #68]	; 0x44
 8003512:	4b54      	ldr	r3, [pc, #336]	; (8003664 <HAL_GPIO_Init+0x2e8>)
 8003514:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003516:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800351a:	60fb      	str	r3, [r7, #12]
 800351c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800351e:	4a52      	ldr	r2, [pc, #328]	; (8003668 <HAL_GPIO_Init+0x2ec>)
 8003520:	69fb      	ldr	r3, [r7, #28]
 8003522:	089b      	lsrs	r3, r3, #2
 8003524:	3302      	adds	r3, #2
 8003526:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800352a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800352c:	69fb      	ldr	r3, [r7, #28]
 800352e:	f003 0303 	and.w	r3, r3, #3
 8003532:	009b      	lsls	r3, r3, #2
 8003534:	220f      	movs	r2, #15
 8003536:	fa02 f303 	lsl.w	r3, r2, r3
 800353a:	43db      	mvns	r3, r3
 800353c:	69ba      	ldr	r2, [r7, #24]
 800353e:	4013      	ands	r3, r2
 8003540:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	4a49      	ldr	r2, [pc, #292]	; (800366c <HAL_GPIO_Init+0x2f0>)
 8003546:	4293      	cmp	r3, r2
 8003548:	d019      	beq.n	800357e <HAL_GPIO_Init+0x202>
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	4a48      	ldr	r2, [pc, #288]	; (8003670 <HAL_GPIO_Init+0x2f4>)
 800354e:	4293      	cmp	r3, r2
 8003550:	d013      	beq.n	800357a <HAL_GPIO_Init+0x1fe>
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	4a47      	ldr	r2, [pc, #284]	; (8003674 <HAL_GPIO_Init+0x2f8>)
 8003556:	4293      	cmp	r3, r2
 8003558:	d00d      	beq.n	8003576 <HAL_GPIO_Init+0x1fa>
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	4a46      	ldr	r2, [pc, #280]	; (8003678 <HAL_GPIO_Init+0x2fc>)
 800355e:	4293      	cmp	r3, r2
 8003560:	d007      	beq.n	8003572 <HAL_GPIO_Init+0x1f6>
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	4a45      	ldr	r2, [pc, #276]	; (800367c <HAL_GPIO_Init+0x300>)
 8003566:	4293      	cmp	r3, r2
 8003568:	d101      	bne.n	800356e <HAL_GPIO_Init+0x1f2>
 800356a:	2304      	movs	r3, #4
 800356c:	e008      	b.n	8003580 <HAL_GPIO_Init+0x204>
 800356e:	2307      	movs	r3, #7
 8003570:	e006      	b.n	8003580 <HAL_GPIO_Init+0x204>
 8003572:	2303      	movs	r3, #3
 8003574:	e004      	b.n	8003580 <HAL_GPIO_Init+0x204>
 8003576:	2302      	movs	r3, #2
 8003578:	e002      	b.n	8003580 <HAL_GPIO_Init+0x204>
 800357a:	2301      	movs	r3, #1
 800357c:	e000      	b.n	8003580 <HAL_GPIO_Init+0x204>
 800357e:	2300      	movs	r3, #0
 8003580:	69fa      	ldr	r2, [r7, #28]
 8003582:	f002 0203 	and.w	r2, r2, #3
 8003586:	0092      	lsls	r2, r2, #2
 8003588:	4093      	lsls	r3, r2
 800358a:	69ba      	ldr	r2, [r7, #24]
 800358c:	4313      	orrs	r3, r2
 800358e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003590:	4935      	ldr	r1, [pc, #212]	; (8003668 <HAL_GPIO_Init+0x2ec>)
 8003592:	69fb      	ldr	r3, [r7, #28]
 8003594:	089b      	lsrs	r3, r3, #2
 8003596:	3302      	adds	r3, #2
 8003598:	69ba      	ldr	r2, [r7, #24]
 800359a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800359e:	4b38      	ldr	r3, [pc, #224]	; (8003680 <HAL_GPIO_Init+0x304>)
 80035a0:	689b      	ldr	r3, [r3, #8]
 80035a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035a4:	693b      	ldr	r3, [r7, #16]
 80035a6:	43db      	mvns	r3, r3
 80035a8:	69ba      	ldr	r2, [r7, #24]
 80035aa:	4013      	ands	r3, r2
 80035ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80035ae:	683b      	ldr	r3, [r7, #0]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d003      	beq.n	80035c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80035ba:	69ba      	ldr	r2, [r7, #24]
 80035bc:	693b      	ldr	r3, [r7, #16]
 80035be:	4313      	orrs	r3, r2
 80035c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80035c2:	4a2f      	ldr	r2, [pc, #188]	; (8003680 <HAL_GPIO_Init+0x304>)
 80035c4:	69bb      	ldr	r3, [r7, #24]
 80035c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80035c8:	4b2d      	ldr	r3, [pc, #180]	; (8003680 <HAL_GPIO_Init+0x304>)
 80035ca:	68db      	ldr	r3, [r3, #12]
 80035cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035ce:	693b      	ldr	r3, [r7, #16]
 80035d0:	43db      	mvns	r3, r3
 80035d2:	69ba      	ldr	r2, [r7, #24]
 80035d4:	4013      	ands	r3, r2
 80035d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80035d8:	683b      	ldr	r3, [r7, #0]
 80035da:	685b      	ldr	r3, [r3, #4]
 80035dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d003      	beq.n	80035ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80035e4:	69ba      	ldr	r2, [r7, #24]
 80035e6:	693b      	ldr	r3, [r7, #16]
 80035e8:	4313      	orrs	r3, r2
 80035ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80035ec:	4a24      	ldr	r2, [pc, #144]	; (8003680 <HAL_GPIO_Init+0x304>)
 80035ee:	69bb      	ldr	r3, [r7, #24]
 80035f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80035f2:	4b23      	ldr	r3, [pc, #140]	; (8003680 <HAL_GPIO_Init+0x304>)
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80035f8:	693b      	ldr	r3, [r7, #16]
 80035fa:	43db      	mvns	r3, r3
 80035fc:	69ba      	ldr	r2, [r7, #24]
 80035fe:	4013      	ands	r3, r2
 8003600:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003602:	683b      	ldr	r3, [r7, #0]
 8003604:	685b      	ldr	r3, [r3, #4]
 8003606:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800360a:	2b00      	cmp	r3, #0
 800360c:	d003      	beq.n	8003616 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800360e:	69ba      	ldr	r2, [r7, #24]
 8003610:	693b      	ldr	r3, [r7, #16]
 8003612:	4313      	orrs	r3, r2
 8003614:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003616:	4a1a      	ldr	r2, [pc, #104]	; (8003680 <HAL_GPIO_Init+0x304>)
 8003618:	69bb      	ldr	r3, [r7, #24]
 800361a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800361c:	4b18      	ldr	r3, [pc, #96]	; (8003680 <HAL_GPIO_Init+0x304>)
 800361e:	681b      	ldr	r3, [r3, #0]
 8003620:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003622:	693b      	ldr	r3, [r7, #16]
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d003      	beq.n	8003640 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003638:	69ba      	ldr	r2, [r7, #24]
 800363a:	693b      	ldr	r3, [r7, #16]
 800363c:	4313      	orrs	r3, r2
 800363e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003640:	4a0f      	ldr	r2, [pc, #60]	; (8003680 <HAL_GPIO_Init+0x304>)
 8003642:	69bb      	ldr	r3, [r7, #24]
 8003644:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003646:	69fb      	ldr	r3, [r7, #28]
 8003648:	3301      	adds	r3, #1
 800364a:	61fb      	str	r3, [r7, #28]
 800364c:	69fb      	ldr	r3, [r7, #28]
 800364e:	2b0f      	cmp	r3, #15
 8003650:	f67f aea2 	bls.w	8003398 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003654:	bf00      	nop
 8003656:	bf00      	nop
 8003658:	3724      	adds	r7, #36	; 0x24
 800365a:	46bd      	mov	sp, r7
 800365c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003660:	4770      	bx	lr
 8003662:	bf00      	nop
 8003664:	40023800 	.word	0x40023800
 8003668:	40013800 	.word	0x40013800
 800366c:	40020000 	.word	0x40020000
 8003670:	40020400 	.word	0x40020400
 8003674:	40020800 	.word	0x40020800
 8003678:	40020c00 	.word	0x40020c00
 800367c:	40021000 	.word	0x40021000
 8003680:	40013c00 	.word	0x40013c00

08003684 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003684:	b480      	push	{r7}
 8003686:	b085      	sub	sp, #20
 8003688:	af00      	add	r7, sp, #0
 800368a:	6078      	str	r0, [r7, #4]
 800368c:	460b      	mov	r3, r1
 800368e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	691a      	ldr	r2, [r3, #16]
 8003694:	887b      	ldrh	r3, [r7, #2]
 8003696:	4013      	ands	r3, r2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d002      	beq.n	80036a2 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800369c:	2301      	movs	r3, #1
 800369e:	73fb      	strb	r3, [r7, #15]
 80036a0:	e001      	b.n	80036a6 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80036a2:	2300      	movs	r3, #0
 80036a4:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80036a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80036a8:	4618      	mov	r0, r3
 80036aa:	3714      	adds	r7, #20
 80036ac:	46bd      	mov	sp, r7
 80036ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036b2:	4770      	bx	lr

080036b4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80036b4:	b480      	push	{r7}
 80036b6:	b083      	sub	sp, #12
 80036b8:	af00      	add	r7, sp, #0
 80036ba:	6078      	str	r0, [r7, #4]
 80036bc:	460b      	mov	r3, r1
 80036be:	807b      	strh	r3, [r7, #2]
 80036c0:	4613      	mov	r3, r2
 80036c2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80036c4:	787b      	ldrb	r3, [r7, #1]
 80036c6:	2b00      	cmp	r3, #0
 80036c8:	d003      	beq.n	80036d2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80036ca:	887a      	ldrh	r2, [r7, #2]
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80036d0:	e003      	b.n	80036da <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80036d2:	887b      	ldrh	r3, [r7, #2]
 80036d4:	041a      	lsls	r2, r3, #16
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	619a      	str	r2, [r3, #24]
}
 80036da:	bf00      	nop
 80036dc:	370c      	adds	r7, #12
 80036de:	46bd      	mov	sp, r7
 80036e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036e4:	4770      	bx	lr
	...

080036e8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b084      	sub	sp, #16
 80036ec:	af00      	add	r7, sp, #0
 80036ee:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d101      	bne.n	80036fa <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80036f6:	2301      	movs	r3, #1
 80036f8:	e12b      	b.n	8003952 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003700:	b2db      	uxtb	r3, r3
 8003702:	2b00      	cmp	r3, #0
 8003704:	d106      	bne.n	8003714 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	2200      	movs	r2, #0
 800370a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800370e:	6878      	ldr	r0, [r7, #4]
 8003710:	f7fe fd74 	bl	80021fc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	2224      	movs	r2, #36	; 0x24
 8003718:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	681a      	ldr	r2, [r3, #0]
 8003722:	687b      	ldr	r3, [r7, #4]
 8003724:	681b      	ldr	r3, [r3, #0]
 8003726:	f022 0201 	bic.w	r2, r2, #1
 800372a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	681b      	ldr	r3, [r3, #0]
 8003730:	681a      	ldr	r2, [r3, #0]
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	681b      	ldr	r3, [r3, #0]
 8003736:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800373a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	681a      	ldr	r2, [r3, #0]
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800374a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800374c:	f001 f888 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 8003750:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	4a81      	ldr	r2, [pc, #516]	; (800395c <HAL_I2C_Init+0x274>)
 8003758:	4293      	cmp	r3, r2
 800375a:	d807      	bhi.n	800376c <HAL_I2C_Init+0x84>
 800375c:	68fb      	ldr	r3, [r7, #12]
 800375e:	4a80      	ldr	r2, [pc, #512]	; (8003960 <HAL_I2C_Init+0x278>)
 8003760:	4293      	cmp	r3, r2
 8003762:	bf94      	ite	ls
 8003764:	2301      	movls	r3, #1
 8003766:	2300      	movhi	r3, #0
 8003768:	b2db      	uxtb	r3, r3
 800376a:	e006      	b.n	800377a <HAL_I2C_Init+0x92>
 800376c:	68fb      	ldr	r3, [r7, #12]
 800376e:	4a7d      	ldr	r2, [pc, #500]	; (8003964 <HAL_I2C_Init+0x27c>)
 8003770:	4293      	cmp	r3, r2
 8003772:	bf94      	ite	ls
 8003774:	2301      	movls	r3, #1
 8003776:	2300      	movhi	r3, #0
 8003778:	b2db      	uxtb	r3, r3
 800377a:	2b00      	cmp	r3, #0
 800377c:	d001      	beq.n	8003782 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800377e:	2301      	movs	r3, #1
 8003780:	e0e7      	b.n	8003952 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	4a78      	ldr	r2, [pc, #480]	; (8003968 <HAL_I2C_Init+0x280>)
 8003786:	fba2 2303 	umull	r2, r3, r2, r3
 800378a:	0c9b      	lsrs	r3, r3, #18
 800378c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685b      	ldr	r3, [r3, #4]
 8003794:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	68ba      	ldr	r2, [r7, #8]
 800379e:	430a      	orrs	r2, r1
 80037a0:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	6a1b      	ldr	r3, [r3, #32]
 80037a8:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	685b      	ldr	r3, [r3, #4]
 80037b0:	4a6a      	ldr	r2, [pc, #424]	; (800395c <HAL_I2C_Init+0x274>)
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d802      	bhi.n	80037bc <HAL_I2C_Init+0xd4>
 80037b6:	68bb      	ldr	r3, [r7, #8]
 80037b8:	3301      	adds	r3, #1
 80037ba:	e009      	b.n	80037d0 <HAL_I2C_Init+0xe8>
 80037bc:	68bb      	ldr	r3, [r7, #8]
 80037be:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80037c2:	fb02 f303 	mul.w	r3, r2, r3
 80037c6:	4a69      	ldr	r2, [pc, #420]	; (800396c <HAL_I2C_Init+0x284>)
 80037c8:	fba2 2303 	umull	r2, r3, r2, r3
 80037cc:	099b      	lsrs	r3, r3, #6
 80037ce:	3301      	adds	r3, #1
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	6812      	ldr	r2, [r2, #0]
 80037d4:	430b      	orrs	r3, r1
 80037d6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	69db      	ldr	r3, [r3, #28]
 80037de:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80037e2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	495c      	ldr	r1, [pc, #368]	; (800395c <HAL_I2C_Init+0x274>)
 80037ec:	428b      	cmp	r3, r1
 80037ee:	d819      	bhi.n	8003824 <HAL_I2C_Init+0x13c>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	1e59      	subs	r1, r3, #1
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	685b      	ldr	r3, [r3, #4]
 80037f8:	005b      	lsls	r3, r3, #1
 80037fa:	fbb1 f3f3 	udiv	r3, r1, r3
 80037fe:	1c59      	adds	r1, r3, #1
 8003800:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003804:	400b      	ands	r3, r1
 8003806:	2b00      	cmp	r3, #0
 8003808:	d00a      	beq.n	8003820 <HAL_I2C_Init+0x138>
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	1e59      	subs	r1, r3, #1
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	685b      	ldr	r3, [r3, #4]
 8003812:	005b      	lsls	r3, r3, #1
 8003814:	fbb1 f3f3 	udiv	r3, r1, r3
 8003818:	3301      	adds	r3, #1
 800381a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800381e:	e051      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003820:	2304      	movs	r3, #4
 8003822:	e04f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	689b      	ldr	r3, [r3, #8]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d111      	bne.n	8003850 <HAL_I2C_Init+0x168>
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	1e58      	subs	r0, r3, #1
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	6859      	ldr	r1, [r3, #4]
 8003834:	460b      	mov	r3, r1
 8003836:	005b      	lsls	r3, r3, #1
 8003838:	440b      	add	r3, r1
 800383a:	fbb0 f3f3 	udiv	r3, r0, r3
 800383e:	3301      	adds	r3, #1
 8003840:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003844:	2b00      	cmp	r3, #0
 8003846:	bf0c      	ite	eq
 8003848:	2301      	moveq	r3, #1
 800384a:	2300      	movne	r3, #0
 800384c:	b2db      	uxtb	r3, r3
 800384e:	e012      	b.n	8003876 <HAL_I2C_Init+0x18e>
 8003850:	68fb      	ldr	r3, [r7, #12]
 8003852:	1e58      	subs	r0, r3, #1
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6859      	ldr	r1, [r3, #4]
 8003858:	460b      	mov	r3, r1
 800385a:	009b      	lsls	r3, r3, #2
 800385c:	440b      	add	r3, r1
 800385e:	0099      	lsls	r1, r3, #2
 8003860:	440b      	add	r3, r1
 8003862:	fbb0 f3f3 	udiv	r3, r0, r3
 8003866:	3301      	adds	r3, #1
 8003868:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800386c:	2b00      	cmp	r3, #0
 800386e:	bf0c      	ite	eq
 8003870:	2301      	moveq	r3, #1
 8003872:	2300      	movne	r3, #0
 8003874:	b2db      	uxtb	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d001      	beq.n	800387e <HAL_I2C_Init+0x196>
 800387a:	2301      	movs	r3, #1
 800387c:	e022      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	689b      	ldr	r3, [r3, #8]
 8003882:	2b00      	cmp	r3, #0
 8003884:	d10e      	bne.n	80038a4 <HAL_I2C_Init+0x1bc>
 8003886:	68fb      	ldr	r3, [r7, #12]
 8003888:	1e58      	subs	r0, r3, #1
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	6859      	ldr	r1, [r3, #4]
 800388e:	460b      	mov	r3, r1
 8003890:	005b      	lsls	r3, r3, #1
 8003892:	440b      	add	r3, r1
 8003894:	fbb0 f3f3 	udiv	r3, r0, r3
 8003898:	3301      	adds	r3, #1
 800389a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800389e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80038a2:	e00f      	b.n	80038c4 <HAL_I2C_Init+0x1dc>
 80038a4:	68fb      	ldr	r3, [r7, #12]
 80038a6:	1e58      	subs	r0, r3, #1
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	6859      	ldr	r1, [r3, #4]
 80038ac:	460b      	mov	r3, r1
 80038ae:	009b      	lsls	r3, r3, #2
 80038b0:	440b      	add	r3, r1
 80038b2:	0099      	lsls	r1, r3, #2
 80038b4:	440b      	add	r3, r1
 80038b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038ba:	3301      	adds	r3, #1
 80038bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038c0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80038c4:	6879      	ldr	r1, [r7, #4]
 80038c6:	6809      	ldr	r1, [r1, #0]
 80038c8:	4313      	orrs	r3, r2
 80038ca:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	69da      	ldr	r2, [r3, #28]
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	6a1b      	ldr	r3, [r3, #32]
 80038de:	431a      	orrs	r2, r3
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	430a      	orrs	r2, r1
 80038e6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80038f2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80038f6:	687a      	ldr	r2, [r7, #4]
 80038f8:	6911      	ldr	r1, [r2, #16]
 80038fa:	687a      	ldr	r2, [r7, #4]
 80038fc:	68d2      	ldr	r2, [r2, #12]
 80038fe:	4311      	orrs	r1, r2
 8003900:	687a      	ldr	r2, [r7, #4]
 8003902:	6812      	ldr	r2, [r2, #0]
 8003904:	430b      	orrs	r3, r1
 8003906:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	68db      	ldr	r3, [r3, #12]
 800390e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	695a      	ldr	r2, [r3, #20]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	699b      	ldr	r3, [r3, #24]
 800391a:	431a      	orrs	r2, r3
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	430a      	orrs	r2, r1
 8003922:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	681a      	ldr	r2, [r3, #0]
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	681b      	ldr	r3, [r3, #0]
 800392e:	f042 0201 	orr.w	r2, r2, #1
 8003932:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2200      	movs	r2, #0
 8003938:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	2220      	movs	r2, #32
 800393e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	2200      	movs	r2, #0
 8003946:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2200      	movs	r2, #0
 800394c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003950:	2300      	movs	r3, #0
}
 8003952:	4618      	mov	r0, r3
 8003954:	3710      	adds	r7, #16
 8003956:	46bd      	mov	sp, r7
 8003958:	bd80      	pop	{r7, pc}
 800395a:	bf00      	nop
 800395c:	000186a0 	.word	0x000186a0
 8003960:	001e847f 	.word	0x001e847f
 8003964:	003d08ff 	.word	0x003d08ff
 8003968:	431bde83 	.word	0x431bde83
 800396c:	10624dd3 	.word	0x10624dd3

08003970 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b088      	sub	sp, #32
 8003974:	af02      	add	r7, sp, #8
 8003976:	60f8      	str	r0, [r7, #12]
 8003978:	607a      	str	r2, [r7, #4]
 800397a:	461a      	mov	r2, r3
 800397c:	460b      	mov	r3, r1
 800397e:	817b      	strh	r3, [r7, #10]
 8003980:	4613      	mov	r3, r2
 8003982:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003984:	f7fe ff78 	bl	8002878 <HAL_GetTick>
 8003988:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800398a:	68fb      	ldr	r3, [r7, #12]
 800398c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003990:	b2db      	uxtb	r3, r3
 8003992:	2b20      	cmp	r3, #32
 8003994:	f040 80e0 	bne.w	8003b58 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003998:	697b      	ldr	r3, [r7, #20]
 800399a:	9300      	str	r3, [sp, #0]
 800399c:	2319      	movs	r3, #25
 800399e:	2201      	movs	r2, #1
 80039a0:	4970      	ldr	r1, [pc, #448]	; (8003b64 <HAL_I2C_Master_Transmit+0x1f4>)
 80039a2:	68f8      	ldr	r0, [r7, #12]
 80039a4:	f000 f964 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 80039a8:	4603      	mov	r3, r0
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d001      	beq.n	80039b2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80039ae:	2302      	movs	r3, #2
 80039b0:	e0d3      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d101      	bne.n	80039c0 <HAL_I2C_Master_Transmit+0x50>
 80039bc:	2302      	movs	r3, #2
 80039be:	e0cc      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681b      	ldr	r3, [r3, #0]
 80039ce:	f003 0301 	and.w	r3, r3, #1
 80039d2:	2b01      	cmp	r3, #1
 80039d4:	d007      	beq.n	80039e6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039d6:	68fb      	ldr	r3, [r7, #12]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	681a      	ldr	r2, [r3, #0]
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039e6:	68fb      	ldr	r3, [r7, #12]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	681a      	ldr	r2, [r3, #0]
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80039f4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	2221      	movs	r2, #33	; 0x21
 80039fa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2210      	movs	r2, #16
 8003a02:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	687a      	ldr	r2, [r7, #4]
 8003a10:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	893a      	ldrh	r2, [r7, #8]
 8003a16:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003a18:	68fb      	ldr	r3, [r7, #12]
 8003a1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a1c:	b29a      	uxth	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a22:	68fb      	ldr	r3, [r7, #12]
 8003a24:	4a50      	ldr	r2, [pc, #320]	; (8003b68 <HAL_I2C_Master_Transmit+0x1f8>)
 8003a26:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003a28:	8979      	ldrh	r1, [r7, #10]
 8003a2a:	697b      	ldr	r3, [r7, #20]
 8003a2c:	6a3a      	ldr	r2, [r7, #32]
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 f89c 	bl	8003b6c <I2C_MasterRequestWrite>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d001      	beq.n	8003a3e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003a3a:	2301      	movs	r3, #1
 8003a3c:	e08d      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003a3e:	2300      	movs	r3, #0
 8003a40:	613b      	str	r3, [r7, #16]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	613b      	str	r3, [r7, #16]
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	699b      	ldr	r3, [r3, #24]
 8003a50:	613b      	str	r3, [r7, #16]
 8003a52:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003a54:	e066      	b.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a56:	697a      	ldr	r2, [r7, #20]
 8003a58:	6a39      	ldr	r1, [r7, #32]
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f000 f9de 	bl	8003e1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003a60:	4603      	mov	r3, r0
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d00d      	beq.n	8003a82 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a6a:	2b04      	cmp	r3, #4
 8003a6c:	d107      	bne.n	8003a7e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	681a      	ldr	r2, [r3, #0]
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003a7c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a7e:	2301      	movs	r3, #1
 8003a80:	e06b      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a86:	781a      	ldrb	r2, [r3, #0]
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a92:	1c5a      	adds	r2, r3, #1
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a9c:	b29b      	uxth	r3, r3
 8003a9e:	3b01      	subs	r3, #1
 8003aa0:	b29a      	uxth	r2, r3
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003aaa:	3b01      	subs	r3, #1
 8003aac:	b29a      	uxth	r2, r3
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	695b      	ldr	r3, [r3, #20]
 8003ab8:	f003 0304 	and.w	r3, r3, #4
 8003abc:	2b04      	cmp	r3, #4
 8003abe:	d11b      	bne.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d017      	beq.n	8003af8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003acc:	781a      	ldrb	r2, [r3, #0]
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ad8:	1c5a      	adds	r2, r3, #1
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ae2:	b29b      	uxth	r3, r3
 8003ae4:	3b01      	subs	r3, #1
 8003ae6:	b29a      	uxth	r2, r3
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003af0:	3b01      	subs	r3, #1
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	68fb      	ldr	r3, [r7, #12]
 8003af6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003af8:	697a      	ldr	r2, [r7, #20]
 8003afa:	6a39      	ldr	r1, [r7, #32]
 8003afc:	68f8      	ldr	r0, [r7, #12]
 8003afe:	f000 f9ce 	bl	8003e9e <I2C_WaitOnBTFFlagUntilTimeout>
 8003b02:	4603      	mov	r3, r0
 8003b04:	2b00      	cmp	r3, #0
 8003b06:	d00d      	beq.n	8003b24 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b0c:	2b04      	cmp	r3, #4
 8003b0e:	d107      	bne.n	8003b20 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	681a      	ldr	r2, [r3, #0]
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b1e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b20:	2301      	movs	r3, #1
 8003b22:	e01a      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b28:	2b00      	cmp	r3, #0
 8003b2a:	d194      	bne.n	8003a56 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	681b      	ldr	r3, [r3, #0]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b3a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	2220      	movs	r2, #32
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2200      	movs	r2, #0
 8003b48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003b54:	2300      	movs	r3, #0
 8003b56:	e000      	b.n	8003b5a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003b58:	2302      	movs	r3, #2
  }
}
 8003b5a:	4618      	mov	r0, r3
 8003b5c:	3718      	adds	r7, #24
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	00100002 	.word	0x00100002
 8003b68:	ffff0000 	.word	0xffff0000

08003b6c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003b6c:	b580      	push	{r7, lr}
 8003b6e:	b088      	sub	sp, #32
 8003b70:	af02      	add	r7, sp, #8
 8003b72:	60f8      	str	r0, [r7, #12]
 8003b74:	607a      	str	r2, [r7, #4]
 8003b76:	603b      	str	r3, [r7, #0]
 8003b78:	460b      	mov	r3, r1
 8003b7a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b80:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003b82:	697b      	ldr	r3, [r7, #20]
 8003b84:	2b08      	cmp	r3, #8
 8003b86:	d006      	beq.n	8003b96 <I2C_MasterRequestWrite+0x2a>
 8003b88:	697b      	ldr	r3, [r7, #20]
 8003b8a:	2b01      	cmp	r3, #1
 8003b8c:	d003      	beq.n	8003b96 <I2C_MasterRequestWrite+0x2a>
 8003b8e:	697b      	ldr	r3, [r7, #20]
 8003b90:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003b94:	d108      	bne.n	8003ba8 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	681a      	ldr	r2, [r3, #0]
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003ba4:	601a      	str	r2, [r3, #0]
 8003ba6:	e00b      	b.n	8003bc0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bac:	2b12      	cmp	r3, #18
 8003bae:	d107      	bne.n	8003bc0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003bbe:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003bc0:	683b      	ldr	r3, [r7, #0]
 8003bc2:	9300      	str	r3, [sp, #0]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003bcc:	68f8      	ldr	r0, [r7, #12]
 8003bce:	f000 f84f 	bl	8003c70 <I2C_WaitOnFlagUntilTimeout>
 8003bd2:	4603      	mov	r3, r0
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d00d      	beq.n	8003bf4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003be2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003be6:	d103      	bne.n	8003bf0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003bee:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003bf0:	2303      	movs	r3, #3
 8003bf2:	e035      	b.n	8003c60 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	691b      	ldr	r3, [r3, #16]
 8003bf8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003bfc:	d108      	bne.n	8003c10 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003bfe:	897b      	ldrh	r3, [r7, #10]
 8003c00:	b2db      	uxtb	r3, r3
 8003c02:	461a      	mov	r2, r3
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003c0c:	611a      	str	r2, [r3, #16]
 8003c0e:	e01b      	b.n	8003c48 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003c10:	897b      	ldrh	r3, [r7, #10]
 8003c12:	11db      	asrs	r3, r3, #7
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	f003 0306 	and.w	r3, r3, #6
 8003c1a:	b2db      	uxtb	r3, r3
 8003c1c:	f063 030f 	orn	r3, r3, #15
 8003c20:	b2da      	uxtb	r2, r3
 8003c22:	68fb      	ldr	r3, [r7, #12]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003c28:	683b      	ldr	r3, [r7, #0]
 8003c2a:	687a      	ldr	r2, [r7, #4]
 8003c2c:	490e      	ldr	r1, [pc, #56]	; (8003c68 <I2C_MasterRequestWrite+0xfc>)
 8003c2e:	68f8      	ldr	r0, [r7, #12]
 8003c30:	f000 f875 	bl	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c34:	4603      	mov	r3, r0
 8003c36:	2b00      	cmp	r3, #0
 8003c38:	d001      	beq.n	8003c3e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e010      	b.n	8003c60 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003c3e:	897b      	ldrh	r3, [r7, #10]
 8003c40:	b2da      	uxtb	r2, r3
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003c48:	683b      	ldr	r3, [r7, #0]
 8003c4a:	687a      	ldr	r2, [r7, #4]
 8003c4c:	4907      	ldr	r1, [pc, #28]	; (8003c6c <I2C_MasterRequestWrite+0x100>)
 8003c4e:	68f8      	ldr	r0, [r7, #12]
 8003c50:	f000 f865 	bl	8003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003c54:	4603      	mov	r3, r0
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d001      	beq.n	8003c5e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003c5a:	2301      	movs	r3, #1
 8003c5c:	e000      	b.n	8003c60 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003c5e:	2300      	movs	r3, #0
}
 8003c60:	4618      	mov	r0, r3
 8003c62:	3718      	adds	r7, #24
 8003c64:	46bd      	mov	sp, r7
 8003c66:	bd80      	pop	{r7, pc}
 8003c68:	00010008 	.word	0x00010008
 8003c6c:	00010002 	.word	0x00010002

08003c70 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b084      	sub	sp, #16
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	60f8      	str	r0, [r7, #12]
 8003c78:	60b9      	str	r1, [r7, #8]
 8003c7a:	603b      	str	r3, [r7, #0]
 8003c7c:	4613      	mov	r3, r2
 8003c7e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003c80:	e025      	b.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c82:	683b      	ldr	r3, [r7, #0]
 8003c84:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003c88:	d021      	beq.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c8a:	f7fe fdf5 	bl	8002878 <HAL_GetTick>
 8003c8e:	4602      	mov	r2, r0
 8003c90:	69bb      	ldr	r3, [r7, #24]
 8003c92:	1ad3      	subs	r3, r2, r3
 8003c94:	683a      	ldr	r2, [r7, #0]
 8003c96:	429a      	cmp	r2, r3
 8003c98:	d302      	bcc.n	8003ca0 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003c9a:	683b      	ldr	r3, [r7, #0]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d116      	bne.n	8003cce <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	2220      	movs	r2, #32
 8003caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cba:	f043 0220 	orr.w	r2, r3, #32
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003cca:	2301      	movs	r3, #1
 8003ccc:	e023      	b.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003cce:	68bb      	ldr	r3, [r7, #8]
 8003cd0:	0c1b      	lsrs	r3, r3, #16
 8003cd2:	b2db      	uxtb	r3, r3
 8003cd4:	2b01      	cmp	r3, #1
 8003cd6:	d10d      	bne.n	8003cf4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003cd8:	68fb      	ldr	r3, [r7, #12]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	695b      	ldr	r3, [r3, #20]
 8003cde:	43da      	mvns	r2, r3
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	4013      	ands	r3, r2
 8003ce4:	b29b      	uxth	r3, r3
 8003ce6:	2b00      	cmp	r3, #0
 8003ce8:	bf0c      	ite	eq
 8003cea:	2301      	moveq	r3, #1
 8003cec:	2300      	movne	r3, #0
 8003cee:	b2db      	uxtb	r3, r3
 8003cf0:	461a      	mov	r2, r3
 8003cf2:	e00c      	b.n	8003d0e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	699b      	ldr	r3, [r3, #24]
 8003cfa:	43da      	mvns	r2, r3
 8003cfc:	68bb      	ldr	r3, [r7, #8]
 8003cfe:	4013      	ands	r3, r2
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	bf0c      	ite	eq
 8003d06:	2301      	moveq	r3, #1
 8003d08:	2300      	movne	r3, #0
 8003d0a:	b2db      	uxtb	r3, r3
 8003d0c:	461a      	mov	r2, r3
 8003d0e:	79fb      	ldrb	r3, [r7, #7]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d0b6      	beq.n	8003c82 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003d14:	2300      	movs	r3, #0
}
 8003d16:	4618      	mov	r0, r3
 8003d18:	3710      	adds	r7, #16
 8003d1a:	46bd      	mov	sp, r7
 8003d1c:	bd80      	pop	{r7, pc}

08003d1e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003d1e:	b580      	push	{r7, lr}
 8003d20:	b084      	sub	sp, #16
 8003d22:	af00      	add	r7, sp, #0
 8003d24:	60f8      	str	r0, [r7, #12]
 8003d26:	60b9      	str	r1, [r7, #8]
 8003d28:	607a      	str	r2, [r7, #4]
 8003d2a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003d2c:	e051      	b.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003d2e:	68fb      	ldr	r3, [r7, #12]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	695b      	ldr	r3, [r3, #20]
 8003d34:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003d38:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003d3c:	d123      	bne.n	8003d86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	681a      	ldr	r2, [r3, #0]
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d4c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003d56:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	2200      	movs	r2, #0
 8003d5c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2220      	movs	r2, #32
 8003d62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	2200      	movs	r2, #0
 8003d6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d72:	f043 0204 	orr.w	r2, r3, #4
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2200      	movs	r2, #0
 8003d7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003d82:	2301      	movs	r3, #1
 8003d84:	e046      	b.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d8c:	d021      	beq.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d8e:	f7fe fd73 	bl	8002878 <HAL_GetTick>
 8003d92:	4602      	mov	r2, r0
 8003d94:	683b      	ldr	r3, [r7, #0]
 8003d96:	1ad3      	subs	r3, r2, r3
 8003d98:	687a      	ldr	r2, [r7, #4]
 8003d9a:	429a      	cmp	r2, r3
 8003d9c:	d302      	bcc.n	8003da4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	2b00      	cmp	r3, #0
 8003da2:	d116      	bne.n	8003dd2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	2200      	movs	r2, #0
 8003da8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	2220      	movs	r2, #32
 8003dae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	2200      	movs	r2, #0
 8003db6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dbe:	f043 0220 	orr.w	r2, r3, #32
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003dce:	2301      	movs	r3, #1
 8003dd0:	e020      	b.n	8003e14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dd2:	68bb      	ldr	r3, [r7, #8]
 8003dd4:	0c1b      	lsrs	r3, r3, #16
 8003dd6:	b2db      	uxtb	r3, r3
 8003dd8:	2b01      	cmp	r3, #1
 8003dda:	d10c      	bne.n	8003df6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	695b      	ldr	r3, [r3, #20]
 8003de2:	43da      	mvns	r2, r3
 8003de4:	68bb      	ldr	r3, [r7, #8]
 8003de6:	4013      	ands	r3, r2
 8003de8:	b29b      	uxth	r3, r3
 8003dea:	2b00      	cmp	r3, #0
 8003dec:	bf14      	ite	ne
 8003dee:	2301      	movne	r3, #1
 8003df0:	2300      	moveq	r3, #0
 8003df2:	b2db      	uxtb	r3, r3
 8003df4:	e00b      	b.n	8003e0e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	699b      	ldr	r3, [r3, #24]
 8003dfc:	43da      	mvns	r2, r3
 8003dfe:	68bb      	ldr	r3, [r7, #8]
 8003e00:	4013      	ands	r3, r2
 8003e02:	b29b      	uxth	r3, r3
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	bf14      	ite	ne
 8003e08:	2301      	movne	r3, #1
 8003e0a:	2300      	moveq	r3, #0
 8003e0c:	b2db      	uxtb	r3, r3
 8003e0e:	2b00      	cmp	r3, #0
 8003e10:	d18d      	bne.n	8003d2e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e28:	e02d      	b.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003e2a:	68f8      	ldr	r0, [r7, #12]
 8003e2c:	f000 f878 	bl	8003f20 <I2C_IsAcknowledgeFailed>
 8003e30:	4603      	mov	r3, r0
 8003e32:	2b00      	cmp	r3, #0
 8003e34:	d001      	beq.n	8003e3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003e36:	2301      	movs	r3, #1
 8003e38:	e02d      	b.n	8003e96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e3a:	68bb      	ldr	r3, [r7, #8]
 8003e3c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e40:	d021      	beq.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e42:	f7fe fd19 	bl	8002878 <HAL_GetTick>
 8003e46:	4602      	mov	r2, r0
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	1ad3      	subs	r3, r2, r3
 8003e4c:	68ba      	ldr	r2, [r7, #8]
 8003e4e:	429a      	cmp	r2, r3
 8003e50:	d302      	bcc.n	8003e58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003e52:	68bb      	ldr	r3, [r7, #8]
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d116      	bne.n	8003e86 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	2200      	movs	r2, #0
 8003e5c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2220      	movs	r2, #32
 8003e62:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	2200      	movs	r2, #0
 8003e6a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e6e:	68fb      	ldr	r3, [r7, #12]
 8003e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e72:	f043 0220 	orr.w	r2, r3, #32
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2200      	movs	r2, #0
 8003e7e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e82:	2301      	movs	r3, #1
 8003e84:	e007      	b.n	8003e96 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	695b      	ldr	r3, [r3, #20]
 8003e8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e90:	2b80      	cmp	r3, #128	; 0x80
 8003e92:	d1ca      	bne.n	8003e2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003e94:	2300      	movs	r3, #0
}
 8003e96:	4618      	mov	r0, r3
 8003e98:	3710      	adds	r7, #16
 8003e9a:	46bd      	mov	sp, r7
 8003e9c:	bd80      	pop	{r7, pc}

08003e9e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e9e:	b580      	push	{r7, lr}
 8003ea0:	b084      	sub	sp, #16
 8003ea2:	af00      	add	r7, sp, #0
 8003ea4:	60f8      	str	r0, [r7, #12]
 8003ea6:	60b9      	str	r1, [r7, #8]
 8003ea8:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003eaa:	e02d      	b.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003eac:	68f8      	ldr	r0, [r7, #12]
 8003eae:	f000 f837 	bl	8003f20 <I2C_IsAcknowledgeFailed>
 8003eb2:	4603      	mov	r3, r0
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d001      	beq.n	8003ebc <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eb8:	2301      	movs	r3, #1
 8003eba:	e02d      	b.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ebc:	68bb      	ldr	r3, [r7, #8]
 8003ebe:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ec2:	d021      	beq.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ec4:	f7fe fcd8 	bl	8002878 <HAL_GetTick>
 8003ec8:	4602      	mov	r2, r0
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	1ad3      	subs	r3, r2, r3
 8003ece:	68ba      	ldr	r2, [r7, #8]
 8003ed0:	429a      	cmp	r2, r3
 8003ed2:	d302      	bcc.n	8003eda <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	2b00      	cmp	r3, #0
 8003ed8:	d116      	bne.n	8003f08 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	2200      	movs	r2, #0
 8003ede:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	2220      	movs	r2, #32
 8003ee4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	2200      	movs	r2, #0
 8003eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ef4:	f043 0220 	orr.w	r2, r3, #32
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2200      	movs	r2, #0
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f04:	2301      	movs	r3, #1
 8003f06:	e007      	b.n	8003f18 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	695b      	ldr	r3, [r3, #20]
 8003f0e:	f003 0304 	and.w	r3, r3, #4
 8003f12:	2b04      	cmp	r3, #4
 8003f14:	d1ca      	bne.n	8003eac <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}

08003f20 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003f20:	b480      	push	{r7}
 8003f22:	b083      	sub	sp, #12
 8003f24:	af00      	add	r7, sp, #0
 8003f26:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	695b      	ldr	r3, [r3, #20]
 8003f2e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003f32:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f36:	d11b      	bne.n	8003f70 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003f40:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2200      	movs	r2, #0
 8003f46:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	2220      	movs	r2, #32
 8003f4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2200      	movs	r2, #0
 8003f54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f5c:	f043 0204 	orr.w	r2, r3, #4
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f64:	687b      	ldr	r3, [r7, #4]
 8003f66:	2200      	movs	r2, #0
 8003f68:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003f6c:	2301      	movs	r3, #1
 8003f6e:	e000      	b.n	8003f72 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f70:	2300      	movs	r3, #0
}
 8003f72:	4618      	mov	r0, r3
 8003f74:	370c      	adds	r7, #12
 8003f76:	46bd      	mov	sp, r7
 8003f78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f7c:	4770      	bx	lr
	...

08003f80 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f80:	b580      	push	{r7, lr}
 8003f82:	b086      	sub	sp, #24
 8003f84:	af00      	add	r7, sp, #0
 8003f86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d101      	bne.n	8003f92 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f8e:	2301      	movs	r3, #1
 8003f90:	e267      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	f003 0301 	and.w	r3, r3, #1
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d075      	beq.n	800408a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003f9e:	4b88      	ldr	r3, [pc, #544]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	689b      	ldr	r3, [r3, #8]
 8003fa2:	f003 030c 	and.w	r3, r3, #12
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d00c      	beq.n	8003fc4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003faa:	4b85      	ldr	r3, [pc, #532]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fac:	689b      	ldr	r3, [r3, #8]
 8003fae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003fb2:	2b08      	cmp	r3, #8
 8003fb4:	d112      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003fb6:	4b82      	ldr	r3, [pc, #520]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	685b      	ldr	r3, [r3, #4]
 8003fba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003fbe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003fc2:	d10b      	bne.n	8003fdc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003fc4:	4b7e      	ldr	r3, [pc, #504]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fcc:	2b00      	cmp	r3, #0
 8003fce:	d05b      	beq.n	8004088 <HAL_RCC_OscConfig+0x108>
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	685b      	ldr	r3, [r3, #4]
 8003fd4:	2b00      	cmp	r3, #0
 8003fd6:	d157      	bne.n	8004088 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003fd8:	2301      	movs	r3, #1
 8003fda:	e242      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	685b      	ldr	r3, [r3, #4]
 8003fe0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003fe4:	d106      	bne.n	8003ff4 <HAL_RCC_OscConfig+0x74>
 8003fe6:	4b76      	ldr	r3, [pc, #472]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	4a75      	ldr	r2, [pc, #468]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8003fec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003ff0:	6013      	str	r3, [r2, #0]
 8003ff2:	e01d      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	685b      	ldr	r3, [r3, #4]
 8003ff8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003ffc:	d10c      	bne.n	8004018 <HAL_RCC_OscConfig+0x98>
 8003ffe:	4b70      	ldr	r3, [pc, #448]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	4a6f      	ldr	r2, [pc, #444]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004004:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004008:	6013      	str	r3, [r2, #0]
 800400a:	4b6d      	ldr	r3, [pc, #436]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	4a6c      	ldr	r2, [pc, #432]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004010:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004014:	6013      	str	r3, [r2, #0]
 8004016:	e00b      	b.n	8004030 <HAL_RCC_OscConfig+0xb0>
 8004018:	4b69      	ldr	r3, [pc, #420]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	4a68      	ldr	r2, [pc, #416]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800401e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004022:	6013      	str	r3, [r2, #0]
 8004024:	4b66      	ldr	r3, [pc, #408]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	4a65      	ldr	r2, [pc, #404]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800402a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800402e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	2b00      	cmp	r3, #0
 8004036:	d013      	beq.n	8004060 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004038:	f7fe fc1e 	bl	8002878 <HAL_GetTick>
 800403c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800403e:	e008      	b.n	8004052 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004040:	f7fe fc1a 	bl	8002878 <HAL_GetTick>
 8004044:	4602      	mov	r2, r0
 8004046:	693b      	ldr	r3, [r7, #16]
 8004048:	1ad3      	subs	r3, r2, r3
 800404a:	2b64      	cmp	r3, #100	; 0x64
 800404c:	d901      	bls.n	8004052 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e207      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004052:	4b5b      	ldr	r3, [pc, #364]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800405a:	2b00      	cmp	r3, #0
 800405c:	d0f0      	beq.n	8004040 <HAL_RCC_OscConfig+0xc0>
 800405e:	e014      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004060:	f7fe fc0a 	bl	8002878 <HAL_GetTick>
 8004064:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004066:	e008      	b.n	800407a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004068:	f7fe fc06 	bl	8002878 <HAL_GetTick>
 800406c:	4602      	mov	r2, r0
 800406e:	693b      	ldr	r3, [r7, #16]
 8004070:	1ad3      	subs	r3, r2, r3
 8004072:	2b64      	cmp	r3, #100	; 0x64
 8004074:	d901      	bls.n	800407a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004076:	2303      	movs	r3, #3
 8004078:	e1f3      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800407a:	4b51      	ldr	r3, [pc, #324]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004082:	2b00      	cmp	r3, #0
 8004084:	d1f0      	bne.n	8004068 <HAL_RCC_OscConfig+0xe8>
 8004086:	e000      	b.n	800408a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004088:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	f003 0302 	and.w	r3, r3, #2
 8004092:	2b00      	cmp	r3, #0
 8004094:	d063      	beq.n	800415e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004096:	4b4a      	ldr	r3, [pc, #296]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004098:	689b      	ldr	r3, [r3, #8]
 800409a:	f003 030c 	and.w	r3, r3, #12
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d00b      	beq.n	80040ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040a2:	4b47      	ldr	r3, [pc, #284]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040a4:	689b      	ldr	r3, [r3, #8]
 80040a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80040aa:	2b08      	cmp	r3, #8
 80040ac:	d11c      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80040ae:	4b44      	ldr	r3, [pc, #272]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040b0:	685b      	ldr	r3, [r3, #4]
 80040b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d116      	bne.n	80040e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040ba:	4b41      	ldr	r3, [pc, #260]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f003 0302 	and.w	r3, r3, #2
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d005      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	68db      	ldr	r3, [r3, #12]
 80040ca:	2b01      	cmp	r3, #1
 80040cc:	d001      	beq.n	80040d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80040ce:	2301      	movs	r3, #1
 80040d0:	e1c7      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d2:	4b3b      	ldr	r3, [pc, #236]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	691b      	ldr	r3, [r3, #16]
 80040de:	00db      	lsls	r3, r3, #3
 80040e0:	4937      	ldr	r1, [pc, #220]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 80040e2:	4313      	orrs	r3, r2
 80040e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80040e6:	e03a      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	68db      	ldr	r3, [r3, #12]
 80040ec:	2b00      	cmp	r3, #0
 80040ee:	d020      	beq.n	8004132 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040f0:	4b34      	ldr	r3, [pc, #208]	; (80041c4 <HAL_RCC_OscConfig+0x244>)
 80040f2:	2201      	movs	r2, #1
 80040f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040f6:	f7fe fbbf 	bl	8002878 <HAL_GetTick>
 80040fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040fc:	e008      	b.n	8004110 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80040fe:	f7fe fbbb 	bl	8002878 <HAL_GetTick>
 8004102:	4602      	mov	r2, r0
 8004104:	693b      	ldr	r3, [r7, #16]
 8004106:	1ad3      	subs	r3, r2, r3
 8004108:	2b02      	cmp	r3, #2
 800410a:	d901      	bls.n	8004110 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800410c:	2303      	movs	r3, #3
 800410e:	e1a8      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004110:	4b2b      	ldr	r3, [pc, #172]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	f003 0302 	and.w	r3, r3, #2
 8004118:	2b00      	cmp	r3, #0
 800411a:	d0f0      	beq.n	80040fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800411c:	4b28      	ldr	r3, [pc, #160]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	691b      	ldr	r3, [r3, #16]
 8004128:	00db      	lsls	r3, r3, #3
 800412a:	4925      	ldr	r1, [pc, #148]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 800412c:	4313      	orrs	r3, r2
 800412e:	600b      	str	r3, [r1, #0]
 8004130:	e015      	b.n	800415e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004132:	4b24      	ldr	r3, [pc, #144]	; (80041c4 <HAL_RCC_OscConfig+0x244>)
 8004134:	2200      	movs	r2, #0
 8004136:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004138:	f7fe fb9e 	bl	8002878 <HAL_GetTick>
 800413c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800413e:	e008      	b.n	8004152 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004140:	f7fe fb9a 	bl	8002878 <HAL_GetTick>
 8004144:	4602      	mov	r2, r0
 8004146:	693b      	ldr	r3, [r7, #16]
 8004148:	1ad3      	subs	r3, r2, r3
 800414a:	2b02      	cmp	r3, #2
 800414c:	d901      	bls.n	8004152 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800414e:	2303      	movs	r3, #3
 8004150:	e187      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004152:	4b1b      	ldr	r3, [pc, #108]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f003 0302 	and.w	r3, r3, #2
 800415a:	2b00      	cmp	r3, #0
 800415c:	d1f0      	bne.n	8004140 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	f003 0308 	and.w	r3, r3, #8
 8004166:	2b00      	cmp	r3, #0
 8004168:	d036      	beq.n	80041d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	695b      	ldr	r3, [r3, #20]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d016      	beq.n	80041a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004172:	4b15      	ldr	r3, [pc, #84]	; (80041c8 <HAL_RCC_OscConfig+0x248>)
 8004174:	2201      	movs	r2, #1
 8004176:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004178:	f7fe fb7e 	bl	8002878 <HAL_GetTick>
 800417c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800417e:	e008      	b.n	8004192 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004180:	f7fe fb7a 	bl	8002878 <HAL_GetTick>
 8004184:	4602      	mov	r2, r0
 8004186:	693b      	ldr	r3, [r7, #16]
 8004188:	1ad3      	subs	r3, r2, r3
 800418a:	2b02      	cmp	r3, #2
 800418c:	d901      	bls.n	8004192 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800418e:	2303      	movs	r3, #3
 8004190:	e167      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004192:	4b0b      	ldr	r3, [pc, #44]	; (80041c0 <HAL_RCC_OscConfig+0x240>)
 8004194:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004196:	f003 0302 	and.w	r3, r3, #2
 800419a:	2b00      	cmp	r3, #0
 800419c:	d0f0      	beq.n	8004180 <HAL_RCC_OscConfig+0x200>
 800419e:	e01b      	b.n	80041d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80041a0:	4b09      	ldr	r3, [pc, #36]	; (80041c8 <HAL_RCC_OscConfig+0x248>)
 80041a2:	2200      	movs	r2, #0
 80041a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80041a6:	f7fe fb67 	bl	8002878 <HAL_GetTick>
 80041aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041ac:	e00e      	b.n	80041cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80041ae:	f7fe fb63 	bl	8002878 <HAL_GetTick>
 80041b2:	4602      	mov	r2, r0
 80041b4:	693b      	ldr	r3, [r7, #16]
 80041b6:	1ad3      	subs	r3, r2, r3
 80041b8:	2b02      	cmp	r3, #2
 80041ba:	d907      	bls.n	80041cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80041bc:	2303      	movs	r3, #3
 80041be:	e150      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
 80041c0:	40023800 	.word	0x40023800
 80041c4:	42470000 	.word	0x42470000
 80041c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80041cc:	4b88      	ldr	r3, [pc, #544]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80041d0:	f003 0302 	and.w	r3, r3, #2
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d1ea      	bne.n	80041ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f003 0304 	and.w	r3, r3, #4
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	f000 8097 	beq.w	8004314 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80041e6:	2300      	movs	r3, #0
 80041e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80041ea:	4b81      	ldr	r3, [pc, #516]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80041f2:	2b00      	cmp	r3, #0
 80041f4:	d10f      	bne.n	8004216 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041f6:	2300      	movs	r3, #0
 80041f8:	60bb      	str	r3, [r7, #8]
 80041fa:	4b7d      	ldr	r3, [pc, #500]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80041fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041fe:	4a7c      	ldr	r2, [pc, #496]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004200:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004204:	6413      	str	r3, [r2, #64]	; 0x40
 8004206:	4b7a      	ldr	r3, [pc, #488]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800420a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800420e:	60bb      	str	r3, [r7, #8]
 8004210:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004212:	2301      	movs	r3, #1
 8004214:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004216:	4b77      	ldr	r3, [pc, #476]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800421e:	2b00      	cmp	r3, #0
 8004220:	d118      	bne.n	8004254 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004222:	4b74      	ldr	r3, [pc, #464]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	4a73      	ldr	r2, [pc, #460]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 8004228:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800422c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800422e:	f7fe fb23 	bl	8002878 <HAL_GetTick>
 8004232:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004234:	e008      	b.n	8004248 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004236:	f7fe fb1f 	bl	8002878 <HAL_GetTick>
 800423a:	4602      	mov	r2, r0
 800423c:	693b      	ldr	r3, [r7, #16]
 800423e:	1ad3      	subs	r3, r2, r3
 8004240:	2b02      	cmp	r3, #2
 8004242:	d901      	bls.n	8004248 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004244:	2303      	movs	r3, #3
 8004246:	e10c      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004248:	4b6a      	ldr	r3, [pc, #424]	; (80043f4 <HAL_RCC_OscConfig+0x474>)
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004250:	2b00      	cmp	r3, #0
 8004252:	d0f0      	beq.n	8004236 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	689b      	ldr	r3, [r3, #8]
 8004258:	2b01      	cmp	r3, #1
 800425a:	d106      	bne.n	800426a <HAL_RCC_OscConfig+0x2ea>
 800425c:	4b64      	ldr	r3, [pc, #400]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800425e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004260:	4a63      	ldr	r2, [pc, #396]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004262:	f043 0301 	orr.w	r3, r3, #1
 8004266:	6713      	str	r3, [r2, #112]	; 0x70
 8004268:	e01c      	b.n	80042a4 <HAL_RCC_OscConfig+0x324>
 800426a:	687b      	ldr	r3, [r7, #4]
 800426c:	689b      	ldr	r3, [r3, #8]
 800426e:	2b05      	cmp	r3, #5
 8004270:	d10c      	bne.n	800428c <HAL_RCC_OscConfig+0x30c>
 8004272:	4b5f      	ldr	r3, [pc, #380]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004274:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004276:	4a5e      	ldr	r2, [pc, #376]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004278:	f043 0304 	orr.w	r3, r3, #4
 800427c:	6713      	str	r3, [r2, #112]	; 0x70
 800427e:	4b5c      	ldr	r3, [pc, #368]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004282:	4a5b      	ldr	r2, [pc, #364]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004284:	f043 0301 	orr.w	r3, r3, #1
 8004288:	6713      	str	r3, [r2, #112]	; 0x70
 800428a:	e00b      	b.n	80042a4 <HAL_RCC_OscConfig+0x324>
 800428c:	4b58      	ldr	r3, [pc, #352]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800428e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004290:	4a57      	ldr	r2, [pc, #348]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004292:	f023 0301 	bic.w	r3, r3, #1
 8004296:	6713      	str	r3, [r2, #112]	; 0x70
 8004298:	4b55      	ldr	r3, [pc, #340]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800429a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800429c:	4a54      	ldr	r2, [pc, #336]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800429e:	f023 0304 	bic.w	r3, r3, #4
 80042a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	689b      	ldr	r3, [r3, #8]
 80042a8:	2b00      	cmp	r3, #0
 80042aa:	d015      	beq.n	80042d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80042ac:	f7fe fae4 	bl	8002878 <HAL_GetTick>
 80042b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042b2:	e00a      	b.n	80042ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042b4:	f7fe fae0 	bl	8002878 <HAL_GetTick>
 80042b8:	4602      	mov	r2, r0
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	1ad3      	subs	r3, r2, r3
 80042be:	f241 3288 	movw	r2, #5000	; 0x1388
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d901      	bls.n	80042ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80042c6:	2303      	movs	r3, #3
 80042c8:	e0cb      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80042ca:	4b49      	ldr	r3, [pc, #292]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80042cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042ce:	f003 0302 	and.w	r3, r3, #2
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d0ee      	beq.n	80042b4 <HAL_RCC_OscConfig+0x334>
 80042d6:	e014      	b.n	8004302 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80042d8:	f7fe face 	bl	8002878 <HAL_GetTick>
 80042dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042de:	e00a      	b.n	80042f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80042e0:	f7fe faca 	bl	8002878 <HAL_GetTick>
 80042e4:	4602      	mov	r2, r0
 80042e6:	693b      	ldr	r3, [r7, #16]
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80042ee:	4293      	cmp	r3, r2
 80042f0:	d901      	bls.n	80042f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042f2:	2303      	movs	r3, #3
 80042f4:	e0b5      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042f6:	4b3e      	ldr	r3, [pc, #248]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80042f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042fa:	f003 0302 	and.w	r3, r3, #2
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d1ee      	bne.n	80042e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004302:	7dfb      	ldrb	r3, [r7, #23]
 8004304:	2b01      	cmp	r3, #1
 8004306:	d105      	bne.n	8004314 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004308:	4b39      	ldr	r3, [pc, #228]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800430a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800430c:	4a38      	ldr	r2, [pc, #224]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 800430e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004312:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	699b      	ldr	r3, [r3, #24]
 8004318:	2b00      	cmp	r3, #0
 800431a:	f000 80a1 	beq.w	8004460 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800431e:	4b34      	ldr	r3, [pc, #208]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004320:	689b      	ldr	r3, [r3, #8]
 8004322:	f003 030c 	and.w	r3, r3, #12
 8004326:	2b08      	cmp	r3, #8
 8004328:	d05c      	beq.n	80043e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	2b02      	cmp	r3, #2
 8004330:	d141      	bne.n	80043b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004332:	4b31      	ldr	r3, [pc, #196]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 8004334:	2200      	movs	r2, #0
 8004336:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004338:	f7fe fa9e 	bl	8002878 <HAL_GetTick>
 800433c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800433e:	e008      	b.n	8004352 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004340:	f7fe fa9a 	bl	8002878 <HAL_GetTick>
 8004344:	4602      	mov	r2, r0
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	1ad3      	subs	r3, r2, r3
 800434a:	2b02      	cmp	r3, #2
 800434c:	d901      	bls.n	8004352 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e087      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004352:	4b27      	ldr	r3, [pc, #156]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800435a:	2b00      	cmp	r3, #0
 800435c:	d1f0      	bne.n	8004340 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	69da      	ldr	r2, [r3, #28]
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6a1b      	ldr	r3, [r3, #32]
 8004366:	431a      	orrs	r2, r3
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800436c:	019b      	lsls	r3, r3, #6
 800436e:	431a      	orrs	r2, r3
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004374:	085b      	lsrs	r3, r3, #1
 8004376:	3b01      	subs	r3, #1
 8004378:	041b      	lsls	r3, r3, #16
 800437a:	431a      	orrs	r2, r3
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004380:	061b      	lsls	r3, r3, #24
 8004382:	491b      	ldr	r1, [pc, #108]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 8004384:	4313      	orrs	r3, r2
 8004386:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004388:	4b1b      	ldr	r3, [pc, #108]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 800438a:	2201      	movs	r2, #1
 800438c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800438e:	f7fe fa73 	bl	8002878 <HAL_GetTick>
 8004392:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004394:	e008      	b.n	80043a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004396:	f7fe fa6f 	bl	8002878 <HAL_GetTick>
 800439a:	4602      	mov	r2, r0
 800439c:	693b      	ldr	r3, [r7, #16]
 800439e:	1ad3      	subs	r3, r2, r3
 80043a0:	2b02      	cmp	r3, #2
 80043a2:	d901      	bls.n	80043a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80043a4:	2303      	movs	r3, #3
 80043a6:	e05c      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80043a8:	4b11      	ldr	r3, [pc, #68]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043b0:	2b00      	cmp	r3, #0
 80043b2:	d0f0      	beq.n	8004396 <HAL_RCC_OscConfig+0x416>
 80043b4:	e054      	b.n	8004460 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043b6:	4b10      	ldr	r3, [pc, #64]	; (80043f8 <HAL_RCC_OscConfig+0x478>)
 80043b8:	2200      	movs	r2, #0
 80043ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043bc:	f7fe fa5c 	bl	8002878 <HAL_GetTick>
 80043c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043c2:	e008      	b.n	80043d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043c4:	f7fe fa58 	bl	8002878 <HAL_GetTick>
 80043c8:	4602      	mov	r2, r0
 80043ca:	693b      	ldr	r3, [r7, #16]
 80043cc:	1ad3      	subs	r3, r2, r3
 80043ce:	2b02      	cmp	r3, #2
 80043d0:	d901      	bls.n	80043d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80043d2:	2303      	movs	r3, #3
 80043d4:	e045      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d6:	4b06      	ldr	r3, [pc, #24]	; (80043f0 <HAL_RCC_OscConfig+0x470>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d1f0      	bne.n	80043c4 <HAL_RCC_OscConfig+0x444>
 80043e2:	e03d      	b.n	8004460 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	699b      	ldr	r3, [r3, #24]
 80043e8:	2b01      	cmp	r3, #1
 80043ea:	d107      	bne.n	80043fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e038      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
 80043f0:	40023800 	.word	0x40023800
 80043f4:	40007000 	.word	0x40007000
 80043f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043fc:	4b1b      	ldr	r3, [pc, #108]	; (800446c <HAL_RCC_OscConfig+0x4ec>)
 80043fe:	685b      	ldr	r3, [r3, #4]
 8004400:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	699b      	ldr	r3, [r3, #24]
 8004406:	2b01      	cmp	r3, #1
 8004408:	d028      	beq.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004414:	429a      	cmp	r2, r3
 8004416:	d121      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004418:	68fb      	ldr	r3, [r7, #12]
 800441a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004422:	429a      	cmp	r2, r3
 8004424:	d11a      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004426:	68fa      	ldr	r2, [r7, #12]
 8004428:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800442c:	4013      	ands	r3, r2
 800442e:	687a      	ldr	r2, [r7, #4]
 8004430:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8004432:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004434:	4293      	cmp	r3, r2
 8004436:	d111      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004442:	085b      	lsrs	r3, r3, #1
 8004444:	3b01      	subs	r3, #1
 8004446:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004448:	429a      	cmp	r2, r3
 800444a:	d107      	bne.n	800445c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004456:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e000      	b.n	8004462 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004460:	2300      	movs	r3, #0
}
 8004462:	4618      	mov	r0, r3
 8004464:	3718      	adds	r7, #24
 8004466:	46bd      	mov	sp, r7
 8004468:	bd80      	pop	{r7, pc}
 800446a:	bf00      	nop
 800446c:	40023800 	.word	0x40023800

08004470 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004470:	b580      	push	{r7, lr}
 8004472:	b084      	sub	sp, #16
 8004474:	af00      	add	r7, sp, #0
 8004476:	6078      	str	r0, [r7, #4]
 8004478:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	2b00      	cmp	r3, #0
 800447e:	d101      	bne.n	8004484 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e0cc      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004484:	4b68      	ldr	r3, [pc, #416]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0307 	and.w	r3, r3, #7
 800448c:	683a      	ldr	r2, [r7, #0]
 800448e:	429a      	cmp	r2, r3
 8004490:	d90c      	bls.n	80044ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004492:	4b65      	ldr	r3, [pc, #404]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004494:	683a      	ldr	r2, [r7, #0]
 8004496:	b2d2      	uxtb	r2, r2
 8004498:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800449a:	4b63      	ldr	r3, [pc, #396]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	f003 0307 	and.w	r3, r3, #7
 80044a2:	683a      	ldr	r2, [r7, #0]
 80044a4:	429a      	cmp	r2, r3
 80044a6:	d001      	beq.n	80044ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80044a8:	2301      	movs	r3, #1
 80044aa:	e0b8      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	f003 0302 	and.w	r3, r3, #2
 80044b4:	2b00      	cmp	r3, #0
 80044b6:	d020      	beq.n	80044fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f003 0304 	and.w	r3, r3, #4
 80044c0:	2b00      	cmp	r3, #0
 80044c2:	d005      	beq.n	80044d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80044c4:	4b59      	ldr	r3, [pc, #356]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044c6:	689b      	ldr	r3, [r3, #8]
 80044c8:	4a58      	ldr	r2, [pc, #352]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80044ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	f003 0308 	and.w	r3, r3, #8
 80044d8:	2b00      	cmp	r3, #0
 80044da:	d005      	beq.n	80044e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80044dc:	4b53      	ldr	r3, [pc, #332]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044de:	689b      	ldr	r3, [r3, #8]
 80044e0:	4a52      	ldr	r2, [pc, #328]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80044e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80044e8:	4b50      	ldr	r3, [pc, #320]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044ea:	689b      	ldr	r3, [r3, #8]
 80044ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	494d      	ldr	r1, [pc, #308]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80044f6:	4313      	orrs	r3, r2
 80044f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f003 0301 	and.w	r3, r3, #1
 8004502:	2b00      	cmp	r3, #0
 8004504:	d044      	beq.n	8004590 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	685b      	ldr	r3, [r3, #4]
 800450a:	2b01      	cmp	r3, #1
 800450c:	d107      	bne.n	800451e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800450e:	4b47      	ldr	r3, [pc, #284]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004516:	2b00      	cmp	r3, #0
 8004518:	d119      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800451a:	2301      	movs	r3, #1
 800451c:	e07f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	685b      	ldr	r3, [r3, #4]
 8004522:	2b02      	cmp	r3, #2
 8004524:	d003      	beq.n	800452e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800452a:	2b03      	cmp	r3, #3
 800452c:	d107      	bne.n	800453e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800452e:	4b3f      	ldr	r3, [pc, #252]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004536:	2b00      	cmp	r3, #0
 8004538:	d109      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800453a:	2301      	movs	r3, #1
 800453c:	e06f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800453e:	4b3b      	ldr	r3, [pc, #236]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f003 0302 	and.w	r3, r3, #2
 8004546:	2b00      	cmp	r3, #0
 8004548:	d101      	bne.n	800454e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800454a:	2301      	movs	r3, #1
 800454c:	e067      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800454e:	4b37      	ldr	r3, [pc, #220]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004550:	689b      	ldr	r3, [r3, #8]
 8004552:	f023 0203 	bic.w	r2, r3, #3
 8004556:	687b      	ldr	r3, [r7, #4]
 8004558:	685b      	ldr	r3, [r3, #4]
 800455a:	4934      	ldr	r1, [pc, #208]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 800455c:	4313      	orrs	r3, r2
 800455e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004560:	f7fe f98a 	bl	8002878 <HAL_GetTick>
 8004564:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004566:	e00a      	b.n	800457e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004568:	f7fe f986 	bl	8002878 <HAL_GetTick>
 800456c:	4602      	mov	r2, r0
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	1ad3      	subs	r3, r2, r3
 8004572:	f241 3288 	movw	r2, #5000	; 0x1388
 8004576:	4293      	cmp	r3, r2
 8004578:	d901      	bls.n	800457e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800457a:	2303      	movs	r3, #3
 800457c:	e04f      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800457e:	4b2b      	ldr	r3, [pc, #172]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 8004580:	689b      	ldr	r3, [r3, #8]
 8004582:	f003 020c 	and.w	r2, r3, #12
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	009b      	lsls	r3, r3, #2
 800458c:	429a      	cmp	r2, r3
 800458e:	d1eb      	bne.n	8004568 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004590:	4b25      	ldr	r3, [pc, #148]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	f003 0307 	and.w	r3, r3, #7
 8004598:	683a      	ldr	r2, [r7, #0]
 800459a:	429a      	cmp	r2, r3
 800459c:	d20c      	bcs.n	80045b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800459e:	4b22      	ldr	r3, [pc, #136]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 80045a0:	683a      	ldr	r2, [r7, #0]
 80045a2:	b2d2      	uxtb	r2, r2
 80045a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80045a6:	4b20      	ldr	r3, [pc, #128]	; (8004628 <HAL_RCC_ClockConfig+0x1b8>)
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	f003 0307 	and.w	r3, r3, #7
 80045ae:	683a      	ldr	r2, [r7, #0]
 80045b0:	429a      	cmp	r2, r3
 80045b2:	d001      	beq.n	80045b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	e032      	b.n	800461e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	f003 0304 	and.w	r3, r3, #4
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d008      	beq.n	80045d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80045c4:	4b19      	ldr	r3, [pc, #100]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045c6:	689b      	ldr	r3, [r3, #8]
 80045c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	68db      	ldr	r3, [r3, #12]
 80045d0:	4916      	ldr	r1, [pc, #88]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045d2:	4313      	orrs	r3, r2
 80045d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	681b      	ldr	r3, [r3, #0]
 80045da:	f003 0308 	and.w	r3, r3, #8
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d009      	beq.n	80045f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80045e2:	4b12      	ldr	r3, [pc, #72]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	691b      	ldr	r3, [r3, #16]
 80045ee:	00db      	lsls	r3, r3, #3
 80045f0:	490e      	ldr	r1, [pc, #56]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045f2:	4313      	orrs	r3, r2
 80045f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80045f6:	f000 f821 	bl	800463c <HAL_RCC_GetSysClockFreq>
 80045fa:	4602      	mov	r2, r0
 80045fc:	4b0b      	ldr	r3, [pc, #44]	; (800462c <HAL_RCC_ClockConfig+0x1bc>)
 80045fe:	689b      	ldr	r3, [r3, #8]
 8004600:	091b      	lsrs	r3, r3, #4
 8004602:	f003 030f 	and.w	r3, r3, #15
 8004606:	490a      	ldr	r1, [pc, #40]	; (8004630 <HAL_RCC_ClockConfig+0x1c0>)
 8004608:	5ccb      	ldrb	r3, [r1, r3]
 800460a:	fa22 f303 	lsr.w	r3, r2, r3
 800460e:	4a09      	ldr	r2, [pc, #36]	; (8004634 <HAL_RCC_ClockConfig+0x1c4>)
 8004610:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8004612:	4b09      	ldr	r3, [pc, #36]	; (8004638 <HAL_RCC_ClockConfig+0x1c8>)
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	4618      	mov	r0, r3
 8004618:	f7fe f8ea 	bl	80027f0 <HAL_InitTick>

  return HAL_OK;
 800461c:	2300      	movs	r3, #0
}
 800461e:	4618      	mov	r0, r3
 8004620:	3710      	adds	r7, #16
 8004622:	46bd      	mov	sp, r7
 8004624:	bd80      	pop	{r7, pc}
 8004626:	bf00      	nop
 8004628:	40023c00 	.word	0x40023c00
 800462c:	40023800 	.word	0x40023800
 8004630:	08007888 	.word	0x08007888
 8004634:	20001448 	.word	0x20001448
 8004638:	2000144c 	.word	0x2000144c

0800463c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800463c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004640:	b094      	sub	sp, #80	; 0x50
 8004642:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8004644:	2300      	movs	r3, #0
 8004646:	647b      	str	r3, [r7, #68]	; 0x44
 8004648:	2300      	movs	r3, #0
 800464a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800464c:	2300      	movs	r3, #0
 800464e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8004650:	2300      	movs	r3, #0
 8004652:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004654:	4b79      	ldr	r3, [pc, #484]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 8004656:	689b      	ldr	r3, [r3, #8]
 8004658:	f003 030c 	and.w	r3, r3, #12
 800465c:	2b08      	cmp	r3, #8
 800465e:	d00d      	beq.n	800467c <HAL_RCC_GetSysClockFreq+0x40>
 8004660:	2b08      	cmp	r3, #8
 8004662:	f200 80e1 	bhi.w	8004828 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004666:	2b00      	cmp	r3, #0
 8004668:	d002      	beq.n	8004670 <HAL_RCC_GetSysClockFreq+0x34>
 800466a:	2b04      	cmp	r3, #4
 800466c:	d003      	beq.n	8004676 <HAL_RCC_GetSysClockFreq+0x3a>
 800466e:	e0db      	b.n	8004828 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004670:	4b73      	ldr	r3, [pc, #460]	; (8004840 <HAL_RCC_GetSysClockFreq+0x204>)
 8004672:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004674:	e0db      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004676:	4b73      	ldr	r3, [pc, #460]	; (8004844 <HAL_RCC_GetSysClockFreq+0x208>)
 8004678:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800467a:	e0d8      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800467c:	4b6f      	ldr	r3, [pc, #444]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 800467e:	685b      	ldr	r3, [r3, #4]
 8004680:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004684:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004686:	4b6d      	ldr	r3, [pc, #436]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 8004688:	685b      	ldr	r3, [r3, #4]
 800468a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800468e:	2b00      	cmp	r3, #0
 8004690:	d063      	beq.n	800475a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004692:	4b6a      	ldr	r3, [pc, #424]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 8004694:	685b      	ldr	r3, [r3, #4]
 8004696:	099b      	lsrs	r3, r3, #6
 8004698:	2200      	movs	r2, #0
 800469a:	63bb      	str	r3, [r7, #56]	; 0x38
 800469c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800469e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80046a0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80046a4:	633b      	str	r3, [r7, #48]	; 0x30
 80046a6:	2300      	movs	r3, #0
 80046a8:	637b      	str	r3, [r7, #52]	; 0x34
 80046aa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80046ae:	4622      	mov	r2, r4
 80046b0:	462b      	mov	r3, r5
 80046b2:	f04f 0000 	mov.w	r0, #0
 80046b6:	f04f 0100 	mov.w	r1, #0
 80046ba:	0159      	lsls	r1, r3, #5
 80046bc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80046c0:	0150      	lsls	r0, r2, #5
 80046c2:	4602      	mov	r2, r0
 80046c4:	460b      	mov	r3, r1
 80046c6:	4621      	mov	r1, r4
 80046c8:	1a51      	subs	r1, r2, r1
 80046ca:	6139      	str	r1, [r7, #16]
 80046cc:	4629      	mov	r1, r5
 80046ce:	eb63 0301 	sbc.w	r3, r3, r1
 80046d2:	617b      	str	r3, [r7, #20]
 80046d4:	f04f 0200 	mov.w	r2, #0
 80046d8:	f04f 0300 	mov.w	r3, #0
 80046dc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046e0:	4659      	mov	r1, fp
 80046e2:	018b      	lsls	r3, r1, #6
 80046e4:	4651      	mov	r1, sl
 80046e6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80046ea:	4651      	mov	r1, sl
 80046ec:	018a      	lsls	r2, r1, #6
 80046ee:	4651      	mov	r1, sl
 80046f0:	ebb2 0801 	subs.w	r8, r2, r1
 80046f4:	4659      	mov	r1, fp
 80046f6:	eb63 0901 	sbc.w	r9, r3, r1
 80046fa:	f04f 0200 	mov.w	r2, #0
 80046fe:	f04f 0300 	mov.w	r3, #0
 8004702:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004706:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800470a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800470e:	4690      	mov	r8, r2
 8004710:	4699      	mov	r9, r3
 8004712:	4623      	mov	r3, r4
 8004714:	eb18 0303 	adds.w	r3, r8, r3
 8004718:	60bb      	str	r3, [r7, #8]
 800471a:	462b      	mov	r3, r5
 800471c:	eb49 0303 	adc.w	r3, r9, r3
 8004720:	60fb      	str	r3, [r7, #12]
 8004722:	f04f 0200 	mov.w	r2, #0
 8004726:	f04f 0300 	mov.w	r3, #0
 800472a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800472e:	4629      	mov	r1, r5
 8004730:	024b      	lsls	r3, r1, #9
 8004732:	4621      	mov	r1, r4
 8004734:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8004738:	4621      	mov	r1, r4
 800473a:	024a      	lsls	r2, r1, #9
 800473c:	4610      	mov	r0, r2
 800473e:	4619      	mov	r1, r3
 8004740:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004742:	2200      	movs	r2, #0
 8004744:	62bb      	str	r3, [r7, #40]	; 0x28
 8004746:	62fa      	str	r2, [r7, #44]	; 0x2c
 8004748:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800474c:	f7fb fd54 	bl	80001f8 <__aeabi_uldivmod>
 8004750:	4602      	mov	r2, r0
 8004752:	460b      	mov	r3, r1
 8004754:	4613      	mov	r3, r2
 8004756:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004758:	e058      	b.n	800480c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800475a:	4b38      	ldr	r3, [pc, #224]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 800475c:	685b      	ldr	r3, [r3, #4]
 800475e:	099b      	lsrs	r3, r3, #6
 8004760:	2200      	movs	r2, #0
 8004762:	4618      	mov	r0, r3
 8004764:	4611      	mov	r1, r2
 8004766:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800476a:	623b      	str	r3, [r7, #32]
 800476c:	2300      	movs	r3, #0
 800476e:	627b      	str	r3, [r7, #36]	; 0x24
 8004770:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004774:	4642      	mov	r2, r8
 8004776:	464b      	mov	r3, r9
 8004778:	f04f 0000 	mov.w	r0, #0
 800477c:	f04f 0100 	mov.w	r1, #0
 8004780:	0159      	lsls	r1, r3, #5
 8004782:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004786:	0150      	lsls	r0, r2, #5
 8004788:	4602      	mov	r2, r0
 800478a:	460b      	mov	r3, r1
 800478c:	4641      	mov	r1, r8
 800478e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004792:	4649      	mov	r1, r9
 8004794:	eb63 0b01 	sbc.w	fp, r3, r1
 8004798:	f04f 0200 	mov.w	r2, #0
 800479c:	f04f 0300 	mov.w	r3, #0
 80047a0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80047a4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80047a8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80047ac:	ebb2 040a 	subs.w	r4, r2, sl
 80047b0:	eb63 050b 	sbc.w	r5, r3, fp
 80047b4:	f04f 0200 	mov.w	r2, #0
 80047b8:	f04f 0300 	mov.w	r3, #0
 80047bc:	00eb      	lsls	r3, r5, #3
 80047be:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80047c2:	00e2      	lsls	r2, r4, #3
 80047c4:	4614      	mov	r4, r2
 80047c6:	461d      	mov	r5, r3
 80047c8:	4643      	mov	r3, r8
 80047ca:	18e3      	adds	r3, r4, r3
 80047cc:	603b      	str	r3, [r7, #0]
 80047ce:	464b      	mov	r3, r9
 80047d0:	eb45 0303 	adc.w	r3, r5, r3
 80047d4:	607b      	str	r3, [r7, #4]
 80047d6:	f04f 0200 	mov.w	r2, #0
 80047da:	f04f 0300 	mov.w	r3, #0
 80047de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80047e2:	4629      	mov	r1, r5
 80047e4:	028b      	lsls	r3, r1, #10
 80047e6:	4621      	mov	r1, r4
 80047e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047ec:	4621      	mov	r1, r4
 80047ee:	028a      	lsls	r2, r1, #10
 80047f0:	4610      	mov	r0, r2
 80047f2:	4619      	mov	r1, r3
 80047f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047f6:	2200      	movs	r2, #0
 80047f8:	61bb      	str	r3, [r7, #24]
 80047fa:	61fa      	str	r2, [r7, #28]
 80047fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004800:	f7fb fcfa 	bl	80001f8 <__aeabi_uldivmod>
 8004804:	4602      	mov	r2, r0
 8004806:	460b      	mov	r3, r1
 8004808:	4613      	mov	r3, r2
 800480a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800480c:	4b0b      	ldr	r3, [pc, #44]	; (800483c <HAL_RCC_GetSysClockFreq+0x200>)
 800480e:	685b      	ldr	r3, [r3, #4]
 8004810:	0c1b      	lsrs	r3, r3, #16
 8004812:	f003 0303 	and.w	r3, r3, #3
 8004816:	3301      	adds	r3, #1
 8004818:	005b      	lsls	r3, r3, #1
 800481a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800481c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800481e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004820:	fbb2 f3f3 	udiv	r3, r2, r3
 8004824:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8004826:	e002      	b.n	800482e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8004828:	4b05      	ldr	r3, [pc, #20]	; (8004840 <HAL_RCC_GetSysClockFreq+0x204>)
 800482a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800482c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800482e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8004830:	4618      	mov	r0, r3
 8004832:	3750      	adds	r7, #80	; 0x50
 8004834:	46bd      	mov	sp, r7
 8004836:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800483a:	bf00      	nop
 800483c:	40023800 	.word	0x40023800
 8004840:	00f42400 	.word	0x00f42400
 8004844:	007a1200 	.word	0x007a1200

08004848 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8004848:	b480      	push	{r7}
 800484a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800484c:	4b03      	ldr	r3, [pc, #12]	; (800485c <HAL_RCC_GetHCLKFreq+0x14>)
 800484e:	681b      	ldr	r3, [r3, #0]
}
 8004850:	4618      	mov	r0, r3
 8004852:	46bd      	mov	sp, r7
 8004854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004858:	4770      	bx	lr
 800485a:	bf00      	nop
 800485c:	20001448 	.word	0x20001448

08004860 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004860:	b580      	push	{r7, lr}
 8004862:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004864:	f7ff fff0 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004868:	4602      	mov	r2, r0
 800486a:	4b05      	ldr	r3, [pc, #20]	; (8004880 <HAL_RCC_GetPCLK1Freq+0x20>)
 800486c:	689b      	ldr	r3, [r3, #8]
 800486e:	0a9b      	lsrs	r3, r3, #10
 8004870:	f003 0307 	and.w	r3, r3, #7
 8004874:	4903      	ldr	r1, [pc, #12]	; (8004884 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004876:	5ccb      	ldrb	r3, [r1, r3]
 8004878:	fa22 f303 	lsr.w	r3, r2, r3
}
 800487c:	4618      	mov	r0, r3
 800487e:	bd80      	pop	{r7, pc}
 8004880:	40023800 	.word	0x40023800
 8004884:	08007898 	.word	0x08007898

08004888 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800488c:	f7ff ffdc 	bl	8004848 <HAL_RCC_GetHCLKFreq>
 8004890:	4602      	mov	r2, r0
 8004892:	4b05      	ldr	r3, [pc, #20]	; (80048a8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004894:	689b      	ldr	r3, [r3, #8]
 8004896:	0b5b      	lsrs	r3, r3, #13
 8004898:	f003 0307 	and.w	r3, r3, #7
 800489c:	4903      	ldr	r1, [pc, #12]	; (80048ac <HAL_RCC_GetPCLK2Freq+0x24>)
 800489e:	5ccb      	ldrb	r3, [r1, r3]
 80048a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80048a4:	4618      	mov	r0, r3
 80048a6:	bd80      	pop	{r7, pc}
 80048a8:	40023800 	.word	0x40023800
 80048ac:	08007898 	.word	0x08007898

080048b0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80048b0:	b580      	push	{r7, lr}
 80048b2:	b082      	sub	sp, #8
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d101      	bne.n	80048c2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80048be:	2301      	movs	r3, #1
 80048c0:	e07b      	b.n	80049ba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d108      	bne.n	80048dc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	685b      	ldr	r3, [r3, #4]
 80048ce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80048d2:	d009      	beq.n	80048e8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	2200      	movs	r2, #0
 80048d8:	61da      	str	r2, [r3, #28]
 80048da:	e005      	b.n	80048e8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2200      	movs	r2, #0
 80048e0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2200      	movs	r2, #0
 80048e6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	2200      	movs	r2, #0
 80048ec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d106      	bne.n	8004908 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004902:	6878      	ldr	r0, [r7, #4]
 8004904:	f7fd fcc2 	bl	800228c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2202      	movs	r2, #2
 800490c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	681a      	ldr	r2, [r3, #0]
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800491e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	685b      	ldr	r3, [r3, #4]
 8004924:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8004930:	431a      	orrs	r2, r3
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	68db      	ldr	r3, [r3, #12]
 8004936:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800493a:	431a      	orrs	r2, r3
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	691b      	ldr	r3, [r3, #16]
 8004940:	f003 0302 	and.w	r3, r3, #2
 8004944:	431a      	orrs	r2, r3
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	695b      	ldr	r3, [r3, #20]
 800494a:	f003 0301 	and.w	r3, r3, #1
 800494e:	431a      	orrs	r2, r3
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	699b      	ldr	r3, [r3, #24]
 8004954:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004958:	431a      	orrs	r2, r3
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	69db      	ldr	r3, [r3, #28]
 800495e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004962:	431a      	orrs	r2, r3
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	6a1b      	ldr	r3, [r3, #32]
 8004968:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800496c:	ea42 0103 	orr.w	r1, r2, r3
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004974:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	430a      	orrs	r2, r1
 800497e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	699b      	ldr	r3, [r3, #24]
 8004984:	0c1b      	lsrs	r3, r3, #16
 8004986:	f003 0104 	and.w	r1, r3, #4
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800498e:	f003 0210 	and.w	r2, r3, #16
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	430a      	orrs	r2, r1
 8004998:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	681b      	ldr	r3, [r3, #0]
 800499e:	69da      	ldr	r2, [r3, #28]
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049a8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	2200      	movs	r2, #0
 80049ae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2201      	movs	r2, #1
 80049b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3708      	adds	r7, #8
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b088      	sub	sp, #32
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	603b      	str	r3, [r7, #0]
 80049ce:	4613      	mov	r3, r2
 80049d0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80049d2:	2300      	movs	r3, #0
 80049d4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80049dc:	2b01      	cmp	r3, #1
 80049de:	d101      	bne.n	80049e4 <HAL_SPI_Transmit+0x22>
 80049e0:	2302      	movs	r3, #2
 80049e2:	e126      	b.n	8004c32 <HAL_SPI_Transmit+0x270>
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80049ec:	f7fd ff44 	bl	8002878 <HAL_GetTick>
 80049f0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80049f2:	88fb      	ldrh	r3, [r7, #6]
 80049f4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80049fc:	b2db      	uxtb	r3, r3
 80049fe:	2b01      	cmp	r3, #1
 8004a00:	d002      	beq.n	8004a08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a02:	2302      	movs	r3, #2
 8004a04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a06:	e10b      	b.n	8004c20 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a08:	68bb      	ldr	r3, [r7, #8]
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d002      	beq.n	8004a14 <HAL_SPI_Transmit+0x52>
 8004a0e:	88fb      	ldrh	r3, [r7, #6]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d102      	bne.n	8004a1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004a14:	2301      	movs	r3, #1
 8004a16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a18:	e102      	b.n	8004c20 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004a1a:	68fb      	ldr	r3, [r7, #12]
 8004a1c:	2203      	movs	r2, #3
 8004a1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004a22:	68fb      	ldr	r3, [r7, #12]
 8004a24:	2200      	movs	r2, #0
 8004a26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	68ba      	ldr	r2, [r7, #8]
 8004a2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	88fa      	ldrh	r2, [r7, #6]
 8004a32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	88fa      	ldrh	r2, [r7, #6]
 8004a38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004a3a:	68fb      	ldr	r3, [r7, #12]
 8004a3c:	2200      	movs	r2, #0
 8004a3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004a40:	68fb      	ldr	r3, [r7, #12]
 8004a42:	2200      	movs	r2, #0
 8004a44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004a46:	68fb      	ldr	r3, [r7, #12]
 8004a48:	2200      	movs	r2, #0
 8004a4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004a4c:	68fb      	ldr	r3, [r7, #12]
 8004a4e:	2200      	movs	r2, #0
 8004a50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	2200      	movs	r2, #0
 8004a56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	689b      	ldr	r3, [r3, #8]
 8004a5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004a60:	d10f      	bne.n	8004a82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004a62:	68fb      	ldr	r3, [r7, #12]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	681a      	ldr	r2, [r3, #0]
 8004a68:	68fb      	ldr	r3, [r7, #12]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004a70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	681a      	ldr	r2, [r3, #0]
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	681b      	ldr	r3, [r3, #0]
 8004a7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004a80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004a82:	68fb      	ldr	r3, [r7, #12]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8c:	2b40      	cmp	r3, #64	; 0x40
 8004a8e:	d007      	beq.n	8004aa0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004a90:	68fb      	ldr	r3, [r7, #12]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004a9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	68db      	ldr	r3, [r3, #12]
 8004aa4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004aa8:	d14b      	bne.n	8004b42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	685b      	ldr	r3, [r3, #4]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d002      	beq.n	8004ab8 <HAL_SPI_Transmit+0xf6>
 8004ab2:	8afb      	ldrh	r3, [r7, #22]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d13e      	bne.n	8004b36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004abc:	881a      	ldrh	r2, [r3, #0]
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	681b      	ldr	r3, [r3, #0]
 8004ac2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004ac8:	1c9a      	adds	r2, r3, #2
 8004aca:	68fb      	ldr	r3, [r7, #12]
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ad2:	b29b      	uxth	r3, r3
 8004ad4:	3b01      	subs	r3, #1
 8004ad6:	b29a      	uxth	r2, r3
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004adc:	e02b      	b.n	8004b36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004ade:	68fb      	ldr	r3, [r7, #12]
 8004ae0:	681b      	ldr	r3, [r3, #0]
 8004ae2:	689b      	ldr	r3, [r3, #8]
 8004ae4:	f003 0302 	and.w	r3, r3, #2
 8004ae8:	2b02      	cmp	r3, #2
 8004aea:	d112      	bne.n	8004b12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004af0:	881a      	ldrh	r2, [r3, #0]
 8004af2:	68fb      	ldr	r3, [r7, #12]
 8004af4:	681b      	ldr	r3, [r3, #0]
 8004af6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004af8:	68fb      	ldr	r3, [r7, #12]
 8004afa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004afc:	1c9a      	adds	r2, r3, #2
 8004afe:	68fb      	ldr	r3, [r7, #12]
 8004b00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b06:	b29b      	uxth	r3, r3
 8004b08:	3b01      	subs	r3, #1
 8004b0a:	b29a      	uxth	r2, r3
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004b10:	e011      	b.n	8004b36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004b12:	f7fd feb1 	bl	8002878 <HAL_GetTick>
 8004b16:	4602      	mov	r2, r0
 8004b18:	69bb      	ldr	r3, [r7, #24]
 8004b1a:	1ad3      	subs	r3, r2, r3
 8004b1c:	683a      	ldr	r2, [r7, #0]
 8004b1e:	429a      	cmp	r2, r3
 8004b20:	d803      	bhi.n	8004b2a <HAL_SPI_Transmit+0x168>
 8004b22:	683b      	ldr	r3, [r7, #0]
 8004b24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004b28:	d102      	bne.n	8004b30 <HAL_SPI_Transmit+0x16e>
 8004b2a:	683b      	ldr	r3, [r7, #0]
 8004b2c:	2b00      	cmp	r3, #0
 8004b2e:	d102      	bne.n	8004b36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004b30:	2303      	movs	r3, #3
 8004b32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004b34:	e074      	b.n	8004c20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004b36:	68fb      	ldr	r3, [r7, #12]
 8004b38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b3a:	b29b      	uxth	r3, r3
 8004b3c:	2b00      	cmp	r3, #0
 8004b3e:	d1ce      	bne.n	8004ade <HAL_SPI_Transmit+0x11c>
 8004b40:	e04c      	b.n	8004bdc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	685b      	ldr	r3, [r3, #4]
 8004b46:	2b00      	cmp	r3, #0
 8004b48:	d002      	beq.n	8004b50 <HAL_SPI_Transmit+0x18e>
 8004b4a:	8afb      	ldrh	r3, [r7, #22]
 8004b4c:	2b01      	cmp	r3, #1
 8004b4e:	d140      	bne.n	8004bd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	330c      	adds	r3, #12
 8004b5a:	7812      	ldrb	r2, [r2, #0]
 8004b5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b62:	1c5a      	adds	r2, r3, #1
 8004b64:	68fb      	ldr	r3, [r7, #12]
 8004b66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b6c:	b29b      	uxth	r3, r3
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	b29a      	uxth	r2, r3
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004b76:	e02c      	b.n	8004bd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 0302 	and.w	r3, r3, #2
 8004b82:	2b02      	cmp	r3, #2
 8004b84:	d113      	bne.n	8004bae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	330c      	adds	r3, #12
 8004b90:	7812      	ldrb	r2, [r2, #0]
 8004b92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	86da      	strh	r2, [r3, #54]	; 0x36
 8004bac:	e011      	b.n	8004bd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004bae:	f7fd fe63 	bl	8002878 <HAL_GetTick>
 8004bb2:	4602      	mov	r2, r0
 8004bb4:	69bb      	ldr	r3, [r7, #24]
 8004bb6:	1ad3      	subs	r3, r2, r3
 8004bb8:	683a      	ldr	r2, [r7, #0]
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d803      	bhi.n	8004bc6 <HAL_SPI_Transmit+0x204>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bc4:	d102      	bne.n	8004bcc <HAL_SPI_Transmit+0x20a>
 8004bc6:	683b      	ldr	r3, [r7, #0]
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d102      	bne.n	8004bd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004bcc:	2303      	movs	r3, #3
 8004bce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bd0:	e026      	b.n	8004c20 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bd6:	b29b      	uxth	r3, r3
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d1cd      	bne.n	8004b78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004bdc:	69ba      	ldr	r2, [r7, #24]
 8004bde:	6839      	ldr	r1, [r7, #0]
 8004be0:	68f8      	ldr	r0, [r7, #12]
 8004be2:	f000 f8b3 	bl	8004d4c <SPI_EndRxTxTransaction>
 8004be6:	4603      	mov	r3, r0
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d002      	beq.n	8004bf2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	2220      	movs	r2, #32
 8004bf0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	689b      	ldr	r3, [r3, #8]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d10a      	bne.n	8004c10 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	613b      	str	r3, [r7, #16]
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	68db      	ldr	r3, [r3, #12]
 8004c04:	613b      	str	r3, [r7, #16]
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	689b      	ldr	r3, [r3, #8]
 8004c0c:	613b      	str	r3, [r7, #16]
 8004c0e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c14:	2b00      	cmp	r3, #0
 8004c16:	d002      	beq.n	8004c1e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004c18:	2301      	movs	r3, #1
 8004c1a:	77fb      	strb	r3, [r7, #31]
 8004c1c:	e000      	b.n	8004c20 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004c1e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004c20:	68fb      	ldr	r3, [r7, #12]
 8004c22:	2201      	movs	r2, #1
 8004c24:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	2200      	movs	r2, #0
 8004c2c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004c30:	7ffb      	ldrb	r3, [r7, #31]
}
 8004c32:	4618      	mov	r0, r3
 8004c34:	3720      	adds	r7, #32
 8004c36:	46bd      	mov	sp, r7
 8004c38:	bd80      	pop	{r7, pc}
	...

08004c3c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004c3c:	b580      	push	{r7, lr}
 8004c3e:	b088      	sub	sp, #32
 8004c40:	af00      	add	r7, sp, #0
 8004c42:	60f8      	str	r0, [r7, #12]
 8004c44:	60b9      	str	r1, [r7, #8]
 8004c46:	603b      	str	r3, [r7, #0]
 8004c48:	4613      	mov	r3, r2
 8004c4a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004c4c:	f7fd fe14 	bl	8002878 <HAL_GetTick>
 8004c50:	4602      	mov	r2, r0
 8004c52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c54:	1a9b      	subs	r3, r3, r2
 8004c56:	683a      	ldr	r2, [r7, #0]
 8004c58:	4413      	add	r3, r2
 8004c5a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004c5c:	f7fd fe0c 	bl	8002878 <HAL_GetTick>
 8004c60:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004c62:	4b39      	ldr	r3, [pc, #228]	; (8004d48 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	015b      	lsls	r3, r3, #5
 8004c68:	0d1b      	lsrs	r3, r3, #20
 8004c6a:	69fa      	ldr	r2, [r7, #28]
 8004c6c:	fb02 f303 	mul.w	r3, r2, r3
 8004c70:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004c72:	e054      	b.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004c74:	683b      	ldr	r3, [r7, #0]
 8004c76:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c7a:	d050      	beq.n	8004d1e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004c7c:	f7fd fdfc 	bl	8002878 <HAL_GetTick>
 8004c80:	4602      	mov	r2, r0
 8004c82:	69bb      	ldr	r3, [r7, #24]
 8004c84:	1ad3      	subs	r3, r2, r3
 8004c86:	69fa      	ldr	r2, [r7, #28]
 8004c88:	429a      	cmp	r2, r3
 8004c8a:	d902      	bls.n	8004c92 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004c8c:	69fb      	ldr	r3, [r7, #28]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d13d      	bne.n	8004d0e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	685a      	ldr	r2, [r3, #4]
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004ca0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	685b      	ldr	r3, [r3, #4]
 8004ca6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004caa:	d111      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	689b      	ldr	r3, [r3, #8]
 8004cb0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004cb4:	d004      	beq.n	8004cc0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	689b      	ldr	r3, [r3, #8]
 8004cba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004cbe:	d107      	bne.n	8004cd0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004cc0:	68fb      	ldr	r3, [r7, #12]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	681a      	ldr	r2, [r3, #0]
 8004cc6:	68fb      	ldr	r3, [r7, #12]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004cce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004cd4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004cd8:	d10f      	bne.n	8004cfa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	681a      	ldr	r2, [r3, #0]
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004ce8:	601a      	str	r2, [r3, #0]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681a      	ldr	r2, [r3, #0]
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	681b      	ldr	r3, [r3, #0]
 8004cf4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004cf8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d0a:	2303      	movs	r3, #3
 8004d0c:	e017      	b.n	8004d3e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004d0e:	697b      	ldr	r3, [r7, #20]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d101      	bne.n	8004d18 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004d18:	697b      	ldr	r3, [r7, #20]
 8004d1a:	3b01      	subs	r3, #1
 8004d1c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	689a      	ldr	r2, [r3, #8]
 8004d24:	68bb      	ldr	r3, [r7, #8]
 8004d26:	4013      	ands	r3, r2
 8004d28:	68ba      	ldr	r2, [r7, #8]
 8004d2a:	429a      	cmp	r2, r3
 8004d2c:	bf0c      	ite	eq
 8004d2e:	2301      	moveq	r3, #1
 8004d30:	2300      	movne	r3, #0
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	461a      	mov	r2, r3
 8004d36:	79fb      	ldrb	r3, [r7, #7]
 8004d38:	429a      	cmp	r2, r3
 8004d3a:	d19b      	bne.n	8004c74 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004d3c:	2300      	movs	r3, #0
}
 8004d3e:	4618      	mov	r0, r3
 8004d40:	3720      	adds	r7, #32
 8004d42:	46bd      	mov	sp, r7
 8004d44:	bd80      	pop	{r7, pc}
 8004d46:	bf00      	nop
 8004d48:	20001448 	.word	0x20001448

08004d4c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004d4c:	b580      	push	{r7, lr}
 8004d4e:	b088      	sub	sp, #32
 8004d50:	af02      	add	r7, sp, #8
 8004d52:	60f8      	str	r0, [r7, #12]
 8004d54:	60b9      	str	r1, [r7, #8]
 8004d56:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004d58:	4b1b      	ldr	r3, [pc, #108]	; (8004dc8 <SPI_EndRxTxTransaction+0x7c>)
 8004d5a:	681b      	ldr	r3, [r3, #0]
 8004d5c:	4a1b      	ldr	r2, [pc, #108]	; (8004dcc <SPI_EndRxTxTransaction+0x80>)
 8004d5e:	fba2 2303 	umull	r2, r3, r2, r3
 8004d62:	0d5b      	lsrs	r3, r3, #21
 8004d64:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004d68:	fb02 f303 	mul.w	r3, r2, r3
 8004d6c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	685b      	ldr	r3, [r3, #4]
 8004d72:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d76:	d112      	bne.n	8004d9e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	2180      	movs	r1, #128	; 0x80
 8004d82:	68f8      	ldr	r0, [r7, #12]
 8004d84:	f7ff ff5a 	bl	8004c3c <SPI_WaitFlagStateUntilTimeout>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d016      	beq.n	8004dbc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004d92:	f043 0220 	orr.w	r2, r3, #32
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004d9a:	2303      	movs	r3, #3
 8004d9c:	e00f      	b.n	8004dbe <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004d9e:	697b      	ldr	r3, [r7, #20]
 8004da0:	2b00      	cmp	r3, #0
 8004da2:	d00a      	beq.n	8004dba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004da4:	697b      	ldr	r3, [r7, #20]
 8004da6:	3b01      	subs	r3, #1
 8004da8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004daa:	68fb      	ldr	r3, [r7, #12]
 8004dac:	681b      	ldr	r3, [r3, #0]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004db4:	2b80      	cmp	r3, #128	; 0x80
 8004db6:	d0f2      	beq.n	8004d9e <SPI_EndRxTxTransaction+0x52>
 8004db8:	e000      	b.n	8004dbc <SPI_EndRxTxTransaction+0x70>
        break;
 8004dba:	bf00      	nop
  }

  return HAL_OK;
 8004dbc:	2300      	movs	r3, #0
}
 8004dbe:	4618      	mov	r0, r3
 8004dc0:	3718      	adds	r7, #24
 8004dc2:	46bd      	mov	sp, r7
 8004dc4:	bd80      	pop	{r7, pc}
 8004dc6:	bf00      	nop
 8004dc8:	20001448 	.word	0x20001448
 8004dcc:	165e9f81 	.word	0x165e9f81

08004dd0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004dd0:	b580      	push	{r7, lr}
 8004dd2:	b082      	sub	sp, #8
 8004dd4:	af00      	add	r7, sp, #0
 8004dd6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004dd8:	687b      	ldr	r3, [r7, #4]
 8004dda:	2b00      	cmp	r3, #0
 8004ddc:	d101      	bne.n	8004de2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004dde:	2301      	movs	r3, #1
 8004de0:	e041      	b.n	8004e66 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004de8:	b2db      	uxtb	r3, r3
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d106      	bne.n	8004dfc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dee:	687b      	ldr	r3, [r7, #4]
 8004df0:	2200      	movs	r2, #0
 8004df2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004df6:	6878      	ldr	r0, [r7, #4]
 8004df8:	f7fd fab0 	bl	800235c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dfc:	687b      	ldr	r3, [r7, #4]
 8004dfe:	2202      	movs	r2, #2
 8004e00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e04:	687b      	ldr	r3, [r7, #4]
 8004e06:	681a      	ldr	r2, [r3, #0]
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	3304      	adds	r3, #4
 8004e0c:	4619      	mov	r1, r3
 8004e0e:	4610      	mov	r0, r2
 8004e10:	f000 ff6c 	bl	8005cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004e14:	687b      	ldr	r3, [r7, #4]
 8004e16:	2201      	movs	r2, #1
 8004e18:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	2201      	movs	r2, #1
 8004e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	2201      	movs	r2, #1
 8004e28:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	2201      	movs	r2, #1
 8004e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	2201      	movs	r2, #1
 8004e38:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	2201      	movs	r2, #1
 8004e40:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	2201      	movs	r2, #1
 8004e48:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	2201      	movs	r2, #1
 8004e50:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2201      	movs	r2, #1
 8004e58:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2201      	movs	r2, #1
 8004e60:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e64:	2300      	movs	r3, #0
}
 8004e66:	4618      	mov	r0, r3
 8004e68:	3708      	adds	r7, #8
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	bd80      	pop	{r7, pc}
	...

08004e70 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004e70:	b480      	push	{r7}
 8004e72:	b085      	sub	sp, #20
 8004e74:	af00      	add	r7, sp, #0
 8004e76:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7e:	b2db      	uxtb	r3, r3
 8004e80:	2b01      	cmp	r3, #1
 8004e82:	d001      	beq.n	8004e88 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004e84:	2301      	movs	r3, #1
 8004e86:	e044      	b.n	8004f12 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	2202      	movs	r2, #2
 8004e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	681b      	ldr	r3, [r3, #0]
 8004e94:	68da      	ldr	r2, [r3, #12]
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	681b      	ldr	r3, [r3, #0]
 8004e9a:	f042 0201 	orr.w	r2, r2, #1
 8004e9e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	681b      	ldr	r3, [r3, #0]
 8004ea4:	4a1e      	ldr	r2, [pc, #120]	; (8004f20 <HAL_TIM_Base_Start_IT+0xb0>)
 8004ea6:	4293      	cmp	r3, r2
 8004ea8:	d018      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004eaa:	687b      	ldr	r3, [r7, #4]
 8004eac:	681b      	ldr	r3, [r3, #0]
 8004eae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004eb2:	d013      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	4a1a      	ldr	r2, [pc, #104]	; (8004f24 <HAL_TIM_Base_Start_IT+0xb4>)
 8004eba:	4293      	cmp	r3, r2
 8004ebc:	d00e      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	681b      	ldr	r3, [r3, #0]
 8004ec2:	4a19      	ldr	r2, [pc, #100]	; (8004f28 <HAL_TIM_Base_Start_IT+0xb8>)
 8004ec4:	4293      	cmp	r3, r2
 8004ec6:	d009      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4a17      	ldr	r2, [pc, #92]	; (8004f2c <HAL_TIM_Base_Start_IT+0xbc>)
 8004ece:	4293      	cmp	r3, r2
 8004ed0:	d004      	beq.n	8004edc <HAL_TIM_Base_Start_IT+0x6c>
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	4a16      	ldr	r2, [pc, #88]	; (8004f30 <HAL_TIM_Base_Start_IT+0xc0>)
 8004ed8:	4293      	cmp	r3, r2
 8004eda:	d111      	bne.n	8004f00 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	681b      	ldr	r3, [r3, #0]
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 0307 	and.w	r3, r3, #7
 8004ee6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ee8:	68fb      	ldr	r3, [r7, #12]
 8004eea:	2b06      	cmp	r3, #6
 8004eec:	d010      	beq.n	8004f10 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	681a      	ldr	r2, [r3, #0]
 8004ef4:	687b      	ldr	r3, [r7, #4]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	f042 0201 	orr.w	r2, r2, #1
 8004efc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004efe:	e007      	b.n	8004f10 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f00:	687b      	ldr	r3, [r7, #4]
 8004f02:	681b      	ldr	r3, [r3, #0]
 8004f04:	681a      	ldr	r2, [r3, #0]
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	f042 0201 	orr.w	r2, r2, #1
 8004f0e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004f10:	2300      	movs	r3, #0
}
 8004f12:	4618      	mov	r0, r3
 8004f14:	3714      	adds	r7, #20
 8004f16:	46bd      	mov	sp, r7
 8004f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f1c:	4770      	bx	lr
 8004f1e:	bf00      	nop
 8004f20:	40010000 	.word	0x40010000
 8004f24:	40000400 	.word	0x40000400
 8004f28:	40000800 	.word	0x40000800
 8004f2c:	40000c00 	.word	0x40000c00
 8004f30:	40014000 	.word	0x40014000

08004f34 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004f34:	b580      	push	{r7, lr}
 8004f36:	b082      	sub	sp, #8
 8004f38:	af00      	add	r7, sp, #0
 8004f3a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	2b00      	cmp	r3, #0
 8004f40:	d101      	bne.n	8004f46 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004f42:	2301      	movs	r3, #1
 8004f44:	e041      	b.n	8004fca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004f46:	687b      	ldr	r3, [r7, #4]
 8004f48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f4c:	b2db      	uxtb	r3, r3
 8004f4e:	2b00      	cmp	r3, #0
 8004f50:	d106      	bne.n	8004f60 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	2200      	movs	r2, #0
 8004f56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004f5a:	6878      	ldr	r0, [r7, #4]
 8004f5c:	f7fd fa96 	bl	800248c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2202      	movs	r2, #2
 8004f64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	681a      	ldr	r2, [r3, #0]
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	3304      	adds	r3, #4
 8004f70:	4619      	mov	r1, r3
 8004f72:	4610      	mov	r0, r2
 8004f74:	f000 feba 	bl	8005cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	2201      	movs	r2, #1
 8004f7c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004f80:	687b      	ldr	r3, [r7, #4]
 8004f82:	2201      	movs	r2, #1
 8004f84:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	2201      	movs	r2, #1
 8004f8c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f90:	687b      	ldr	r3, [r7, #4]
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f98:	687b      	ldr	r3, [r7, #4]
 8004f9a:	2201      	movs	r2, #1
 8004f9c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	2201      	movs	r2, #1
 8004fa4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	2201      	movs	r2, #1
 8004fac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004fb0:	687b      	ldr	r3, [r7, #4]
 8004fb2:	2201      	movs	r2, #1
 8004fb4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	2201      	movs	r2, #1
 8004fbc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	2201      	movs	r2, #1
 8004fc4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004fc8:	2300      	movs	r3, #0
}
 8004fca:	4618      	mov	r0, r3
 8004fcc:	3708      	adds	r7, #8
 8004fce:	46bd      	mov	sp, r7
 8004fd0:	bd80      	pop	{r7, pc}
	...

08004fd4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004fd4:	b580      	push	{r7, lr}
 8004fd6:	b084      	sub	sp, #16
 8004fd8:	af00      	add	r7, sp, #0
 8004fda:	6078      	str	r0, [r7, #4]
 8004fdc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004fde:	683b      	ldr	r3, [r7, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d109      	bne.n	8004ff8 <HAL_TIM_PWM_Start+0x24>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004fea:	b2db      	uxtb	r3, r3
 8004fec:	2b01      	cmp	r3, #1
 8004fee:	bf14      	ite	ne
 8004ff0:	2301      	movne	r3, #1
 8004ff2:	2300      	moveq	r3, #0
 8004ff4:	b2db      	uxtb	r3, r3
 8004ff6:	e022      	b.n	800503e <HAL_TIM_PWM_Start+0x6a>
 8004ff8:	683b      	ldr	r3, [r7, #0]
 8004ffa:	2b04      	cmp	r3, #4
 8004ffc:	d109      	bne.n	8005012 <HAL_TIM_PWM_Start+0x3e>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005004:	b2db      	uxtb	r3, r3
 8005006:	2b01      	cmp	r3, #1
 8005008:	bf14      	ite	ne
 800500a:	2301      	movne	r3, #1
 800500c:	2300      	moveq	r3, #0
 800500e:	b2db      	uxtb	r3, r3
 8005010:	e015      	b.n	800503e <HAL_TIM_PWM_Start+0x6a>
 8005012:	683b      	ldr	r3, [r7, #0]
 8005014:	2b08      	cmp	r3, #8
 8005016:	d109      	bne.n	800502c <HAL_TIM_PWM_Start+0x58>
 8005018:	687b      	ldr	r3, [r7, #4]
 800501a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800501e:	b2db      	uxtb	r3, r3
 8005020:	2b01      	cmp	r3, #1
 8005022:	bf14      	ite	ne
 8005024:	2301      	movne	r3, #1
 8005026:	2300      	moveq	r3, #0
 8005028:	b2db      	uxtb	r3, r3
 800502a:	e008      	b.n	800503e <HAL_TIM_PWM_Start+0x6a>
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005032:	b2db      	uxtb	r3, r3
 8005034:	2b01      	cmp	r3, #1
 8005036:	bf14      	ite	ne
 8005038:	2301      	movne	r3, #1
 800503a:	2300      	moveq	r3, #0
 800503c:	b2db      	uxtb	r3, r3
 800503e:	2b00      	cmp	r3, #0
 8005040:	d001      	beq.n	8005046 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005042:	2301      	movs	r3, #1
 8005044:	e068      	b.n	8005118 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d104      	bne.n	8005056 <HAL_TIM_PWM_Start+0x82>
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2202      	movs	r2, #2
 8005050:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005054:	e013      	b.n	800507e <HAL_TIM_PWM_Start+0xaa>
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	2b04      	cmp	r3, #4
 800505a:	d104      	bne.n	8005066 <HAL_TIM_PWM_Start+0x92>
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	2202      	movs	r2, #2
 8005060:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005064:	e00b      	b.n	800507e <HAL_TIM_PWM_Start+0xaa>
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	2b08      	cmp	r3, #8
 800506a:	d104      	bne.n	8005076 <HAL_TIM_PWM_Start+0xa2>
 800506c:	687b      	ldr	r3, [r7, #4]
 800506e:	2202      	movs	r2, #2
 8005070:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005074:	e003      	b.n	800507e <HAL_TIM_PWM_Start+0xaa>
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	2202      	movs	r2, #2
 800507a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800507e:	687b      	ldr	r3, [r7, #4]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	2201      	movs	r2, #1
 8005084:	6839      	ldr	r1, [r7, #0]
 8005086:	4618      	mov	r0, r3
 8005088:	f001 f9f4 	bl	8006474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800508c:	687b      	ldr	r3, [r7, #4]
 800508e:	681b      	ldr	r3, [r3, #0]
 8005090:	4a23      	ldr	r2, [pc, #140]	; (8005120 <HAL_TIM_PWM_Start+0x14c>)
 8005092:	4293      	cmp	r3, r2
 8005094:	d107      	bne.n	80050a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005096:	687b      	ldr	r3, [r7, #4]
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80050a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	4a1d      	ldr	r2, [pc, #116]	; (8005120 <HAL_TIM_PWM_Start+0x14c>)
 80050ac:	4293      	cmp	r3, r2
 80050ae:	d018      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x10e>
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80050b8:	d013      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x10e>
 80050ba:	687b      	ldr	r3, [r7, #4]
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4a19      	ldr	r2, [pc, #100]	; (8005124 <HAL_TIM_PWM_Start+0x150>)
 80050c0:	4293      	cmp	r3, r2
 80050c2:	d00e      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x10e>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	4a17      	ldr	r2, [pc, #92]	; (8005128 <HAL_TIM_PWM_Start+0x154>)
 80050ca:	4293      	cmp	r3, r2
 80050cc:	d009      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x10e>
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a16      	ldr	r2, [pc, #88]	; (800512c <HAL_TIM_PWM_Start+0x158>)
 80050d4:	4293      	cmp	r3, r2
 80050d6:	d004      	beq.n	80050e2 <HAL_TIM_PWM_Start+0x10e>
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a14      	ldr	r2, [pc, #80]	; (8005130 <HAL_TIM_PWM_Start+0x15c>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d111      	bne.n	8005106 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80050e2:	687b      	ldr	r3, [r7, #4]
 80050e4:	681b      	ldr	r3, [r3, #0]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	f003 0307 	and.w	r3, r3, #7
 80050ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	2b06      	cmp	r3, #6
 80050f2:	d010      	beq.n	8005116 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80050f4:	687b      	ldr	r3, [r7, #4]
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	681a      	ldr	r2, [r3, #0]
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	f042 0201 	orr.w	r2, r2, #1
 8005102:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005104:	e007      	b.n	8005116 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	681a      	ldr	r2, [r3, #0]
 800510c:	687b      	ldr	r3, [r7, #4]
 800510e:	681b      	ldr	r3, [r3, #0]
 8005110:	f042 0201 	orr.w	r2, r2, #1
 8005114:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005116:	2300      	movs	r3, #0
}
 8005118:	4618      	mov	r0, r3
 800511a:	3710      	adds	r7, #16
 800511c:	46bd      	mov	sp, r7
 800511e:	bd80      	pop	{r7, pc}
 8005120:	40010000 	.word	0x40010000
 8005124:	40000400 	.word	0x40000400
 8005128:	40000800 	.word	0x40000800
 800512c:	40000c00 	.word	0x40000c00
 8005130:	40014000 	.word	0x40014000

08005134 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b082      	sub	sp, #8
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
 800513c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	2200      	movs	r2, #0
 8005144:	6839      	ldr	r1, [r7, #0]
 8005146:	4618      	mov	r0, r3
 8005148:	f001 f994 	bl	8006474 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800514c:	687b      	ldr	r3, [r7, #4]
 800514e:	681b      	ldr	r3, [r3, #0]
 8005150:	4a29      	ldr	r2, [pc, #164]	; (80051f8 <HAL_TIM_PWM_Stop+0xc4>)
 8005152:	4293      	cmp	r3, r2
 8005154:	d117      	bne.n	8005186 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	6a1a      	ldr	r2, [r3, #32]
 800515c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005160:	4013      	ands	r3, r2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d10f      	bne.n	8005186 <HAL_TIM_PWM_Stop+0x52>
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	6a1a      	ldr	r2, [r3, #32]
 800516c:	f240 4344 	movw	r3, #1092	; 0x444
 8005170:	4013      	ands	r3, r2
 8005172:	2b00      	cmp	r3, #0
 8005174:	d107      	bne.n	8005186 <HAL_TIM_PWM_Stop+0x52>
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	681b      	ldr	r3, [r3, #0]
 8005180:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005184:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005186:	687b      	ldr	r3, [r7, #4]
 8005188:	681b      	ldr	r3, [r3, #0]
 800518a:	6a1a      	ldr	r2, [r3, #32]
 800518c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005190:	4013      	ands	r3, r2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d10f      	bne.n	80051b6 <HAL_TIM_PWM_Stop+0x82>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	6a1a      	ldr	r2, [r3, #32]
 800519c:	f240 4344 	movw	r3, #1092	; 0x444
 80051a0:	4013      	ands	r3, r2
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d107      	bne.n	80051b6 <HAL_TIM_PWM_Stop+0x82>
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	681a      	ldr	r2, [r3, #0]
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	681b      	ldr	r3, [r3, #0]
 80051b0:	f022 0201 	bic.w	r2, r2, #1
 80051b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80051b6:	683b      	ldr	r3, [r7, #0]
 80051b8:	2b00      	cmp	r3, #0
 80051ba:	d104      	bne.n	80051c6 <HAL_TIM_PWM_Stop+0x92>
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	2201      	movs	r2, #1
 80051c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80051c4:	e013      	b.n	80051ee <HAL_TIM_PWM_Stop+0xba>
 80051c6:	683b      	ldr	r3, [r7, #0]
 80051c8:	2b04      	cmp	r3, #4
 80051ca:	d104      	bne.n	80051d6 <HAL_TIM_PWM_Stop+0xa2>
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	2201      	movs	r2, #1
 80051d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80051d4:	e00b      	b.n	80051ee <HAL_TIM_PWM_Stop+0xba>
 80051d6:	683b      	ldr	r3, [r7, #0]
 80051d8:	2b08      	cmp	r3, #8
 80051da:	d104      	bne.n	80051e6 <HAL_TIM_PWM_Stop+0xb2>
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	2201      	movs	r2, #1
 80051e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80051e4:	e003      	b.n	80051ee <HAL_TIM_PWM_Stop+0xba>
 80051e6:	687b      	ldr	r3, [r7, #4]
 80051e8:	2201      	movs	r2, #1
 80051ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80051ee:	2300      	movs	r3, #0
}
 80051f0:	4618      	mov	r0, r3
 80051f2:	3708      	adds	r7, #8
 80051f4:	46bd      	mov	sp, r7
 80051f6:	bd80      	pop	{r7, pc}
 80051f8:	40010000 	.word	0x40010000

080051fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80051fc:	b580      	push	{r7, lr}
 80051fe:	b082      	sub	sp, #8
 8005200:	af00      	add	r7, sp, #0
 8005202:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d101      	bne.n	800520e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
 800520c:	e041      	b.n	8005292 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005214:	b2db      	uxtb	r3, r3
 8005216:	2b00      	cmp	r3, #0
 8005218:	d106      	bne.n	8005228 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	2200      	movs	r2, #0
 800521e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 f839 	bl	800529a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2202      	movs	r2, #2
 800522c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681a      	ldr	r2, [r3, #0]
 8005234:	687b      	ldr	r3, [r7, #4]
 8005236:	3304      	adds	r3, #4
 8005238:	4619      	mov	r1, r3
 800523a:	4610      	mov	r0, r2
 800523c:	f000 fd56 	bl	8005cec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	2201      	movs	r2, #1
 8005244:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2201      	movs	r2, #1
 800524c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	2201      	movs	r2, #1
 800525c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2201      	movs	r2, #1
 800526c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005278:	687b      	ldr	r3, [r7, #4]
 800527a:	2201      	movs	r2, #1
 800527c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005280:	687b      	ldr	r3, [r7, #4]
 8005282:	2201      	movs	r2, #1
 8005284:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	2201      	movs	r2, #1
 800528c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3708      	adds	r7, #8
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}

0800529a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800529a:	b480      	push	{r7}
 800529c:	b083      	sub	sp, #12
 800529e:	af00      	add	r7, sp, #0
 80052a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80052a2:	bf00      	nop
 80052a4:	370c      	adds	r7, #12
 80052a6:	46bd      	mov	sp, r7
 80052a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ac:	4770      	bx	lr
	...

080052b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80052b0:	b580      	push	{r7, lr}
 80052b2:	b084      	sub	sp, #16
 80052b4:	af00      	add	r7, sp, #0
 80052b6:	6078      	str	r0, [r7, #4]
 80052b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80052ba:	2300      	movs	r3, #0
 80052bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d104      	bne.n	80052ce <HAL_TIM_IC_Start_IT+0x1e>
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ca:	b2db      	uxtb	r3, r3
 80052cc:	e013      	b.n	80052f6 <HAL_TIM_IC_Start_IT+0x46>
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	2b04      	cmp	r3, #4
 80052d2:	d104      	bne.n	80052de <HAL_TIM_IC_Start_IT+0x2e>
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	e00b      	b.n	80052f6 <HAL_TIM_IC_Start_IT+0x46>
 80052de:	683b      	ldr	r3, [r7, #0]
 80052e0:	2b08      	cmp	r3, #8
 80052e2:	d104      	bne.n	80052ee <HAL_TIM_IC_Start_IT+0x3e>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	e003      	b.n	80052f6 <HAL_TIM_IC_Start_IT+0x46>
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80052f8:	683b      	ldr	r3, [r7, #0]
 80052fa:	2b00      	cmp	r3, #0
 80052fc:	d104      	bne.n	8005308 <HAL_TIM_IC_Start_IT+0x58>
 80052fe:	687b      	ldr	r3, [r7, #4]
 8005300:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005304:	b2db      	uxtb	r3, r3
 8005306:	e013      	b.n	8005330 <HAL_TIM_IC_Start_IT+0x80>
 8005308:	683b      	ldr	r3, [r7, #0]
 800530a:	2b04      	cmp	r3, #4
 800530c:	d104      	bne.n	8005318 <HAL_TIM_IC_Start_IT+0x68>
 800530e:	687b      	ldr	r3, [r7, #4]
 8005310:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005314:	b2db      	uxtb	r3, r3
 8005316:	e00b      	b.n	8005330 <HAL_TIM_IC_Start_IT+0x80>
 8005318:	683b      	ldr	r3, [r7, #0]
 800531a:	2b08      	cmp	r3, #8
 800531c:	d104      	bne.n	8005328 <HAL_TIM_IC_Start_IT+0x78>
 800531e:	687b      	ldr	r3, [r7, #4]
 8005320:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005324:	b2db      	uxtb	r3, r3
 8005326:	e003      	b.n	8005330 <HAL_TIM_IC_Start_IT+0x80>
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800532e:	b2db      	uxtb	r3, r3
 8005330:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005332:	7bbb      	ldrb	r3, [r7, #14]
 8005334:	2b01      	cmp	r3, #1
 8005336:	d102      	bne.n	800533e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005338:	7b7b      	ldrb	r3, [r7, #13]
 800533a:	2b01      	cmp	r3, #1
 800533c:	d001      	beq.n	8005342 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800533e:	2301      	movs	r3, #1
 8005340:	e0c2      	b.n	80054c8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005342:	683b      	ldr	r3, [r7, #0]
 8005344:	2b00      	cmp	r3, #0
 8005346:	d104      	bne.n	8005352 <HAL_TIM_IC_Start_IT+0xa2>
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2202      	movs	r2, #2
 800534c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005350:	e013      	b.n	800537a <HAL_TIM_IC_Start_IT+0xca>
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b04      	cmp	r3, #4
 8005356:	d104      	bne.n	8005362 <HAL_TIM_IC_Start_IT+0xb2>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	2202      	movs	r2, #2
 800535c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005360:	e00b      	b.n	800537a <HAL_TIM_IC_Start_IT+0xca>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b08      	cmp	r3, #8
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start_IT+0xc2>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2202      	movs	r2, #2
 800536c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005370:	e003      	b.n	800537a <HAL_TIM_IC_Start_IT+0xca>
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	2202      	movs	r2, #2
 8005376:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	2b00      	cmp	r3, #0
 800537e:	d104      	bne.n	800538a <HAL_TIM_IC_Start_IT+0xda>
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	2202      	movs	r2, #2
 8005384:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005388:	e013      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0x102>
 800538a:	683b      	ldr	r3, [r7, #0]
 800538c:	2b04      	cmp	r3, #4
 800538e:	d104      	bne.n	800539a <HAL_TIM_IC_Start_IT+0xea>
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	2202      	movs	r2, #2
 8005394:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005398:	e00b      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0x102>
 800539a:	683b      	ldr	r3, [r7, #0]
 800539c:	2b08      	cmp	r3, #8
 800539e:	d104      	bne.n	80053aa <HAL_TIM_IC_Start_IT+0xfa>
 80053a0:	687b      	ldr	r3, [r7, #4]
 80053a2:	2202      	movs	r2, #2
 80053a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80053a8:	e003      	b.n	80053b2 <HAL_TIM_IC_Start_IT+0x102>
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	2202      	movs	r2, #2
 80053ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	2b0c      	cmp	r3, #12
 80053b6:	d841      	bhi.n	800543c <HAL_TIM_IC_Start_IT+0x18c>
 80053b8:	a201      	add	r2, pc, #4	; (adr r2, 80053c0 <HAL_TIM_IC_Start_IT+0x110>)
 80053ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80053be:	bf00      	nop
 80053c0:	080053f5 	.word	0x080053f5
 80053c4:	0800543d 	.word	0x0800543d
 80053c8:	0800543d 	.word	0x0800543d
 80053cc:	0800543d 	.word	0x0800543d
 80053d0:	08005407 	.word	0x08005407
 80053d4:	0800543d 	.word	0x0800543d
 80053d8:	0800543d 	.word	0x0800543d
 80053dc:	0800543d 	.word	0x0800543d
 80053e0:	08005419 	.word	0x08005419
 80053e4:	0800543d 	.word	0x0800543d
 80053e8:	0800543d 	.word	0x0800543d
 80053ec:	0800543d 	.word	0x0800543d
 80053f0:	0800542b 	.word	0x0800542b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	68da      	ldr	r2, [r3, #12]
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	681b      	ldr	r3, [r3, #0]
 80053fe:	f042 0202 	orr.w	r2, r2, #2
 8005402:	60da      	str	r2, [r3, #12]
      break;
 8005404:	e01d      	b.n	8005442 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	681b      	ldr	r3, [r3, #0]
 800540a:	68da      	ldr	r2, [r3, #12]
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	f042 0204 	orr.w	r2, r2, #4
 8005414:	60da      	str	r2, [r3, #12]
      break;
 8005416:	e014      	b.n	8005442 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	68da      	ldr	r2, [r3, #12]
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	681b      	ldr	r3, [r3, #0]
 8005422:	f042 0208 	orr.w	r2, r2, #8
 8005426:	60da      	str	r2, [r3, #12]
      break;
 8005428:	e00b      	b.n	8005442 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800542a:	687b      	ldr	r3, [r7, #4]
 800542c:	681b      	ldr	r3, [r3, #0]
 800542e:	68da      	ldr	r2, [r3, #12]
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	f042 0210 	orr.w	r2, r2, #16
 8005438:	60da      	str	r2, [r3, #12]
      break;
 800543a:	e002      	b.n	8005442 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800543c:	2301      	movs	r3, #1
 800543e:	73fb      	strb	r3, [r7, #15]
      break;
 8005440:	bf00      	nop
  }

  if (status == HAL_OK)
 8005442:	7bfb      	ldrb	r3, [r7, #15]
 8005444:	2b00      	cmp	r3, #0
 8005446:	d13e      	bne.n	80054c6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005448:	687b      	ldr	r3, [r7, #4]
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	2201      	movs	r2, #1
 800544e:	6839      	ldr	r1, [r7, #0]
 8005450:	4618      	mov	r0, r3
 8005452:	f001 f80f 	bl	8006474 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	4a1d      	ldr	r2, [pc, #116]	; (80054d0 <HAL_TIM_IC_Start_IT+0x220>)
 800545c:	4293      	cmp	r3, r2
 800545e:	d018      	beq.n	8005492 <HAL_TIM_IC_Start_IT+0x1e2>
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	681b      	ldr	r3, [r3, #0]
 8005464:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005468:	d013      	beq.n	8005492 <HAL_TIM_IC_Start_IT+0x1e2>
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	681b      	ldr	r3, [r3, #0]
 800546e:	4a19      	ldr	r2, [pc, #100]	; (80054d4 <HAL_TIM_IC_Start_IT+0x224>)
 8005470:	4293      	cmp	r3, r2
 8005472:	d00e      	beq.n	8005492 <HAL_TIM_IC_Start_IT+0x1e2>
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	4a17      	ldr	r2, [pc, #92]	; (80054d8 <HAL_TIM_IC_Start_IT+0x228>)
 800547a:	4293      	cmp	r3, r2
 800547c:	d009      	beq.n	8005492 <HAL_TIM_IC_Start_IT+0x1e2>
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	4a16      	ldr	r2, [pc, #88]	; (80054dc <HAL_TIM_IC_Start_IT+0x22c>)
 8005484:	4293      	cmp	r3, r2
 8005486:	d004      	beq.n	8005492 <HAL_TIM_IC_Start_IT+0x1e2>
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4a14      	ldr	r2, [pc, #80]	; (80054e0 <HAL_TIM_IC_Start_IT+0x230>)
 800548e:	4293      	cmp	r3, r2
 8005490:	d111      	bne.n	80054b6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	689b      	ldr	r3, [r3, #8]
 8005498:	f003 0307 	and.w	r3, r3, #7
 800549c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	2b06      	cmp	r3, #6
 80054a2:	d010      	beq.n	80054c6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	681b      	ldr	r3, [r3, #0]
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	681b      	ldr	r3, [r3, #0]
 80054ae:	f042 0201 	orr.w	r2, r2, #1
 80054b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80054b4:	e007      	b.n	80054c6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	681b      	ldr	r3, [r3, #0]
 80054ba:	681a      	ldr	r2, [r3, #0]
 80054bc:	687b      	ldr	r3, [r7, #4]
 80054be:	681b      	ldr	r3, [r3, #0]
 80054c0:	f042 0201 	orr.w	r2, r2, #1
 80054c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80054c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80054c8:	4618      	mov	r0, r3
 80054ca:	3710      	adds	r7, #16
 80054cc:	46bd      	mov	sp, r7
 80054ce:	bd80      	pop	{r7, pc}
 80054d0:	40010000 	.word	0x40010000
 80054d4:	40000400 	.word	0x40000400
 80054d8:	40000800 	.word	0x40000800
 80054dc:	40000c00 	.word	0x40000c00
 80054e0:	40014000 	.word	0x40014000

080054e4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80054e4:	b580      	push	{r7, lr}
 80054e6:	b084      	sub	sp, #16
 80054e8:	af00      	add	r7, sp, #0
 80054ea:	6078      	str	r0, [r7, #4]
 80054ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80054ee:	2300      	movs	r3, #0
 80054f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80054f2:	683b      	ldr	r3, [r7, #0]
 80054f4:	2b0c      	cmp	r3, #12
 80054f6:	d841      	bhi.n	800557c <HAL_TIM_IC_Stop_IT+0x98>
 80054f8:	a201      	add	r2, pc, #4	; (adr r2, 8005500 <HAL_TIM_IC_Stop_IT+0x1c>)
 80054fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80054fe:	bf00      	nop
 8005500:	08005535 	.word	0x08005535
 8005504:	0800557d 	.word	0x0800557d
 8005508:	0800557d 	.word	0x0800557d
 800550c:	0800557d 	.word	0x0800557d
 8005510:	08005547 	.word	0x08005547
 8005514:	0800557d 	.word	0x0800557d
 8005518:	0800557d 	.word	0x0800557d
 800551c:	0800557d 	.word	0x0800557d
 8005520:	08005559 	.word	0x08005559
 8005524:	0800557d 	.word	0x0800557d
 8005528:	0800557d 	.word	0x0800557d
 800552c:	0800557d 	.word	0x0800557d
 8005530:	0800556b 	.word	0x0800556b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	681b      	ldr	r3, [r3, #0]
 8005538:	68da      	ldr	r2, [r3, #12]
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	f022 0202 	bic.w	r2, r2, #2
 8005542:	60da      	str	r2, [r3, #12]
      break;
 8005544:	e01d      	b.n	8005582 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	68da      	ldr	r2, [r3, #12]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f022 0204 	bic.w	r2, r2, #4
 8005554:	60da      	str	r2, [r3, #12]
      break;
 8005556:	e014      	b.n	8005582 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	68da      	ldr	r2, [r3, #12]
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f022 0208 	bic.w	r2, r2, #8
 8005566:	60da      	str	r2, [r3, #12]
      break;
 8005568:	e00b      	b.n	8005582 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	68da      	ldr	r2, [r3, #12]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f022 0210 	bic.w	r2, r2, #16
 8005578:	60da      	str	r2, [r3, #12]
      break;
 800557a:	e002      	b.n	8005582 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800557c:	2301      	movs	r3, #1
 800557e:	73fb      	strb	r3, [r7, #15]
      break;
 8005580:	bf00      	nop
  }

  if (status == HAL_OK)
 8005582:	7bfb      	ldrb	r3, [r7, #15]
 8005584:	2b00      	cmp	r3, #0
 8005586:	d156      	bne.n	8005636 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	2200      	movs	r2, #0
 800558e:	6839      	ldr	r1, [r7, #0]
 8005590:	4618      	mov	r0, r3
 8005592:	f000 ff6f 	bl	8006474 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005596:	687b      	ldr	r3, [r7, #4]
 8005598:	681b      	ldr	r3, [r3, #0]
 800559a:	6a1a      	ldr	r2, [r3, #32]
 800559c:	f241 1311 	movw	r3, #4369	; 0x1111
 80055a0:	4013      	ands	r3, r2
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d10f      	bne.n	80055c6 <HAL_TIM_IC_Stop_IT+0xe2>
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	6a1a      	ldr	r2, [r3, #32]
 80055ac:	f240 4344 	movw	r3, #1092	; 0x444
 80055b0:	4013      	ands	r3, r2
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d107      	bne.n	80055c6 <HAL_TIM_IC_Stop_IT+0xe2>
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	681b      	ldr	r3, [r3, #0]
 80055ba:	681a      	ldr	r2, [r3, #0]
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	f022 0201 	bic.w	r2, r2, #1
 80055c4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055c6:	683b      	ldr	r3, [r7, #0]
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	d104      	bne.n	80055d6 <HAL_TIM_IC_Stop_IT+0xf2>
 80055cc:	687b      	ldr	r3, [r7, #4]
 80055ce:	2201      	movs	r2, #1
 80055d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80055d4:	e013      	b.n	80055fe <HAL_TIM_IC_Stop_IT+0x11a>
 80055d6:	683b      	ldr	r3, [r7, #0]
 80055d8:	2b04      	cmp	r3, #4
 80055da:	d104      	bne.n	80055e6 <HAL_TIM_IC_Stop_IT+0x102>
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	2201      	movs	r2, #1
 80055e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80055e4:	e00b      	b.n	80055fe <HAL_TIM_IC_Stop_IT+0x11a>
 80055e6:	683b      	ldr	r3, [r7, #0]
 80055e8:	2b08      	cmp	r3, #8
 80055ea:	d104      	bne.n	80055f6 <HAL_TIM_IC_Stop_IT+0x112>
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	2201      	movs	r2, #1
 80055f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80055f4:	e003      	b.n	80055fe <HAL_TIM_IC_Stop_IT+0x11a>
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	2201      	movs	r2, #1
 80055fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80055fe:	683b      	ldr	r3, [r7, #0]
 8005600:	2b00      	cmp	r3, #0
 8005602:	d104      	bne.n	800560e <HAL_TIM_IC_Stop_IT+0x12a>
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	2201      	movs	r2, #1
 8005608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800560c:	e013      	b.n	8005636 <HAL_TIM_IC_Stop_IT+0x152>
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	2b04      	cmp	r3, #4
 8005612:	d104      	bne.n	800561e <HAL_TIM_IC_Stop_IT+0x13a>
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	2201      	movs	r2, #1
 8005618:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800561c:	e00b      	b.n	8005636 <HAL_TIM_IC_Stop_IT+0x152>
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	2b08      	cmp	r3, #8
 8005622:	d104      	bne.n	800562e <HAL_TIM_IC_Stop_IT+0x14a>
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	2201      	movs	r2, #1
 8005628:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800562c:	e003      	b.n	8005636 <HAL_TIM_IC_Stop_IT+0x152>
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	2201      	movs	r2, #1
 8005632:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8005636:	7bfb      	ldrb	r3, [r7, #15]
}
 8005638:	4618      	mov	r0, r3
 800563a:	3710      	adds	r7, #16
 800563c:	46bd      	mov	sp, r7
 800563e:	bd80      	pop	{r7, pc}

08005640 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005640:	b580      	push	{r7, lr}
 8005642:	b082      	sub	sp, #8
 8005644:	af00      	add	r7, sp, #0
 8005646:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	691b      	ldr	r3, [r3, #16]
 800564e:	f003 0302 	and.w	r3, r3, #2
 8005652:	2b02      	cmp	r3, #2
 8005654:	d122      	bne.n	800569c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	68db      	ldr	r3, [r3, #12]
 800565c:	f003 0302 	and.w	r3, r3, #2
 8005660:	2b02      	cmp	r3, #2
 8005662:	d11b      	bne.n	800569c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f06f 0202 	mvn.w	r2, #2
 800566c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2201      	movs	r2, #1
 8005672:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	699b      	ldr	r3, [r3, #24]
 800567a:	f003 0303 	and.w	r3, r3, #3
 800567e:	2b00      	cmp	r3, #0
 8005680:	d003      	beq.n	800568a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005682:	6878      	ldr	r0, [r7, #4]
 8005684:	f000 fb13 	bl	8005cae <HAL_TIM_IC_CaptureCallback>
 8005688:	e005      	b.n	8005696 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800568a:	6878      	ldr	r0, [r7, #4]
 800568c:	f000 fb05 	bl	8005c9a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005690:	6878      	ldr	r0, [r7, #4]
 8005692:	f000 fb16 	bl	8005cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	2200      	movs	r2, #0
 800569a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	681b      	ldr	r3, [r3, #0]
 80056a0:	691b      	ldr	r3, [r3, #16]
 80056a2:	f003 0304 	and.w	r3, r3, #4
 80056a6:	2b04      	cmp	r3, #4
 80056a8:	d122      	bne.n	80056f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80056aa:	687b      	ldr	r3, [r7, #4]
 80056ac:	681b      	ldr	r3, [r3, #0]
 80056ae:	68db      	ldr	r3, [r3, #12]
 80056b0:	f003 0304 	and.w	r3, r3, #4
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d11b      	bne.n	80056f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	f06f 0204 	mvn.w	r2, #4
 80056c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2202      	movs	r2, #2
 80056c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	681b      	ldr	r3, [r3, #0]
 80056cc:	699b      	ldr	r3, [r3, #24]
 80056ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d003      	beq.n	80056de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80056d6:	6878      	ldr	r0, [r7, #4]
 80056d8:	f000 fae9 	bl	8005cae <HAL_TIM_IC_CaptureCallback>
 80056dc:	e005      	b.n	80056ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80056de:	6878      	ldr	r0, [r7, #4]
 80056e0:	f000 fadb 	bl	8005c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80056e4:	6878      	ldr	r0, [r7, #4]
 80056e6:	f000 faec 	bl	8005cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	2200      	movs	r2, #0
 80056ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	691b      	ldr	r3, [r3, #16]
 80056f6:	f003 0308 	and.w	r3, r3, #8
 80056fa:	2b08      	cmp	r3, #8
 80056fc:	d122      	bne.n	8005744 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	68db      	ldr	r3, [r3, #12]
 8005704:	f003 0308 	and.w	r3, r3, #8
 8005708:	2b08      	cmp	r3, #8
 800570a:	d11b      	bne.n	8005744 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	681b      	ldr	r3, [r3, #0]
 8005710:	f06f 0208 	mvn.w	r2, #8
 8005714:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	2204      	movs	r2, #4
 800571a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	681b      	ldr	r3, [r3, #0]
 8005720:	69db      	ldr	r3, [r3, #28]
 8005722:	f003 0303 	and.w	r3, r3, #3
 8005726:	2b00      	cmp	r3, #0
 8005728:	d003      	beq.n	8005732 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800572a:	6878      	ldr	r0, [r7, #4]
 800572c:	f000 fabf 	bl	8005cae <HAL_TIM_IC_CaptureCallback>
 8005730:	e005      	b.n	800573e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005732:	6878      	ldr	r0, [r7, #4]
 8005734:	f000 fab1 	bl	8005c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005738:	6878      	ldr	r0, [r7, #4]
 800573a:	f000 fac2 	bl	8005cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2200      	movs	r2, #0
 8005742:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	691b      	ldr	r3, [r3, #16]
 800574a:	f003 0310 	and.w	r3, r3, #16
 800574e:	2b10      	cmp	r3, #16
 8005750:	d122      	bne.n	8005798 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	68db      	ldr	r3, [r3, #12]
 8005758:	f003 0310 	and.w	r3, r3, #16
 800575c:	2b10      	cmp	r3, #16
 800575e:	d11b      	bne.n	8005798 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	f06f 0210 	mvn.w	r2, #16
 8005768:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	2208      	movs	r2, #8
 800576e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	681b      	ldr	r3, [r3, #0]
 8005774:	69db      	ldr	r3, [r3, #28]
 8005776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800577a:	2b00      	cmp	r3, #0
 800577c:	d003      	beq.n	8005786 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f000 fa95 	bl	8005cae <HAL_TIM_IC_CaptureCallback>
 8005784:	e005      	b.n	8005792 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005786:	6878      	ldr	r0, [r7, #4]
 8005788:	f000 fa87 	bl	8005c9a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800578c:	6878      	ldr	r0, [r7, #4]
 800578e:	f000 fa98 	bl	8005cc2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	2200      	movs	r2, #0
 8005796:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	691b      	ldr	r3, [r3, #16]
 800579e:	f003 0301 	and.w	r3, r3, #1
 80057a2:	2b01      	cmp	r3, #1
 80057a4:	d10e      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	68db      	ldr	r3, [r3, #12]
 80057ac:	f003 0301 	and.w	r3, r3, #1
 80057b0:	2b01      	cmp	r3, #1
 80057b2:	d107      	bne.n	80057c4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f06f 0201 	mvn.w	r2, #1
 80057bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f7fb fe98 	bl	80014f4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	691b      	ldr	r3, [r3, #16]
 80057ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057ce:	2b80      	cmp	r3, #128	; 0x80
 80057d0:	d10e      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	68db      	ldr	r3, [r3, #12]
 80057d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80057dc:	2b80      	cmp	r3, #128	; 0x80
 80057de:	d107      	bne.n	80057f0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80057e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80057ea:	6878      	ldr	r0, [r7, #4]
 80057ec:	f000 fee0 	bl	80065b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	681b      	ldr	r3, [r3, #0]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80057fa:	2b40      	cmp	r3, #64	; 0x40
 80057fc:	d10e      	bne.n	800581c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	68db      	ldr	r3, [r3, #12]
 8005804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005808:	2b40      	cmp	r3, #64	; 0x40
 800580a:	d107      	bne.n	800581c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800580c:	687b      	ldr	r3, [r7, #4]
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005814:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005816:	6878      	ldr	r0, [r7, #4]
 8005818:	f000 fa5d 	bl	8005cd6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	691b      	ldr	r3, [r3, #16]
 8005822:	f003 0320 	and.w	r3, r3, #32
 8005826:	2b20      	cmp	r3, #32
 8005828:	d10e      	bne.n	8005848 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	681b      	ldr	r3, [r3, #0]
 800582e:	68db      	ldr	r3, [r3, #12]
 8005830:	f003 0320 	and.w	r3, r3, #32
 8005834:	2b20      	cmp	r3, #32
 8005836:	d107      	bne.n	8005848 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f06f 0220 	mvn.w	r2, #32
 8005840:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f000 feaa 	bl	800659c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005848:	bf00      	nop
 800584a:	3708      	adds	r7, #8
 800584c:	46bd      	mov	sp, r7
 800584e:	bd80      	pop	{r7, pc}

08005850 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005850:	b580      	push	{r7, lr}
 8005852:	b086      	sub	sp, #24
 8005854:	af00      	add	r7, sp, #0
 8005856:	60f8      	str	r0, [r7, #12]
 8005858:	60b9      	str	r1, [r7, #8]
 800585a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800585c:	2300      	movs	r3, #0
 800585e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005860:	68fb      	ldr	r3, [r7, #12]
 8005862:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005866:	2b01      	cmp	r3, #1
 8005868:	d101      	bne.n	800586e <HAL_TIM_IC_ConfigChannel+0x1e>
 800586a:	2302      	movs	r3, #2
 800586c:	e088      	b.n	8005980 <HAL_TIM_IC_ConfigChannel+0x130>
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	2201      	movs	r2, #1
 8005872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2b00      	cmp	r3, #0
 800587a:	d11b      	bne.n	80058b4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	6818      	ldr	r0, [r3, #0]
 8005880:	68bb      	ldr	r3, [r7, #8]
 8005882:	6819      	ldr	r1, [r3, #0]
 8005884:	68bb      	ldr	r3, [r7, #8]
 8005886:	685a      	ldr	r2, [r3, #4]
 8005888:	68bb      	ldr	r3, [r7, #8]
 800588a:	68db      	ldr	r3, [r3, #12]
 800588c:	f000 fc3a 	bl	8006104 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	699a      	ldr	r2, [r3, #24]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 020c 	bic.w	r2, r2, #12
 800589e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	6999      	ldr	r1, [r3, #24]
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	689a      	ldr	r2, [r3, #8]
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	430a      	orrs	r2, r1
 80058b0:	619a      	str	r2, [r3, #24]
 80058b2:	e060      	b.n	8005976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	2b04      	cmp	r3, #4
 80058b8:	d11c      	bne.n	80058f4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	6818      	ldr	r0, [r3, #0]
 80058be:	68bb      	ldr	r3, [r7, #8]
 80058c0:	6819      	ldr	r1, [r3, #0]
 80058c2:	68bb      	ldr	r3, [r7, #8]
 80058c4:	685a      	ldr	r2, [r3, #4]
 80058c6:	68bb      	ldr	r3, [r7, #8]
 80058c8:	68db      	ldr	r3, [r3, #12]
 80058ca:	f000 fcb2 	bl	8006232 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80058ce:	68fb      	ldr	r3, [r7, #12]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	699a      	ldr	r2, [r3, #24]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	681b      	ldr	r3, [r3, #0]
 80058d8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80058dc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80058de:	68fb      	ldr	r3, [r7, #12]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	6999      	ldr	r1, [r3, #24]
 80058e4:	68bb      	ldr	r3, [r7, #8]
 80058e6:	689b      	ldr	r3, [r3, #8]
 80058e8:	021a      	lsls	r2, r3, #8
 80058ea:	68fb      	ldr	r3, [r7, #12]
 80058ec:	681b      	ldr	r3, [r3, #0]
 80058ee:	430a      	orrs	r2, r1
 80058f0:	619a      	str	r2, [r3, #24]
 80058f2:	e040      	b.n	8005976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80058f4:	687b      	ldr	r3, [r7, #4]
 80058f6:	2b08      	cmp	r3, #8
 80058f8:	d11b      	bne.n	8005932 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	6818      	ldr	r0, [r3, #0]
 80058fe:	68bb      	ldr	r3, [r7, #8]
 8005900:	6819      	ldr	r1, [r3, #0]
 8005902:	68bb      	ldr	r3, [r7, #8]
 8005904:	685a      	ldr	r2, [r3, #4]
 8005906:	68bb      	ldr	r3, [r7, #8]
 8005908:	68db      	ldr	r3, [r3, #12]
 800590a:	f000 fcff 	bl	800630c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	69da      	ldr	r2, [r3, #28]
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	681b      	ldr	r3, [r3, #0]
 8005918:	f022 020c 	bic.w	r2, r2, #12
 800591c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800591e:	68fb      	ldr	r3, [r7, #12]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	69d9      	ldr	r1, [r3, #28]
 8005924:	68bb      	ldr	r3, [r7, #8]
 8005926:	689a      	ldr	r2, [r3, #8]
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	430a      	orrs	r2, r1
 800592e:	61da      	str	r2, [r3, #28]
 8005930:	e021      	b.n	8005976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005932:	687b      	ldr	r3, [r7, #4]
 8005934:	2b0c      	cmp	r3, #12
 8005936:	d11c      	bne.n	8005972 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005938:	68fb      	ldr	r3, [r7, #12]
 800593a:	6818      	ldr	r0, [r3, #0]
 800593c:	68bb      	ldr	r3, [r7, #8]
 800593e:	6819      	ldr	r1, [r3, #0]
 8005940:	68bb      	ldr	r3, [r7, #8]
 8005942:	685a      	ldr	r2, [r3, #4]
 8005944:	68bb      	ldr	r3, [r7, #8]
 8005946:	68db      	ldr	r3, [r3, #12]
 8005948:	f000 fd1c 	bl	8006384 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	681b      	ldr	r3, [r3, #0]
 8005950:	69da      	ldr	r2, [r3, #28]
 8005952:	68fb      	ldr	r3, [r7, #12]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800595a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800595c:	68fb      	ldr	r3, [r7, #12]
 800595e:	681b      	ldr	r3, [r3, #0]
 8005960:	69d9      	ldr	r1, [r3, #28]
 8005962:	68bb      	ldr	r3, [r7, #8]
 8005964:	689b      	ldr	r3, [r3, #8]
 8005966:	021a      	lsls	r2, r3, #8
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	430a      	orrs	r2, r1
 800596e:	61da      	str	r2, [r3, #28]
 8005970:	e001      	b.n	8005976 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005972:	2301      	movs	r3, #1
 8005974:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800597e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005980:	4618      	mov	r0, r3
 8005982:	3718      	adds	r7, #24
 8005984:	46bd      	mov	sp, r7
 8005986:	bd80      	pop	{r7, pc}

08005988 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b086      	sub	sp, #24
 800598c:	af00      	add	r7, sp, #0
 800598e:	60f8      	str	r0, [r7, #12]
 8005990:	60b9      	str	r1, [r7, #8]
 8005992:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005994:	2300      	movs	r3, #0
 8005996:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005998:	68fb      	ldr	r3, [r7, #12]
 800599a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800599e:	2b01      	cmp	r3, #1
 80059a0:	d101      	bne.n	80059a6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80059a2:	2302      	movs	r3, #2
 80059a4:	e0ae      	b.n	8005b04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80059a6:	68fb      	ldr	r3, [r7, #12]
 80059a8:	2201      	movs	r2, #1
 80059aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	2b0c      	cmp	r3, #12
 80059b2:	f200 809f 	bhi.w	8005af4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80059b6:	a201      	add	r2, pc, #4	; (adr r2, 80059bc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80059b8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059bc:	080059f1 	.word	0x080059f1
 80059c0:	08005af5 	.word	0x08005af5
 80059c4:	08005af5 	.word	0x08005af5
 80059c8:	08005af5 	.word	0x08005af5
 80059cc:	08005a31 	.word	0x08005a31
 80059d0:	08005af5 	.word	0x08005af5
 80059d4:	08005af5 	.word	0x08005af5
 80059d8:	08005af5 	.word	0x08005af5
 80059dc:	08005a73 	.word	0x08005a73
 80059e0:	08005af5 	.word	0x08005af5
 80059e4:	08005af5 	.word	0x08005af5
 80059e8:	08005af5 	.word	0x08005af5
 80059ec:	08005ab3 	.word	0x08005ab3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	68b9      	ldr	r1, [r7, #8]
 80059f6:	4618      	mov	r0, r3
 80059f8:	f000 f9f8 	bl	8005dec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	699a      	ldr	r2, [r3, #24]
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f042 0208 	orr.w	r2, r2, #8
 8005a0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005a0c:	68fb      	ldr	r3, [r7, #12]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	699a      	ldr	r2, [r3, #24]
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	f022 0204 	bic.w	r2, r2, #4
 8005a1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005a1c:	68fb      	ldr	r3, [r7, #12]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	6999      	ldr	r1, [r3, #24]
 8005a22:	68bb      	ldr	r3, [r7, #8]
 8005a24:	691a      	ldr	r2, [r3, #16]
 8005a26:	68fb      	ldr	r3, [r7, #12]
 8005a28:	681b      	ldr	r3, [r3, #0]
 8005a2a:	430a      	orrs	r2, r1
 8005a2c:	619a      	str	r2, [r3, #24]
      break;
 8005a2e:	e064      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	68b9      	ldr	r1, [r7, #8]
 8005a36:	4618      	mov	r0, r3
 8005a38:	f000 fa3e 	bl	8005eb8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	681b      	ldr	r3, [r3, #0]
 8005a40:	699a      	ldr	r2, [r3, #24]
 8005a42:	68fb      	ldr	r3, [r7, #12]
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699a      	ldr	r2, [r3, #24]
 8005a52:	68fb      	ldr	r3, [r7, #12]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005a5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005a5c:	68fb      	ldr	r3, [r7, #12]
 8005a5e:	681b      	ldr	r3, [r3, #0]
 8005a60:	6999      	ldr	r1, [r3, #24]
 8005a62:	68bb      	ldr	r3, [r7, #8]
 8005a64:	691b      	ldr	r3, [r3, #16]
 8005a66:	021a      	lsls	r2, r3, #8
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	430a      	orrs	r2, r1
 8005a6e:	619a      	str	r2, [r3, #24]
      break;
 8005a70:	e043      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005a72:	68fb      	ldr	r3, [r7, #12]
 8005a74:	681b      	ldr	r3, [r3, #0]
 8005a76:	68b9      	ldr	r1, [r7, #8]
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fa89 	bl	8005f90 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005a7e:	68fb      	ldr	r3, [r7, #12]
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	69da      	ldr	r2, [r3, #28]
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	f042 0208 	orr.w	r2, r2, #8
 8005a8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	69da      	ldr	r2, [r3, #28]
 8005a94:	68fb      	ldr	r3, [r7, #12]
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	f022 0204 	bic.w	r2, r2, #4
 8005a9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005a9e:	68fb      	ldr	r3, [r7, #12]
 8005aa0:	681b      	ldr	r3, [r3, #0]
 8005aa2:	69d9      	ldr	r1, [r3, #28]
 8005aa4:	68bb      	ldr	r3, [r7, #8]
 8005aa6:	691a      	ldr	r2, [r3, #16]
 8005aa8:	68fb      	ldr	r3, [r7, #12]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	430a      	orrs	r2, r1
 8005aae:	61da      	str	r2, [r3, #28]
      break;
 8005ab0:	e023      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005ab2:	68fb      	ldr	r3, [r7, #12]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	68b9      	ldr	r1, [r7, #8]
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f000 fad3 	bl	8006064 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005abe:	68fb      	ldr	r3, [r7, #12]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	69da      	ldr	r2, [r3, #28]
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005acc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005ace:	68fb      	ldr	r3, [r7, #12]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	69da      	ldr	r2, [r3, #28]
 8005ad4:	68fb      	ldr	r3, [r7, #12]
 8005ad6:	681b      	ldr	r3, [r3, #0]
 8005ad8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005adc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005ade:	68fb      	ldr	r3, [r7, #12]
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	69d9      	ldr	r1, [r3, #28]
 8005ae4:	68bb      	ldr	r3, [r7, #8]
 8005ae6:	691b      	ldr	r3, [r3, #16]
 8005ae8:	021a      	lsls	r2, r3, #8
 8005aea:	68fb      	ldr	r3, [r7, #12]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	430a      	orrs	r2, r1
 8005af0:	61da      	str	r2, [r3, #28]
      break;
 8005af2:	e002      	b.n	8005afa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005af4:	2301      	movs	r3, #1
 8005af6:	75fb      	strb	r3, [r7, #23]
      break;
 8005af8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005afa:	68fb      	ldr	r3, [r7, #12]
 8005afc:	2200      	movs	r2, #0
 8005afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b02:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b04:	4618      	mov	r0, r3
 8005b06:	3718      	adds	r7, #24
 8005b08:	46bd      	mov	sp, r7
 8005b0a:	bd80      	pop	{r7, pc}

08005b0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005b0c:	b580      	push	{r7, lr}
 8005b0e:	b084      	sub	sp, #16
 8005b10:	af00      	add	r7, sp, #0
 8005b12:	6078      	str	r0, [r7, #4]
 8005b14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005b16:	2300      	movs	r3, #0
 8005b18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005b20:	2b01      	cmp	r3, #1
 8005b22:	d101      	bne.n	8005b28 <HAL_TIM_ConfigClockSource+0x1c>
 8005b24:	2302      	movs	r3, #2
 8005b26:	e0b4      	b.n	8005c92 <HAL_TIM_ConfigClockSource+0x186>
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	2201      	movs	r2, #1
 8005b2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681b      	ldr	r3, [r3, #0]
 8005b3c:	689b      	ldr	r3, [r3, #8]
 8005b3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005b40:	68bb      	ldr	r3, [r7, #8]
 8005b42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005b46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005b48:	68bb      	ldr	r3, [r7, #8]
 8005b4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005b4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68ba      	ldr	r2, [r7, #8]
 8005b56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005b58:	683b      	ldr	r3, [r7, #0]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b60:	d03e      	beq.n	8005be0 <HAL_TIM_ConfigClockSource+0xd4>
 8005b62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b66:	f200 8087 	bhi.w	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b6e:	f000 8086 	beq.w	8005c7e <HAL_TIM_ConfigClockSource+0x172>
 8005b72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b76:	d87f      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b78:	2b70      	cmp	r3, #112	; 0x70
 8005b7a:	d01a      	beq.n	8005bb2 <HAL_TIM_ConfigClockSource+0xa6>
 8005b7c:	2b70      	cmp	r3, #112	; 0x70
 8005b7e:	d87b      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b80:	2b60      	cmp	r3, #96	; 0x60
 8005b82:	d050      	beq.n	8005c26 <HAL_TIM_ConfigClockSource+0x11a>
 8005b84:	2b60      	cmp	r3, #96	; 0x60
 8005b86:	d877      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b88:	2b50      	cmp	r3, #80	; 0x50
 8005b8a:	d03c      	beq.n	8005c06 <HAL_TIM_ConfigClockSource+0xfa>
 8005b8c:	2b50      	cmp	r3, #80	; 0x50
 8005b8e:	d873      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b90:	2b40      	cmp	r3, #64	; 0x40
 8005b92:	d058      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0x13a>
 8005b94:	2b40      	cmp	r3, #64	; 0x40
 8005b96:	d86f      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005b98:	2b30      	cmp	r3, #48	; 0x30
 8005b9a:	d064      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x15a>
 8005b9c:	2b30      	cmp	r3, #48	; 0x30
 8005b9e:	d86b      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba0:	2b20      	cmp	r3, #32
 8005ba2:	d060      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x15a>
 8005ba4:	2b20      	cmp	r3, #32
 8005ba6:	d867      	bhi.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d05c      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x15a>
 8005bac:	2b10      	cmp	r3, #16
 8005bae:	d05a      	beq.n	8005c66 <HAL_TIM_ConfigClockSource+0x15a>
 8005bb0:	e062      	b.n	8005c78 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	6818      	ldr	r0, [r3, #0]
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	6899      	ldr	r1, [r3, #8]
 8005bba:	683b      	ldr	r3, [r7, #0]
 8005bbc:	685a      	ldr	r2, [r3, #4]
 8005bbe:	683b      	ldr	r3, [r7, #0]
 8005bc0:	68db      	ldr	r3, [r3, #12]
 8005bc2:	f000 fc37 	bl	8006434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	689b      	ldr	r3, [r3, #8]
 8005bcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005bce:	68bb      	ldr	r3, [r7, #8]
 8005bd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005bd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68ba      	ldr	r2, [r7, #8]
 8005bdc:	609a      	str	r2, [r3, #8]
      break;
 8005bde:	e04f      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	6818      	ldr	r0, [r3, #0]
 8005be4:	683b      	ldr	r3, [r7, #0]
 8005be6:	6899      	ldr	r1, [r3, #8]
 8005be8:	683b      	ldr	r3, [r7, #0]
 8005bea:	685a      	ldr	r2, [r3, #4]
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	68db      	ldr	r3, [r3, #12]
 8005bf0:	f000 fc20 	bl	8006434 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	689a      	ldr	r2, [r3, #8]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c02:	609a      	str	r2, [r3, #8]
      break;
 8005c04:	e03c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	6818      	ldr	r0, [r3, #0]
 8005c0a:	683b      	ldr	r3, [r7, #0]
 8005c0c:	6859      	ldr	r1, [r3, #4]
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	68db      	ldr	r3, [r3, #12]
 8005c12:	461a      	mov	r2, r3
 8005c14:	f000 fade 	bl	80061d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005c18:	687b      	ldr	r3, [r7, #4]
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2150      	movs	r1, #80	; 0x50
 8005c1e:	4618      	mov	r0, r3
 8005c20:	f000 fbed 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 8005c24:	e02c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6818      	ldr	r0, [r3, #0]
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	6859      	ldr	r1, [r3, #4]
 8005c2e:	683b      	ldr	r3, [r7, #0]
 8005c30:	68db      	ldr	r3, [r3, #12]
 8005c32:	461a      	mov	r2, r3
 8005c34:	f000 fb3a 	bl	80062ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	2160      	movs	r1, #96	; 0x60
 8005c3e:	4618      	mov	r0, r3
 8005c40:	f000 fbdd 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 8005c44:	e01c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6859      	ldr	r1, [r3, #4]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	68db      	ldr	r3, [r3, #12]
 8005c52:	461a      	mov	r2, r3
 8005c54:	f000 fabe 	bl	80061d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	2140      	movs	r1, #64	; 0x40
 8005c5e:	4618      	mov	r0, r3
 8005c60:	f000 fbcd 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 8005c64:	e00c      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681a      	ldr	r2, [r3, #0]
 8005c6a:	683b      	ldr	r3, [r7, #0]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	4619      	mov	r1, r3
 8005c70:	4610      	mov	r0, r2
 8005c72:	f000 fbc4 	bl	80063fe <TIM_ITRx_SetConfig>
      break;
 8005c76:	e003      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005c78:	2301      	movs	r3, #1
 8005c7a:	73fb      	strb	r3, [r7, #15]
      break;
 8005c7c:	e000      	b.n	8005c80 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005c7e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	2201      	movs	r2, #1
 8005c84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	2200      	movs	r2, #0
 8005c8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005c90:	7bfb      	ldrb	r3, [r7, #15]
}
 8005c92:	4618      	mov	r0, r3
 8005c94:	3710      	adds	r7, #16
 8005c96:	46bd      	mov	sp, r7
 8005c98:	bd80      	pop	{r7, pc}

08005c9a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005c9a:	b480      	push	{r7}
 8005c9c:	b083      	sub	sp, #12
 8005c9e:	af00      	add	r7, sp, #0
 8005ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr

08005cae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005cae:	b480      	push	{r7}
 8005cb0:	b083      	sub	sp, #12
 8005cb2:	af00      	add	r7, sp, #0
 8005cb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005cb6:	bf00      	nop
 8005cb8:	370c      	adds	r7, #12
 8005cba:	46bd      	mov	sp, r7
 8005cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cc0:	4770      	bx	lr

08005cc2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005cc2:	b480      	push	{r7}
 8005cc4:	b083      	sub	sp, #12
 8005cc6:	af00      	add	r7, sp, #0
 8005cc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005cca:	bf00      	nop
 8005ccc:	370c      	adds	r7, #12
 8005cce:	46bd      	mov	sp, r7
 8005cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cd4:	4770      	bx	lr

08005cd6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005cd6:	b480      	push	{r7}
 8005cd8:	b083      	sub	sp, #12
 8005cda:	af00      	add	r7, sp, #0
 8005cdc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005cde:	bf00      	nop
 8005ce0:	370c      	adds	r7, #12
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ce8:	4770      	bx	lr
	...

08005cec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005cec:	b480      	push	{r7}
 8005cee:	b085      	sub	sp, #20
 8005cf0:	af00      	add	r7, sp, #0
 8005cf2:	6078      	str	r0, [r7, #4]
 8005cf4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	4a34      	ldr	r2, [pc, #208]	; (8005dd0 <TIM_Base_SetConfig+0xe4>)
 8005d00:	4293      	cmp	r3, r2
 8005d02:	d00f      	beq.n	8005d24 <TIM_Base_SetConfig+0x38>
 8005d04:	687b      	ldr	r3, [r7, #4]
 8005d06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d0a:	d00b      	beq.n	8005d24 <TIM_Base_SetConfig+0x38>
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	4a31      	ldr	r2, [pc, #196]	; (8005dd4 <TIM_Base_SetConfig+0xe8>)
 8005d10:	4293      	cmp	r3, r2
 8005d12:	d007      	beq.n	8005d24 <TIM_Base_SetConfig+0x38>
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	4a30      	ldr	r2, [pc, #192]	; (8005dd8 <TIM_Base_SetConfig+0xec>)
 8005d18:	4293      	cmp	r3, r2
 8005d1a:	d003      	beq.n	8005d24 <TIM_Base_SetConfig+0x38>
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	4a2f      	ldr	r2, [pc, #188]	; (8005ddc <TIM_Base_SetConfig+0xf0>)
 8005d20:	4293      	cmp	r3, r2
 8005d22:	d108      	bne.n	8005d36 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005d24:	68fb      	ldr	r3, [r7, #12]
 8005d26:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005d2a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005d2c:	683b      	ldr	r3, [r7, #0]
 8005d2e:	685b      	ldr	r3, [r3, #4]
 8005d30:	68fa      	ldr	r2, [r7, #12]
 8005d32:	4313      	orrs	r3, r2
 8005d34:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	4a25      	ldr	r2, [pc, #148]	; (8005dd0 <TIM_Base_SetConfig+0xe4>)
 8005d3a:	4293      	cmp	r3, r2
 8005d3c:	d01b      	beq.n	8005d76 <TIM_Base_SetConfig+0x8a>
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d44:	d017      	beq.n	8005d76 <TIM_Base_SetConfig+0x8a>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	4a22      	ldr	r2, [pc, #136]	; (8005dd4 <TIM_Base_SetConfig+0xe8>)
 8005d4a:	4293      	cmp	r3, r2
 8005d4c:	d013      	beq.n	8005d76 <TIM_Base_SetConfig+0x8a>
 8005d4e:	687b      	ldr	r3, [r7, #4]
 8005d50:	4a21      	ldr	r2, [pc, #132]	; (8005dd8 <TIM_Base_SetConfig+0xec>)
 8005d52:	4293      	cmp	r3, r2
 8005d54:	d00f      	beq.n	8005d76 <TIM_Base_SetConfig+0x8a>
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	4a20      	ldr	r2, [pc, #128]	; (8005ddc <TIM_Base_SetConfig+0xf0>)
 8005d5a:	4293      	cmp	r3, r2
 8005d5c:	d00b      	beq.n	8005d76 <TIM_Base_SetConfig+0x8a>
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	4a1f      	ldr	r2, [pc, #124]	; (8005de0 <TIM_Base_SetConfig+0xf4>)
 8005d62:	4293      	cmp	r3, r2
 8005d64:	d007      	beq.n	8005d76 <TIM_Base_SetConfig+0x8a>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	4a1e      	ldr	r2, [pc, #120]	; (8005de4 <TIM_Base_SetConfig+0xf8>)
 8005d6a:	4293      	cmp	r3, r2
 8005d6c:	d003      	beq.n	8005d76 <TIM_Base_SetConfig+0x8a>
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	4a1d      	ldr	r2, [pc, #116]	; (8005de8 <TIM_Base_SetConfig+0xfc>)
 8005d72:	4293      	cmp	r3, r2
 8005d74:	d108      	bne.n	8005d88 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005d76:	68fb      	ldr	r3, [r7, #12]
 8005d78:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d7c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005d7e:	683b      	ldr	r3, [r7, #0]
 8005d80:	68db      	ldr	r3, [r3, #12]
 8005d82:	68fa      	ldr	r2, [r7, #12]
 8005d84:	4313      	orrs	r3, r2
 8005d86:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005d88:	68fb      	ldr	r3, [r7, #12]
 8005d8a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005d8e:	683b      	ldr	r3, [r7, #0]
 8005d90:	695b      	ldr	r3, [r3, #20]
 8005d92:	4313      	orrs	r3, r2
 8005d94:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	68fa      	ldr	r2, [r7, #12]
 8005d9a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005d9c:	683b      	ldr	r3, [r7, #0]
 8005d9e:	689a      	ldr	r2, [r3, #8]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005da4:	683b      	ldr	r3, [r7, #0]
 8005da6:	681a      	ldr	r2, [r3, #0]
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	4a08      	ldr	r2, [pc, #32]	; (8005dd0 <TIM_Base_SetConfig+0xe4>)
 8005db0:	4293      	cmp	r3, r2
 8005db2:	d103      	bne.n	8005dbc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	691a      	ldr	r2, [r3, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005dbc:	687b      	ldr	r3, [r7, #4]
 8005dbe:	2201      	movs	r2, #1
 8005dc0:	615a      	str	r2, [r3, #20]
}
 8005dc2:	bf00      	nop
 8005dc4:	3714      	adds	r7, #20
 8005dc6:	46bd      	mov	sp, r7
 8005dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dcc:	4770      	bx	lr
 8005dce:	bf00      	nop
 8005dd0:	40010000 	.word	0x40010000
 8005dd4:	40000400 	.word	0x40000400
 8005dd8:	40000800 	.word	0x40000800
 8005ddc:	40000c00 	.word	0x40000c00
 8005de0:	40014000 	.word	0x40014000
 8005de4:	40014400 	.word	0x40014400
 8005de8:	40014800 	.word	0x40014800

08005dec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005dec:	b480      	push	{r7}
 8005dee:	b087      	sub	sp, #28
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	6078      	str	r0, [r7, #4]
 8005df4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	6a1b      	ldr	r3, [r3, #32]
 8005dfa:	f023 0201 	bic.w	r2, r3, #1
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a1b      	ldr	r3, [r3, #32]
 8005e06:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e08:	687b      	ldr	r3, [r7, #4]
 8005e0a:	685b      	ldr	r3, [r3, #4]
 8005e0c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	699b      	ldr	r3, [r3, #24]
 8005e12:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005e14:	68fb      	ldr	r3, [r7, #12]
 8005e16:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005e1a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0303 	bic.w	r3, r3, #3
 8005e22:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	68fa      	ldr	r2, [r7, #12]
 8005e2a:	4313      	orrs	r3, r2
 8005e2c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005e2e:	697b      	ldr	r3, [r7, #20]
 8005e30:	f023 0302 	bic.w	r3, r3, #2
 8005e34:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005e36:	683b      	ldr	r3, [r7, #0]
 8005e38:	689b      	ldr	r3, [r3, #8]
 8005e3a:	697a      	ldr	r2, [r7, #20]
 8005e3c:	4313      	orrs	r3, r2
 8005e3e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a1c      	ldr	r2, [pc, #112]	; (8005eb4 <TIM_OC1_SetConfig+0xc8>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d10c      	bne.n	8005e62 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005e48:	697b      	ldr	r3, [r7, #20]
 8005e4a:	f023 0308 	bic.w	r3, r3, #8
 8005e4e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	68db      	ldr	r3, [r3, #12]
 8005e54:	697a      	ldr	r2, [r7, #20]
 8005e56:	4313      	orrs	r3, r2
 8005e58:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f023 0304 	bic.w	r3, r3, #4
 8005e60:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	4a13      	ldr	r2, [pc, #76]	; (8005eb4 <TIM_OC1_SetConfig+0xc8>)
 8005e66:	4293      	cmp	r3, r2
 8005e68:	d111      	bne.n	8005e8e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005e6a:	693b      	ldr	r3, [r7, #16]
 8005e6c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005e70:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005e72:	693b      	ldr	r3, [r7, #16]
 8005e74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005e78:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005e7a:	683b      	ldr	r3, [r7, #0]
 8005e7c:	695b      	ldr	r3, [r3, #20]
 8005e7e:	693a      	ldr	r2, [r7, #16]
 8005e80:	4313      	orrs	r3, r2
 8005e82:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005e84:	683b      	ldr	r3, [r7, #0]
 8005e86:	699b      	ldr	r3, [r3, #24]
 8005e88:	693a      	ldr	r2, [r7, #16]
 8005e8a:	4313      	orrs	r3, r2
 8005e8c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	693a      	ldr	r2, [r7, #16]
 8005e92:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	68fa      	ldr	r2, [r7, #12]
 8005e98:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005e9a:	683b      	ldr	r3, [r7, #0]
 8005e9c:	685a      	ldr	r2, [r3, #4]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	697a      	ldr	r2, [r7, #20]
 8005ea6:	621a      	str	r2, [r3, #32]
}
 8005ea8:	bf00      	nop
 8005eaa:	371c      	adds	r7, #28
 8005eac:	46bd      	mov	sp, r7
 8005eae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb2:	4770      	bx	lr
 8005eb4:	40010000 	.word	0x40010000

08005eb8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005eb8:	b480      	push	{r7}
 8005eba:	b087      	sub	sp, #28
 8005ebc:	af00      	add	r7, sp, #0
 8005ebe:	6078      	str	r0, [r7, #4]
 8005ec0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	6a1b      	ldr	r3, [r3, #32]
 8005ec6:	f023 0210 	bic.w	r2, r3, #16
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	6a1b      	ldr	r3, [r3, #32]
 8005ed2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	685b      	ldr	r3, [r3, #4]
 8005ed8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	699b      	ldr	r3, [r3, #24]
 8005ede:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005ee0:	68fb      	ldr	r3, [r7, #12]
 8005ee2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005ee6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005ee8:	68fb      	ldr	r3, [r7, #12]
 8005eea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005eee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005ef0:	683b      	ldr	r3, [r7, #0]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	021b      	lsls	r3, r3, #8
 8005ef6:	68fa      	ldr	r2, [r7, #12]
 8005ef8:	4313      	orrs	r3, r2
 8005efa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005efc:	697b      	ldr	r3, [r7, #20]
 8005efe:	f023 0320 	bic.w	r3, r3, #32
 8005f02:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f04:	683b      	ldr	r3, [r7, #0]
 8005f06:	689b      	ldr	r3, [r3, #8]
 8005f08:	011b      	lsls	r3, r3, #4
 8005f0a:	697a      	ldr	r2, [r7, #20]
 8005f0c:	4313      	orrs	r3, r2
 8005f0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	4a1e      	ldr	r2, [pc, #120]	; (8005f8c <TIM_OC2_SetConfig+0xd4>)
 8005f14:	4293      	cmp	r3, r2
 8005f16:	d10d      	bne.n	8005f34 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005f18:	697b      	ldr	r3, [r7, #20]
 8005f1a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005f1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005f20:	683b      	ldr	r3, [r7, #0]
 8005f22:	68db      	ldr	r3, [r3, #12]
 8005f24:	011b      	lsls	r3, r3, #4
 8005f26:	697a      	ldr	r2, [r7, #20]
 8005f28:	4313      	orrs	r3, r2
 8005f2a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005f2c:	697b      	ldr	r3, [r7, #20]
 8005f2e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005f32:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	4a15      	ldr	r2, [pc, #84]	; (8005f8c <TIM_OC2_SetConfig+0xd4>)
 8005f38:	4293      	cmp	r3, r2
 8005f3a:	d113      	bne.n	8005f64 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005f3c:	693b      	ldr	r3, [r7, #16]
 8005f3e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005f42:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005f4a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005f4c:	683b      	ldr	r3, [r7, #0]
 8005f4e:	695b      	ldr	r3, [r3, #20]
 8005f50:	009b      	lsls	r3, r3, #2
 8005f52:	693a      	ldr	r2, [r7, #16]
 8005f54:	4313      	orrs	r3, r2
 8005f56:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	699b      	ldr	r3, [r3, #24]
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	693a      	ldr	r2, [r7, #16]
 8005f60:	4313      	orrs	r3, r2
 8005f62:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	693a      	ldr	r2, [r7, #16]
 8005f68:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	68fa      	ldr	r2, [r7, #12]
 8005f6e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005f70:	683b      	ldr	r3, [r7, #0]
 8005f72:	685a      	ldr	r2, [r3, #4]
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	697a      	ldr	r2, [r7, #20]
 8005f7c:	621a      	str	r2, [r3, #32]
}
 8005f7e:	bf00      	nop
 8005f80:	371c      	adds	r7, #28
 8005f82:	46bd      	mov	sp, r7
 8005f84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f88:	4770      	bx	lr
 8005f8a:	bf00      	nop
 8005f8c:	40010000 	.word	0x40010000

08005f90 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f90:	b480      	push	{r7}
 8005f92:	b087      	sub	sp, #28
 8005f94:	af00      	add	r7, sp, #0
 8005f96:	6078      	str	r0, [r7, #4]
 8005f98:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	6a1b      	ldr	r3, [r3, #32]
 8005f9e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6a1b      	ldr	r3, [r3, #32]
 8005faa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	685b      	ldr	r3, [r3, #4]
 8005fb0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	69db      	ldr	r3, [r3, #28]
 8005fb6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fbe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005fc0:	68fb      	ldr	r3, [r7, #12]
 8005fc2:	f023 0303 	bic.w	r3, r3, #3
 8005fc6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005fc8:	683b      	ldr	r3, [r7, #0]
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	68fa      	ldr	r2, [r7, #12]
 8005fce:	4313      	orrs	r3, r2
 8005fd0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005fd2:	697b      	ldr	r3, [r7, #20]
 8005fd4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005fd8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	021b      	lsls	r3, r3, #8
 8005fe0:	697a      	ldr	r2, [r7, #20]
 8005fe2:	4313      	orrs	r3, r2
 8005fe4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	4a1d      	ldr	r2, [pc, #116]	; (8006060 <TIM_OC3_SetConfig+0xd0>)
 8005fea:	4293      	cmp	r3, r2
 8005fec:	d10d      	bne.n	800600a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005fee:	697b      	ldr	r3, [r7, #20]
 8005ff0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005ff4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005ff6:	683b      	ldr	r3, [r7, #0]
 8005ff8:	68db      	ldr	r3, [r3, #12]
 8005ffa:	021b      	lsls	r3, r3, #8
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006002:	697b      	ldr	r3, [r7, #20]
 8006004:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006008:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800600a:	687b      	ldr	r3, [r7, #4]
 800600c:	4a14      	ldr	r2, [pc, #80]	; (8006060 <TIM_OC3_SetConfig+0xd0>)
 800600e:	4293      	cmp	r3, r2
 8006010:	d113      	bne.n	800603a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006012:	693b      	ldr	r3, [r7, #16]
 8006014:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006018:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800601a:	693b      	ldr	r3, [r7, #16]
 800601c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006020:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006022:	683b      	ldr	r3, [r7, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	011b      	lsls	r3, r3, #4
 8006028:	693a      	ldr	r2, [r7, #16]
 800602a:	4313      	orrs	r3, r2
 800602c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800602e:	683b      	ldr	r3, [r7, #0]
 8006030:	699b      	ldr	r3, [r3, #24]
 8006032:	011b      	lsls	r3, r3, #4
 8006034:	693a      	ldr	r2, [r7, #16]
 8006036:	4313      	orrs	r3, r2
 8006038:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	693a      	ldr	r2, [r7, #16]
 800603e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	68fa      	ldr	r2, [r7, #12]
 8006044:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006046:	683b      	ldr	r3, [r7, #0]
 8006048:	685a      	ldr	r2, [r3, #4]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	697a      	ldr	r2, [r7, #20]
 8006052:	621a      	str	r2, [r3, #32]
}
 8006054:	bf00      	nop
 8006056:	371c      	adds	r7, #28
 8006058:	46bd      	mov	sp, r7
 800605a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605e:	4770      	bx	lr
 8006060:	40010000 	.word	0x40010000

08006064 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006064:	b480      	push	{r7}
 8006066:	b087      	sub	sp, #28
 8006068:	af00      	add	r7, sp, #0
 800606a:	6078      	str	r0, [r7, #4]
 800606c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	6a1b      	ldr	r3, [r3, #32]
 8006072:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a1b      	ldr	r3, [r3, #32]
 800607e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	685b      	ldr	r3, [r3, #4]
 8006084:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	69db      	ldr	r3, [r3, #28]
 800608a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006092:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006094:	68fb      	ldr	r3, [r7, #12]
 8006096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800609a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800609c:	683b      	ldr	r3, [r7, #0]
 800609e:	681b      	ldr	r3, [r3, #0]
 80060a0:	021b      	lsls	r3, r3, #8
 80060a2:	68fa      	ldr	r2, [r7, #12]
 80060a4:	4313      	orrs	r3, r2
 80060a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80060a8:	693b      	ldr	r3, [r7, #16]
 80060aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80060b0:	683b      	ldr	r3, [r7, #0]
 80060b2:	689b      	ldr	r3, [r3, #8]
 80060b4:	031b      	lsls	r3, r3, #12
 80060b6:	693a      	ldr	r2, [r7, #16]
 80060b8:	4313      	orrs	r3, r2
 80060ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	4a10      	ldr	r2, [pc, #64]	; (8006100 <TIM_OC4_SetConfig+0x9c>)
 80060c0:	4293      	cmp	r3, r2
 80060c2:	d109      	bne.n	80060d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80060c4:	697b      	ldr	r3, [r7, #20]
 80060c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80060ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80060cc:	683b      	ldr	r3, [r7, #0]
 80060ce:	695b      	ldr	r3, [r3, #20]
 80060d0:	019b      	lsls	r3, r3, #6
 80060d2:	697a      	ldr	r2, [r7, #20]
 80060d4:	4313      	orrs	r3, r2
 80060d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060d8:	687b      	ldr	r3, [r7, #4]
 80060da:	697a      	ldr	r2, [r7, #20]
 80060dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	68fa      	ldr	r2, [r7, #12]
 80060e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	685a      	ldr	r2, [r3, #4]
 80060e8:	687b      	ldr	r3, [r7, #4]
 80060ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	621a      	str	r2, [r3, #32]
}
 80060f2:	bf00      	nop
 80060f4:	371c      	adds	r7, #28
 80060f6:	46bd      	mov	sp, r7
 80060f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060fc:	4770      	bx	lr
 80060fe:	bf00      	nop
 8006100:	40010000 	.word	0x40010000

08006104 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006104:	b480      	push	{r7}
 8006106:	b087      	sub	sp, #28
 8006108:	af00      	add	r7, sp, #0
 800610a:	60f8      	str	r0, [r7, #12]
 800610c:	60b9      	str	r1, [r7, #8]
 800610e:	607a      	str	r2, [r7, #4]
 8006110:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006112:	68fb      	ldr	r3, [r7, #12]
 8006114:	6a1b      	ldr	r3, [r3, #32]
 8006116:	f023 0201 	bic.w	r2, r3, #1
 800611a:	68fb      	ldr	r3, [r7, #12]
 800611c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	699b      	ldr	r3, [r3, #24]
 8006122:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006124:	68fb      	ldr	r3, [r7, #12]
 8006126:	6a1b      	ldr	r3, [r3, #32]
 8006128:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800612a:	68fb      	ldr	r3, [r7, #12]
 800612c:	4a24      	ldr	r2, [pc, #144]	; (80061c0 <TIM_TI1_SetConfig+0xbc>)
 800612e:	4293      	cmp	r3, r2
 8006130:	d013      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 8006132:	68fb      	ldr	r3, [r7, #12]
 8006134:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006138:	d00f      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 800613a:	68fb      	ldr	r3, [r7, #12]
 800613c:	4a21      	ldr	r2, [pc, #132]	; (80061c4 <TIM_TI1_SetConfig+0xc0>)
 800613e:	4293      	cmp	r3, r2
 8006140:	d00b      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	4a20      	ldr	r2, [pc, #128]	; (80061c8 <TIM_TI1_SetConfig+0xc4>)
 8006146:	4293      	cmp	r3, r2
 8006148:	d007      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	4a1f      	ldr	r2, [pc, #124]	; (80061cc <TIM_TI1_SetConfig+0xc8>)
 800614e:	4293      	cmp	r3, r2
 8006150:	d003      	beq.n	800615a <TIM_TI1_SetConfig+0x56>
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	4a1e      	ldr	r2, [pc, #120]	; (80061d0 <TIM_TI1_SetConfig+0xcc>)
 8006156:	4293      	cmp	r3, r2
 8006158:	d101      	bne.n	800615e <TIM_TI1_SetConfig+0x5a>
 800615a:	2301      	movs	r3, #1
 800615c:	e000      	b.n	8006160 <TIM_TI1_SetConfig+0x5c>
 800615e:	2300      	movs	r3, #0
 8006160:	2b00      	cmp	r3, #0
 8006162:	d008      	beq.n	8006176 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006164:	697b      	ldr	r3, [r7, #20]
 8006166:	f023 0303 	bic.w	r3, r3, #3
 800616a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800616c:	697a      	ldr	r2, [r7, #20]
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	4313      	orrs	r3, r2
 8006172:	617b      	str	r3, [r7, #20]
 8006174:	e003      	b.n	800617e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006176:	697b      	ldr	r3, [r7, #20]
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800617e:	697b      	ldr	r3, [r7, #20]
 8006180:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006184:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	011b      	lsls	r3, r3, #4
 800618a:	b2db      	uxtb	r3, r3
 800618c:	697a      	ldr	r2, [r7, #20]
 800618e:	4313      	orrs	r3, r2
 8006190:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006192:	693b      	ldr	r3, [r7, #16]
 8006194:	f023 030a 	bic.w	r3, r3, #10
 8006198:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800619a:	68bb      	ldr	r3, [r7, #8]
 800619c:	f003 030a 	and.w	r3, r3, #10
 80061a0:	693a      	ldr	r2, [r7, #16]
 80061a2:	4313      	orrs	r3, r2
 80061a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	697a      	ldr	r2, [r7, #20]
 80061aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	621a      	str	r2, [r3, #32]
}
 80061b2:	bf00      	nop
 80061b4:	371c      	adds	r7, #28
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	40010000 	.word	0x40010000
 80061c4:	40000400 	.word	0x40000400
 80061c8:	40000800 	.word	0x40000800
 80061cc:	40000c00 	.word	0x40000c00
 80061d0:	40014000 	.word	0x40014000

080061d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80061d4:	b480      	push	{r7}
 80061d6:	b087      	sub	sp, #28
 80061d8:	af00      	add	r7, sp, #0
 80061da:	60f8      	str	r0, [r7, #12]
 80061dc:	60b9      	str	r1, [r7, #8]
 80061de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	6a1b      	ldr	r3, [r3, #32]
 80061e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	6a1b      	ldr	r3, [r3, #32]
 80061ea:	f023 0201 	bic.w	r2, r3, #1
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	699b      	ldr	r3, [r3, #24]
 80061f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80061f8:	693b      	ldr	r3, [r7, #16]
 80061fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80061fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	011b      	lsls	r3, r3, #4
 8006204:	693a      	ldr	r2, [r7, #16]
 8006206:	4313      	orrs	r3, r2
 8006208:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f023 030a 	bic.w	r3, r3, #10
 8006210:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006212:	697a      	ldr	r2, [r7, #20]
 8006214:	68bb      	ldr	r3, [r7, #8]
 8006216:	4313      	orrs	r3, r2
 8006218:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800621a:	68fb      	ldr	r3, [r7, #12]
 800621c:	693a      	ldr	r2, [r7, #16]
 800621e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006220:	68fb      	ldr	r3, [r7, #12]
 8006222:	697a      	ldr	r2, [r7, #20]
 8006224:	621a      	str	r2, [r3, #32]
}
 8006226:	bf00      	nop
 8006228:	371c      	adds	r7, #28
 800622a:	46bd      	mov	sp, r7
 800622c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006230:	4770      	bx	lr

08006232 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006232:	b480      	push	{r7}
 8006234:	b087      	sub	sp, #28
 8006236:	af00      	add	r7, sp, #0
 8006238:	60f8      	str	r0, [r7, #12]
 800623a:	60b9      	str	r1, [r7, #8]
 800623c:	607a      	str	r2, [r7, #4]
 800623e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	6a1b      	ldr	r3, [r3, #32]
 8006244:	f023 0210 	bic.w	r2, r3, #16
 8006248:	68fb      	ldr	r3, [r7, #12]
 800624a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	699b      	ldr	r3, [r3, #24]
 8006250:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	6a1b      	ldr	r3, [r3, #32]
 8006256:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006258:	697b      	ldr	r3, [r7, #20]
 800625a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800625e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	021b      	lsls	r3, r3, #8
 8006264:	697a      	ldr	r2, [r7, #20]
 8006266:	4313      	orrs	r3, r2
 8006268:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800626a:	697b      	ldr	r3, [r7, #20]
 800626c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006270:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006272:	683b      	ldr	r3, [r7, #0]
 8006274:	031b      	lsls	r3, r3, #12
 8006276:	b29b      	uxth	r3, r3
 8006278:	697a      	ldr	r2, [r7, #20]
 800627a:	4313      	orrs	r3, r2
 800627c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800627e:	693b      	ldr	r3, [r7, #16]
 8006280:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006284:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006286:	68bb      	ldr	r3, [r7, #8]
 8006288:	011b      	lsls	r3, r3, #4
 800628a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800628e:	693a      	ldr	r2, [r7, #16]
 8006290:	4313      	orrs	r3, r2
 8006292:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800629a:	68fb      	ldr	r3, [r7, #12]
 800629c:	693a      	ldr	r2, [r7, #16]
 800629e:	621a      	str	r2, [r3, #32]
}
 80062a0:	bf00      	nop
 80062a2:	371c      	adds	r7, #28
 80062a4:	46bd      	mov	sp, r7
 80062a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062aa:	4770      	bx	lr

080062ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80062ac:	b480      	push	{r7}
 80062ae:	b087      	sub	sp, #28
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	60f8      	str	r0, [r7, #12]
 80062b4:	60b9      	str	r1, [r7, #8]
 80062b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	6a1b      	ldr	r3, [r3, #32]
 80062bc:	f023 0210 	bic.w	r2, r3, #16
 80062c0:	68fb      	ldr	r3, [r7, #12]
 80062c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062c4:	68fb      	ldr	r3, [r7, #12]
 80062c6:	699b      	ldr	r3, [r3, #24]
 80062c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062ca:	68fb      	ldr	r3, [r7, #12]
 80062cc:	6a1b      	ldr	r3, [r3, #32]
 80062ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062d0:	697b      	ldr	r3, [r7, #20]
 80062d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80062d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	031b      	lsls	r3, r3, #12
 80062dc:	697a      	ldr	r2, [r7, #20]
 80062de:	4313      	orrs	r3, r2
 80062e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80062e2:	693b      	ldr	r3, [r7, #16]
 80062e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80062e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80062ea:	68bb      	ldr	r3, [r7, #8]
 80062ec:	011b      	lsls	r3, r3, #4
 80062ee:	693a      	ldr	r2, [r7, #16]
 80062f0:	4313      	orrs	r3, r2
 80062f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	697a      	ldr	r2, [r7, #20]
 80062f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062fa:	68fb      	ldr	r3, [r7, #12]
 80062fc:	693a      	ldr	r2, [r7, #16]
 80062fe:	621a      	str	r2, [r3, #32]
}
 8006300:	bf00      	nop
 8006302:	371c      	adds	r7, #28
 8006304:	46bd      	mov	sp, r7
 8006306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800630a:	4770      	bx	lr

0800630c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800630c:	b480      	push	{r7}
 800630e:	b087      	sub	sp, #28
 8006310:	af00      	add	r7, sp, #0
 8006312:	60f8      	str	r0, [r7, #12]
 8006314:	60b9      	str	r1, [r7, #8]
 8006316:	607a      	str	r2, [r7, #4]
 8006318:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	6a1b      	ldr	r3, [r3, #32]
 800631e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006322:	68fb      	ldr	r3, [r7, #12]
 8006324:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006326:	68fb      	ldr	r3, [r7, #12]
 8006328:	69db      	ldr	r3, [r3, #28]
 800632a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	6a1b      	ldr	r3, [r3, #32]
 8006330:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	f023 0303 	bic.w	r3, r3, #3
 8006338:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800633a:	697a      	ldr	r2, [r7, #20]
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	4313      	orrs	r3, r2
 8006340:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006342:	697b      	ldr	r3, [r7, #20]
 8006344:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006348:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800634a:	683b      	ldr	r3, [r7, #0]
 800634c:	011b      	lsls	r3, r3, #4
 800634e:	b2db      	uxtb	r3, r3
 8006350:	697a      	ldr	r2, [r7, #20]
 8006352:	4313      	orrs	r3, r2
 8006354:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800635c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800635e:	68bb      	ldr	r3, [r7, #8]
 8006360:	021b      	lsls	r3, r3, #8
 8006362:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006366:	693a      	ldr	r2, [r7, #16]
 8006368:	4313      	orrs	r3, r2
 800636a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	697a      	ldr	r2, [r7, #20]
 8006370:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	693a      	ldr	r2, [r7, #16]
 8006376:	621a      	str	r2, [r3, #32]
}
 8006378:	bf00      	nop
 800637a:	371c      	adds	r7, #28
 800637c:	46bd      	mov	sp, r7
 800637e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006382:	4770      	bx	lr

08006384 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006384:	b480      	push	{r7}
 8006386:	b087      	sub	sp, #28
 8006388:	af00      	add	r7, sp, #0
 800638a:	60f8      	str	r0, [r7, #12]
 800638c:	60b9      	str	r1, [r7, #8]
 800638e:	607a      	str	r2, [r7, #4]
 8006390:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	6a1b      	ldr	r3, [r3, #32]
 8006396:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800639e:	68fb      	ldr	r3, [r7, #12]
 80063a0:	69db      	ldr	r3, [r3, #28]
 80063a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063a4:	68fb      	ldr	r3, [r7, #12]
 80063a6:	6a1b      	ldr	r3, [r3, #32]
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	021b      	lsls	r3, r3, #8
 80063b6:	697a      	ldr	r2, [r7, #20]
 80063b8:	4313      	orrs	r3, r2
 80063ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	031b      	lsls	r3, r3, #12
 80063c8:	b29b      	uxth	r3, r3
 80063ca:	697a      	ldr	r2, [r7, #20]
 80063cc:	4313      	orrs	r3, r2
 80063ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80063d0:	693b      	ldr	r3, [r7, #16]
 80063d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80063d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80063d8:	68bb      	ldr	r3, [r7, #8]
 80063da:	031b      	lsls	r3, r3, #12
 80063dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80063e0:	693a      	ldr	r2, [r7, #16]
 80063e2:	4313      	orrs	r3, r2
 80063e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	697a      	ldr	r2, [r7, #20]
 80063ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80063ec:	68fb      	ldr	r3, [r7, #12]
 80063ee:	693a      	ldr	r2, [r7, #16]
 80063f0:	621a      	str	r2, [r3, #32]
}
 80063f2:	bf00      	nop
 80063f4:	371c      	adds	r7, #28
 80063f6:	46bd      	mov	sp, r7
 80063f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063fc:	4770      	bx	lr

080063fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80063fe:	b480      	push	{r7}
 8006400:	b085      	sub	sp, #20
 8006402:	af00      	add	r7, sp, #0
 8006404:	6078      	str	r0, [r7, #4]
 8006406:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	689b      	ldr	r3, [r3, #8]
 800640c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006414:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006416:	683a      	ldr	r2, [r7, #0]
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	4313      	orrs	r3, r2
 800641c:	f043 0307 	orr.w	r3, r3, #7
 8006420:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	68fa      	ldr	r2, [r7, #12]
 8006426:	609a      	str	r2, [r3, #8]
}
 8006428:	bf00      	nop
 800642a:	3714      	adds	r7, #20
 800642c:	46bd      	mov	sp, r7
 800642e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006432:	4770      	bx	lr

08006434 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006434:	b480      	push	{r7}
 8006436:	b087      	sub	sp, #28
 8006438:	af00      	add	r7, sp, #0
 800643a:	60f8      	str	r0, [r7, #12]
 800643c:	60b9      	str	r1, [r7, #8]
 800643e:	607a      	str	r2, [r7, #4]
 8006440:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	689b      	ldr	r3, [r3, #8]
 8006446:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006448:	697b      	ldr	r3, [r7, #20]
 800644a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800644e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006450:	683b      	ldr	r3, [r7, #0]
 8006452:	021a      	lsls	r2, r3, #8
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	431a      	orrs	r2, r3
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	4313      	orrs	r3, r2
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	4313      	orrs	r3, r2
 8006460:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006462:	68fb      	ldr	r3, [r7, #12]
 8006464:	697a      	ldr	r2, [r7, #20]
 8006466:	609a      	str	r2, [r3, #8]
}
 8006468:	bf00      	nop
 800646a:	371c      	adds	r7, #28
 800646c:	46bd      	mov	sp, r7
 800646e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006472:	4770      	bx	lr

08006474 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006474:	b480      	push	{r7}
 8006476:	b087      	sub	sp, #28
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006480:	68bb      	ldr	r3, [r7, #8]
 8006482:	f003 031f 	and.w	r3, r3, #31
 8006486:	2201      	movs	r2, #1
 8006488:	fa02 f303 	lsl.w	r3, r2, r3
 800648c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	6a1a      	ldr	r2, [r3, #32]
 8006492:	697b      	ldr	r3, [r7, #20]
 8006494:	43db      	mvns	r3, r3
 8006496:	401a      	ands	r2, r3
 8006498:	68fb      	ldr	r3, [r7, #12]
 800649a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1a      	ldr	r2, [r3, #32]
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	f003 031f 	and.w	r3, r3, #31
 80064a6:	6879      	ldr	r1, [r7, #4]
 80064a8:	fa01 f303 	lsl.w	r3, r1, r3
 80064ac:	431a      	orrs	r2, r3
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	621a      	str	r2, [r3, #32]
}
 80064b2:	bf00      	nop
 80064b4:	371c      	adds	r7, #28
 80064b6:	46bd      	mov	sp, r7
 80064b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064bc:	4770      	bx	lr
	...

080064c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064c0:	b480      	push	{r7}
 80064c2:	b085      	sub	sp, #20
 80064c4:	af00      	add	r7, sp, #0
 80064c6:	6078      	str	r0, [r7, #4]
 80064c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064ca:	687b      	ldr	r3, [r7, #4]
 80064cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80064d0:	2b01      	cmp	r3, #1
 80064d2:	d101      	bne.n	80064d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80064d4:	2302      	movs	r3, #2
 80064d6:	e050      	b.n	800657a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2202      	movs	r2, #2
 80064e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	685b      	ldr	r3, [r3, #4]
 80064ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	689b      	ldr	r3, [r3, #8]
 80064f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006500:	683b      	ldr	r3, [r7, #0]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	4313      	orrs	r3, r2
 8006508:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	681b      	ldr	r3, [r3, #0]
 800650e:	68fa      	ldr	r2, [r7, #12]
 8006510:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006512:	687b      	ldr	r3, [r7, #4]
 8006514:	681b      	ldr	r3, [r3, #0]
 8006516:	4a1c      	ldr	r2, [pc, #112]	; (8006588 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006518:	4293      	cmp	r3, r2
 800651a:	d018      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006524:	d013      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	4a18      	ldr	r2, [pc, #96]	; (800658c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800652c:	4293      	cmp	r3, r2
 800652e:	d00e      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006530:	687b      	ldr	r3, [r7, #4]
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	4a16      	ldr	r2, [pc, #88]	; (8006590 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006536:	4293      	cmp	r3, r2
 8006538:	d009      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	4a15      	ldr	r2, [pc, #84]	; (8006594 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006540:	4293      	cmp	r3, r2
 8006542:	d004      	beq.n	800654e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	4a13      	ldr	r2, [pc, #76]	; (8006598 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800654a:	4293      	cmp	r3, r2
 800654c:	d10c      	bne.n	8006568 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800654e:	68bb      	ldr	r3, [r7, #8]
 8006550:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006554:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006556:	683b      	ldr	r3, [r7, #0]
 8006558:	685b      	ldr	r3, [r3, #4]
 800655a:	68ba      	ldr	r2, [r7, #8]
 800655c:	4313      	orrs	r3, r2
 800655e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68ba      	ldr	r2, [r7, #8]
 8006566:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	2201      	movs	r2, #1
 800656c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006578:	2300      	movs	r3, #0
}
 800657a:	4618      	mov	r0, r3
 800657c:	3714      	adds	r7, #20
 800657e:	46bd      	mov	sp, r7
 8006580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006584:	4770      	bx	lr
 8006586:	bf00      	nop
 8006588:	40010000 	.word	0x40010000
 800658c:	40000400 	.word	0x40000400
 8006590:	40000800 	.word	0x40000800
 8006594:	40000c00 	.word	0x40000c00
 8006598:	40014000 	.word	0x40014000

0800659c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800659c:	b480      	push	{r7}
 800659e:	b083      	sub	sp, #12
 80065a0:	af00      	add	r7, sp, #0
 80065a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065a4:	bf00      	nop
 80065a6:	370c      	adds	r7, #12
 80065a8:	46bd      	mov	sp, r7
 80065aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065ae:	4770      	bx	lr

080065b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065b0:	b480      	push	{r7}
 80065b2:	b083      	sub	sp, #12
 80065b4:	af00      	add	r7, sp, #0
 80065b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065b8:	bf00      	nop
 80065ba:	370c      	adds	r7, #12
 80065bc:	46bd      	mov	sp, r7
 80065be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c2:	4770      	bx	lr

080065c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065c4:	b580      	push	{r7, lr}
 80065c6:	b082      	sub	sp, #8
 80065c8:	af00      	add	r7, sp, #0
 80065ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2b00      	cmp	r3, #0
 80065d0:	d101      	bne.n	80065d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80065d2:	2301      	movs	r3, #1
 80065d4:	e03f      	b.n	8006656 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065dc:	b2db      	uxtb	r3, r3
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d106      	bne.n	80065f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80065e2:	687b      	ldr	r3, [r7, #4]
 80065e4:	2200      	movs	r2, #0
 80065e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80065ea:	6878      	ldr	r0, [r7, #4]
 80065ec:	f7fb ffd2 	bl	8002594 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2224      	movs	r2, #36	; 0x24
 80065f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	681b      	ldr	r3, [r3, #0]
 80065fc:	68da      	ldr	r2, [r3, #12]
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006606:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006608:	6878      	ldr	r0, [r7, #4]
 800660a:	f000 fddf 	bl	80071cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	691a      	ldr	r2, [r3, #16]
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	681b      	ldr	r3, [r3, #0]
 8006618:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800661c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695a      	ldr	r2, [r3, #20]
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800662c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	681b      	ldr	r3, [r3, #0]
 8006632:	68da      	ldr	r2, [r3, #12]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	681b      	ldr	r3, [r3, #0]
 8006638:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800663c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2220      	movs	r2, #32
 8006648:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	2220      	movs	r2, #32
 8006650:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006654:	2300      	movs	r3, #0
}
 8006656:	4618      	mov	r0, r3
 8006658:	3708      	adds	r7, #8
 800665a:	46bd      	mov	sp, r7
 800665c:	bd80      	pop	{r7, pc}

0800665e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800665e:	b580      	push	{r7, lr}
 8006660:	b08a      	sub	sp, #40	; 0x28
 8006662:	af02      	add	r7, sp, #8
 8006664:	60f8      	str	r0, [r7, #12]
 8006666:	60b9      	str	r1, [r7, #8]
 8006668:	603b      	str	r3, [r7, #0]
 800666a:	4613      	mov	r3, r2
 800666c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 800666e:	2300      	movs	r3, #0
 8006670:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006678:	b2db      	uxtb	r3, r3
 800667a:	2b20      	cmp	r3, #32
 800667c:	d17c      	bne.n	8006778 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800667e:	68bb      	ldr	r3, [r7, #8]
 8006680:	2b00      	cmp	r3, #0
 8006682:	d002      	beq.n	800668a <HAL_UART_Transmit+0x2c>
 8006684:	88fb      	ldrh	r3, [r7, #6]
 8006686:	2b00      	cmp	r3, #0
 8006688:	d101      	bne.n	800668e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 800668a:	2301      	movs	r3, #1
 800668c:	e075      	b.n	800677a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006694:	2b01      	cmp	r3, #1
 8006696:	d101      	bne.n	800669c <HAL_UART_Transmit+0x3e>
 8006698:	2302      	movs	r3, #2
 800669a:	e06e      	b.n	800677a <HAL_UART_Transmit+0x11c>
 800669c:	68fb      	ldr	r3, [r7, #12]
 800669e:	2201      	movs	r2, #1
 80066a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2200      	movs	r2, #0
 80066a8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2221      	movs	r2, #33	; 0x21
 80066ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80066b2:	f7fc f8e1 	bl	8002878 <HAL_GetTick>
 80066b6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80066b8:	68fb      	ldr	r3, [r7, #12]
 80066ba:	88fa      	ldrh	r2, [r7, #6]
 80066bc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	88fa      	ldrh	r2, [r7, #6]
 80066c2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80066cc:	d108      	bne.n	80066e0 <HAL_UART_Transmit+0x82>
 80066ce:	68fb      	ldr	r3, [r7, #12]
 80066d0:	691b      	ldr	r3, [r3, #16]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d104      	bne.n	80066e0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80066d6:	2300      	movs	r3, #0
 80066d8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80066da:	68bb      	ldr	r3, [r7, #8]
 80066dc:	61bb      	str	r3, [r7, #24]
 80066de:	e003      	b.n	80066e8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80066e0:	68bb      	ldr	r3, [r7, #8]
 80066e2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80066e4:	2300      	movs	r3, #0
 80066e6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	2200      	movs	r2, #0
 80066ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80066f0:	e02a      	b.n	8006748 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80066f2:	683b      	ldr	r3, [r7, #0]
 80066f4:	9300      	str	r3, [sp, #0]
 80066f6:	697b      	ldr	r3, [r7, #20]
 80066f8:	2200      	movs	r2, #0
 80066fa:	2180      	movs	r1, #128	; 0x80
 80066fc:	68f8      	ldr	r0, [r7, #12]
 80066fe:	f000 fb1f 	bl	8006d40 <UART_WaitOnFlagUntilTimeout>
 8006702:	4603      	mov	r3, r0
 8006704:	2b00      	cmp	r3, #0
 8006706:	d001      	beq.n	800670c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006708:	2303      	movs	r3, #3
 800670a:	e036      	b.n	800677a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 800670c:	69fb      	ldr	r3, [r7, #28]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d10b      	bne.n	800672a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006712:	69bb      	ldr	r3, [r7, #24]
 8006714:	881b      	ldrh	r3, [r3, #0]
 8006716:	461a      	mov	r2, r3
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006720:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006722:	69bb      	ldr	r3, [r7, #24]
 8006724:	3302      	adds	r3, #2
 8006726:	61bb      	str	r3, [r7, #24]
 8006728:	e007      	b.n	800673a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800672a:	69fb      	ldr	r3, [r7, #28]
 800672c:	781a      	ldrb	r2, [r3, #0]
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006734:	69fb      	ldr	r3, [r7, #28]
 8006736:	3301      	adds	r3, #1
 8006738:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800673a:	68fb      	ldr	r3, [r7, #12]
 800673c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800673e:	b29b      	uxth	r3, r3
 8006740:	3b01      	subs	r3, #1
 8006742:	b29a      	uxth	r2, r3
 8006744:	68fb      	ldr	r3, [r7, #12]
 8006746:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8006748:	68fb      	ldr	r3, [r7, #12]
 800674a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800674c:	b29b      	uxth	r3, r3
 800674e:	2b00      	cmp	r3, #0
 8006750:	d1cf      	bne.n	80066f2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	9300      	str	r3, [sp, #0]
 8006756:	697b      	ldr	r3, [r7, #20]
 8006758:	2200      	movs	r2, #0
 800675a:	2140      	movs	r1, #64	; 0x40
 800675c:	68f8      	ldr	r0, [r7, #12]
 800675e:	f000 faef 	bl	8006d40 <UART_WaitOnFlagUntilTimeout>
 8006762:	4603      	mov	r3, r0
 8006764:	2b00      	cmp	r3, #0
 8006766:	d001      	beq.n	800676c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e006      	b.n	800677a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	2220      	movs	r2, #32
 8006770:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006774:	2300      	movs	r3, #0
 8006776:	e000      	b.n	800677a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006778:	2302      	movs	r3, #2
  }
}
 800677a:	4618      	mov	r0, r3
 800677c:	3720      	adds	r7, #32
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b084      	sub	sp, #16
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	4613      	mov	r3, r2
 800678e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006796:	b2db      	uxtb	r3, r3
 8006798:	2b20      	cmp	r3, #32
 800679a:	d11d      	bne.n	80067d8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800679c:	68bb      	ldr	r3, [r7, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d002      	beq.n	80067a8 <HAL_UART_Receive_IT+0x26>
 80067a2:	88fb      	ldrh	r3, [r7, #6]
 80067a4:	2b00      	cmp	r3, #0
 80067a6:	d101      	bne.n	80067ac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80067a8:	2301      	movs	r3, #1
 80067aa:	e016      	b.n	80067da <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80067b2:	2b01      	cmp	r3, #1
 80067b4:	d101      	bne.n	80067ba <HAL_UART_Receive_IT+0x38>
 80067b6:	2302      	movs	r3, #2
 80067b8:	e00f      	b.n	80067da <HAL_UART_Receive_IT+0x58>
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	2201      	movs	r2, #1
 80067be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80067c2:	68fb      	ldr	r3, [r7, #12]
 80067c4:	2200      	movs	r2, #0
 80067c6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80067c8:	88fb      	ldrh	r3, [r7, #6]
 80067ca:	461a      	mov	r2, r3
 80067cc:	68b9      	ldr	r1, [r7, #8]
 80067ce:	68f8      	ldr	r0, [r7, #12]
 80067d0:	f000 fb24 	bl	8006e1c <UART_Start_Receive_IT>
 80067d4:	4603      	mov	r3, r0
 80067d6:	e000      	b.n	80067da <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 80067d8:	2302      	movs	r3, #2
  }
}
 80067da:	4618      	mov	r0, r3
 80067dc:	3710      	adds	r7, #16
 80067de:	46bd      	mov	sp, r7
 80067e0:	bd80      	pop	{r7, pc}
	...

080067e4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b0ba      	sub	sp, #232	; 0xe8
 80067e8:	af00      	add	r7, sp, #0
 80067ea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	681b      	ldr	r3, [r3, #0]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	68db      	ldr	r3, [r3, #12]
 80067fc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	681b      	ldr	r3, [r3, #0]
 8006804:	695b      	ldr	r3, [r3, #20]
 8006806:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800680a:	2300      	movs	r3, #0
 800680c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006810:	2300      	movs	r3, #0
 8006812:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006816:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800681a:	f003 030f 	and.w	r3, r3, #15
 800681e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006822:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006826:	2b00      	cmp	r3, #0
 8006828:	d10f      	bne.n	800684a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800682a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800682e:	f003 0320 	and.w	r3, r3, #32
 8006832:	2b00      	cmp	r3, #0
 8006834:	d009      	beq.n	800684a <HAL_UART_IRQHandler+0x66>
 8006836:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800683a:	f003 0320 	and.w	r3, r3, #32
 800683e:	2b00      	cmp	r3, #0
 8006840:	d003      	beq.n	800684a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006842:	6878      	ldr	r0, [r7, #4]
 8006844:	f000 fc07 	bl	8007056 <UART_Receive_IT>
      return;
 8006848:	e256      	b.n	8006cf8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800684a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800684e:	2b00      	cmp	r3, #0
 8006850:	f000 80de 	beq.w	8006a10 <HAL_UART_IRQHandler+0x22c>
 8006854:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006858:	f003 0301 	and.w	r3, r3, #1
 800685c:	2b00      	cmp	r3, #0
 800685e:	d106      	bne.n	800686e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006860:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006864:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006868:	2b00      	cmp	r3, #0
 800686a:	f000 80d1 	beq.w	8006a10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800686e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006872:	f003 0301 	and.w	r3, r3, #1
 8006876:	2b00      	cmp	r3, #0
 8006878:	d00b      	beq.n	8006892 <HAL_UART_IRQHandler+0xae>
 800687a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800687e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006882:	2b00      	cmp	r3, #0
 8006884:	d005      	beq.n	8006892 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800688a:	f043 0201 	orr.w	r2, r3, #1
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006892:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006896:	f003 0304 	and.w	r3, r3, #4
 800689a:	2b00      	cmp	r3, #0
 800689c:	d00b      	beq.n	80068b6 <HAL_UART_IRQHandler+0xd2>
 800689e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068a2:	f003 0301 	and.w	r3, r3, #1
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068ae:	f043 0202 	orr.w	r2, r3, #2
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80068b6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068ba:	f003 0302 	and.w	r3, r3, #2
 80068be:	2b00      	cmp	r3, #0
 80068c0:	d00b      	beq.n	80068da <HAL_UART_IRQHandler+0xf6>
 80068c2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068c6:	f003 0301 	and.w	r3, r3, #1
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d005      	beq.n	80068da <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80068ce:	687b      	ldr	r3, [r7, #4]
 80068d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80068d2:	f043 0204 	orr.w	r2, r3, #4
 80068d6:	687b      	ldr	r3, [r7, #4]
 80068d8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80068da:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068de:	f003 0308 	and.w	r3, r3, #8
 80068e2:	2b00      	cmp	r3, #0
 80068e4:	d011      	beq.n	800690a <HAL_UART_IRQHandler+0x126>
 80068e6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80068ea:	f003 0320 	and.w	r3, r3, #32
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d105      	bne.n	80068fe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80068f2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80068f6:	f003 0301 	and.w	r3, r3, #1
 80068fa:	2b00      	cmp	r3, #0
 80068fc:	d005      	beq.n	800690a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80068fe:	687b      	ldr	r3, [r7, #4]
 8006900:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006902:	f043 0208 	orr.w	r2, r3, #8
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800690a:	687b      	ldr	r3, [r7, #4]
 800690c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800690e:	2b00      	cmp	r3, #0
 8006910:	f000 81ed 	beq.w	8006cee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006914:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006918:	f003 0320 	and.w	r3, r3, #32
 800691c:	2b00      	cmp	r3, #0
 800691e:	d008      	beq.n	8006932 <HAL_UART_IRQHandler+0x14e>
 8006920:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006924:	f003 0320 	and.w	r3, r3, #32
 8006928:	2b00      	cmp	r3, #0
 800692a:	d002      	beq.n	8006932 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800692c:	6878      	ldr	r0, [r7, #4]
 800692e:	f000 fb92 	bl	8007056 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	695b      	ldr	r3, [r3, #20]
 8006938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800693c:	2b40      	cmp	r3, #64	; 0x40
 800693e:	bf0c      	ite	eq
 8006940:	2301      	moveq	r3, #1
 8006942:	2300      	movne	r3, #0
 8006944:	b2db      	uxtb	r3, r3
 8006946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800694e:	f003 0308 	and.w	r3, r3, #8
 8006952:	2b00      	cmp	r3, #0
 8006954:	d103      	bne.n	800695e <HAL_UART_IRQHandler+0x17a>
 8006956:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800695a:	2b00      	cmp	r3, #0
 800695c:	d04f      	beq.n	80069fe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800695e:	6878      	ldr	r0, [r7, #4]
 8006960:	f000 fa9a 	bl	8006e98 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006964:	687b      	ldr	r3, [r7, #4]
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	695b      	ldr	r3, [r3, #20]
 800696a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800696e:	2b40      	cmp	r3, #64	; 0x40
 8006970:	d141      	bne.n	80069f6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	3314      	adds	r3, #20
 8006978:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800697c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006980:	e853 3f00 	ldrex	r3, [r3]
 8006984:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006988:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800698c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006990:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006994:	687b      	ldr	r3, [r7, #4]
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	3314      	adds	r3, #20
 800699a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800699e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80069a2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069a6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80069aa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80069ae:	e841 2300 	strex	r3, r2, [r1]
 80069b2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80069b6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80069ba:	2b00      	cmp	r3, #0
 80069bc:	d1d9      	bne.n	8006972 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d013      	beq.n	80069ee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069ca:	4a7d      	ldr	r2, [pc, #500]	; (8006bc0 <HAL_UART_IRQHandler+0x3dc>)
 80069cc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069d2:	4618      	mov	r0, r3
 80069d4:	f7fc fcaf 	bl	8003336 <HAL_DMA_Abort_IT>
 80069d8:	4603      	mov	r3, r0
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d016      	beq.n	8006a0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80069e4:	687a      	ldr	r2, [r7, #4]
 80069e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80069e8:	4610      	mov	r0, r2
 80069ea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069ec:	e00e      	b.n	8006a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80069ee:	6878      	ldr	r0, [r7, #4]
 80069f0:	f000 f990 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069f4:	e00a      	b.n	8006a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80069f6:	6878      	ldr	r0, [r7, #4]
 80069f8:	f000 f98c 	bl	8006d14 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80069fc:	e006      	b.n	8006a0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80069fe:	6878      	ldr	r0, [r7, #4]
 8006a00:	f000 f988 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2200      	movs	r2, #0
 8006a08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006a0a:	e170      	b.n	8006cee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a0c:	bf00      	nop
    return;
 8006a0e:	e16e      	b.n	8006cee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	f040 814a 	bne.w	8006cae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006a1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1e:	f003 0310 	and.w	r3, r3, #16
 8006a22:	2b00      	cmp	r3, #0
 8006a24:	f000 8143 	beq.w	8006cae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006a28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006a2c:	f003 0310 	and.w	r3, r3, #16
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	f000 813c 	beq.w	8006cae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006a36:	2300      	movs	r3, #0
 8006a38:	60bb      	str	r3, [r7, #8]
 8006a3a:	687b      	ldr	r3, [r7, #4]
 8006a3c:	681b      	ldr	r3, [r3, #0]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	687b      	ldr	r3, [r7, #4]
 8006a44:	681b      	ldr	r3, [r3, #0]
 8006a46:	685b      	ldr	r3, [r3, #4]
 8006a48:	60bb      	str	r3, [r7, #8]
 8006a4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	695b      	ldr	r3, [r3, #20]
 8006a52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a56:	2b40      	cmp	r3, #64	; 0x40
 8006a58:	f040 80b4 	bne.w	8006bc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	685b      	ldr	r3, [r3, #4]
 8006a64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006a68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	f000 8140 	beq.w	8006cf2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006a76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a7a:	429a      	cmp	r2, r3
 8006a7c:	f080 8139 	bcs.w	8006cf2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006a80:	687b      	ldr	r3, [r7, #4]
 8006a82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006a86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006a8c:	69db      	ldr	r3, [r3, #28]
 8006a8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006a92:	f000 8088 	beq.w	8006ba6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	330c      	adds	r3, #12
 8006a9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006aa4:	e853 3f00 	ldrex	r3, [r3]
 8006aa8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006aac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006ab0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006ab4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	330c      	adds	r3, #12
 8006abe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006ac2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006ac6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006aca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006ace:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006ad2:	e841 2300 	strex	r3, r2, [r1]
 8006ad6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006ada:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006ade:	2b00      	cmp	r3, #0
 8006ae0:	d1d9      	bne.n	8006a96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	681b      	ldr	r3, [r3, #0]
 8006ae6:	3314      	adds	r3, #20
 8006ae8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006aec:	e853 3f00 	ldrex	r3, [r3]
 8006af0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006af2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006af4:	f023 0301 	bic.w	r3, r3, #1
 8006af8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	681b      	ldr	r3, [r3, #0]
 8006b00:	3314      	adds	r3, #20
 8006b02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006b06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006b0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006b0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006b12:	e841 2300 	strex	r3, r2, [r1]
 8006b16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006b18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006b1a:	2b00      	cmp	r3, #0
 8006b1c:	d1e1      	bne.n	8006ae2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	3314      	adds	r3, #20
 8006b24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006b2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006b30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	3314      	adds	r3, #20
 8006b3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006b42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006b44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006b48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006b50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e3      	bne.n	8006b1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	2220      	movs	r2, #32
 8006b5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b5e:	687b      	ldr	r3, [r7, #4]
 8006b60:	2200      	movs	r2, #0
 8006b62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b64:	687b      	ldr	r3, [r7, #4]
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	330c      	adds	r3, #12
 8006b6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006b6e:	e853 3f00 	ldrex	r3, [r3]
 8006b72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006b74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006b76:	f023 0310 	bic.w	r3, r3, #16
 8006b7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b7e:	687b      	ldr	r3, [r7, #4]
 8006b80:	681b      	ldr	r3, [r3, #0]
 8006b82:	330c      	adds	r3, #12
 8006b84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006b88:	65ba      	str	r2, [r7, #88]	; 0x58
 8006b8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006b8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006b90:	e841 2300 	strex	r3, r2, [r1]
 8006b94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006b96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d1e3      	bne.n	8006b64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ba0:	4618      	mov	r0, r3
 8006ba2:	f7fc fb58 	bl	8003256 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bae:	b29b      	uxth	r3, r3
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	b29b      	uxth	r3, r3
 8006bb4:	4619      	mov	r1, r3
 8006bb6:	6878      	ldr	r0, [r7, #4]
 8006bb8:	f000 f8b6 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006bbc:	e099      	b.n	8006cf2 <HAL_UART_IRQHandler+0x50e>
 8006bbe:	bf00      	nop
 8006bc0:	08006f5f 	.word	0x08006f5f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006bc8:	687b      	ldr	r3, [r7, #4]
 8006bca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bcc:	b29b      	uxth	r3, r3
 8006bce:	1ad3      	subs	r3, r2, r3
 8006bd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006bd8:	b29b      	uxth	r3, r3
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	f000 808b 	beq.w	8006cf6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006be0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006be4:	2b00      	cmp	r3, #0
 8006be6:	f000 8086 	beq.w	8006cf6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	681b      	ldr	r3, [r3, #0]
 8006bee:	330c      	adds	r3, #12
 8006bf0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006bf2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf4:	e853 3f00 	ldrex	r3, [r3]
 8006bf8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006bfc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006c00:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	681b      	ldr	r3, [r3, #0]
 8006c08:	330c      	adds	r3, #12
 8006c0a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006c0e:	647a      	str	r2, [r7, #68]	; 0x44
 8006c10:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c12:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006c14:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006c16:	e841 2300 	strex	r3, r2, [r1]
 8006c1a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006c1c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d1e3      	bne.n	8006bea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	681b      	ldr	r3, [r3, #0]
 8006c26:	3314      	adds	r3, #20
 8006c28:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006c2c:	e853 3f00 	ldrex	r3, [r3]
 8006c30:	623b      	str	r3, [r7, #32]
   return(result);
 8006c32:	6a3b      	ldr	r3, [r7, #32]
 8006c34:	f023 0301 	bic.w	r3, r3, #1
 8006c38:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	3314      	adds	r3, #20
 8006c42:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006c46:	633a      	str	r2, [r7, #48]	; 0x30
 8006c48:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c4a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006c4c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006c4e:	e841 2300 	strex	r3, r2, [r1]
 8006c52:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006c54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c56:	2b00      	cmp	r3, #0
 8006c58:	d1e3      	bne.n	8006c22 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2220      	movs	r2, #32
 8006c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	2200      	movs	r2, #0
 8006c66:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	330c      	adds	r3, #12
 8006c6e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c70:	693b      	ldr	r3, [r7, #16]
 8006c72:	e853 3f00 	ldrex	r3, [r3]
 8006c76:	60fb      	str	r3, [r7, #12]
   return(result);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f023 0310 	bic.w	r3, r3, #16
 8006c7e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	681b      	ldr	r3, [r3, #0]
 8006c86:	330c      	adds	r3, #12
 8006c88:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006c8c:	61fa      	str	r2, [r7, #28]
 8006c8e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c90:	69b9      	ldr	r1, [r7, #24]
 8006c92:	69fa      	ldr	r2, [r7, #28]
 8006c94:	e841 2300 	strex	r3, r2, [r1]
 8006c98:	617b      	str	r3, [r7, #20]
   return(result);
 8006c9a:	697b      	ldr	r3, [r7, #20]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d1e3      	bne.n	8006c68 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006ca0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006ca4:	4619      	mov	r1, r3
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f83e 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006cac:	e023      	b.n	8006cf6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006cae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cb6:	2b00      	cmp	r3, #0
 8006cb8:	d009      	beq.n	8006cce <HAL_UART_IRQHandler+0x4ea>
 8006cba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cbe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006cc2:	2b00      	cmp	r3, #0
 8006cc4:	d003      	beq.n	8006cce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006cc6:	6878      	ldr	r0, [r7, #4]
 8006cc8:	f000 f95d 	bl	8006f86 <UART_Transmit_IT>
    return;
 8006ccc:	e014      	b.n	8006cf8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006cce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cd2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006cd6:	2b00      	cmp	r3, #0
 8006cd8:	d00e      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x514>
 8006cda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b00      	cmp	r3, #0
 8006ce4:	d008      	beq.n	8006cf8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006ce6:	6878      	ldr	r0, [r7, #4]
 8006ce8:	f000 f99d 	bl	8007026 <UART_EndTransmit_IT>
    return;
 8006cec:	e004      	b.n	8006cf8 <HAL_UART_IRQHandler+0x514>
    return;
 8006cee:	bf00      	nop
 8006cf0:	e002      	b.n	8006cf8 <HAL_UART_IRQHandler+0x514>
      return;
 8006cf2:	bf00      	nop
 8006cf4:	e000      	b.n	8006cf8 <HAL_UART_IRQHandler+0x514>
      return;
 8006cf6:	bf00      	nop
  }
}
 8006cf8:	37e8      	adds	r7, #232	; 0xe8
 8006cfa:	46bd      	mov	sp, r7
 8006cfc:	bd80      	pop	{r7, pc}
 8006cfe:	bf00      	nop

08006d00 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006d00:	b480      	push	{r7}
 8006d02:	b083      	sub	sp, #12
 8006d04:	af00      	add	r7, sp, #0
 8006d06:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006d08:	bf00      	nop
 8006d0a:	370c      	adds	r7, #12
 8006d0c:	46bd      	mov	sp, r7
 8006d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d12:	4770      	bx	lr

08006d14 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006d14:	b480      	push	{r7}
 8006d16:	b083      	sub	sp, #12
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006d1c:	bf00      	nop
 8006d1e:	370c      	adds	r7, #12
 8006d20:	46bd      	mov	sp, r7
 8006d22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d26:	4770      	bx	lr

08006d28 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006d28:	b480      	push	{r7}
 8006d2a:	b083      	sub	sp, #12
 8006d2c:	af00      	add	r7, sp, #0
 8006d2e:	6078      	str	r0, [r7, #4]
 8006d30:	460b      	mov	r3, r1
 8006d32:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006d34:	bf00      	nop
 8006d36:	370c      	adds	r7, #12
 8006d38:	46bd      	mov	sp, r7
 8006d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d3e:	4770      	bx	lr

08006d40 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006d40:	b580      	push	{r7, lr}
 8006d42:	b090      	sub	sp, #64	; 0x40
 8006d44:	af00      	add	r7, sp, #0
 8006d46:	60f8      	str	r0, [r7, #12]
 8006d48:	60b9      	str	r1, [r7, #8]
 8006d4a:	603b      	str	r3, [r7, #0]
 8006d4c:	4613      	mov	r3, r2
 8006d4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d50:	e050      	b.n	8006df4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006d52:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8006d58:	d04c      	beq.n	8006df4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006d5a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d007      	beq.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x30>
 8006d60:	f7fb fd8a 	bl	8002878 <HAL_GetTick>
 8006d64:	4602      	mov	r2, r0
 8006d66:	683b      	ldr	r3, [r7, #0]
 8006d68:	1ad3      	subs	r3, r2, r3
 8006d6a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006d6c:	429a      	cmp	r2, r3
 8006d6e:	d241      	bcs.n	8006df4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	681b      	ldr	r3, [r3, #0]
 8006d74:	330c      	adds	r3, #12
 8006d76:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d7a:	e853 3f00 	ldrex	r3, [r3]
 8006d7e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006d80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006d82:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006d86:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	330c      	adds	r3, #12
 8006d8e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006d90:	637a      	str	r2, [r7, #52]	; 0x34
 8006d92:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d94:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006d96:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006d98:	e841 2300 	strex	r3, r2, [r1]
 8006d9c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d1e5      	bne.n	8006d70 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	3314      	adds	r3, #20
 8006daa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	e853 3f00 	ldrex	r3, [r3]
 8006db2:	613b      	str	r3, [r7, #16]
   return(result);
 8006db4:	693b      	ldr	r3, [r7, #16]
 8006db6:	f023 0301 	bic.w	r3, r3, #1
 8006dba:	63bb      	str	r3, [r7, #56]	; 0x38
 8006dbc:	68fb      	ldr	r3, [r7, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	3314      	adds	r3, #20
 8006dc2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006dc4:	623a      	str	r2, [r7, #32]
 8006dc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dc8:	69f9      	ldr	r1, [r7, #28]
 8006dca:	6a3a      	ldr	r2, [r7, #32]
 8006dcc:	e841 2300 	strex	r3, r2, [r1]
 8006dd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8006dd2:	69bb      	ldr	r3, [r7, #24]
 8006dd4:	2b00      	cmp	r3, #0
 8006dd6:	d1e5      	bne.n	8006da4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	2220      	movs	r2, #32
 8006ddc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006de0:	68fb      	ldr	r3, [r7, #12]
 8006de2:	2220      	movs	r2, #32
 8006de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006de8:	68fb      	ldr	r3, [r7, #12]
 8006dea:	2200      	movs	r2, #0
 8006dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006df0:	2303      	movs	r3, #3
 8006df2:	e00f      	b.n	8006e14 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006df4:	68fb      	ldr	r3, [r7, #12]
 8006df6:	681b      	ldr	r3, [r3, #0]
 8006df8:	681a      	ldr	r2, [r3, #0]
 8006dfa:	68bb      	ldr	r3, [r7, #8]
 8006dfc:	4013      	ands	r3, r2
 8006dfe:	68ba      	ldr	r2, [r7, #8]
 8006e00:	429a      	cmp	r2, r3
 8006e02:	bf0c      	ite	eq
 8006e04:	2301      	moveq	r3, #1
 8006e06:	2300      	movne	r3, #0
 8006e08:	b2db      	uxtb	r3, r3
 8006e0a:	461a      	mov	r2, r3
 8006e0c:	79fb      	ldrb	r3, [r7, #7]
 8006e0e:	429a      	cmp	r2, r3
 8006e10:	d09f      	beq.n	8006d52 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006e12:	2300      	movs	r3, #0
}
 8006e14:	4618      	mov	r0, r3
 8006e16:	3740      	adds	r7, #64	; 0x40
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	bd80      	pop	{r7, pc}

08006e1c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006e1c:	b480      	push	{r7}
 8006e1e:	b085      	sub	sp, #20
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	4613      	mov	r3, r2
 8006e28:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	68ba      	ldr	r2, [r7, #8]
 8006e2e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	88fa      	ldrh	r2, [r7, #6]
 8006e34:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	88fa      	ldrh	r2, [r7, #6]
 8006e3a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	2200      	movs	r2, #0
 8006e40:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	2222      	movs	r2, #34	; 0x22
 8006e46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006e4a:	68fb      	ldr	r3, [r7, #12]
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	691b      	ldr	r3, [r3, #16]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d007      	beq.n	8006e6a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	68da      	ldr	r2, [r3, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	681b      	ldr	r3, [r3, #0]
 8006e64:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006e68:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	681b      	ldr	r3, [r3, #0]
 8006e6e:	695a      	ldr	r2, [r3, #20]
 8006e70:	68fb      	ldr	r3, [r7, #12]
 8006e72:	681b      	ldr	r3, [r3, #0]
 8006e74:	f042 0201 	orr.w	r2, r2, #1
 8006e78:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006e7a:	68fb      	ldr	r3, [r7, #12]
 8006e7c:	681b      	ldr	r3, [r3, #0]
 8006e7e:	68da      	ldr	r2, [r3, #12]
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	681b      	ldr	r3, [r3, #0]
 8006e84:	f042 0220 	orr.w	r2, r2, #32
 8006e88:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006e8a:	2300      	movs	r3, #0
}
 8006e8c:	4618      	mov	r0, r3
 8006e8e:	3714      	adds	r7, #20
 8006e90:	46bd      	mov	sp, r7
 8006e92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e96:	4770      	bx	lr

08006e98 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006e98:	b480      	push	{r7}
 8006e9a:	b095      	sub	sp, #84	; 0x54
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	330c      	adds	r3, #12
 8006ea6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ea8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006eaa:	e853 3f00 	ldrex	r3, [r3]
 8006eae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006eb0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006eb2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006eb6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	681b      	ldr	r3, [r3, #0]
 8006ebc:	330c      	adds	r3, #12
 8006ebe:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006ec0:	643a      	str	r2, [r7, #64]	; 0x40
 8006ec2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ec4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006ec6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006ec8:	e841 2300 	strex	r3, r2, [r1]
 8006ecc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006ece:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ed0:	2b00      	cmp	r3, #0
 8006ed2:	d1e5      	bne.n	8006ea0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006ed4:	687b      	ldr	r3, [r7, #4]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	3314      	adds	r3, #20
 8006eda:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006edc:	6a3b      	ldr	r3, [r7, #32]
 8006ede:	e853 3f00 	ldrex	r3, [r3]
 8006ee2:	61fb      	str	r3, [r7, #28]
   return(result);
 8006ee4:	69fb      	ldr	r3, [r7, #28]
 8006ee6:	f023 0301 	bic.w	r3, r3, #1
 8006eea:	64bb      	str	r3, [r7, #72]	; 0x48
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	3314      	adds	r3, #20
 8006ef2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ef4:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006ef6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ef8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006efa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006efc:	e841 2300 	strex	r3, r2, [r1]
 8006f00:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006f04:	2b00      	cmp	r3, #0
 8006f06:	d1e5      	bne.n	8006ed4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006f08:	687b      	ldr	r3, [r7, #4]
 8006f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0c:	2b01      	cmp	r3, #1
 8006f0e:	d119      	bne.n	8006f44 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006f10:	687b      	ldr	r3, [r7, #4]
 8006f12:	681b      	ldr	r3, [r3, #0]
 8006f14:	330c      	adds	r3, #12
 8006f16:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	e853 3f00 	ldrex	r3, [r3]
 8006f1e:	60bb      	str	r3, [r7, #8]
   return(result);
 8006f20:	68bb      	ldr	r3, [r7, #8]
 8006f22:	f023 0310 	bic.w	r3, r3, #16
 8006f26:	647b      	str	r3, [r7, #68]	; 0x44
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	330c      	adds	r3, #12
 8006f2e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006f30:	61ba      	str	r2, [r7, #24]
 8006f32:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f34:	6979      	ldr	r1, [r7, #20]
 8006f36:	69ba      	ldr	r2, [r7, #24]
 8006f38:	e841 2300 	strex	r3, r2, [r1]
 8006f3c:	613b      	str	r3, [r7, #16]
   return(result);
 8006f3e:	693b      	ldr	r3, [r7, #16]
 8006f40:	2b00      	cmp	r3, #0
 8006f42:	d1e5      	bne.n	8006f10 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	2220      	movs	r2, #32
 8006f48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	2200      	movs	r2, #0
 8006f50:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006f52:	bf00      	nop
 8006f54:	3754      	adds	r7, #84	; 0x54
 8006f56:	46bd      	mov	sp, r7
 8006f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f5c:	4770      	bx	lr

08006f5e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006f5e:	b580      	push	{r7, lr}
 8006f60:	b084      	sub	sp, #16
 8006f62:	af00      	add	r7, sp, #0
 8006f64:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006f66:	687b      	ldr	r3, [r7, #4]
 8006f68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f6a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	2200      	movs	r2, #0
 8006f70:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006f72:	68fb      	ldr	r3, [r7, #12]
 8006f74:	2200      	movs	r2, #0
 8006f76:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006f78:	68f8      	ldr	r0, [r7, #12]
 8006f7a:	f7ff fecb 	bl	8006d14 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006f7e:	bf00      	nop
 8006f80:	3710      	adds	r7, #16
 8006f82:	46bd      	mov	sp, r7
 8006f84:	bd80      	pop	{r7, pc}

08006f86 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006f86:	b480      	push	{r7}
 8006f88:	b085      	sub	sp, #20
 8006f8a:	af00      	add	r7, sp, #0
 8006f8c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006f8e:	687b      	ldr	r3, [r7, #4]
 8006f90:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006f94:	b2db      	uxtb	r3, r3
 8006f96:	2b21      	cmp	r3, #33	; 0x21
 8006f98:	d13e      	bne.n	8007018 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006f9a:	687b      	ldr	r3, [r7, #4]
 8006f9c:	689b      	ldr	r3, [r3, #8]
 8006f9e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa2:	d114      	bne.n	8006fce <UART_Transmit_IT+0x48>
 8006fa4:	687b      	ldr	r3, [r7, #4]
 8006fa6:	691b      	ldr	r3, [r3, #16]
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d110      	bne.n	8006fce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	6a1b      	ldr	r3, [r3, #32]
 8006fb0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006fb2:	68fb      	ldr	r3, [r7, #12]
 8006fb4:	881b      	ldrh	r3, [r3, #0]
 8006fb6:	461a      	mov	r2, r3
 8006fb8:	687b      	ldr	r3, [r7, #4]
 8006fba:	681b      	ldr	r3, [r3, #0]
 8006fbc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006fc0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	6a1b      	ldr	r3, [r3, #32]
 8006fc6:	1c9a      	adds	r2, r3, #2
 8006fc8:	687b      	ldr	r3, [r7, #4]
 8006fca:	621a      	str	r2, [r3, #32]
 8006fcc:	e008      	b.n	8006fe0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a1b      	ldr	r3, [r3, #32]
 8006fd2:	1c59      	adds	r1, r3, #1
 8006fd4:	687a      	ldr	r2, [r7, #4]
 8006fd6:	6211      	str	r1, [r2, #32]
 8006fd8:	781a      	ldrb	r2, [r3, #0]
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006fe4:	b29b      	uxth	r3, r3
 8006fe6:	3b01      	subs	r3, #1
 8006fe8:	b29b      	uxth	r3, r3
 8006fea:	687a      	ldr	r2, [r7, #4]
 8006fec:	4619      	mov	r1, r3
 8006fee:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006ff0:	2b00      	cmp	r3, #0
 8006ff2:	d10f      	bne.n	8007014 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	68da      	ldr	r2, [r3, #12]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007002:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007004:	687b      	ldr	r3, [r7, #4]
 8007006:	681b      	ldr	r3, [r3, #0]
 8007008:	68da      	ldr	r2, [r3, #12]
 800700a:	687b      	ldr	r3, [r7, #4]
 800700c:	681b      	ldr	r3, [r3, #0]
 800700e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007012:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8007014:	2300      	movs	r3, #0
 8007016:	e000      	b.n	800701a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8007018:	2302      	movs	r3, #2
  }
}
 800701a:	4618      	mov	r0, r3
 800701c:	3714      	adds	r7, #20
 800701e:	46bd      	mov	sp, r7
 8007020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007024:	4770      	bx	lr

08007026 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8007026:	b580      	push	{r7, lr}
 8007028:	b082      	sub	sp, #8
 800702a:	af00      	add	r7, sp, #0
 800702c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800702e:	687b      	ldr	r3, [r7, #4]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	68da      	ldr	r2, [r3, #12]
 8007034:	687b      	ldr	r3, [r7, #4]
 8007036:	681b      	ldr	r3, [r3, #0]
 8007038:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800703c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800703e:	687b      	ldr	r3, [r7, #4]
 8007040:	2220      	movs	r2, #32
 8007042:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8007046:	6878      	ldr	r0, [r7, #4]
 8007048:	f7ff fe5a 	bl	8006d00 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800704c:	2300      	movs	r3, #0
}
 800704e:	4618      	mov	r0, r3
 8007050:	3708      	adds	r7, #8
 8007052:	46bd      	mov	sp, r7
 8007054:	bd80      	pop	{r7, pc}

08007056 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8007056:	b580      	push	{r7, lr}
 8007058:	b08c      	sub	sp, #48	; 0x30
 800705a:	af00      	add	r7, sp, #0
 800705c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800705e:	687b      	ldr	r3, [r7, #4]
 8007060:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007064:	b2db      	uxtb	r3, r3
 8007066:	2b22      	cmp	r3, #34	; 0x22
 8007068:	f040 80ab 	bne.w	80071c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	689b      	ldr	r3, [r3, #8]
 8007070:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007074:	d117      	bne.n	80070a6 <UART_Receive_IT+0x50>
 8007076:	687b      	ldr	r3, [r7, #4]
 8007078:	691b      	ldr	r3, [r3, #16]
 800707a:	2b00      	cmp	r3, #0
 800707c:	d113      	bne.n	80070a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800707e:	2300      	movs	r3, #0
 8007080:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007086:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	685b      	ldr	r3, [r3, #4]
 800708e:	b29b      	uxth	r3, r3
 8007090:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007094:	b29a      	uxth	r2, r3
 8007096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007098:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800709e:	1c9a      	adds	r2, r3, #2
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	629a      	str	r2, [r3, #40]	; 0x28
 80070a4:	e026      	b.n	80070f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80070a6:	687b      	ldr	r3, [r7, #4]
 80070a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80070ac:	2300      	movs	r3, #0
 80070ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	689b      	ldr	r3, [r3, #8]
 80070b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80070b8:	d007      	beq.n	80070ca <UART_Receive_IT+0x74>
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	689b      	ldr	r3, [r3, #8]
 80070be:	2b00      	cmp	r3, #0
 80070c0:	d10a      	bne.n	80070d8 <UART_Receive_IT+0x82>
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	691b      	ldr	r3, [r3, #16]
 80070c6:	2b00      	cmp	r3, #0
 80070c8:	d106      	bne.n	80070d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	685b      	ldr	r3, [r3, #4]
 80070d0:	b2da      	uxtb	r2, r3
 80070d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070d4:	701a      	strb	r2, [r3, #0]
 80070d6:	e008      	b.n	80070ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	685b      	ldr	r3, [r3, #4]
 80070de:	b2db      	uxtb	r3, r3
 80070e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80070e4:	b2da      	uxtb	r2, r3
 80070e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80070ee:	1c5a      	adds	r2, r3, #1
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80070f4:	687b      	ldr	r3, [r7, #4]
 80070f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80070f8:	b29b      	uxth	r3, r3
 80070fa:	3b01      	subs	r3, #1
 80070fc:	b29b      	uxth	r3, r3
 80070fe:	687a      	ldr	r2, [r7, #4]
 8007100:	4619      	mov	r1, r3
 8007102:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007104:	2b00      	cmp	r3, #0
 8007106:	d15a      	bne.n	80071be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007108:	687b      	ldr	r3, [r7, #4]
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	68da      	ldr	r2, [r3, #12]
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	f022 0220 	bic.w	r2, r2, #32
 8007116:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007126:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	695a      	ldr	r2, [r3, #20]
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	681b      	ldr	r3, [r3, #0]
 8007132:	f022 0201 	bic.w	r2, r2, #1
 8007136:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2220      	movs	r2, #32
 800713c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007144:	2b01      	cmp	r3, #1
 8007146:	d135      	bne.n	80071b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	2200      	movs	r2, #0
 800714c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	330c      	adds	r3, #12
 8007154:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007156:	697b      	ldr	r3, [r7, #20]
 8007158:	e853 3f00 	ldrex	r3, [r3]
 800715c:	613b      	str	r3, [r7, #16]
   return(result);
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	f023 0310 	bic.w	r3, r3, #16
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	330c      	adds	r3, #12
 800716c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800716e:	623a      	str	r2, [r7, #32]
 8007170:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007172:	69f9      	ldr	r1, [r7, #28]
 8007174:	6a3a      	ldr	r2, [r7, #32]
 8007176:	e841 2300 	strex	r3, r2, [r1]
 800717a:	61bb      	str	r3, [r7, #24]
   return(result);
 800717c:	69bb      	ldr	r3, [r7, #24]
 800717e:	2b00      	cmp	r3, #0
 8007180:	d1e5      	bne.n	800714e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f003 0310 	and.w	r3, r3, #16
 800718c:	2b10      	cmp	r3, #16
 800718e:	d10a      	bne.n	80071a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007190:	2300      	movs	r3, #0
 8007192:	60fb      	str	r3, [r7, #12]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	60fb      	str	r3, [r7, #12]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	685b      	ldr	r3, [r3, #4]
 80071a2:	60fb      	str	r3, [r7, #12]
 80071a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80071aa:	4619      	mov	r1, r3
 80071ac:	6878      	ldr	r0, [r7, #4]
 80071ae:	f7ff fdbb 	bl	8006d28 <HAL_UARTEx_RxEventCallback>
 80071b2:	e002      	b.n	80071ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f7fa fa2f 	bl	8001618 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80071ba:	2300      	movs	r3, #0
 80071bc:	e002      	b.n	80071c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80071be:	2300      	movs	r3, #0
 80071c0:	e000      	b.n	80071c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80071c2:	2302      	movs	r3, #2
  }
}
 80071c4:	4618      	mov	r0, r3
 80071c6:	3730      	adds	r7, #48	; 0x30
 80071c8:	46bd      	mov	sp, r7
 80071ca:	bd80      	pop	{r7, pc}

080071cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80071cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80071d0:	b0c0      	sub	sp, #256	; 0x100
 80071d2:	af00      	add	r7, sp, #0
 80071d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80071d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	691b      	ldr	r3, [r3, #16]
 80071e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80071e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071e8:	68d9      	ldr	r1, [r3, #12]
 80071ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071ee:	681a      	ldr	r2, [r3, #0]
 80071f0:	ea40 0301 	orr.w	r3, r0, r1
 80071f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80071f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071fa:	689a      	ldr	r2, [r3, #8]
 80071fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007200:	691b      	ldr	r3, [r3, #16]
 8007202:	431a      	orrs	r2, r3
 8007204:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007208:	695b      	ldr	r3, [r3, #20]
 800720a:	431a      	orrs	r2, r3
 800720c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007210:	69db      	ldr	r3, [r3, #28]
 8007212:	4313      	orrs	r3, r2
 8007214:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007218:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721c:	681b      	ldr	r3, [r3, #0]
 800721e:	68db      	ldr	r3, [r3, #12]
 8007220:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007224:	f021 010c 	bic.w	r1, r1, #12
 8007228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800722c:	681a      	ldr	r2, [r3, #0]
 800722e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007232:	430b      	orrs	r3, r1
 8007234:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007236:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	695b      	ldr	r3, [r3, #20]
 800723e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007242:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007246:	6999      	ldr	r1, [r3, #24]
 8007248:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800724c:	681a      	ldr	r2, [r3, #0]
 800724e:	ea40 0301 	orr.w	r3, r0, r1
 8007252:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007254:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007258:	681a      	ldr	r2, [r3, #0]
 800725a:	4b8f      	ldr	r3, [pc, #572]	; (8007498 <UART_SetConfig+0x2cc>)
 800725c:	429a      	cmp	r2, r3
 800725e:	d005      	beq.n	800726c <UART_SetConfig+0xa0>
 8007260:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007264:	681a      	ldr	r2, [r3, #0]
 8007266:	4b8d      	ldr	r3, [pc, #564]	; (800749c <UART_SetConfig+0x2d0>)
 8007268:	429a      	cmp	r2, r3
 800726a:	d104      	bne.n	8007276 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800726c:	f7fd fb0c 	bl	8004888 <HAL_RCC_GetPCLK2Freq>
 8007270:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007274:	e003      	b.n	800727e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007276:	f7fd faf3 	bl	8004860 <HAL_RCC_GetPCLK1Freq>
 800727a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800727e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007282:	69db      	ldr	r3, [r3, #28]
 8007284:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007288:	f040 810c 	bne.w	80074a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800728c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007290:	2200      	movs	r2, #0
 8007292:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007296:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800729a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800729e:	4622      	mov	r2, r4
 80072a0:	462b      	mov	r3, r5
 80072a2:	1891      	adds	r1, r2, r2
 80072a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80072a6:	415b      	adcs	r3, r3
 80072a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80072aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80072ae:	4621      	mov	r1, r4
 80072b0:	eb12 0801 	adds.w	r8, r2, r1
 80072b4:	4629      	mov	r1, r5
 80072b6:	eb43 0901 	adc.w	r9, r3, r1
 80072ba:	f04f 0200 	mov.w	r2, #0
 80072be:	f04f 0300 	mov.w	r3, #0
 80072c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80072c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80072ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80072ce:	4690      	mov	r8, r2
 80072d0:	4699      	mov	r9, r3
 80072d2:	4623      	mov	r3, r4
 80072d4:	eb18 0303 	adds.w	r3, r8, r3
 80072d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80072dc:	462b      	mov	r3, r5
 80072de:	eb49 0303 	adc.w	r3, r9, r3
 80072e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80072e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072ea:	685b      	ldr	r3, [r3, #4]
 80072ec:	2200      	movs	r2, #0
 80072ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80072f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80072f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80072fa:	460b      	mov	r3, r1
 80072fc:	18db      	adds	r3, r3, r3
 80072fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007300:	4613      	mov	r3, r2
 8007302:	eb42 0303 	adc.w	r3, r2, r3
 8007306:	657b      	str	r3, [r7, #84]	; 0x54
 8007308:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800730c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007310:	f7f8 ff72 	bl	80001f8 <__aeabi_uldivmod>
 8007314:	4602      	mov	r2, r0
 8007316:	460b      	mov	r3, r1
 8007318:	4b61      	ldr	r3, [pc, #388]	; (80074a0 <UART_SetConfig+0x2d4>)
 800731a:	fba3 2302 	umull	r2, r3, r3, r2
 800731e:	095b      	lsrs	r3, r3, #5
 8007320:	011c      	lsls	r4, r3, #4
 8007322:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007326:	2200      	movs	r2, #0
 8007328:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800732c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007330:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007334:	4642      	mov	r2, r8
 8007336:	464b      	mov	r3, r9
 8007338:	1891      	adds	r1, r2, r2
 800733a:	64b9      	str	r1, [r7, #72]	; 0x48
 800733c:	415b      	adcs	r3, r3
 800733e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007340:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007344:	4641      	mov	r1, r8
 8007346:	eb12 0a01 	adds.w	sl, r2, r1
 800734a:	4649      	mov	r1, r9
 800734c:	eb43 0b01 	adc.w	fp, r3, r1
 8007350:	f04f 0200 	mov.w	r2, #0
 8007354:	f04f 0300 	mov.w	r3, #0
 8007358:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800735c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007360:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007364:	4692      	mov	sl, r2
 8007366:	469b      	mov	fp, r3
 8007368:	4643      	mov	r3, r8
 800736a:	eb1a 0303 	adds.w	r3, sl, r3
 800736e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007372:	464b      	mov	r3, r9
 8007374:	eb4b 0303 	adc.w	r3, fp, r3
 8007378:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800737c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007380:	685b      	ldr	r3, [r3, #4]
 8007382:	2200      	movs	r2, #0
 8007384:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007388:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800738c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8007390:	460b      	mov	r3, r1
 8007392:	18db      	adds	r3, r3, r3
 8007394:	643b      	str	r3, [r7, #64]	; 0x40
 8007396:	4613      	mov	r3, r2
 8007398:	eb42 0303 	adc.w	r3, r2, r3
 800739c:	647b      	str	r3, [r7, #68]	; 0x44
 800739e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80073a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80073a6:	f7f8 ff27 	bl	80001f8 <__aeabi_uldivmod>
 80073aa:	4602      	mov	r2, r0
 80073ac:	460b      	mov	r3, r1
 80073ae:	4611      	mov	r1, r2
 80073b0:	4b3b      	ldr	r3, [pc, #236]	; (80074a0 <UART_SetConfig+0x2d4>)
 80073b2:	fba3 2301 	umull	r2, r3, r3, r1
 80073b6:	095b      	lsrs	r3, r3, #5
 80073b8:	2264      	movs	r2, #100	; 0x64
 80073ba:	fb02 f303 	mul.w	r3, r2, r3
 80073be:	1acb      	subs	r3, r1, r3
 80073c0:	00db      	lsls	r3, r3, #3
 80073c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80073c6:	4b36      	ldr	r3, [pc, #216]	; (80074a0 <UART_SetConfig+0x2d4>)
 80073c8:	fba3 2302 	umull	r2, r3, r3, r2
 80073cc:	095b      	lsrs	r3, r3, #5
 80073ce:	005b      	lsls	r3, r3, #1
 80073d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80073d4:	441c      	add	r4, r3
 80073d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073da:	2200      	movs	r2, #0
 80073dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80073e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80073e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80073e8:	4642      	mov	r2, r8
 80073ea:	464b      	mov	r3, r9
 80073ec:	1891      	adds	r1, r2, r2
 80073ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80073f0:	415b      	adcs	r3, r3
 80073f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80073f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80073f8:	4641      	mov	r1, r8
 80073fa:	1851      	adds	r1, r2, r1
 80073fc:	6339      	str	r1, [r7, #48]	; 0x30
 80073fe:	4649      	mov	r1, r9
 8007400:	414b      	adcs	r3, r1
 8007402:	637b      	str	r3, [r7, #52]	; 0x34
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	f04f 0300 	mov.w	r3, #0
 800740c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007410:	4659      	mov	r1, fp
 8007412:	00cb      	lsls	r3, r1, #3
 8007414:	4651      	mov	r1, sl
 8007416:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800741a:	4651      	mov	r1, sl
 800741c:	00ca      	lsls	r2, r1, #3
 800741e:	4610      	mov	r0, r2
 8007420:	4619      	mov	r1, r3
 8007422:	4603      	mov	r3, r0
 8007424:	4642      	mov	r2, r8
 8007426:	189b      	adds	r3, r3, r2
 8007428:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800742c:	464b      	mov	r3, r9
 800742e:	460a      	mov	r2, r1
 8007430:	eb42 0303 	adc.w	r3, r2, r3
 8007434:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007438:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	2200      	movs	r2, #0
 8007440:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007444:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007448:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800744c:	460b      	mov	r3, r1
 800744e:	18db      	adds	r3, r3, r3
 8007450:	62bb      	str	r3, [r7, #40]	; 0x28
 8007452:	4613      	mov	r3, r2
 8007454:	eb42 0303 	adc.w	r3, r2, r3
 8007458:	62fb      	str	r3, [r7, #44]	; 0x2c
 800745a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800745e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007462:	f7f8 fec9 	bl	80001f8 <__aeabi_uldivmod>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4b0d      	ldr	r3, [pc, #52]	; (80074a0 <UART_SetConfig+0x2d4>)
 800746c:	fba3 1302 	umull	r1, r3, r3, r2
 8007470:	095b      	lsrs	r3, r3, #5
 8007472:	2164      	movs	r1, #100	; 0x64
 8007474:	fb01 f303 	mul.w	r3, r1, r3
 8007478:	1ad3      	subs	r3, r2, r3
 800747a:	00db      	lsls	r3, r3, #3
 800747c:	3332      	adds	r3, #50	; 0x32
 800747e:	4a08      	ldr	r2, [pc, #32]	; (80074a0 <UART_SetConfig+0x2d4>)
 8007480:	fba2 2303 	umull	r2, r3, r2, r3
 8007484:	095b      	lsrs	r3, r3, #5
 8007486:	f003 0207 	and.w	r2, r3, #7
 800748a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748e:	681b      	ldr	r3, [r3, #0]
 8007490:	4422      	add	r2, r4
 8007492:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007494:	e105      	b.n	80076a2 <UART_SetConfig+0x4d6>
 8007496:	bf00      	nop
 8007498:	40011000 	.word	0x40011000
 800749c:	40011400 	.word	0x40011400
 80074a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80074a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80074a8:	2200      	movs	r2, #0
 80074aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80074ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80074b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80074b6:	4642      	mov	r2, r8
 80074b8:	464b      	mov	r3, r9
 80074ba:	1891      	adds	r1, r2, r2
 80074bc:	6239      	str	r1, [r7, #32]
 80074be:	415b      	adcs	r3, r3
 80074c0:	627b      	str	r3, [r7, #36]	; 0x24
 80074c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80074c6:	4641      	mov	r1, r8
 80074c8:	1854      	adds	r4, r2, r1
 80074ca:	4649      	mov	r1, r9
 80074cc:	eb43 0501 	adc.w	r5, r3, r1
 80074d0:	f04f 0200 	mov.w	r2, #0
 80074d4:	f04f 0300 	mov.w	r3, #0
 80074d8:	00eb      	lsls	r3, r5, #3
 80074da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80074de:	00e2      	lsls	r2, r4, #3
 80074e0:	4614      	mov	r4, r2
 80074e2:	461d      	mov	r5, r3
 80074e4:	4643      	mov	r3, r8
 80074e6:	18e3      	adds	r3, r4, r3
 80074e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80074ec:	464b      	mov	r3, r9
 80074ee:	eb45 0303 	adc.w	r3, r5, r3
 80074f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80074f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074fa:	685b      	ldr	r3, [r3, #4]
 80074fc:	2200      	movs	r2, #0
 80074fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007502:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007506:	f04f 0200 	mov.w	r2, #0
 800750a:	f04f 0300 	mov.w	r3, #0
 800750e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007512:	4629      	mov	r1, r5
 8007514:	008b      	lsls	r3, r1, #2
 8007516:	4621      	mov	r1, r4
 8007518:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800751c:	4621      	mov	r1, r4
 800751e:	008a      	lsls	r2, r1, #2
 8007520:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007524:	f7f8 fe68 	bl	80001f8 <__aeabi_uldivmod>
 8007528:	4602      	mov	r2, r0
 800752a:	460b      	mov	r3, r1
 800752c:	4b60      	ldr	r3, [pc, #384]	; (80076b0 <UART_SetConfig+0x4e4>)
 800752e:	fba3 2302 	umull	r2, r3, r3, r2
 8007532:	095b      	lsrs	r3, r3, #5
 8007534:	011c      	lsls	r4, r3, #4
 8007536:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800753a:	2200      	movs	r2, #0
 800753c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007540:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007544:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007548:	4642      	mov	r2, r8
 800754a:	464b      	mov	r3, r9
 800754c:	1891      	adds	r1, r2, r2
 800754e:	61b9      	str	r1, [r7, #24]
 8007550:	415b      	adcs	r3, r3
 8007552:	61fb      	str	r3, [r7, #28]
 8007554:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007558:	4641      	mov	r1, r8
 800755a:	1851      	adds	r1, r2, r1
 800755c:	6139      	str	r1, [r7, #16]
 800755e:	4649      	mov	r1, r9
 8007560:	414b      	adcs	r3, r1
 8007562:	617b      	str	r3, [r7, #20]
 8007564:	f04f 0200 	mov.w	r2, #0
 8007568:	f04f 0300 	mov.w	r3, #0
 800756c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8007570:	4659      	mov	r1, fp
 8007572:	00cb      	lsls	r3, r1, #3
 8007574:	4651      	mov	r1, sl
 8007576:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800757a:	4651      	mov	r1, sl
 800757c:	00ca      	lsls	r2, r1, #3
 800757e:	4610      	mov	r0, r2
 8007580:	4619      	mov	r1, r3
 8007582:	4603      	mov	r3, r0
 8007584:	4642      	mov	r2, r8
 8007586:	189b      	adds	r3, r3, r2
 8007588:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800758c:	464b      	mov	r3, r9
 800758e:	460a      	mov	r2, r1
 8007590:	eb42 0303 	adc.w	r3, r2, r3
 8007594:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007598:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800759c:	685b      	ldr	r3, [r3, #4]
 800759e:	2200      	movs	r2, #0
 80075a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80075a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80075a4:	f04f 0200 	mov.w	r2, #0
 80075a8:	f04f 0300 	mov.w	r3, #0
 80075ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80075b0:	4649      	mov	r1, r9
 80075b2:	008b      	lsls	r3, r1, #2
 80075b4:	4641      	mov	r1, r8
 80075b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80075ba:	4641      	mov	r1, r8
 80075bc:	008a      	lsls	r2, r1, #2
 80075be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80075c2:	f7f8 fe19 	bl	80001f8 <__aeabi_uldivmod>
 80075c6:	4602      	mov	r2, r0
 80075c8:	460b      	mov	r3, r1
 80075ca:	4b39      	ldr	r3, [pc, #228]	; (80076b0 <UART_SetConfig+0x4e4>)
 80075cc:	fba3 1302 	umull	r1, r3, r3, r2
 80075d0:	095b      	lsrs	r3, r3, #5
 80075d2:	2164      	movs	r1, #100	; 0x64
 80075d4:	fb01 f303 	mul.w	r3, r1, r3
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	011b      	lsls	r3, r3, #4
 80075dc:	3332      	adds	r3, #50	; 0x32
 80075de:	4a34      	ldr	r2, [pc, #208]	; (80076b0 <UART_SetConfig+0x4e4>)
 80075e0:	fba2 2303 	umull	r2, r3, r2, r3
 80075e4:	095b      	lsrs	r3, r3, #5
 80075e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80075ea:	441c      	add	r4, r3
 80075ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075f0:	2200      	movs	r2, #0
 80075f2:	673b      	str	r3, [r7, #112]	; 0x70
 80075f4:	677a      	str	r2, [r7, #116]	; 0x74
 80075f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80075fa:	4642      	mov	r2, r8
 80075fc:	464b      	mov	r3, r9
 80075fe:	1891      	adds	r1, r2, r2
 8007600:	60b9      	str	r1, [r7, #8]
 8007602:	415b      	adcs	r3, r3
 8007604:	60fb      	str	r3, [r7, #12]
 8007606:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800760a:	4641      	mov	r1, r8
 800760c:	1851      	adds	r1, r2, r1
 800760e:	6039      	str	r1, [r7, #0]
 8007610:	4649      	mov	r1, r9
 8007612:	414b      	adcs	r3, r1
 8007614:	607b      	str	r3, [r7, #4]
 8007616:	f04f 0200 	mov.w	r2, #0
 800761a:	f04f 0300 	mov.w	r3, #0
 800761e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007622:	4659      	mov	r1, fp
 8007624:	00cb      	lsls	r3, r1, #3
 8007626:	4651      	mov	r1, sl
 8007628:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800762c:	4651      	mov	r1, sl
 800762e:	00ca      	lsls	r2, r1, #3
 8007630:	4610      	mov	r0, r2
 8007632:	4619      	mov	r1, r3
 8007634:	4603      	mov	r3, r0
 8007636:	4642      	mov	r2, r8
 8007638:	189b      	adds	r3, r3, r2
 800763a:	66bb      	str	r3, [r7, #104]	; 0x68
 800763c:	464b      	mov	r3, r9
 800763e:	460a      	mov	r2, r1
 8007640:	eb42 0303 	adc.w	r3, r2, r3
 8007644:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007646:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800764a:	685b      	ldr	r3, [r3, #4]
 800764c:	2200      	movs	r2, #0
 800764e:	663b      	str	r3, [r7, #96]	; 0x60
 8007650:	667a      	str	r2, [r7, #100]	; 0x64
 8007652:	f04f 0200 	mov.w	r2, #0
 8007656:	f04f 0300 	mov.w	r3, #0
 800765a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800765e:	4649      	mov	r1, r9
 8007660:	008b      	lsls	r3, r1, #2
 8007662:	4641      	mov	r1, r8
 8007664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007668:	4641      	mov	r1, r8
 800766a:	008a      	lsls	r2, r1, #2
 800766c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8007670:	f7f8 fdc2 	bl	80001f8 <__aeabi_uldivmod>
 8007674:	4602      	mov	r2, r0
 8007676:	460b      	mov	r3, r1
 8007678:	4b0d      	ldr	r3, [pc, #52]	; (80076b0 <UART_SetConfig+0x4e4>)
 800767a:	fba3 1302 	umull	r1, r3, r3, r2
 800767e:	095b      	lsrs	r3, r3, #5
 8007680:	2164      	movs	r1, #100	; 0x64
 8007682:	fb01 f303 	mul.w	r3, r1, r3
 8007686:	1ad3      	subs	r3, r2, r3
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	3332      	adds	r3, #50	; 0x32
 800768c:	4a08      	ldr	r2, [pc, #32]	; (80076b0 <UART_SetConfig+0x4e4>)
 800768e:	fba2 2303 	umull	r2, r3, r2, r3
 8007692:	095b      	lsrs	r3, r3, #5
 8007694:	f003 020f 	and.w	r2, r3, #15
 8007698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800769c:	681b      	ldr	r3, [r3, #0]
 800769e:	4422      	add	r2, r4
 80076a0:	609a      	str	r2, [r3, #8]
}
 80076a2:	bf00      	nop
 80076a4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80076a8:	46bd      	mov	sp, r7
 80076aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80076ae:	bf00      	nop
 80076b0:	51eb851f 	.word	0x51eb851f

080076b4 <__libc_init_array>:
 80076b4:	b570      	push	{r4, r5, r6, lr}
 80076b6:	4d0d      	ldr	r5, [pc, #52]	; (80076ec <__libc_init_array+0x38>)
 80076b8:	4c0d      	ldr	r4, [pc, #52]	; (80076f0 <__libc_init_array+0x3c>)
 80076ba:	1b64      	subs	r4, r4, r5
 80076bc:	10a4      	asrs	r4, r4, #2
 80076be:	2600      	movs	r6, #0
 80076c0:	42a6      	cmp	r6, r4
 80076c2:	d109      	bne.n	80076d8 <__libc_init_array+0x24>
 80076c4:	4d0b      	ldr	r5, [pc, #44]	; (80076f4 <__libc_init_array+0x40>)
 80076c6:	4c0c      	ldr	r4, [pc, #48]	; (80076f8 <__libc_init_array+0x44>)
 80076c8:	f000 f894 	bl	80077f4 <_init>
 80076cc:	1b64      	subs	r4, r4, r5
 80076ce:	10a4      	asrs	r4, r4, #2
 80076d0:	2600      	movs	r6, #0
 80076d2:	42a6      	cmp	r6, r4
 80076d4:	d105      	bne.n	80076e2 <__libc_init_array+0x2e>
 80076d6:	bd70      	pop	{r4, r5, r6, pc}
 80076d8:	f855 3b04 	ldr.w	r3, [r5], #4
 80076dc:	4798      	blx	r3
 80076de:	3601      	adds	r6, #1
 80076e0:	e7ee      	b.n	80076c0 <__libc_init_array+0xc>
 80076e2:	f855 3b04 	ldr.w	r3, [r5], #4
 80076e6:	4798      	blx	r3
 80076e8:	3601      	adds	r6, #1
 80076ea:	e7f2      	b.n	80076d2 <__libc_init_array+0x1e>
 80076ec:	080078d0 	.word	0x080078d0
 80076f0:	080078d0 	.word	0x080078d0
 80076f4:	080078d0 	.word	0x080078d0
 80076f8:	080078d4 	.word	0x080078d4

080076fc <__itoa>:
 80076fc:	1e93      	subs	r3, r2, #2
 80076fe:	2b22      	cmp	r3, #34	; 0x22
 8007700:	b510      	push	{r4, lr}
 8007702:	460c      	mov	r4, r1
 8007704:	d904      	bls.n	8007710 <__itoa+0x14>
 8007706:	2300      	movs	r3, #0
 8007708:	700b      	strb	r3, [r1, #0]
 800770a:	461c      	mov	r4, r3
 800770c:	4620      	mov	r0, r4
 800770e:	bd10      	pop	{r4, pc}
 8007710:	2a0a      	cmp	r2, #10
 8007712:	d109      	bne.n	8007728 <__itoa+0x2c>
 8007714:	2800      	cmp	r0, #0
 8007716:	da07      	bge.n	8007728 <__itoa+0x2c>
 8007718:	232d      	movs	r3, #45	; 0x2d
 800771a:	700b      	strb	r3, [r1, #0]
 800771c:	4240      	negs	r0, r0
 800771e:	2101      	movs	r1, #1
 8007720:	4421      	add	r1, r4
 8007722:	f000 f825 	bl	8007770 <__utoa>
 8007726:	e7f1      	b.n	800770c <__itoa+0x10>
 8007728:	2100      	movs	r1, #0
 800772a:	e7f9      	b.n	8007720 <__itoa+0x24>

0800772c <itoa>:
 800772c:	f7ff bfe6 	b.w	80076fc <__itoa>

08007730 <memset>:
 8007730:	4402      	add	r2, r0
 8007732:	4603      	mov	r3, r0
 8007734:	4293      	cmp	r3, r2
 8007736:	d100      	bne.n	800773a <memset+0xa>
 8007738:	4770      	bx	lr
 800773a:	f803 1b01 	strb.w	r1, [r3], #1
 800773e:	e7f9      	b.n	8007734 <memset+0x4>

08007740 <strcat>:
 8007740:	b510      	push	{r4, lr}
 8007742:	4602      	mov	r2, r0
 8007744:	7814      	ldrb	r4, [r2, #0]
 8007746:	4613      	mov	r3, r2
 8007748:	3201      	adds	r2, #1
 800774a:	2c00      	cmp	r4, #0
 800774c:	d1fa      	bne.n	8007744 <strcat+0x4>
 800774e:	3b01      	subs	r3, #1
 8007750:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007754:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007758:	2a00      	cmp	r2, #0
 800775a:	d1f9      	bne.n	8007750 <strcat+0x10>
 800775c:	bd10      	pop	{r4, pc}

0800775e <strcpy>:
 800775e:	4603      	mov	r3, r0
 8007760:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007764:	f803 2b01 	strb.w	r2, [r3], #1
 8007768:	2a00      	cmp	r2, #0
 800776a:	d1f9      	bne.n	8007760 <strcpy+0x2>
 800776c:	4770      	bx	lr
	...

08007770 <__utoa>:
 8007770:	b5f0      	push	{r4, r5, r6, r7, lr}
 8007772:	4c1f      	ldr	r4, [pc, #124]	; (80077f0 <__utoa+0x80>)
 8007774:	b08b      	sub	sp, #44	; 0x2c
 8007776:	4605      	mov	r5, r0
 8007778:	460b      	mov	r3, r1
 800777a:	466e      	mov	r6, sp
 800777c:	f104 0c20 	add.w	ip, r4, #32
 8007780:	6820      	ldr	r0, [r4, #0]
 8007782:	6861      	ldr	r1, [r4, #4]
 8007784:	4637      	mov	r7, r6
 8007786:	c703      	stmia	r7!, {r0, r1}
 8007788:	3408      	adds	r4, #8
 800778a:	4564      	cmp	r4, ip
 800778c:	463e      	mov	r6, r7
 800778e:	d1f7      	bne.n	8007780 <__utoa+0x10>
 8007790:	7921      	ldrb	r1, [r4, #4]
 8007792:	7139      	strb	r1, [r7, #4]
 8007794:	1e91      	subs	r1, r2, #2
 8007796:	6820      	ldr	r0, [r4, #0]
 8007798:	6038      	str	r0, [r7, #0]
 800779a:	2922      	cmp	r1, #34	; 0x22
 800779c:	f04f 0100 	mov.w	r1, #0
 80077a0:	d904      	bls.n	80077ac <__utoa+0x3c>
 80077a2:	7019      	strb	r1, [r3, #0]
 80077a4:	460b      	mov	r3, r1
 80077a6:	4618      	mov	r0, r3
 80077a8:	b00b      	add	sp, #44	; 0x2c
 80077aa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80077ac:	1e58      	subs	r0, r3, #1
 80077ae:	4684      	mov	ip, r0
 80077b0:	fbb5 f7f2 	udiv	r7, r5, r2
 80077b4:	fb02 5617 	mls	r6, r2, r7, r5
 80077b8:	3628      	adds	r6, #40	; 0x28
 80077ba:	446e      	add	r6, sp
 80077bc:	460c      	mov	r4, r1
 80077be:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80077c2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80077c6:	462e      	mov	r6, r5
 80077c8:	42b2      	cmp	r2, r6
 80077ca:	f101 0101 	add.w	r1, r1, #1
 80077ce:	463d      	mov	r5, r7
 80077d0:	d9ee      	bls.n	80077b0 <__utoa+0x40>
 80077d2:	2200      	movs	r2, #0
 80077d4:	545a      	strb	r2, [r3, r1]
 80077d6:	1919      	adds	r1, r3, r4
 80077d8:	1aa5      	subs	r5, r4, r2
 80077da:	42aa      	cmp	r2, r5
 80077dc:	dae3      	bge.n	80077a6 <__utoa+0x36>
 80077de:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80077e2:	780e      	ldrb	r6, [r1, #0]
 80077e4:	7006      	strb	r6, [r0, #0]
 80077e6:	3201      	adds	r2, #1
 80077e8:	f801 5901 	strb.w	r5, [r1], #-1
 80077ec:	e7f4      	b.n	80077d8 <__utoa+0x68>
 80077ee:	bf00      	nop
 80077f0:	080078a0 	.word	0x080078a0

080077f4 <_init>:
 80077f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80077f6:	bf00      	nop
 80077f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80077fa:	bc08      	pop	{r3}
 80077fc:	469e      	mov	lr, r3
 80077fe:	4770      	bx	lr

08007800 <_fini>:
 8007800:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007802:	bf00      	nop
 8007804:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007806:	bc08      	pop	{r3}
 8007808:	469e      	mov	lr, r3
 800780a:	4770      	bx	lr
