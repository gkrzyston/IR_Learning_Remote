
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004138  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080042cc  080042cc  000142cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080042fc  080042fc  00021440  2**0
                  CONTENTS
  4 .ARM          00000008  080042fc  080042fc  000142fc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004304  08004304  00021440  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004304  08004304  00014304  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004308  08004308  00014308  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001440  20000000  0800430c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000358  20001440  0800574c  00021440  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20001798  0800574c  00021798  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021440  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011aaf  00000000  00000000  00021470  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fd1  00000000  00000000  00032f1f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001088  00000000  00000000  00034ef0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000fe8  00000000  00000000  00035f78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002635  00000000  00000000  00036f60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013096  00000000  00000000  00039595  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090750  00000000  00000000  0004c62b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000dcd7b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004794  00000000  00000000  000dcdcc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20001440 	.word	0x20001440
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080042b4 	.word	0x080042b4

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001444 	.word	0x20001444
 80001d0:	080042b4 	.word	0x080042b4

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004e8:	b580      	push	{r7, lr}
 80004ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004ec:	f000 ff4a 	bl	8001384 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004f0:	f000 f842 	bl	8000578 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004f4:	f000 f9b2 	bl	800085c <MX_GPIO_Init>
  MX_SPI2_Init();
 80004f8:	f000 f8d8 	bl	80006ac <MX_SPI2_Init>
  MX_TIM2_Init();
 80004fc:	f000 f90e 	bl	800071c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000500:	f000 f982 	bl	8000808 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000504:	f000 f8a4 	bl	8000650 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000508:	2108      	movs	r1, #8
 800050a:	4817      	ldr	r0, [pc, #92]	; (8000568 <main+0x80>)
 800050c:	f002 fe70 	bl	80031f0 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 200);
 8000510:	4b15      	ldr	r3, [pc, #84]	; (8000568 <main+0x80>)
 8000512:	681b      	ldr	r3, [r3, #0]
 8000514:	22c8      	movs	r2, #200	; 0xc8
 8000516:	63da      	str	r2, [r3, #60]	; 0x3c
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  init_displays();
 8000518:	f000 face 	bl	8000ab8 <init_displays>
  while (1)
  {
	  draw_string("testing", white);
 800051c:	2101      	movs	r1, #1
 800051e:	4813      	ldr	r0, [pc, #76]	; (800056c <main+0x84>)
 8000520:	f000 fd13 	bl	8000f4a <draw_string>
	  update_display(3);
 8000524:	2003      	movs	r0, #3
 8000526:	f000 fb33 	bl	8000b90 <update_display>
	  erase_buffer();
 800052a:	f000 fc09 	bl	8000d40 <erase_buffer>
	  draw_string("please", white);
 800052e:	2101      	movs	r1, #1
 8000530:	480f      	ldr	r0, [pc, #60]	; (8000570 <main+0x88>)
 8000532:	f000 fd0a 	bl	8000f4a <draw_string>
	  update_display(5);
 8000536:	2005      	movs	r0, #5
 8000538:	f000 fb2a 	bl	8000b90 <update_display>
	  erase_buffer();
 800053c:	f000 fc00 	bl	8000d40 <erase_buffer>
	  draw_string("work", white);
 8000540:	2101      	movs	r1, #1
 8000542:	480c      	ldr	r0, [pc, #48]	; (8000574 <main+0x8c>)
 8000544:	f000 fd01 	bl	8000f4a <draw_string>
	  update_display(6);
 8000548:	2006      	movs	r0, #6
 800054a:	f000 fb21 	bl	8000b90 <update_display>
	  HAL_Delay(1000);
 800054e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000552:	f000 ff89 	bl	8001468 <HAL_Delay>

	  erase_buffer();
 8000556:	f000 fbf3 	bl	8000d40 <erase_buffer>
	  update_all_displays();
 800055a:	f000 fb87 	bl	8000c6c <update_all_displays>
	  //update_all_displays();
	  HAL_Delay(1000);
 800055e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000562:	f000 ff81 	bl	8001468 <HAL_Delay>
	  draw_string("testing", white);
 8000566:	e7d9      	b.n	800051c <main+0x34>
 8000568:	20001508 	.word	0x20001508
 800056c:	080042cc 	.word	0x080042cc
 8000570:	080042d4 	.word	0x080042d4
 8000574:	080042dc 	.word	0x080042dc

08000578 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000578:	b580      	push	{r7, lr}
 800057a:	b094      	sub	sp, #80	; 0x50
 800057c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800057e:	f107 0320 	add.w	r3, r7, #32
 8000582:	2230      	movs	r2, #48	; 0x30
 8000584:	2100      	movs	r1, #0
 8000586:	4618      	mov	r0, r3
 8000588:	f003 fe8c 	bl	80042a4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800058c:	f107 030c 	add.w	r3, r7, #12
 8000590:	2200      	movs	r2, #0
 8000592:	601a      	str	r2, [r3, #0]
 8000594:	605a      	str	r2, [r3, #4]
 8000596:	609a      	str	r2, [r3, #8]
 8000598:	60da      	str	r2, [r3, #12]
 800059a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800059c:	2300      	movs	r3, #0
 800059e:	60bb      	str	r3, [r7, #8]
 80005a0:	4b29      	ldr	r3, [pc, #164]	; (8000648 <SystemClock_Config+0xd0>)
 80005a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005a4:	4a28      	ldr	r2, [pc, #160]	; (8000648 <SystemClock_Config+0xd0>)
 80005a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005aa:	6413      	str	r3, [r2, #64]	; 0x40
 80005ac:	4b26      	ldr	r3, [pc, #152]	; (8000648 <SystemClock_Config+0xd0>)
 80005ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005b4:	60bb      	str	r3, [r7, #8]
 80005b6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80005b8:	2300      	movs	r3, #0
 80005ba:	607b      	str	r3, [r7, #4]
 80005bc:	4b23      	ldr	r3, [pc, #140]	; (800064c <SystemClock_Config+0xd4>)
 80005be:	681b      	ldr	r3, [r3, #0]
 80005c0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005c4:	4a21      	ldr	r2, [pc, #132]	; (800064c <SystemClock_Config+0xd4>)
 80005c6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80005ca:	6013      	str	r3, [r2, #0]
 80005cc:	4b1f      	ldr	r3, [pc, #124]	; (800064c <SystemClock_Config+0xd4>)
 80005ce:	681b      	ldr	r3, [r3, #0]
 80005d0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005d4:	607b      	str	r3, [r7, #4]
 80005d6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005d8:	2302      	movs	r3, #2
 80005da:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005dc:	2301      	movs	r3, #1
 80005de:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005e0:	2310      	movs	r3, #16
 80005e2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005e4:	2302      	movs	r3, #2
 80005e6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80005e8:	2300      	movs	r3, #0
 80005ea:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80005ec:	2310      	movs	r3, #16
 80005ee:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80005f0:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80005f4:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80005f6:	2304      	movs	r3, #4
 80005f8:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80005fa:	2307      	movs	r3, #7
 80005fc:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fe:	f107 0320 	add.w	r3, r7, #32
 8000602:	4618      	mov	r0, r3
 8000604:	f001 fe24 	bl	8002250 <HAL_RCC_OscConfig>
 8000608:	4603      	mov	r3, r0
 800060a:	2b00      	cmp	r3, #0
 800060c:	d001      	beq.n	8000612 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800060e:	f000 f9c3 	bl	8000998 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000612:	230f      	movs	r3, #15
 8000614:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000616:	2302      	movs	r3, #2
 8000618:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800061a:	2300      	movs	r3, #0
 800061c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800061e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000622:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000624:	2300      	movs	r3, #0
 8000626:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000628:	f107 030c 	add.w	r3, r7, #12
 800062c:	2102      	movs	r1, #2
 800062e:	4618      	mov	r0, r3
 8000630:	f002 f886 	bl	8002740 <HAL_RCC_ClockConfig>
 8000634:	4603      	mov	r3, r0
 8000636:	2b00      	cmp	r3, #0
 8000638:	d001      	beq.n	800063e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800063a:	f000 f9ad 	bl	8000998 <Error_Handler>
  }
}
 800063e:	bf00      	nop
 8000640:	3750      	adds	r7, #80	; 0x50
 8000642:	46bd      	mov	sp, r7
 8000644:	bd80      	pop	{r7, pc}
 8000646:	bf00      	nop
 8000648:	40023800 	.word	0x40023800
 800064c:	40007000 	.word	0x40007000

08000650 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000654:	4b12      	ldr	r3, [pc, #72]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000656:	4a13      	ldr	r2, [pc, #76]	; (80006a4 <MX_I2C1_Init+0x54>)
 8000658:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800065a:	4b11      	ldr	r3, [pc, #68]	; (80006a0 <MX_I2C1_Init+0x50>)
 800065c:	4a12      	ldr	r2, [pc, #72]	; (80006a8 <MX_I2C1_Init+0x58>)
 800065e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000660:	4b0f      	ldr	r3, [pc, #60]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000662:	2200      	movs	r2, #0
 8000664:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000666:	4b0e      	ldr	r3, [pc, #56]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000668:	2200      	movs	r2, #0
 800066a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800066c:	4b0c      	ldr	r3, [pc, #48]	; (80006a0 <MX_I2C1_Init+0x50>)
 800066e:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000672:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000674:	4b0a      	ldr	r3, [pc, #40]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000676:	2200      	movs	r2, #0
 8000678:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800067a:	4b09      	ldr	r3, [pc, #36]	; (80006a0 <MX_I2C1_Init+0x50>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000680:	4b07      	ldr	r3, [pc, #28]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000682:	2200      	movs	r2, #0
 8000684:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000686:	4b06      	ldr	r3, [pc, #24]	; (80006a0 <MX_I2C1_Init+0x50>)
 8000688:	2200      	movs	r2, #0
 800068a:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800068c:	4804      	ldr	r0, [pc, #16]	; (80006a0 <MX_I2C1_Init+0x50>)
 800068e:	f001 f993 	bl	80019b8 <HAL_I2C_Init>
 8000692:	4603      	mov	r3, r0
 8000694:	2b00      	cmp	r3, #0
 8000696:	d001      	beq.n	800069c <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000698:	f000 f97e 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 800069c:	bf00      	nop
 800069e:	bd80      	pop	{r7, pc}
 80006a0:	2000145c 	.word	0x2000145c
 80006a4:	40005400 	.word	0x40005400
 80006a8:	000186a0 	.word	0x000186a0

080006ac <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80006ac:	b580      	push	{r7, lr}
 80006ae:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80006b0:	4b18      	ldr	r3, [pc, #96]	; (8000714 <MX_SPI2_Init+0x68>)
 80006b2:	4a19      	ldr	r2, [pc, #100]	; (8000718 <MX_SPI2_Init+0x6c>)
 80006b4:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80006b6:	4b17      	ldr	r3, [pc, #92]	; (8000714 <MX_SPI2_Init+0x68>)
 80006b8:	f44f 7282 	mov.w	r2, #260	; 0x104
 80006bc:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 80006be:	4b15      	ldr	r3, [pc, #84]	; (8000714 <MX_SPI2_Init+0x68>)
 80006c0:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 80006c4:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80006c6:	4b13      	ldr	r3, [pc, #76]	; (8000714 <MX_SPI2_Init+0x68>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80006cc:	4b11      	ldr	r3, [pc, #68]	; (8000714 <MX_SPI2_Init+0x68>)
 80006ce:	2200      	movs	r2, #0
 80006d0:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80006d2:	4b10      	ldr	r3, [pc, #64]	; (8000714 <MX_SPI2_Init+0x68>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80006d8:	4b0e      	ldr	r3, [pc, #56]	; (8000714 <MX_SPI2_Init+0x68>)
 80006da:	f44f 7200 	mov.w	r2, #512	; 0x200
 80006de:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80006e0:	4b0c      	ldr	r3, [pc, #48]	; (8000714 <MX_SPI2_Init+0x68>)
 80006e2:	2230      	movs	r2, #48	; 0x30
 80006e4:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80006e6:	4b0b      	ldr	r3, [pc, #44]	; (8000714 <MX_SPI2_Init+0x68>)
 80006e8:	2200      	movs	r2, #0
 80006ea:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80006ec:	4b09      	ldr	r3, [pc, #36]	; (8000714 <MX_SPI2_Init+0x68>)
 80006ee:	2200      	movs	r2, #0
 80006f0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80006f2:	4b08      	ldr	r3, [pc, #32]	; (8000714 <MX_SPI2_Init+0x68>)
 80006f4:	2200      	movs	r2, #0
 80006f6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80006f8:	4b06      	ldr	r3, [pc, #24]	; (8000714 <MX_SPI2_Init+0x68>)
 80006fa:	220a      	movs	r2, #10
 80006fc:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80006fe:	4805      	ldr	r0, [pc, #20]	; (8000714 <MX_SPI2_Init+0x68>)
 8000700:	f002 fa3e 	bl	8002b80 <HAL_SPI_Init>
 8000704:	4603      	mov	r3, r0
 8000706:	2b00      	cmp	r3, #0
 8000708:	d001      	beq.n	800070e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 800070a:	f000 f945 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
 8000712:	bf00      	nop
 8000714:	200014b0 	.word	0x200014b0
 8000718:	40003800 	.word	0x40003800

0800071c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800071c:	b580      	push	{r7, lr}
 800071e:	b08e      	sub	sp, #56	; 0x38
 8000720:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000722:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000726:	2200      	movs	r2, #0
 8000728:	601a      	str	r2, [r3, #0]
 800072a:	605a      	str	r2, [r3, #4]
 800072c:	609a      	str	r2, [r3, #8]
 800072e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000730:	f107 0320 	add.w	r3, r7, #32
 8000734:	2200      	movs	r2, #0
 8000736:	601a      	str	r2, [r3, #0]
 8000738:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800073a:	1d3b      	adds	r3, r7, #4
 800073c:	2200      	movs	r2, #0
 800073e:	601a      	str	r2, [r3, #0]
 8000740:	605a      	str	r2, [r3, #4]
 8000742:	609a      	str	r2, [r3, #8]
 8000744:	60da      	str	r2, [r3, #12]
 8000746:	611a      	str	r2, [r3, #16]
 8000748:	615a      	str	r2, [r3, #20]
 800074a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800074c:	4b2d      	ldr	r3, [pc, #180]	; (8000804 <MX_TIM2_Init+0xe8>)
 800074e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000752:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000754:	4b2b      	ldr	r3, [pc, #172]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000756:	f240 32ff 	movw	r2, #1023	; 0x3ff
 800075a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800075c:	4b29      	ldr	r3, [pc, #164]	; (8000804 <MX_TIM2_Init+0xe8>)
 800075e:	2200      	movs	r2, #0
 8000760:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000762:	4b28      	ldr	r3, [pc, #160]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000764:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000768:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800076a:	4b26      	ldr	r3, [pc, #152]	; (8000804 <MX_TIM2_Init+0xe8>)
 800076c:	2200      	movs	r2, #0
 800076e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000770:	4b24      	ldr	r3, [pc, #144]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000776:	4823      	ldr	r0, [pc, #140]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000778:	f002 fc92 	bl	80030a0 <HAL_TIM_Base_Init>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d001      	beq.n	8000786 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000782:	f000 f909 	bl	8000998 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000786:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800078a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800078c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000790:	4619      	mov	r1, r3
 8000792:	481c      	ldr	r0, [pc, #112]	; (8000804 <MX_TIM2_Init+0xe8>)
 8000794:	f002 fe9e 	bl	80034d4 <HAL_TIM_ConfigClockSource>
 8000798:	4603      	mov	r3, r0
 800079a:	2b00      	cmp	r3, #0
 800079c:	d001      	beq.n	80007a2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 800079e:	f000 f8fb 	bl	8000998 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80007a2:	4818      	ldr	r0, [pc, #96]	; (8000804 <MX_TIM2_Init+0xe8>)
 80007a4:	f002 fccb 	bl	800313e <HAL_TIM_PWM_Init>
 80007a8:	4603      	mov	r3, r0
 80007aa:	2b00      	cmp	r3, #0
 80007ac:	d001      	beq.n	80007b2 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 80007ae:	f000 f8f3 	bl	8000998 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007b2:	2300      	movs	r3, #0
 80007b4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007b6:	2300      	movs	r3, #0
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80007ba:	f107 0320 	add.w	r3, r7, #32
 80007be:	4619      	mov	r1, r3
 80007c0:	4810      	ldr	r0, [pc, #64]	; (8000804 <MX_TIM2_Init+0xe8>)
 80007c2:	f003 fa1b 	bl	8003bfc <HAL_TIMEx_MasterConfigSynchronization>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d001      	beq.n	80007d0 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 80007cc:	f000 f8e4 	bl	8000998 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80007d0:	2370      	movs	r3, #112	; 0x70
 80007d2:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80007d4:	2300      	movs	r3, #0
 80007d6:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80007d8:	2300      	movs	r3, #0
 80007da:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80007dc:	2300      	movs	r3, #0
 80007de:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 80007e0:	1d3b      	adds	r3, r7, #4
 80007e2:	2208      	movs	r2, #8
 80007e4:	4619      	mov	r1, r3
 80007e6:	4807      	ldr	r0, [pc, #28]	; (8000804 <MX_TIM2_Init+0xe8>)
 80007e8:	f002 fdb2 	bl	8003350 <HAL_TIM_PWM_ConfigChannel>
 80007ec:	4603      	mov	r3, r0
 80007ee:	2b00      	cmp	r3, #0
 80007f0:	d001      	beq.n	80007f6 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 80007f2:	f000 f8d1 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80007f6:	4803      	ldr	r0, [pc, #12]	; (8000804 <MX_TIM2_Init+0xe8>)
 80007f8:	f000 fcde 	bl	80011b8 <HAL_TIM_MspPostInit>

}
 80007fc:	bf00      	nop
 80007fe:	3738      	adds	r7, #56	; 0x38
 8000800:	46bd      	mov	sp, r7
 8000802:	bd80      	pop	{r7, pc}
 8000804:	20001508 	.word	0x20001508

08000808 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800080c:	4b11      	ldr	r3, [pc, #68]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 800080e:	4a12      	ldr	r2, [pc, #72]	; (8000858 <MX_USART1_UART_Init+0x50>)
 8000810:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000812:	4b10      	ldr	r3, [pc, #64]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000814:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000818:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800081a:	4b0e      	ldr	r3, [pc, #56]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000820:	4b0c      	ldr	r3, [pc, #48]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000826:	4b0b      	ldr	r3, [pc, #44]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800082c:	4b09      	ldr	r3, [pc, #36]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 800082e:	220c      	movs	r2, #12
 8000830:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000832:	4b08      	ldr	r3, [pc, #32]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000834:	2200      	movs	r2, #0
 8000836:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000838:	4b06      	ldr	r3, [pc, #24]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 800083a:	2200      	movs	r2, #0
 800083c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800083e:	4805      	ldr	r0, [pc, #20]	; (8000854 <MX_USART1_UART_Init+0x4c>)
 8000840:	f003 fa4a 	bl	8003cd8 <HAL_UART_Init>
 8000844:	4603      	mov	r3, r0
 8000846:	2b00      	cmp	r3, #0
 8000848:	d001      	beq.n	800084e <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800084a:	f000 f8a5 	bl	8000998 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800084e:	bf00      	nop
 8000850:	bd80      	pop	{r7, pc}
 8000852:	bf00      	nop
 8000854:	20001550 	.word	0x20001550
 8000858:	40011000 	.word	0x40011000

0800085c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800085c:	b580      	push	{r7, lr}
 800085e:	b088      	sub	sp, #32
 8000860:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000862:	f107 030c 	add.w	r3, r7, #12
 8000866:	2200      	movs	r2, #0
 8000868:	601a      	str	r2, [r3, #0]
 800086a:	605a      	str	r2, [r3, #4]
 800086c:	609a      	str	r2, [r3, #8]
 800086e:	60da      	str	r2, [r3, #12]
 8000870:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000872:	2300      	movs	r3, #0
 8000874:	60bb      	str	r3, [r7, #8]
 8000876:	4b44      	ldr	r3, [pc, #272]	; (8000988 <MX_GPIO_Init+0x12c>)
 8000878:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087a:	4a43      	ldr	r2, [pc, #268]	; (8000988 <MX_GPIO_Init+0x12c>)
 800087c:	f043 0304 	orr.w	r3, r3, #4
 8000880:	6313      	str	r3, [r2, #48]	; 0x30
 8000882:	4b41      	ldr	r3, [pc, #260]	; (8000988 <MX_GPIO_Init+0x12c>)
 8000884:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000886:	f003 0304 	and.w	r3, r3, #4
 800088a:	60bb      	str	r3, [r7, #8]
 800088c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800088e:	2300      	movs	r3, #0
 8000890:	607b      	str	r3, [r7, #4]
 8000892:	4b3d      	ldr	r3, [pc, #244]	; (8000988 <MX_GPIO_Init+0x12c>)
 8000894:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000896:	4a3c      	ldr	r2, [pc, #240]	; (8000988 <MX_GPIO_Init+0x12c>)
 8000898:	f043 0301 	orr.w	r3, r3, #1
 800089c:	6313      	str	r3, [r2, #48]	; 0x30
 800089e:	4b3a      	ldr	r3, [pc, #232]	; (8000988 <MX_GPIO_Init+0x12c>)
 80008a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a2:	f003 0301 	and.w	r3, r3, #1
 80008a6:	607b      	str	r3, [r7, #4]
 80008a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008aa:	2300      	movs	r3, #0
 80008ac:	603b      	str	r3, [r7, #0]
 80008ae:	4b36      	ldr	r3, [pc, #216]	; (8000988 <MX_GPIO_Init+0x12c>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	4a35      	ldr	r2, [pc, #212]	; (8000988 <MX_GPIO_Init+0x12c>)
 80008b4:	f043 0302 	orr.w	r3, r3, #2
 80008b8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ba:	4b33      	ldr	r3, [pc, #204]	; (8000988 <MX_GPIO_Init+0x12c>)
 80008bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008be:	f003 0302 	and.w	r3, r3, #2
 80008c2:	603b      	str	r3, [r7, #0]
 80008c4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80008c6:	2200      	movs	r2, #0
 80008c8:	21f3      	movs	r1, #243	; 0xf3
 80008ca:	4830      	ldr	r0, [pc, #192]	; (800098c <MX_GPIO_Init+0x130>)
 80008cc:	f001 f85a 	bl	8001984 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80008d0:	2200      	movs	r2, #0
 80008d2:	2140      	movs	r1, #64	; 0x40
 80008d4:	482e      	ldr	r0, [pc, #184]	; (8000990 <MX_GPIO_Init+0x134>)
 80008d6:	f001 f855 	bl	8001984 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80008da:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80008de:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80008e0:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80008e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008e6:	2300      	movs	r3, #0
 80008e8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80008ea:	f107 030c 	add.w	r3, r7, #12
 80008ee:	4619      	mov	r1, r3
 80008f0:	4828      	ldr	r0, [pc, #160]	; (8000994 <MX_GPIO_Init+0x138>)
 80008f2:	f000 fec3 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80008f6:	23f3      	movs	r3, #243	; 0xf3
 80008f8:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008fa:	2301      	movs	r3, #1
 80008fc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008fe:	2300      	movs	r3, #0
 8000900:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000902:	2300      	movs	r3, #0
 8000904:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000906:	f107 030c 	add.w	r3, r7, #12
 800090a:	4619      	mov	r1, r3
 800090c:	481f      	ldr	r0, [pc, #124]	; (800098c <MX_GPIO_Init+0x130>)
 800090e:	f000 feb5 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000912:	230c      	movs	r3, #12
 8000914:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000916:	2302      	movs	r3, #2
 8000918:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800091a:	2300      	movs	r3, #0
 800091c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800091e:	2303      	movs	r3, #3
 8000920:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000922:	2307      	movs	r3, #7
 8000924:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000926:	f107 030c 	add.w	r3, r7, #12
 800092a:	4619      	mov	r1, r3
 800092c:	4817      	ldr	r0, [pc, #92]	; (800098c <MX_GPIO_Init+0x130>)
 800092e:	f000 fea5 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000932:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000936:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000938:	2300      	movs	r3, #0
 800093a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800093c:	2300      	movs	r3, #0
 800093e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000940:	f107 030c 	add.w	r3, r7, #12
 8000944:	4619      	mov	r1, r3
 8000946:	4813      	ldr	r0, [pc, #76]	; (8000994 <MX_GPIO_Init+0x138>)
 8000948:	f000 fe98 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800094c:	2338      	movs	r3, #56	; 0x38
 800094e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000950:	2300      	movs	r3, #0
 8000952:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000954:	2301      	movs	r3, #1
 8000956:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000958:	f107 030c 	add.w	r3, r7, #12
 800095c:	4619      	mov	r1, r3
 800095e:	480c      	ldr	r0, [pc, #48]	; (8000990 <MX_GPIO_Init+0x134>)
 8000960:	f000 fe8c 	bl	800167c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000964:	2340      	movs	r3, #64	; 0x40
 8000966:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000968:	2301      	movs	r3, #1
 800096a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800096c:	2300      	movs	r3, #0
 800096e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000970:	2300      	movs	r3, #0
 8000972:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000974:	f107 030c 	add.w	r3, r7, #12
 8000978:	4619      	mov	r1, r3
 800097a:	4805      	ldr	r0, [pc, #20]	; (8000990 <MX_GPIO_Init+0x134>)
 800097c:	f000 fe7e 	bl	800167c <HAL_GPIO_Init>

}
 8000980:	bf00      	nop
 8000982:	3720      	adds	r7, #32
 8000984:	46bd      	mov	sp, r7
 8000986:	bd80      	pop	{r7, pc}
 8000988:	40023800 	.word	0x40023800
 800098c:	40020000 	.word	0x40020000
 8000990:	40020400 	.word	0x40020400
 8000994:	40020800 	.word	0x40020800

08000998 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000998:	b480      	push	{r7}
 800099a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800099c:	b672      	cpsid	i
}
 800099e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80009a0:	e7fe      	b.n	80009a0 <Error_Handler+0x8>
	...

080009a4 <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b084      	sub	sp, #16
 80009a8:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 80009aa:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80009ae:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 80009b0:	1d3a      	adds	r2, r7, #4
 80009b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009b6:	9300      	str	r3, [sp, #0]
 80009b8:	2302      	movs	r3, #2
 80009ba:	21a2      	movs	r1, #162	; 0xa2
 80009bc:	4803      	ldr	r0, [pc, #12]	; (80009cc <disable_OLED_EEPROM_writes+0x28>)
 80009be:	f001 f93f 	bl	8001c40 <HAL_I2C_Master_Transmit>
}
 80009c2:	bf00      	nop
 80009c4:	3708      	adds	r7, #8
 80009c6:	46bd      	mov	sp, r7
 80009c8:	bd80      	pop	{r7, pc}
 80009ca:	bf00      	nop
 80009cc:	2000145c 	.word	0x2000145c

080009d0 <drop_all_CS>:

void drop_all_CS(void) {
 80009d0:	b580      	push	{r7, lr}
 80009d2:	b082      	sub	sp, #8
 80009d4:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 80009d6:	4b0a      	ldr	r3, [pc, #40]	; (8000a00 <drop_all_CS+0x30>)
 80009d8:	2200      	movs	r2, #0
 80009da:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 80009dc:	4b08      	ldr	r3, [pc, #32]	; (8000a00 <drop_all_CS+0x30>)
 80009de:	2200      	movs	r2, #0
 80009e0:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 80009e2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80009e6:	9300      	str	r3, [sp, #0]
 80009e8:	2303      	movs	r3, #3
 80009ea:	4a05      	ldr	r2, [pc, #20]	; (8000a00 <drop_all_CS+0x30>)
 80009ec:	21a2      	movs	r1, #162	; 0xa2
 80009ee:	4805      	ldr	r0, [pc, #20]	; (8000a04 <drop_all_CS+0x34>)
 80009f0:	f001 f926 	bl	8001c40 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80009f4:	2001      	movs	r0, #1
 80009f6:	f000 fd37 	bl	8001468 <HAL_Delay>
}
 80009fa:	bf00      	nop
 80009fc:	46bd      	mov	sp, r7
 80009fe:	bd80      	pop	{r7, pc}
 8000a00:	2000140c 	.word	0x2000140c
 8000a04:	2000145c 	.word	0x2000145c

08000a08 <raise_all_CS>:

void raise_all_CS(void) {
 8000a08:	b580      	push	{r7, lr}
 8000a0a:	b082      	sub	sp, #8
 8000a0c:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 8000a0e:	4b09      	ldr	r3, [pc, #36]	; (8000a34 <raise_all_CS+0x2c>)
 8000a10:	22ff      	movs	r2, #255	; 0xff
 8000a12:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8000a14:	4b07      	ldr	r3, [pc, #28]	; (8000a34 <raise_all_CS+0x2c>)
 8000a16:	2201      	movs	r2, #1
 8000a18:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8000a1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a1e:	9300      	str	r3, [sp, #0]
 8000a20:	2303      	movs	r3, #3
 8000a22:	4a04      	ldr	r2, [pc, #16]	; (8000a34 <raise_all_CS+0x2c>)
 8000a24:	21a2      	movs	r1, #162	; 0xa2
 8000a26:	4804      	ldr	r0, [pc, #16]	; (8000a38 <raise_all_CS+0x30>)
 8000a28:	f001 f90a 	bl	8001c40 <HAL_I2C_Master_Transmit>
}
 8000a2c:	bf00      	nop
 8000a2e:	46bd      	mov	sp, r7
 8000a30:	bd80      	pop	{r7, pc}
 8000a32:	bf00      	nop
 8000a34:	2000140c 	.word	0x2000140c
 8000a38:	2000145c 	.word	0x2000145c

08000a3c <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 8000a3c:	b580      	push	{r7, lr}
 8000a3e:	b084      	sub	sp, #16
 8000a40:	af02      	add	r7, sp, #8
 8000a42:	4603      	mov	r3, r0
 8000a44:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 8000a46:	4b1a      	ldr	r3, [pc, #104]	; (8000ab0 <drop_CS+0x74>)
 8000a48:	22ff      	movs	r2, #255	; 0xff
 8000a4a:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8000a4c:	4b18      	ldr	r3, [pc, #96]	; (8000ab0 <drop_CS+0x74>)
 8000a4e:	2201      	movs	r2, #1
 8000a50:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 8000a52:	79fb      	ldrb	r3, [r7, #7]
 8000a54:	2b09      	cmp	r3, #9
 8000a56:	d107      	bne.n	8000a68 <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 8000a58:	4b15      	ldr	r3, [pc, #84]	; (8000ab0 <drop_CS+0x74>)
 8000a5a:	789b      	ldrb	r3, [r3, #2]
 8000a5c:	f023 0301 	bic.w	r3, r3, #1
 8000a60:	b2da      	uxtb	r2, r3
 8000a62:	4b13      	ldr	r3, [pc, #76]	; (8000ab0 <drop_CS+0x74>)
 8000a64:	709a      	strb	r2, [r3, #2]
 8000a66:	e012      	b.n	8000a8e <drop_CS+0x52>
	} else if (display <= 8) {
 8000a68:	79fb      	ldrb	r3, [r7, #7]
 8000a6a:	2b08      	cmp	r3, #8
 8000a6c:	d80f      	bhi.n	8000a8e <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 8000a6e:	4b10      	ldr	r3, [pc, #64]	; (8000ab0 <drop_CS+0x74>)
 8000a70:	785b      	ldrb	r3, [r3, #1]
 8000a72:	b25a      	sxtb	r2, r3
 8000a74:	79fb      	ldrb	r3, [r7, #7]
 8000a76:	3b01      	subs	r3, #1
 8000a78:	2101      	movs	r1, #1
 8000a7a:	fa01 f303 	lsl.w	r3, r1, r3
 8000a7e:	b25b      	sxtb	r3, r3
 8000a80:	43db      	mvns	r3, r3
 8000a82:	b25b      	sxtb	r3, r3
 8000a84:	4013      	ands	r3, r2
 8000a86:	b25b      	sxtb	r3, r3
 8000a88:	b2da      	uxtb	r2, r3
 8000a8a:	4b09      	ldr	r3, [pc, #36]	; (8000ab0 <drop_CS+0x74>)
 8000a8c:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 8000a8e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000a92:	9300      	str	r3, [sp, #0]
 8000a94:	2303      	movs	r3, #3
 8000a96:	4a06      	ldr	r2, [pc, #24]	; (8000ab0 <drop_CS+0x74>)
 8000a98:	21a2      	movs	r1, #162	; 0xa2
 8000a9a:	4806      	ldr	r0, [pc, #24]	; (8000ab4 <drop_CS+0x78>)
 8000a9c:	f001 f8d0 	bl	8001c40 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000aa0:	2001      	movs	r0, #1
 8000aa2:	f000 fce1 	bl	8001468 <HAL_Delay>
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
 8000aae:	bf00      	nop
 8000ab0:	2000140c 	.word	0x2000140c
 8000ab4:	2000145c 	.word	0x2000145c

08000ab8 <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 8000ab8:	b580      	push	{r7, lr}
 8000aba:	b082      	sub	sp, #8
 8000abc:	af00      	add	r7, sp, #0
	disable_OLED_EEPROM_writes();
 8000abe:	f7ff ff71 	bl	80009a4 <disable_OLED_EEPROM_writes>
	raise_all_CS();
 8000ac2:	f7ff ffa1 	bl	8000a08 <raise_all_CS>
	DC_HIGH();
 8000ac6:	2201      	movs	r2, #1
 8000ac8:	2101      	movs	r1, #1
 8000aca:	482e      	ldr	r0, [pc, #184]	; (8000b84 <init_displays+0xcc>)
 8000acc:	f000 ff5a 	bl	8001984 <HAL_GPIO_WritePin>
	RST_HIGH();
 8000ad0:	2201      	movs	r2, #1
 8000ad2:	2102      	movs	r1, #2
 8000ad4:	482b      	ldr	r0, [pc, #172]	; (8000b84 <init_displays+0xcc>)
 8000ad6:	f000 ff55 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000ada:	200a      	movs	r0, #10
 8000adc:	f000 fcc4 	bl	8001468 <HAL_Delay>
	RST_LOW();
 8000ae0:	2200      	movs	r2, #0
 8000ae2:	2102      	movs	r1, #2
 8000ae4:	4827      	ldr	r0, [pc, #156]	; (8000b84 <init_displays+0xcc>)
 8000ae6:	f000 ff4d 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 8000aea:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000aee:	2201      	movs	r2, #1
 8000af0:	4925      	ldr	r1, [pc, #148]	; (8000b88 <init_displays+0xd0>)
 8000af2:	4826      	ldr	r0, [pc, #152]	; (8000b8c <init_displays+0xd4>)
 8000af4:	f002 f8cd 	bl	8002c92 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000af8:	200a      	movs	r0, #10
 8000afa:	f000 fcb5 	bl	8001468 <HAL_Delay>
	RST_HIGH();
 8000afe:	2201      	movs	r2, #1
 8000b00:	2102      	movs	r1, #2
 8000b02:	4820      	ldr	r0, [pc, #128]	; (8000b84 <init_displays+0xcc>)
 8000b04:	f000 ff3e 	bl	8001984 <HAL_GPIO_WritePin>

	DC_LOW();
 8000b08:	2200      	movs	r2, #0
 8000b0a:	2101      	movs	r1, #1
 8000b0c:	481d      	ldr	r0, [pc, #116]	; (8000b84 <init_displays+0xcc>)
 8000b0e:	f000 ff39 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000b12:	2001      	movs	r0, #1
 8000b14:	f000 fca8 	bl	8001468 <HAL_Delay>

	drop_all_CS();
 8000b18:	f7ff ff5a 	bl	80009d0 <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	71fb      	strb	r3, [r7, #7]
 8000b20:	e002      	b.n	8000b28 <init_displays+0x70>
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	3301      	adds	r3, #1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b4f      	cmp	r3, #79	; 0x4f
 8000b2c:	d9f9      	bls.n	8000b22 <init_displays+0x6a>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8000b2e:	2300      	movs	r3, #0
 8000b30:	80bb      	strh	r3, [r7, #4]
 8000b32:	e014      	b.n	8000b5e <init_displays+0xa6>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 8000b34:	88bb      	ldrh	r3, [r7, #4]
 8000b36:	4a14      	ldr	r2, [pc, #80]	; (8000b88 <init_displays+0xd0>)
 8000b38:	1899      	adds	r1, r3, r2
 8000b3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000b3e:	2201      	movs	r2, #1
 8000b40:	4812      	ldr	r0, [pc, #72]	; (8000b8c <init_displays+0xd4>)
 8000b42:	f002 f8a6 	bl	8002c92 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8000b46:	2300      	movs	r3, #0
 8000b48:	70fb      	strb	r3, [r7, #3]
 8000b4a:	e002      	b.n	8000b52 <init_displays+0x9a>
 8000b4c:	78fb      	ldrb	r3, [r7, #3]
 8000b4e:	3301      	adds	r3, #1
 8000b50:	70fb      	strb	r3, [r7, #3]
 8000b52:	78fb      	ldrb	r3, [r7, #3]
 8000b54:	2b09      	cmp	r3, #9
 8000b56:	d9f9      	bls.n	8000b4c <init_displays+0x94>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8000b58:	88bb      	ldrh	r3, [r7, #4]
 8000b5a:	3301      	adds	r3, #1
 8000b5c:	80bb      	strh	r3, [r7, #4]
 8000b5e:	88bb      	ldrh	r3, [r7, #4]
 8000b60:	2b19      	cmp	r3, #25
 8000b62:	d9e7      	bls.n	8000b34 <init_displays+0x7c>
	}

	raise_all_CS();
 8000b64:	f7ff ff50 	bl	8000a08 <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 8000b68:	2201      	movs	r2, #1
 8000b6a:	2101      	movs	r1, #1
 8000b6c:	4805      	ldr	r0, [pc, #20]	; (8000b84 <init_displays+0xcc>)
 8000b6e:	f000 ff09 	bl	8001984 <HAL_GPIO_WritePin>
	erase_buffer();
 8000b72:	f000 f8e5 	bl	8000d40 <erase_buffer>
	update_all_displays();
 8000b76:	f000 f879 	bl	8000c6c <update_all_displays>
}
 8000b7a:	bf00      	nop
 8000b7c:	3708      	adds	r7, #8
 8000b7e:	46bd      	mov	sp, r7
 8000b80:	bd80      	pop	{r7, pc}
 8000b82:	bf00      	nop
 8000b84:	40020000 	.word	0x40020000
 8000b88:	20001410 	.word	0x20001410
 8000b8c:	200014b0 	.word	0x200014b0

08000b90 <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	4603      	mov	r3, r0
 8000b98:	71fb      	strb	r3, [r7, #7]
	DC_LOW();
 8000b9a:	2200      	movs	r2, #0
 8000b9c:	2101      	movs	r1, #1
 8000b9e:	482f      	ldr	r0, [pc, #188]	; (8000c5c <update_display+0xcc>)
 8000ba0:	f000 fef0 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000ba4:	2001      	movs	r0, #1
 8000ba6:	f000 fc5f 	bl	8001468 <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 8000baa:	79fb      	ldrb	r3, [r7, #7]
 8000bac:	4618      	mov	r0, r3
 8000bae:	f7ff ff45 	bl	8000a3c <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	75fb      	strb	r3, [r7, #23]
 8000bb6:	e002      	b.n	8000bbe <update_display+0x2e>
 8000bb8:	7dfb      	ldrb	r3, [r7, #23]
 8000bba:	3301      	adds	r3, #1
 8000bbc:	75fb      	strb	r3, [r7, #23]
 8000bbe:	7dfb      	ldrb	r3, [r7, #23]
 8000bc0:	2b4f      	cmp	r3, #79	; 0x4f
 8000bc2:	d9f9      	bls.n	8000bb8 <update_display+0x28>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8000bc4:	2300      	movs	r3, #0
 8000bc6:	82bb      	strh	r3, [r7, #20]
 8000bc8:	e014      	b.n	8000bf4 <update_display+0x64>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8000bca:	8abb      	ldrh	r3, [r7, #20]
 8000bcc:	4a24      	ldr	r2, [pc, #144]	; (8000c60 <update_display+0xd0>)
 8000bce:	1899      	adds	r1, r3, r2
 8000bd0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000bd4:	2201      	movs	r2, #1
 8000bd6:	4823      	ldr	r0, [pc, #140]	; (8000c64 <update_display+0xd4>)
 8000bd8:	f002 f85b 	bl	8002c92 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8000bdc:	2300      	movs	r3, #0
 8000bde:	74fb      	strb	r3, [r7, #19]
 8000be0:	e002      	b.n	8000be8 <update_display+0x58>
 8000be2:	7cfb      	ldrb	r3, [r7, #19]
 8000be4:	3301      	adds	r3, #1
 8000be6:	74fb      	strb	r3, [r7, #19]
 8000be8:	7cfb      	ldrb	r3, [r7, #19]
 8000bea:	2b09      	cmp	r3, #9
 8000bec:	d9f9      	bls.n	8000be2 <update_display+0x52>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8000bee:	8abb      	ldrh	r3, [r7, #20]
 8000bf0:	3301      	adds	r3, #1
 8000bf2:	82bb      	strh	r3, [r7, #20]
 8000bf4:	8abb      	ldrh	r3, [r7, #20]
 8000bf6:	2b05      	cmp	r3, #5
 8000bf8:	d9e7      	bls.n	8000bca <update_display+0x3a>
	}

	DC_HIGH();
 8000bfa:	2201      	movs	r2, #1
 8000bfc:	2101      	movs	r1, #1
 8000bfe:	4817      	ldr	r0, [pc, #92]	; (8000c5c <update_display+0xcc>)
 8000c00:	f000 fec0 	bl	8001984 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8000c04:	2300      	movs	r3, #0
 8000c06:	74bb      	strb	r3, [r7, #18]
 8000c08:	e002      	b.n	8000c10 <update_display+0x80>
 8000c0a:	7cbb      	ldrb	r3, [r7, #18]
 8000c0c:	3301      	adds	r3, #1
 8000c0e:	74bb      	strb	r3, [r7, #18]
 8000c10:	7cbb      	ldrb	r3, [r7, #18]
 8000c12:	2b4f      	cmp	r3, #79	; 0x4f
 8000c14:	d9f9      	bls.n	8000c0a <update_display+0x7a>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8000c16:	2300      	movs	r3, #0
 8000c18:	823b      	strh	r3, [r7, #16]
 8000c1a:	e014      	b.n	8000c46 <update_display+0xb6>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8000c1c:	8a3b      	ldrh	r3, [r7, #16]
 8000c1e:	4a12      	ldr	r2, [pc, #72]	; (8000c68 <update_display+0xd8>)
 8000c20:	1899      	adds	r1, r3, r2
 8000c22:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000c26:	2201      	movs	r2, #1
 8000c28:	480e      	ldr	r0, [pc, #56]	; (8000c64 <update_display+0xd4>)
 8000c2a:	f002 f832 	bl	8002c92 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8000c2e:	2300      	movs	r3, #0
 8000c30:	73fb      	strb	r3, [r7, #15]
 8000c32:	e002      	b.n	8000c3a <update_display+0xaa>
 8000c34:	7bfb      	ldrb	r3, [r7, #15]
 8000c36:	3301      	adds	r3, #1
 8000c38:	73fb      	strb	r3, [r7, #15]
 8000c3a:	7bfb      	ldrb	r3, [r7, #15]
 8000c3c:	2b09      	cmp	r3, #9
 8000c3e:	d9f9      	bls.n	8000c34 <update_display+0xa4>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8000c40:	8a3b      	ldrh	r3, [r7, #16]
 8000c42:	3301      	adds	r3, #1
 8000c44:	823b      	strh	r3, [r7, #16]
 8000c46:	8a3b      	ldrh	r3, [r7, #16]
 8000c48:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000c4c:	d3e6      	bcc.n	8000c1c <update_display+0x8c>
	}

	raise_all_CS();
 8000c4e:	f7ff fedb 	bl	8000a08 <raise_all_CS>
}
 8000c52:	bf00      	nop
 8000c54:	3718      	adds	r7, #24
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40020000 	.word	0x40020000
 8000c60:	2000142c 	.word	0x2000142c
 8000c64:	200014b0 	.word	0x200014b0
 8000c68:	20001594 	.word	0x20001594

08000c6c <update_all_displays>:

void update_all_displays() {
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
	DC_LOW();
 8000c72:	2200      	movs	r2, #0
 8000c74:	2101      	movs	r1, #1
 8000c76:	482e      	ldr	r0, [pc, #184]	; (8000d30 <update_all_displays+0xc4>)
 8000c78:	f000 fe84 	bl	8001984 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000c7c:	2001      	movs	r0, #1
 8000c7e:	f000 fbf3 	bl	8001468 <HAL_Delay>
	drop_all_CS();
 8000c82:	f7ff fea5 	bl	80009d0 <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8000c86:	2300      	movs	r3, #0
 8000c88:	73fb      	strb	r3, [r7, #15]
 8000c8a:	e002      	b.n	8000c92 <update_all_displays+0x26>
 8000c8c:	7bfb      	ldrb	r3, [r7, #15]
 8000c8e:	3301      	adds	r3, #1
 8000c90:	73fb      	strb	r3, [r7, #15]
 8000c92:	7bfb      	ldrb	r3, [r7, #15]
 8000c94:	2b4f      	cmp	r3, #79	; 0x4f
 8000c96:	d9f9      	bls.n	8000c8c <update_all_displays+0x20>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8000c98:	2300      	movs	r3, #0
 8000c9a:	81bb      	strh	r3, [r7, #12]
 8000c9c:	e014      	b.n	8000cc8 <update_all_displays+0x5c>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8000c9e:	89bb      	ldrh	r3, [r7, #12]
 8000ca0:	4a24      	ldr	r2, [pc, #144]	; (8000d34 <update_all_displays+0xc8>)
 8000ca2:	1899      	adds	r1, r3, r2
 8000ca4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ca8:	2201      	movs	r2, #1
 8000caa:	4823      	ldr	r0, [pc, #140]	; (8000d38 <update_all_displays+0xcc>)
 8000cac:	f001 fff1 	bl	8002c92 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8000cb0:	2300      	movs	r3, #0
 8000cb2:	72fb      	strb	r3, [r7, #11]
 8000cb4:	e002      	b.n	8000cbc <update_all_displays+0x50>
 8000cb6:	7afb      	ldrb	r3, [r7, #11]
 8000cb8:	3301      	adds	r3, #1
 8000cba:	72fb      	strb	r3, [r7, #11]
 8000cbc:	7afb      	ldrb	r3, [r7, #11]
 8000cbe:	2b09      	cmp	r3, #9
 8000cc0:	d9f9      	bls.n	8000cb6 <update_all_displays+0x4a>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8000cc2:	89bb      	ldrh	r3, [r7, #12]
 8000cc4:	3301      	adds	r3, #1
 8000cc6:	81bb      	strh	r3, [r7, #12]
 8000cc8:	89bb      	ldrh	r3, [r7, #12]
 8000cca:	2b05      	cmp	r3, #5
 8000ccc:	d9e7      	bls.n	8000c9e <update_all_displays+0x32>
	}

	DC_HIGH();
 8000cce:	2201      	movs	r2, #1
 8000cd0:	2101      	movs	r1, #1
 8000cd2:	4817      	ldr	r0, [pc, #92]	; (8000d30 <update_all_displays+0xc4>)
 8000cd4:	f000 fe56 	bl	8001984 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8000cd8:	2300      	movs	r3, #0
 8000cda:	72bb      	strb	r3, [r7, #10]
 8000cdc:	e002      	b.n	8000ce4 <update_all_displays+0x78>
 8000cde:	7abb      	ldrb	r3, [r7, #10]
 8000ce0:	3301      	adds	r3, #1
 8000ce2:	72bb      	strb	r3, [r7, #10]
 8000ce4:	7abb      	ldrb	r3, [r7, #10]
 8000ce6:	2b4f      	cmp	r3, #79	; 0x4f
 8000ce8:	d9f9      	bls.n	8000cde <update_all_displays+0x72>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8000cea:	2300      	movs	r3, #0
 8000cec:	813b      	strh	r3, [r7, #8]
 8000cee:	e014      	b.n	8000d1a <update_all_displays+0xae>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8000cf0:	893b      	ldrh	r3, [r7, #8]
 8000cf2:	4a12      	ldr	r2, [pc, #72]	; (8000d3c <update_all_displays+0xd0>)
 8000cf4:	1899      	adds	r1, r3, r2
 8000cf6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000cfa:	2201      	movs	r2, #1
 8000cfc:	480e      	ldr	r0, [pc, #56]	; (8000d38 <update_all_displays+0xcc>)
 8000cfe:	f001 ffc8 	bl	8002c92 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8000d02:	2300      	movs	r3, #0
 8000d04:	71fb      	strb	r3, [r7, #7]
 8000d06:	e002      	b.n	8000d0e <update_all_displays+0xa2>
 8000d08:	79fb      	ldrb	r3, [r7, #7]
 8000d0a:	3301      	adds	r3, #1
 8000d0c:	71fb      	strb	r3, [r7, #7]
 8000d0e:	79fb      	ldrb	r3, [r7, #7]
 8000d10:	2b09      	cmp	r3, #9
 8000d12:	d9f9      	bls.n	8000d08 <update_all_displays+0x9c>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8000d14:	893b      	ldrh	r3, [r7, #8]
 8000d16:	3301      	adds	r3, #1
 8000d18:	813b      	strh	r3, [r7, #8]
 8000d1a:	893b      	ldrh	r3, [r7, #8]
 8000d1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d20:	d3e6      	bcc.n	8000cf0 <update_all_displays+0x84>
	}
	raise_all_CS();
 8000d22:	f7ff fe71 	bl	8000a08 <raise_all_CS>
}
 8000d26:	bf00      	nop
 8000d28:	3710      	adds	r7, #16
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	bd80      	pop	{r7, pc}
 8000d2e:	bf00      	nop
 8000d30:	40020000 	.word	0x40020000
 8000d34:	2000142c 	.word	0x2000142c
 8000d38:	200014b0 	.word	0x200014b0
 8000d3c:	20001594 	.word	0x20001594

08000d40 <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 8000d40:	b480      	push	{r7}
 8000d42:	b083      	sub	sp, #12
 8000d44:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8000d46:	2300      	movs	r3, #0
 8000d48:	80fb      	strh	r3, [r7, #6]
 8000d4a:	e006      	b.n	8000d5a <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 8000d4c:	88fb      	ldrh	r3, [r7, #6]
 8000d4e:	4a08      	ldr	r2, [pc, #32]	; (8000d70 <erase_buffer+0x30>)
 8000d50:	2100      	movs	r1, #0
 8000d52:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8000d54:	88fb      	ldrh	r3, [r7, #6]
 8000d56:	3301      	adds	r3, #1
 8000d58:	80fb      	strh	r3, [r7, #6]
 8000d5a:	88fb      	ldrh	r3, [r7, #6]
 8000d5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8000d60:	d3f4      	bcc.n	8000d4c <erase_buffer+0xc>
	}
}
 8000d62:	bf00      	nop
 8000d64:	bf00      	nop
 8000d66:	370c      	adds	r7, #12
 8000d68:	46bd      	mov	sp, r7
 8000d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6e:	4770      	bx	lr
 8000d70:	20001594 	.word	0x20001594

08000d74 <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	71fb      	strb	r3, [r7, #7]
 8000d7e:	460b      	mov	r3, r1
 8000d80:	71bb      	strb	r3, [r7, #6]
 8000d82:	4613      	mov	r3, r2
 8000d84:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8000d86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d8a:	2b00      	cmp	r3, #0
 8000d8c:	db3d      	blt.n	8000e0a <draw_pixel+0x96>
 8000d8e:	79bb      	ldrb	r3, [r7, #6]
 8000d90:	2b1f      	cmp	r3, #31
 8000d92:	d83a      	bhi.n	8000e0a <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 8000d94:	797b      	ldrb	r3, [r7, #5]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d01a      	beq.n	8000dd0 <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 8000d9a:	79fa      	ldrb	r2, [r7, #7]
 8000d9c:	79bb      	ldrb	r3, [r7, #6]
 8000d9e:	08db      	lsrs	r3, r3, #3
 8000da0:	b2d8      	uxtb	r0, r3
 8000da2:	4603      	mov	r3, r0
 8000da4:	01db      	lsls	r3, r3, #7
 8000da6:	4413      	add	r3, r2
 8000da8:	4a1b      	ldr	r2, [pc, #108]	; (8000e18 <draw_pixel+0xa4>)
 8000daa:	5cd3      	ldrb	r3, [r2, r3]
 8000dac:	b25a      	sxtb	r2, r3
 8000dae:	79bb      	ldrb	r3, [r7, #6]
 8000db0:	f003 0307 	and.w	r3, r3, #7
 8000db4:	2101      	movs	r1, #1
 8000db6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dba:	b25b      	sxtb	r3, r3
 8000dbc:	4313      	orrs	r3, r2
 8000dbe:	b259      	sxtb	r1, r3
 8000dc0:	79fa      	ldrb	r2, [r7, #7]
 8000dc2:	4603      	mov	r3, r0
 8000dc4:	01db      	lsls	r3, r3, #7
 8000dc6:	4413      	add	r3, r2
 8000dc8:	b2c9      	uxtb	r1, r1
 8000dca:	4a13      	ldr	r2, [pc, #76]	; (8000e18 <draw_pixel+0xa4>)
 8000dcc:	54d1      	strb	r1, [r2, r3]
 8000dce:	e01d      	b.n	8000e0c <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 8000dd0:	79fa      	ldrb	r2, [r7, #7]
 8000dd2:	79bb      	ldrb	r3, [r7, #6]
 8000dd4:	08db      	lsrs	r3, r3, #3
 8000dd6:	b2d8      	uxtb	r0, r3
 8000dd8:	4603      	mov	r3, r0
 8000dda:	01db      	lsls	r3, r3, #7
 8000ddc:	4413      	add	r3, r2
 8000dde:	4a0e      	ldr	r2, [pc, #56]	; (8000e18 <draw_pixel+0xa4>)
 8000de0:	5cd3      	ldrb	r3, [r2, r3]
 8000de2:	b25a      	sxtb	r2, r3
 8000de4:	79bb      	ldrb	r3, [r7, #6]
 8000de6:	f003 0307 	and.w	r3, r3, #7
 8000dea:	2101      	movs	r1, #1
 8000dec:	fa01 f303 	lsl.w	r3, r1, r3
 8000df0:	b25b      	sxtb	r3, r3
 8000df2:	43db      	mvns	r3, r3
 8000df4:	b25b      	sxtb	r3, r3
 8000df6:	4013      	ands	r3, r2
 8000df8:	b259      	sxtb	r1, r3
 8000dfa:	79fa      	ldrb	r2, [r7, #7]
 8000dfc:	4603      	mov	r3, r0
 8000dfe:	01db      	lsls	r3, r3, #7
 8000e00:	4413      	add	r3, r2
 8000e02:	b2c9      	uxtb	r1, r1
 8000e04:	4a04      	ldr	r2, [pc, #16]	; (8000e18 <draw_pixel+0xa4>)
 8000e06:	54d1      	strb	r1, [r2, r3]
 8000e08:	e000      	b.n	8000e0c <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8000e0a:	bf00      	nop
	}
}
 8000e0c:	370c      	adds	r7, #12
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr
 8000e16:	bf00      	nop
 8000e18:	20001594 	.word	0x20001594

08000e1c <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 8000e1c:	b590      	push	{r4, r7, lr}
 8000e1e:	b085      	sub	sp, #20
 8000e20:	af02      	add	r7, sp, #8
 8000e22:	4604      	mov	r4, r0
 8000e24:	4608      	mov	r0, r1
 8000e26:	4611      	mov	r1, r2
 8000e28:	461a      	mov	r2, r3
 8000e2a:	4623      	mov	r3, r4
 8000e2c:	71fb      	strb	r3, [r7, #7]
 8000e2e:	4603      	mov	r3, r0
 8000e30:	71bb      	strb	r3, [r7, #6]
 8000e32:	460b      	mov	r3, r1
 8000e34:	717b      	strb	r3, [r7, #5]
 8000e36:	4613      	mov	r3, r2
 8000e38:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 8000e3a:	79fb      	ldrb	r3, [r7, #7]
 8000e3c:	2b1f      	cmp	r3, #31
 8000e3e:	d913      	bls.n	8000e68 <draw_char+0x4c>
 8000e40:	79fb      	ldrb	r3, [r7, #7]
 8000e42:	2b7e      	cmp	r3, #126	; 0x7e
 8000e44:	d810      	bhi.n	8000e68 <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 8000e46:	79fb      	ldrb	r3, [r7, #7]
 8000e48:	3b20      	subs	r3, #32
 8000e4a:	2236      	movs	r2, #54	; 0x36
 8000e4c:	fb02 f303 	mul.w	r3, r2, r3
 8000e50:	4a07      	ldr	r2, [pc, #28]	; (8000e70 <draw_char+0x54>)
 8000e52:	1898      	adds	r0, r3, r2
 8000e54:	797a      	ldrb	r2, [r7, #5]
 8000e56:	79b9      	ldrb	r1, [r7, #6]
 8000e58:	793b      	ldrb	r3, [r7, #4]
 8000e5a:	9301      	str	r3, [sp, #4]
 8000e5c:	231b      	movs	r3, #27
 8000e5e:	9300      	str	r3, [sp, #0]
 8000e60:	230c      	movs	r3, #12
 8000e62:	f000 f807 	bl	8000e74 <draw_bmp>
 8000e66:	e000      	b.n	8000e6a <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 8000e68:	bf00      	nop
}
 8000e6a:	370c      	adds	r7, #12
 8000e6c:	46bd      	mov	sp, r7
 8000e6e:	bd90      	pop	{r4, r7, pc}
 8000e70:	20000000 	.word	0x20000000

08000e74 <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b084      	sub	sp, #16
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
 8000e7c:	4608      	mov	r0, r1
 8000e7e:	4611      	mov	r1, r2
 8000e80:	461a      	mov	r2, r3
 8000e82:	4603      	mov	r3, r0
 8000e84:	70fb      	strb	r3, [r7, #3]
 8000e86:	460b      	mov	r3, r1
 8000e88:	70bb      	strb	r3, [r7, #2]
 8000e8a:	4613      	mov	r3, r2
 8000e8c:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 8000e8e:	787b      	ldrb	r3, [r7, #1]
 8000e90:	3307      	adds	r3, #7
 8000e92:	2b00      	cmp	r3, #0
 8000e94:	da00      	bge.n	8000e98 <draw_bmp+0x24>
 8000e96:	3307      	adds	r3, #7
 8000e98:	10db      	asrs	r3, r3, #3
 8000e9a:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 8000e9c:	2300      	movs	r3, #0
 8000e9e:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 8000ea0:	2300      	movs	r3, #0
 8000ea2:	81bb      	strh	r3, [r7, #12]
 8000ea4:	e047      	b.n	8000f36 <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	817b      	strh	r3, [r7, #10]
 8000eaa:	e036      	b.n	8000f1a <draw_bmp+0xa6>
			if (i & 7)
 8000eac:	897b      	ldrh	r3, [r7, #10]
 8000eae:	f003 0307 	and.w	r3, r3, #7
 8000eb2:	2b00      	cmp	r3, #0
 8000eb4:	d003      	beq.n	8000ebe <draw_bmp+0x4a>
				b <<= 1;
 8000eb6:	7bfb      	ldrb	r3, [r7, #15]
 8000eb8:	005b      	lsls	r3, r3, #1
 8000eba:	73fb      	strb	r3, [r7, #15]
 8000ebc:	e012      	b.n	8000ee4 <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 8000ebe:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000ec2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8000ec6:	fb03 f202 	mul.w	r2, r3, r2
 8000eca:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000ece:	2b00      	cmp	r3, #0
 8000ed0:	da00      	bge.n	8000ed4 <draw_bmp+0x60>
 8000ed2:	3307      	adds	r3, #7
 8000ed4:	10db      	asrs	r3, r3, #3
 8000ed6:	b21b      	sxth	r3, r3
 8000ed8:	4413      	add	r3, r2
 8000eda:	461a      	mov	r2, r3
 8000edc:	687b      	ldr	r3, [r7, #4]
 8000ede:	4413      	add	r3, r2
 8000ee0:	781b      	ldrb	r3, [r3, #0]
 8000ee2:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 8000ee4:	897b      	ldrh	r3, [r7, #10]
 8000ee6:	b2da      	uxtb	r2, r3
 8000ee8:	78fb      	ldrb	r3, [r7, #3]
 8000eea:	4413      	add	r3, r2
 8000eec:	b2d8      	uxtb	r0, r3
 8000eee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000ef2:	2b00      	cmp	r3, #0
 8000ef4:	db06      	blt.n	8000f04 <draw_bmp+0x90>
 8000ef6:	7f3b      	ldrb	r3, [r7, #28]
 8000ef8:	2b00      	cmp	r3, #0
 8000efa:	bf0c      	ite	eq
 8000efc:	2301      	moveq	r3, #1
 8000efe:	2300      	movne	r3, #0
 8000f00:	b2db      	uxtb	r3, r3
 8000f02:	e000      	b.n	8000f06 <draw_bmp+0x92>
 8000f04:	7f3b      	ldrb	r3, [r7, #28]
 8000f06:	78b9      	ldrb	r1, [r7, #2]
 8000f08:	461a      	mov	r2, r3
 8000f0a:	f7ff ff33 	bl	8000d74 <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 8000f0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8000f12:	b29b      	uxth	r3, r3
 8000f14:	3301      	adds	r3, #1
 8000f16:	b29b      	uxth	r3, r3
 8000f18:	817b      	strh	r3, [r7, #10]
 8000f1a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8000f1e:	787b      	ldrb	r3, [r7, #1]
 8000f20:	429a      	cmp	r2, r3
 8000f22:	dbc3      	blt.n	8000eac <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 8000f24:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8000f28:	b29b      	uxth	r3, r3
 8000f2a:	3301      	adds	r3, #1
 8000f2c:	b29b      	uxth	r3, r3
 8000f2e:	81bb      	strh	r3, [r7, #12]
 8000f30:	78bb      	ldrb	r3, [r7, #2]
 8000f32:	3301      	adds	r3, #1
 8000f34:	70bb      	strb	r3, [r7, #2]
 8000f36:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8000f3a:	7e3b      	ldrb	r3, [r7, #24]
 8000f3c:	429a      	cmp	r2, r3
 8000f3e:	dbb2      	blt.n	8000ea6 <draw_bmp+0x32>
		}
	}
}
 8000f40:	bf00      	nop
 8000f42:	bf00      	nop
 8000f44:	3710      	adds	r7, #16
 8000f46:	46bd      	mov	sp, r7
 8000f48:	bd80      	pop	{r7, pc}

08000f4a <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 8000f4a:	b580      	push	{r7, lr}
 8000f4c:	b084      	sub	sp, #16
 8000f4e:	af00      	add	r7, sp, #0
 8000f50:	6078      	str	r0, [r7, #4]
 8000f52:	460b      	mov	r3, r1
 8000f54:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 8000f56:	6878      	ldr	r0, [r7, #4]
 8000f58:	f7ff f93c 	bl	80001d4 <strlen>
 8000f5c:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 8000f5e:	68fb      	ldr	r3, [r7, #12]
 8000f60:	2b00      	cmp	r3, #0
 8000f62:	d02c      	beq.n	8000fbe <draw_string+0x74>
 8000f64:	68fb      	ldr	r3, [r7, #12]
 8000f66:	2b0a      	cmp	r3, #10
 8000f68:	d829      	bhi.n	8000fbe <draw_string+0x74>

    uint8_t x = DISPLAY_WIDTH/2;
 8000f6a:	2340      	movs	r3, #64	; 0x40
 8000f6c:	72fb      	strb	r3, [r7, #11]
    if (len%2) {
 8000f6e:	68fb      	ldr	r3, [r7, #12]
 8000f70:	f003 0301 	and.w	r3, r3, #1
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d005      	beq.n	8000f84 <draw_string+0x3a>
        x -= FONT_WIDTH/2;
 8000f78:	7afb      	ldrb	r3, [r7, #11]
 8000f7a:	3b06      	subs	r3, #6
 8000f7c:	72fb      	strb	r3, [r7, #11]
        len -= 1;
 8000f7e:	68fb      	ldr	r3, [r7, #12]
 8000f80:	3b01      	subs	r3, #1
 8000f82:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 8000f84:	68fa      	ldr	r2, [r7, #12]
 8000f86:	4613      	mov	r3, r2
 8000f88:	005b      	lsls	r3, r3, #1
 8000f8a:	4413      	add	r3, r2
 8000f8c:	009b      	lsls	r3, r3, #2
 8000f8e:	085b      	lsrs	r3, r3, #1
 8000f90:	b2db      	uxtb	r3, r3
 8000f92:	7afa      	ldrb	r2, [r7, #11]
 8000f94:	1ad3      	subs	r3, r2, r3
 8000f96:	72fb      	strb	r3, [r7, #11]

    while(*str) {
 8000f98:	e00c      	b.n	8000fb4 <draw_string+0x6a>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	7818      	ldrb	r0, [r3, #0]
 8000f9e:	78fb      	ldrb	r3, [r7, #3]
 8000fa0:	7af9      	ldrb	r1, [r7, #11]
 8000fa2:	2203      	movs	r2, #3
 8000fa4:	f7ff ff3a 	bl	8000e1c <draw_char>
        x += FONT_WIDTH;
 8000fa8:	7afb      	ldrb	r3, [r7, #11]
 8000faa:	330c      	adds	r3, #12
 8000fac:	72fb      	strb	r3, [r7, #11]
        ++str;
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	3301      	adds	r3, #1
 8000fb2:	607b      	str	r3, [r7, #4]
    while(*str) {
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	781b      	ldrb	r3, [r3, #0]
 8000fb8:	2b00      	cmp	r3, #0
 8000fba:	d1ee      	bne.n	8000f9a <draw_string+0x50>
 8000fbc:	e000      	b.n	8000fc0 <draw_string+0x76>
    if (len <= 0 || len > 10) return;
 8000fbe:	bf00      	nop
    }
}
 8000fc0:	3710      	adds	r7, #16
 8000fc2:	46bd      	mov	sp, r7
 8000fc4:	bd80      	pop	{r7, pc}
	...

08000fc8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000fc8:	b580      	push	{r7, lr}
 8000fca:	b082      	sub	sp, #8
 8000fcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000fce:	2300      	movs	r3, #0
 8000fd0:	607b      	str	r3, [r7, #4]
 8000fd2:	4b10      	ldr	r3, [pc, #64]	; (8001014 <HAL_MspInit+0x4c>)
 8000fd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fd6:	4a0f      	ldr	r2, [pc, #60]	; (8001014 <HAL_MspInit+0x4c>)
 8000fd8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fdc:	6453      	str	r3, [r2, #68]	; 0x44
 8000fde:	4b0d      	ldr	r3, [pc, #52]	; (8001014 <HAL_MspInit+0x4c>)
 8000fe0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000fe2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000fe6:	607b      	str	r3, [r7, #4]
 8000fe8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fea:	2300      	movs	r3, #0
 8000fec:	603b      	str	r3, [r7, #0]
 8000fee:	4b09      	ldr	r3, [pc, #36]	; (8001014 <HAL_MspInit+0x4c>)
 8000ff0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ff2:	4a08      	ldr	r2, [pc, #32]	; (8001014 <HAL_MspInit+0x4c>)
 8000ff4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ff8:	6413      	str	r3, [r2, #64]	; 0x40
 8000ffa:	4b06      	ldr	r3, [pc, #24]	; (8001014 <HAL_MspInit+0x4c>)
 8000ffc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ffe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001002:	603b      	str	r3, [r7, #0]
 8001004:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001006:	2007      	movs	r0, #7
 8001008:	f000 fb04 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800100c:	bf00      	nop
 800100e:	3708      	adds	r7, #8
 8001010:	46bd      	mov	sp, r7
 8001012:	bd80      	pop	{r7, pc}
 8001014:	40023800 	.word	0x40023800

08001018 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001018:	b580      	push	{r7, lr}
 800101a:	b08a      	sub	sp, #40	; 0x28
 800101c:	af00      	add	r7, sp, #0
 800101e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001020:	f107 0314 	add.w	r3, r7, #20
 8001024:	2200      	movs	r2, #0
 8001026:	601a      	str	r2, [r3, #0]
 8001028:	605a      	str	r2, [r3, #4]
 800102a:	609a      	str	r2, [r3, #8]
 800102c:	60da      	str	r2, [r3, #12]
 800102e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	681b      	ldr	r3, [r3, #0]
 8001034:	4a19      	ldr	r2, [pc, #100]	; (800109c <HAL_I2C_MspInit+0x84>)
 8001036:	4293      	cmp	r3, r2
 8001038:	d12c      	bne.n	8001094 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800103a:	2300      	movs	r3, #0
 800103c:	613b      	str	r3, [r7, #16]
 800103e:	4b18      	ldr	r3, [pc, #96]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 8001040:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001042:	4a17      	ldr	r2, [pc, #92]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 8001044:	f043 0302 	orr.w	r3, r3, #2
 8001048:	6313      	str	r3, [r2, #48]	; 0x30
 800104a:	4b15      	ldr	r3, [pc, #84]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 800104c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800104e:	f003 0302 	and.w	r3, r3, #2
 8001052:	613b      	str	r3, [r7, #16]
 8001054:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001056:	f44f 7340 	mov.w	r3, #768	; 0x300
 800105a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800105c:	2312      	movs	r3, #18
 800105e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001060:	2300      	movs	r3, #0
 8001062:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001064:	2303      	movs	r3, #3
 8001066:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001068:	2304      	movs	r3, #4
 800106a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800106c:	f107 0314 	add.w	r3, r7, #20
 8001070:	4619      	mov	r1, r3
 8001072:	480c      	ldr	r0, [pc, #48]	; (80010a4 <HAL_I2C_MspInit+0x8c>)
 8001074:	f000 fb02 	bl	800167c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001078:	2300      	movs	r3, #0
 800107a:	60fb      	str	r3, [r7, #12]
 800107c:	4b08      	ldr	r3, [pc, #32]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 800107e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001080:	4a07      	ldr	r2, [pc, #28]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 8001082:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001086:	6413      	str	r3, [r2, #64]	; 0x40
 8001088:	4b05      	ldr	r3, [pc, #20]	; (80010a0 <HAL_I2C_MspInit+0x88>)
 800108a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001090:	60fb      	str	r3, [r7, #12]
 8001092:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001094:	bf00      	nop
 8001096:	3728      	adds	r7, #40	; 0x28
 8001098:	46bd      	mov	sp, r7
 800109a:	bd80      	pop	{r7, pc}
 800109c:	40005400 	.word	0x40005400
 80010a0:	40023800 	.word	0x40023800
 80010a4:	40020400 	.word	0x40020400

080010a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b08a      	sub	sp, #40	; 0x28
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010b0:	f107 0314 	add.w	r3, r7, #20
 80010b4:	2200      	movs	r2, #0
 80010b6:	601a      	str	r2, [r3, #0]
 80010b8:	605a      	str	r2, [r3, #4]
 80010ba:	609a      	str	r2, [r3, #8]
 80010bc:	60da      	str	r2, [r3, #12]
 80010be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80010c0:	687b      	ldr	r3, [r7, #4]
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	4a28      	ldr	r2, [pc, #160]	; (8001168 <HAL_SPI_MspInit+0xc0>)
 80010c6:	4293      	cmp	r3, r2
 80010c8:	d14a      	bne.n	8001160 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80010ca:	2300      	movs	r3, #0
 80010cc:	613b      	str	r3, [r7, #16]
 80010ce:	4b27      	ldr	r3, [pc, #156]	; (800116c <HAL_SPI_MspInit+0xc4>)
 80010d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d2:	4a26      	ldr	r2, [pc, #152]	; (800116c <HAL_SPI_MspInit+0xc4>)
 80010d4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80010d8:	6413      	str	r3, [r2, #64]	; 0x40
 80010da:	4b24      	ldr	r3, [pc, #144]	; (800116c <HAL_SPI_MspInit+0xc4>)
 80010dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010de:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80010e2:	613b      	str	r3, [r7, #16]
 80010e4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e6:	2300      	movs	r3, #0
 80010e8:	60fb      	str	r3, [r7, #12]
 80010ea:	4b20      	ldr	r3, [pc, #128]	; (800116c <HAL_SPI_MspInit+0xc4>)
 80010ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ee:	4a1f      	ldr	r2, [pc, #124]	; (800116c <HAL_SPI_MspInit+0xc4>)
 80010f0:	f043 0304 	orr.w	r3, r3, #4
 80010f4:	6313      	str	r3, [r2, #48]	; 0x30
 80010f6:	4b1d      	ldr	r3, [pc, #116]	; (800116c <HAL_SPI_MspInit+0xc4>)
 80010f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010fa:	f003 0304 	and.w	r3, r3, #4
 80010fe:	60fb      	str	r3, [r7, #12]
 8001100:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001102:	2300      	movs	r3, #0
 8001104:	60bb      	str	r3, [r7, #8]
 8001106:	4b19      	ldr	r3, [pc, #100]	; (800116c <HAL_SPI_MspInit+0xc4>)
 8001108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800110a:	4a18      	ldr	r2, [pc, #96]	; (800116c <HAL_SPI_MspInit+0xc4>)
 800110c:	f043 0302 	orr.w	r3, r3, #2
 8001110:	6313      	str	r3, [r2, #48]	; 0x30
 8001112:	4b16      	ldr	r3, [pc, #88]	; (800116c <HAL_SPI_MspInit+0xc4>)
 8001114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001116:	f003 0302 	and.w	r3, r3, #2
 800111a:	60bb      	str	r3, [r7, #8]
 800111c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800111e:	2308      	movs	r3, #8
 8001120:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001122:	2302      	movs	r3, #2
 8001124:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001126:	2300      	movs	r3, #0
 8001128:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800112a:	2303      	movs	r3, #3
 800112c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800112e:	2305      	movs	r3, #5
 8001130:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001132:	f107 0314 	add.w	r3, r7, #20
 8001136:	4619      	mov	r1, r3
 8001138:	480d      	ldr	r0, [pc, #52]	; (8001170 <HAL_SPI_MspInit+0xc8>)
 800113a:	f000 fa9f 	bl	800167c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800113e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001142:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001144:	2302      	movs	r3, #2
 8001146:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001148:	2300      	movs	r3, #0
 800114a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800114c:	2303      	movs	r3, #3
 800114e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001150:	2305      	movs	r3, #5
 8001152:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001154:	f107 0314 	add.w	r3, r7, #20
 8001158:	4619      	mov	r1, r3
 800115a:	4806      	ldr	r0, [pc, #24]	; (8001174 <HAL_SPI_MspInit+0xcc>)
 800115c:	f000 fa8e 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001160:	bf00      	nop
 8001162:	3728      	adds	r7, #40	; 0x28
 8001164:	46bd      	mov	sp, r7
 8001166:	bd80      	pop	{r7, pc}
 8001168:	40003800 	.word	0x40003800
 800116c:	40023800 	.word	0x40023800
 8001170:	40020800 	.word	0x40020800
 8001174:	40020400 	.word	0x40020400

08001178 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001178:	b480      	push	{r7}
 800117a:	b085      	sub	sp, #20
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	681b      	ldr	r3, [r3, #0]
 8001184:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001188:	d10d      	bne.n	80011a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800118a:	2300      	movs	r3, #0
 800118c:	60fb      	str	r3, [r7, #12]
 800118e:	4b09      	ldr	r3, [pc, #36]	; (80011b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001190:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001192:	4a08      	ldr	r2, [pc, #32]	; (80011b4 <HAL_TIM_Base_MspInit+0x3c>)
 8001194:	f043 0301 	orr.w	r3, r3, #1
 8001198:	6413      	str	r3, [r2, #64]	; 0x40
 800119a:	4b06      	ldr	r3, [pc, #24]	; (80011b4 <HAL_TIM_Base_MspInit+0x3c>)
 800119c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800119e:	f003 0301 	and.w	r3, r3, #1
 80011a2:	60fb      	str	r3, [r7, #12]
 80011a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 80011a6:	bf00      	nop
 80011a8:	3714      	adds	r7, #20
 80011aa:	46bd      	mov	sp, r7
 80011ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011b0:	4770      	bx	lr
 80011b2:	bf00      	nop
 80011b4:	40023800 	.word	0x40023800

080011b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	b088      	sub	sp, #32
 80011bc:	af00      	add	r7, sp, #0
 80011be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011c0:	f107 030c 	add.w	r3, r7, #12
 80011c4:	2200      	movs	r2, #0
 80011c6:	601a      	str	r2, [r3, #0]
 80011c8:	605a      	str	r2, [r3, #4]
 80011ca:	609a      	str	r2, [r3, #8]
 80011cc:	60da      	str	r2, [r3, #12]
 80011ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80011d0:	687b      	ldr	r3, [r7, #4]
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80011d8:	d11e      	bne.n	8001218 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80011da:	2300      	movs	r3, #0
 80011dc:	60bb      	str	r3, [r7, #8]
 80011de:	4b10      	ldr	r3, [pc, #64]	; (8001220 <HAL_TIM_MspPostInit+0x68>)
 80011e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011e2:	4a0f      	ldr	r2, [pc, #60]	; (8001220 <HAL_TIM_MspPostInit+0x68>)
 80011e4:	f043 0302 	orr.w	r3, r3, #2
 80011e8:	6313      	str	r3, [r2, #48]	; 0x30
 80011ea:	4b0d      	ldr	r3, [pc, #52]	; (8001220 <HAL_TIM_MspPostInit+0x68>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	f003 0302 	and.w	r3, r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
 80011f4:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011f6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80011fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fc:	2302      	movs	r3, #2
 80011fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001200:	2300      	movs	r3, #0
 8001202:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001204:	2300      	movs	r3, #0
 8001206:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001208:	2301      	movs	r3, #1
 800120a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800120c:	f107 030c 	add.w	r3, r7, #12
 8001210:	4619      	mov	r1, r3
 8001212:	4804      	ldr	r0, [pc, #16]	; (8001224 <HAL_TIM_MspPostInit+0x6c>)
 8001214:	f000 fa32 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001218:	bf00      	nop
 800121a:	3720      	adds	r7, #32
 800121c:	46bd      	mov	sp, r7
 800121e:	bd80      	pop	{r7, pc}
 8001220:	40023800 	.word	0x40023800
 8001224:	40020400 	.word	0x40020400

08001228 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001228:	b580      	push	{r7, lr}
 800122a:	b08a      	sub	sp, #40	; 0x28
 800122c:	af00      	add	r7, sp, #0
 800122e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001230:	f107 0314 	add.w	r3, r7, #20
 8001234:	2200      	movs	r2, #0
 8001236:	601a      	str	r2, [r3, #0]
 8001238:	605a      	str	r2, [r3, #4]
 800123a:	609a      	str	r2, [r3, #8]
 800123c:	60da      	str	r2, [r3, #12]
 800123e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	681b      	ldr	r3, [r3, #0]
 8001244:	4a19      	ldr	r2, [pc, #100]	; (80012ac <HAL_UART_MspInit+0x84>)
 8001246:	4293      	cmp	r3, r2
 8001248:	d12c      	bne.n	80012a4 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800124a:	2300      	movs	r3, #0
 800124c:	613b      	str	r3, [r7, #16]
 800124e:	4b18      	ldr	r3, [pc, #96]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001250:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001252:	4a17      	ldr	r2, [pc, #92]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001254:	f043 0310 	orr.w	r3, r3, #16
 8001258:	6453      	str	r3, [r2, #68]	; 0x44
 800125a:	4b15      	ldr	r3, [pc, #84]	; (80012b0 <HAL_UART_MspInit+0x88>)
 800125c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800125e:	f003 0310 	and.w	r3, r3, #16
 8001262:	613b      	str	r3, [r7, #16]
 8001264:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001266:	2300      	movs	r3, #0
 8001268:	60fb      	str	r3, [r7, #12]
 800126a:	4b11      	ldr	r3, [pc, #68]	; (80012b0 <HAL_UART_MspInit+0x88>)
 800126c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126e:	4a10      	ldr	r2, [pc, #64]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001270:	f043 0301 	orr.w	r3, r3, #1
 8001274:	6313      	str	r3, [r2, #48]	; 0x30
 8001276:	4b0e      	ldr	r3, [pc, #56]	; (80012b0 <HAL_UART_MspInit+0x88>)
 8001278:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800127a:	f003 0301 	and.w	r3, r3, #1
 800127e:	60fb      	str	r3, [r7, #12]
 8001280:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001282:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001286:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001288:	2302      	movs	r3, #2
 800128a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800128c:	2300      	movs	r3, #0
 800128e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001290:	2303      	movs	r3, #3
 8001292:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001294:	2307      	movs	r3, #7
 8001296:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001298:	f107 0314 	add.w	r3, r7, #20
 800129c:	4619      	mov	r1, r3
 800129e:	4805      	ldr	r0, [pc, #20]	; (80012b4 <HAL_UART_MspInit+0x8c>)
 80012a0:	f000 f9ec 	bl	800167c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80012a4:	bf00      	nop
 80012a6:	3728      	adds	r7, #40	; 0x28
 80012a8:	46bd      	mov	sp, r7
 80012aa:	bd80      	pop	{r7, pc}
 80012ac:	40011000 	.word	0x40011000
 80012b0:	40023800 	.word	0x40023800
 80012b4:	40020000 	.word	0x40020000

080012b8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80012b8:	b480      	push	{r7}
 80012ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80012bc:	e7fe      	b.n	80012bc <NMI_Handler+0x4>

080012be <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80012be:	b480      	push	{r7}
 80012c0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80012c2:	e7fe      	b.n	80012c2 <HardFault_Handler+0x4>

080012c4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80012c4:	b480      	push	{r7}
 80012c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <MemManage_Handler+0x4>

080012ca <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80012ca:	b480      	push	{r7}
 80012cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80012ce:	e7fe      	b.n	80012ce <BusFault_Handler+0x4>

080012d0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80012d0:	b480      	push	{r7}
 80012d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80012d4:	e7fe      	b.n	80012d4 <UsageFault_Handler+0x4>

080012d6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80012d6:	b480      	push	{r7}
 80012d8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80012da:	bf00      	nop
 80012dc:	46bd      	mov	sp, r7
 80012de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012e2:	4770      	bx	lr

080012e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80012e4:	b480      	push	{r7}
 80012e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80012e8:	bf00      	nop
 80012ea:	46bd      	mov	sp, r7
 80012ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f0:	4770      	bx	lr

080012f2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80012f2:	b480      	push	{r7}
 80012f4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80012f6:	bf00      	nop
 80012f8:	46bd      	mov	sp, r7
 80012fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012fe:	4770      	bx	lr

08001300 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001300:	b580      	push	{r7, lr}
 8001302:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001304:	f000 f890 	bl	8001428 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001308:	bf00      	nop
 800130a:	bd80      	pop	{r7, pc}

0800130c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800130c:	b480      	push	{r7}
 800130e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001310:	4b06      	ldr	r3, [pc, #24]	; (800132c <SystemInit+0x20>)
 8001312:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001316:	4a05      	ldr	r2, [pc, #20]	; (800132c <SystemInit+0x20>)
 8001318:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800131c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001320:	bf00      	nop
 8001322:	46bd      	mov	sp, r7
 8001324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001328:	4770      	bx	lr
 800132a:	bf00      	nop
 800132c:	e000ed00 	.word	0xe000ed00

08001330 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001330:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001368 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001334:	480d      	ldr	r0, [pc, #52]	; (800136c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001336:	490e      	ldr	r1, [pc, #56]	; (8001370 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001338:	4a0e      	ldr	r2, [pc, #56]	; (8001374 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800133a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800133c:	e002      	b.n	8001344 <LoopCopyDataInit>

0800133e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800133e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001340:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001342:	3304      	adds	r3, #4

08001344 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001344:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001346:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001348:	d3f9      	bcc.n	800133e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800134a:	4a0b      	ldr	r2, [pc, #44]	; (8001378 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800134c:	4c0b      	ldr	r4, [pc, #44]	; (800137c <LoopFillZerobss+0x26>)
  movs r3, #0
 800134e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001350:	e001      	b.n	8001356 <LoopFillZerobss>

08001352 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001352:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001354:	3204      	adds	r2, #4

08001356 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001356:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001358:	d3fb      	bcc.n	8001352 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800135a:	f7ff ffd7 	bl	800130c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800135e:	f002 ff7d 	bl	800425c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001362:	f7ff f8c1 	bl	80004e8 <main>
  bx  lr    
 8001366:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001368:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800136c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001370:	20001440 	.word	0x20001440
  ldr r2, =_sidata
 8001374:	0800430c 	.word	0x0800430c
  ldr r2, =_sbss
 8001378:	20001440 	.word	0x20001440
  ldr r4, =_ebss
 800137c:	20001798 	.word	0x20001798

08001380 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001380:	e7fe      	b.n	8001380 <ADC_IRQHandler>
	...

08001384 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001384:	b580      	push	{r7, lr}
 8001386:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001388:	4b0e      	ldr	r3, [pc, #56]	; (80013c4 <HAL_Init+0x40>)
 800138a:	681b      	ldr	r3, [r3, #0]
 800138c:	4a0d      	ldr	r2, [pc, #52]	; (80013c4 <HAL_Init+0x40>)
 800138e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001392:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001394:	4b0b      	ldr	r3, [pc, #44]	; (80013c4 <HAL_Init+0x40>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	4a0a      	ldr	r2, [pc, #40]	; (80013c4 <HAL_Init+0x40>)
 800139a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800139e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80013a0:	4b08      	ldr	r3, [pc, #32]	; (80013c4 <HAL_Init+0x40>)
 80013a2:	681b      	ldr	r3, [r3, #0]
 80013a4:	4a07      	ldr	r2, [pc, #28]	; (80013c4 <HAL_Init+0x40>)
 80013a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80013aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80013ac:	2003      	movs	r0, #3
 80013ae:	f000 f931 	bl	8001614 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80013b2:	2000      	movs	r0, #0
 80013b4:	f000 f808 	bl	80013c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80013b8:	f7ff fe06 	bl	8000fc8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80013bc:	2300      	movs	r3, #0
}
 80013be:	4618      	mov	r0, r3
 80013c0:	bd80      	pop	{r7, pc}
 80013c2:	bf00      	nop
 80013c4:	40023c00 	.word	0x40023c00

080013c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b082      	sub	sp, #8
 80013cc:	af00      	add	r7, sp, #0
 80013ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80013d0:	4b12      	ldr	r3, [pc, #72]	; (800141c <HAL_InitTick+0x54>)
 80013d2:	681a      	ldr	r2, [r3, #0]
 80013d4:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_InitTick+0x58>)
 80013d6:	781b      	ldrb	r3, [r3, #0]
 80013d8:	4619      	mov	r1, r3
 80013da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80013de:	fbb3 f3f1 	udiv	r3, r3, r1
 80013e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80013e6:	4618      	mov	r0, r3
 80013e8:	f000 f93b 	bl	8001662 <HAL_SYSTICK_Config>
 80013ec:	4603      	mov	r3, r0
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d001      	beq.n	80013f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80013f2:	2301      	movs	r3, #1
 80013f4:	e00e      	b.n	8001414 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80013f6:	687b      	ldr	r3, [r7, #4]
 80013f8:	2b0f      	cmp	r3, #15
 80013fa:	d80a      	bhi.n	8001412 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80013fc:	2200      	movs	r2, #0
 80013fe:	6879      	ldr	r1, [r7, #4]
 8001400:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001404:	f000 f911 	bl	800162a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001408:	4a06      	ldr	r2, [pc, #24]	; (8001424 <HAL_InitTick+0x5c>)
 800140a:	687b      	ldr	r3, [r7, #4]
 800140c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800140e:	2300      	movs	r3, #0
 8001410:	e000      	b.n	8001414 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001412:	2301      	movs	r3, #1
}
 8001414:	4618      	mov	r0, r3
 8001416:	3708      	adds	r7, #8
 8001418:	46bd      	mov	sp, r7
 800141a:	bd80      	pop	{r7, pc}
 800141c:	20001434 	.word	0x20001434
 8001420:	2000143c 	.word	0x2000143c
 8001424:	20001438 	.word	0x20001438

08001428 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800142c:	4b06      	ldr	r3, [pc, #24]	; (8001448 <HAL_IncTick+0x20>)
 800142e:	781b      	ldrb	r3, [r3, #0]
 8001430:	461a      	mov	r2, r3
 8001432:	4b06      	ldr	r3, [pc, #24]	; (800144c <HAL_IncTick+0x24>)
 8001434:	681b      	ldr	r3, [r3, #0]
 8001436:	4413      	add	r3, r2
 8001438:	4a04      	ldr	r2, [pc, #16]	; (800144c <HAL_IncTick+0x24>)
 800143a:	6013      	str	r3, [r2, #0]
}
 800143c:	bf00      	nop
 800143e:	46bd      	mov	sp, r7
 8001440:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001444:	4770      	bx	lr
 8001446:	bf00      	nop
 8001448:	2000143c 	.word	0x2000143c
 800144c:	20001794 	.word	0x20001794

08001450 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001450:	b480      	push	{r7}
 8001452:	af00      	add	r7, sp, #0
  return uwTick;
 8001454:	4b03      	ldr	r3, [pc, #12]	; (8001464 <HAL_GetTick+0x14>)
 8001456:	681b      	ldr	r3, [r3, #0]
}
 8001458:	4618      	mov	r0, r3
 800145a:	46bd      	mov	sp, r7
 800145c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001460:	4770      	bx	lr
 8001462:	bf00      	nop
 8001464:	20001794 	.word	0x20001794

08001468 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001468:	b580      	push	{r7, lr}
 800146a:	b084      	sub	sp, #16
 800146c:	af00      	add	r7, sp, #0
 800146e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001470:	f7ff ffee 	bl	8001450 <HAL_GetTick>
 8001474:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001476:	687b      	ldr	r3, [r7, #4]
 8001478:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800147a:	68fb      	ldr	r3, [r7, #12]
 800147c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001480:	d005      	beq.n	800148e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001482:	4b0a      	ldr	r3, [pc, #40]	; (80014ac <HAL_Delay+0x44>)
 8001484:	781b      	ldrb	r3, [r3, #0]
 8001486:	461a      	mov	r2, r3
 8001488:	68fb      	ldr	r3, [r7, #12]
 800148a:	4413      	add	r3, r2
 800148c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800148e:	bf00      	nop
 8001490:	f7ff ffde 	bl	8001450 <HAL_GetTick>
 8001494:	4602      	mov	r2, r0
 8001496:	68bb      	ldr	r3, [r7, #8]
 8001498:	1ad3      	subs	r3, r2, r3
 800149a:	68fa      	ldr	r2, [r7, #12]
 800149c:	429a      	cmp	r2, r3
 800149e:	d8f7      	bhi.n	8001490 <HAL_Delay+0x28>
  {
  }
}
 80014a0:	bf00      	nop
 80014a2:	bf00      	nop
 80014a4:	3710      	adds	r7, #16
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	2000143c 	.word	0x2000143c

080014b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80014b0:	b480      	push	{r7}
 80014b2:	b085      	sub	sp, #20
 80014b4:	af00      	add	r7, sp, #0
 80014b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	f003 0307 	and.w	r3, r3, #7
 80014be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80014c0:	4b0c      	ldr	r3, [pc, #48]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80014c6:	68ba      	ldr	r2, [r7, #8]
 80014c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80014cc:	4013      	ands	r3, r2
 80014ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80014d0:	68fb      	ldr	r3, [r7, #12]
 80014d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80014d4:	68bb      	ldr	r3, [r7, #8]
 80014d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80014d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80014dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80014e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80014e2:	4a04      	ldr	r2, [pc, #16]	; (80014f4 <__NVIC_SetPriorityGrouping+0x44>)
 80014e4:	68bb      	ldr	r3, [r7, #8]
 80014e6:	60d3      	str	r3, [r2, #12]
}
 80014e8:	bf00      	nop
 80014ea:	3714      	adds	r7, #20
 80014ec:	46bd      	mov	sp, r7
 80014ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014f2:	4770      	bx	lr
 80014f4:	e000ed00 	.word	0xe000ed00

080014f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80014f8:	b480      	push	{r7}
 80014fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80014fc:	4b04      	ldr	r3, [pc, #16]	; (8001510 <__NVIC_GetPriorityGrouping+0x18>)
 80014fe:	68db      	ldr	r3, [r3, #12]
 8001500:	0a1b      	lsrs	r3, r3, #8
 8001502:	f003 0307 	and.w	r3, r3, #7
}
 8001506:	4618      	mov	r0, r3
 8001508:	46bd      	mov	sp, r7
 800150a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800150e:	4770      	bx	lr
 8001510:	e000ed00 	.word	0xe000ed00

08001514 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001514:	b480      	push	{r7}
 8001516:	b083      	sub	sp, #12
 8001518:	af00      	add	r7, sp, #0
 800151a:	4603      	mov	r3, r0
 800151c:	6039      	str	r1, [r7, #0]
 800151e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001520:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001524:	2b00      	cmp	r3, #0
 8001526:	db0a      	blt.n	800153e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001528:	683b      	ldr	r3, [r7, #0]
 800152a:	b2da      	uxtb	r2, r3
 800152c:	490c      	ldr	r1, [pc, #48]	; (8001560 <__NVIC_SetPriority+0x4c>)
 800152e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001532:	0112      	lsls	r2, r2, #4
 8001534:	b2d2      	uxtb	r2, r2
 8001536:	440b      	add	r3, r1
 8001538:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800153c:	e00a      	b.n	8001554 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800153e:	683b      	ldr	r3, [r7, #0]
 8001540:	b2da      	uxtb	r2, r3
 8001542:	4908      	ldr	r1, [pc, #32]	; (8001564 <__NVIC_SetPriority+0x50>)
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	f003 030f 	and.w	r3, r3, #15
 800154a:	3b04      	subs	r3, #4
 800154c:	0112      	lsls	r2, r2, #4
 800154e:	b2d2      	uxtb	r2, r2
 8001550:	440b      	add	r3, r1
 8001552:	761a      	strb	r2, [r3, #24]
}
 8001554:	bf00      	nop
 8001556:	370c      	adds	r7, #12
 8001558:	46bd      	mov	sp, r7
 800155a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800155e:	4770      	bx	lr
 8001560:	e000e100 	.word	0xe000e100
 8001564:	e000ed00 	.word	0xe000ed00

08001568 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001568:	b480      	push	{r7}
 800156a:	b089      	sub	sp, #36	; 0x24
 800156c:	af00      	add	r7, sp, #0
 800156e:	60f8      	str	r0, [r7, #12]
 8001570:	60b9      	str	r1, [r7, #8]
 8001572:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001574:	68fb      	ldr	r3, [r7, #12]
 8001576:	f003 0307 	and.w	r3, r3, #7
 800157a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800157c:	69fb      	ldr	r3, [r7, #28]
 800157e:	f1c3 0307 	rsb	r3, r3, #7
 8001582:	2b04      	cmp	r3, #4
 8001584:	bf28      	it	cs
 8001586:	2304      	movcs	r3, #4
 8001588:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800158a:	69fb      	ldr	r3, [r7, #28]
 800158c:	3304      	adds	r3, #4
 800158e:	2b06      	cmp	r3, #6
 8001590:	d902      	bls.n	8001598 <NVIC_EncodePriority+0x30>
 8001592:	69fb      	ldr	r3, [r7, #28]
 8001594:	3b03      	subs	r3, #3
 8001596:	e000      	b.n	800159a <NVIC_EncodePriority+0x32>
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800159c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80015a0:	69bb      	ldr	r3, [r7, #24]
 80015a2:	fa02 f303 	lsl.w	r3, r2, r3
 80015a6:	43da      	mvns	r2, r3
 80015a8:	68bb      	ldr	r3, [r7, #8]
 80015aa:	401a      	ands	r2, r3
 80015ac:	697b      	ldr	r3, [r7, #20]
 80015ae:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80015b0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80015b4:	697b      	ldr	r3, [r7, #20]
 80015b6:	fa01 f303 	lsl.w	r3, r1, r3
 80015ba:	43d9      	mvns	r1, r3
 80015bc:	687b      	ldr	r3, [r7, #4]
 80015be:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80015c0:	4313      	orrs	r3, r2
         );
}
 80015c2:	4618      	mov	r0, r3
 80015c4:	3724      	adds	r7, #36	; 0x24
 80015c6:	46bd      	mov	sp, r7
 80015c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015cc:	4770      	bx	lr
	...

080015d0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b082      	sub	sp, #8
 80015d4:	af00      	add	r7, sp, #0
 80015d6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	3b01      	subs	r3, #1
 80015dc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80015e0:	d301      	bcc.n	80015e6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80015e2:	2301      	movs	r3, #1
 80015e4:	e00f      	b.n	8001606 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80015e6:	4a0a      	ldr	r2, [pc, #40]	; (8001610 <SysTick_Config+0x40>)
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	3b01      	subs	r3, #1
 80015ec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80015ee:	210f      	movs	r1, #15
 80015f0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80015f4:	f7ff ff8e 	bl	8001514 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80015f8:	4b05      	ldr	r3, [pc, #20]	; (8001610 <SysTick_Config+0x40>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80015fe:	4b04      	ldr	r3, [pc, #16]	; (8001610 <SysTick_Config+0x40>)
 8001600:	2207      	movs	r2, #7
 8001602:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001604:	2300      	movs	r3, #0
}
 8001606:	4618      	mov	r0, r3
 8001608:	3708      	adds	r7, #8
 800160a:	46bd      	mov	sp, r7
 800160c:	bd80      	pop	{r7, pc}
 800160e:	bf00      	nop
 8001610:	e000e010 	.word	0xe000e010

08001614 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001614:	b580      	push	{r7, lr}
 8001616:	b082      	sub	sp, #8
 8001618:	af00      	add	r7, sp, #0
 800161a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800161c:	6878      	ldr	r0, [r7, #4]
 800161e:	f7ff ff47 	bl	80014b0 <__NVIC_SetPriorityGrouping>
}
 8001622:	bf00      	nop
 8001624:	3708      	adds	r7, #8
 8001626:	46bd      	mov	sp, r7
 8001628:	bd80      	pop	{r7, pc}

0800162a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800162a:	b580      	push	{r7, lr}
 800162c:	b086      	sub	sp, #24
 800162e:	af00      	add	r7, sp, #0
 8001630:	4603      	mov	r3, r0
 8001632:	60b9      	str	r1, [r7, #8]
 8001634:	607a      	str	r2, [r7, #4]
 8001636:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001638:	2300      	movs	r3, #0
 800163a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800163c:	f7ff ff5c 	bl	80014f8 <__NVIC_GetPriorityGrouping>
 8001640:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001642:	687a      	ldr	r2, [r7, #4]
 8001644:	68b9      	ldr	r1, [r7, #8]
 8001646:	6978      	ldr	r0, [r7, #20]
 8001648:	f7ff ff8e 	bl	8001568 <NVIC_EncodePriority>
 800164c:	4602      	mov	r2, r0
 800164e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001652:	4611      	mov	r1, r2
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff ff5d 	bl	8001514 <__NVIC_SetPriority>
}
 800165a:	bf00      	nop
 800165c:	3718      	adds	r7, #24
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}

08001662 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001662:	b580      	push	{r7, lr}
 8001664:	b082      	sub	sp, #8
 8001666:	af00      	add	r7, sp, #0
 8001668:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800166a:	6878      	ldr	r0, [r7, #4]
 800166c:	f7ff ffb0 	bl	80015d0 <SysTick_Config>
 8001670:	4603      	mov	r3, r0
}
 8001672:	4618      	mov	r0, r3
 8001674:	3708      	adds	r7, #8
 8001676:	46bd      	mov	sp, r7
 8001678:	bd80      	pop	{r7, pc}
	...

0800167c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800167c:	b480      	push	{r7}
 800167e:	b089      	sub	sp, #36	; 0x24
 8001680:	af00      	add	r7, sp, #0
 8001682:	6078      	str	r0, [r7, #4]
 8001684:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001686:	2300      	movs	r3, #0
 8001688:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800168a:	2300      	movs	r3, #0
 800168c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800168e:	2300      	movs	r3, #0
 8001690:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001692:	2300      	movs	r3, #0
 8001694:	61fb      	str	r3, [r7, #28]
 8001696:	e159      	b.n	800194c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001698:	2201      	movs	r2, #1
 800169a:	69fb      	ldr	r3, [r7, #28]
 800169c:	fa02 f303 	lsl.w	r3, r2, r3
 80016a0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80016a2:	683b      	ldr	r3, [r7, #0]
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	697a      	ldr	r2, [r7, #20]
 80016a8:	4013      	ands	r3, r2
 80016aa:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80016ac:	693a      	ldr	r2, [r7, #16]
 80016ae:	697b      	ldr	r3, [r7, #20]
 80016b0:	429a      	cmp	r2, r3
 80016b2:	f040 8148 	bne.w	8001946 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016b6:	683b      	ldr	r3, [r7, #0]
 80016b8:	685b      	ldr	r3, [r3, #4]
 80016ba:	f003 0303 	and.w	r3, r3, #3
 80016be:	2b01      	cmp	r3, #1
 80016c0:	d005      	beq.n	80016ce <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80016c2:	683b      	ldr	r3, [r7, #0]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80016ca:	2b02      	cmp	r3, #2
 80016cc:	d130      	bne.n	8001730 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	689b      	ldr	r3, [r3, #8]
 80016d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80016d4:	69fb      	ldr	r3, [r7, #28]
 80016d6:	005b      	lsls	r3, r3, #1
 80016d8:	2203      	movs	r2, #3
 80016da:	fa02 f303 	lsl.w	r3, r2, r3
 80016de:	43db      	mvns	r3, r3
 80016e0:	69ba      	ldr	r2, [r7, #24]
 80016e2:	4013      	ands	r3, r2
 80016e4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80016e6:	683b      	ldr	r3, [r7, #0]
 80016e8:	68da      	ldr	r2, [r3, #12]
 80016ea:	69fb      	ldr	r3, [r7, #28]
 80016ec:	005b      	lsls	r3, r3, #1
 80016ee:	fa02 f303 	lsl.w	r3, r2, r3
 80016f2:	69ba      	ldr	r2, [r7, #24]
 80016f4:	4313      	orrs	r3, r2
 80016f6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	69ba      	ldr	r2, [r7, #24]
 80016fc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80016fe:	687b      	ldr	r3, [r7, #4]
 8001700:	685b      	ldr	r3, [r3, #4]
 8001702:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001704:	2201      	movs	r2, #1
 8001706:	69fb      	ldr	r3, [r7, #28]
 8001708:	fa02 f303 	lsl.w	r3, r2, r3
 800170c:	43db      	mvns	r3, r3
 800170e:	69ba      	ldr	r2, [r7, #24]
 8001710:	4013      	ands	r3, r2
 8001712:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001714:	683b      	ldr	r3, [r7, #0]
 8001716:	685b      	ldr	r3, [r3, #4]
 8001718:	091b      	lsrs	r3, r3, #4
 800171a:	f003 0201 	and.w	r2, r3, #1
 800171e:	69fb      	ldr	r3, [r7, #28]
 8001720:	fa02 f303 	lsl.w	r3, r2, r3
 8001724:	69ba      	ldr	r2, [r7, #24]
 8001726:	4313      	orrs	r3, r2
 8001728:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	69ba      	ldr	r2, [r7, #24]
 800172e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001730:	683b      	ldr	r3, [r7, #0]
 8001732:	685b      	ldr	r3, [r3, #4]
 8001734:	f003 0303 	and.w	r3, r3, #3
 8001738:	2b03      	cmp	r3, #3
 800173a:	d017      	beq.n	800176c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	68db      	ldr	r3, [r3, #12]
 8001740:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001742:	69fb      	ldr	r3, [r7, #28]
 8001744:	005b      	lsls	r3, r3, #1
 8001746:	2203      	movs	r2, #3
 8001748:	fa02 f303 	lsl.w	r3, r2, r3
 800174c:	43db      	mvns	r3, r3
 800174e:	69ba      	ldr	r2, [r7, #24]
 8001750:	4013      	ands	r3, r2
 8001752:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001754:	683b      	ldr	r3, [r7, #0]
 8001756:	689a      	ldr	r2, [r3, #8]
 8001758:	69fb      	ldr	r3, [r7, #28]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	fa02 f303 	lsl.w	r3, r2, r3
 8001760:	69ba      	ldr	r2, [r7, #24]
 8001762:	4313      	orrs	r3, r2
 8001764:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	69ba      	ldr	r2, [r7, #24]
 800176a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800176c:	683b      	ldr	r3, [r7, #0]
 800176e:	685b      	ldr	r3, [r3, #4]
 8001770:	f003 0303 	and.w	r3, r3, #3
 8001774:	2b02      	cmp	r3, #2
 8001776:	d123      	bne.n	80017c0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001778:	69fb      	ldr	r3, [r7, #28]
 800177a:	08da      	lsrs	r2, r3, #3
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	3208      	adds	r2, #8
 8001780:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001784:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	f003 0307 	and.w	r3, r3, #7
 800178c:	009b      	lsls	r3, r3, #2
 800178e:	220f      	movs	r2, #15
 8001790:	fa02 f303 	lsl.w	r3, r2, r3
 8001794:	43db      	mvns	r3, r3
 8001796:	69ba      	ldr	r2, [r7, #24]
 8001798:	4013      	ands	r3, r2
 800179a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800179c:	683b      	ldr	r3, [r7, #0]
 800179e:	691a      	ldr	r2, [r3, #16]
 80017a0:	69fb      	ldr	r3, [r7, #28]
 80017a2:	f003 0307 	and.w	r3, r3, #7
 80017a6:	009b      	lsls	r3, r3, #2
 80017a8:	fa02 f303 	lsl.w	r3, r2, r3
 80017ac:	69ba      	ldr	r2, [r7, #24]
 80017ae:	4313      	orrs	r3, r2
 80017b0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80017b2:	69fb      	ldr	r3, [r7, #28]
 80017b4:	08da      	lsrs	r2, r3, #3
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	3208      	adds	r2, #8
 80017ba:	69b9      	ldr	r1, [r7, #24]
 80017bc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80017c0:	687b      	ldr	r3, [r7, #4]
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80017c6:	69fb      	ldr	r3, [r7, #28]
 80017c8:	005b      	lsls	r3, r3, #1
 80017ca:	2203      	movs	r2, #3
 80017cc:	fa02 f303 	lsl.w	r3, r2, r3
 80017d0:	43db      	mvns	r3, r3
 80017d2:	69ba      	ldr	r2, [r7, #24]
 80017d4:	4013      	ands	r3, r2
 80017d6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80017d8:	683b      	ldr	r3, [r7, #0]
 80017da:	685b      	ldr	r3, [r3, #4]
 80017dc:	f003 0203 	and.w	r2, r3, #3
 80017e0:	69fb      	ldr	r3, [r7, #28]
 80017e2:	005b      	lsls	r3, r3, #1
 80017e4:	fa02 f303 	lsl.w	r3, r2, r3
 80017e8:	69ba      	ldr	r2, [r7, #24]
 80017ea:	4313      	orrs	r3, r2
 80017ec:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69ba      	ldr	r2, [r7, #24]
 80017f2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80017f4:	683b      	ldr	r3, [r7, #0]
 80017f6:	685b      	ldr	r3, [r3, #4]
 80017f8:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	f000 80a2 	beq.w	8001946 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001802:	2300      	movs	r3, #0
 8001804:	60fb      	str	r3, [r7, #12]
 8001806:	4b57      	ldr	r3, [pc, #348]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 8001808:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800180a:	4a56      	ldr	r2, [pc, #344]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 800180c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001810:	6453      	str	r3, [r2, #68]	; 0x44
 8001812:	4b54      	ldr	r3, [pc, #336]	; (8001964 <HAL_GPIO_Init+0x2e8>)
 8001814:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001816:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800181a:	60fb      	str	r3, [r7, #12]
 800181c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800181e:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_GPIO_Init+0x2ec>)
 8001820:	69fb      	ldr	r3, [r7, #28]
 8001822:	089b      	lsrs	r3, r3, #2
 8001824:	3302      	adds	r3, #2
 8001826:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800182a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800182c:	69fb      	ldr	r3, [r7, #28]
 800182e:	f003 0303 	and.w	r3, r3, #3
 8001832:	009b      	lsls	r3, r3, #2
 8001834:	220f      	movs	r2, #15
 8001836:	fa02 f303 	lsl.w	r3, r2, r3
 800183a:	43db      	mvns	r3, r3
 800183c:	69ba      	ldr	r2, [r7, #24]
 800183e:	4013      	ands	r3, r2
 8001840:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	4a49      	ldr	r2, [pc, #292]	; (800196c <HAL_GPIO_Init+0x2f0>)
 8001846:	4293      	cmp	r3, r2
 8001848:	d019      	beq.n	800187e <HAL_GPIO_Init+0x202>
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	4a48      	ldr	r2, [pc, #288]	; (8001970 <HAL_GPIO_Init+0x2f4>)
 800184e:	4293      	cmp	r3, r2
 8001850:	d013      	beq.n	800187a <HAL_GPIO_Init+0x1fe>
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	4a47      	ldr	r2, [pc, #284]	; (8001974 <HAL_GPIO_Init+0x2f8>)
 8001856:	4293      	cmp	r3, r2
 8001858:	d00d      	beq.n	8001876 <HAL_GPIO_Init+0x1fa>
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	4a46      	ldr	r2, [pc, #280]	; (8001978 <HAL_GPIO_Init+0x2fc>)
 800185e:	4293      	cmp	r3, r2
 8001860:	d007      	beq.n	8001872 <HAL_GPIO_Init+0x1f6>
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	4a45      	ldr	r2, [pc, #276]	; (800197c <HAL_GPIO_Init+0x300>)
 8001866:	4293      	cmp	r3, r2
 8001868:	d101      	bne.n	800186e <HAL_GPIO_Init+0x1f2>
 800186a:	2304      	movs	r3, #4
 800186c:	e008      	b.n	8001880 <HAL_GPIO_Init+0x204>
 800186e:	2307      	movs	r3, #7
 8001870:	e006      	b.n	8001880 <HAL_GPIO_Init+0x204>
 8001872:	2303      	movs	r3, #3
 8001874:	e004      	b.n	8001880 <HAL_GPIO_Init+0x204>
 8001876:	2302      	movs	r3, #2
 8001878:	e002      	b.n	8001880 <HAL_GPIO_Init+0x204>
 800187a:	2301      	movs	r3, #1
 800187c:	e000      	b.n	8001880 <HAL_GPIO_Init+0x204>
 800187e:	2300      	movs	r3, #0
 8001880:	69fa      	ldr	r2, [r7, #28]
 8001882:	f002 0203 	and.w	r2, r2, #3
 8001886:	0092      	lsls	r2, r2, #2
 8001888:	4093      	lsls	r3, r2
 800188a:	69ba      	ldr	r2, [r7, #24]
 800188c:	4313      	orrs	r3, r2
 800188e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001890:	4935      	ldr	r1, [pc, #212]	; (8001968 <HAL_GPIO_Init+0x2ec>)
 8001892:	69fb      	ldr	r3, [r7, #28]
 8001894:	089b      	lsrs	r3, r3, #2
 8001896:	3302      	adds	r3, #2
 8001898:	69ba      	ldr	r2, [r7, #24]
 800189a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800189e:	4b38      	ldr	r3, [pc, #224]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018a0:	689b      	ldr	r3, [r3, #8]
 80018a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018a4:	693b      	ldr	r3, [r7, #16]
 80018a6:	43db      	mvns	r3, r3
 80018a8:	69ba      	ldr	r2, [r7, #24]
 80018aa:	4013      	ands	r3, r2
 80018ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80018ae:	683b      	ldr	r3, [r7, #0]
 80018b0:	685b      	ldr	r3, [r3, #4]
 80018b2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80018b6:	2b00      	cmp	r3, #0
 80018b8:	d003      	beq.n	80018c2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80018ba:	69ba      	ldr	r2, [r7, #24]
 80018bc:	693b      	ldr	r3, [r7, #16]
 80018be:	4313      	orrs	r3, r2
 80018c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80018c2:	4a2f      	ldr	r2, [pc, #188]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018c4:	69bb      	ldr	r3, [r7, #24]
 80018c6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80018c8:	4b2d      	ldr	r3, [pc, #180]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018ce:	693b      	ldr	r3, [r7, #16]
 80018d0:	43db      	mvns	r3, r3
 80018d2:	69ba      	ldr	r2, [r7, #24]
 80018d4:	4013      	ands	r3, r2
 80018d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80018d8:	683b      	ldr	r3, [r7, #0]
 80018da:	685b      	ldr	r3, [r3, #4]
 80018dc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	d003      	beq.n	80018ec <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80018e4:	69ba      	ldr	r2, [r7, #24]
 80018e6:	693b      	ldr	r3, [r7, #16]
 80018e8:	4313      	orrs	r3, r2
 80018ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80018ec:	4a24      	ldr	r2, [pc, #144]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018ee:	69bb      	ldr	r3, [r7, #24]
 80018f0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80018f2:	4b23      	ldr	r3, [pc, #140]	; (8001980 <HAL_GPIO_Init+0x304>)
 80018f4:	685b      	ldr	r3, [r3, #4]
 80018f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80018f8:	693b      	ldr	r3, [r7, #16]
 80018fa:	43db      	mvns	r3, r3
 80018fc:	69ba      	ldr	r2, [r7, #24]
 80018fe:	4013      	ands	r3, r2
 8001900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001902:	683b      	ldr	r3, [r7, #0]
 8001904:	685b      	ldr	r3, [r3, #4]
 8001906:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800190a:	2b00      	cmp	r3, #0
 800190c:	d003      	beq.n	8001916 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800190e:	69ba      	ldr	r2, [r7, #24]
 8001910:	693b      	ldr	r3, [r7, #16]
 8001912:	4313      	orrs	r3, r2
 8001914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001916:	4a1a      	ldr	r2, [pc, #104]	; (8001980 <HAL_GPIO_Init+0x304>)
 8001918:	69bb      	ldr	r3, [r7, #24]
 800191a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800191c:	4b18      	ldr	r3, [pc, #96]	; (8001980 <HAL_GPIO_Init+0x304>)
 800191e:	681b      	ldr	r3, [r3, #0]
 8001920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001922:	693b      	ldr	r3, [r7, #16]
 8001924:	43db      	mvns	r3, r3
 8001926:	69ba      	ldr	r2, [r7, #24]
 8001928:	4013      	ands	r3, r2
 800192a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800192c:	683b      	ldr	r3, [r7, #0]
 800192e:	685b      	ldr	r3, [r3, #4]
 8001930:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001934:	2b00      	cmp	r3, #0
 8001936:	d003      	beq.n	8001940 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001938:	69ba      	ldr	r2, [r7, #24]
 800193a:	693b      	ldr	r3, [r7, #16]
 800193c:	4313      	orrs	r3, r2
 800193e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001940:	4a0f      	ldr	r2, [pc, #60]	; (8001980 <HAL_GPIO_Init+0x304>)
 8001942:	69bb      	ldr	r3, [r7, #24]
 8001944:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3301      	adds	r3, #1
 800194a:	61fb      	str	r3, [r7, #28]
 800194c:	69fb      	ldr	r3, [r7, #28]
 800194e:	2b0f      	cmp	r3, #15
 8001950:	f67f aea2 	bls.w	8001698 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001954:	bf00      	nop
 8001956:	bf00      	nop
 8001958:	3724      	adds	r7, #36	; 0x24
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	40023800 	.word	0x40023800
 8001968:	40013800 	.word	0x40013800
 800196c:	40020000 	.word	0x40020000
 8001970:	40020400 	.word	0x40020400
 8001974:	40020800 	.word	0x40020800
 8001978:	40020c00 	.word	0x40020c00
 800197c:	40021000 	.word	0x40021000
 8001980:	40013c00 	.word	0x40013c00

08001984 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001984:	b480      	push	{r7}
 8001986:	b083      	sub	sp, #12
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	460b      	mov	r3, r1
 800198e:	807b      	strh	r3, [r7, #2]
 8001990:	4613      	mov	r3, r2
 8001992:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001994:	787b      	ldrb	r3, [r7, #1]
 8001996:	2b00      	cmp	r3, #0
 8001998:	d003      	beq.n	80019a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800199a:	887a      	ldrh	r2, [r7, #2]
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80019a0:	e003      	b.n	80019aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80019a2:	887b      	ldrh	r3, [r7, #2]
 80019a4:	041a      	lsls	r2, r3, #16
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	619a      	str	r2, [r3, #24]
}
 80019aa:	bf00      	nop
 80019ac:	370c      	adds	r7, #12
 80019ae:	46bd      	mov	sp, r7
 80019b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019b4:	4770      	bx	lr
	...

080019b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	b084      	sub	sp, #16
 80019bc:	af00      	add	r7, sp, #0
 80019be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80019c0:	687b      	ldr	r3, [r7, #4]
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d101      	bne.n	80019ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e12b      	b.n	8001c22 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80019d0:	b2db      	uxtb	r3, r3
 80019d2:	2b00      	cmp	r3, #0
 80019d4:	d106      	bne.n	80019e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	2200      	movs	r2, #0
 80019da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80019de:	6878      	ldr	r0, [r7, #4]
 80019e0:	f7ff fb1a 	bl	8001018 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80019e4:	687b      	ldr	r3, [r7, #4]
 80019e6:	2224      	movs	r2, #36	; 0x24
 80019e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	681a      	ldr	r2, [r3, #0]
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	681b      	ldr	r3, [r3, #0]
 80019f6:	f022 0201 	bic.w	r2, r2, #1
 80019fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	681a      	ldr	r2, [r3, #0]
 8001a02:	687b      	ldr	r3, [r7, #4]
 8001a04:	681b      	ldr	r3, [r3, #0]
 8001a06:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001a0a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001a1a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001a1c:	f001 f888 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8001a20:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001a22:	687b      	ldr	r3, [r7, #4]
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	4a81      	ldr	r2, [pc, #516]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001a28:	4293      	cmp	r3, r2
 8001a2a:	d807      	bhi.n	8001a3c <HAL_I2C_Init+0x84>
 8001a2c:	68fb      	ldr	r3, [r7, #12]
 8001a2e:	4a80      	ldr	r2, [pc, #512]	; (8001c30 <HAL_I2C_Init+0x278>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	bf94      	ite	ls
 8001a34:	2301      	movls	r3, #1
 8001a36:	2300      	movhi	r3, #0
 8001a38:	b2db      	uxtb	r3, r3
 8001a3a:	e006      	b.n	8001a4a <HAL_I2C_Init+0x92>
 8001a3c:	68fb      	ldr	r3, [r7, #12]
 8001a3e:	4a7d      	ldr	r2, [pc, #500]	; (8001c34 <HAL_I2C_Init+0x27c>)
 8001a40:	4293      	cmp	r3, r2
 8001a42:	bf94      	ite	ls
 8001a44:	2301      	movls	r3, #1
 8001a46:	2300      	movhi	r3, #0
 8001a48:	b2db      	uxtb	r3, r3
 8001a4a:	2b00      	cmp	r3, #0
 8001a4c:	d001      	beq.n	8001a52 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001a4e:	2301      	movs	r3, #1
 8001a50:	e0e7      	b.n	8001c22 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001a52:	68fb      	ldr	r3, [r7, #12]
 8001a54:	4a78      	ldr	r2, [pc, #480]	; (8001c38 <HAL_I2C_Init+0x280>)
 8001a56:	fba2 2303 	umull	r2, r3, r2, r3
 8001a5a:	0c9b      	lsrs	r3, r3, #18
 8001a5c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	685b      	ldr	r3, [r3, #4]
 8001a64:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	681b      	ldr	r3, [r3, #0]
 8001a6c:	68ba      	ldr	r2, [r7, #8]
 8001a6e:	430a      	orrs	r2, r1
 8001a70:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001a72:	687b      	ldr	r3, [r7, #4]
 8001a74:	681b      	ldr	r3, [r3, #0]
 8001a76:	6a1b      	ldr	r3, [r3, #32]
 8001a78:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001a7c:	687b      	ldr	r3, [r7, #4]
 8001a7e:	685b      	ldr	r3, [r3, #4]
 8001a80:	4a6a      	ldr	r2, [pc, #424]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001a82:	4293      	cmp	r3, r2
 8001a84:	d802      	bhi.n	8001a8c <HAL_I2C_Init+0xd4>
 8001a86:	68bb      	ldr	r3, [r7, #8]
 8001a88:	3301      	adds	r3, #1
 8001a8a:	e009      	b.n	8001aa0 <HAL_I2C_Init+0xe8>
 8001a8c:	68bb      	ldr	r3, [r7, #8]
 8001a8e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8001a92:	fb02 f303 	mul.w	r3, r2, r3
 8001a96:	4a69      	ldr	r2, [pc, #420]	; (8001c3c <HAL_I2C_Init+0x284>)
 8001a98:	fba2 2303 	umull	r2, r3, r2, r3
 8001a9c:	099b      	lsrs	r3, r3, #6
 8001a9e:	3301      	adds	r3, #1
 8001aa0:	687a      	ldr	r2, [r7, #4]
 8001aa2:	6812      	ldr	r2, [r2, #0]
 8001aa4:	430b      	orrs	r3, r1
 8001aa6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8001aa8:	687b      	ldr	r3, [r7, #4]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	69db      	ldr	r3, [r3, #28]
 8001aae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8001ab2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	685b      	ldr	r3, [r3, #4]
 8001aba:	495c      	ldr	r1, [pc, #368]	; (8001c2c <HAL_I2C_Init+0x274>)
 8001abc:	428b      	cmp	r3, r1
 8001abe:	d819      	bhi.n	8001af4 <HAL_I2C_Init+0x13c>
 8001ac0:	68fb      	ldr	r3, [r7, #12]
 8001ac2:	1e59      	subs	r1, r3, #1
 8001ac4:	687b      	ldr	r3, [r7, #4]
 8001ac6:	685b      	ldr	r3, [r3, #4]
 8001ac8:	005b      	lsls	r3, r3, #1
 8001aca:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ace:	1c59      	adds	r1, r3, #1
 8001ad0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8001ad4:	400b      	ands	r3, r1
 8001ad6:	2b00      	cmp	r3, #0
 8001ad8:	d00a      	beq.n	8001af0 <HAL_I2C_Init+0x138>
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	1e59      	subs	r1, r3, #1
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	685b      	ldr	r3, [r3, #4]
 8001ae2:	005b      	lsls	r3, r3, #1
 8001ae4:	fbb1 f3f3 	udiv	r3, r1, r3
 8001ae8:	3301      	adds	r3, #1
 8001aea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001aee:	e051      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001af0:	2304      	movs	r3, #4
 8001af2:	e04f      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001af4:	687b      	ldr	r3, [r7, #4]
 8001af6:	689b      	ldr	r3, [r3, #8]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	d111      	bne.n	8001b20 <HAL_I2C_Init+0x168>
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	1e58      	subs	r0, r3, #1
 8001b00:	687b      	ldr	r3, [r7, #4]
 8001b02:	6859      	ldr	r1, [r3, #4]
 8001b04:	460b      	mov	r3, r1
 8001b06:	005b      	lsls	r3, r3, #1
 8001b08:	440b      	add	r3, r1
 8001b0a:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b0e:	3301      	adds	r3, #1
 8001b10:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	bf0c      	ite	eq
 8001b18:	2301      	moveq	r3, #1
 8001b1a:	2300      	movne	r3, #0
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	e012      	b.n	8001b46 <HAL_I2C_Init+0x18e>
 8001b20:	68fb      	ldr	r3, [r7, #12]
 8001b22:	1e58      	subs	r0, r3, #1
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6859      	ldr	r1, [r3, #4]
 8001b28:	460b      	mov	r3, r1
 8001b2a:	009b      	lsls	r3, r3, #2
 8001b2c:	440b      	add	r3, r1
 8001b2e:	0099      	lsls	r1, r3, #2
 8001b30:	440b      	add	r3, r1
 8001b32:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b36:	3301      	adds	r3, #1
 8001b38:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b3c:	2b00      	cmp	r3, #0
 8001b3e:	bf0c      	ite	eq
 8001b40:	2301      	moveq	r3, #1
 8001b42:	2300      	movne	r3, #0
 8001b44:	b2db      	uxtb	r3, r3
 8001b46:	2b00      	cmp	r3, #0
 8001b48:	d001      	beq.n	8001b4e <HAL_I2C_Init+0x196>
 8001b4a:	2301      	movs	r3, #1
 8001b4c:	e022      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	2b00      	cmp	r3, #0
 8001b54:	d10e      	bne.n	8001b74 <HAL_I2C_Init+0x1bc>
 8001b56:	68fb      	ldr	r3, [r7, #12]
 8001b58:	1e58      	subs	r0, r3, #1
 8001b5a:	687b      	ldr	r3, [r7, #4]
 8001b5c:	6859      	ldr	r1, [r3, #4]
 8001b5e:	460b      	mov	r3, r1
 8001b60:	005b      	lsls	r3, r3, #1
 8001b62:	440b      	add	r3, r1
 8001b64:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b68:	3301      	adds	r3, #1
 8001b6a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b6e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001b72:	e00f      	b.n	8001b94 <HAL_I2C_Init+0x1dc>
 8001b74:	68fb      	ldr	r3, [r7, #12]
 8001b76:	1e58      	subs	r0, r3, #1
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	6859      	ldr	r1, [r3, #4]
 8001b7c:	460b      	mov	r3, r1
 8001b7e:	009b      	lsls	r3, r3, #2
 8001b80:	440b      	add	r3, r1
 8001b82:	0099      	lsls	r1, r3, #2
 8001b84:	440b      	add	r3, r1
 8001b86:	fbb0 f3f3 	udiv	r3, r0, r3
 8001b8a:	3301      	adds	r3, #1
 8001b8c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8001b90:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001b94:	6879      	ldr	r1, [r7, #4]
 8001b96:	6809      	ldr	r1, [r1, #0]
 8001b98:	4313      	orrs	r3, r2
 8001b9a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8001b9c:	687b      	ldr	r3, [r7, #4]
 8001b9e:	681b      	ldr	r3, [r3, #0]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	69da      	ldr	r2, [r3, #28]
 8001baa:	687b      	ldr	r3, [r7, #4]
 8001bac:	6a1b      	ldr	r3, [r3, #32]
 8001bae:	431a      	orrs	r2, r3
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	430a      	orrs	r2, r1
 8001bb6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8001bb8:	687b      	ldr	r3, [r7, #4]
 8001bba:	681b      	ldr	r3, [r3, #0]
 8001bbc:	689b      	ldr	r3, [r3, #8]
 8001bbe:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8001bc2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8001bc6:	687a      	ldr	r2, [r7, #4]
 8001bc8:	6911      	ldr	r1, [r2, #16]
 8001bca:	687a      	ldr	r2, [r7, #4]
 8001bcc:	68d2      	ldr	r2, [r2, #12]
 8001bce:	4311      	orrs	r1, r2
 8001bd0:	687a      	ldr	r2, [r7, #4]
 8001bd2:	6812      	ldr	r2, [r2, #0]
 8001bd4:	430b      	orrs	r3, r1
 8001bd6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	681b      	ldr	r3, [r3, #0]
 8001bdc:	68db      	ldr	r3, [r3, #12]
 8001bde:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	695a      	ldr	r2, [r3, #20]
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	699b      	ldr	r3, [r3, #24]
 8001bea:	431a      	orrs	r2, r3
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	681b      	ldr	r3, [r3, #0]
 8001bf0:	430a      	orrs	r2, r1
 8001bf2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	681a      	ldr	r2, [r3, #0]
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	f042 0201 	orr.w	r2, r2, #1
 8001c02:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	2220      	movs	r2, #32
 8001c0e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	2200      	movs	r2, #0
 8001c16:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3710      	adds	r7, #16
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	000186a0 	.word	0x000186a0
 8001c30:	001e847f 	.word	0x001e847f
 8001c34:	003d08ff 	.word	0x003d08ff
 8001c38:	431bde83 	.word	0x431bde83
 8001c3c:	10624dd3 	.word	0x10624dd3

08001c40 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b088      	sub	sp, #32
 8001c44:	af02      	add	r7, sp, #8
 8001c46:	60f8      	str	r0, [r7, #12]
 8001c48:	607a      	str	r2, [r7, #4]
 8001c4a:	461a      	mov	r2, r3
 8001c4c:	460b      	mov	r3, r1
 8001c4e:	817b      	strh	r3, [r7, #10]
 8001c50:	4613      	mov	r3, r2
 8001c52:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8001c54:	f7ff fbfc 	bl	8001450 <HAL_GetTick>
 8001c58:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	2b20      	cmp	r3, #32
 8001c64:	f040 80e0 	bne.w	8001e28 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8001c68:	697b      	ldr	r3, [r7, #20]
 8001c6a:	9300      	str	r3, [sp, #0]
 8001c6c:	2319      	movs	r3, #25
 8001c6e:	2201      	movs	r2, #1
 8001c70:	4970      	ldr	r1, [pc, #448]	; (8001e34 <HAL_I2C_Master_Transmit+0x1f4>)
 8001c72:	68f8      	ldr	r0, [r7, #12]
 8001c74:	f000 f964 	bl	8001f40 <I2C_WaitOnFlagUntilTimeout>
 8001c78:	4603      	mov	r3, r0
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	d001      	beq.n	8001c82 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8001c7e:	2302      	movs	r3, #2
 8001c80:	e0d3      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8001c82:	68fb      	ldr	r3, [r7, #12]
 8001c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c88:	2b01      	cmp	r3, #1
 8001c8a:	d101      	bne.n	8001c90 <HAL_I2C_Master_Transmit+0x50>
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	e0cc      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
 8001c90:	68fb      	ldr	r3, [r7, #12]
 8001c92:	2201      	movs	r2, #1
 8001c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8001c98:	68fb      	ldr	r3, [r7, #12]
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	f003 0301 	and.w	r3, r3, #1
 8001ca2:	2b01      	cmp	r3, #1
 8001ca4:	d007      	beq.n	8001cb6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	681a      	ldr	r2, [r3, #0]
 8001cac:	68fb      	ldr	r3, [r7, #12]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f042 0201 	orr.w	r2, r2, #1
 8001cb4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	681b      	ldr	r3, [r3, #0]
 8001cba:	681a      	ldr	r2, [r3, #0]
 8001cbc:	68fb      	ldr	r3, [r7, #12]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8001cc4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8001cc6:	68fb      	ldr	r3, [r7, #12]
 8001cc8:	2221      	movs	r2, #33	; 0x21
 8001cca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	2210      	movs	r2, #16
 8001cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8001cd6:	68fb      	ldr	r3, [r7, #12]
 8001cd8:	2200      	movs	r2, #0
 8001cda:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8001cdc:	68fb      	ldr	r3, [r7, #12]
 8001cde:	687a      	ldr	r2, [r7, #4]
 8001ce0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8001ce2:	68fb      	ldr	r3, [r7, #12]
 8001ce4:	893a      	ldrh	r2, [r7, #8]
 8001ce6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001cec:	b29a      	uxth	r2, r3
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	4a50      	ldr	r2, [pc, #320]	; (8001e38 <HAL_I2C_Master_Transmit+0x1f8>)
 8001cf6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8001cf8:	8979      	ldrh	r1, [r7, #10]
 8001cfa:	697b      	ldr	r3, [r7, #20]
 8001cfc:	6a3a      	ldr	r2, [r7, #32]
 8001cfe:	68f8      	ldr	r0, [r7, #12]
 8001d00:	f000 f89c 	bl	8001e3c <I2C_MasterRequestWrite>
 8001d04:	4603      	mov	r3, r0
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d001      	beq.n	8001d0e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8001d0a:	2301      	movs	r3, #1
 8001d0c:	e08d      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8001d0e:	2300      	movs	r3, #0
 8001d10:	613b      	str	r3, [r7, #16]
 8001d12:	68fb      	ldr	r3, [r7, #12]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	695b      	ldr	r3, [r3, #20]
 8001d18:	613b      	str	r3, [r7, #16]
 8001d1a:	68fb      	ldr	r3, [r7, #12]
 8001d1c:	681b      	ldr	r3, [r3, #0]
 8001d1e:	699b      	ldr	r3, [r3, #24]
 8001d20:	613b      	str	r3, [r7, #16]
 8001d22:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8001d24:	e066      	b.n	8001df4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001d26:	697a      	ldr	r2, [r7, #20]
 8001d28:	6a39      	ldr	r1, [r7, #32]
 8001d2a:	68f8      	ldr	r0, [r7, #12]
 8001d2c:	f000 f9de 	bl	80020ec <I2C_WaitOnTXEFlagUntilTimeout>
 8001d30:	4603      	mov	r3, r0
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d00d      	beq.n	8001d52 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001d36:	68fb      	ldr	r3, [r7, #12]
 8001d38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d3a:	2b04      	cmp	r3, #4
 8001d3c:	d107      	bne.n	8001d4e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001d3e:	68fb      	ldr	r3, [r7, #12]
 8001d40:	681b      	ldr	r3, [r3, #0]
 8001d42:	681a      	ldr	r2, [r3, #0]
 8001d44:	68fb      	ldr	r3, [r7, #12]
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001d4c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001d4e:	2301      	movs	r3, #1
 8001d50:	e06b      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d52:	68fb      	ldr	r3, [r7, #12]
 8001d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d56:	781a      	ldrb	r2, [r3, #0]
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d62:	1c5a      	adds	r2, r3, #1
 8001d64:	68fb      	ldr	r3, [r7, #12]
 8001d66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8001d68:	68fb      	ldr	r3, [r7, #12]
 8001d6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3b01      	subs	r3, #1
 8001d70:	b29a      	uxth	r2, r3
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8001d76:	68fb      	ldr	r3, [r7, #12]
 8001d78:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d7a:	3b01      	subs	r3, #1
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	68fb      	ldr	r3, [r7, #12]
 8001d80:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	695b      	ldr	r3, [r3, #20]
 8001d88:	f003 0304 	and.w	r3, r3, #4
 8001d8c:	2b04      	cmp	r3, #4
 8001d8e:	d11b      	bne.n	8001dc8 <HAL_I2C_Master_Transmit+0x188>
 8001d90:	68fb      	ldr	r3, [r7, #12]
 8001d92:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	d017      	beq.n	8001dc8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8001d98:	68fb      	ldr	r3, [r7, #12]
 8001d9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001d9c:	781a      	ldrb	r2, [r3, #0]
 8001d9e:	68fb      	ldr	r3, [r7, #12]
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8001da4:	68fb      	ldr	r3, [r7, #12]
 8001da6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	68fb      	ldr	r3, [r7, #12]
 8001dac:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8001dae:	68fb      	ldr	r3, [r7, #12]
 8001db0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8001db2:	b29b      	uxth	r3, r3
 8001db4:	3b01      	subs	r3, #1
 8001db6:	b29a      	uxth	r2, r3
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8001dbc:	68fb      	ldr	r3, [r7, #12]
 8001dbe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001dc0:	3b01      	subs	r3, #1
 8001dc2:	b29a      	uxth	r2, r3
 8001dc4:	68fb      	ldr	r3, [r7, #12]
 8001dc6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8001dc8:	697a      	ldr	r2, [r7, #20]
 8001dca:	6a39      	ldr	r1, [r7, #32]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	f000 f9ce 	bl	800216e <I2C_WaitOnBTFFlagUntilTimeout>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d00d      	beq.n	8001df4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001ddc:	2b04      	cmp	r3, #4
 8001dde:	d107      	bne.n	8001df0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001de0:	68fb      	ldr	r3, [r7, #12]
 8001de2:	681b      	ldr	r3, [r3, #0]
 8001de4:	681a      	ldr	r2, [r3, #0]
 8001de6:	68fb      	ldr	r3, [r7, #12]
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001dee:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8001df0:	2301      	movs	r3, #1
 8001df2:	e01a      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8001df4:	68fb      	ldr	r3, [r7, #12]
 8001df6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8001df8:	2b00      	cmp	r3, #0
 8001dfa:	d194      	bne.n	8001d26 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	681a      	ldr	r2, [r3, #0]
 8001e02:	68fb      	ldr	r3, [r7, #12]
 8001e04:	681b      	ldr	r3, [r3, #0]
 8001e06:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8001e0a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8001e0c:	68fb      	ldr	r3, [r7, #12]
 8001e0e:	2220      	movs	r2, #32
 8001e10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8001e14:	68fb      	ldr	r3, [r7, #12]
 8001e16:	2200      	movs	r2, #0
 8001e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2200      	movs	r2, #0
 8001e20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8001e24:	2300      	movs	r3, #0
 8001e26:	e000      	b.n	8001e2a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8001e28:	2302      	movs	r3, #2
  }
}
 8001e2a:	4618      	mov	r0, r3
 8001e2c:	3718      	adds	r7, #24
 8001e2e:	46bd      	mov	sp, r7
 8001e30:	bd80      	pop	{r7, pc}
 8001e32:	bf00      	nop
 8001e34:	00100002 	.word	0x00100002
 8001e38:	ffff0000 	.word	0xffff0000

08001e3c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	b088      	sub	sp, #32
 8001e40:	af02      	add	r7, sp, #8
 8001e42:	60f8      	str	r0, [r7, #12]
 8001e44:	607a      	str	r2, [r7, #4]
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	460b      	mov	r3, r1
 8001e4a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001e50:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	2b08      	cmp	r3, #8
 8001e56:	d006      	beq.n	8001e66 <I2C_MasterRequestWrite+0x2a>
 8001e58:	697b      	ldr	r3, [r7, #20]
 8001e5a:	2b01      	cmp	r3, #1
 8001e5c:	d003      	beq.n	8001e66 <I2C_MasterRequestWrite+0x2a>
 8001e5e:	697b      	ldr	r3, [r7, #20]
 8001e60:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8001e64:	d108      	bne.n	8001e78 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e66:	68fb      	ldr	r3, [r7, #12]
 8001e68:	681b      	ldr	r3, [r3, #0]
 8001e6a:	681a      	ldr	r2, [r3, #0]
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	681b      	ldr	r3, [r3, #0]
 8001e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e74:	601a      	str	r2, [r3, #0]
 8001e76:	e00b      	b.n	8001e90 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8001e78:	68fb      	ldr	r3, [r7, #12]
 8001e7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e7c:	2b12      	cmp	r3, #18
 8001e7e:	d107      	bne.n	8001e90 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8001e80:	68fb      	ldr	r3, [r7, #12]
 8001e82:	681b      	ldr	r3, [r3, #0]
 8001e84:	681a      	ldr	r2, [r3, #0]
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8001e8e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8001e90:	683b      	ldr	r3, [r7, #0]
 8001e92:	9300      	str	r3, [sp, #0]
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2200      	movs	r2, #0
 8001e98:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8001e9c:	68f8      	ldr	r0, [r7, #12]
 8001e9e:	f000 f84f 	bl	8001f40 <I2C_WaitOnFlagUntilTimeout>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	2b00      	cmp	r3, #0
 8001ea6:	d00d      	beq.n	8001ec4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8001ea8:	68fb      	ldr	r3, [r7, #12]
 8001eaa:	681b      	ldr	r3, [r3, #0]
 8001eac:	681b      	ldr	r3, [r3, #0]
 8001eae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001eb2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8001eb6:	d103      	bne.n	8001ec0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8001eb8:	68fb      	ldr	r3, [r7, #12]
 8001eba:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001ebe:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8001ec0:	2303      	movs	r3, #3
 8001ec2:	e035      	b.n	8001f30 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	691b      	ldr	r3, [r3, #16]
 8001ec8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8001ecc:	d108      	bne.n	8001ee0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8001ece:	897b      	ldrh	r3, [r7, #10]
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	68fb      	ldr	r3, [r7, #12]
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8001edc:	611a      	str	r2, [r3, #16]
 8001ede:	e01b      	b.n	8001f18 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8001ee0:	897b      	ldrh	r3, [r7, #10]
 8001ee2:	11db      	asrs	r3, r3, #7
 8001ee4:	b2db      	uxtb	r3, r3
 8001ee6:	f003 0306 	and.w	r3, r3, #6
 8001eea:	b2db      	uxtb	r3, r3
 8001eec:	f063 030f 	orn	r3, r3, #15
 8001ef0:	b2da      	uxtb	r2, r3
 8001ef2:	68fb      	ldr	r3, [r7, #12]
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8001ef8:	683b      	ldr	r3, [r7, #0]
 8001efa:	687a      	ldr	r2, [r7, #4]
 8001efc:	490e      	ldr	r1, [pc, #56]	; (8001f38 <I2C_MasterRequestWrite+0xfc>)
 8001efe:	68f8      	ldr	r0, [r7, #12]
 8001f00:	f000 f875 	bl	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f04:	4603      	mov	r3, r0
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d001      	beq.n	8001f0e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e010      	b.n	8001f30 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8001f0e:	897b      	ldrh	r3, [r7, #10]
 8001f10:	b2da      	uxtb	r2, r3
 8001f12:	68fb      	ldr	r3, [r7, #12]
 8001f14:	681b      	ldr	r3, [r3, #0]
 8001f16:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8001f18:	683b      	ldr	r3, [r7, #0]
 8001f1a:	687a      	ldr	r2, [r7, #4]
 8001f1c:	4907      	ldr	r1, [pc, #28]	; (8001f3c <I2C_MasterRequestWrite+0x100>)
 8001f1e:	68f8      	ldr	r0, [r7, #12]
 8001f20:	f000 f865 	bl	8001fee <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8001f24:	4603      	mov	r3, r0
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d001      	beq.n	8001f2e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8001f2a:	2301      	movs	r3, #1
 8001f2c:	e000      	b.n	8001f30 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8001f2e:	2300      	movs	r3, #0
}
 8001f30:	4618      	mov	r0, r3
 8001f32:	3718      	adds	r7, #24
 8001f34:	46bd      	mov	sp, r7
 8001f36:	bd80      	pop	{r7, pc}
 8001f38:	00010008 	.word	0x00010008
 8001f3c:	00010002 	.word	0x00010002

08001f40 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	60f8      	str	r0, [r7, #12]
 8001f48:	60b9      	str	r1, [r7, #8]
 8001f4a:	603b      	str	r3, [r7, #0]
 8001f4c:	4613      	mov	r3, r2
 8001f4e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f50:	e025      	b.n	8001f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001f52:	683b      	ldr	r3, [r7, #0]
 8001f54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001f58:	d021      	beq.n	8001f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8001f5a:	f7ff fa79 	bl	8001450 <HAL_GetTick>
 8001f5e:	4602      	mov	r2, r0
 8001f60:	69bb      	ldr	r3, [r7, #24]
 8001f62:	1ad3      	subs	r3, r2, r3
 8001f64:	683a      	ldr	r2, [r7, #0]
 8001f66:	429a      	cmp	r2, r3
 8001f68:	d302      	bcc.n	8001f70 <I2C_WaitOnFlagUntilTimeout+0x30>
 8001f6a:	683b      	ldr	r3, [r7, #0]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	d116      	bne.n	8001f9e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8001f70:	68fb      	ldr	r3, [r7, #12]
 8001f72:	2200      	movs	r2, #0
 8001f74:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8001f76:	68fb      	ldr	r3, [r7, #12]
 8001f78:	2220      	movs	r2, #32
 8001f7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8001f7e:	68fb      	ldr	r3, [r7, #12]
 8001f80:	2200      	movs	r2, #0
 8001f82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f8a:	f043 0220 	orr.w	r2, r3, #32
 8001f8e:	68fb      	ldr	r3, [r7, #12]
 8001f90:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	2200      	movs	r2, #0
 8001f96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8001f9a:	2301      	movs	r3, #1
 8001f9c:	e023      	b.n	8001fe6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8001f9e:	68bb      	ldr	r3, [r7, #8]
 8001fa0:	0c1b      	lsrs	r3, r3, #16
 8001fa2:	b2db      	uxtb	r3, r3
 8001fa4:	2b01      	cmp	r3, #1
 8001fa6:	d10d      	bne.n	8001fc4 <I2C_WaitOnFlagUntilTimeout+0x84>
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	43da      	mvns	r2, r3
 8001fb0:	68bb      	ldr	r3, [r7, #8]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	b29b      	uxth	r3, r3
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	bf0c      	ite	eq
 8001fba:	2301      	moveq	r3, #1
 8001fbc:	2300      	movne	r3, #0
 8001fbe:	b2db      	uxtb	r3, r3
 8001fc0:	461a      	mov	r2, r3
 8001fc2:	e00c      	b.n	8001fde <I2C_WaitOnFlagUntilTimeout+0x9e>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	681b      	ldr	r3, [r3, #0]
 8001fc8:	699b      	ldr	r3, [r3, #24]
 8001fca:	43da      	mvns	r2, r3
 8001fcc:	68bb      	ldr	r3, [r7, #8]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	b29b      	uxth	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	bf0c      	ite	eq
 8001fd6:	2301      	moveq	r3, #1
 8001fd8:	2300      	movne	r3, #0
 8001fda:	b2db      	uxtb	r3, r3
 8001fdc:	461a      	mov	r2, r3
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	429a      	cmp	r2, r3
 8001fe2:	d0b6      	beq.n	8001f52 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001fe4:	2300      	movs	r3, #0
}
 8001fe6:	4618      	mov	r0, r3
 8001fe8:	3710      	adds	r7, #16
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}

08001fee <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8001fee:	b580      	push	{r7, lr}
 8001ff0:	b084      	sub	sp, #16
 8001ff2:	af00      	add	r7, sp, #0
 8001ff4:	60f8      	str	r0, [r7, #12]
 8001ff6:	60b9      	str	r1, [r7, #8]
 8001ff8:	607a      	str	r2, [r7, #4]
 8001ffa:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8001ffc:	e051      	b.n	80020a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8001ffe:	68fb      	ldr	r3, [r7, #12]
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	695b      	ldr	r3, [r3, #20]
 8002004:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002008:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800200c:	d123      	bne.n	8002056 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800200e:	68fb      	ldr	r3, [r7, #12]
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	681a      	ldr	r2, [r3, #0]
 8002014:	68fb      	ldr	r3, [r7, #12]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800201c:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800201e:	68fb      	ldr	r3, [r7, #12]
 8002020:	681b      	ldr	r3, [r3, #0]
 8002022:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002026:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	2200      	movs	r2, #0
 800202c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 800202e:	68fb      	ldr	r3, [r7, #12]
 8002030:	2220      	movs	r2, #32
 8002032:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002036:	68fb      	ldr	r3, [r7, #12]
 8002038:	2200      	movs	r2, #0
 800203a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800203e:	68fb      	ldr	r3, [r7, #12]
 8002040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002042:	f043 0204 	orr.w	r2, r3, #4
 8002046:	68fb      	ldr	r3, [r7, #12]
 8002048:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800204a:	68fb      	ldr	r3, [r7, #12]
 800204c:	2200      	movs	r2, #0
 800204e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002052:	2301      	movs	r3, #1
 8002054:	e046      	b.n	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002056:	687b      	ldr	r3, [r7, #4]
 8002058:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800205c:	d021      	beq.n	80020a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800205e:	f7ff f9f7 	bl	8001450 <HAL_GetTick>
 8002062:	4602      	mov	r2, r0
 8002064:	683b      	ldr	r3, [r7, #0]
 8002066:	1ad3      	subs	r3, r2, r3
 8002068:	687a      	ldr	r2, [r7, #4]
 800206a:	429a      	cmp	r2, r3
 800206c:	d302      	bcc.n	8002074 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	2b00      	cmp	r3, #0
 8002072:	d116      	bne.n	80020a2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002074:	68fb      	ldr	r3, [r7, #12]
 8002076:	2200      	movs	r2, #0
 8002078:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800207a:	68fb      	ldr	r3, [r7, #12]
 800207c:	2220      	movs	r2, #32
 800207e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002082:	68fb      	ldr	r3, [r7, #12]
 8002084:	2200      	movs	r2, #0
 8002086:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800208a:	68fb      	ldr	r3, [r7, #12]
 800208c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800208e:	f043 0220 	orr.w	r2, r3, #32
 8002092:	68fb      	ldr	r3, [r7, #12]
 8002094:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002096:	68fb      	ldr	r3, [r7, #12]
 8002098:	2200      	movs	r2, #0
 800209a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800209e:	2301      	movs	r3, #1
 80020a0:	e020      	b.n	80020e4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	0c1b      	lsrs	r3, r3, #16
 80020a6:	b2db      	uxtb	r3, r3
 80020a8:	2b01      	cmp	r3, #1
 80020aa:	d10c      	bne.n	80020c6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80020ac:	68fb      	ldr	r3, [r7, #12]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	695b      	ldr	r3, [r3, #20]
 80020b2:	43da      	mvns	r2, r3
 80020b4:	68bb      	ldr	r3, [r7, #8]
 80020b6:	4013      	ands	r3, r2
 80020b8:	b29b      	uxth	r3, r3
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	bf14      	ite	ne
 80020be:	2301      	movne	r3, #1
 80020c0:	2300      	moveq	r3, #0
 80020c2:	b2db      	uxtb	r3, r3
 80020c4:	e00b      	b.n	80020de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80020c6:	68fb      	ldr	r3, [r7, #12]
 80020c8:	681b      	ldr	r3, [r3, #0]
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	43da      	mvns	r2, r3
 80020ce:	68bb      	ldr	r3, [r7, #8]
 80020d0:	4013      	ands	r3, r2
 80020d2:	b29b      	uxth	r3, r3
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	bf14      	ite	ne
 80020d8:	2301      	movne	r3, #1
 80020da:	2300      	moveq	r3, #0
 80020dc:	b2db      	uxtb	r3, r3
 80020de:	2b00      	cmp	r3, #0
 80020e0:	d18d      	bne.n	8001ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80020e2:	2300      	movs	r3, #0
}
 80020e4:	4618      	mov	r0, r3
 80020e6:	3710      	adds	r7, #16
 80020e8:	46bd      	mov	sp, r7
 80020ea:	bd80      	pop	{r7, pc}

080020ec <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80020ec:	b580      	push	{r7, lr}
 80020ee:	b084      	sub	sp, #16
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	60f8      	str	r0, [r7, #12]
 80020f4:	60b9      	str	r1, [r7, #8]
 80020f6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80020f8:	e02d      	b.n	8002156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f878 	bl	80021f0 <I2C_IsAcknowledgeFailed>
 8002100:	4603      	mov	r3, r0
 8002102:	2b00      	cmp	r3, #0
 8002104:	d001      	beq.n	800210a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002106:	2301      	movs	r3, #1
 8002108:	e02d      	b.n	8002166 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800210a:	68bb      	ldr	r3, [r7, #8]
 800210c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002110:	d021      	beq.n	8002156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002112:	f7ff f99d 	bl	8001450 <HAL_GetTick>
 8002116:	4602      	mov	r2, r0
 8002118:	687b      	ldr	r3, [r7, #4]
 800211a:	1ad3      	subs	r3, r2, r3
 800211c:	68ba      	ldr	r2, [r7, #8]
 800211e:	429a      	cmp	r2, r3
 8002120:	d302      	bcc.n	8002128 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	2b00      	cmp	r3, #0
 8002126:	d116      	bne.n	8002156 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	2200      	movs	r2, #0
 800212c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800212e:	68fb      	ldr	r3, [r7, #12]
 8002130:	2220      	movs	r2, #32
 8002132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002136:	68fb      	ldr	r3, [r7, #12]
 8002138:	2200      	movs	r2, #0
 800213a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800213e:	68fb      	ldr	r3, [r7, #12]
 8002140:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002142:	f043 0220 	orr.w	r2, r3, #32
 8002146:	68fb      	ldr	r3, [r7, #12]
 8002148:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	2200      	movs	r2, #0
 800214e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002152:	2301      	movs	r3, #1
 8002154:	e007      	b.n	8002166 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	695b      	ldr	r3, [r3, #20]
 800215c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002160:	2b80      	cmp	r3, #128	; 0x80
 8002162:	d1ca      	bne.n	80020fa <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002164:	2300      	movs	r3, #0
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800216e:	b580      	push	{r7, lr}
 8002170:	b084      	sub	sp, #16
 8002172:	af00      	add	r7, sp, #0
 8002174:	60f8      	str	r0, [r7, #12]
 8002176:	60b9      	str	r1, [r7, #8]
 8002178:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800217a:	e02d      	b.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f000 f837 	bl	80021f0 <I2C_IsAcknowledgeFailed>
 8002182:	4603      	mov	r3, r0
 8002184:	2b00      	cmp	r3, #0
 8002186:	d001      	beq.n	800218c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002188:	2301      	movs	r3, #1
 800218a:	e02d      	b.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002192:	d021      	beq.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002194:	f7ff f95c 	bl	8001450 <HAL_GetTick>
 8002198:	4602      	mov	r2, r0
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	68ba      	ldr	r2, [r7, #8]
 80021a0:	429a      	cmp	r2, r3
 80021a2:	d302      	bcc.n	80021aa <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80021a4:	68bb      	ldr	r3, [r7, #8]
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d116      	bne.n	80021d8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80021aa:	68fb      	ldr	r3, [r7, #12]
 80021ac:	2200      	movs	r2, #0
 80021ae:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80021b0:	68fb      	ldr	r3, [r7, #12]
 80021b2:	2220      	movs	r2, #32
 80021b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80021b8:	68fb      	ldr	r3, [r7, #12]
 80021ba:	2200      	movs	r2, #0
 80021bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80021c0:	68fb      	ldr	r3, [r7, #12]
 80021c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80021c4:	f043 0220 	orr.w	r2, r3, #32
 80021c8:	68fb      	ldr	r3, [r7, #12]
 80021ca:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80021cc:	68fb      	ldr	r3, [r7, #12]
 80021ce:	2200      	movs	r2, #0
 80021d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80021d4:	2301      	movs	r3, #1
 80021d6:	e007      	b.n	80021e8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	695b      	ldr	r3, [r3, #20]
 80021de:	f003 0304 	and.w	r3, r3, #4
 80021e2:	2b04      	cmp	r3, #4
 80021e4:	d1ca      	bne.n	800217c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80021e6:	2300      	movs	r3, #0
}
 80021e8:	4618      	mov	r0, r3
 80021ea:	3710      	adds	r7, #16
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bd80      	pop	{r7, pc}

080021f0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80021f0:	b480      	push	{r7}
 80021f2:	b083      	sub	sp, #12
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	695b      	ldr	r3, [r3, #20]
 80021fe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002202:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002206:	d11b      	bne.n	8002240 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002210:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	2200      	movs	r2, #0
 8002216:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	2220      	movs	r2, #32
 800221c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	2200      	movs	r2, #0
 8002224:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002228:	687b      	ldr	r3, [r7, #4]
 800222a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800222c:	f043 0204 	orr.w	r2, r3, #4
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002234:	687b      	ldr	r3, [r7, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800223c:	2301      	movs	r3, #1
 800223e:	e000      	b.n	8002242 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002240:	2300      	movs	r3, #0
}
 8002242:	4618      	mov	r0, r3
 8002244:	370c      	adds	r7, #12
 8002246:	46bd      	mov	sp, r7
 8002248:	f85d 7b04 	ldr.w	r7, [sp], #4
 800224c:	4770      	bx	lr
	...

08002250 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002250:	b580      	push	{r7, lr}
 8002252:	b086      	sub	sp, #24
 8002254:	af00      	add	r7, sp, #0
 8002256:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2b00      	cmp	r3, #0
 800225c:	d101      	bne.n	8002262 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800225e:	2301      	movs	r3, #1
 8002260:	e267      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0301 	and.w	r3, r3, #1
 800226a:	2b00      	cmp	r3, #0
 800226c:	d075      	beq.n	800235a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800226e:	4b88      	ldr	r3, [pc, #544]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002270:	689b      	ldr	r3, [r3, #8]
 8002272:	f003 030c 	and.w	r3, r3, #12
 8002276:	2b04      	cmp	r3, #4
 8002278:	d00c      	beq.n	8002294 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800227a:	4b85      	ldr	r3, [pc, #532]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 800227c:	689b      	ldr	r3, [r3, #8]
 800227e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002282:	2b08      	cmp	r3, #8
 8002284:	d112      	bne.n	80022ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002286:	4b82      	ldr	r3, [pc, #520]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002288:	685b      	ldr	r3, [r3, #4]
 800228a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800228e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002292:	d10b      	bne.n	80022ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002294:	4b7e      	ldr	r3, [pc, #504]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800229c:	2b00      	cmp	r3, #0
 800229e:	d05b      	beq.n	8002358 <HAL_RCC_OscConfig+0x108>
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	685b      	ldr	r3, [r3, #4]
 80022a4:	2b00      	cmp	r3, #0
 80022a6:	d157      	bne.n	8002358 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80022a8:	2301      	movs	r3, #1
 80022aa:	e242      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	685b      	ldr	r3, [r3, #4]
 80022b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80022b4:	d106      	bne.n	80022c4 <HAL_RCC_OscConfig+0x74>
 80022b6:	4b76      	ldr	r3, [pc, #472]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	4a75      	ldr	r2, [pc, #468]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022c0:	6013      	str	r3, [r2, #0]
 80022c2:	e01d      	b.n	8002300 <HAL_RCC_OscConfig+0xb0>
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80022cc:	d10c      	bne.n	80022e8 <HAL_RCC_OscConfig+0x98>
 80022ce:	4b70      	ldr	r3, [pc, #448]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	4a6f      	ldr	r2, [pc, #444]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80022d8:	6013      	str	r3, [r2, #0]
 80022da:	4b6d      	ldr	r3, [pc, #436]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	4a6c      	ldr	r2, [pc, #432]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80022e4:	6013      	str	r3, [r2, #0]
 80022e6:	e00b      	b.n	8002300 <HAL_RCC_OscConfig+0xb0>
 80022e8:	4b69      	ldr	r3, [pc, #420]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	4a68      	ldr	r2, [pc, #416]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80022f2:	6013      	str	r3, [r2, #0]
 80022f4:	4b66      	ldr	r3, [pc, #408]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022f6:	681b      	ldr	r3, [r3, #0]
 80022f8:	4a65      	ldr	r2, [pc, #404]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80022fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80022fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	685b      	ldr	r3, [r3, #4]
 8002304:	2b00      	cmp	r3, #0
 8002306:	d013      	beq.n	8002330 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002308:	f7ff f8a2 	bl	8001450 <HAL_GetTick>
 800230c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800230e:	e008      	b.n	8002322 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002310:	f7ff f89e 	bl	8001450 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	693b      	ldr	r3, [r7, #16]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b64      	cmp	r3, #100	; 0x64
 800231c:	d901      	bls.n	8002322 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800231e:	2303      	movs	r3, #3
 8002320:	e207      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002322:	4b5b      	ldr	r3, [pc, #364]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800232a:	2b00      	cmp	r3, #0
 800232c:	d0f0      	beq.n	8002310 <HAL_RCC_OscConfig+0xc0>
 800232e:	e014      	b.n	800235a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002330:	f7ff f88e 	bl	8001450 <HAL_GetTick>
 8002334:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002336:	e008      	b.n	800234a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002338:	f7ff f88a 	bl	8001450 <HAL_GetTick>
 800233c:	4602      	mov	r2, r0
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	1ad3      	subs	r3, r2, r3
 8002342:	2b64      	cmp	r3, #100	; 0x64
 8002344:	d901      	bls.n	800234a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002346:	2303      	movs	r3, #3
 8002348:	e1f3      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800234a:	4b51      	ldr	r3, [pc, #324]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 800234c:	681b      	ldr	r3, [r3, #0]
 800234e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002352:	2b00      	cmp	r3, #0
 8002354:	d1f0      	bne.n	8002338 <HAL_RCC_OscConfig+0xe8>
 8002356:	e000      	b.n	800235a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002358:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 0302 	and.w	r3, r3, #2
 8002362:	2b00      	cmp	r3, #0
 8002364:	d063      	beq.n	800242e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002366:	4b4a      	ldr	r3, [pc, #296]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002368:	689b      	ldr	r3, [r3, #8]
 800236a:	f003 030c 	and.w	r3, r3, #12
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00b      	beq.n	800238a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002372:	4b47      	ldr	r3, [pc, #284]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002374:	689b      	ldr	r3, [r3, #8]
 8002376:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800237a:	2b08      	cmp	r3, #8
 800237c:	d11c      	bne.n	80023b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800237e:	4b44      	ldr	r3, [pc, #272]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002380:	685b      	ldr	r3, [r3, #4]
 8002382:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002386:	2b00      	cmp	r3, #0
 8002388:	d116      	bne.n	80023b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800238a:	4b41      	ldr	r3, [pc, #260]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f003 0302 	and.w	r3, r3, #2
 8002392:	2b00      	cmp	r3, #0
 8002394:	d005      	beq.n	80023a2 <HAL_RCC_OscConfig+0x152>
 8002396:	687b      	ldr	r3, [r7, #4]
 8002398:	68db      	ldr	r3, [r3, #12]
 800239a:	2b01      	cmp	r3, #1
 800239c:	d001      	beq.n	80023a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800239e:	2301      	movs	r3, #1
 80023a0:	e1c7      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023a2:	4b3b      	ldr	r3, [pc, #236]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	691b      	ldr	r3, [r3, #16]
 80023ae:	00db      	lsls	r3, r3, #3
 80023b0:	4937      	ldr	r1, [pc, #220]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80023b2:	4313      	orrs	r3, r2
 80023b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80023b6:	e03a      	b.n	800242e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	2b00      	cmp	r3, #0
 80023be:	d020      	beq.n	8002402 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80023c0:	4b34      	ldr	r3, [pc, #208]	; (8002494 <HAL_RCC_OscConfig+0x244>)
 80023c2:	2201      	movs	r2, #1
 80023c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023c6:	f7ff f843 	bl	8001450 <HAL_GetTick>
 80023ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023cc:	e008      	b.n	80023e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80023ce:	f7ff f83f 	bl	8001450 <HAL_GetTick>
 80023d2:	4602      	mov	r2, r0
 80023d4:	693b      	ldr	r3, [r7, #16]
 80023d6:	1ad3      	subs	r3, r2, r3
 80023d8:	2b02      	cmp	r3, #2
 80023da:	d901      	bls.n	80023e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80023dc:	2303      	movs	r3, #3
 80023de:	e1a8      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80023e0:	4b2b      	ldr	r3, [pc, #172]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f003 0302 	and.w	r3, r3, #2
 80023e8:	2b00      	cmp	r3, #0
 80023ea:	d0f0      	beq.n	80023ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80023ec:	4b28      	ldr	r3, [pc, #160]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	691b      	ldr	r3, [r3, #16]
 80023f8:	00db      	lsls	r3, r3, #3
 80023fa:	4925      	ldr	r1, [pc, #148]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 80023fc:	4313      	orrs	r3, r2
 80023fe:	600b      	str	r3, [r1, #0]
 8002400:	e015      	b.n	800242e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002402:	4b24      	ldr	r3, [pc, #144]	; (8002494 <HAL_RCC_OscConfig+0x244>)
 8002404:	2200      	movs	r2, #0
 8002406:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002408:	f7ff f822 	bl	8001450 <HAL_GetTick>
 800240c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800240e:	e008      	b.n	8002422 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002410:	f7ff f81e 	bl	8001450 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	693b      	ldr	r3, [r7, #16]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	2b02      	cmp	r3, #2
 800241c:	d901      	bls.n	8002422 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800241e:	2303      	movs	r3, #3
 8002420:	e187      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002422:	4b1b      	ldr	r3, [pc, #108]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002424:	681b      	ldr	r3, [r3, #0]
 8002426:	f003 0302 	and.w	r3, r3, #2
 800242a:	2b00      	cmp	r3, #0
 800242c:	d1f0      	bne.n	8002410 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	681b      	ldr	r3, [r3, #0]
 8002432:	f003 0308 	and.w	r3, r3, #8
 8002436:	2b00      	cmp	r3, #0
 8002438:	d036      	beq.n	80024a8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800243a:	687b      	ldr	r3, [r7, #4]
 800243c:	695b      	ldr	r3, [r3, #20]
 800243e:	2b00      	cmp	r3, #0
 8002440:	d016      	beq.n	8002470 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002442:	4b15      	ldr	r3, [pc, #84]	; (8002498 <HAL_RCC_OscConfig+0x248>)
 8002444:	2201      	movs	r2, #1
 8002446:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002448:	f7ff f802 	bl	8001450 <HAL_GetTick>
 800244c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800244e:	e008      	b.n	8002462 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002450:	f7fe fffe 	bl	8001450 <HAL_GetTick>
 8002454:	4602      	mov	r2, r0
 8002456:	693b      	ldr	r3, [r7, #16]
 8002458:	1ad3      	subs	r3, r2, r3
 800245a:	2b02      	cmp	r3, #2
 800245c:	d901      	bls.n	8002462 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800245e:	2303      	movs	r3, #3
 8002460:	e167      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002462:	4b0b      	ldr	r3, [pc, #44]	; (8002490 <HAL_RCC_OscConfig+0x240>)
 8002464:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002466:	f003 0302 	and.w	r3, r3, #2
 800246a:	2b00      	cmp	r3, #0
 800246c:	d0f0      	beq.n	8002450 <HAL_RCC_OscConfig+0x200>
 800246e:	e01b      	b.n	80024a8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002470:	4b09      	ldr	r3, [pc, #36]	; (8002498 <HAL_RCC_OscConfig+0x248>)
 8002472:	2200      	movs	r2, #0
 8002474:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002476:	f7fe ffeb 	bl	8001450 <HAL_GetTick>
 800247a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800247c:	e00e      	b.n	800249c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800247e:	f7fe ffe7 	bl	8001450 <HAL_GetTick>
 8002482:	4602      	mov	r2, r0
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	1ad3      	subs	r3, r2, r3
 8002488:	2b02      	cmp	r3, #2
 800248a:	d907      	bls.n	800249c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800248c:	2303      	movs	r3, #3
 800248e:	e150      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
 8002490:	40023800 	.word	0x40023800
 8002494:	42470000 	.word	0x42470000
 8002498:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800249c:	4b88      	ldr	r3, [pc, #544]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 800249e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80024a0:	f003 0302 	and.w	r3, r3, #2
 80024a4:	2b00      	cmp	r3, #0
 80024a6:	d1ea      	bne.n	800247e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	f003 0304 	and.w	r3, r3, #4
 80024b0:	2b00      	cmp	r3, #0
 80024b2:	f000 8097 	beq.w	80025e4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80024b6:	2300      	movs	r3, #0
 80024b8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80024ba:	4b81      	ldr	r3, [pc, #516]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80024bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024c2:	2b00      	cmp	r3, #0
 80024c4:	d10f      	bne.n	80024e6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80024c6:	2300      	movs	r3, #0
 80024c8:	60bb      	str	r3, [r7, #8]
 80024ca:	4b7d      	ldr	r3, [pc, #500]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80024cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024ce:	4a7c      	ldr	r2, [pc, #496]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80024d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80024d4:	6413      	str	r3, [r2, #64]	; 0x40
 80024d6:	4b7a      	ldr	r3, [pc, #488]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80024d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024de:	60bb      	str	r3, [r7, #8]
 80024e0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80024e2:	2301      	movs	r3, #1
 80024e4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80024e6:	4b77      	ldr	r3, [pc, #476]	; (80026c4 <HAL_RCC_OscConfig+0x474>)
 80024e8:	681b      	ldr	r3, [r3, #0]
 80024ea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d118      	bne.n	8002524 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80024f2:	4b74      	ldr	r3, [pc, #464]	; (80026c4 <HAL_RCC_OscConfig+0x474>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4a73      	ldr	r2, [pc, #460]	; (80026c4 <HAL_RCC_OscConfig+0x474>)
 80024f8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80024fc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80024fe:	f7fe ffa7 	bl	8001450 <HAL_GetTick>
 8002502:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002504:	e008      	b.n	8002518 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002506:	f7fe ffa3 	bl	8001450 <HAL_GetTick>
 800250a:	4602      	mov	r2, r0
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	1ad3      	subs	r3, r2, r3
 8002510:	2b02      	cmp	r3, #2
 8002512:	d901      	bls.n	8002518 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002514:	2303      	movs	r3, #3
 8002516:	e10c      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002518:	4b6a      	ldr	r3, [pc, #424]	; (80026c4 <HAL_RCC_OscConfig+0x474>)
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002520:	2b00      	cmp	r3, #0
 8002522:	d0f0      	beq.n	8002506 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	689b      	ldr	r3, [r3, #8]
 8002528:	2b01      	cmp	r3, #1
 800252a:	d106      	bne.n	800253a <HAL_RCC_OscConfig+0x2ea>
 800252c:	4b64      	ldr	r3, [pc, #400]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 800252e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002530:	4a63      	ldr	r2, [pc, #396]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 8002532:	f043 0301 	orr.w	r3, r3, #1
 8002536:	6713      	str	r3, [r2, #112]	; 0x70
 8002538:	e01c      	b.n	8002574 <HAL_RCC_OscConfig+0x324>
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	689b      	ldr	r3, [r3, #8]
 800253e:	2b05      	cmp	r3, #5
 8002540:	d10c      	bne.n	800255c <HAL_RCC_OscConfig+0x30c>
 8002542:	4b5f      	ldr	r3, [pc, #380]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 8002544:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002546:	4a5e      	ldr	r2, [pc, #376]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 8002548:	f043 0304 	orr.w	r3, r3, #4
 800254c:	6713      	str	r3, [r2, #112]	; 0x70
 800254e:	4b5c      	ldr	r3, [pc, #368]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 8002550:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002552:	4a5b      	ldr	r2, [pc, #364]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6713      	str	r3, [r2, #112]	; 0x70
 800255a:	e00b      	b.n	8002574 <HAL_RCC_OscConfig+0x324>
 800255c:	4b58      	ldr	r3, [pc, #352]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 800255e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002560:	4a57      	ldr	r2, [pc, #348]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 8002562:	f023 0301 	bic.w	r3, r3, #1
 8002566:	6713      	str	r3, [r2, #112]	; 0x70
 8002568:	4b55      	ldr	r3, [pc, #340]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 800256a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800256c:	4a54      	ldr	r2, [pc, #336]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 800256e:	f023 0304 	bic.w	r3, r3, #4
 8002572:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	689b      	ldr	r3, [r3, #8]
 8002578:	2b00      	cmp	r3, #0
 800257a:	d015      	beq.n	80025a8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800257c:	f7fe ff68 	bl	8001450 <HAL_GetTick>
 8002580:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002582:	e00a      	b.n	800259a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002584:	f7fe ff64 	bl	8001450 <HAL_GetTick>
 8002588:	4602      	mov	r2, r0
 800258a:	693b      	ldr	r3, [r7, #16]
 800258c:	1ad3      	subs	r3, r2, r3
 800258e:	f241 3288 	movw	r2, #5000	; 0x1388
 8002592:	4293      	cmp	r3, r2
 8002594:	d901      	bls.n	800259a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002596:	2303      	movs	r3, #3
 8002598:	e0cb      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800259a:	4b49      	ldr	r3, [pc, #292]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 800259c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800259e:	f003 0302 	and.w	r3, r3, #2
 80025a2:	2b00      	cmp	r3, #0
 80025a4:	d0ee      	beq.n	8002584 <HAL_RCC_OscConfig+0x334>
 80025a6:	e014      	b.n	80025d2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80025a8:	f7fe ff52 	bl	8001450 <HAL_GetTick>
 80025ac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025ae:	e00a      	b.n	80025c6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80025b0:	f7fe ff4e 	bl	8001450 <HAL_GetTick>
 80025b4:	4602      	mov	r2, r0
 80025b6:	693b      	ldr	r3, [r7, #16]
 80025b8:	1ad3      	subs	r3, r2, r3
 80025ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80025be:	4293      	cmp	r3, r2
 80025c0:	d901      	bls.n	80025c6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80025c2:	2303      	movs	r3, #3
 80025c4:	e0b5      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80025c6:	4b3e      	ldr	r3, [pc, #248]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80025c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80025ca:	f003 0302 	and.w	r3, r3, #2
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d1ee      	bne.n	80025b0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80025d2:	7dfb      	ldrb	r3, [r7, #23]
 80025d4:	2b01      	cmp	r3, #1
 80025d6:	d105      	bne.n	80025e4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80025d8:	4b39      	ldr	r3, [pc, #228]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80025da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025dc:	4a38      	ldr	r2, [pc, #224]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80025de:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025e2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	699b      	ldr	r3, [r3, #24]
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	f000 80a1 	beq.w	8002730 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80025ee:	4b34      	ldr	r3, [pc, #208]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	f003 030c 	and.w	r3, r3, #12
 80025f6:	2b08      	cmp	r3, #8
 80025f8:	d05c      	beq.n	80026b4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	699b      	ldr	r3, [r3, #24]
 80025fe:	2b02      	cmp	r3, #2
 8002600:	d141      	bne.n	8002686 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002602:	4b31      	ldr	r3, [pc, #196]	; (80026c8 <HAL_RCC_OscConfig+0x478>)
 8002604:	2200      	movs	r2, #0
 8002606:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002608:	f7fe ff22 	bl	8001450 <HAL_GetTick>
 800260c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800260e:	e008      	b.n	8002622 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002610:	f7fe ff1e 	bl	8001450 <HAL_GetTick>
 8002614:	4602      	mov	r2, r0
 8002616:	693b      	ldr	r3, [r7, #16]
 8002618:	1ad3      	subs	r3, r2, r3
 800261a:	2b02      	cmp	r3, #2
 800261c:	d901      	bls.n	8002622 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800261e:	2303      	movs	r3, #3
 8002620:	e087      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002622:	4b27      	ldr	r3, [pc, #156]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800262a:	2b00      	cmp	r3, #0
 800262c:	d1f0      	bne.n	8002610 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800262e:	687b      	ldr	r3, [r7, #4]
 8002630:	69da      	ldr	r2, [r3, #28]
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6a1b      	ldr	r3, [r3, #32]
 8002636:	431a      	orrs	r2, r3
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800263c:	019b      	lsls	r3, r3, #6
 800263e:	431a      	orrs	r2, r3
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002644:	085b      	lsrs	r3, r3, #1
 8002646:	3b01      	subs	r3, #1
 8002648:	041b      	lsls	r3, r3, #16
 800264a:	431a      	orrs	r2, r3
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002650:	061b      	lsls	r3, r3, #24
 8002652:	491b      	ldr	r1, [pc, #108]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 8002654:	4313      	orrs	r3, r2
 8002656:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002658:	4b1b      	ldr	r3, [pc, #108]	; (80026c8 <HAL_RCC_OscConfig+0x478>)
 800265a:	2201      	movs	r2, #1
 800265c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800265e:	f7fe fef7 	bl	8001450 <HAL_GetTick>
 8002662:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002664:	e008      	b.n	8002678 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002666:	f7fe fef3 	bl	8001450 <HAL_GetTick>
 800266a:	4602      	mov	r2, r0
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	1ad3      	subs	r3, r2, r3
 8002670:	2b02      	cmp	r3, #2
 8002672:	d901      	bls.n	8002678 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002674:	2303      	movs	r3, #3
 8002676:	e05c      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002678:	4b11      	ldr	r3, [pc, #68]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002680:	2b00      	cmp	r3, #0
 8002682:	d0f0      	beq.n	8002666 <HAL_RCC_OscConfig+0x416>
 8002684:	e054      	b.n	8002730 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002686:	4b10      	ldr	r3, [pc, #64]	; (80026c8 <HAL_RCC_OscConfig+0x478>)
 8002688:	2200      	movs	r2, #0
 800268a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800268c:	f7fe fee0 	bl	8001450 <HAL_GetTick>
 8002690:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002692:	e008      	b.n	80026a6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002694:	f7fe fedc 	bl	8001450 <HAL_GetTick>
 8002698:	4602      	mov	r2, r0
 800269a:	693b      	ldr	r3, [r7, #16]
 800269c:	1ad3      	subs	r3, r2, r3
 800269e:	2b02      	cmp	r3, #2
 80026a0:	d901      	bls.n	80026a6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80026a2:	2303      	movs	r3, #3
 80026a4:	e045      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026a6:	4b06      	ldr	r3, [pc, #24]	; (80026c0 <HAL_RCC_OscConfig+0x470>)
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80026ae:	2b00      	cmp	r3, #0
 80026b0:	d1f0      	bne.n	8002694 <HAL_RCC_OscConfig+0x444>
 80026b2:	e03d      	b.n	8002730 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	699b      	ldr	r3, [r3, #24]
 80026b8:	2b01      	cmp	r3, #1
 80026ba:	d107      	bne.n	80026cc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80026bc:	2301      	movs	r3, #1
 80026be:	e038      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
 80026c0:	40023800 	.word	0x40023800
 80026c4:	40007000 	.word	0x40007000
 80026c8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80026cc:	4b1b      	ldr	r3, [pc, #108]	; (800273c <HAL_RCC_OscConfig+0x4ec>)
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	699b      	ldr	r3, [r3, #24]
 80026d6:	2b01      	cmp	r3, #1
 80026d8:	d028      	beq.n	800272c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026da:	68fb      	ldr	r3, [r7, #12]
 80026dc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026e0:	687b      	ldr	r3, [r7, #4]
 80026e2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026e4:	429a      	cmp	r2, r3
 80026e6:	d121      	bne.n	800272c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80026e8:	68fb      	ldr	r3, [r7, #12]
 80026ea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d11a      	bne.n	800272c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026fc:	4013      	ands	r3, r2
 80026fe:	687a      	ldr	r2, [r7, #4]
 8002700:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002702:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002704:	4293      	cmp	r3, r2
 8002706:	d111      	bne.n	800272c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002708:	68fb      	ldr	r3, [r7, #12]
 800270a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002712:	085b      	lsrs	r3, r3, #1
 8002714:	3b01      	subs	r3, #1
 8002716:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002718:	429a      	cmp	r2, r3
 800271a:	d107      	bne.n	800272c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800271c:	68fb      	ldr	r3, [r7, #12]
 800271e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002726:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002728:	429a      	cmp	r2, r3
 800272a:	d001      	beq.n	8002730 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800272c:	2301      	movs	r3, #1
 800272e:	e000      	b.n	8002732 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002730:	2300      	movs	r3, #0
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}
 800273a:	bf00      	nop
 800273c:	40023800 	.word	0x40023800

08002740 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002740:	b580      	push	{r7, lr}
 8002742:	b084      	sub	sp, #16
 8002744:	af00      	add	r7, sp, #0
 8002746:	6078      	str	r0, [r7, #4]
 8002748:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800274a:	687b      	ldr	r3, [r7, #4]
 800274c:	2b00      	cmp	r3, #0
 800274e:	d101      	bne.n	8002754 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002750:	2301      	movs	r3, #1
 8002752:	e0cc      	b.n	80028ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002754:	4b68      	ldr	r3, [pc, #416]	; (80028f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	f003 0307 	and.w	r3, r3, #7
 800275c:	683a      	ldr	r2, [r7, #0]
 800275e:	429a      	cmp	r2, r3
 8002760:	d90c      	bls.n	800277c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002762:	4b65      	ldr	r3, [pc, #404]	; (80028f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002764:	683a      	ldr	r2, [r7, #0]
 8002766:	b2d2      	uxtb	r2, r2
 8002768:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800276a:	4b63      	ldr	r3, [pc, #396]	; (80028f8 <HAL_RCC_ClockConfig+0x1b8>)
 800276c:	681b      	ldr	r3, [r3, #0]
 800276e:	f003 0307 	and.w	r3, r3, #7
 8002772:	683a      	ldr	r2, [r7, #0]
 8002774:	429a      	cmp	r2, r3
 8002776:	d001      	beq.n	800277c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002778:	2301      	movs	r3, #1
 800277a:	e0b8      	b.n	80028ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	f003 0302 	and.w	r3, r3, #2
 8002784:	2b00      	cmp	r3, #0
 8002786:	d020      	beq.n	80027ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f003 0304 	and.w	r3, r3, #4
 8002790:	2b00      	cmp	r3, #0
 8002792:	d005      	beq.n	80027a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002794:	4b59      	ldr	r3, [pc, #356]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 8002796:	689b      	ldr	r3, [r3, #8]
 8002798:	4a58      	ldr	r2, [pc, #352]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 800279a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800279e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	f003 0308 	and.w	r3, r3, #8
 80027a8:	2b00      	cmp	r3, #0
 80027aa:	d005      	beq.n	80027b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80027ac:	4b53      	ldr	r3, [pc, #332]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	4a52      	ldr	r2, [pc, #328]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80027b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80027b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80027b8:	4b50      	ldr	r3, [pc, #320]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80027ba:	689b      	ldr	r3, [r3, #8]
 80027bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	689b      	ldr	r3, [r3, #8]
 80027c4:	494d      	ldr	r1, [pc, #308]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80027c6:	4313      	orrs	r3, r2
 80027c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	681b      	ldr	r3, [r3, #0]
 80027ce:	f003 0301 	and.w	r3, r3, #1
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d044      	beq.n	8002860 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027d6:	687b      	ldr	r3, [r7, #4]
 80027d8:	685b      	ldr	r3, [r3, #4]
 80027da:	2b01      	cmp	r3, #1
 80027dc:	d107      	bne.n	80027ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027de:	4b47      	ldr	r3, [pc, #284]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027e6:	2b00      	cmp	r3, #0
 80027e8:	d119      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80027ea:	2301      	movs	r3, #1
 80027ec:	e07f      	b.n	80028ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	2b02      	cmp	r3, #2
 80027f4:	d003      	beq.n	80027fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80027fa:	2b03      	cmp	r3, #3
 80027fc:	d107      	bne.n	800280e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027fe:	4b3f      	ldr	r3, [pc, #252]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 8002800:	681b      	ldr	r3, [r3, #0]
 8002802:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002806:	2b00      	cmp	r3, #0
 8002808:	d109      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800280a:	2301      	movs	r3, #1
 800280c:	e06f      	b.n	80028ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800280e:	4b3b      	ldr	r3, [pc, #236]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f003 0302 	and.w	r3, r3, #2
 8002816:	2b00      	cmp	r3, #0
 8002818:	d101      	bne.n	800281e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800281a:	2301      	movs	r3, #1
 800281c:	e067      	b.n	80028ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800281e:	4b37      	ldr	r3, [pc, #220]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 8002820:	689b      	ldr	r3, [r3, #8]
 8002822:	f023 0203 	bic.w	r2, r3, #3
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	685b      	ldr	r3, [r3, #4]
 800282a:	4934      	ldr	r1, [pc, #208]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 800282c:	4313      	orrs	r3, r2
 800282e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002830:	f7fe fe0e 	bl	8001450 <HAL_GetTick>
 8002834:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002836:	e00a      	b.n	800284e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002838:	f7fe fe0a 	bl	8001450 <HAL_GetTick>
 800283c:	4602      	mov	r2, r0
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	1ad3      	subs	r3, r2, r3
 8002842:	f241 3288 	movw	r2, #5000	; 0x1388
 8002846:	4293      	cmp	r3, r2
 8002848:	d901      	bls.n	800284e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800284a:	2303      	movs	r3, #3
 800284c:	e04f      	b.n	80028ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800284e:	4b2b      	ldr	r3, [pc, #172]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 8002850:	689b      	ldr	r3, [r3, #8]
 8002852:	f003 020c 	and.w	r2, r3, #12
 8002856:	687b      	ldr	r3, [r7, #4]
 8002858:	685b      	ldr	r3, [r3, #4]
 800285a:	009b      	lsls	r3, r3, #2
 800285c:	429a      	cmp	r2, r3
 800285e:	d1eb      	bne.n	8002838 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002860:	4b25      	ldr	r3, [pc, #148]	; (80028f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	f003 0307 	and.w	r3, r3, #7
 8002868:	683a      	ldr	r2, [r7, #0]
 800286a:	429a      	cmp	r2, r3
 800286c:	d20c      	bcs.n	8002888 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800286e:	4b22      	ldr	r3, [pc, #136]	; (80028f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002870:	683a      	ldr	r2, [r7, #0]
 8002872:	b2d2      	uxtb	r2, r2
 8002874:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002876:	4b20      	ldr	r3, [pc, #128]	; (80028f8 <HAL_RCC_ClockConfig+0x1b8>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0307 	and.w	r3, r3, #7
 800287e:	683a      	ldr	r2, [r7, #0]
 8002880:	429a      	cmp	r2, r3
 8002882:	d001      	beq.n	8002888 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002884:	2301      	movs	r3, #1
 8002886:	e032      	b.n	80028ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	f003 0304 	and.w	r3, r3, #4
 8002890:	2b00      	cmp	r3, #0
 8002892:	d008      	beq.n	80028a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002894:	4b19      	ldr	r3, [pc, #100]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 8002896:	689b      	ldr	r3, [r3, #8]
 8002898:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	4916      	ldr	r1, [pc, #88]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80028a2:	4313      	orrs	r3, r2
 80028a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0308 	and.w	r3, r3, #8
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d009      	beq.n	80028c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80028b2:	4b12      	ldr	r3, [pc, #72]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80028b4:	689b      	ldr	r3, [r3, #8]
 80028b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	691b      	ldr	r3, [r3, #16]
 80028be:	00db      	lsls	r3, r3, #3
 80028c0:	490e      	ldr	r1, [pc, #56]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80028c2:	4313      	orrs	r3, r2
 80028c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80028c6:	f000 f821 	bl	800290c <HAL_RCC_GetSysClockFreq>
 80028ca:	4602      	mov	r2, r0
 80028cc:	4b0b      	ldr	r3, [pc, #44]	; (80028fc <HAL_RCC_ClockConfig+0x1bc>)
 80028ce:	689b      	ldr	r3, [r3, #8]
 80028d0:	091b      	lsrs	r3, r3, #4
 80028d2:	f003 030f 	and.w	r3, r3, #15
 80028d6:	490a      	ldr	r1, [pc, #40]	; (8002900 <HAL_RCC_ClockConfig+0x1c0>)
 80028d8:	5ccb      	ldrb	r3, [r1, r3]
 80028da:	fa22 f303 	lsr.w	r3, r2, r3
 80028de:	4a09      	ldr	r2, [pc, #36]	; (8002904 <HAL_RCC_ClockConfig+0x1c4>)
 80028e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80028e2:	4b09      	ldr	r3, [pc, #36]	; (8002908 <HAL_RCC_ClockConfig+0x1c8>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	4618      	mov	r0, r3
 80028e8:	f7fe fd6e 	bl	80013c8 <HAL_InitTick>

  return HAL_OK;
 80028ec:	2300      	movs	r3, #0
}
 80028ee:	4618      	mov	r0, r3
 80028f0:	3710      	adds	r7, #16
 80028f2:	46bd      	mov	sp, r7
 80028f4:	bd80      	pop	{r7, pc}
 80028f6:	bf00      	nop
 80028f8:	40023c00 	.word	0x40023c00
 80028fc:	40023800 	.word	0x40023800
 8002900:	080042e4 	.word	0x080042e4
 8002904:	20001434 	.word	0x20001434
 8002908:	20001438 	.word	0x20001438

0800290c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800290c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002910:	b094      	sub	sp, #80	; 0x50
 8002912:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002914:	2300      	movs	r3, #0
 8002916:	647b      	str	r3, [r7, #68]	; 0x44
 8002918:	2300      	movs	r3, #0
 800291a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800291c:	2300      	movs	r3, #0
 800291e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002920:	2300      	movs	r3, #0
 8002922:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002924:	4b79      	ldr	r3, [pc, #484]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002926:	689b      	ldr	r3, [r3, #8]
 8002928:	f003 030c 	and.w	r3, r3, #12
 800292c:	2b08      	cmp	r3, #8
 800292e:	d00d      	beq.n	800294c <HAL_RCC_GetSysClockFreq+0x40>
 8002930:	2b08      	cmp	r3, #8
 8002932:	f200 80e1 	bhi.w	8002af8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002936:	2b00      	cmp	r3, #0
 8002938:	d002      	beq.n	8002940 <HAL_RCC_GetSysClockFreq+0x34>
 800293a:	2b04      	cmp	r3, #4
 800293c:	d003      	beq.n	8002946 <HAL_RCC_GetSysClockFreq+0x3a>
 800293e:	e0db      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002940:	4b73      	ldr	r3, [pc, #460]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002942:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002944:	e0db      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002946:	4b73      	ldr	r3, [pc, #460]	; (8002b14 <HAL_RCC_GetSysClockFreq+0x208>)
 8002948:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800294a:	e0d8      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800294c:	4b6f      	ldr	r3, [pc, #444]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x200>)
 800294e:	685b      	ldr	r3, [r3, #4]
 8002950:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002954:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002956:	4b6d      	ldr	r3, [pc, #436]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002958:	685b      	ldr	r3, [r3, #4]
 800295a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800295e:	2b00      	cmp	r3, #0
 8002960:	d063      	beq.n	8002a2a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002962:	4b6a      	ldr	r3, [pc, #424]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002964:	685b      	ldr	r3, [r3, #4]
 8002966:	099b      	lsrs	r3, r3, #6
 8002968:	2200      	movs	r2, #0
 800296a:	63bb      	str	r3, [r7, #56]	; 0x38
 800296c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800296e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002970:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002974:	633b      	str	r3, [r7, #48]	; 0x30
 8002976:	2300      	movs	r3, #0
 8002978:	637b      	str	r3, [r7, #52]	; 0x34
 800297a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800297e:	4622      	mov	r2, r4
 8002980:	462b      	mov	r3, r5
 8002982:	f04f 0000 	mov.w	r0, #0
 8002986:	f04f 0100 	mov.w	r1, #0
 800298a:	0159      	lsls	r1, r3, #5
 800298c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002990:	0150      	lsls	r0, r2, #5
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4621      	mov	r1, r4
 8002998:	1a51      	subs	r1, r2, r1
 800299a:	6139      	str	r1, [r7, #16]
 800299c:	4629      	mov	r1, r5
 800299e:	eb63 0301 	sbc.w	r3, r3, r1
 80029a2:	617b      	str	r3, [r7, #20]
 80029a4:	f04f 0200 	mov.w	r2, #0
 80029a8:	f04f 0300 	mov.w	r3, #0
 80029ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80029b0:	4659      	mov	r1, fp
 80029b2:	018b      	lsls	r3, r1, #6
 80029b4:	4651      	mov	r1, sl
 80029b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80029ba:	4651      	mov	r1, sl
 80029bc:	018a      	lsls	r2, r1, #6
 80029be:	4651      	mov	r1, sl
 80029c0:	ebb2 0801 	subs.w	r8, r2, r1
 80029c4:	4659      	mov	r1, fp
 80029c6:	eb63 0901 	sbc.w	r9, r3, r1
 80029ca:	f04f 0200 	mov.w	r2, #0
 80029ce:	f04f 0300 	mov.w	r3, #0
 80029d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80029d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80029da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80029de:	4690      	mov	r8, r2
 80029e0:	4699      	mov	r9, r3
 80029e2:	4623      	mov	r3, r4
 80029e4:	eb18 0303 	adds.w	r3, r8, r3
 80029e8:	60bb      	str	r3, [r7, #8]
 80029ea:	462b      	mov	r3, r5
 80029ec:	eb49 0303 	adc.w	r3, r9, r3
 80029f0:	60fb      	str	r3, [r7, #12]
 80029f2:	f04f 0200 	mov.w	r2, #0
 80029f6:	f04f 0300 	mov.w	r3, #0
 80029fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80029fe:	4629      	mov	r1, r5
 8002a00:	024b      	lsls	r3, r1, #9
 8002a02:	4621      	mov	r1, r4
 8002a04:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002a08:	4621      	mov	r1, r4
 8002a0a:	024a      	lsls	r2, r1, #9
 8002a0c:	4610      	mov	r0, r2
 8002a0e:	4619      	mov	r1, r3
 8002a10:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002a12:	2200      	movs	r2, #0
 8002a14:	62bb      	str	r3, [r7, #40]	; 0x28
 8002a16:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002a18:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002a1c:	f7fd fbe2 	bl	80001e4 <__aeabi_uldivmod>
 8002a20:	4602      	mov	r2, r0
 8002a22:	460b      	mov	r3, r1
 8002a24:	4613      	mov	r3, r2
 8002a26:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002a28:	e058      	b.n	8002adc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a2a:	4b38      	ldr	r3, [pc, #224]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	099b      	lsrs	r3, r3, #6
 8002a30:	2200      	movs	r2, #0
 8002a32:	4618      	mov	r0, r3
 8002a34:	4611      	mov	r1, r2
 8002a36:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002a3a:	623b      	str	r3, [r7, #32]
 8002a3c:	2300      	movs	r3, #0
 8002a3e:	627b      	str	r3, [r7, #36]	; 0x24
 8002a40:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002a44:	4642      	mov	r2, r8
 8002a46:	464b      	mov	r3, r9
 8002a48:	f04f 0000 	mov.w	r0, #0
 8002a4c:	f04f 0100 	mov.w	r1, #0
 8002a50:	0159      	lsls	r1, r3, #5
 8002a52:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a56:	0150      	lsls	r0, r2, #5
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4641      	mov	r1, r8
 8002a5e:	ebb2 0a01 	subs.w	sl, r2, r1
 8002a62:	4649      	mov	r1, r9
 8002a64:	eb63 0b01 	sbc.w	fp, r3, r1
 8002a68:	f04f 0200 	mov.w	r2, #0
 8002a6c:	f04f 0300 	mov.w	r3, #0
 8002a70:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002a74:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8002a78:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8002a7c:	ebb2 040a 	subs.w	r4, r2, sl
 8002a80:	eb63 050b 	sbc.w	r5, r3, fp
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	00eb      	lsls	r3, r5, #3
 8002a8e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002a92:	00e2      	lsls	r2, r4, #3
 8002a94:	4614      	mov	r4, r2
 8002a96:	461d      	mov	r5, r3
 8002a98:	4643      	mov	r3, r8
 8002a9a:	18e3      	adds	r3, r4, r3
 8002a9c:	603b      	str	r3, [r7, #0]
 8002a9e:	464b      	mov	r3, r9
 8002aa0:	eb45 0303 	adc.w	r3, r5, r3
 8002aa4:	607b      	str	r3, [r7, #4]
 8002aa6:	f04f 0200 	mov.w	r2, #0
 8002aaa:	f04f 0300 	mov.w	r3, #0
 8002aae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ab2:	4629      	mov	r1, r5
 8002ab4:	028b      	lsls	r3, r1, #10
 8002ab6:	4621      	mov	r1, r4
 8002ab8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002abc:	4621      	mov	r1, r4
 8002abe:	028a      	lsls	r2, r1, #10
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002ac6:	2200      	movs	r2, #0
 8002ac8:	61bb      	str	r3, [r7, #24]
 8002aca:	61fa      	str	r2, [r7, #28]
 8002acc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002ad0:	f7fd fb88 	bl	80001e4 <__aeabi_uldivmod>
 8002ad4:	4602      	mov	r2, r0
 8002ad6:	460b      	mov	r3, r1
 8002ad8:	4613      	mov	r3, r2
 8002ada:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002adc:	4b0b      	ldr	r3, [pc, #44]	; (8002b0c <HAL_RCC_GetSysClockFreq+0x200>)
 8002ade:	685b      	ldr	r3, [r3, #4]
 8002ae0:	0c1b      	lsrs	r3, r3, #16
 8002ae2:	f003 0303 	and.w	r3, r3, #3
 8002ae6:	3301      	adds	r3, #1
 8002ae8:	005b      	lsls	r3, r3, #1
 8002aea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8002aec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8002aee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002af0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002af4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002af6:	e002      	b.n	8002afe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002af8:	4b05      	ldr	r3, [pc, #20]	; (8002b10 <HAL_RCC_GetSysClockFreq+0x204>)
 8002afa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002afc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002afe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8002b00:	4618      	mov	r0, r3
 8002b02:	3750      	adds	r7, #80	; 0x50
 8002b04:	46bd      	mov	sp, r7
 8002b06:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b0a:	bf00      	nop
 8002b0c:	40023800 	.word	0x40023800
 8002b10:	00f42400 	.word	0x00f42400
 8002b14:	007a1200 	.word	0x007a1200

08002b18 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002b1c:	4b03      	ldr	r3, [pc, #12]	; (8002b2c <HAL_RCC_GetHCLKFreq+0x14>)
 8002b1e:	681b      	ldr	r3, [r3, #0]
}
 8002b20:	4618      	mov	r0, r3
 8002b22:	46bd      	mov	sp, r7
 8002b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b28:	4770      	bx	lr
 8002b2a:	bf00      	nop
 8002b2c:	20001434 	.word	0x20001434

08002b30 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002b30:	b580      	push	{r7, lr}
 8002b32:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8002b34:	f7ff fff0 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b38:	4602      	mov	r2, r0
 8002b3a:	4b05      	ldr	r3, [pc, #20]	; (8002b50 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002b3c:	689b      	ldr	r3, [r3, #8]
 8002b3e:	0a9b      	lsrs	r3, r3, #10
 8002b40:	f003 0307 	and.w	r3, r3, #7
 8002b44:	4903      	ldr	r1, [pc, #12]	; (8002b54 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002b46:	5ccb      	ldrb	r3, [r1, r3]
 8002b48:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	bd80      	pop	{r7, pc}
 8002b50:	40023800 	.word	0x40023800
 8002b54:	080042f4 	.word	0x080042f4

08002b58 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002b58:	b580      	push	{r7, lr}
 8002b5a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8002b5c:	f7ff ffdc 	bl	8002b18 <HAL_RCC_GetHCLKFreq>
 8002b60:	4602      	mov	r2, r0
 8002b62:	4b05      	ldr	r3, [pc, #20]	; (8002b78 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002b64:	689b      	ldr	r3, [r3, #8]
 8002b66:	0b5b      	lsrs	r3, r3, #13
 8002b68:	f003 0307 	and.w	r3, r3, #7
 8002b6c:	4903      	ldr	r1, [pc, #12]	; (8002b7c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002b6e:	5ccb      	ldrb	r3, [r1, r3]
 8002b70:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002b74:	4618      	mov	r0, r3
 8002b76:	bd80      	pop	{r7, pc}
 8002b78:	40023800 	.word	0x40023800
 8002b7c:	080042f4 	.word	0x080042f4

08002b80 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	b082      	sub	sp, #8
 8002b84:	af00      	add	r7, sp, #0
 8002b86:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	e07b      	b.n	8002c8a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d108      	bne.n	8002bac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	685b      	ldr	r3, [r3, #4]
 8002b9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002ba2:	d009      	beq.n	8002bb8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	61da      	str	r2, [r3, #28]
 8002baa:	e005      	b.n	8002bb8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	2200      	movs	r2, #0
 8002bb0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	2200      	movs	r2, #0
 8002bb6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	2200      	movs	r2, #0
 8002bbc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002bc4:	b2db      	uxtb	r3, r3
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d106      	bne.n	8002bd8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	2200      	movs	r2, #0
 8002bce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002bd2:	6878      	ldr	r0, [r7, #4]
 8002bd4:	f7fe fa68 	bl	80010a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	2202      	movs	r2, #2
 8002bdc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002bee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	685b      	ldr	r3, [r3, #4]
 8002bf4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	689b      	ldr	r3, [r3, #8]
 8002bfc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8002c00:	431a      	orrs	r2, r3
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	68db      	ldr	r3, [r3, #12]
 8002c06:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002c0a:	431a      	orrs	r2, r3
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	691b      	ldr	r3, [r3, #16]
 8002c10:	f003 0302 	and.w	r3, r3, #2
 8002c14:	431a      	orrs	r2, r3
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	695b      	ldr	r3, [r3, #20]
 8002c1a:	f003 0301 	and.w	r3, r3, #1
 8002c1e:	431a      	orrs	r2, r3
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	699b      	ldr	r3, [r3, #24]
 8002c24:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002c28:	431a      	orrs	r2, r3
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	69db      	ldr	r3, [r3, #28]
 8002c2e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8002c32:	431a      	orrs	r2, r3
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	6a1b      	ldr	r3, [r3, #32]
 8002c38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3c:	ea42 0103 	orr.w	r1, r2, r3
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c44:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	681b      	ldr	r3, [r3, #0]
 8002c4c:	430a      	orrs	r2, r1
 8002c4e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	699b      	ldr	r3, [r3, #24]
 8002c54:	0c1b      	lsrs	r3, r3, #16
 8002c56:	f003 0104 	and.w	r1, r3, #4
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c5e:	f003 0210 	and.w	r2, r3, #16
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	430a      	orrs	r2, r1
 8002c68:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	69da      	ldr	r2, [r3, #28]
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c78:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	2200      	movs	r2, #0
 8002c7e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c80:	687b      	ldr	r3, [r7, #4]
 8002c82:	2201      	movs	r2, #1
 8002c84:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8002c88:	2300      	movs	r3, #0
}
 8002c8a:	4618      	mov	r0, r3
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}

08002c92 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c92:	b580      	push	{r7, lr}
 8002c94:	b088      	sub	sp, #32
 8002c96:	af00      	add	r7, sp, #0
 8002c98:	60f8      	str	r0, [r7, #12]
 8002c9a:	60b9      	str	r1, [r7, #8]
 8002c9c:	603b      	str	r3, [r7, #0]
 8002c9e:	4613      	mov	r3, r2
 8002ca0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8002cac:	2b01      	cmp	r3, #1
 8002cae:	d101      	bne.n	8002cb4 <HAL_SPI_Transmit+0x22>
 8002cb0:	2302      	movs	r3, #2
 8002cb2:	e126      	b.n	8002f02 <HAL_SPI_Transmit+0x270>
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	2201      	movs	r2, #1
 8002cb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cbc:	f7fe fbc8 	bl	8001450 <HAL_GetTick>
 8002cc0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8002cc2:	88fb      	ldrh	r3, [r7, #6]
 8002cc4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002cc6:	68fb      	ldr	r3, [r7, #12]
 8002cc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8002ccc:	b2db      	uxtb	r3, r3
 8002cce:	2b01      	cmp	r3, #1
 8002cd0:	d002      	beq.n	8002cd8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8002cd2:	2302      	movs	r3, #2
 8002cd4:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002cd6:	e10b      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8002cd8:	68bb      	ldr	r3, [r7, #8]
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d002      	beq.n	8002ce4 <HAL_SPI_Transmit+0x52>
 8002cde:	88fb      	ldrh	r3, [r7, #6]
 8002ce0:	2b00      	cmp	r3, #0
 8002ce2:	d102      	bne.n	8002cea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8002ce4:	2301      	movs	r3, #1
 8002ce6:	77fb      	strb	r3, [r7, #31]
    goto error;
 8002ce8:	e102      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2203      	movs	r2, #3
 8002cee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cf2:	68fb      	ldr	r3, [r7, #12]
 8002cf4:	2200      	movs	r2, #0
 8002cf6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	68ba      	ldr	r2, [r7, #8]
 8002cfc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8002cfe:	68fb      	ldr	r3, [r7, #12]
 8002d00:	88fa      	ldrh	r2, [r7, #6]
 8002d02:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8002d04:	68fb      	ldr	r3, [r7, #12]
 8002d06:	88fa      	ldrh	r2, [r7, #6]
 8002d08:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8002d0a:	68fb      	ldr	r3, [r7, #12]
 8002d0c:	2200      	movs	r2, #0
 8002d0e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	2200      	movs	r2, #0
 8002d14:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8002d16:	68fb      	ldr	r3, [r7, #12]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	2200      	movs	r2, #0
 8002d20:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	2200      	movs	r2, #0
 8002d26:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002d30:	d10f      	bne.n	8002d52 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681a      	ldr	r2, [r3, #0]
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002d40:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8002d42:	68fb      	ldr	r3, [r7, #12]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	681a      	ldr	r2, [r3, #0]
 8002d48:	68fb      	ldr	r3, [r7, #12]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8002d50:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d52:	68fb      	ldr	r3, [r7, #12]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	681b      	ldr	r3, [r3, #0]
 8002d58:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002d5c:	2b40      	cmp	r3, #64	; 0x40
 8002d5e:	d007      	beq.n	8002d70 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	681a      	ldr	r2, [r3, #0]
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8002d6e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	68db      	ldr	r3, [r3, #12]
 8002d74:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002d78:	d14b      	bne.n	8002e12 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	685b      	ldr	r3, [r3, #4]
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d002      	beq.n	8002d88 <HAL_SPI_Transmit+0xf6>
 8002d82:	8afb      	ldrh	r3, [r7, #22]
 8002d84:	2b01      	cmp	r3, #1
 8002d86:	d13e      	bne.n	8002e06 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002d88:	68fb      	ldr	r3, [r7, #12]
 8002d8a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d8c:	881a      	ldrh	r2, [r3, #0]
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002d94:	68fb      	ldr	r3, [r7, #12]
 8002d96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d98:	1c9a      	adds	r2, r3, #2
 8002d9a:	68fb      	ldr	r3, [r7, #12]
 8002d9c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002d9e:	68fb      	ldr	r3, [r7, #12]
 8002da0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002da2:	b29b      	uxth	r3, r3
 8002da4:	3b01      	subs	r3, #1
 8002da6:	b29a      	uxth	r2, r3
 8002da8:	68fb      	ldr	r3, [r7, #12]
 8002daa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8002dac:	e02b      	b.n	8002e06 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002dae:	68fb      	ldr	r3, [r7, #12]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	689b      	ldr	r3, [r3, #8]
 8002db4:	f003 0302 	and.w	r3, r3, #2
 8002db8:	2b02      	cmp	r3, #2
 8002dba:	d112      	bne.n	8002de2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc0:	881a      	ldrh	r2, [r3, #0]
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dcc:	1c9a      	adds	r2, r3, #2
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002dd6:	b29b      	uxth	r3, r3
 8002dd8:	3b01      	subs	r3, #1
 8002dda:	b29a      	uxth	r2, r3
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	86da      	strh	r2, [r3, #54]	; 0x36
 8002de0:	e011      	b.n	8002e06 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002de2:	f7fe fb35 	bl	8001450 <HAL_GetTick>
 8002de6:	4602      	mov	r2, r0
 8002de8:	69bb      	ldr	r3, [r7, #24]
 8002dea:	1ad3      	subs	r3, r2, r3
 8002dec:	683a      	ldr	r2, [r7, #0]
 8002dee:	429a      	cmp	r2, r3
 8002df0:	d803      	bhi.n	8002dfa <HAL_SPI_Transmit+0x168>
 8002df2:	683b      	ldr	r3, [r7, #0]
 8002df4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002df8:	d102      	bne.n	8002e00 <HAL_SPI_Transmit+0x16e>
 8002dfa:	683b      	ldr	r3, [r7, #0]
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d102      	bne.n	8002e06 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8002e00:	2303      	movs	r3, #3
 8002e02:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002e04:	e074      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002e06:	68fb      	ldr	r3, [r7, #12]
 8002e08:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e0a:	b29b      	uxth	r3, r3
 8002e0c:	2b00      	cmp	r3, #0
 8002e0e:	d1ce      	bne.n	8002dae <HAL_SPI_Transmit+0x11c>
 8002e10:	e04c      	b.n	8002eac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	685b      	ldr	r3, [r3, #4]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d002      	beq.n	8002e20 <HAL_SPI_Transmit+0x18e>
 8002e1a:	8afb      	ldrh	r3, [r7, #22]
 8002e1c:	2b01      	cmp	r3, #1
 8002e1e:	d140      	bne.n	8002ea2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e20:	68fb      	ldr	r3, [r7, #12]
 8002e22:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	681b      	ldr	r3, [r3, #0]
 8002e28:	330c      	adds	r3, #12
 8002e2a:	7812      	ldrb	r2, [r2, #0]
 8002e2c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e32:	1c5a      	adds	r2, r3, #1
 8002e34:	68fb      	ldr	r3, [r7, #12]
 8002e36:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e3c:	b29b      	uxth	r3, r3
 8002e3e:	3b01      	subs	r3, #1
 8002e40:	b29a      	uxth	r2, r3
 8002e42:	68fb      	ldr	r3, [r7, #12]
 8002e44:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8002e46:	e02c      	b.n	8002ea2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 0302 	and.w	r3, r3, #2
 8002e52:	2b02      	cmp	r3, #2
 8002e54:	d113      	bne.n	8002e7e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8002e5a:	68fb      	ldr	r3, [r7, #12]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	330c      	adds	r3, #12
 8002e60:	7812      	ldrb	r2, [r2, #0]
 8002e62:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e68:	1c5a      	adds	r2, r3, #1
 8002e6a:	68fb      	ldr	r3, [r7, #12]
 8002e6c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002e72:	b29b      	uxth	r3, r3
 8002e74:	3b01      	subs	r3, #1
 8002e76:	b29a      	uxth	r2, r3
 8002e78:	68fb      	ldr	r3, [r7, #12]
 8002e7a:	86da      	strh	r2, [r3, #54]	; 0x36
 8002e7c:	e011      	b.n	8002ea2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e7e:	f7fe fae7 	bl	8001450 <HAL_GetTick>
 8002e82:	4602      	mov	r2, r0
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	1ad3      	subs	r3, r2, r3
 8002e88:	683a      	ldr	r2, [r7, #0]
 8002e8a:	429a      	cmp	r2, r3
 8002e8c:	d803      	bhi.n	8002e96 <HAL_SPI_Transmit+0x204>
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002e94:	d102      	bne.n	8002e9c <HAL_SPI_Transmit+0x20a>
 8002e96:	683b      	ldr	r3, [r7, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	d102      	bne.n	8002ea2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8002e9c:	2303      	movs	r3, #3
 8002e9e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8002ea0:	e026      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	d1cd      	bne.n	8002e48 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	6839      	ldr	r1, [r7, #0]
 8002eb0:	68f8      	ldr	r0, [r7, #12]
 8002eb2:	f000 f8b3 	bl	800301c <SPI_EndRxTxTransaction>
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	2b00      	cmp	r3, #0
 8002eba:	d002      	beq.n	8002ec2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	2220      	movs	r2, #32
 8002ec0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8002ec2:	68fb      	ldr	r3, [r7, #12]
 8002ec4:	689b      	ldr	r3, [r3, #8]
 8002ec6:	2b00      	cmp	r3, #0
 8002ec8:	d10a      	bne.n	8002ee0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8002eca:	2300      	movs	r3, #0
 8002ecc:	613b      	str	r3, [r7, #16]
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	68db      	ldr	r3, [r3, #12]
 8002ed4:	613b      	str	r3, [r7, #16]
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	681b      	ldr	r3, [r3, #0]
 8002eda:	689b      	ldr	r3, [r3, #8]
 8002edc:	613b      	str	r3, [r7, #16]
 8002ede:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002ee0:	68fb      	ldr	r3, [r7, #12]
 8002ee2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ee4:	2b00      	cmp	r3, #0
 8002ee6:	d002      	beq.n	8002eee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8002ee8:	2301      	movs	r3, #1
 8002eea:	77fb      	strb	r3, [r7, #31]
 8002eec:	e000      	b.n	8002ef0 <HAL_SPI_Transmit+0x25e>
  }

error:
 8002eee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8002ef0:	68fb      	ldr	r3, [r7, #12]
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8002f00:	7ffb      	ldrb	r3, [r7, #31]
}
 8002f02:	4618      	mov	r0, r3
 8002f04:	3720      	adds	r7, #32
 8002f06:	46bd      	mov	sp, r7
 8002f08:	bd80      	pop	{r7, pc}
	...

08002f0c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	b088      	sub	sp, #32
 8002f10:	af00      	add	r7, sp, #0
 8002f12:	60f8      	str	r0, [r7, #12]
 8002f14:	60b9      	str	r1, [r7, #8]
 8002f16:	603b      	str	r3, [r7, #0]
 8002f18:	4613      	mov	r3, r2
 8002f1a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8002f1c:	f7fe fa98 	bl	8001450 <HAL_GetTick>
 8002f20:	4602      	mov	r2, r0
 8002f22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002f24:	1a9b      	subs	r3, r3, r2
 8002f26:	683a      	ldr	r2, [r7, #0]
 8002f28:	4413      	add	r3, r2
 8002f2a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8002f2c:	f7fe fa90 	bl	8001450 <HAL_GetTick>
 8002f30:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8002f32:	4b39      	ldr	r3, [pc, #228]	; (8003018 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	015b      	lsls	r3, r3, #5
 8002f38:	0d1b      	lsrs	r3, r3, #20
 8002f3a:	69fa      	ldr	r2, [r7, #28]
 8002f3c:	fb02 f303 	mul.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002f42:	e054      	b.n	8002fee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8002f44:	683b      	ldr	r3, [r7, #0]
 8002f46:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f4a:	d050      	beq.n	8002fee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8002f4c:	f7fe fa80 	bl	8001450 <HAL_GetTick>
 8002f50:	4602      	mov	r2, r0
 8002f52:	69bb      	ldr	r3, [r7, #24]
 8002f54:	1ad3      	subs	r3, r2, r3
 8002f56:	69fa      	ldr	r2, [r7, #28]
 8002f58:	429a      	cmp	r2, r3
 8002f5a:	d902      	bls.n	8002f62 <SPI_WaitFlagStateUntilTimeout+0x56>
 8002f5c:	69fb      	ldr	r3, [r7, #28]
 8002f5e:	2b00      	cmp	r3, #0
 8002f60:	d13d      	bne.n	8002fde <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8002f62:	68fb      	ldr	r3, [r7, #12]
 8002f64:	681b      	ldr	r3, [r3, #0]
 8002f66:	685a      	ldr	r2, [r3, #4]
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8002f70:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8002f7a:	d111      	bne.n	8002fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	689b      	ldr	r3, [r3, #8]
 8002f80:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002f84:	d004      	beq.n	8002f90 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	689b      	ldr	r3, [r3, #8]
 8002f8a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f8e:	d107      	bne.n	8002fa0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8002f90:	68fb      	ldr	r3, [r7, #12]
 8002f92:	681b      	ldr	r3, [r3, #0]
 8002f94:	681a      	ldr	r2, [r3, #0]
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002f9e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002fa8:	d10f      	bne.n	8002fca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8002faa:	68fb      	ldr	r3, [r7, #12]
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	681a      	ldr	r2, [r3, #0]
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8002fb8:	601a      	str	r2, [r3, #0]
 8002fba:	68fb      	ldr	r3, [r7, #12]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	681a      	ldr	r2, [r3, #0]
 8002fc0:	68fb      	ldr	r3, [r7, #12]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8002fc8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	2201      	movs	r2, #1
 8002fce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8002fd2:	68fb      	ldr	r3, [r7, #12]
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8002fda:	2303      	movs	r3, #3
 8002fdc:	e017      	b.n	800300e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8002fde:	697b      	ldr	r3, [r7, #20]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d101      	bne.n	8002fe8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8002fe4:	2300      	movs	r3, #0
 8002fe6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8002fe8:	697b      	ldr	r3, [r7, #20]
 8002fea:	3b01      	subs	r3, #1
 8002fec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8002fee:	68fb      	ldr	r3, [r7, #12]
 8002ff0:	681b      	ldr	r3, [r3, #0]
 8002ff2:	689a      	ldr	r2, [r3, #8]
 8002ff4:	68bb      	ldr	r3, [r7, #8]
 8002ff6:	4013      	ands	r3, r2
 8002ff8:	68ba      	ldr	r2, [r7, #8]
 8002ffa:	429a      	cmp	r2, r3
 8002ffc:	bf0c      	ite	eq
 8002ffe:	2301      	moveq	r3, #1
 8003000:	2300      	movne	r3, #0
 8003002:	b2db      	uxtb	r3, r3
 8003004:	461a      	mov	r2, r3
 8003006:	79fb      	ldrb	r3, [r7, #7]
 8003008:	429a      	cmp	r2, r3
 800300a:	d19b      	bne.n	8002f44 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800300c:	2300      	movs	r3, #0
}
 800300e:	4618      	mov	r0, r3
 8003010:	3720      	adds	r7, #32
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	20001434 	.word	0x20001434

0800301c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800301c:	b580      	push	{r7, lr}
 800301e:	b088      	sub	sp, #32
 8003020:	af02      	add	r7, sp, #8
 8003022:	60f8      	str	r0, [r7, #12]
 8003024:	60b9      	str	r1, [r7, #8]
 8003026:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003028:	4b1b      	ldr	r3, [pc, #108]	; (8003098 <SPI_EndRxTxTransaction+0x7c>)
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	4a1b      	ldr	r2, [pc, #108]	; (800309c <SPI_EndRxTxTransaction+0x80>)
 800302e:	fba2 2303 	umull	r2, r3, r2, r3
 8003032:	0d5b      	lsrs	r3, r3, #21
 8003034:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003038:	fb02 f303 	mul.w	r3, r2, r3
 800303c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	685b      	ldr	r3, [r3, #4]
 8003042:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003046:	d112      	bne.n	800306e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	9300      	str	r3, [sp, #0]
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	2200      	movs	r2, #0
 8003050:	2180      	movs	r1, #128	; 0x80
 8003052:	68f8      	ldr	r0, [r7, #12]
 8003054:	f7ff ff5a 	bl	8002f0c <SPI_WaitFlagStateUntilTimeout>
 8003058:	4603      	mov	r3, r0
 800305a:	2b00      	cmp	r3, #0
 800305c:	d016      	beq.n	800308c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800305e:	68fb      	ldr	r3, [r7, #12]
 8003060:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003062:	f043 0220 	orr.w	r2, r3, #32
 8003066:	68fb      	ldr	r3, [r7, #12]
 8003068:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800306a:	2303      	movs	r3, #3
 800306c:	e00f      	b.n	800308e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800306e:	697b      	ldr	r3, [r7, #20]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d00a      	beq.n	800308a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003074:	697b      	ldr	r3, [r7, #20]
 8003076:	3b01      	subs	r3, #1
 8003078:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	689b      	ldr	r3, [r3, #8]
 8003080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003084:	2b80      	cmp	r3, #128	; 0x80
 8003086:	d0f2      	beq.n	800306e <SPI_EndRxTxTransaction+0x52>
 8003088:	e000      	b.n	800308c <SPI_EndRxTxTransaction+0x70>
        break;
 800308a:	bf00      	nop
  }

  return HAL_OK;
 800308c:	2300      	movs	r3, #0
}
 800308e:	4618      	mov	r0, r3
 8003090:	3718      	adds	r7, #24
 8003092:	46bd      	mov	sp, r7
 8003094:	bd80      	pop	{r7, pc}
 8003096:	bf00      	nop
 8003098:	20001434 	.word	0x20001434
 800309c:	165e9f81 	.word	0x165e9f81

080030a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d101      	bne.n	80030b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e041      	b.n	8003136 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80030b8:	b2db      	uxtb	r3, r3
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d106      	bne.n	80030cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2200      	movs	r2, #0
 80030c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80030c6:	6878      	ldr	r0, [r7, #4]
 80030c8:	f7fe f856 	bl	8001178 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	2202      	movs	r2, #2
 80030d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681a      	ldr	r2, [r3, #0]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	3304      	adds	r3, #4
 80030dc:	4619      	mov	r1, r3
 80030de:	4610      	mov	r0, r2
 80030e0:	f000 fac0 	bl	8003664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	2201      	movs	r2, #1
 80030e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	2201      	movs	r2, #1
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	2201      	movs	r2, #1
 80030f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	2201      	movs	r2, #1
 8003100:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	2201      	movs	r2, #1
 8003108:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	2201      	movs	r2, #1
 8003110:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	2201      	movs	r2, #1
 8003118:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2201      	movs	r2, #1
 8003120:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2201      	movs	r2, #1
 8003128:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2201      	movs	r2, #1
 8003130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003134:	2300      	movs	r3, #0
}
 8003136:	4618      	mov	r0, r3
 8003138:	3708      	adds	r7, #8
 800313a:	46bd      	mov	sp, r7
 800313c:	bd80      	pop	{r7, pc}

0800313e <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800313e:	b580      	push	{r7, lr}
 8003140:	b082      	sub	sp, #8
 8003142:	af00      	add	r7, sp, #0
 8003144:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d101      	bne.n	8003150 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800314c:	2301      	movs	r3, #1
 800314e:	e041      	b.n	80031d4 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003156:	b2db      	uxtb	r3, r3
 8003158:	2b00      	cmp	r3, #0
 800315a:	d106      	bne.n	800316a <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	2200      	movs	r2, #0
 8003160:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003164:	6878      	ldr	r0, [r7, #4]
 8003166:	f000 f839 	bl	80031dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	2202      	movs	r2, #2
 800316e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	681a      	ldr	r2, [r3, #0]
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	3304      	adds	r3, #4
 800317a:	4619      	mov	r1, r3
 800317c:	4610      	mov	r0, r2
 800317e:	f000 fa71 	bl	8003664 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	2201      	movs	r2, #1
 8003186:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	2201      	movs	r2, #1
 800318e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	2201      	movs	r2, #1
 8003196:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800319a:	687b      	ldr	r3, [r7, #4]
 800319c:	2201      	movs	r2, #1
 800319e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	2201      	movs	r2, #1
 80031a6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	2201      	movs	r2, #1
 80031ae:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	2201      	movs	r2, #1
 80031b6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	2201      	movs	r2, #1
 80031c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2201      	movs	r2, #1
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80031d2:	2300      	movs	r3, #0
}
 80031d4:	4618      	mov	r0, r3
 80031d6:	3708      	adds	r7, #8
 80031d8:	46bd      	mov	sp, r7
 80031da:	bd80      	pop	{r7, pc}

080031dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80031dc:	b480      	push	{r7}
 80031de:	b083      	sub	sp, #12
 80031e0:	af00      	add	r7, sp, #0
 80031e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80031e4:	bf00      	nop
 80031e6:	370c      	adds	r7, #12
 80031e8:	46bd      	mov	sp, r7
 80031ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ee:	4770      	bx	lr

080031f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b084      	sub	sp, #16
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
 80031f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80031fa:	683b      	ldr	r3, [r7, #0]
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d109      	bne.n	8003214 <HAL_TIM_PWM_Start+0x24>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003206:	b2db      	uxtb	r3, r3
 8003208:	2b01      	cmp	r3, #1
 800320a:	bf14      	ite	ne
 800320c:	2301      	movne	r3, #1
 800320e:	2300      	moveq	r3, #0
 8003210:	b2db      	uxtb	r3, r3
 8003212:	e022      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 8003214:	683b      	ldr	r3, [r7, #0]
 8003216:	2b04      	cmp	r3, #4
 8003218:	d109      	bne.n	800322e <HAL_TIM_PWM_Start+0x3e>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b01      	cmp	r3, #1
 8003224:	bf14      	ite	ne
 8003226:	2301      	movne	r3, #1
 8003228:	2300      	moveq	r3, #0
 800322a:	b2db      	uxtb	r3, r3
 800322c:	e015      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 800322e:	683b      	ldr	r3, [r7, #0]
 8003230:	2b08      	cmp	r3, #8
 8003232:	d109      	bne.n	8003248 <HAL_TIM_PWM_Start+0x58>
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800323a:	b2db      	uxtb	r3, r3
 800323c:	2b01      	cmp	r3, #1
 800323e:	bf14      	ite	ne
 8003240:	2301      	movne	r3, #1
 8003242:	2300      	moveq	r3, #0
 8003244:	b2db      	uxtb	r3, r3
 8003246:	e008      	b.n	800325a <HAL_TIM_PWM_Start+0x6a>
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800324e:	b2db      	uxtb	r3, r3
 8003250:	2b01      	cmp	r3, #1
 8003252:	bf14      	ite	ne
 8003254:	2301      	movne	r3, #1
 8003256:	2300      	moveq	r3, #0
 8003258:	b2db      	uxtb	r3, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	d001      	beq.n	8003262 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800325e:	2301      	movs	r3, #1
 8003260:	e068      	b.n	8003334 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003262:	683b      	ldr	r3, [r7, #0]
 8003264:	2b00      	cmp	r3, #0
 8003266:	d104      	bne.n	8003272 <HAL_TIM_PWM_Start+0x82>
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2202      	movs	r2, #2
 800326c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003270:	e013      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003272:	683b      	ldr	r3, [r7, #0]
 8003274:	2b04      	cmp	r3, #4
 8003276:	d104      	bne.n	8003282 <HAL_TIM_PWM_Start+0x92>
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	2202      	movs	r2, #2
 800327c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003280:	e00b      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003282:	683b      	ldr	r3, [r7, #0]
 8003284:	2b08      	cmp	r3, #8
 8003286:	d104      	bne.n	8003292 <HAL_TIM_PWM_Start+0xa2>
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	2202      	movs	r2, #2
 800328c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003290:	e003      	b.n	800329a <HAL_TIM_PWM_Start+0xaa>
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	2202      	movs	r2, #2
 8003296:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	2201      	movs	r2, #1
 80032a0:	6839      	ldr	r1, [r7, #0]
 80032a2:	4618      	mov	r0, r3
 80032a4:	f000 fc84 	bl	8003bb0 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	681b      	ldr	r3, [r3, #0]
 80032ac:	4a23      	ldr	r2, [pc, #140]	; (800333c <HAL_TIM_PWM_Start+0x14c>)
 80032ae:	4293      	cmp	r3, r2
 80032b0:	d107      	bne.n	80032c2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 80032b2:	687b      	ldr	r3, [r7, #4]
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	681b      	ldr	r3, [r3, #0]
 80032bc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032c0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	4a1d      	ldr	r2, [pc, #116]	; (800333c <HAL_TIM_PWM_Start+0x14c>)
 80032c8:	4293      	cmp	r3, r2
 80032ca:	d018      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80032d4:	d013      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a19      	ldr	r2, [pc, #100]	; (8003340 <HAL_TIM_PWM_Start+0x150>)
 80032dc:	4293      	cmp	r3, r2
 80032de:	d00e      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032e0:	687b      	ldr	r3, [r7, #4]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a17      	ldr	r2, [pc, #92]	; (8003344 <HAL_TIM_PWM_Start+0x154>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d009      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032ea:	687b      	ldr	r3, [r7, #4]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	4a16      	ldr	r2, [pc, #88]	; (8003348 <HAL_TIM_PWM_Start+0x158>)
 80032f0:	4293      	cmp	r3, r2
 80032f2:	d004      	beq.n	80032fe <HAL_TIM_PWM_Start+0x10e>
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	4a14      	ldr	r2, [pc, #80]	; (800334c <HAL_TIM_PWM_Start+0x15c>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d111      	bne.n	8003322 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	689b      	ldr	r3, [r3, #8]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800330a:	68fb      	ldr	r3, [r7, #12]
 800330c:	2b06      	cmp	r3, #6
 800330e:	d010      	beq.n	8003332 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003310:	687b      	ldr	r3, [r7, #4]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	681a      	ldr	r2, [r3, #0]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f042 0201 	orr.w	r2, r2, #1
 800331e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003320:	e007      	b.n	8003332 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	681b      	ldr	r3, [r3, #0]
 8003326:	681a      	ldr	r2, [r3, #0]
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f042 0201 	orr.w	r2, r2, #1
 8003330:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003332:	2300      	movs	r3, #0
}
 8003334:	4618      	mov	r0, r3
 8003336:	3710      	adds	r7, #16
 8003338:	46bd      	mov	sp, r7
 800333a:	bd80      	pop	{r7, pc}
 800333c:	40010000 	.word	0x40010000
 8003340:	40000400 	.word	0x40000400
 8003344:	40000800 	.word	0x40000800
 8003348:	40000c00 	.word	0x40000c00
 800334c:	40014000 	.word	0x40014000

08003350 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003350:	b580      	push	{r7, lr}
 8003352:	b086      	sub	sp, #24
 8003354:	af00      	add	r7, sp, #0
 8003356:	60f8      	str	r0, [r7, #12]
 8003358:	60b9      	str	r1, [r7, #8]
 800335a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800335c:	2300      	movs	r3, #0
 800335e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003360:	68fb      	ldr	r3, [r7, #12]
 8003362:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003366:	2b01      	cmp	r3, #1
 8003368:	d101      	bne.n	800336e <HAL_TIM_PWM_ConfigChannel+0x1e>
 800336a:	2302      	movs	r3, #2
 800336c:	e0ae      	b.n	80034cc <HAL_TIM_PWM_ConfigChannel+0x17c>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	2201      	movs	r2, #1
 8003372:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2b0c      	cmp	r3, #12
 800337a:	f200 809f 	bhi.w	80034bc <HAL_TIM_PWM_ConfigChannel+0x16c>
 800337e:	a201      	add	r2, pc, #4	; (adr r2, 8003384 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003380:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003384:	080033b9 	.word	0x080033b9
 8003388:	080034bd 	.word	0x080034bd
 800338c:	080034bd 	.word	0x080034bd
 8003390:	080034bd 	.word	0x080034bd
 8003394:	080033f9 	.word	0x080033f9
 8003398:	080034bd 	.word	0x080034bd
 800339c:	080034bd 	.word	0x080034bd
 80033a0:	080034bd 	.word	0x080034bd
 80033a4:	0800343b 	.word	0x0800343b
 80033a8:	080034bd 	.word	0x080034bd
 80033ac:	080034bd 	.word	0x080034bd
 80033b0:	080034bd 	.word	0x080034bd
 80033b4:	0800347b 	.word	0x0800347b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	4618      	mov	r0, r3
 80033c0:	f000 f9d0 	bl	8003764 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	699a      	ldr	r2, [r3, #24]
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f042 0208 	orr.w	r2, r2, #8
 80033d2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	699a      	ldr	r2, [r3, #24]
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f022 0204 	bic.w	r2, r2, #4
 80033e2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	6999      	ldr	r1, [r3, #24]
 80033ea:	68bb      	ldr	r3, [r7, #8]
 80033ec:	691a      	ldr	r2, [r3, #16]
 80033ee:	68fb      	ldr	r3, [r7, #12]
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	430a      	orrs	r2, r1
 80033f4:	619a      	str	r2, [r3, #24]
      break;
 80033f6:	e064      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80033f8:	68fb      	ldr	r3, [r7, #12]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	68b9      	ldr	r1, [r7, #8]
 80033fe:	4618      	mov	r0, r3
 8003400:	f000 fa16 	bl	8003830 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	699a      	ldr	r2, [r3, #24]
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	681b      	ldr	r3, [r3, #0]
 800340e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003412:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	699a      	ldr	r2, [r3, #24]
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	681b      	ldr	r3, [r3, #0]
 800341e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003422:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	6999      	ldr	r1, [r3, #24]
 800342a:	68bb      	ldr	r3, [r7, #8]
 800342c:	691b      	ldr	r3, [r3, #16]
 800342e:	021a      	lsls	r2, r3, #8
 8003430:	68fb      	ldr	r3, [r7, #12]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	430a      	orrs	r2, r1
 8003436:	619a      	str	r2, [r3, #24]
      break;
 8003438:	e043      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	68b9      	ldr	r1, [r7, #8]
 8003440:	4618      	mov	r0, r3
 8003442:	f000 fa61 	bl	8003908 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	69da      	ldr	r2, [r3, #28]
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f042 0208 	orr.w	r2, r2, #8
 8003454:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	69da      	ldr	r2, [r3, #28]
 800345c:	68fb      	ldr	r3, [r7, #12]
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f022 0204 	bic.w	r2, r2, #4
 8003464:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	69d9      	ldr	r1, [r3, #28]
 800346c:	68bb      	ldr	r3, [r7, #8]
 800346e:	691a      	ldr	r2, [r3, #16]
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	681b      	ldr	r3, [r3, #0]
 8003474:	430a      	orrs	r2, r1
 8003476:	61da      	str	r2, [r3, #28]
      break;
 8003478:	e023      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800347a:	68fb      	ldr	r3, [r7, #12]
 800347c:	681b      	ldr	r3, [r3, #0]
 800347e:	68b9      	ldr	r1, [r7, #8]
 8003480:	4618      	mov	r0, r3
 8003482:	f000 faab 	bl	80039dc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	69da      	ldr	r2, [r3, #28]
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003494:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003496:	68fb      	ldr	r3, [r7, #12]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	69da      	ldr	r2, [r3, #28]
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80034a4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	69d9      	ldr	r1, [r3, #28]
 80034ac:	68bb      	ldr	r3, [r7, #8]
 80034ae:	691b      	ldr	r3, [r3, #16]
 80034b0:	021a      	lsls	r2, r3, #8
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	430a      	orrs	r2, r1
 80034b8:	61da      	str	r2, [r3, #28]
      break;
 80034ba:	e002      	b.n	80034c2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80034bc:	2301      	movs	r3, #1
 80034be:	75fb      	strb	r3, [r7, #23]
      break;
 80034c0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	2200      	movs	r2, #0
 80034c6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80034ca:	7dfb      	ldrb	r3, [r7, #23]
}
 80034cc:	4618      	mov	r0, r3
 80034ce:	3718      	adds	r7, #24
 80034d0:	46bd      	mov	sp, r7
 80034d2:	bd80      	pop	{r7, pc}

080034d4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80034d4:	b580      	push	{r7, lr}
 80034d6:	b084      	sub	sp, #16
 80034d8:	af00      	add	r7, sp, #0
 80034da:	6078      	str	r0, [r7, #4]
 80034dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80034de:	2300      	movs	r3, #0
 80034e0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034e8:	2b01      	cmp	r3, #1
 80034ea:	d101      	bne.n	80034f0 <HAL_TIM_ConfigClockSource+0x1c>
 80034ec:	2302      	movs	r3, #2
 80034ee:	e0b4      	b.n	800365a <HAL_TIM_ConfigClockSource+0x186>
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	2201      	movs	r2, #1
 80034f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	2202      	movs	r2, #2
 80034fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	689b      	ldr	r3, [r3, #8]
 8003506:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003508:	68bb      	ldr	r3, [r7, #8]
 800350a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800350e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003510:	68bb      	ldr	r3, [r7, #8]
 8003512:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003516:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68ba      	ldr	r2, [r7, #8]
 800351e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003520:	683b      	ldr	r3, [r7, #0]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003528:	d03e      	beq.n	80035a8 <HAL_TIM_ConfigClockSource+0xd4>
 800352a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800352e:	f200 8087 	bhi.w	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003532:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003536:	f000 8086 	beq.w	8003646 <HAL_TIM_ConfigClockSource+0x172>
 800353a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800353e:	d87f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003540:	2b70      	cmp	r3, #112	; 0x70
 8003542:	d01a      	beq.n	800357a <HAL_TIM_ConfigClockSource+0xa6>
 8003544:	2b70      	cmp	r3, #112	; 0x70
 8003546:	d87b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003548:	2b60      	cmp	r3, #96	; 0x60
 800354a:	d050      	beq.n	80035ee <HAL_TIM_ConfigClockSource+0x11a>
 800354c:	2b60      	cmp	r3, #96	; 0x60
 800354e:	d877      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003550:	2b50      	cmp	r3, #80	; 0x50
 8003552:	d03c      	beq.n	80035ce <HAL_TIM_ConfigClockSource+0xfa>
 8003554:	2b50      	cmp	r3, #80	; 0x50
 8003556:	d873      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003558:	2b40      	cmp	r3, #64	; 0x40
 800355a:	d058      	beq.n	800360e <HAL_TIM_ConfigClockSource+0x13a>
 800355c:	2b40      	cmp	r3, #64	; 0x40
 800355e:	d86f      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003560:	2b30      	cmp	r3, #48	; 0x30
 8003562:	d064      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003564:	2b30      	cmp	r3, #48	; 0x30
 8003566:	d86b      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003568:	2b20      	cmp	r3, #32
 800356a:	d060      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 800356c:	2b20      	cmp	r3, #32
 800356e:	d867      	bhi.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
 8003570:	2b00      	cmp	r3, #0
 8003572:	d05c      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003574:	2b10      	cmp	r3, #16
 8003576:	d05a      	beq.n	800362e <HAL_TIM_ConfigClockSource+0x15a>
 8003578:	e062      	b.n	8003640 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	6818      	ldr	r0, [r3, #0]
 800357e:	683b      	ldr	r3, [r7, #0]
 8003580:	6899      	ldr	r1, [r3, #8]
 8003582:	683b      	ldr	r3, [r7, #0]
 8003584:	685a      	ldr	r2, [r3, #4]
 8003586:	683b      	ldr	r3, [r7, #0]
 8003588:	68db      	ldr	r3, [r3, #12]
 800358a:	f000 faf1 	bl	8003b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800358e:	687b      	ldr	r3, [r7, #4]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	689b      	ldr	r3, [r3, #8]
 8003594:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003596:	68bb      	ldr	r3, [r7, #8]
 8003598:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800359c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	681b      	ldr	r3, [r3, #0]
 80035a2:	68ba      	ldr	r2, [r7, #8]
 80035a4:	609a      	str	r2, [r3, #8]
      break;
 80035a6:	e04f      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	6818      	ldr	r0, [r3, #0]
 80035ac:	683b      	ldr	r3, [r7, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	685a      	ldr	r2, [r3, #4]
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	68db      	ldr	r3, [r3, #12]
 80035b8:	f000 fada 	bl	8003b70 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	689a      	ldr	r2, [r3, #8]
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80035ca:	609a      	str	r2, [r3, #8]
      break;
 80035cc:	e03c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	6818      	ldr	r0, [r3, #0]
 80035d2:	683b      	ldr	r3, [r7, #0]
 80035d4:	6859      	ldr	r1, [r3, #4]
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	68db      	ldr	r3, [r3, #12]
 80035da:	461a      	mov	r2, r3
 80035dc:	f000 fa4e 	bl	8003a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	2150      	movs	r1, #80	; 0x50
 80035e6:	4618      	mov	r0, r3
 80035e8:	f000 faa7 	bl	8003b3a <TIM_ITRx_SetConfig>
      break;
 80035ec:	e02c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6818      	ldr	r0, [r3, #0]
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	6859      	ldr	r1, [r3, #4]
 80035f6:	683b      	ldr	r3, [r7, #0]
 80035f8:	68db      	ldr	r3, [r3, #12]
 80035fa:	461a      	mov	r2, r3
 80035fc:	f000 fa6d 	bl	8003ada <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	2160      	movs	r1, #96	; 0x60
 8003606:	4618      	mov	r0, r3
 8003608:	f000 fa97 	bl	8003b3a <TIM_ITRx_SetConfig>
      break;
 800360c:	e01c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	6818      	ldr	r0, [r3, #0]
 8003612:	683b      	ldr	r3, [r7, #0]
 8003614:	6859      	ldr	r1, [r3, #4]
 8003616:	683b      	ldr	r3, [r7, #0]
 8003618:	68db      	ldr	r3, [r3, #12]
 800361a:	461a      	mov	r2, r3
 800361c:	f000 fa2e 	bl	8003a7c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	2140      	movs	r1, #64	; 0x40
 8003626:	4618      	mov	r0, r3
 8003628:	f000 fa87 	bl	8003b3a <TIM_ITRx_SetConfig>
      break;
 800362c:	e00c      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	4619      	mov	r1, r3
 8003638:	4610      	mov	r0, r2
 800363a:	f000 fa7e 	bl	8003b3a <TIM_ITRx_SetConfig>
      break;
 800363e:	e003      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003640:	2301      	movs	r3, #1
 8003642:	73fb      	strb	r3, [r7, #15]
      break;
 8003644:	e000      	b.n	8003648 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003646:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	2201      	movs	r2, #1
 800364c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2200      	movs	r2, #0
 8003654:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003658:	7bfb      	ldrb	r3, [r7, #15]
}
 800365a:	4618      	mov	r0, r3
 800365c:	3710      	adds	r7, #16
 800365e:	46bd      	mov	sp, r7
 8003660:	bd80      	pop	{r7, pc}
	...

08003664 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003664:	b480      	push	{r7}
 8003666:	b085      	sub	sp, #20
 8003668:	af00      	add	r7, sp, #0
 800366a:	6078      	str	r0, [r7, #4]
 800366c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	4a34      	ldr	r2, [pc, #208]	; (8003748 <TIM_Base_SetConfig+0xe4>)
 8003678:	4293      	cmp	r3, r2
 800367a:	d00f      	beq.n	800369c <TIM_Base_SetConfig+0x38>
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003682:	d00b      	beq.n	800369c <TIM_Base_SetConfig+0x38>
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	4a31      	ldr	r2, [pc, #196]	; (800374c <TIM_Base_SetConfig+0xe8>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d007      	beq.n	800369c <TIM_Base_SetConfig+0x38>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	4a30      	ldr	r2, [pc, #192]	; (8003750 <TIM_Base_SetConfig+0xec>)
 8003690:	4293      	cmp	r3, r2
 8003692:	d003      	beq.n	800369c <TIM_Base_SetConfig+0x38>
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	4a2f      	ldr	r2, [pc, #188]	; (8003754 <TIM_Base_SetConfig+0xf0>)
 8003698:	4293      	cmp	r3, r2
 800369a:	d108      	bne.n	80036ae <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80036a2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80036a4:	683b      	ldr	r3, [r7, #0]
 80036a6:	685b      	ldr	r3, [r3, #4]
 80036a8:	68fa      	ldr	r2, [r7, #12]
 80036aa:	4313      	orrs	r3, r2
 80036ac:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a25      	ldr	r2, [pc, #148]	; (8003748 <TIM_Base_SetConfig+0xe4>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d01b      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036bc:	d017      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	4a22      	ldr	r2, [pc, #136]	; (800374c <TIM_Base_SetConfig+0xe8>)
 80036c2:	4293      	cmp	r3, r2
 80036c4:	d013      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	4a21      	ldr	r2, [pc, #132]	; (8003750 <TIM_Base_SetConfig+0xec>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d00f      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	4a20      	ldr	r2, [pc, #128]	; (8003754 <TIM_Base_SetConfig+0xf0>)
 80036d2:	4293      	cmp	r3, r2
 80036d4:	d00b      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036d6:	687b      	ldr	r3, [r7, #4]
 80036d8:	4a1f      	ldr	r2, [pc, #124]	; (8003758 <TIM_Base_SetConfig+0xf4>)
 80036da:	4293      	cmp	r3, r2
 80036dc:	d007      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036de:	687b      	ldr	r3, [r7, #4]
 80036e0:	4a1e      	ldr	r2, [pc, #120]	; (800375c <TIM_Base_SetConfig+0xf8>)
 80036e2:	4293      	cmp	r3, r2
 80036e4:	d003      	beq.n	80036ee <TIM_Base_SetConfig+0x8a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	4a1d      	ldr	r2, [pc, #116]	; (8003760 <TIM_Base_SetConfig+0xfc>)
 80036ea:	4293      	cmp	r3, r2
 80036ec:	d108      	bne.n	8003700 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80036ee:	68fb      	ldr	r3, [r7, #12]
 80036f0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80036f4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80036f6:	683b      	ldr	r3, [r7, #0]
 80036f8:	68db      	ldr	r3, [r3, #12]
 80036fa:	68fa      	ldr	r2, [r7, #12]
 80036fc:	4313      	orrs	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003706:	683b      	ldr	r3, [r7, #0]
 8003708:	695b      	ldr	r3, [r3, #20]
 800370a:	4313      	orrs	r3, r2
 800370c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	68fa      	ldr	r2, [r7, #12]
 8003712:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	689a      	ldr	r2, [r3, #8]
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681a      	ldr	r2, [r3, #0]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	4a08      	ldr	r2, [pc, #32]	; (8003748 <TIM_Base_SetConfig+0xe4>)
 8003728:	4293      	cmp	r3, r2
 800372a:	d103      	bne.n	8003734 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	691a      	ldr	r2, [r3, #16]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	2201      	movs	r2, #1
 8003738:	615a      	str	r2, [r3, #20]
}
 800373a:	bf00      	nop
 800373c:	3714      	adds	r7, #20
 800373e:	46bd      	mov	sp, r7
 8003740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003744:	4770      	bx	lr
 8003746:	bf00      	nop
 8003748:	40010000 	.word	0x40010000
 800374c:	40000400 	.word	0x40000400
 8003750:	40000800 	.word	0x40000800
 8003754:	40000c00 	.word	0x40000c00
 8003758:	40014000 	.word	0x40014000
 800375c:	40014400 	.word	0x40014400
 8003760:	40014800 	.word	0x40014800

08003764 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003764:	b480      	push	{r7}
 8003766:	b087      	sub	sp, #28
 8003768:	af00      	add	r7, sp, #0
 800376a:	6078      	str	r0, [r7, #4]
 800376c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6a1b      	ldr	r3, [r3, #32]
 8003772:	f023 0201 	bic.w	r2, r3, #1
 8003776:	687b      	ldr	r3, [r7, #4]
 8003778:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	6a1b      	ldr	r3, [r3, #32]
 800377e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	699b      	ldr	r3, [r3, #24]
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800378c:	68fb      	ldr	r3, [r7, #12]
 800378e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003792:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f023 0303 	bic.w	r3, r3, #3
 800379a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	68fa      	ldr	r2, [r7, #12]
 80037a2:	4313      	orrs	r3, r2
 80037a4:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80037a6:	697b      	ldr	r3, [r7, #20]
 80037a8:	f023 0302 	bic.w	r3, r3, #2
 80037ac:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80037ae:	683b      	ldr	r3, [r7, #0]
 80037b0:	689b      	ldr	r3, [r3, #8]
 80037b2:	697a      	ldr	r2, [r7, #20]
 80037b4:	4313      	orrs	r3, r2
 80037b6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	4a1c      	ldr	r2, [pc, #112]	; (800382c <TIM_OC1_SetConfig+0xc8>)
 80037bc:	4293      	cmp	r3, r2
 80037be:	d10c      	bne.n	80037da <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80037c0:	697b      	ldr	r3, [r7, #20]
 80037c2:	f023 0308 	bic.w	r3, r3, #8
 80037c6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	68db      	ldr	r3, [r3, #12]
 80037cc:	697a      	ldr	r2, [r7, #20]
 80037ce:	4313      	orrs	r3, r2
 80037d0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80037d2:	697b      	ldr	r3, [r7, #20]
 80037d4:	f023 0304 	bic.w	r3, r3, #4
 80037d8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	4a13      	ldr	r2, [pc, #76]	; (800382c <TIM_OC1_SetConfig+0xc8>)
 80037de:	4293      	cmp	r3, r2
 80037e0:	d111      	bne.n	8003806 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80037e2:	693b      	ldr	r3, [r7, #16]
 80037e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80037e8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80037ea:	693b      	ldr	r3, [r7, #16]
 80037ec:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80037f0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80037f2:	683b      	ldr	r3, [r7, #0]
 80037f4:	695b      	ldr	r3, [r3, #20]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	4313      	orrs	r3, r2
 80037fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80037fc:	683b      	ldr	r3, [r7, #0]
 80037fe:	699b      	ldr	r3, [r3, #24]
 8003800:	693a      	ldr	r2, [r7, #16]
 8003802:	4313      	orrs	r3, r2
 8003804:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	693a      	ldr	r2, [r7, #16]
 800380a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	68fa      	ldr	r2, [r7, #12]
 8003810:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003812:	683b      	ldr	r3, [r7, #0]
 8003814:	685a      	ldr	r2, [r3, #4]
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	697a      	ldr	r2, [r7, #20]
 800381e:	621a      	str	r2, [r3, #32]
}
 8003820:	bf00      	nop
 8003822:	371c      	adds	r7, #28
 8003824:	46bd      	mov	sp, r7
 8003826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800382a:	4770      	bx	lr
 800382c:	40010000 	.word	0x40010000

08003830 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003830:	b480      	push	{r7}
 8003832:	b087      	sub	sp, #28
 8003834:	af00      	add	r7, sp, #0
 8003836:	6078      	str	r0, [r7, #4]
 8003838:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6a1b      	ldr	r3, [r3, #32]
 800383e:	f023 0210 	bic.w	r2, r3, #16
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	6a1b      	ldr	r3, [r3, #32]
 800384a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	685b      	ldr	r3, [r3, #4]
 8003850:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003858:	68fb      	ldr	r3, [r7, #12]
 800385a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800385e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003860:	68fb      	ldr	r3, [r7, #12]
 8003862:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003866:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003868:	683b      	ldr	r3, [r7, #0]
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	021b      	lsls	r3, r3, #8
 800386e:	68fa      	ldr	r2, [r7, #12]
 8003870:	4313      	orrs	r3, r2
 8003872:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003874:	697b      	ldr	r3, [r7, #20]
 8003876:	f023 0320 	bic.w	r3, r3, #32
 800387a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800387c:	683b      	ldr	r3, [r7, #0]
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	011b      	lsls	r3, r3, #4
 8003882:	697a      	ldr	r2, [r7, #20]
 8003884:	4313      	orrs	r3, r2
 8003886:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	4a1e      	ldr	r2, [pc, #120]	; (8003904 <TIM_OC2_SetConfig+0xd4>)
 800388c:	4293      	cmp	r3, r2
 800388e:	d10d      	bne.n	80038ac <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003890:	697b      	ldr	r3, [r7, #20]
 8003892:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003896:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	68db      	ldr	r3, [r3, #12]
 800389c:	011b      	lsls	r3, r3, #4
 800389e:	697a      	ldr	r2, [r7, #20]
 80038a0:	4313      	orrs	r3, r2
 80038a2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80038a4:	697b      	ldr	r3, [r7, #20]
 80038a6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80038aa:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	4a15      	ldr	r2, [pc, #84]	; (8003904 <TIM_OC2_SetConfig+0xd4>)
 80038b0:	4293      	cmp	r3, r2
 80038b2:	d113      	bne.n	80038dc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80038b4:	693b      	ldr	r3, [r7, #16]
 80038b6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80038ba:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80038bc:	693b      	ldr	r3, [r7, #16]
 80038be:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80038c2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80038c4:	683b      	ldr	r3, [r7, #0]
 80038c6:	695b      	ldr	r3, [r3, #20]
 80038c8:	009b      	lsls	r3, r3, #2
 80038ca:	693a      	ldr	r2, [r7, #16]
 80038cc:	4313      	orrs	r3, r2
 80038ce:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80038d0:	683b      	ldr	r3, [r7, #0]
 80038d2:	699b      	ldr	r3, [r3, #24]
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	693a      	ldr	r2, [r7, #16]
 80038d8:	4313      	orrs	r3, r2
 80038da:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	693a      	ldr	r2, [r7, #16]
 80038e0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	68fa      	ldr	r2, [r7, #12]
 80038e6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80038e8:	683b      	ldr	r3, [r7, #0]
 80038ea:	685a      	ldr	r2, [r3, #4]
 80038ec:	687b      	ldr	r3, [r7, #4]
 80038ee:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	697a      	ldr	r2, [r7, #20]
 80038f4:	621a      	str	r2, [r3, #32]
}
 80038f6:	bf00      	nop
 80038f8:	371c      	adds	r7, #28
 80038fa:	46bd      	mov	sp, r7
 80038fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003900:	4770      	bx	lr
 8003902:	bf00      	nop
 8003904:	40010000 	.word	0x40010000

08003908 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8003908:	b480      	push	{r7}
 800390a:	b087      	sub	sp, #28
 800390c:	af00      	add	r7, sp, #0
 800390e:	6078      	str	r0, [r7, #4]
 8003910:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	6a1b      	ldr	r3, [r3, #32]
 8003916:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6a1b      	ldr	r3, [r3, #32]
 8003922:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	69db      	ldr	r3, [r3, #28]
 800392e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003930:	68fb      	ldr	r3, [r7, #12]
 8003932:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003936:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	f023 0303 	bic.w	r3, r3, #3
 800393e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003940:	683b      	ldr	r3, [r7, #0]
 8003942:	681b      	ldr	r3, [r3, #0]
 8003944:	68fa      	ldr	r2, [r7, #12]
 8003946:	4313      	orrs	r3, r2
 8003948:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800394a:	697b      	ldr	r3, [r7, #20]
 800394c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8003950:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003952:	683b      	ldr	r3, [r7, #0]
 8003954:	689b      	ldr	r3, [r3, #8]
 8003956:	021b      	lsls	r3, r3, #8
 8003958:	697a      	ldr	r2, [r7, #20]
 800395a:	4313      	orrs	r3, r2
 800395c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800395e:	687b      	ldr	r3, [r7, #4]
 8003960:	4a1d      	ldr	r2, [pc, #116]	; (80039d8 <TIM_OC3_SetConfig+0xd0>)
 8003962:	4293      	cmp	r3, r2
 8003964:	d10d      	bne.n	8003982 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003966:	697b      	ldr	r3, [r7, #20]
 8003968:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800396c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
 8003972:	021b      	lsls	r3, r3, #8
 8003974:	697a      	ldr	r2, [r7, #20]
 8003976:	4313      	orrs	r3, r2
 8003978:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8003980:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	4a14      	ldr	r2, [pc, #80]	; (80039d8 <TIM_OC3_SetConfig+0xd0>)
 8003986:	4293      	cmp	r3, r2
 8003988:	d113      	bne.n	80039b2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800398a:	693b      	ldr	r3, [r7, #16]
 800398c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8003990:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003992:	693b      	ldr	r3, [r7, #16]
 8003994:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003998:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	695b      	ldr	r3, [r3, #20]
 800399e:	011b      	lsls	r3, r3, #4
 80039a0:	693a      	ldr	r2, [r7, #16]
 80039a2:	4313      	orrs	r3, r2
 80039a4:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80039a6:	683b      	ldr	r3, [r7, #0]
 80039a8:	699b      	ldr	r3, [r3, #24]
 80039aa:	011b      	lsls	r3, r3, #4
 80039ac:	693a      	ldr	r2, [r7, #16]
 80039ae:	4313      	orrs	r3, r2
 80039b0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	693a      	ldr	r2, [r7, #16]
 80039b6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	68fa      	ldr	r2, [r7, #12]
 80039bc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80039be:	683b      	ldr	r3, [r7, #0]
 80039c0:	685a      	ldr	r2, [r3, #4]
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	697a      	ldr	r2, [r7, #20]
 80039ca:	621a      	str	r2, [r3, #32]
}
 80039cc:	bf00      	nop
 80039ce:	371c      	adds	r7, #28
 80039d0:	46bd      	mov	sp, r7
 80039d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d6:	4770      	bx	lr
 80039d8:	40010000 	.word	0x40010000

080039dc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80039dc:	b480      	push	{r7}
 80039de:	b087      	sub	sp, #28
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	6078      	str	r0, [r7, #4]
 80039e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80039ee:	687b      	ldr	r3, [r7, #4]
 80039f0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	6a1b      	ldr	r3, [r3, #32]
 80039f6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	685b      	ldr	r3, [r3, #4]
 80039fc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	69db      	ldr	r3, [r3, #28]
 8003a02:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8003a0a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003a12:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	021b      	lsls	r3, r3, #8
 8003a1a:	68fa      	ldr	r2, [r7, #12]
 8003a1c:	4313      	orrs	r3, r2
 8003a1e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003a20:	693b      	ldr	r3, [r7, #16]
 8003a22:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8003a26:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003a28:	683b      	ldr	r3, [r7, #0]
 8003a2a:	689b      	ldr	r3, [r3, #8]
 8003a2c:	031b      	lsls	r3, r3, #12
 8003a2e:	693a      	ldr	r2, [r7, #16]
 8003a30:	4313      	orrs	r3, r2
 8003a32:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	4a10      	ldr	r2, [pc, #64]	; (8003a78 <TIM_OC4_SetConfig+0x9c>)
 8003a38:	4293      	cmp	r3, r2
 8003a3a:	d109      	bne.n	8003a50 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003a3c:	697b      	ldr	r3, [r7, #20]
 8003a3e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003a42:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003a44:	683b      	ldr	r3, [r7, #0]
 8003a46:	695b      	ldr	r3, [r3, #20]
 8003a48:	019b      	lsls	r3, r3, #6
 8003a4a:	697a      	ldr	r2, [r7, #20]
 8003a4c:	4313      	orrs	r3, r2
 8003a4e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	697a      	ldr	r2, [r7, #20]
 8003a54:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	68fa      	ldr	r2, [r7, #12]
 8003a5a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003a5c:	683b      	ldr	r3, [r7, #0]
 8003a5e:	685a      	ldr	r2, [r3, #4]
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	693a      	ldr	r2, [r7, #16]
 8003a68:	621a      	str	r2, [r3, #32]
}
 8003a6a:	bf00      	nop
 8003a6c:	371c      	adds	r7, #28
 8003a6e:	46bd      	mov	sp, r7
 8003a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a74:	4770      	bx	lr
 8003a76:	bf00      	nop
 8003a78:	40010000 	.word	0x40010000

08003a7c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	b087      	sub	sp, #28
 8003a80:	af00      	add	r7, sp, #0
 8003a82:	60f8      	str	r0, [r7, #12]
 8003a84:	60b9      	str	r1, [r7, #8]
 8003a86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	6a1b      	ldr	r3, [r3, #32]
 8003a8c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	6a1b      	ldr	r3, [r3, #32]
 8003a92:	f023 0201 	bic.w	r2, r3, #1
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	699b      	ldr	r3, [r3, #24]
 8003a9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003aa0:	693b      	ldr	r3, [r7, #16]
 8003aa2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003aa6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	011b      	lsls	r3, r3, #4
 8003aac:	693a      	ldr	r2, [r7, #16]
 8003aae:	4313      	orrs	r3, r2
 8003ab0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003ab2:	697b      	ldr	r3, [r7, #20]
 8003ab4:	f023 030a 	bic.w	r3, r3, #10
 8003ab8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003aba:	697a      	ldr	r2, [r7, #20]
 8003abc:	68bb      	ldr	r3, [r7, #8]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003ac2:	68fb      	ldr	r3, [r7, #12]
 8003ac4:	693a      	ldr	r2, [r7, #16]
 8003ac6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	697a      	ldr	r2, [r7, #20]
 8003acc:	621a      	str	r2, [r3, #32]
}
 8003ace:	bf00      	nop
 8003ad0:	371c      	adds	r7, #28
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad8:	4770      	bx	lr

08003ada <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003ada:	b480      	push	{r7}
 8003adc:	b087      	sub	sp, #28
 8003ade:	af00      	add	r7, sp, #0
 8003ae0:	60f8      	str	r0, [r7, #12]
 8003ae2:	60b9      	str	r1, [r7, #8]
 8003ae4:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	6a1b      	ldr	r3, [r3, #32]
 8003aea:	f023 0210 	bic.w	r2, r3, #16
 8003aee:	68fb      	ldr	r3, [r7, #12]
 8003af0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	699b      	ldr	r3, [r3, #24]
 8003af6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003af8:	68fb      	ldr	r3, [r7, #12]
 8003afa:	6a1b      	ldr	r3, [r3, #32]
 8003afc:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003afe:	697b      	ldr	r3, [r7, #20]
 8003b00:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b04:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	031b      	lsls	r3, r3, #12
 8003b0a:	697a      	ldr	r2, [r7, #20]
 8003b0c:	4313      	orrs	r3, r2
 8003b0e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003b10:	693b      	ldr	r3, [r7, #16]
 8003b12:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003b16:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003b18:	68bb      	ldr	r3, [r7, #8]
 8003b1a:	011b      	lsls	r3, r3, #4
 8003b1c:	693a      	ldr	r2, [r7, #16]
 8003b1e:	4313      	orrs	r3, r2
 8003b20:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	697a      	ldr	r2, [r7, #20]
 8003b26:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	693a      	ldr	r2, [r7, #16]
 8003b2c:	621a      	str	r2, [r3, #32]
}
 8003b2e:	bf00      	nop
 8003b30:	371c      	adds	r7, #28
 8003b32:	46bd      	mov	sp, r7
 8003b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b38:	4770      	bx	lr

08003b3a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003b3a:	b480      	push	{r7}
 8003b3c:	b085      	sub	sp, #20
 8003b3e:	af00      	add	r7, sp, #0
 8003b40:	6078      	str	r0, [r7, #4]
 8003b42:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	689b      	ldr	r3, [r3, #8]
 8003b48:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b50:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003b52:	683a      	ldr	r2, [r7, #0]
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	4313      	orrs	r3, r2
 8003b58:	f043 0307 	orr.w	r3, r3, #7
 8003b5c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	68fa      	ldr	r2, [r7, #12]
 8003b62:	609a      	str	r2, [r3, #8]
}
 8003b64:	bf00      	nop
 8003b66:	3714      	adds	r7, #20
 8003b68:	46bd      	mov	sp, r7
 8003b6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b6e:	4770      	bx	lr

08003b70 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003b70:	b480      	push	{r7}
 8003b72:	b087      	sub	sp, #28
 8003b74:	af00      	add	r7, sp, #0
 8003b76:	60f8      	str	r0, [r7, #12]
 8003b78:	60b9      	str	r1, [r7, #8]
 8003b7a:	607a      	str	r2, [r7, #4]
 8003b7c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	689b      	ldr	r3, [r3, #8]
 8003b82:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003b84:	697b      	ldr	r3, [r7, #20]
 8003b86:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003b8a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003b8c:	683b      	ldr	r3, [r7, #0]
 8003b8e:	021a      	lsls	r2, r3, #8
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	431a      	orrs	r2, r3
 8003b94:	68bb      	ldr	r3, [r7, #8]
 8003b96:	4313      	orrs	r3, r2
 8003b98:	697a      	ldr	r2, [r7, #20]
 8003b9a:	4313      	orrs	r3, r2
 8003b9c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	697a      	ldr	r2, [r7, #20]
 8003ba2:	609a      	str	r2, [r3, #8]
}
 8003ba4:	bf00      	nop
 8003ba6:	371c      	adds	r7, #28
 8003ba8:	46bd      	mov	sp, r7
 8003baa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bae:	4770      	bx	lr

08003bb0 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003bb0:	b480      	push	{r7}
 8003bb2:	b087      	sub	sp, #28
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003bbc:	68bb      	ldr	r3, [r7, #8]
 8003bbe:	f003 031f 	and.w	r3, r3, #31
 8003bc2:	2201      	movs	r2, #1
 8003bc4:	fa02 f303 	lsl.w	r3, r2, r3
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	6a1a      	ldr	r2, [r3, #32]
 8003bce:	697b      	ldr	r3, [r7, #20]
 8003bd0:	43db      	mvns	r3, r3
 8003bd2:	401a      	ands	r2, r3
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	6a1a      	ldr	r2, [r3, #32]
 8003bdc:	68bb      	ldr	r3, [r7, #8]
 8003bde:	f003 031f 	and.w	r3, r3, #31
 8003be2:	6879      	ldr	r1, [r7, #4]
 8003be4:	fa01 f303 	lsl.w	r3, r1, r3
 8003be8:	431a      	orrs	r2, r3
 8003bea:	68fb      	ldr	r3, [r7, #12]
 8003bec:	621a      	str	r2, [r3, #32]
}
 8003bee:	bf00      	nop
 8003bf0:	371c      	adds	r7, #28
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
	...

08003bfc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003bfc:	b480      	push	{r7}
 8003bfe:	b085      	sub	sp, #20
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
 8003c04:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003c0c:	2b01      	cmp	r3, #1
 8003c0e:	d101      	bne.n	8003c14 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003c10:	2302      	movs	r3, #2
 8003c12:	e050      	b.n	8003cb6 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	2201      	movs	r2, #1
 8003c18:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	2202      	movs	r2, #2
 8003c20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	685b      	ldr	r3, [r3, #4]
 8003c2a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003c3a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003c3c:	683b      	ldr	r3, [r7, #0]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	68fa      	ldr	r2, [r7, #12]
 8003c42:	4313      	orrs	r3, r2
 8003c44:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	68fa      	ldr	r2, [r7, #12]
 8003c4c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	4a1c      	ldr	r2, [pc, #112]	; (8003cc4 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8003c54:	4293      	cmp	r3, r2
 8003c56:	d018      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c60:	d013      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	4a18      	ldr	r2, [pc, #96]	; (8003cc8 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8003c68:	4293      	cmp	r3, r2
 8003c6a:	d00e      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	4a16      	ldr	r2, [pc, #88]	; (8003ccc <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8003c72:	4293      	cmp	r3, r2
 8003c74:	d009      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4a15      	ldr	r2, [pc, #84]	; (8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8003c7c:	4293      	cmp	r3, r2
 8003c7e:	d004      	beq.n	8003c8a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	4a13      	ldr	r2, [pc, #76]	; (8003cd4 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8003c86:	4293      	cmp	r3, r2
 8003c88:	d10c      	bne.n	8003ca4 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003c90:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003c92:	683b      	ldr	r3, [r7, #0]
 8003c94:	685b      	ldr	r3, [r3, #4]
 8003c96:	68ba      	ldr	r2, [r7, #8]
 8003c98:	4313      	orrs	r3, r2
 8003c9a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68ba      	ldr	r2, [r7, #8]
 8003ca2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	2201      	movs	r2, #1
 8003ca8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2200      	movs	r2, #0
 8003cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3714      	adds	r7, #20
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cc0:	4770      	bx	lr
 8003cc2:	bf00      	nop
 8003cc4:	40010000 	.word	0x40010000
 8003cc8:	40000400 	.word	0x40000400
 8003ccc:	40000800 	.word	0x40000800
 8003cd0:	40000c00 	.word	0x40000c00
 8003cd4:	40014000 	.word	0x40014000

08003cd8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e03f      	b.n	8003d6a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f7fd fa92 	bl	8001228 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2224      	movs	r2, #36	; 0x24
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	68da      	ldr	r2, [r3, #12]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003d1a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 f829 	bl	8003d74 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003d30:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	695a      	ldr	r2, [r3, #20]
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003d40:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	68da      	ldr	r2, [r3, #12]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003d50:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	2200      	movs	r2, #0
 8003d56:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2220      	movs	r2, #32
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	2220      	movs	r2, #32
 8003d64:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003d68:	2300      	movs	r3, #0
}
 8003d6a:	4618      	mov	r0, r3
 8003d6c:	3708      	adds	r7, #8
 8003d6e:	46bd      	mov	sp, r7
 8003d70:	bd80      	pop	{r7, pc}
	...

08003d74 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d74:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003d78:	b0c0      	sub	sp, #256	; 0x100
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8003d8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d90:	68d9      	ldr	r1, [r3, #12]
 8003d92:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003d96:	681a      	ldr	r2, [r3, #0]
 8003d98:	ea40 0301 	orr.w	r3, r0, r1
 8003d9c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8003d9e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da2:	689a      	ldr	r2, [r3, #8]
 8003da4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003da8:	691b      	ldr	r3, [r3, #16]
 8003daa:	431a      	orrs	r2, r3
 8003dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db0:	695b      	ldr	r3, [r3, #20]
 8003db2:	431a      	orrs	r2, r3
 8003db4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003db8:	69db      	ldr	r3, [r3, #28]
 8003dba:	4313      	orrs	r3, r2
 8003dbc:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8003dc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	68db      	ldr	r3, [r3, #12]
 8003dc8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8003dcc:	f021 010c 	bic.w	r1, r1, #12
 8003dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dd4:	681a      	ldr	r2, [r3, #0]
 8003dd6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8003dda:	430b      	orrs	r3, r1
 8003ddc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8003dde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003de2:	681b      	ldr	r3, [r3, #0]
 8003de4:	695b      	ldr	r3, [r3, #20]
 8003de6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8003dea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003dee:	6999      	ldr	r1, [r3, #24]
 8003df0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003df4:	681a      	ldr	r2, [r3, #0]
 8003df6:	ea40 0301 	orr.w	r3, r0, r1
 8003dfa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8003dfc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e00:	681a      	ldr	r2, [r3, #0]
 8003e02:	4b8f      	ldr	r3, [pc, #572]	; (8004040 <UART_SetConfig+0x2cc>)
 8003e04:	429a      	cmp	r2, r3
 8003e06:	d005      	beq.n	8003e14 <UART_SetConfig+0xa0>
 8003e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e0c:	681a      	ldr	r2, [r3, #0]
 8003e0e:	4b8d      	ldr	r3, [pc, #564]	; (8004044 <UART_SetConfig+0x2d0>)
 8003e10:	429a      	cmp	r2, r3
 8003e12:	d104      	bne.n	8003e1e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8003e14:	f7fe fea0 	bl	8002b58 <HAL_RCC_GetPCLK2Freq>
 8003e18:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8003e1c:	e003      	b.n	8003e26 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8003e1e:	f7fe fe87 	bl	8002b30 <HAL_RCC_GetPCLK1Freq>
 8003e22:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8003e26:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e2a:	69db      	ldr	r3, [r3, #28]
 8003e2c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e30:	f040 810c 	bne.w	800404c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8003e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003e38:	2200      	movs	r2, #0
 8003e3a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8003e3e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8003e42:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8003e46:	4622      	mov	r2, r4
 8003e48:	462b      	mov	r3, r5
 8003e4a:	1891      	adds	r1, r2, r2
 8003e4c:	65b9      	str	r1, [r7, #88]	; 0x58
 8003e4e:	415b      	adcs	r3, r3
 8003e50:	65fb      	str	r3, [r7, #92]	; 0x5c
 8003e52:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8003e56:	4621      	mov	r1, r4
 8003e58:	eb12 0801 	adds.w	r8, r2, r1
 8003e5c:	4629      	mov	r1, r5
 8003e5e:	eb43 0901 	adc.w	r9, r3, r1
 8003e62:	f04f 0200 	mov.w	r2, #0
 8003e66:	f04f 0300 	mov.w	r3, #0
 8003e6a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003e6e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003e72:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003e76:	4690      	mov	r8, r2
 8003e78:	4699      	mov	r9, r3
 8003e7a:	4623      	mov	r3, r4
 8003e7c:	eb18 0303 	adds.w	r3, r8, r3
 8003e80:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8003e84:	462b      	mov	r3, r5
 8003e86:	eb49 0303 	adc.w	r3, r9, r3
 8003e8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8003e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003e92:	685b      	ldr	r3, [r3, #4]
 8003e94:	2200      	movs	r2, #0
 8003e96:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8003e9a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8003e9e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8003ea2:	460b      	mov	r3, r1
 8003ea4:	18db      	adds	r3, r3, r3
 8003ea6:	653b      	str	r3, [r7, #80]	; 0x50
 8003ea8:	4613      	mov	r3, r2
 8003eaa:	eb42 0303 	adc.w	r3, r2, r3
 8003eae:	657b      	str	r3, [r7, #84]	; 0x54
 8003eb0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8003eb4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8003eb8:	f7fc f994 	bl	80001e4 <__aeabi_uldivmod>
 8003ebc:	4602      	mov	r2, r0
 8003ebe:	460b      	mov	r3, r1
 8003ec0:	4b61      	ldr	r3, [pc, #388]	; (8004048 <UART_SetConfig+0x2d4>)
 8003ec2:	fba3 2302 	umull	r2, r3, r3, r2
 8003ec6:	095b      	lsrs	r3, r3, #5
 8003ec8:	011c      	lsls	r4, r3, #4
 8003eca:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003ece:	2200      	movs	r2, #0
 8003ed0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8003ed4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8003ed8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8003edc:	4642      	mov	r2, r8
 8003ede:	464b      	mov	r3, r9
 8003ee0:	1891      	adds	r1, r2, r2
 8003ee2:	64b9      	str	r1, [r7, #72]	; 0x48
 8003ee4:	415b      	adcs	r3, r3
 8003ee6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003ee8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8003eec:	4641      	mov	r1, r8
 8003eee:	eb12 0a01 	adds.w	sl, r2, r1
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	eb43 0b01 	adc.w	fp, r3, r1
 8003ef8:	f04f 0200 	mov.w	r2, #0
 8003efc:	f04f 0300 	mov.w	r3, #0
 8003f00:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8003f04:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8003f08:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8003f0c:	4692      	mov	sl, r2
 8003f0e:	469b      	mov	fp, r3
 8003f10:	4643      	mov	r3, r8
 8003f12:	eb1a 0303 	adds.w	r3, sl, r3
 8003f16:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8003f1a:	464b      	mov	r3, r9
 8003f1c:	eb4b 0303 	adc.w	r3, fp, r3
 8003f20:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8003f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003f28:	685b      	ldr	r3, [r3, #4]
 8003f2a:	2200      	movs	r2, #0
 8003f2c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8003f30:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8003f34:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	18db      	adds	r3, r3, r3
 8003f3c:	643b      	str	r3, [r7, #64]	; 0x40
 8003f3e:	4613      	mov	r3, r2
 8003f40:	eb42 0303 	adc.w	r3, r2, r3
 8003f44:	647b      	str	r3, [r7, #68]	; 0x44
 8003f46:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8003f4a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8003f4e:	f7fc f949 	bl	80001e4 <__aeabi_uldivmod>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4611      	mov	r1, r2
 8003f58:	4b3b      	ldr	r3, [pc, #236]	; (8004048 <UART_SetConfig+0x2d4>)
 8003f5a:	fba3 2301 	umull	r2, r3, r3, r1
 8003f5e:	095b      	lsrs	r3, r3, #5
 8003f60:	2264      	movs	r2, #100	; 0x64
 8003f62:	fb02 f303 	mul.w	r3, r2, r3
 8003f66:	1acb      	subs	r3, r1, r3
 8003f68:	00db      	lsls	r3, r3, #3
 8003f6a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8003f6e:	4b36      	ldr	r3, [pc, #216]	; (8004048 <UART_SetConfig+0x2d4>)
 8003f70:	fba3 2302 	umull	r2, r3, r3, r2
 8003f74:	095b      	lsrs	r3, r3, #5
 8003f76:	005b      	lsls	r3, r3, #1
 8003f78:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8003f7c:	441c      	add	r4, r3
 8003f7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8003f82:	2200      	movs	r2, #0
 8003f84:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8003f88:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8003f8c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8003f90:	4642      	mov	r2, r8
 8003f92:	464b      	mov	r3, r9
 8003f94:	1891      	adds	r1, r2, r2
 8003f96:	63b9      	str	r1, [r7, #56]	; 0x38
 8003f98:	415b      	adcs	r3, r3
 8003f9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003f9c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8003fa0:	4641      	mov	r1, r8
 8003fa2:	1851      	adds	r1, r2, r1
 8003fa4:	6339      	str	r1, [r7, #48]	; 0x30
 8003fa6:	4649      	mov	r1, r9
 8003fa8:	414b      	adcs	r3, r1
 8003faa:	637b      	str	r3, [r7, #52]	; 0x34
 8003fac:	f04f 0200 	mov.w	r2, #0
 8003fb0:	f04f 0300 	mov.w	r3, #0
 8003fb4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8003fb8:	4659      	mov	r1, fp
 8003fba:	00cb      	lsls	r3, r1, #3
 8003fbc:	4651      	mov	r1, sl
 8003fbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8003fc2:	4651      	mov	r1, sl
 8003fc4:	00ca      	lsls	r2, r1, #3
 8003fc6:	4610      	mov	r0, r2
 8003fc8:	4619      	mov	r1, r3
 8003fca:	4603      	mov	r3, r0
 8003fcc:	4642      	mov	r2, r8
 8003fce:	189b      	adds	r3, r3, r2
 8003fd0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8003fd4:	464b      	mov	r3, r9
 8003fd6:	460a      	mov	r2, r1
 8003fd8:	eb42 0303 	adc.w	r3, r2, r3
 8003fdc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8003fe0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8003fe4:	685b      	ldr	r3, [r3, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8003fec:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8003ff0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	18db      	adds	r3, r3, r3
 8003ff8:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ffa:	4613      	mov	r3, r2
 8003ffc:	eb42 0303 	adc.w	r3, r2, r3
 8004000:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004002:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004006:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800400a:	f7fc f8eb 	bl	80001e4 <__aeabi_uldivmod>
 800400e:	4602      	mov	r2, r0
 8004010:	460b      	mov	r3, r1
 8004012:	4b0d      	ldr	r3, [pc, #52]	; (8004048 <UART_SetConfig+0x2d4>)
 8004014:	fba3 1302 	umull	r1, r3, r3, r2
 8004018:	095b      	lsrs	r3, r3, #5
 800401a:	2164      	movs	r1, #100	; 0x64
 800401c:	fb01 f303 	mul.w	r3, r1, r3
 8004020:	1ad3      	subs	r3, r2, r3
 8004022:	00db      	lsls	r3, r3, #3
 8004024:	3332      	adds	r3, #50	; 0x32
 8004026:	4a08      	ldr	r2, [pc, #32]	; (8004048 <UART_SetConfig+0x2d4>)
 8004028:	fba2 2303 	umull	r2, r3, r2, r3
 800402c:	095b      	lsrs	r3, r3, #5
 800402e:	f003 0207 	and.w	r2, r3, #7
 8004032:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	4422      	add	r2, r4
 800403a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800403c:	e105      	b.n	800424a <UART_SetConfig+0x4d6>
 800403e:	bf00      	nop
 8004040:	40011000 	.word	0x40011000
 8004044:	40011400 	.word	0x40011400
 8004048:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800404c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004050:	2200      	movs	r2, #0
 8004052:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004056:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800405a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800405e:	4642      	mov	r2, r8
 8004060:	464b      	mov	r3, r9
 8004062:	1891      	adds	r1, r2, r2
 8004064:	6239      	str	r1, [r7, #32]
 8004066:	415b      	adcs	r3, r3
 8004068:	627b      	str	r3, [r7, #36]	; 0x24
 800406a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800406e:	4641      	mov	r1, r8
 8004070:	1854      	adds	r4, r2, r1
 8004072:	4649      	mov	r1, r9
 8004074:	eb43 0501 	adc.w	r5, r3, r1
 8004078:	f04f 0200 	mov.w	r2, #0
 800407c:	f04f 0300 	mov.w	r3, #0
 8004080:	00eb      	lsls	r3, r5, #3
 8004082:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004086:	00e2      	lsls	r2, r4, #3
 8004088:	4614      	mov	r4, r2
 800408a:	461d      	mov	r5, r3
 800408c:	4643      	mov	r3, r8
 800408e:	18e3      	adds	r3, r4, r3
 8004090:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004094:	464b      	mov	r3, r9
 8004096:	eb45 0303 	adc.w	r3, r5, r3
 800409a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800409e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80040a2:	685b      	ldr	r3, [r3, #4]
 80040a4:	2200      	movs	r2, #0
 80040a6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80040aa:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80040ae:	f04f 0200 	mov.w	r2, #0
 80040b2:	f04f 0300 	mov.w	r3, #0
 80040b6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80040ba:	4629      	mov	r1, r5
 80040bc:	008b      	lsls	r3, r1, #2
 80040be:	4621      	mov	r1, r4
 80040c0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80040c4:	4621      	mov	r1, r4
 80040c6:	008a      	lsls	r2, r1, #2
 80040c8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80040cc:	f7fc f88a 	bl	80001e4 <__aeabi_uldivmod>
 80040d0:	4602      	mov	r2, r0
 80040d2:	460b      	mov	r3, r1
 80040d4:	4b60      	ldr	r3, [pc, #384]	; (8004258 <UART_SetConfig+0x4e4>)
 80040d6:	fba3 2302 	umull	r2, r3, r3, r2
 80040da:	095b      	lsrs	r3, r3, #5
 80040dc:	011c      	lsls	r4, r3, #4
 80040de:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80040e2:	2200      	movs	r2, #0
 80040e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80040e8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80040ec:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80040f0:	4642      	mov	r2, r8
 80040f2:	464b      	mov	r3, r9
 80040f4:	1891      	adds	r1, r2, r2
 80040f6:	61b9      	str	r1, [r7, #24]
 80040f8:	415b      	adcs	r3, r3
 80040fa:	61fb      	str	r3, [r7, #28]
 80040fc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004100:	4641      	mov	r1, r8
 8004102:	1851      	adds	r1, r2, r1
 8004104:	6139      	str	r1, [r7, #16]
 8004106:	4649      	mov	r1, r9
 8004108:	414b      	adcs	r3, r1
 800410a:	617b      	str	r3, [r7, #20]
 800410c:	f04f 0200 	mov.w	r2, #0
 8004110:	f04f 0300 	mov.w	r3, #0
 8004114:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004118:	4659      	mov	r1, fp
 800411a:	00cb      	lsls	r3, r1, #3
 800411c:	4651      	mov	r1, sl
 800411e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004122:	4651      	mov	r1, sl
 8004124:	00ca      	lsls	r2, r1, #3
 8004126:	4610      	mov	r0, r2
 8004128:	4619      	mov	r1, r3
 800412a:	4603      	mov	r3, r0
 800412c:	4642      	mov	r2, r8
 800412e:	189b      	adds	r3, r3, r2
 8004130:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004134:	464b      	mov	r3, r9
 8004136:	460a      	mov	r2, r1
 8004138:	eb42 0303 	adc.w	r3, r2, r3
 800413c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	2200      	movs	r2, #0
 8004148:	67bb      	str	r3, [r7, #120]	; 0x78
 800414a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800414c:	f04f 0200 	mov.w	r2, #0
 8004150:	f04f 0300 	mov.w	r3, #0
 8004154:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004158:	4649      	mov	r1, r9
 800415a:	008b      	lsls	r3, r1, #2
 800415c:	4641      	mov	r1, r8
 800415e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004162:	4641      	mov	r1, r8
 8004164:	008a      	lsls	r2, r1, #2
 8004166:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800416a:	f7fc f83b 	bl	80001e4 <__aeabi_uldivmod>
 800416e:	4602      	mov	r2, r0
 8004170:	460b      	mov	r3, r1
 8004172:	4b39      	ldr	r3, [pc, #228]	; (8004258 <UART_SetConfig+0x4e4>)
 8004174:	fba3 1302 	umull	r1, r3, r3, r2
 8004178:	095b      	lsrs	r3, r3, #5
 800417a:	2164      	movs	r1, #100	; 0x64
 800417c:	fb01 f303 	mul.w	r3, r1, r3
 8004180:	1ad3      	subs	r3, r2, r3
 8004182:	011b      	lsls	r3, r3, #4
 8004184:	3332      	adds	r3, #50	; 0x32
 8004186:	4a34      	ldr	r2, [pc, #208]	; (8004258 <UART_SetConfig+0x4e4>)
 8004188:	fba2 2303 	umull	r2, r3, r2, r3
 800418c:	095b      	lsrs	r3, r3, #5
 800418e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004192:	441c      	add	r4, r3
 8004194:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004198:	2200      	movs	r2, #0
 800419a:	673b      	str	r3, [r7, #112]	; 0x70
 800419c:	677a      	str	r2, [r7, #116]	; 0x74
 800419e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80041a2:	4642      	mov	r2, r8
 80041a4:	464b      	mov	r3, r9
 80041a6:	1891      	adds	r1, r2, r2
 80041a8:	60b9      	str	r1, [r7, #8]
 80041aa:	415b      	adcs	r3, r3
 80041ac:	60fb      	str	r3, [r7, #12]
 80041ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80041b2:	4641      	mov	r1, r8
 80041b4:	1851      	adds	r1, r2, r1
 80041b6:	6039      	str	r1, [r7, #0]
 80041b8:	4649      	mov	r1, r9
 80041ba:	414b      	adcs	r3, r1
 80041bc:	607b      	str	r3, [r7, #4]
 80041be:	f04f 0200 	mov.w	r2, #0
 80041c2:	f04f 0300 	mov.w	r3, #0
 80041c6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80041ca:	4659      	mov	r1, fp
 80041cc:	00cb      	lsls	r3, r1, #3
 80041ce:	4651      	mov	r1, sl
 80041d0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80041d4:	4651      	mov	r1, sl
 80041d6:	00ca      	lsls	r2, r1, #3
 80041d8:	4610      	mov	r0, r2
 80041da:	4619      	mov	r1, r3
 80041dc:	4603      	mov	r3, r0
 80041de:	4642      	mov	r2, r8
 80041e0:	189b      	adds	r3, r3, r2
 80041e2:	66bb      	str	r3, [r7, #104]	; 0x68
 80041e4:	464b      	mov	r3, r9
 80041e6:	460a      	mov	r2, r1
 80041e8:	eb42 0303 	adc.w	r3, r2, r3
 80041ec:	66fb      	str	r3, [r7, #108]	; 0x6c
 80041ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80041f2:	685b      	ldr	r3, [r3, #4]
 80041f4:	2200      	movs	r2, #0
 80041f6:	663b      	str	r3, [r7, #96]	; 0x60
 80041f8:	667a      	str	r2, [r7, #100]	; 0x64
 80041fa:	f04f 0200 	mov.w	r2, #0
 80041fe:	f04f 0300 	mov.w	r3, #0
 8004202:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004206:	4649      	mov	r1, r9
 8004208:	008b      	lsls	r3, r1, #2
 800420a:	4641      	mov	r1, r8
 800420c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004210:	4641      	mov	r1, r8
 8004212:	008a      	lsls	r2, r1, #2
 8004214:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004218:	f7fb ffe4 	bl	80001e4 <__aeabi_uldivmod>
 800421c:	4602      	mov	r2, r0
 800421e:	460b      	mov	r3, r1
 8004220:	4b0d      	ldr	r3, [pc, #52]	; (8004258 <UART_SetConfig+0x4e4>)
 8004222:	fba3 1302 	umull	r1, r3, r3, r2
 8004226:	095b      	lsrs	r3, r3, #5
 8004228:	2164      	movs	r1, #100	; 0x64
 800422a:	fb01 f303 	mul.w	r3, r1, r3
 800422e:	1ad3      	subs	r3, r2, r3
 8004230:	011b      	lsls	r3, r3, #4
 8004232:	3332      	adds	r3, #50	; 0x32
 8004234:	4a08      	ldr	r2, [pc, #32]	; (8004258 <UART_SetConfig+0x4e4>)
 8004236:	fba2 2303 	umull	r2, r3, r2, r3
 800423a:	095b      	lsrs	r3, r3, #5
 800423c:	f003 020f 	and.w	r2, r3, #15
 8004240:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	4422      	add	r2, r4
 8004248:	609a      	str	r2, [r3, #8]
}
 800424a:	bf00      	nop
 800424c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004250:	46bd      	mov	sp, r7
 8004252:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004256:	bf00      	nop
 8004258:	51eb851f 	.word	0x51eb851f

0800425c <__libc_init_array>:
 800425c:	b570      	push	{r4, r5, r6, lr}
 800425e:	4d0d      	ldr	r5, [pc, #52]	; (8004294 <__libc_init_array+0x38>)
 8004260:	4c0d      	ldr	r4, [pc, #52]	; (8004298 <__libc_init_array+0x3c>)
 8004262:	1b64      	subs	r4, r4, r5
 8004264:	10a4      	asrs	r4, r4, #2
 8004266:	2600      	movs	r6, #0
 8004268:	42a6      	cmp	r6, r4
 800426a:	d109      	bne.n	8004280 <__libc_init_array+0x24>
 800426c:	4d0b      	ldr	r5, [pc, #44]	; (800429c <__libc_init_array+0x40>)
 800426e:	4c0c      	ldr	r4, [pc, #48]	; (80042a0 <__libc_init_array+0x44>)
 8004270:	f000 f820 	bl	80042b4 <_init>
 8004274:	1b64      	subs	r4, r4, r5
 8004276:	10a4      	asrs	r4, r4, #2
 8004278:	2600      	movs	r6, #0
 800427a:	42a6      	cmp	r6, r4
 800427c:	d105      	bne.n	800428a <__libc_init_array+0x2e>
 800427e:	bd70      	pop	{r4, r5, r6, pc}
 8004280:	f855 3b04 	ldr.w	r3, [r5], #4
 8004284:	4798      	blx	r3
 8004286:	3601      	adds	r6, #1
 8004288:	e7ee      	b.n	8004268 <__libc_init_array+0xc>
 800428a:	f855 3b04 	ldr.w	r3, [r5], #4
 800428e:	4798      	blx	r3
 8004290:	3601      	adds	r6, #1
 8004292:	e7f2      	b.n	800427a <__libc_init_array+0x1e>
 8004294:	08004304 	.word	0x08004304
 8004298:	08004304 	.word	0x08004304
 800429c:	08004304 	.word	0x08004304
 80042a0:	08004308 	.word	0x08004308

080042a4 <memset>:
 80042a4:	4402      	add	r2, r0
 80042a6:	4603      	mov	r3, r0
 80042a8:	4293      	cmp	r3, r2
 80042aa:	d100      	bne.n	80042ae <memset+0xa>
 80042ac:	4770      	bx	lr
 80042ae:	f803 1b01 	strb.w	r1, [r3], #1
 80042b2:	e7f9      	b.n	80042a8 <memset+0x4>

080042b4 <_init>:
 80042b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042b6:	bf00      	nop
 80042b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042ba:	bc08      	pop	{r3}
 80042bc:	469e      	mov	lr, r3
 80042be:	4770      	bx	lr

080042c0 <_fini>:
 80042c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80042c2:	bf00      	nop
 80042c4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80042c6:	bc08      	pop	{r3}
 80042c8:	469e      	mov	lr, r3
 80042ca:	4770      	bx	lr
