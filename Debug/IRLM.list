
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008ba4  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000240  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008f78  08008f78  000214b8  2**0
                  CONTENTS
  4 .ARM          00000008  08008f78  08008f78  00018f78  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008f80  08008f80  000214b8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008f80  08008f80  00018f80  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008f84  08008f84  00018f84  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000014b8  20000000  08008f88  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00014974  200014b8  0800a440  000214b8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015e2c  0800a440  00025e2c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000214b8  2**0
                  CONTENTS, READONLY
 12 .debug_info   00017653  00000000  00000000  000214e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fc6  00000000  00000000  00038b3b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000013e0  00000000  00000000  0003bb08  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000012e0  00000000  00000000  0003cee8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f50  00000000  00000000  0003e1c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00018c3e  00000000  00000000  00057118  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009d13e  00000000  00000000  0006fd56  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  0010ce94  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005668  00000000  00000000  0010cee4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	200014b8 	.word	0x200014b8
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08008d20 	.word	0x08008d20

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	200014bc 	.word	0x200014bc
 80001d0:	08008d20 	.word	0x08008d20

080001d4 <strcmp>:
 80001d4:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001dc:	2a01      	cmp	r2, #1
 80001de:	bf28      	it	cs
 80001e0:	429a      	cmpcs	r2, r3
 80001e2:	d0f7      	beq.n	80001d4 <strcmp>
 80001e4:	1ad0      	subs	r0, r2, r3
 80001e6:	4770      	bx	lr

080001e8 <strlen>:
 80001e8:	4603      	mov	r3, r0
 80001ea:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ee:	2a00      	cmp	r2, #0
 80001f0:	d1fb      	bne.n	80001ea <strlen+0x2>
 80001f2:	1a18      	subs	r0, r3, r0
 80001f4:	3801      	subs	r0, #1
 80001f6:	4770      	bx	lr

080001f8 <__aeabi_uldivmod>:
 80001f8:	b953      	cbnz	r3, 8000210 <__aeabi_uldivmod+0x18>
 80001fa:	b94a      	cbnz	r2, 8000210 <__aeabi_uldivmod+0x18>
 80001fc:	2900      	cmp	r1, #0
 80001fe:	bf08      	it	eq
 8000200:	2800      	cmpeq	r0, #0
 8000202:	bf1c      	itt	ne
 8000204:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000208:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 800020c:	f000 b974 	b.w	80004f8 <__aeabi_idiv0>
 8000210:	f1ad 0c08 	sub.w	ip, sp, #8
 8000214:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000218:	f000 f806 	bl	8000228 <__udivmoddi4>
 800021c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000220:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000224:	b004      	add	sp, #16
 8000226:	4770      	bx	lr

08000228 <__udivmoddi4>:
 8000228:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800022c:	9d08      	ldr	r5, [sp, #32]
 800022e:	4604      	mov	r4, r0
 8000230:	468e      	mov	lr, r1
 8000232:	2b00      	cmp	r3, #0
 8000234:	d14d      	bne.n	80002d2 <__udivmoddi4+0xaa>
 8000236:	428a      	cmp	r2, r1
 8000238:	4694      	mov	ip, r2
 800023a:	d969      	bls.n	8000310 <__udivmoddi4+0xe8>
 800023c:	fab2 f282 	clz	r2, r2
 8000240:	b152      	cbz	r2, 8000258 <__udivmoddi4+0x30>
 8000242:	fa01 f302 	lsl.w	r3, r1, r2
 8000246:	f1c2 0120 	rsb	r1, r2, #32
 800024a:	fa20 f101 	lsr.w	r1, r0, r1
 800024e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000252:	ea41 0e03 	orr.w	lr, r1, r3
 8000256:	4094      	lsls	r4, r2
 8000258:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800025c:	0c21      	lsrs	r1, r4, #16
 800025e:	fbbe f6f8 	udiv	r6, lr, r8
 8000262:	fa1f f78c 	uxth.w	r7, ip
 8000266:	fb08 e316 	mls	r3, r8, r6, lr
 800026a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800026e:	fb06 f107 	mul.w	r1, r6, r7
 8000272:	4299      	cmp	r1, r3
 8000274:	d90a      	bls.n	800028c <__udivmoddi4+0x64>
 8000276:	eb1c 0303 	adds.w	r3, ip, r3
 800027a:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800027e:	f080 811f 	bcs.w	80004c0 <__udivmoddi4+0x298>
 8000282:	4299      	cmp	r1, r3
 8000284:	f240 811c 	bls.w	80004c0 <__udivmoddi4+0x298>
 8000288:	3e02      	subs	r6, #2
 800028a:	4463      	add	r3, ip
 800028c:	1a5b      	subs	r3, r3, r1
 800028e:	b2a4      	uxth	r4, r4
 8000290:	fbb3 f0f8 	udiv	r0, r3, r8
 8000294:	fb08 3310 	mls	r3, r8, r0, r3
 8000298:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800029c:	fb00 f707 	mul.w	r7, r0, r7
 80002a0:	42a7      	cmp	r7, r4
 80002a2:	d90a      	bls.n	80002ba <__udivmoddi4+0x92>
 80002a4:	eb1c 0404 	adds.w	r4, ip, r4
 80002a8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80002ac:	f080 810a 	bcs.w	80004c4 <__udivmoddi4+0x29c>
 80002b0:	42a7      	cmp	r7, r4
 80002b2:	f240 8107 	bls.w	80004c4 <__udivmoddi4+0x29c>
 80002b6:	4464      	add	r4, ip
 80002b8:	3802      	subs	r0, #2
 80002ba:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002be:	1be4      	subs	r4, r4, r7
 80002c0:	2600      	movs	r6, #0
 80002c2:	b11d      	cbz	r5, 80002cc <__udivmoddi4+0xa4>
 80002c4:	40d4      	lsrs	r4, r2
 80002c6:	2300      	movs	r3, #0
 80002c8:	e9c5 4300 	strd	r4, r3, [r5]
 80002cc:	4631      	mov	r1, r6
 80002ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d2:	428b      	cmp	r3, r1
 80002d4:	d909      	bls.n	80002ea <__udivmoddi4+0xc2>
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	f000 80ef 	beq.w	80004ba <__udivmoddi4+0x292>
 80002dc:	2600      	movs	r6, #0
 80002de:	e9c5 0100 	strd	r0, r1, [r5]
 80002e2:	4630      	mov	r0, r6
 80002e4:	4631      	mov	r1, r6
 80002e6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ea:	fab3 f683 	clz	r6, r3
 80002ee:	2e00      	cmp	r6, #0
 80002f0:	d14a      	bne.n	8000388 <__udivmoddi4+0x160>
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d302      	bcc.n	80002fc <__udivmoddi4+0xd4>
 80002f6:	4282      	cmp	r2, r0
 80002f8:	f200 80f9 	bhi.w	80004ee <__udivmoddi4+0x2c6>
 80002fc:	1a84      	subs	r4, r0, r2
 80002fe:	eb61 0303 	sbc.w	r3, r1, r3
 8000302:	2001      	movs	r0, #1
 8000304:	469e      	mov	lr, r3
 8000306:	2d00      	cmp	r5, #0
 8000308:	d0e0      	beq.n	80002cc <__udivmoddi4+0xa4>
 800030a:	e9c5 4e00 	strd	r4, lr, [r5]
 800030e:	e7dd      	b.n	80002cc <__udivmoddi4+0xa4>
 8000310:	b902      	cbnz	r2, 8000314 <__udivmoddi4+0xec>
 8000312:	deff      	udf	#255	; 0xff
 8000314:	fab2 f282 	clz	r2, r2
 8000318:	2a00      	cmp	r2, #0
 800031a:	f040 8092 	bne.w	8000442 <__udivmoddi4+0x21a>
 800031e:	eba1 010c 	sub.w	r1, r1, ip
 8000322:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000326:	fa1f fe8c 	uxth.w	lr, ip
 800032a:	2601      	movs	r6, #1
 800032c:	0c20      	lsrs	r0, r4, #16
 800032e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000332:	fb07 1113 	mls	r1, r7, r3, r1
 8000336:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800033a:	fb0e f003 	mul.w	r0, lr, r3
 800033e:	4288      	cmp	r0, r1
 8000340:	d908      	bls.n	8000354 <__udivmoddi4+0x12c>
 8000342:	eb1c 0101 	adds.w	r1, ip, r1
 8000346:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 800034a:	d202      	bcs.n	8000352 <__udivmoddi4+0x12a>
 800034c:	4288      	cmp	r0, r1
 800034e:	f200 80cb 	bhi.w	80004e8 <__udivmoddi4+0x2c0>
 8000352:	4643      	mov	r3, r8
 8000354:	1a09      	subs	r1, r1, r0
 8000356:	b2a4      	uxth	r4, r4
 8000358:	fbb1 f0f7 	udiv	r0, r1, r7
 800035c:	fb07 1110 	mls	r1, r7, r0, r1
 8000360:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000364:	fb0e fe00 	mul.w	lr, lr, r0
 8000368:	45a6      	cmp	lr, r4
 800036a:	d908      	bls.n	800037e <__udivmoddi4+0x156>
 800036c:	eb1c 0404 	adds.w	r4, ip, r4
 8000370:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000374:	d202      	bcs.n	800037c <__udivmoddi4+0x154>
 8000376:	45a6      	cmp	lr, r4
 8000378:	f200 80bb 	bhi.w	80004f2 <__udivmoddi4+0x2ca>
 800037c:	4608      	mov	r0, r1
 800037e:	eba4 040e 	sub.w	r4, r4, lr
 8000382:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000386:	e79c      	b.n	80002c2 <__udivmoddi4+0x9a>
 8000388:	f1c6 0720 	rsb	r7, r6, #32
 800038c:	40b3      	lsls	r3, r6
 800038e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000392:	ea4c 0c03 	orr.w	ip, ip, r3
 8000396:	fa20 f407 	lsr.w	r4, r0, r7
 800039a:	fa01 f306 	lsl.w	r3, r1, r6
 800039e:	431c      	orrs	r4, r3
 80003a0:	40f9      	lsrs	r1, r7
 80003a2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 80003a6:	fa00 f306 	lsl.w	r3, r0, r6
 80003aa:	fbb1 f8f9 	udiv	r8, r1, r9
 80003ae:	0c20      	lsrs	r0, r4, #16
 80003b0:	fa1f fe8c 	uxth.w	lr, ip
 80003b4:	fb09 1118 	mls	r1, r9, r8, r1
 80003b8:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003bc:	fb08 f00e 	mul.w	r0, r8, lr
 80003c0:	4288      	cmp	r0, r1
 80003c2:	fa02 f206 	lsl.w	r2, r2, r6
 80003c6:	d90b      	bls.n	80003e0 <__udivmoddi4+0x1b8>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003d0:	f080 8088 	bcs.w	80004e4 <__udivmoddi4+0x2bc>
 80003d4:	4288      	cmp	r0, r1
 80003d6:	f240 8085 	bls.w	80004e4 <__udivmoddi4+0x2bc>
 80003da:	f1a8 0802 	sub.w	r8, r8, #2
 80003de:	4461      	add	r1, ip
 80003e0:	1a09      	subs	r1, r1, r0
 80003e2:	b2a4      	uxth	r4, r4
 80003e4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003e8:	fb09 1110 	mls	r1, r9, r0, r1
 80003ec:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003f0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003f4:	458e      	cmp	lr, r1
 80003f6:	d908      	bls.n	800040a <__udivmoddi4+0x1e2>
 80003f8:	eb1c 0101 	adds.w	r1, ip, r1
 80003fc:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 8000400:	d26c      	bcs.n	80004dc <__udivmoddi4+0x2b4>
 8000402:	458e      	cmp	lr, r1
 8000404:	d96a      	bls.n	80004dc <__udivmoddi4+0x2b4>
 8000406:	3802      	subs	r0, #2
 8000408:	4461      	add	r1, ip
 800040a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 800040e:	fba0 9402 	umull	r9, r4, r0, r2
 8000412:	eba1 010e 	sub.w	r1, r1, lr
 8000416:	42a1      	cmp	r1, r4
 8000418:	46c8      	mov	r8, r9
 800041a:	46a6      	mov	lr, r4
 800041c:	d356      	bcc.n	80004cc <__udivmoddi4+0x2a4>
 800041e:	d053      	beq.n	80004c8 <__udivmoddi4+0x2a0>
 8000420:	b15d      	cbz	r5, 800043a <__udivmoddi4+0x212>
 8000422:	ebb3 0208 	subs.w	r2, r3, r8
 8000426:	eb61 010e 	sbc.w	r1, r1, lr
 800042a:	fa01 f707 	lsl.w	r7, r1, r7
 800042e:	fa22 f306 	lsr.w	r3, r2, r6
 8000432:	40f1      	lsrs	r1, r6
 8000434:	431f      	orrs	r7, r3
 8000436:	e9c5 7100 	strd	r7, r1, [r5]
 800043a:	2600      	movs	r6, #0
 800043c:	4631      	mov	r1, r6
 800043e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000442:	f1c2 0320 	rsb	r3, r2, #32
 8000446:	40d8      	lsrs	r0, r3
 8000448:	fa0c fc02 	lsl.w	ip, ip, r2
 800044c:	fa21 f303 	lsr.w	r3, r1, r3
 8000450:	4091      	lsls	r1, r2
 8000452:	4301      	orrs	r1, r0
 8000454:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000458:	fa1f fe8c 	uxth.w	lr, ip
 800045c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000460:	fb07 3610 	mls	r6, r7, r0, r3
 8000464:	0c0b      	lsrs	r3, r1, #16
 8000466:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800046a:	fb00 f60e 	mul.w	r6, r0, lr
 800046e:	429e      	cmp	r6, r3
 8000470:	fa04 f402 	lsl.w	r4, r4, r2
 8000474:	d908      	bls.n	8000488 <__udivmoddi4+0x260>
 8000476:	eb1c 0303 	adds.w	r3, ip, r3
 800047a:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800047e:	d22f      	bcs.n	80004e0 <__udivmoddi4+0x2b8>
 8000480:	429e      	cmp	r6, r3
 8000482:	d92d      	bls.n	80004e0 <__udivmoddi4+0x2b8>
 8000484:	3802      	subs	r0, #2
 8000486:	4463      	add	r3, ip
 8000488:	1b9b      	subs	r3, r3, r6
 800048a:	b289      	uxth	r1, r1
 800048c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000490:	fb07 3316 	mls	r3, r7, r6, r3
 8000494:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000498:	fb06 f30e 	mul.w	r3, r6, lr
 800049c:	428b      	cmp	r3, r1
 800049e:	d908      	bls.n	80004b2 <__udivmoddi4+0x28a>
 80004a0:	eb1c 0101 	adds.w	r1, ip, r1
 80004a4:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 80004a8:	d216      	bcs.n	80004d8 <__udivmoddi4+0x2b0>
 80004aa:	428b      	cmp	r3, r1
 80004ac:	d914      	bls.n	80004d8 <__udivmoddi4+0x2b0>
 80004ae:	3e02      	subs	r6, #2
 80004b0:	4461      	add	r1, ip
 80004b2:	1ac9      	subs	r1, r1, r3
 80004b4:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004b8:	e738      	b.n	800032c <__udivmoddi4+0x104>
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e705      	b.n	80002cc <__udivmoddi4+0xa4>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e3      	b.n	800028c <__udivmoddi4+0x64>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6f8      	b.n	80002ba <__udivmoddi4+0x92>
 80004c8:	454b      	cmp	r3, r9
 80004ca:	d2a9      	bcs.n	8000420 <__udivmoddi4+0x1f8>
 80004cc:	ebb9 0802 	subs.w	r8, r9, r2
 80004d0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7a3      	b.n	8000420 <__udivmoddi4+0x1f8>
 80004d8:	4646      	mov	r6, r8
 80004da:	e7ea      	b.n	80004b2 <__udivmoddi4+0x28a>
 80004dc:	4620      	mov	r0, r4
 80004de:	e794      	b.n	800040a <__udivmoddi4+0x1e2>
 80004e0:	4640      	mov	r0, r8
 80004e2:	e7d1      	b.n	8000488 <__udivmoddi4+0x260>
 80004e4:	46d0      	mov	r8, sl
 80004e6:	e77b      	b.n	80003e0 <__udivmoddi4+0x1b8>
 80004e8:	3b02      	subs	r3, #2
 80004ea:	4461      	add	r1, ip
 80004ec:	e732      	b.n	8000354 <__udivmoddi4+0x12c>
 80004ee:	4630      	mov	r0, r6
 80004f0:	e709      	b.n	8000306 <__udivmoddi4+0xde>
 80004f2:	4464      	add	r4, ip
 80004f4:	3802      	subs	r0, #2
 80004f6:	e742      	b.n	800037e <__udivmoddi4+0x156>

080004f8 <__aeabi_idiv0>:
 80004f8:	4770      	bx	lr
 80004fa:	bf00      	nop

080004fc <Toggle>:
 *      Author: zcbauer
 */

#include "IrTransmit.h"

void Toggle(int on){
 80004fc:	b580      	push	{r7, lr}
 80004fe:	b082      	sub	sp, #8
 8000500:	af00      	add	r7, sp, #0
 8000502:	6078      	str	r0, [r7, #4]
	if(!on){
 8000504:	687b      	ldr	r3, [r7, #4]
 8000506:	2b00      	cmp	r3, #0
 8000508:	d104      	bne.n	8000514 <Toggle+0x18>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 800050a:	2104      	movs	r1, #4
 800050c:	4805      	ldr	r0, [pc, #20]	; (8000524 <Toggle+0x28>)
 800050e:	f005 ff61 	bl	80063d4 <HAL_TIM_PWM_Start>
	}
	else{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	}
}
 8000512:	e003      	b.n	800051c <Toggle+0x20>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 8000514:	2104      	movs	r1, #4
 8000516:	4803      	ldr	r0, [pc, #12]	; (8000524 <Toggle+0x28>)
 8000518:	f006 f80c 	bl	8006534 <HAL_TIM_PWM_Stop>
}
 800051c:	bf00      	nop
 800051e:	3708      	adds	r7, #8
 8000520:	46bd      	mov	sp, r7
 8000522:	bd80      	pop	{r7, pc}
 8000524:	200016d0 	.word	0x200016d0

08000528 <Delay>:
void Delay(uint16_t delay){
 8000528:	b480      	push	{r7}
 800052a:	b083      	sub	sp, #12
 800052c:	af00      	add	r7, sp, #0
 800052e:	4603      	mov	r3, r0
 8000530:	80fb      	strh	r3, [r7, #6]
	/*Adapted from:
	https://hackaday.com/2020/12/11/bare-metal-stm32-blinky-and-the-secret-of-delay-functions/#:~:text=On%20an%20STM32%20MCU%2C%20we,also%20have%20to%20use%20interrupts
	Example 4
	*/
	if(delay == 0)
 8000532:	88fb      	ldrh	r3, [r7, #6]
 8000534:	2b00      	cmp	r3, #0
 8000536:	d01c      	beq.n	8000572 <Delay+0x4a>
			return;
	TIM1->SR = 0;
 8000538:	4b11      	ldr	r3, [pc, #68]	; (8000580 <Delay+0x58>)
 800053a:	2200      	movs	r2, #0
 800053c:	611a      	str	r2, [r3, #16]
	TIM1->ARR = delay;
 800053e:	4a10      	ldr	r2, [pc, #64]	; (8000580 <Delay+0x58>)
 8000540:	88fb      	ldrh	r3, [r7, #6]
 8000542:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CNT = 0;
 8000544:	4b0e      	ldr	r3, [pc, #56]	; (8000580 <Delay+0x58>)
 8000546:	2200      	movs	r2, #0
 8000548:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CR1 |= 1; //enables timer 1
 800054a:	4b0d      	ldr	r3, [pc, #52]	; (8000580 <Delay+0x58>)
 800054c:	681b      	ldr	r3, [r3, #0]
 800054e:	4a0c      	ldr	r2, [pc, #48]	; (8000580 <Delay+0x58>)
 8000550:	f043 0301 	orr.w	r3, r3, #1
 8000554:	6013      	str	r3, [r2, #0]
	while(!(TIM1->SR & TIM_SR_UIF));
 8000556:	bf00      	nop
 8000558:	4b09      	ldr	r3, [pc, #36]	; (8000580 <Delay+0x58>)
 800055a:	691b      	ldr	r3, [r3, #16]
 800055c:	f003 0301 	and.w	r3, r3, #1
 8000560:	2b00      	cmp	r3, #0
 8000562:	d0f9      	beq.n	8000558 <Delay+0x30>
	TIM1->CR1 &= ~(1); //disables timer 1
 8000564:	4b06      	ldr	r3, [pc, #24]	; (8000580 <Delay+0x58>)
 8000566:	681b      	ldr	r3, [r3, #0]
 8000568:	4a05      	ldr	r2, [pc, #20]	; (8000580 <Delay+0x58>)
 800056a:	f023 0301 	bic.w	r3, r3, #1
 800056e:	6013      	str	r3, [r2, #0]
 8000570:	e000      	b.n	8000574 <Delay+0x4c>
			return;
 8000572:	bf00      	nop
}
 8000574:	370c      	adds	r7, #12
 8000576:	46bd      	mov	sp, r7
 8000578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop
 8000580:	40010000 	.word	0x40010000

08000584 <GlobalTransmit>:
void GlobalTransmit(){
 8000584:	b580      	push	{r7, lr}
 8000586:	b082      	sub	sp, #8
 8000588:	af00      	add	r7, sp, #0
	int on = 0;
 800058a:	2300      	movs	r3, #0
 800058c:	607b      	str	r3, [r7, #4]
	for(size_t i = 0; i<dataLen;++i){
 800058e:	2300      	movs	r3, #0
 8000590:	603b      	str	r3, [r7, #0]
 8000592:	e010      	b.n	80005b6 <GlobalTransmit+0x32>
		Toggle(on);
 8000594:	6878      	ldr	r0, [r7, #4]
 8000596:	f7ff ffb1 	bl	80004fc <Toggle>
		on^=1;
 800059a:	687b      	ldr	r3, [r7, #4]
 800059c:	f083 0301 	eor.w	r3, r3, #1
 80005a0:	607b      	str	r3, [r7, #4]
		Delay(data[i]);
 80005a2:	4a0b      	ldr	r2, [pc, #44]	; (80005d0 <GlobalTransmit+0x4c>)
 80005a4:	683b      	ldr	r3, [r7, #0]
 80005a6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80005aa:	4618      	mov	r0, r3
 80005ac:	f7ff ffbc 	bl	8000528 <Delay>
	for(size_t i = 0; i<dataLen;++i){
 80005b0:	683b      	ldr	r3, [r7, #0]
 80005b2:	3301      	adds	r3, #1
 80005b4:	603b      	str	r3, [r7, #0]
 80005b6:	4b07      	ldr	r3, [pc, #28]	; (80005d4 <GlobalTransmit+0x50>)
 80005b8:	681b      	ldr	r3, [r3, #0]
 80005ba:	683a      	ldr	r2, [r7, #0]
 80005bc:	429a      	cmp	r2, r3
 80005be:	d3e9      	bcc.n	8000594 <GlobalTransmit+0x10>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80005c0:	2104      	movs	r1, #4
 80005c2:	4805      	ldr	r0, [pc, #20]	; (80005d8 <GlobalTransmit+0x54>)
 80005c4:	f005 ffb6 	bl	8006534 <HAL_TIM_PWM_Stop>
}
 80005c8:	bf00      	nop
 80005ca:	3708      	adds	r7, #8
 80005cc:	46bd      	mov	sp, r7
 80005ce:	bd80      	pop	{r7, pc}
 80005d0:	20015b10 	.word	0x20015b10
 80005d4:	20000008 	.word	0x20000008
 80005d8:	200016d0 	.word	0x200016d0

080005dc <DeviceTransmit>:
void DeviceTransmit(uint16_t data[dataLen]){
 80005dc:	b580      	push	{r7, lr}
 80005de:	b084      	sub	sp, #16
 80005e0:	af00      	add	r7, sp, #0
 80005e2:	6078      	str	r0, [r7, #4]
	int on =0;
 80005e4:	2300      	movs	r3, #0
 80005e6:	60fb      	str	r3, [r7, #12]
	for(uint16_t *ptr = data; ptr<data+dataLen;++ptr){
 80005e8:	687b      	ldr	r3, [r7, #4]
 80005ea:	60bb      	str	r3, [r7, #8]
 80005ec:	e00e      	b.n	800060c <DeviceTransmit+0x30>
		Toggle(on);
 80005ee:	68f8      	ldr	r0, [r7, #12]
 80005f0:	f7ff ff84 	bl	80004fc <Toggle>
		on^=1;
 80005f4:	68fb      	ldr	r3, [r7, #12]
 80005f6:	f083 0301 	eor.w	r3, r3, #1
 80005fa:	60fb      	str	r3, [r7, #12]
		Delay(*ptr);
 80005fc:	68bb      	ldr	r3, [r7, #8]
 80005fe:	881b      	ldrh	r3, [r3, #0]
 8000600:	4618      	mov	r0, r3
 8000602:	f7ff ff91 	bl	8000528 <Delay>
	for(uint16_t *ptr = data; ptr<data+dataLen;++ptr){
 8000606:	68bb      	ldr	r3, [r7, #8]
 8000608:	3302      	adds	r3, #2
 800060a:	60bb      	str	r3, [r7, #8]
 800060c:	4b07      	ldr	r3, [pc, #28]	; (800062c <DeviceTransmit+0x50>)
 800060e:	681b      	ldr	r3, [r3, #0]
 8000610:	005b      	lsls	r3, r3, #1
 8000612:	687a      	ldr	r2, [r7, #4]
 8000614:	4413      	add	r3, r2
 8000616:	68ba      	ldr	r2, [r7, #8]
 8000618:	429a      	cmp	r2, r3
 800061a:	d3e8      	bcc.n	80005ee <DeviceTransmit+0x12>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 800061c:	2104      	movs	r1, #4
 800061e:	4804      	ldr	r0, [pc, #16]	; (8000630 <DeviceTransmit+0x54>)
 8000620:	f005 ff88 	bl	8006534 <HAL_TIM_PWM_Stop>
}
 8000624:	bf00      	nop
 8000626:	3710      	adds	r7, #16
 8000628:	46bd      	mov	sp, r7
 800062a:	bd80      	pop	{r7, pc}
 800062c:	20000008 	.word	0x20000008
 8000630:	200016d0 	.word	0x200016d0

08000634 <disable_button_EEPROM_writes>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

void disable_button_EEPROM_writes(void) {
 8000634:	b580      	push	{r7, lr}
 8000636:	b084      	sub	sp, #16
 8000638:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 800063a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800063e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 2, HAL_MAX_DELAY);
 8000640:	1d3a      	adds	r2, r7, #4
 8000642:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000646:	9300      	str	r3, [sp, #0]
 8000648:	2302      	movs	r3, #2
 800064a:	21a0      	movs	r1, #160	; 0xa0
 800064c:	4803      	ldr	r0, [pc, #12]	; (800065c <disable_button_EEPROM_writes+0x28>)
 800064e:	f004 f845 	bl	80046dc <HAL_I2C_Master_Transmit>
}
 8000652:	bf00      	nop
 8000654:	3708      	adds	r7, #8
 8000656:	46bd      	mov	sp, r7
 8000658:	bd80      	pop	{r7, pc}
 800065a:	bf00      	nop
 800065c:	20001540 	.word	0x20001540

08000660 <initialize_buttons>:

// Initialize Buttons
void initialize_buttons(void) {
 8000660:	b580      	push	{r7, lr}
 8000662:	af00      	add	r7, sp, #0
	disable_button_EEPROM_writes();
 8000664:	f7ff ffe6 	bl	8000634 <disable_button_EEPROM_writes>
	enable_all_buttons();
 8000668:	f000 f89a 	bl	80007a0 <enable_all_buttons>
	update_buttons();
 800066c:	f000 f8c2 	bl	80007f4 <update_buttons>
	HAL_Delay(1);
 8000670:	2001      	movs	r0, #1
 8000672:	f002 ffc3 	bl	80035fc <HAL_Delay>
}
 8000676:	bf00      	nop
 8000678:	bd80      	pop	{r7, pc}
	...

0800067c <enable_button>:

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 800067c:	b480      	push	{r7}
 800067e:	b083      	sub	sp, #12
 8000680:	af00      	add	r7, sp, #0
 8000682:	4603      	mov	r3, r0
 8000684:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 8000686:	79fb      	ldrb	r3, [r7, #7]
 8000688:	2b00      	cmp	r3, #0
 800068a:	d01e      	beq.n	80006ca <enable_button+0x4e>
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 800068c:	79fb      	ldrb	r3, [r7, #7]
 800068e:	2b09      	cmp	r3, #9
 8000690:	d107      	bne.n	80006a2 <enable_button+0x26>
		io_ctrl_2 &= ~(0b1);
 8000692:	4b11      	ldr	r3, [pc, #68]	; (80006d8 <enable_button+0x5c>)
 8000694:	781b      	ldrb	r3, [r3, #0]
 8000696:	f023 0301 	bic.w	r3, r3, #1
 800069a:	b2da      	uxtb	r2, r3
 800069c:	4b0e      	ldr	r3, [pc, #56]	; (80006d8 <enable_button+0x5c>)
 800069e:	701a      	strb	r2, [r3, #0]
 80006a0:	e014      	b.n	80006cc <enable_button+0x50>
	} else if (button <= 8) {
 80006a2:	79fb      	ldrb	r3, [r7, #7]
 80006a4:	2b08      	cmp	r3, #8
 80006a6:	d811      	bhi.n	80006cc <enable_button+0x50>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 80006a8:	79fb      	ldrb	r3, [r7, #7]
 80006aa:	3b01      	subs	r3, #1
 80006ac:	2201      	movs	r2, #1
 80006ae:	fa02 f303 	lsl.w	r3, r2, r3
 80006b2:	b25b      	sxtb	r3, r3
 80006b4:	43db      	mvns	r3, r3
 80006b6:	b25a      	sxtb	r2, r3
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <enable_button+0x60>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	b25b      	sxtb	r3, r3
 80006be:	4013      	ands	r3, r2
 80006c0:	b25b      	sxtb	r3, r3
 80006c2:	b2da      	uxtb	r2, r3
 80006c4:	4b05      	ldr	r3, [pc, #20]	; (80006dc <enable_button+0x60>)
 80006c6:	701a      	strb	r2, [r3, #0]
 80006c8:	e000      	b.n	80006cc <enable_button+0x50>
	if (!button) return;
 80006ca:	bf00      	nop
	}
}
 80006cc:	370c      	adds	r7, #12
 80006ce:	46bd      	mov	sp, r7
 80006d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006d4:	4770      	bx	lr
 80006d6:	bf00      	nop
 80006d8:	20000001 	.word	0x20000001
 80006dc:	20000000 	.word	0x20000000

080006e0 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 80006e0:	b480      	push	{r7}
 80006e2:	b083      	sub	sp, #12
 80006e4:	af00      	add	r7, sp, #0
 80006e6:	4603      	mov	r3, r0
 80006e8:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 80006ea:	79fb      	ldrb	r3, [r7, #7]
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d01c      	beq.n	800072a <disable_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 80006f0:	79fb      	ldrb	r3, [r7, #7]
 80006f2:	2b09      	cmp	r3, #9
 80006f4:	d107      	bne.n	8000706 <disable_button+0x26>
		io_ctrl_2 |= 0b1;
 80006f6:	4b10      	ldr	r3, [pc, #64]	; (8000738 <disable_button+0x58>)
 80006f8:	781b      	ldrb	r3, [r3, #0]
 80006fa:	f043 0301 	orr.w	r3, r3, #1
 80006fe:	b2da      	uxtb	r2, r3
 8000700:	4b0d      	ldr	r3, [pc, #52]	; (8000738 <disable_button+0x58>)
 8000702:	701a      	strb	r2, [r3, #0]
 8000704:	e012      	b.n	800072c <disable_button+0x4c>
	} else if (button <= 8) {
 8000706:	79fb      	ldrb	r3, [r7, #7]
 8000708:	2b08      	cmp	r3, #8
 800070a:	d80f      	bhi.n	800072c <disable_button+0x4c>
		io_ctrl_1 |= 0b1 << (button - 1);
 800070c:	79fb      	ldrb	r3, [r7, #7]
 800070e:	3b01      	subs	r3, #1
 8000710:	2201      	movs	r2, #1
 8000712:	fa02 f303 	lsl.w	r3, r2, r3
 8000716:	b25a      	sxtb	r2, r3
 8000718:	4b08      	ldr	r3, [pc, #32]	; (800073c <disable_button+0x5c>)
 800071a:	781b      	ldrb	r3, [r3, #0]
 800071c:	b25b      	sxtb	r3, r3
 800071e:	4313      	orrs	r3, r2
 8000720:	b25b      	sxtb	r3, r3
 8000722:	b2da      	uxtb	r2, r3
 8000724:	4b05      	ldr	r3, [pc, #20]	; (800073c <disable_button+0x5c>)
 8000726:	701a      	strb	r2, [r3, #0]
 8000728:	e000      	b.n	800072c <disable_button+0x4c>
	if (!button) return;
 800072a:	bf00      	nop
	}
}
 800072c:	370c      	adds	r7, #12
 800072e:	46bd      	mov	sp, r7
 8000730:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000734:	4770      	bx	lr
 8000736:	bf00      	nop
 8000738:	20000001 	.word	0x20000001
 800073c:	20000000 	.word	0x20000000

08000740 <toggle_button>:

// Toggle a button (1 indexed, left-to-right, top-to-bottom)
void toggle_button(uint8_t button) {
 8000740:	b480      	push	{r7}
 8000742:	b083      	sub	sp, #12
 8000744:	af00      	add	r7, sp, #0
 8000746:	4603      	mov	r3, r0
 8000748:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	2b00      	cmp	r3, #0
 800074e:	d01c      	beq.n	800078a <toggle_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 8000750:	79fb      	ldrb	r3, [r7, #7]
 8000752:	2b09      	cmp	r3, #9
 8000754:	d107      	bne.n	8000766 <toggle_button+0x26>
		io_ctrl_2 ^= 0b1;
 8000756:	4b10      	ldr	r3, [pc, #64]	; (8000798 <toggle_button+0x58>)
 8000758:	781b      	ldrb	r3, [r3, #0]
 800075a:	f083 0301 	eor.w	r3, r3, #1
 800075e:	b2da      	uxtb	r2, r3
 8000760:	4b0d      	ldr	r3, [pc, #52]	; (8000798 <toggle_button+0x58>)
 8000762:	701a      	strb	r2, [r3, #0]
 8000764:	e012      	b.n	800078c <toggle_button+0x4c>
	} else if (button <= 8) {
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	2b08      	cmp	r3, #8
 800076a:	d80f      	bhi.n	800078c <toggle_button+0x4c>
		io_ctrl_1 ^= 0b1 << (button - 1);
 800076c:	79fb      	ldrb	r3, [r7, #7]
 800076e:	3b01      	subs	r3, #1
 8000770:	2201      	movs	r2, #1
 8000772:	fa02 f303 	lsl.w	r3, r2, r3
 8000776:	b25a      	sxtb	r2, r3
 8000778:	4b08      	ldr	r3, [pc, #32]	; (800079c <toggle_button+0x5c>)
 800077a:	781b      	ldrb	r3, [r3, #0]
 800077c:	b25b      	sxtb	r3, r3
 800077e:	4053      	eors	r3, r2
 8000780:	b25b      	sxtb	r3, r3
 8000782:	b2da      	uxtb	r2, r3
 8000784:	4b05      	ldr	r3, [pc, #20]	; (800079c <toggle_button+0x5c>)
 8000786:	701a      	strb	r2, [r3, #0]
 8000788:	e000      	b.n	800078c <toggle_button+0x4c>
	if (!button) return;
 800078a:	bf00      	nop
	}
}
 800078c:	370c      	adds	r7, #12
 800078e:	46bd      	mov	sp, r7
 8000790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000794:	4770      	bx	lr
 8000796:	bf00      	nop
 8000798:	20000001 	.word	0x20000001
 800079c:	20000000 	.word	0x20000000

080007a0 <enable_all_buttons>:

// Enable all of the buttons
void enable_all_buttons(void) {
 80007a0:	b580      	push	{r7, lr}
 80007a2:	b082      	sub	sp, #8
 80007a4:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 80007a6:	2301      	movs	r3, #1
 80007a8:	71fb      	strb	r3, [r7, #7]
 80007aa:	e006      	b.n	80007ba <enable_all_buttons+0x1a>
		enable_button(i);
 80007ac:	79fb      	ldrb	r3, [r7, #7]
 80007ae:	4618      	mov	r0, r3
 80007b0:	f7ff ff64 	bl	800067c <enable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 80007b4:	79fb      	ldrb	r3, [r7, #7]
 80007b6:	3301      	adds	r3, #1
 80007b8:	71fb      	strb	r3, [r7, #7]
 80007ba:	79fb      	ldrb	r3, [r7, #7]
 80007bc:	2b09      	cmp	r3, #9
 80007be:	d9f5      	bls.n	80007ac <enable_all_buttons+0xc>
	}
}
 80007c0:	bf00      	nop
 80007c2:	bf00      	nop
 80007c4:	3708      	adds	r7, #8
 80007c6:	46bd      	mov	sp, r7
 80007c8:	bd80      	pop	{r7, pc}

080007ca <disable_all_buttons>:

// Disable all of the buttons
void disable_all_buttons(void) {
 80007ca:	b580      	push	{r7, lr}
 80007cc:	b082      	sub	sp, #8
 80007ce:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 80007d0:	2301      	movs	r3, #1
 80007d2:	71fb      	strb	r3, [r7, #7]
 80007d4:	e006      	b.n	80007e4 <disable_all_buttons+0x1a>
		disable_button(i);
 80007d6:	79fb      	ldrb	r3, [r7, #7]
 80007d8:	4618      	mov	r0, r3
 80007da:	f7ff ff81 	bl	80006e0 <disable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 80007de:	79fb      	ldrb	r3, [r7, #7]
 80007e0:	3301      	adds	r3, #1
 80007e2:	71fb      	strb	r3, [r7, #7]
 80007e4:	79fb      	ldrb	r3, [r7, #7]
 80007e6:	2b09      	cmp	r3, #9
 80007e8:	d9f5      	bls.n	80007d6 <disable_all_buttons+0xc>
	}
}
 80007ea:	bf00      	nop
 80007ec:	bf00      	nop
 80007ee:	3708      	adds	r7, #8
 80007f0:	46bd      	mov	sp, r7
 80007f2:	bd80      	pop	{r7, pc}

080007f4 <update_buttons>:
		toggle_button(i);
	}
}

// Write the updated button configuration to the remote
void update_buttons(void) {
 80007f4:	b580      	push	{r7, lr}
 80007f6:	b084      	sub	sp, #16
 80007f8:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 80007fa:	23f2      	movs	r3, #242	; 0xf2
 80007fc:	713b      	strb	r3, [r7, #4]
 80007fe:	4b09      	ldr	r3, [pc, #36]	; (8000824 <update_buttons+0x30>)
 8000800:	781b      	ldrb	r3, [r3, #0]
 8000802:	717b      	strb	r3, [r7, #5]
 8000804:	4b08      	ldr	r3, [pc, #32]	; (8000828 <update_buttons+0x34>)
 8000806:	781b      	ldrb	r3, [r3, #0]
 8000808:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 800080a:	1d3a      	adds	r2, r7, #4
 800080c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000810:	9300      	str	r3, [sp, #0]
 8000812:	2303      	movs	r3, #3
 8000814:	21a0      	movs	r1, #160	; 0xa0
 8000816:	4805      	ldr	r0, [pc, #20]	; (800082c <update_buttons+0x38>)
 8000818:	f003 ff60 	bl	80046dc <HAL_I2C_Master_Transmit>
}
 800081c:	bf00      	nop
 800081e:	3708      	adds	r7, #8
 8000820:	46bd      	mov	sp, r7
 8000822:	bd80      	pop	{r7, pc}
 8000824:	20000000 	.word	0x20000000
 8000828:	20000001 	.word	0x20000001
 800082c:	20001540 	.word	0x20001540

08000830 <poll_buttons>:

// Poll buttons, returns the first pressed button
// or zero if no button is pressed
uint8_t poll_buttons(void) {
 8000830:	b580      	push	{r7, lr}
 8000832:	af00      	add	r7, sp, #0
	C1_HIGH();
 8000834:	2201      	movs	r2, #1
 8000836:	2180      	movs	r1, #128	; 0x80
 8000838:	483c      	ldr	r0, [pc, #240]	; (800092c <poll_buttons+0xfc>)
 800083a:	f003 fdf1 	bl	8004420 <HAL_GPIO_WritePin>
	C2_HIGH();
 800083e:	2201      	movs	r2, #1
 8000840:	2140      	movs	r1, #64	; 0x40
 8000842:	483a      	ldr	r0, [pc, #232]	; (800092c <poll_buttons+0xfc>)
 8000844:	f003 fdec 	bl	8004420 <HAL_GPIO_WritePin>
	C0_LOW();
 8000848:	2200      	movs	r2, #0
 800084a:	2140      	movs	r1, #64	; 0x40
 800084c:	4838      	ldr	r0, [pc, #224]	; (8000930 <poll_buttons+0x100>)
 800084e:	f003 fde7 	bl	8004420 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 1;
 8000852:	2108      	movs	r1, #8
 8000854:	4836      	ldr	r0, [pc, #216]	; (8000930 <poll_buttons+0x100>)
 8000856:	f003 fdcb 	bl	80043f0 <HAL_GPIO_ReadPin>
 800085a:	4603      	mov	r3, r0
 800085c:	2b00      	cmp	r3, #0
 800085e:	d101      	bne.n	8000864 <poll_buttons+0x34>
 8000860:	2301      	movs	r3, #1
 8000862:	e061      	b.n	8000928 <poll_buttons+0xf8>
	if (!R1_READ()) return 4;
 8000864:	2120      	movs	r1, #32
 8000866:	4832      	ldr	r0, [pc, #200]	; (8000930 <poll_buttons+0x100>)
 8000868:	f003 fdc2 	bl	80043f0 <HAL_GPIO_ReadPin>
 800086c:	4603      	mov	r3, r0
 800086e:	2b00      	cmp	r3, #0
 8000870:	d101      	bne.n	8000876 <poll_buttons+0x46>
 8000872:	2304      	movs	r3, #4
 8000874:	e058      	b.n	8000928 <poll_buttons+0xf8>
	if (!R2_READ()) return 7;
 8000876:	2110      	movs	r1, #16
 8000878:	482d      	ldr	r0, [pc, #180]	; (8000930 <poll_buttons+0x100>)
 800087a:	f003 fdb9 	bl	80043f0 <HAL_GPIO_ReadPin>
 800087e:	4603      	mov	r3, r0
 8000880:	2b00      	cmp	r3, #0
 8000882:	d101      	bne.n	8000888 <poll_buttons+0x58>
 8000884:	2307      	movs	r3, #7
 8000886:	e04f      	b.n	8000928 <poll_buttons+0xf8>
	C0_HIGH();
 8000888:	2201      	movs	r2, #1
 800088a:	2140      	movs	r1, #64	; 0x40
 800088c:	4828      	ldr	r0, [pc, #160]	; (8000930 <poll_buttons+0x100>)
 800088e:	f003 fdc7 	bl	8004420 <HAL_GPIO_WritePin>

	C1_LOW();
 8000892:	2200      	movs	r2, #0
 8000894:	2180      	movs	r1, #128	; 0x80
 8000896:	4825      	ldr	r0, [pc, #148]	; (800092c <poll_buttons+0xfc>)
 8000898:	f003 fdc2 	bl	8004420 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 2;
 800089c:	2108      	movs	r1, #8
 800089e:	4824      	ldr	r0, [pc, #144]	; (8000930 <poll_buttons+0x100>)
 80008a0:	f003 fda6 	bl	80043f0 <HAL_GPIO_ReadPin>
 80008a4:	4603      	mov	r3, r0
 80008a6:	2b00      	cmp	r3, #0
 80008a8:	d101      	bne.n	80008ae <poll_buttons+0x7e>
 80008aa:	2302      	movs	r3, #2
 80008ac:	e03c      	b.n	8000928 <poll_buttons+0xf8>
	if (!R1_READ()) return 5;
 80008ae:	2120      	movs	r1, #32
 80008b0:	481f      	ldr	r0, [pc, #124]	; (8000930 <poll_buttons+0x100>)
 80008b2:	f003 fd9d 	bl	80043f0 <HAL_GPIO_ReadPin>
 80008b6:	4603      	mov	r3, r0
 80008b8:	2b00      	cmp	r3, #0
 80008ba:	d101      	bne.n	80008c0 <poll_buttons+0x90>
 80008bc:	2305      	movs	r3, #5
 80008be:	e033      	b.n	8000928 <poll_buttons+0xf8>
	if (!R2_READ()) return 8;
 80008c0:	2110      	movs	r1, #16
 80008c2:	481b      	ldr	r0, [pc, #108]	; (8000930 <poll_buttons+0x100>)
 80008c4:	f003 fd94 	bl	80043f0 <HAL_GPIO_ReadPin>
 80008c8:	4603      	mov	r3, r0
 80008ca:	2b00      	cmp	r3, #0
 80008cc:	d101      	bne.n	80008d2 <poll_buttons+0xa2>
 80008ce:	2308      	movs	r3, #8
 80008d0:	e02a      	b.n	8000928 <poll_buttons+0xf8>
	C1_HIGH();
 80008d2:	2201      	movs	r2, #1
 80008d4:	2180      	movs	r1, #128	; 0x80
 80008d6:	4815      	ldr	r0, [pc, #84]	; (800092c <poll_buttons+0xfc>)
 80008d8:	f003 fda2 	bl	8004420 <HAL_GPIO_WritePin>

	C2_LOW();
 80008dc:	2200      	movs	r2, #0
 80008de:	2140      	movs	r1, #64	; 0x40
 80008e0:	4812      	ldr	r0, [pc, #72]	; (800092c <poll_buttons+0xfc>)
 80008e2:	f003 fd9d 	bl	8004420 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 3;
 80008e6:	2108      	movs	r1, #8
 80008e8:	4811      	ldr	r0, [pc, #68]	; (8000930 <poll_buttons+0x100>)
 80008ea:	f003 fd81 	bl	80043f0 <HAL_GPIO_ReadPin>
 80008ee:	4603      	mov	r3, r0
 80008f0:	2b00      	cmp	r3, #0
 80008f2:	d101      	bne.n	80008f8 <poll_buttons+0xc8>
 80008f4:	2303      	movs	r3, #3
 80008f6:	e017      	b.n	8000928 <poll_buttons+0xf8>
	if (!R1_READ()) return 6;
 80008f8:	2120      	movs	r1, #32
 80008fa:	480d      	ldr	r0, [pc, #52]	; (8000930 <poll_buttons+0x100>)
 80008fc:	f003 fd78 	bl	80043f0 <HAL_GPIO_ReadPin>
 8000900:	4603      	mov	r3, r0
 8000902:	2b00      	cmp	r3, #0
 8000904:	d101      	bne.n	800090a <poll_buttons+0xda>
 8000906:	2306      	movs	r3, #6
 8000908:	e00e      	b.n	8000928 <poll_buttons+0xf8>
	if (!R2_READ()) return 9;
 800090a:	2110      	movs	r1, #16
 800090c:	4808      	ldr	r0, [pc, #32]	; (8000930 <poll_buttons+0x100>)
 800090e:	f003 fd6f 	bl	80043f0 <HAL_GPIO_ReadPin>
 8000912:	4603      	mov	r3, r0
 8000914:	2b00      	cmp	r3, #0
 8000916:	d101      	bne.n	800091c <poll_buttons+0xec>
 8000918:	2309      	movs	r3, #9
 800091a:	e005      	b.n	8000928 <poll_buttons+0xf8>
	C2_HIGH();
 800091c:	2201      	movs	r2, #1
 800091e:	2140      	movs	r1, #64	; 0x40
 8000920:	4802      	ldr	r0, [pc, #8]	; (800092c <poll_buttons+0xfc>)
 8000922:	f003 fd7d 	bl	8004420 <HAL_GPIO_WritePin>

	return 0;
 8000926:	2300      	movs	r3, #0
}
 8000928:	4618      	mov	r0, r3
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40020000 	.word	0x40020000
 8000930:	40020400 	.word	0x40020400

08000934 <init_default_controller>:

extern UART_HandleTypeDef huart1;
extern Controller controller;
extern unsigned char UART1_rxBuffer[8192];

void init_default_controller() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b084      	sub	sp, #16
 8000938:	af00      	add	r7, sp, #0
	char device_number[3];
	char cmd_number[3];
	for (uint8_t i = 0; i < 18; ++i) {
 800093a:	2300      	movs	r3, #0
 800093c:	73fb      	strb	r3, [r7, #15]
 800093e:	e05f      	b.n	8000a00 <init_default_controller+0xcc>
		strcpy(controller.devices[i].name, "Device ");
 8000940:	7bfb      	ldrb	r3, [r7, #15]
 8000942:	f241 022c 	movw	r2, #4140	; 0x102c
 8000946:	fb02 f303 	mul.w	r3, r2, r3
 800094a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800094e:	4a33      	ldr	r2, [pc, #204]	; (8000a1c <init_default_controller+0xe8>)
 8000950:	4413      	add	r3, r2
 8000952:	4933      	ldr	r1, [pc, #204]	; (8000a20 <init_default_controller+0xec>)
 8000954:	461a      	mov	r2, r3
 8000956:	460b      	mov	r3, r1
 8000958:	cb03      	ldmia	r3!, {r0, r1}
 800095a:	6010      	str	r0, [r2, #0]
 800095c:	6051      	str	r1, [r2, #4]
		itoa(i + 1, device_number, 10);
 800095e:	7bfb      	ldrb	r3, [r7, #15]
 8000960:	3301      	adds	r3, #1
 8000962:	f107 0108 	add.w	r1, r7, #8
 8000966:	220a      	movs	r2, #10
 8000968:	4618      	mov	r0, r3
 800096a:	f008 f8e9 	bl	8008b40 <itoa>
		strcat(controller.devices[i].name, device_number);
 800096e:	7bfb      	ldrb	r3, [r7, #15]
 8000970:	f241 022c 	movw	r2, #4140	; 0x102c
 8000974:	fb02 f303 	mul.w	r3, r2, r3
 8000978:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 800097c:	4a27      	ldr	r2, [pc, #156]	; (8000a1c <init_default_controller+0xe8>)
 800097e:	4413      	add	r3, r2
 8000980:	f107 0208 	add.w	r2, r7, #8
 8000984:	4611      	mov	r1, r2
 8000986:	4618      	mov	r0, r3
 8000988:	f008 f8e4 	bl	8008b54 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 800098c:	2300      	movs	r3, #0
 800098e:	73bb      	strb	r3, [r7, #14]
 8000990:	e030      	b.n	80009f4 <init_default_controller+0xc0>
			strcpy(controller.devices[i].commands[j].desc, "Command ");
 8000992:	7bfb      	ldrb	r3, [r7, #15]
 8000994:	7bba      	ldrb	r2, [r7, #14]
 8000996:	21ac      	movs	r1, #172	; 0xac
 8000998:	fb01 f202 	mul.w	r2, r1, r2
 800099c:	f241 012c 	movw	r1, #4140	; 0x102c
 80009a0:	fb01 f303 	mul.w	r3, r1, r3
 80009a4:	4413      	add	r3, r2
 80009a6:	33a0      	adds	r3, #160	; 0xa0
 80009a8:	4a1c      	ldr	r2, [pc, #112]	; (8000a1c <init_default_controller+0xe8>)
 80009aa:	4413      	add	r3, r2
 80009ac:	491d      	ldr	r1, [pc, #116]	; (8000a24 <init_default_controller+0xf0>)
 80009ae:	461a      	mov	r2, r3
 80009b0:	460b      	mov	r3, r1
 80009b2:	cb03      	ldmia	r3!, {r0, r1}
 80009b4:	6010      	str	r0, [r2, #0]
 80009b6:	6051      	str	r1, [r2, #4]
 80009b8:	781b      	ldrb	r3, [r3, #0]
 80009ba:	7213      	strb	r3, [r2, #8]
			itoa(j + 1, cmd_number, 10);
 80009bc:	7bbb      	ldrb	r3, [r7, #14]
 80009be:	3301      	adds	r3, #1
 80009c0:	1d39      	adds	r1, r7, #4
 80009c2:	220a      	movs	r2, #10
 80009c4:	4618      	mov	r0, r3
 80009c6:	f008 f8bb 	bl	8008b40 <itoa>
			strcat(controller.devices[i].commands[j].desc, cmd_number);
 80009ca:	7bfb      	ldrb	r3, [r7, #15]
 80009cc:	7bba      	ldrb	r2, [r7, #14]
 80009ce:	21ac      	movs	r1, #172	; 0xac
 80009d0:	fb01 f202 	mul.w	r2, r1, r2
 80009d4:	f241 012c 	movw	r1, #4140	; 0x102c
 80009d8:	fb01 f303 	mul.w	r3, r1, r3
 80009dc:	4413      	add	r3, r2
 80009de:	33a0      	adds	r3, #160	; 0xa0
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <init_default_controller+0xe8>)
 80009e2:	4413      	add	r3, r2
 80009e4:	1d3a      	adds	r2, r7, #4
 80009e6:	4611      	mov	r1, r2
 80009e8:	4618      	mov	r0, r3
 80009ea:	f008 f8b3 	bl	8008b54 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 80009ee:	7bbb      	ldrb	r3, [r7, #14]
 80009f0:	3301      	adds	r3, #1
 80009f2:	73bb      	strb	r3, [r7, #14]
 80009f4:	7bbb      	ldrb	r3, [r7, #14]
 80009f6:	2b17      	cmp	r3, #23
 80009f8:	d9cb      	bls.n	8000992 <init_default_controller+0x5e>
	for (uint8_t i = 0; i < 18; ++i) {
 80009fa:	7bfb      	ldrb	r3, [r7, #15]
 80009fc:	3301      	adds	r3, #1
 80009fe:	73fb      	strb	r3, [r7, #15]
 8000a00:	7bfb      	ldrb	r3, [r7, #15]
 8000a02:	2b11      	cmp	r3, #17
 8000a04:	d99c      	bls.n	8000940 <init_default_controller+0xc>
		}
	}
	controller.num_devices = 18;
 8000a06:	4b05      	ldr	r3, [pc, #20]	; (8000a1c <init_default_controller+0xe8>)
 8000a08:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8000a0c:	2212      	movs	r2, #18
 8000a0e:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
}
 8000a12:	bf00      	nop
 8000a14:	3710      	adds	r7, #16
 8000a16:	46bd      	mov	sp, r7
 8000a18:	bd80      	pop	{r7, pc}
 8000a1a:	bf00      	nop
 8000a1c:	200017f0 	.word	0x200017f0
 8000a20:	08008d40 	.word	0x08008d40
 8000a24:	08008d48 	.word	0x08008d48

08000a28 <init_xbee_communication>:

void init_xbee_communication() {
 8000a28:	b580      	push	{r7, lr}
 8000a2a:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 8000a2c:	2201      	movs	r2, #1
 8000a2e:	4903      	ldr	r1, [pc, #12]	; (8000a3c <init_xbee_communication+0x14>)
 8000a30:	4803      	ldr	r0, [pc, #12]	; (8000a40 <init_xbee_communication+0x18>)
 8000a32:	f007 f8a6 	bl	8007b82 <HAL_UART_Receive_IT>
}
 8000a36:	bf00      	nop
 8000a38:	bd80      	pop	{r7, pc}
 8000a3a:	bf00      	nop
 8000a3c:	20013b0c 	.word	0x20013b0c
 8000a40:	200017a8 	.word	0x200017a8

08000a44 <print_device>:
	itoa(n,buf,10);
	HAL_UART_Transmit(&huart1, (uint8_t*)buf, 1, 0xFFFF);
	HAL_UART_Transmit(&huart1, (uint8_t*)deliminator, 1, 0xFFFF);
}

void print_device(uint8_t device) {
 8000a44:	b590      	push	{r4, r7, lr}
 8000a46:	b083      	sub	sp, #12
 8000a48:	af00      	add	r7, sp, #0
 8000a4a:	4603      	mov	r3, r0
 8000a4c:	71fb      	strb	r3, [r7, #7]
	HAL_UART_Transmit(&huart1, (uint8_t*)(controller.devices[device].name),strlen(controller.devices[device].name),0xFFFF);
 8000a4e:	79fb      	ldrb	r3, [r7, #7]
 8000a50:	f241 022c 	movw	r2, #4140	; 0x102c
 8000a54:	fb02 f303 	mul.w	r3, r2, r3
 8000a58:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a5c:	4a10      	ldr	r2, [pc, #64]	; (8000aa0 <print_device+0x5c>)
 8000a5e:	189c      	adds	r4, r3, r2
 8000a60:	79fb      	ldrb	r3, [r7, #7]
 8000a62:	f241 022c 	movw	r2, #4140	; 0x102c
 8000a66:	fb02 f303 	mul.w	r3, r2, r3
 8000a6a:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000a6e:	4a0c      	ldr	r2, [pc, #48]	; (8000aa0 <print_device+0x5c>)
 8000a70:	4413      	add	r3, r2
 8000a72:	4618      	mov	r0, r3
 8000a74:	f7ff fbb8 	bl	80001e8 <strlen>
 8000a78:	4603      	mov	r3, r0
 8000a7a:	b29a      	uxth	r2, r3
 8000a7c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a80:	4621      	mov	r1, r4
 8000a82:	4808      	ldr	r0, [pc, #32]	; (8000aa4 <print_device+0x60>)
 8000a84:	f006 ffeb 	bl	8007a5e <HAL_UART_Transmit>
	HAL_UART_Transmit(&huart1, (uint8_t*)deliminator, 1, 0xFFFF);
 8000a88:	4b07      	ldr	r3, [pc, #28]	; (8000aa8 <print_device+0x64>)
 8000a8a:	6819      	ldr	r1, [r3, #0]
 8000a8c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8000a90:	2201      	movs	r2, #1
 8000a92:	4804      	ldr	r0, [pc, #16]	; (8000aa4 <print_device+0x60>)
 8000a94:	f006 ffe3 	bl	8007a5e <HAL_UART_Transmit>
}
 8000a98:	bf00      	nop
 8000a9a:	370c      	adds	r7, #12
 8000a9c:	46bd      	mov	sp, r7
 8000a9e:	bd90      	pop	{r4, r7, pc}
 8000aa0:	200017f0 	.word	0x200017f0
 8000aa4:	200017a8 	.word	0x200017a8
 8000aa8:	20000004 	.word	0x20000004

08000aac <import_device>:
 * ...
 * Number of Touch Commands
 * Command #1 Long Name, Short Name, Data
 * Command #2 Long Name, Short Name, Data
 */
void import_device(uint8_t device) {
 8000aac:	b5b0      	push	{r4, r5, r7, lr}
 8000aae:	b086      	sub	sp, #24
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	char name_buf[11];

	for (uint8_t i = 0; i < 10; ++i) {
 8000ab6:	2300      	movs	r3, #0
 8000ab8:	75fb      	strb	r3, [r7, #23]
 8000aba:	e00a      	b.n	8000ad2 <import_device+0x26>
		name_buf[i] = UART1_rxBuffer[i];
 8000abc:	7dfa      	ldrb	r2, [r7, #23]
 8000abe:	7dfb      	ldrb	r3, [r7, #23]
 8000ac0:	4933      	ldr	r1, [pc, #204]	; (8000b90 <import_device+0xe4>)
 8000ac2:	5c8a      	ldrb	r2, [r1, r2]
 8000ac4:	3318      	adds	r3, #24
 8000ac6:	443b      	add	r3, r7
 8000ac8:	f803 2c10 	strb.w	r2, [r3, #-16]
	for (uint8_t i = 0; i < 10; ++i) {
 8000acc:	7dfb      	ldrb	r3, [r7, #23]
 8000ace:	3301      	adds	r3, #1
 8000ad0:	75fb      	strb	r3, [r7, #23]
 8000ad2:	7dfb      	ldrb	r3, [r7, #23]
 8000ad4:	2b09      	cmp	r3, #9
 8000ad6:	d9f1      	bls.n	8000abc <import_device+0x10>
	}
	name_buf[10] = '\0';
 8000ad8:	2300      	movs	r3, #0
 8000ada:	74bb      	strb	r3, [r7, #18]
	rename_device(name_buf, device);
 8000adc:	79fa      	ldrb	r2, [r7, #7]
 8000ade:	f107 0308 	add.w	r3, r7, #8
 8000ae2:	4611      	mov	r1, r2
 8000ae4:	4618      	mov	r0, r3
 8000ae6:	f000 f857 	bl	8000b98 <rename_device>
	for (uint8_t i = 0; i < 24; ++i) {
 8000aea:	2300      	movs	r3, #0
 8000aec:	75bb      	strb	r3, [r7, #22]
 8000aee:	e047      	b.n	8000b80 <import_device+0xd4>
		for (uint8_t j = 0; j < 10; ++j) {
 8000af0:	2300      	movs	r3, #0
 8000af2:	757b      	strb	r3, [r7, #21]
 8000af4:	e011      	b.n	8000b1a <import_device+0x6e>
			name_buf[j] = UART1_rxBuffer[11 + 92*i + j];
 8000af6:	7dbb      	ldrb	r3, [r7, #22]
 8000af8:	225c      	movs	r2, #92	; 0x5c
 8000afa:	fb02 f303 	mul.w	r3, r2, r3
 8000afe:	f103 020b 	add.w	r2, r3, #11
 8000b02:	7d7b      	ldrb	r3, [r7, #21]
 8000b04:	441a      	add	r2, r3
 8000b06:	7d7b      	ldrb	r3, [r7, #21]
 8000b08:	4921      	ldr	r1, [pc, #132]	; (8000b90 <import_device+0xe4>)
 8000b0a:	5c8a      	ldrb	r2, [r1, r2]
 8000b0c:	3318      	adds	r3, #24
 8000b0e:	443b      	add	r3, r7
 8000b10:	f803 2c10 	strb.w	r2, [r3, #-16]
		for (uint8_t j = 0; j < 10; ++j) {
 8000b14:	7d7b      	ldrb	r3, [r7, #21]
 8000b16:	3301      	adds	r3, #1
 8000b18:	757b      	strb	r3, [r7, #21]
 8000b1a:	7d7b      	ldrb	r3, [r7, #21]
 8000b1c:	2b09      	cmp	r3, #9
 8000b1e:	d9ea      	bls.n	8000af6 <import_device+0x4a>
		}
		name_buf[10] = '\0';
 8000b20:	2300      	movs	r3, #0
 8000b22:	74bb      	strb	r3, [r7, #18]
		rename_command(name_buf, device, i);
 8000b24:	7dba      	ldrb	r2, [r7, #22]
 8000b26:	79f9      	ldrb	r1, [r7, #7]
 8000b28:	f107 0308 	add.w	r3, r7, #8
 8000b2c:	4618      	mov	r0, r3
 8000b2e:	f000 f84d 	bl	8000bcc <rename_command>
		for (uint8_t j = 0; j < 80; ++j) {
 8000b32:	2300      	movs	r3, #0
 8000b34:	753b      	strb	r3, [r7, #20]
 8000b36:	e01d      	b.n	8000b74 <import_device+0xc8>
			controller.devices[device].commands[i].Data[j] = UART1_rxBuffer[22 + 92*i + j];
 8000b38:	7dbb      	ldrb	r3, [r7, #22]
 8000b3a:	225c      	movs	r2, #92	; 0x5c
 8000b3c:	fb02 f303 	mul.w	r3, r2, r3
 8000b40:	f103 0216 	add.w	r2, r3, #22
 8000b44:	7d3b      	ldrb	r3, [r7, #20]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a11      	ldr	r2, [pc, #68]	; (8000b90 <import_device+0xe4>)
 8000b4a:	5cd0      	ldrb	r0, [r2, r3]
 8000b4c:	79fa      	ldrb	r2, [r7, #7]
 8000b4e:	7db9      	ldrb	r1, [r7, #22]
 8000b50:	7d3b      	ldrb	r3, [r7, #20]
 8000b52:	b285      	uxth	r5, r0
 8000b54:	480f      	ldr	r0, [pc, #60]	; (8000b94 <import_device+0xe8>)
 8000b56:	2456      	movs	r4, #86	; 0x56
 8000b58:	fb04 f101 	mul.w	r1, r4, r1
 8000b5c:	f640 0416 	movw	r4, #2070	; 0x816
 8000b60:	fb04 f202 	mul.w	r2, r4, r2
 8000b64:	440a      	add	r2, r1
 8000b66:	4413      	add	r3, r2
 8000b68:	462a      	mov	r2, r5
 8000b6a:	f820 2013 	strh.w	r2, [r0, r3, lsl #1]
		for (uint8_t j = 0; j < 80; ++j) {
 8000b6e:	7d3b      	ldrb	r3, [r7, #20]
 8000b70:	3301      	adds	r3, #1
 8000b72:	753b      	strb	r3, [r7, #20]
 8000b74:	7d3b      	ldrb	r3, [r7, #20]
 8000b76:	2b4f      	cmp	r3, #79	; 0x4f
 8000b78:	d9de      	bls.n	8000b38 <import_device+0x8c>
	for (uint8_t i = 0; i < 24; ++i) {
 8000b7a:	7dbb      	ldrb	r3, [r7, #22]
 8000b7c:	3301      	adds	r3, #1
 8000b7e:	75bb      	strb	r3, [r7, #22]
 8000b80:	7dbb      	ldrb	r3, [r7, #22]
 8000b82:	2b17      	cmp	r3, #23
 8000b84:	d9b4      	bls.n	8000af0 <import_device+0x44>
		}
	}
}
 8000b86:	bf00      	nop
 8000b88:	bf00      	nop
 8000b8a:	3718      	adds	r7, #24
 8000b8c:	46bd      	mov	sp, r7
 8000b8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000b90:	20013b0c 	.word	0x20013b0c
 8000b94:	200017f0 	.word	0x200017f0

08000b98 <rename_device>:

void rename_device(char* new_name, uint8_t device) {
 8000b98:	b580      	push	{r7, lr}
 8000b9a:	b082      	sub	sp, #8
 8000b9c:	af00      	add	r7, sp, #0
 8000b9e:	6078      	str	r0, [r7, #4]
 8000ba0:	460b      	mov	r3, r1
 8000ba2:	70fb      	strb	r3, [r7, #3]
	strcpy(controller.devices[device].name, new_name);
 8000ba4:	78fb      	ldrb	r3, [r7, #3]
 8000ba6:	f241 022c 	movw	r2, #4140	; 0x102c
 8000baa:	fb02 f303 	mul.w	r3, r2, r3
 8000bae:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000bb2:	4a05      	ldr	r2, [pc, #20]	; (8000bc8 <rename_device+0x30>)
 8000bb4:	4413      	add	r3, r2
 8000bb6:	6879      	ldr	r1, [r7, #4]
 8000bb8:	4618      	mov	r0, r3
 8000bba:	f007 ffda 	bl	8008b72 <strcpy>
}
 8000bbe:	bf00      	nop
 8000bc0:	3708      	adds	r7, #8
 8000bc2:	46bd      	mov	sp, r7
 8000bc4:	bd80      	pop	{r7, pc}
 8000bc6:	bf00      	nop
 8000bc8:	200017f0 	.word	0x200017f0

08000bcc <rename_command>:
//}

//void add_command();
//void set_command();
//void delete_command();
void rename_command(char* new_name, uint8_t device, uint8_t command) {
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
 8000bd4:	460b      	mov	r3, r1
 8000bd6:	70fb      	strb	r3, [r7, #3]
 8000bd8:	4613      	mov	r3, r2
 8000bda:	70bb      	strb	r3, [r7, #2]
	strcpy(controller.devices[device].commands[command].desc, new_name);
 8000bdc:	78fb      	ldrb	r3, [r7, #3]
 8000bde:	78ba      	ldrb	r2, [r7, #2]
 8000be0:	21ac      	movs	r1, #172	; 0xac
 8000be2:	fb01 f202 	mul.w	r2, r1, r2
 8000be6:	f241 012c 	movw	r1, #4140	; 0x102c
 8000bea:	fb01 f303 	mul.w	r3, r1, r3
 8000bee:	4413      	add	r3, r2
 8000bf0:	33a0      	adds	r3, #160	; 0xa0
 8000bf2:	4a05      	ldr	r2, [pc, #20]	; (8000c08 <rename_command+0x3c>)
 8000bf4:	4413      	add	r3, r2
 8000bf6:	6879      	ldr	r1, [r7, #4]
 8000bf8:	4618      	mov	r0, r3
 8000bfa:	f007 ffba 	bl	8008b72 <strcpy>
}
 8000bfe:	bf00      	nop
 8000c00:	3708      	adds	r7, #8
 8000c02:	46bd      	mov	sp, r7
 8000c04:	bd80      	pop	{r7, pc}
 8000c06:	bf00      	nop
 8000c08:	200017f0 	.word	0x200017f0

08000c0c <export_configuration>:
 * Command #2 Name, Data
 * (blank line)
 * Device #2 Name
 * ...
*/
void export_configuration() {
 8000c0c:	b480      	push	{r7}
 8000c0e:	b083      	sub	sp, #12
 8000c10:	af00      	add	r7, sp, #0
	for (uint8_t i = 0; i < controller.num_devices; ++i) {
 8000c12:	2300      	movs	r3, #0
 8000c14:	71fb      	strb	r3, [r7, #7]
 8000c16:	e002      	b.n	8000c1e <export_configuration+0x12>
 8000c18:	79fb      	ldrb	r3, [r7, #7]
 8000c1a:	3301      	adds	r3, #1
 8000c1c:	71fb      	strb	r3, [r7, #7]
 8000c1e:	4b07      	ldr	r3, [pc, #28]	; (8000c3c <export_configuration+0x30>)
 8000c20:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 8000c24:	f893 3318 	ldrb.w	r3, [r3, #792]	; 0x318
 8000c28:	79fa      	ldrb	r2, [r7, #7]
 8000c2a:	429a      	cmp	r2, r3
 8000c2c:	d3f4      	bcc.n	8000c18 <export_configuration+0xc>
		//export_device(i);
	}
}
 8000c2e:	bf00      	nop
 8000c30:	bf00      	nop
 8000c32:	370c      	adds	r7, #12
 8000c34:	46bd      	mov	sp, r7
 8000c36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c3a:	4770      	bx	lr
 8000c3c:	200017f0 	.word	0x200017f0

08000c40 <poll_accel>:
int16_t xyz_old[3];
int16_t xyz[3];
int cycles_still = 0;


void poll_accel(){
 8000c40:	b580      	push	{r7, lr}
 8000c42:	b084      	sub	sp, #16
 8000c44:	af02      	add	r7, sp, #8
	 buff[0] =  (uint8_t)X;
 8000c46:	4b24      	ldr	r3, [pc, #144]	; (8000cd8 <poll_accel+0x98>)
 8000c48:	2228      	movs	r2, #40	; 0x28
 8000c4a:	701a      	strb	r2, [r3, #0]
	buff[0] |= 1 << 7;
 8000c4c:	4b22      	ldr	r3, [pc, #136]	; (8000cd8 <poll_accel+0x98>)
 8000c4e:	781b      	ldrb	r3, [r3, #0]
 8000c50:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000c54:	b2da      	uxtb	r2, r3
 8000c56:	4b20      	ldr	r3, [pc, #128]	; (8000cd8 <poll_accel+0x98>)
 8000c58:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef transmitStatus = HAL_I2C_Master_Transmit(&hi2c3, ACC_WRITE, &buff[0], 1, 1000);
 8000c5a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c5e:	9300      	str	r3, [sp, #0]
 8000c60:	2301      	movs	r3, #1
 8000c62:	4a1d      	ldr	r2, [pc, #116]	; (8000cd8 <poll_accel+0x98>)
 8000c64:	2132      	movs	r1, #50	; 0x32
 8000c66:	481d      	ldr	r0, [pc, #116]	; (8000cdc <poll_accel+0x9c>)
 8000c68:	f003 fd38 	bl	80046dc <HAL_I2C_Master_Transmit>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef receiveStatus = HAL_I2C_Master_Receive(&hi2c3, ACC_READ, &buff[0], 6, 1000);
 8000c70:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000c74:	9300      	str	r3, [sp, #0]
 8000c76:	2306      	movs	r3, #6
 8000c78:	4a17      	ldr	r2, [pc, #92]	; (8000cd8 <poll_accel+0x98>)
 8000c7a:	2133      	movs	r1, #51	; 0x33
 8000c7c:	4817      	ldr	r0, [pc, #92]	; (8000cdc <poll_accel+0x9c>)
 8000c7e:	f003 fe2b 	bl	80048d8 <HAL_I2C_Master_Receive>
 8000c82:	4603      	mov	r3, r0
 8000c84:	71bb      	strb	r3, [r7, #6]

	int16_t x = ((int16_t) buff[1] << 8) | (buff[0]);
 8000c86:	4b14      	ldr	r3, [pc, #80]	; (8000cd8 <poll_accel+0x98>)
 8000c88:	785b      	ldrb	r3, [r3, #1]
 8000c8a:	021b      	lsls	r3, r3, #8
 8000c8c:	b21a      	sxth	r2, r3
 8000c8e:	4b12      	ldr	r3, [pc, #72]	; (8000cd8 <poll_accel+0x98>)
 8000c90:	781b      	ldrb	r3, [r3, #0]
 8000c92:	b21b      	sxth	r3, r3
 8000c94:	4313      	orrs	r3, r2
 8000c96:	80bb      	strh	r3, [r7, #4]
	int16_t y = ((int16_t) buff[3] << 8) | (buff[2]);
 8000c98:	4b0f      	ldr	r3, [pc, #60]	; (8000cd8 <poll_accel+0x98>)
 8000c9a:	78db      	ldrb	r3, [r3, #3]
 8000c9c:	021b      	lsls	r3, r3, #8
 8000c9e:	b21a      	sxth	r2, r3
 8000ca0:	4b0d      	ldr	r3, [pc, #52]	; (8000cd8 <poll_accel+0x98>)
 8000ca2:	789b      	ldrb	r3, [r3, #2]
 8000ca4:	b21b      	sxth	r3, r3
 8000ca6:	4313      	orrs	r3, r2
 8000ca8:	807b      	strh	r3, [r7, #2]
	int16_t z = ((int16_t) buff[5] << 8) | (buff[4]);
 8000caa:	4b0b      	ldr	r3, [pc, #44]	; (8000cd8 <poll_accel+0x98>)
 8000cac:	795b      	ldrb	r3, [r3, #5]
 8000cae:	021b      	lsls	r3, r3, #8
 8000cb0:	b21a      	sxth	r2, r3
 8000cb2:	4b09      	ldr	r3, [pc, #36]	; (8000cd8 <poll_accel+0x98>)
 8000cb4:	791b      	ldrb	r3, [r3, #4]
 8000cb6:	b21b      	sxth	r3, r3
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	803b      	strh	r3, [r7, #0]
	 xyz[0] = x;
 8000cbc:	4a08      	ldr	r2, [pc, #32]	; (8000ce0 <poll_accel+0xa0>)
 8000cbe:	88bb      	ldrh	r3, [r7, #4]
 8000cc0:	8013      	strh	r3, [r2, #0]
	 xyz[1] = y;
 8000cc2:	4a07      	ldr	r2, [pc, #28]	; (8000ce0 <poll_accel+0xa0>)
 8000cc4:	887b      	ldrh	r3, [r7, #2]
 8000cc6:	8053      	strh	r3, [r2, #2]
	 xyz[2] = z;
 8000cc8:	4a05      	ldr	r2, [pc, #20]	; (8000ce0 <poll_accel+0xa0>)
 8000cca:	883b      	ldrh	r3, [r7, #0]
 8000ccc:	8093      	strh	r3, [r2, #4]
}
 8000cce:	bf00      	nop
 8000cd0:	3708      	adds	r7, #8
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	bd80      	pop	{r7, pc}
 8000cd6:	bf00      	nop
 8000cd8:	200014d8 	.word	0x200014d8
 8000cdc:	20001594 	.word	0x20001594
 8000ce0:	200014ec 	.word	0x200014ec

08000ce4 <accel_init>:

void accel_init(){
 8000ce4:	b580      	push	{r7, lr}
 8000ce6:	b084      	sub	sp, #16
 8000ce8:	af02      	add	r7, sp, #8
	 buff[0] = (uint8_t)CR1;
 8000cea:	4b1c      	ldr	r3, [pc, #112]	; (8000d5c <accel_init+0x78>)
 8000cec:	2220      	movs	r2, #32
 8000cee:	701a      	strb	r2, [r3, #0]
	  buff[1] = (uint8_t)CR1_VAL;
 8000cf0:	4b1a      	ldr	r3, [pc, #104]	; (8000d5c <accel_init+0x78>)
 8000cf2:	223f      	movs	r2, #63	; 0x3f
 8000cf4:	705a      	strb	r2, [r3, #1]
	  HAL_StatusTypeDef tStat = HAL_I2C_Master_Transmit(&hi2c3, ACC_WRITE, &buff[0], 2, 1000);
 8000cf6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000cfa:	9300      	str	r3, [sp, #0]
 8000cfc:	2302      	movs	r3, #2
 8000cfe:	4a17      	ldr	r2, [pc, #92]	; (8000d5c <accel_init+0x78>)
 8000d00:	2132      	movs	r1, #50	; 0x32
 8000d02:	4817      	ldr	r0, [pc, #92]	; (8000d60 <accel_init+0x7c>)
 8000d04:	f003 fcea 	bl	80046dc <HAL_I2C_Master_Transmit>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	71fb      	strb	r3, [r7, #7]
	  HAL_StatusTypeDef rStat = HAL_I2C_Master_Receive(&hi2c3, ACC_READ, &buff[0], 1, 1000);
 8000d0c:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d10:	9300      	str	r3, [sp, #0]
 8000d12:	2301      	movs	r3, #1
 8000d14:	4a11      	ldr	r2, [pc, #68]	; (8000d5c <accel_init+0x78>)
 8000d16:	2133      	movs	r1, #51	; 0x33
 8000d18:	4811      	ldr	r0, [pc, #68]	; (8000d60 <accel_init+0x7c>)
 8000d1a:	f003 fddd 	bl	80048d8 <HAL_I2C_Master_Receive>
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71bb      	strb	r3, [r7, #6]

	  buff[0] = (uint8_t)CR4;
 8000d22:	4b0e      	ldr	r3, [pc, #56]	; (8000d5c <accel_init+0x78>)
 8000d24:	2223      	movs	r2, #35	; 0x23
 8000d26:	701a      	strb	r2, [r3, #0]
	  	  buff[1] = (uint8_t)CR4_VAL;
 8000d28:	4b0c      	ldr	r3, [pc, #48]	; (8000d5c <accel_init+0x78>)
 8000d2a:	2208      	movs	r2, #8
 8000d2c:	705a      	strb	r2, [r3, #1]
	  	  HAL_I2C_Master_Transmit(&hi2c3, ACC_WRITE, &buff[0], 2, 1000);
 8000d2e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d32:	9300      	str	r3, [sp, #0]
 8000d34:	2302      	movs	r3, #2
 8000d36:	4a09      	ldr	r2, [pc, #36]	; (8000d5c <accel_init+0x78>)
 8000d38:	2132      	movs	r1, #50	; 0x32
 8000d3a:	4809      	ldr	r0, [pc, #36]	; (8000d60 <accel_init+0x7c>)
 8000d3c:	f003 fcce 	bl	80046dc <HAL_I2C_Master_Transmit>
	  	  HAL_I2C_Master_Receive(&hi2c3, ACC_READ, &buff[0], 1, 1000);
 8000d40:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000d44:	9300      	str	r3, [sp, #0]
 8000d46:	2301      	movs	r3, #1
 8000d48:	4a04      	ldr	r2, [pc, #16]	; (8000d5c <accel_init+0x78>)
 8000d4a:	2133      	movs	r1, #51	; 0x33
 8000d4c:	4804      	ldr	r0, [pc, #16]	; (8000d60 <accel_init+0x7c>)
 8000d4e:	f003 fdc3 	bl	80048d8 <HAL_I2C_Master_Receive>
}
 8000d52:	bf00      	nop
 8000d54:	3708      	adds	r7, #8
 8000d56:	46bd      	mov	sp, r7
 8000d58:	bd80      	pop	{r7, pc}
 8000d5a:	bf00      	nop
 8000d5c:	200014d8 	.word	0x200014d8
 8000d60:	20001594 	.word	0x20001594

08000d64 <AccelInit>:
void AccelInit(){
 8000d64:	b580      	push	{r7, lr}
 8000d66:	af00      	add	r7, sp, #0
    accel_init();
 8000d68:	f7ff ffbc 	bl	8000ce4 <accel_init>
    poll_accel();
 8000d6c:	f7ff ff68 	bl	8000c40 <poll_accel>
    poll_accel();
 8000d70:	f7ff ff66 	bl	8000c40 <poll_accel>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}

08000d78 <resetCounter>:
void resetCounter(){
 8000d78:	b480      	push	{r7}
 8000d7a:	af00      	add	r7, sp, #0
    cycles_still = 0;
 8000d7c:	4b03      	ldr	r3, [pc, #12]	; (8000d8c <resetCounter+0x14>)
 8000d7e:	2200      	movs	r2, #0
 8000d80:	601a      	str	r2, [r3, #0]
}
 8000d82:	bf00      	nop
 8000d84:	46bd      	mov	sp, r7
 8000d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d8a:	4770      	bx	lr
 8000d8c:	200014f4 	.word	0x200014f4

08000d90 <poll>:

int poll(){
 8000d90:	b580      	push	{r7, lr}
 8000d92:	af00      	add	r7, sp, #0
    if(!Awake){
 8000d94:	4b34      	ldr	r3, [pc, #208]	; (8000e68 <poll+0xd8>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	2b00      	cmp	r3, #0
 8000d9a:	d125      	bne.n	8000de8 <poll+0x58>
	  		poll_accel();
 8000d9c:	f7ff ff50 	bl	8000c40 <poll_accel>
	  		 if ((abs(xyz[2] - xyz_old[2]) > ONthreshold)){
 8000da0:	4b32      	ldr	r3, [pc, #200]	; (8000e6c <poll+0xdc>)
 8000da2:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000da6:	461a      	mov	r2, r3
 8000da8:	4b31      	ldr	r3, [pc, #196]	; (8000e70 <poll+0xe0>)
 8000daa:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dae:	1ad3      	subs	r3, r2, r3
 8000db0:	2b00      	cmp	r3, #0
 8000db2:	bfb8      	it	lt
 8000db4:	425b      	neglt	r3, r3
 8000db6:	f240 22bd 	movw	r2, #701	; 0x2bd
 8000dba:	4293      	cmp	r3, r2
 8000dbc:	dd02      	ble.n	8000dc4 <poll+0x34>
	  			Awake = 1;
 8000dbe:	4b2a      	ldr	r3, [pc, #168]	; (8000e68 <poll+0xd8>)
 8000dc0:	2201      	movs	r2, #1
 8000dc2:	601a      	str	r2, [r3, #0]
	  		 }
	  		 xyz_old[0] = xyz[0];
 8000dc4:	4b29      	ldr	r3, [pc, #164]	; (8000e6c <poll+0xdc>)
 8000dc6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000dca:	4b29      	ldr	r3, [pc, #164]	; (8000e70 <poll+0xe0>)
 8000dcc:	801a      	strh	r2, [r3, #0]
	  		 xyz_old[1] = xyz[1];
 8000dce:	4b27      	ldr	r3, [pc, #156]	; (8000e6c <poll+0xdc>)
 8000dd0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000dd4:	4b26      	ldr	r3, [pc, #152]	; (8000e70 <poll+0xe0>)
 8000dd6:	805a      	strh	r2, [r3, #2]
	  		 xyz_old[2] = xyz[2];
 8000dd8:	4b24      	ldr	r3, [pc, #144]	; (8000e6c <poll+0xdc>)
 8000dda:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000dde:	4b24      	ldr	r3, [pc, #144]	; (8000e70 <poll+0xe0>)
 8000de0:	809a      	strh	r2, [r3, #4]
	  		 resetCounter();
 8000de2:	f7ff ffc9 	bl	8000d78 <resetCounter>
 8000de6:	e03b      	b.n	8000e60 <poll+0xd0>
	  	}
    else{
        poll_accel();
 8000de8:	f7ff ff2a 	bl	8000c40 <poll_accel>
        if ((abs(xyz[2] - xyz_old[2]) < OFFthreshold)){
 8000dec:	4b1f      	ldr	r3, [pc, #124]	; (8000e6c <poll+0xdc>)
 8000dee:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000df2:	461a      	mov	r2, r3
 8000df4:	4b1e      	ldr	r3, [pc, #120]	; (8000e70 <poll+0xe0>)
 8000df6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000dfa:	1ad3      	subs	r3, r2, r3
 8000dfc:	4a1d      	ldr	r2, [pc, #116]	; (8000e74 <poll+0xe4>)
 8000dfe:	4293      	cmp	r3, r2
 8000e00:	db1c      	blt.n	8000e3c <poll+0xac>
 8000e02:	4b1a      	ldr	r3, [pc, #104]	; (8000e6c <poll+0xdc>)
 8000e04:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e08:	461a      	mov	r2, r3
 8000e0a:	4b19      	ldr	r3, [pc, #100]	; (8000e70 <poll+0xe0>)
 8000e0c:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000e10:	1ad3      	subs	r3, r2, r3
 8000e12:	f240 5213 	movw	r2, #1299	; 0x513
 8000e16:	4293      	cmp	r3, r2
 8000e18:	dc10      	bgt.n	8000e3c <poll+0xac>
            cycles_still++;
 8000e1a:	4b17      	ldr	r3, [pc, #92]	; (8000e78 <poll+0xe8>)
 8000e1c:	681b      	ldr	r3, [r3, #0]
 8000e1e:	3301      	adds	r3, #1
 8000e20:	4a15      	ldr	r2, [pc, #84]	; (8000e78 <poll+0xe8>)
 8000e22:	6013      	str	r3, [r2, #0]
                if(cycles_still > 20*timeout){
 8000e24:	4b14      	ldr	r3, [pc, #80]	; (8000e78 <poll+0xe8>)
 8000e26:	681b      	ldr	r3, [r3, #0]
 8000e28:	f5b3 7f16 	cmp.w	r3, #600	; 0x258
 8000e2c:	dd09      	ble.n	8000e42 <poll+0xb2>
                    Awake = 0;
 8000e2e:	4b0e      	ldr	r3, [pc, #56]	; (8000e68 <poll+0xd8>)
 8000e30:	2200      	movs	r2, #0
 8000e32:	601a      	str	r2, [r3, #0]
                    cycles_still = 0;
 8000e34:	4b10      	ldr	r3, [pc, #64]	; (8000e78 <poll+0xe8>)
 8000e36:	2200      	movs	r2, #0
 8000e38:	601a      	str	r2, [r3, #0]
                if(cycles_still > 20*timeout){
 8000e3a:	e002      	b.n	8000e42 <poll+0xb2>
                }
        }
        else{
            cycles_still = 0;
 8000e3c:	4b0e      	ldr	r3, [pc, #56]	; (8000e78 <poll+0xe8>)
 8000e3e:	2200      	movs	r2, #0
 8000e40:	601a      	str	r2, [r3, #0]
        }
        xyz_old[0] = xyz[0];
 8000e42:	4b0a      	ldr	r3, [pc, #40]	; (8000e6c <poll+0xdc>)
 8000e44:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000e48:	4b09      	ldr	r3, [pc, #36]	; (8000e70 <poll+0xe0>)
 8000e4a:	801a      	strh	r2, [r3, #0]
        xyz_old[1] = xyz[1];
 8000e4c:	4b07      	ldr	r3, [pc, #28]	; (8000e6c <poll+0xdc>)
 8000e4e:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000e52:	4b07      	ldr	r3, [pc, #28]	; (8000e70 <poll+0xe0>)
 8000e54:	805a      	strh	r2, [r3, #2]
        xyz_old[2] = xyz[2];
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <poll+0xdc>)
 8000e58:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000e5c:	4b04      	ldr	r3, [pc, #16]	; (8000e70 <poll+0xe0>)
 8000e5e:	809a      	strh	r2, [r3, #4]
    }
    return Awake;
 8000e60:	4b01      	ldr	r3, [pc, #4]	; (8000e68 <poll+0xd8>)
 8000e62:	681b      	ldr	r3, [r3, #0]
}
 8000e64:	4618      	mov	r0, r3
 8000e66:	bd80      	pop	{r7, pc}
 8000e68:	200014d4 	.word	0x200014d4
 8000e6c:	200014ec 	.word	0x200014ec
 8000e70:	200014e4 	.word	0x200014e4
 8000e74:	fffffaed 	.word	0xfffffaed
 8000e78:	200014f4 	.word	0x200014f4

08000e7c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	b084      	sub	sp, #16
 8000e80:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000e82:	f002 fb49 	bl	8003518 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000e86:	f000 f90b 	bl	80010a0 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000e8a:	f000 fc63 	bl	8001754 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000e8e:	f000 fa21 	bl	80012d4 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000e92:	f000 faa7 	bl	80013e4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000e96:	f000 fc33 	bl	8001700 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000e9a:	f000 f9bf 	bl	800121c <MX_I2C1_Init>
  MX_TIM5_Init();
 8000e9e:	f000 fbe1 	bl	8001664 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000ea2:	f000 fa4d 	bl	8001340 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000ea6:	f000 fb0d 	bl	80014c4 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000eaa:	f000 fb81 	bl	80015b0 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000eae:	f000 f963 	bl	8001178 <MX_ADC1_Init>
  MX_I2C3_Init();
 8000eb2:	f000 f9e1 	bl	8001278 <MX_I2C3_Init>
  /* USER CODE BEGIN 2 */
    init_default_controller(&controller);
 8000eb6:	486d      	ldr	r0, [pc, #436]	; (800106c <main+0x1f0>)
 8000eb8:	f7ff fd3c 	bl	8000934 <init_default_controller>
    init_displays();
 8000ebc:	f001 fcbc 	bl	8002838 <init_displays>
    AccelInit();
 8000ec0:	f7ff ff50 	bl	8000d64 <AccelInit>
    HAL_TIM_Base_Start_IT(&htim5);
 8000ec4:	486a      	ldr	r0, [pc, #424]	; (8001070 <main+0x1f4>)
 8000ec6:	f005 f9d3 	bl	8006270 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000eca:	2108      	movs	r1, #8
 8000ecc:	4869      	ldr	r0, [pc, #420]	; (8001074 <main+0x1f8>)
 8000ece:	f005 fa81 	bl	80063d4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000ed2:	2104      	movs	r1, #4
 8000ed4:	4868      	ldr	r0, [pc, #416]	; (8001078 <main+0x1fc>)
 8000ed6:	f005 fa7d 	bl	80063d4 <HAL_TIM_PWM_Start>
    // HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //Starts timer 2
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 50);
 8000eda:	4b68      	ldr	r3, [pc, #416]	; (800107c <main+0x200>)
 8000edc:	681b      	ldr	r3, [r3, #0]
 8000ede:	2232      	movs	r2, #50	; 0x32
 8000ee0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 999); // Adjust LED Brightness
 8000ee2:	4b65      	ldr	r3, [pc, #404]	; (8001078 <main+0x1fc>)
 8000ee4:	681b      	ldr	r3, [r3, #0]
 8000ee6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000eea:	639a      	str	r2, [r3, #56]	; 0x38
    initialize_buttons();
 8000eec:	f7ff fbb8 	bl	8000660 <initialize_buttons>
    // update_buttons();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
    display_menu(main_menu, 1, 0);
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	2101      	movs	r1, #1
 8000ef4:	2000      	movs	r0, #0
 8000ef6:	f000 ff43 	bl	8001d80 <display_menu>
    uint8_t pressed_button = 0;
 8000efa:	2300      	movs	r3, #0
 8000efc:	71fb      	strb	r3, [r7, #7]

    while (1)
    {   
    	if (settings) {
 8000efe:	4b60      	ldr	r3, [pc, #384]	; (8001080 <main+0x204>)
 8000f00:	781b      	ldrb	r3, [r3, #0]
 8000f02:	2b00      	cmp	r3, #0
 8000f04:	d016      	beq.n	8000f34 <main+0xb8>
    		display_menu(settings_menu, 1, 0);
 8000f06:	2200      	movs	r2, #0
 8000f08:	2101      	movs	r1, #1
 8000f0a:	2001      	movs	r0, #1
 8000f0c:	f000 ff38 	bl	8001d80 <display_menu>
    		for (uint8_t i = 1; i <= 4; ++i) {
 8000f10:	2301      	movs	r3, #1
 8000f12:	73fb      	strb	r3, [r7, #15]
 8000f14:	e006      	b.n	8000f24 <main+0xa8>
    			enable_button(i);
 8000f16:	7bfb      	ldrb	r3, [r7, #15]
 8000f18:	4618      	mov	r0, r3
 8000f1a:	f7ff fbaf 	bl	800067c <enable_button>
    		for (uint8_t i = 1; i <= 4; ++i) {
 8000f1e:	7bfb      	ldrb	r3, [r7, #15]
 8000f20:	3301      	adds	r3, #1
 8000f22:	73fb      	strb	r3, [r7, #15]
 8000f24:	7bfb      	ldrb	r3, [r7, #15]
 8000f26:	2b04      	cmp	r3, #4
 8000f28:	d9f5      	bls.n	8000f16 <main+0x9a>
    		}
    		update_buttons();
 8000f2a:	f7ff fc63 	bl	80007f4 <update_buttons>
    		settings = 0;
 8000f2e:	4b54      	ldr	r3, [pc, #336]	; (8001080 <main+0x204>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	701a      	strb	r2, [r3, #0]
    	}
        if(!awake && button){
 8000f34:	4b53      	ldr	r3, [pc, #332]	; (8001084 <main+0x208>)
 8000f36:	681b      	ldr	r3, [r3, #0]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d105      	bne.n	8000f48 <main+0xcc>
 8000f3c:	4b52      	ldr	r3, [pc, #328]	; (8001088 <main+0x20c>)
 8000f3e:	781b      	ldrb	r3, [r3, #0]
 8000f40:	2b00      	cmp	r3, #0
 8000f42:	d001      	beq.n	8000f48 <main+0xcc>
            resetCounter();
 8000f44:	f7ff ff18 	bl	8000d78 <resetCounter>
        }
        if (!timeoutoff && wakeup)
 8000f48:	4b50      	ldr	r3, [pc, #320]	; (800108c <main+0x210>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d10f      	bne.n	8000f70 <main+0xf4>
 8000f50:	4b4f      	ldr	r3, [pc, #316]	; (8001090 <main+0x214>)
 8000f52:	781b      	ldrb	r3, [r3, #0]
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d00b      	beq.n	8000f70 <main+0xf4>
        {
            enable_all_buttons();
 8000f58:	f7ff fc22 	bl	80007a0 <enable_all_buttons>
            update_buttons();
 8000f5c:	f7ff fc4a 	bl	80007f4 <update_buttons>
            display_menu(main_menu,1,0);
 8000f60:	2200      	movs	r2, #0
 8000f62:	2101      	movs	r1, #1
 8000f64:	2000      	movs	r0, #0
 8000f66:	f000 ff0b 	bl	8001d80 <display_menu>
            wakeup = 0;
 8000f6a:	4b49      	ldr	r3, [pc, #292]	; (8001090 <main+0x214>)
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	701a      	strb	r2, [r3, #0]
        }
        if (!timeoutoff && pollnow)
 8000f70:	4b46      	ldr	r3, [pc, #280]	; (800108c <main+0x210>)
 8000f72:	781b      	ldrb	r3, [r3, #0]
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d11e      	bne.n	8000fb6 <main+0x13a>
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <main+0x218>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d01a      	beq.n	8000fb6 <main+0x13a>
        {
            uint8_t awakeBefore = awake;
 8000f80:	4b40      	ldr	r3, [pc, #256]	; (8001084 <main+0x208>)
 8000f82:	681b      	ldr	r3, [r3, #0]
 8000f84:	71bb      	strb	r3, [r7, #6]
            awake = poll();
 8000f86:	f7ff ff03 	bl	8000d90 <poll>
 8000f8a:	4603      	mov	r3, r0
 8000f8c:	461a      	mov	r2, r3
 8000f8e:	4b3d      	ldr	r3, [pc, #244]	; (8001084 <main+0x208>)
 8000f90:	601a      	str	r2, [r3, #0]
            wakeup = (awakeBefore != awake && awake) ? 1 : 0;
 8000f92:	79ba      	ldrb	r2, [r7, #6]
 8000f94:	4b3b      	ldr	r3, [pc, #236]	; (8001084 <main+0x208>)
 8000f96:	681b      	ldr	r3, [r3, #0]
 8000f98:	429a      	cmp	r2, r3
 8000f9a:	d005      	beq.n	8000fa8 <main+0x12c>
 8000f9c:	4b39      	ldr	r3, [pc, #228]	; (8001084 <main+0x208>)
 8000f9e:	681b      	ldr	r3, [r3, #0]
 8000fa0:	2b00      	cmp	r3, #0
 8000fa2:	d001      	beq.n	8000fa8 <main+0x12c>
 8000fa4:	2301      	movs	r3, #1
 8000fa6:	e000      	b.n	8000faa <main+0x12e>
 8000fa8:	2300      	movs	r3, #0
 8000faa:	b2da      	uxtb	r2, r3
 8000fac:	4b38      	ldr	r3, [pc, #224]	; (8001090 <main+0x214>)
 8000fae:	701a      	strb	r2, [r3, #0]
            pollnow = 0;
 8000fb0:	4b38      	ldr	r3, [pc, #224]	; (8001094 <main+0x218>)
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	701a      	strb	r2, [r3, #0]
        }
        // update awake status
        if (!awake && !timeoutoff)
 8000fb6:	4b33      	ldr	r3, [pc, #204]	; (8001084 <main+0x208>)
 8000fb8:	681b      	ldr	r3, [r3, #0]
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d10c      	bne.n	8000fd8 <main+0x15c>
 8000fbe:	4b33      	ldr	r3, [pc, #204]	; (800108c <main+0x210>)
 8000fc0:	781b      	ldrb	r3, [r3, #0]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d108      	bne.n	8000fd8 <main+0x15c>
        {
            erase_buffer();
 8000fc6:	f001 fda5 	bl	8002b14 <erase_buffer>
            update_all_displays();
 8000fca:	f001 fd2b 	bl	8002a24 <update_all_displays>
            disable_all_buttons();
 8000fce:	f7ff fbfc 	bl	80007ca <disable_all_buttons>
            update_buttons();
 8000fd2:	f7ff fc0f 	bl	80007f4 <update_buttons>
 8000fd6:	e047      	b.n	8001068 <main+0x1ec>
        }
        else
        {
            if (button)
 8000fd8:	4b2b      	ldr	r3, [pc, #172]	; (8001088 <main+0x20c>)
 8000fda:	781b      	ldrb	r3, [r3, #0]
 8000fdc:	2b00      	cmp	r3, #0
 8000fde:	d00b      	beq.n	8000ff8 <main+0x17c>
            {
                pressed_button = button;
 8000fe0:	4b29      	ldr	r3, [pc, #164]	; (8001088 <main+0x20c>)
 8000fe2:	781b      	ldrb	r3, [r3, #0]
 8000fe4:	71fb      	strb	r3, [r7, #7]
                while (button)
 8000fe6:	bf00      	nop
 8000fe8:	4b27      	ldr	r3, [pc, #156]	; (8001088 <main+0x20c>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	2b00      	cmp	r3, #0
 8000fee:	d1fb      	bne.n	8000fe8 <main+0x16c>
                    ;
                button_pressed(pressed_button);
 8000ff0:	79fb      	ldrb	r3, [r7, #7]
 8000ff2:	4618      	mov	r0, r3
 8000ff4:	f001 f902 	bl	80021fc <button_pressed>
            }
            if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000ff8:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ffc:	4826      	ldr	r0, [pc, #152]	; (8001098 <main+0x21c>)
 8000ffe:	f003 f9f7 	bl	80043f0 <HAL_GPIO_ReadPin>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d113      	bne.n	8001030 <main+0x1b4>
            {
                while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8001008:	bf00      	nop
 800100a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 800100e:	4822      	ldr	r0, [pc, #136]	; (8001098 <main+0x21c>)
 8001010:	f003 f9ee 	bl	80043f0 <HAL_GPIO_ReadPin>
 8001014:	4603      	mov	r3, r0
 8001016:	2b00      	cmp	r3, #0
 8001018:	d0f7      	beq.n	800100a <main+0x18e>
                    ;
                for (int i = 0; i < 2; ++i)
 800101a:	2300      	movs	r3, #0
 800101c:	60bb      	str	r3, [r7, #8]
 800101e:	e004      	b.n	800102a <main+0x1ae>
                    GlobalTransmit();
 8001020:	f7ff fab0 	bl	8000584 <GlobalTransmit>
                for (int i = 0; i < 2; ++i)
 8001024:	68bb      	ldr	r3, [r7, #8]
 8001026:	3301      	adds	r3, #1
 8001028:	60bb      	str	r3, [r7, #8]
 800102a:	68bb      	ldr	r3, [r7, #8]
 800102c:	2b01      	cmp	r3, #1
 800102e:	ddf7      	ble.n	8001020 <main+0x1a4>
            }
            // ADC testing code
            uint32_t ADC_VAL;
            HAL_ADC_Start(&hadc1);                         // start conversion
 8001030:	481a      	ldr	r0, [pc, #104]	; (800109c <main+0x220>)
 8001032:	f002 fb4b 	bl	80036cc <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF); // wait for conversion to finish
 8001036:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800103a:	4818      	ldr	r0, [pc, #96]	; (800109c <main+0x220>)
 800103c:	f002 fbfa 	bl	8003834 <HAL_ADC_PollForConversion>
            ADC_VAL = HAL_ADC_GetValue(&hadc1);            // retrieve value
 8001040:	4816      	ldr	r0, [pc, #88]	; (800109c <main+0x220>)
 8001042:	f002 fc82 	bl	800394a <HAL_ADC_GetValue>
 8001046:	6038      	str	r0, [r7, #0]

            /*if(ADC_VAL < 500){
                //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 200); // Adjust LED Brightness
            }*/
            if (ADC_VAL > 1900)
 8001048:	683b      	ldr	r3, [r7, #0]
 800104a:	f240 726c 	movw	r2, #1900	; 0x76c
 800104e:	4293      	cmp	r3, r2
 8001050:	d905      	bls.n	800105e <main+0x1e2>
            {
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1999); // Adjust LED Brightness
 8001052:	4b09      	ldr	r3, [pc, #36]	; (8001078 <main+0x1fc>)
 8001054:	681b      	ldr	r3, [r3, #0]
 8001056:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800105a:	639a      	str	r2, [r3, #56]	; 0x38
 800105c:	e74f      	b.n	8000efe <main+0x82>
            }
            else
            {
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, ADC_VAL + 20); // Adjust LED Brightness
 800105e:	4b06      	ldr	r3, [pc, #24]	; (8001078 <main+0x1fc>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	683a      	ldr	r2, [r7, #0]
 8001064:	3214      	adds	r2, #20
 8001066:	639a      	str	r2, [r3, #56]	; 0x38
    	if (settings) {
 8001068:	e749      	b.n	8000efe <main+0x82>
 800106a:	bf00      	nop
 800106c:	200017f0 	.word	0x200017f0
 8001070:	20001760 	.word	0x20001760
 8001074:	20001688 	.word	0x20001688
 8001078:	20001718 	.word	0x20001718
 800107c:	200016d0 	.word	0x200016d0
 8001080:	20015bb4 	.word	0x20015bb4
 8001084:	2000000c 	.word	0x2000000c
 8001088:	200017ed 	.word	0x200017ed
 800108c:	20015bb3 	.word	0x20015bb3
 8001090:	20015bb2 	.word	0x20015bb2
 8001094:	20015bb1 	.word	0x20015bb1
 8001098:	40020800 	.word	0x40020800
 800109c:	200014f8 	.word	0x200014f8

080010a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010a0:	b580      	push	{r7, lr}
 80010a2:	b094      	sub	sp, #80	; 0x50
 80010a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010a6:	f107 0320 	add.w	r3, r7, #32
 80010aa:	2230      	movs	r2, #48	; 0x30
 80010ac:	2100      	movs	r1, #0
 80010ae:	4618      	mov	r0, r3
 80010b0:	f007 fd48 	bl	8008b44 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010b4:	f107 030c 	add.w	r3, r7, #12
 80010b8:	2200      	movs	r2, #0
 80010ba:	601a      	str	r2, [r3, #0]
 80010bc:	605a      	str	r2, [r3, #4]
 80010be:	609a      	str	r2, [r3, #8]
 80010c0:	60da      	str	r2, [r3, #12]
 80010c2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80010c4:	2300      	movs	r3, #0
 80010c6:	60bb      	str	r3, [r7, #8]
 80010c8:	4b29      	ldr	r3, [pc, #164]	; (8001170 <SystemClock_Config+0xd0>)
 80010ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010cc:	4a28      	ldr	r2, [pc, #160]	; (8001170 <SystemClock_Config+0xd0>)
 80010ce:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80010d2:	6413      	str	r3, [r2, #64]	; 0x40
 80010d4:	4b26      	ldr	r3, [pc, #152]	; (8001170 <SystemClock_Config+0xd0>)
 80010d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80010dc:	60bb      	str	r3, [r7, #8]
 80010de:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 80010e0:	2300      	movs	r3, #0
 80010e2:	607b      	str	r3, [r7, #4]
 80010e4:	4b23      	ldr	r3, [pc, #140]	; (8001174 <SystemClock_Config+0xd4>)
 80010e6:	681b      	ldr	r3, [r3, #0]
 80010e8:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80010ec:	4a21      	ldr	r2, [pc, #132]	; (8001174 <SystemClock_Config+0xd4>)
 80010ee:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80010f2:	6013      	str	r3, [r2, #0]
 80010f4:	4b1f      	ldr	r3, [pc, #124]	; (8001174 <SystemClock_Config+0xd4>)
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80010fc:	607b      	str	r3, [r7, #4]
 80010fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001100:	2302      	movs	r3, #2
 8001102:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001104:	2301      	movs	r3, #1
 8001106:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001108:	2310      	movs	r3, #16
 800110a:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800110c:	2302      	movs	r3, #2
 800110e:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001110:	2300      	movs	r3, #0
 8001112:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8001114:	2310      	movs	r3, #16
 8001116:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001118:	f44f 73a8 	mov.w	r3, #336	; 0x150
 800111c:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 800111e:	2304      	movs	r3, #4
 8001120:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8001122:	2307      	movs	r3, #7
 8001124:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001126:	f107 0320 	add.w	r3, r7, #32
 800112a:	4618      	mov	r0, r3
 800112c:	f004 f928 	bl	8005380 <HAL_RCC_OscConfig>
 8001130:	4603      	mov	r3, r0
 8001132:	2b00      	cmp	r3, #0
 8001134:	d001      	beq.n	800113a <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8001136:	f000 fe1d 	bl	8001d74 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800113a:	230f      	movs	r3, #15
 800113c:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800113e:	2302      	movs	r3, #2
 8001140:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001142:	2300      	movs	r3, #0
 8001144:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001146:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800114a:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800114c:	2300      	movs	r3, #0
 800114e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001150:	f107 030c 	add.w	r3, r7, #12
 8001154:	2102      	movs	r1, #2
 8001156:	4618      	mov	r0, r3
 8001158:	f004 fb8a 	bl	8005870 <HAL_RCC_ClockConfig>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8001162:	f000 fe07 	bl	8001d74 <Error_Handler>
  }
}
 8001166:	bf00      	nop
 8001168:	3750      	adds	r7, #80	; 0x50
 800116a:	46bd      	mov	sp, r7
 800116c:	bd80      	pop	{r7, pc}
 800116e:	bf00      	nop
 8001170:	40023800 	.word	0x40023800
 8001174:	40007000 	.word	0x40007000

08001178 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b084      	sub	sp, #16
 800117c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800117e:	463b      	mov	r3, r7
 8001180:	2200      	movs	r2, #0
 8001182:	601a      	str	r2, [r3, #0]
 8001184:	605a      	str	r2, [r3, #4]
 8001186:	609a      	str	r2, [r3, #8]
 8001188:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 800118a:	4b21      	ldr	r3, [pc, #132]	; (8001210 <MX_ADC1_Init+0x98>)
 800118c:	4a21      	ldr	r2, [pc, #132]	; (8001214 <MX_ADC1_Init+0x9c>)
 800118e:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8001190:	4b1f      	ldr	r3, [pc, #124]	; (8001210 <MX_ADC1_Init+0x98>)
 8001192:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8001196:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8001198:	4b1d      	ldr	r3, [pc, #116]	; (8001210 <MX_ADC1_Init+0x98>)
 800119a:	2200      	movs	r2, #0
 800119c:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 800119e:	4b1c      	ldr	r3, [pc, #112]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011a4:	4b1a      	ldr	r3, [pc, #104]	; (8001210 <MX_ADC1_Init+0x98>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011aa:	4b19      	ldr	r3, [pc, #100]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011b2:	4b17      	ldr	r3, [pc, #92]	; (8001210 <MX_ADC1_Init+0x98>)
 80011b4:	2200      	movs	r2, #0
 80011b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011b8:	4b15      	ldr	r3, [pc, #84]	; (8001210 <MX_ADC1_Init+0x98>)
 80011ba:	4a17      	ldr	r2, [pc, #92]	; (8001218 <MX_ADC1_Init+0xa0>)
 80011bc:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011be:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c0:	2200      	movs	r2, #0
 80011c2:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_ADC1_Init+0x98>)
 80011c6:	2201      	movs	r2, #1
 80011c8:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_ADC1_Init+0x98>)
 80011cc:	2200      	movs	r2, #0
 80011ce:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011d2:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_ADC1_Init+0x98>)
 80011d4:	2201      	movs	r2, #1
 80011d6:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80011d8:	480d      	ldr	r0, [pc, #52]	; (8001210 <MX_ADC1_Init+0x98>)
 80011da:	f002 fa33 	bl	8003644 <HAL_ADC_Init>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 80011e4:	f000 fdc6 	bl	8001d74 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80011ec:	2301      	movs	r3, #1
 80011ee:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 80011f0:	2302      	movs	r3, #2
 80011f2:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80011f4:	463b      	mov	r3, r7
 80011f6:	4619      	mov	r1, r3
 80011f8:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_ADC1_Init+0x98>)
 80011fa:	f002 fbb3 	bl	8003964 <HAL_ADC_ConfigChannel>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8001204:	f000 fdb6 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001208:	bf00      	nop
 800120a:	3710      	adds	r7, #16
 800120c:	46bd      	mov	sp, r7
 800120e:	bd80      	pop	{r7, pc}
 8001210:	200014f8 	.word	0x200014f8
 8001214:	40012000 	.word	0x40012000
 8001218:	0f000001 	.word	0x0f000001

0800121c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001220:	4b12      	ldr	r3, [pc, #72]	; (800126c <MX_I2C1_Init+0x50>)
 8001222:	4a13      	ldr	r2, [pc, #76]	; (8001270 <MX_I2C1_Init+0x54>)
 8001224:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001226:	4b11      	ldr	r3, [pc, #68]	; (800126c <MX_I2C1_Init+0x50>)
 8001228:	4a12      	ldr	r2, [pc, #72]	; (8001274 <MX_I2C1_Init+0x58>)
 800122a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800122c:	4b0f      	ldr	r3, [pc, #60]	; (800126c <MX_I2C1_Init+0x50>)
 800122e:	2200      	movs	r2, #0
 8001230:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001232:	4b0e      	ldr	r3, [pc, #56]	; (800126c <MX_I2C1_Init+0x50>)
 8001234:	2200      	movs	r2, #0
 8001236:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001238:	4b0c      	ldr	r3, [pc, #48]	; (800126c <MX_I2C1_Init+0x50>)
 800123a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800123e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001240:	4b0a      	ldr	r3, [pc, #40]	; (800126c <MX_I2C1_Init+0x50>)
 8001242:	2200      	movs	r2, #0
 8001244:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001246:	4b09      	ldr	r3, [pc, #36]	; (800126c <MX_I2C1_Init+0x50>)
 8001248:	2200      	movs	r2, #0
 800124a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800124c:	4b07      	ldr	r3, [pc, #28]	; (800126c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001252:	4b06      	ldr	r3, [pc, #24]	; (800126c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001258:	4804      	ldr	r0, [pc, #16]	; (800126c <MX_I2C1_Init+0x50>)
 800125a:	f003 f8fb 	bl	8004454 <HAL_I2C_Init>
 800125e:	4603      	mov	r3, r0
 8001260:	2b00      	cmp	r3, #0
 8001262:	d001      	beq.n	8001268 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001264:	f000 fd86 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001268:	bf00      	nop
 800126a:	bd80      	pop	{r7, pc}
 800126c:	20001540 	.word	0x20001540
 8001270:	40005400 	.word	0x40005400
 8001274:	000186a0 	.word	0x000186a0

08001278 <MX_I2C3_Init>:
  * @brief I2C3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 800127c:	4b12      	ldr	r3, [pc, #72]	; (80012c8 <MX_I2C3_Init+0x50>)
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <MX_I2C3_Init+0x54>)
 8001280:	601a      	str	r2, [r3, #0]
  hi2c3.Init.ClockSpeed = 100000;
 8001282:	4b11      	ldr	r3, [pc, #68]	; (80012c8 <MX_I2C3_Init+0x50>)
 8001284:	4a12      	ldr	r2, [pc, #72]	; (80012d0 <MX_I2C3_Init+0x58>)
 8001286:	605a      	str	r2, [r3, #4]
  hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001288:	4b0f      	ldr	r3, [pc, #60]	; (80012c8 <MX_I2C3_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	609a      	str	r2, [r3, #8]
  hi2c3.Init.OwnAddress1 = 0;
 800128e:	4b0e      	ldr	r3, [pc, #56]	; (80012c8 <MX_I2C3_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	60da      	str	r2, [r3, #12]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001294:	4b0c      	ldr	r3, [pc, #48]	; (80012c8 <MX_I2C3_Init+0x50>)
 8001296:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800129a:	611a      	str	r2, [r3, #16]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800129c:	4b0a      	ldr	r3, [pc, #40]	; (80012c8 <MX_I2C3_Init+0x50>)
 800129e:	2200      	movs	r2, #0
 80012a0:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2 = 0;
 80012a2:	4b09      	ldr	r3, [pc, #36]	; (80012c8 <MX_I2C3_Init+0x50>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80012a8:	4b07      	ldr	r3, [pc, #28]	; (80012c8 <MX_I2C3_Init+0x50>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80012ae:	4b06      	ldr	r3, [pc, #24]	; (80012c8 <MX_I2C3_Init+0x50>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 80012b4:	4804      	ldr	r0, [pc, #16]	; (80012c8 <MX_I2C3_Init+0x50>)
 80012b6:	f003 f8cd 	bl	8004454 <HAL_I2C_Init>
 80012ba:	4603      	mov	r3, r0
 80012bc:	2b00      	cmp	r3, #0
 80012be:	d001      	beq.n	80012c4 <MX_I2C3_Init+0x4c>
  {
    Error_Handler();
 80012c0:	f000 fd58 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 80012c4:	bf00      	nop
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20001594 	.word	0x20001594
 80012cc:	40005c00 	.word	0x40005c00
 80012d0:	000186a0 	.word	0x000186a0

080012d4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80012d4:	b580      	push	{r7, lr}
 80012d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 80012d8:	4b17      	ldr	r3, [pc, #92]	; (8001338 <MX_SPI2_Init+0x64>)
 80012da:	4a18      	ldr	r2, [pc, #96]	; (800133c <MX_SPI2_Init+0x68>)
 80012dc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80012de:	4b16      	ldr	r3, [pc, #88]	; (8001338 <MX_SPI2_Init+0x64>)
 80012e0:	f44f 7282 	mov.w	r2, #260	; 0x104
 80012e4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80012e6:	4b14      	ldr	r3, [pc, #80]	; (8001338 <MX_SPI2_Init+0x64>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80012ec:	4b12      	ldr	r3, [pc, #72]	; (8001338 <MX_SPI2_Init+0x64>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80012f2:	4b11      	ldr	r3, [pc, #68]	; (8001338 <MX_SPI2_Init+0x64>)
 80012f4:	2200      	movs	r2, #0
 80012f6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80012f8:	4b0f      	ldr	r3, [pc, #60]	; (8001338 <MX_SPI2_Init+0x64>)
 80012fa:	2200      	movs	r2, #0
 80012fc:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80012fe:	4b0e      	ldr	r3, [pc, #56]	; (8001338 <MX_SPI2_Init+0x64>)
 8001300:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001304:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001306:	4b0c      	ldr	r3, [pc, #48]	; (8001338 <MX_SPI2_Init+0x64>)
 8001308:	2230      	movs	r2, #48	; 0x30
 800130a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800130c:	4b0a      	ldr	r3, [pc, #40]	; (8001338 <MX_SPI2_Init+0x64>)
 800130e:	2200      	movs	r2, #0
 8001310:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001312:	4b09      	ldr	r3, [pc, #36]	; (8001338 <MX_SPI2_Init+0x64>)
 8001314:	2200      	movs	r2, #0
 8001316:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001318:	4b07      	ldr	r3, [pc, #28]	; (8001338 <MX_SPI2_Init+0x64>)
 800131a:	2200      	movs	r2, #0
 800131c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 800131e:	4b06      	ldr	r3, [pc, #24]	; (8001338 <MX_SPI2_Init+0x64>)
 8001320:	220a      	movs	r2, #10
 8001322:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8001324:	4804      	ldr	r0, [pc, #16]	; (8001338 <MX_SPI2_Init+0x64>)
 8001326:	f004 fcc3 	bl	8005cb0 <HAL_SPI_Init>
 800132a:	4603      	mov	r3, r0
 800132c:	2b00      	cmp	r3, #0
 800132e:	d001      	beq.n	8001334 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8001330:	f000 fd20 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8001334:	bf00      	nop
 8001336:	bd80      	pop	{r7, pc}
 8001338:	200015e8 	.word	0x200015e8
 800133c:	40003800 	.word	0x40003800

08001340 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001346:	f107 0308 	add.w	r3, r7, #8
 800134a:	2200      	movs	r2, #0
 800134c:	601a      	str	r2, [r3, #0]
 800134e:	605a      	str	r2, [r3, #4]
 8001350:	609a      	str	r2, [r3, #8]
 8001352:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001354:	463b      	mov	r3, r7
 8001356:	2200      	movs	r2, #0
 8001358:	601a      	str	r2, [r3, #0]
 800135a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800135c:	4b1f      	ldr	r3, [pc, #124]	; (80013dc <MX_TIM1_Init+0x9c>)
 800135e:	4a20      	ldr	r2, [pc, #128]	; (80013e0 <MX_TIM1_Init+0xa0>)
 8001360:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1869;
 8001362:	4b1e      	ldr	r3, [pc, #120]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001364:	f240 724d 	movw	r2, #1869	; 0x74d
 8001368:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800136a:	4b1c      	ldr	r3, [pc, #112]	; (80013dc <MX_TIM1_Init+0x9c>)
 800136c:	2200      	movs	r2, #0
 800136e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8001370:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001372:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001376:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_TIM1_Init+0x9c>)
 800137a:	2200      	movs	r2, #0
 800137c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 800137e:	4b17      	ldr	r3, [pc, #92]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001380:	2200      	movs	r2, #0
 8001382:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001384:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_TIM1_Init+0x9c>)
 8001386:	2200      	movs	r2, #0
 8001388:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800138a:	4814      	ldr	r0, [pc, #80]	; (80013dc <MX_TIM1_Init+0x9c>)
 800138c:	f004 ff20 	bl	80061d0 <HAL_TIM_Base_Init>
 8001390:	4603      	mov	r3, r0
 8001392:	2b00      	cmp	r3, #0
 8001394:	d001      	beq.n	800139a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8001396:	f000 fced 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800139e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013a0:	f107 0308 	add.w	r3, r7, #8
 80013a4:	4619      	mov	r1, r3
 80013a6:	480d      	ldr	r0, [pc, #52]	; (80013dc <MX_TIM1_Init+0x9c>)
 80013a8:	f005 fdb0 	bl	8006f0c <HAL_TIM_ConfigClockSource>
 80013ac:	4603      	mov	r3, r0
 80013ae:	2b00      	cmp	r3, #0
 80013b0:	d001      	beq.n	80013b6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 80013b2:	f000 fcdf 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b6:	2300      	movs	r3, #0
 80013b8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013ba:	2300      	movs	r3, #0
 80013bc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013be:	463b      	mov	r3, r7
 80013c0:	4619      	mov	r1, r3
 80013c2:	4806      	ldr	r0, [pc, #24]	; (80013dc <MX_TIM1_Init+0x9c>)
 80013c4:	f006 fa7c 	bl	80078c0 <HAL_TIMEx_MasterConfigSynchronization>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 80013ce:	f000 fcd1 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 80013d2:	bf00      	nop
 80013d4:	3718      	adds	r7, #24
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bd80      	pop	{r7, pc}
 80013da:	bf00      	nop
 80013dc:	20001640 	.word	0x20001640
 80013e0:	40010000 	.word	0x40010000

080013e4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80013e4:	b580      	push	{r7, lr}
 80013e6:	b08a      	sub	sp, #40	; 0x28
 80013e8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ea:	f107 0318 	add.w	r3, r7, #24
 80013ee:	2200      	movs	r2, #0
 80013f0:	601a      	str	r2, [r3, #0]
 80013f2:	605a      	str	r2, [r3, #4]
 80013f4:	609a      	str	r2, [r3, #8]
 80013f6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f8:	f107 0310 	add.w	r3, r7, #16
 80013fc:	2200      	movs	r2, #0
 80013fe:	601a      	str	r2, [r3, #0]
 8001400:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8001402:	463b      	mov	r3, r7
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
 800140a:	609a      	str	r2, [r3, #8]
 800140c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800140e:	4b2c      	ldr	r3, [pc, #176]	; (80014c0 <MX_TIM2_Init+0xdc>)
 8001410:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001414:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1869;
 8001416:	4b2a      	ldr	r3, [pc, #168]	; (80014c0 <MX_TIM2_Init+0xdc>)
 8001418:	f240 724d 	movw	r2, #1869	; 0x74d
 800141c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141e:	4b28      	ldr	r3, [pc, #160]	; (80014c0 <MX_TIM2_Init+0xdc>)
 8001420:	2200      	movs	r2, #0
 8001422:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8001424:	4b26      	ldr	r3, [pc, #152]	; (80014c0 <MX_TIM2_Init+0xdc>)
 8001426:	f240 32e7 	movw	r2, #999	; 0x3e7
 800142a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142c:	4b24      	ldr	r3, [pc, #144]	; (80014c0 <MX_TIM2_Init+0xdc>)
 800142e:	2200      	movs	r2, #0
 8001430:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001432:	4b23      	ldr	r3, [pc, #140]	; (80014c0 <MX_TIM2_Init+0xdc>)
 8001434:	2200      	movs	r2, #0
 8001436:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001438:	4821      	ldr	r0, [pc, #132]	; (80014c0 <MX_TIM2_Init+0xdc>)
 800143a:	f004 fec9 	bl	80061d0 <HAL_TIM_Base_Init>
 800143e:	4603      	mov	r3, r0
 8001440:	2b00      	cmp	r3, #0
 8001442:	d001      	beq.n	8001448 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8001444:	f000 fc96 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001448:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800144e:	f107 0318 	add.w	r3, r7, #24
 8001452:	4619      	mov	r1, r3
 8001454:	481a      	ldr	r0, [pc, #104]	; (80014c0 <MX_TIM2_Init+0xdc>)
 8001456:	f005 fd59 	bl	8006f0c <HAL_TIM_ConfigClockSource>
 800145a:	4603      	mov	r3, r0
 800145c:	2b00      	cmp	r3, #0
 800145e:	d001      	beq.n	8001464 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8001460:	f000 fc88 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001464:	4816      	ldr	r0, [pc, #88]	; (80014c0 <MX_TIM2_Init+0xdc>)
 8001466:	f005 f8c9 	bl	80065fc <HAL_TIM_IC_Init>
 800146a:	4603      	mov	r3, r0
 800146c:	2b00      	cmp	r3, #0
 800146e:	d001      	beq.n	8001474 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8001470:	f000 fc80 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001474:	2300      	movs	r3, #0
 8001476:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001478:	2300      	movs	r3, #0
 800147a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800147c:	f107 0310 	add.w	r3, r7, #16
 8001480:	4619      	mov	r1, r3
 8001482:	480f      	ldr	r0, [pc, #60]	; (80014c0 <MX_TIM2_Init+0xdc>)
 8001484:	f006 fa1c 	bl	80078c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001488:	4603      	mov	r3, r0
 800148a:	2b00      	cmp	r3, #0
 800148c:	d001      	beq.n	8001492 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 800148e:	f000 fc71 	bl	8001d74 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001492:	230a      	movs	r3, #10
 8001494:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8001496:	2301      	movs	r3, #1
 8001498:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800149a:	2300      	movs	r3, #0
 800149c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800149e:	2300      	movs	r3, #0
 80014a0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80014a2:	463b      	mov	r3, r7
 80014a4:	2200      	movs	r2, #0
 80014a6:	4619      	mov	r1, r3
 80014a8:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_TIM2_Init+0xdc>)
 80014aa:	f005 fbd1 	bl	8006c50 <HAL_TIM_IC_ConfigChannel>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80014b4:	f000 fc5e 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	3728      	adds	r7, #40	; 0x28
 80014bc:	46bd      	mov	sp, r7
 80014be:	bd80      	pop	{r7, pc}
 80014c0:	20001688 	.word	0x20001688

080014c4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80014c4:	b580      	push	{r7, lr}
 80014c6:	b08e      	sub	sp, #56	; 0x38
 80014c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80014ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80014ce:	2200      	movs	r2, #0
 80014d0:	601a      	str	r2, [r3, #0]
 80014d2:	605a      	str	r2, [r3, #4]
 80014d4:	609a      	str	r2, [r3, #8]
 80014d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80014d8:	f107 0320 	add.w	r3, r7, #32
 80014dc:	2200      	movs	r2, #0
 80014de:	601a      	str	r2, [r3, #0]
 80014e0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80014e2:	1d3b      	adds	r3, r7, #4
 80014e4:	2200      	movs	r2, #0
 80014e6:	601a      	str	r2, [r3, #0]
 80014e8:	605a      	str	r2, [r3, #4]
 80014ea:	609a      	str	r2, [r3, #8]
 80014ec:	60da      	str	r2, [r3, #12]
 80014ee:	611a      	str	r2, [r3, #16]
 80014f0:	615a      	str	r2, [r3, #20]
 80014f2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80014f4:	4b2c      	ldr	r3, [pc, #176]	; (80015a8 <MX_TIM3_Init+0xe4>)
 80014f6:	4a2d      	ldr	r2, [pc, #180]	; (80015ac <MX_TIM3_Init+0xe8>)
 80014f8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21;
 80014fa:	4b2b      	ldr	r3, [pc, #172]	; (80015a8 <MX_TIM3_Init+0xe4>)
 80014fc:	2215      	movs	r2, #21
 80014fe:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001500:	4b29      	ldr	r3, [pc, #164]	; (80015a8 <MX_TIM3_Init+0xe4>)
 8001502:	2200      	movs	r2, #0
 8001504:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8001506:	4b28      	ldr	r3, [pc, #160]	; (80015a8 <MX_TIM3_Init+0xe4>)
 8001508:	2264      	movs	r2, #100	; 0x64
 800150a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800150c:	4b26      	ldr	r3, [pc, #152]	; (80015a8 <MX_TIM3_Init+0xe4>)
 800150e:	2200      	movs	r2, #0
 8001510:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001512:	4b25      	ldr	r3, [pc, #148]	; (80015a8 <MX_TIM3_Init+0xe4>)
 8001514:	2200      	movs	r2, #0
 8001516:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001518:	4823      	ldr	r0, [pc, #140]	; (80015a8 <MX_TIM3_Init+0xe4>)
 800151a:	f004 fe59 	bl	80061d0 <HAL_TIM_Base_Init>
 800151e:	4603      	mov	r3, r0
 8001520:	2b00      	cmp	r3, #0
 8001522:	d001      	beq.n	8001528 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001524:	f000 fc26 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001528:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800152c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800152e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001532:	4619      	mov	r1, r3
 8001534:	481c      	ldr	r0, [pc, #112]	; (80015a8 <MX_TIM3_Init+0xe4>)
 8001536:	f005 fce9 	bl	8006f0c <HAL_TIM_ConfigClockSource>
 800153a:	4603      	mov	r3, r0
 800153c:	2b00      	cmp	r3, #0
 800153e:	d001      	beq.n	8001544 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001540:	f000 fc18 	bl	8001d74 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001544:	4818      	ldr	r0, [pc, #96]	; (80015a8 <MX_TIM3_Init+0xe4>)
 8001546:	f004 fef5 	bl	8006334 <HAL_TIM_PWM_Init>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d001      	beq.n	8001554 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001550:	f000 fc10 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001554:	2300      	movs	r3, #0
 8001556:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001558:	2300      	movs	r3, #0
 800155a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800155c:	f107 0320 	add.w	r3, r7, #32
 8001560:	4619      	mov	r1, r3
 8001562:	4811      	ldr	r0, [pc, #68]	; (80015a8 <MX_TIM3_Init+0xe4>)
 8001564:	f006 f9ac 	bl	80078c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800156e:	f000 fc01 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001572:	2360      	movs	r3, #96	; 0x60
 8001574:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001576:	2300      	movs	r3, #0
 8001578:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800157a:	2300      	movs	r3, #0
 800157c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800157e:	2300      	movs	r3, #0
 8001580:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001582:	1d3b      	adds	r3, r7, #4
 8001584:	2204      	movs	r2, #4
 8001586:	4619      	mov	r1, r3
 8001588:	4807      	ldr	r0, [pc, #28]	; (80015a8 <MX_TIM3_Init+0xe4>)
 800158a:	f005 fbfd 	bl	8006d88 <HAL_TIM_PWM_ConfigChannel>
 800158e:	4603      	mov	r3, r0
 8001590:	2b00      	cmp	r3, #0
 8001592:	d001      	beq.n	8001598 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001594:	f000 fbee 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001598:	4803      	ldr	r0, [pc, #12]	; (80015a8 <MX_TIM3_Init+0xe4>)
 800159a:	f001 fe47 	bl	800322c <HAL_TIM_MspPostInit>

}
 800159e:	bf00      	nop
 80015a0:	3738      	adds	r7, #56	; 0x38
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	200016d0 	.word	0x200016d0
 80015ac:	40000400 	.word	0x40000400

080015b0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015b6:	f107 0320 	add.w	r3, r7, #32
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015c0:	1d3b      	adds	r3, r7, #4
 80015c2:	2200      	movs	r2, #0
 80015c4:	601a      	str	r2, [r3, #0]
 80015c6:	605a      	str	r2, [r3, #4]
 80015c8:	609a      	str	r2, [r3, #8]
 80015ca:	60da      	str	r2, [r3, #12]
 80015cc:	611a      	str	r2, [r3, #16]
 80015ce:	615a      	str	r2, [r3, #20]
 80015d0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80015d2:	4b22      	ldr	r3, [pc, #136]	; (800165c <MX_TIM4_Init+0xac>)
 80015d4:	4a22      	ldr	r2, [pc, #136]	; (8001660 <MX_TIM4_Init+0xb0>)
 80015d6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 511;
 80015d8:	4b20      	ldr	r3, [pc, #128]	; (800165c <MX_TIM4_Init+0xac>)
 80015da:	f240 12ff 	movw	r2, #511	; 0x1ff
 80015de:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80015e0:	4b1e      	ldr	r3, [pc, #120]	; (800165c <MX_TIM4_Init+0xac>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 80015e6:	4b1d      	ldr	r3, [pc, #116]	; (800165c <MX_TIM4_Init+0xac>)
 80015e8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80015ec:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80015ee:	4b1b      	ldr	r3, [pc, #108]	; (800165c <MX_TIM4_Init+0xac>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80015f4:	4b19      	ldr	r3, [pc, #100]	; (800165c <MX_TIM4_Init+0xac>)
 80015f6:	2200      	movs	r2, #0
 80015f8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80015fa:	4818      	ldr	r0, [pc, #96]	; (800165c <MX_TIM4_Init+0xac>)
 80015fc:	f004 fe9a 	bl	8006334 <HAL_TIM_PWM_Init>
 8001600:	4603      	mov	r3, r0
 8001602:	2b00      	cmp	r3, #0
 8001604:	d001      	beq.n	800160a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001606:	f000 fbb5 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800160a:	2300      	movs	r3, #0
 800160c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800160e:	2300      	movs	r3, #0
 8001610:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001612:	f107 0320 	add.w	r3, r7, #32
 8001616:	4619      	mov	r1, r3
 8001618:	4810      	ldr	r0, [pc, #64]	; (800165c <MX_TIM4_Init+0xac>)
 800161a:	f006 f951 	bl	80078c0 <HAL_TIMEx_MasterConfigSynchronization>
 800161e:	4603      	mov	r3, r0
 8001620:	2b00      	cmp	r3, #0
 8001622:	d001      	beq.n	8001628 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001624:	f000 fba6 	bl	8001d74 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001628:	2370      	movs	r3, #112	; 0x70
 800162a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001630:	2300      	movs	r3, #0
 8001632:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001634:	2300      	movs	r3, #0
 8001636:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001638:	1d3b      	adds	r3, r7, #4
 800163a:	2204      	movs	r2, #4
 800163c:	4619      	mov	r1, r3
 800163e:	4807      	ldr	r0, [pc, #28]	; (800165c <MX_TIM4_Init+0xac>)
 8001640:	f005 fba2 	bl	8006d88 <HAL_TIM_PWM_ConfigChannel>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800164a:	f000 fb93 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800164e:	4803      	ldr	r0, [pc, #12]	; (800165c <MX_TIM4_Init+0xac>)
 8001650:	f001 fdec 	bl	800322c <HAL_TIM_MspPostInit>

}
 8001654:	bf00      	nop
 8001656:	3728      	adds	r7, #40	; 0x28
 8001658:	46bd      	mov	sp, r7
 800165a:	bd80      	pop	{r7, pc}
 800165c:	20001718 	.word	0x20001718
 8001660:	40000800 	.word	0x40000800

08001664 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b086      	sub	sp, #24
 8001668:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800166a:	f107 0308 	add.w	r3, r7, #8
 800166e:	2200      	movs	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
 8001672:	605a      	str	r2, [r3, #4]
 8001674:	609a      	str	r2, [r3, #8]
 8001676:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001678:	463b      	mov	r3, r7
 800167a:	2200      	movs	r2, #0
 800167c:	601a      	str	r2, [r3, #0]
 800167e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001680:	4b1d      	ldr	r3, [pc, #116]	; (80016f8 <MX_TIM5_Init+0x94>)
 8001682:	4a1e      	ldr	r2, [pc, #120]	; (80016fc <MX_TIM5_Init+0x98>)
 8001684:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001686:	4b1c      	ldr	r3, [pc, #112]	; (80016f8 <MX_TIM5_Init+0x94>)
 8001688:	2253      	movs	r2, #83	; 0x53
 800168a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800168c:	4b1a      	ldr	r3, [pc, #104]	; (80016f8 <MX_TIM5_Init+0x94>)
 800168e:	2200      	movs	r2, #0
 8001690:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49999;
 8001692:	4b19      	ldr	r3, [pc, #100]	; (80016f8 <MX_TIM5_Init+0x94>)
 8001694:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001698:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_TIM5_Init+0x94>)
 800169c:	2200      	movs	r2, #0
 800169e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_TIM5_Init+0x94>)
 80016a2:	2280      	movs	r2, #128	; 0x80
 80016a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 80016a6:	4814      	ldr	r0, [pc, #80]	; (80016f8 <MX_TIM5_Init+0x94>)
 80016a8:	f004 fd92 	bl	80061d0 <HAL_TIM_Base_Init>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80016b2:	f000 fb5f 	bl	8001d74 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80016b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80016ba:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80016bc:	f107 0308 	add.w	r3, r7, #8
 80016c0:	4619      	mov	r1, r3
 80016c2:	480d      	ldr	r0, [pc, #52]	; (80016f8 <MX_TIM5_Init+0x94>)
 80016c4:	f005 fc22 	bl	8006f0c <HAL_TIM_ConfigClockSource>
 80016c8:	4603      	mov	r3, r0
 80016ca:	2b00      	cmp	r3, #0
 80016cc:	d001      	beq.n	80016d2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80016ce:	f000 fb51 	bl	8001d74 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80016d2:	2300      	movs	r3, #0
 80016d4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80016d6:	2300      	movs	r3, #0
 80016d8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80016da:	463b      	mov	r3, r7
 80016dc:	4619      	mov	r1, r3
 80016de:	4806      	ldr	r0, [pc, #24]	; (80016f8 <MX_TIM5_Init+0x94>)
 80016e0:	f006 f8ee 	bl	80078c0 <HAL_TIMEx_MasterConfigSynchronization>
 80016e4:	4603      	mov	r3, r0
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d001      	beq.n	80016ee <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80016ea:	f000 fb43 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80016ee:	bf00      	nop
 80016f0:	3718      	adds	r7, #24
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	20001760 	.word	0x20001760
 80016fc:	40000c00 	.word	0x40000c00

08001700 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001704:	4b11      	ldr	r3, [pc, #68]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001706:	4a12      	ldr	r2, [pc, #72]	; (8001750 <MX_USART1_UART_Init+0x50>)
 8001708:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800170a:	4b10      	ldr	r3, [pc, #64]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800170c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001710:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001712:	4b0e      	ldr	r3, [pc, #56]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001718:	4b0c      	ldr	r3, [pc, #48]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800171a:	2200      	movs	r2, #0
 800171c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800171e:	4b0b      	ldr	r3, [pc, #44]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001720:	2200      	movs	r2, #0
 8001722:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001724:	4b09      	ldr	r3, [pc, #36]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001726:	220c      	movs	r2, #12
 8001728:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800172a:	4b08      	ldr	r3, [pc, #32]	; (800174c <MX_USART1_UART_Init+0x4c>)
 800172c:	2200      	movs	r2, #0
 800172e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001730:	4b06      	ldr	r3, [pc, #24]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001732:	2200      	movs	r2, #0
 8001734:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001736:	4805      	ldr	r0, [pc, #20]	; (800174c <MX_USART1_UART_Init+0x4c>)
 8001738:	f006 f944 	bl	80079c4 <HAL_UART_Init>
 800173c:	4603      	mov	r3, r0
 800173e:	2b00      	cmp	r3, #0
 8001740:	d001      	beq.n	8001746 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001742:	f000 fb17 	bl	8001d74 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001746:	bf00      	nop
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200017a8 	.word	0x200017a8
 8001750:	40011000 	.word	0x40011000

08001754 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	b088      	sub	sp, #32
 8001758:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800175a:	f107 030c 	add.w	r3, r7, #12
 800175e:	2200      	movs	r2, #0
 8001760:	601a      	str	r2, [r3, #0]
 8001762:	605a      	str	r2, [r3, #4]
 8001764:	609a      	str	r2, [r3, #8]
 8001766:	60da      	str	r2, [r3, #12]
 8001768:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800176a:	2300      	movs	r3, #0
 800176c:	60bb      	str	r3, [r7, #8]
 800176e:	4b44      	ldr	r3, [pc, #272]	; (8001880 <MX_GPIO_Init+0x12c>)
 8001770:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001772:	4a43      	ldr	r2, [pc, #268]	; (8001880 <MX_GPIO_Init+0x12c>)
 8001774:	f043 0304 	orr.w	r3, r3, #4
 8001778:	6313      	str	r3, [r2, #48]	; 0x30
 800177a:	4b41      	ldr	r3, [pc, #260]	; (8001880 <MX_GPIO_Init+0x12c>)
 800177c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800177e:	f003 0304 	and.w	r3, r3, #4
 8001782:	60bb      	str	r3, [r7, #8]
 8001784:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001786:	2300      	movs	r3, #0
 8001788:	607b      	str	r3, [r7, #4]
 800178a:	4b3d      	ldr	r3, [pc, #244]	; (8001880 <MX_GPIO_Init+0x12c>)
 800178c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800178e:	4a3c      	ldr	r2, [pc, #240]	; (8001880 <MX_GPIO_Init+0x12c>)
 8001790:	f043 0301 	orr.w	r3, r3, #1
 8001794:	6313      	str	r3, [r2, #48]	; 0x30
 8001796:	4b3a      	ldr	r3, [pc, #232]	; (8001880 <MX_GPIO_Init+0x12c>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	f003 0301 	and.w	r3, r3, #1
 800179e:	607b      	str	r3, [r7, #4]
 80017a0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017a2:	2300      	movs	r3, #0
 80017a4:	603b      	str	r3, [r7, #0]
 80017a6:	4b36      	ldr	r3, [pc, #216]	; (8001880 <MX_GPIO_Init+0x12c>)
 80017a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017aa:	4a35      	ldr	r2, [pc, #212]	; (8001880 <MX_GPIO_Init+0x12c>)
 80017ac:	f043 0302 	orr.w	r3, r3, #2
 80017b0:	6313      	str	r3, [r2, #48]	; 0x30
 80017b2:	4b33      	ldr	r3, [pc, #204]	; (8001880 <MX_GPIO_Init+0x12c>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	f003 0302 	and.w	r3, r3, #2
 80017ba:	603b      	str	r3, [r7, #0]
 80017bc:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 80017be:	2200      	movs	r2, #0
 80017c0:	21e3      	movs	r1, #227	; 0xe3
 80017c2:	4830      	ldr	r0, [pc, #192]	; (8001884 <MX_GPIO_Init+0x130>)
 80017c4:	f002 fe2c 	bl	8004420 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80017c8:	2200      	movs	r2, #0
 80017ca:	2140      	movs	r1, #64	; 0x40
 80017cc:	482e      	ldr	r0, [pc, #184]	; (8001888 <MX_GPIO_Init+0x134>)
 80017ce:	f002 fe27 	bl	8004420 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80017d2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80017d6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80017d8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80017dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80017e2:	f107 030c 	add.w	r3, r7, #12
 80017e6:	4619      	mov	r1, r3
 80017e8:	4828      	ldr	r0, [pc, #160]	; (800188c <MX_GPIO_Init+0x138>)
 80017ea:	f002 fc7d 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 80017ee:	23e3      	movs	r3, #227	; 0xe3
 80017f0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80017f2:	2301      	movs	r3, #1
 80017f4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017fa:	2300      	movs	r3, #0
 80017fc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017fe:	f107 030c 	add.w	r3, r7, #12
 8001802:	4619      	mov	r1, r3
 8001804:	481f      	ldr	r0, [pc, #124]	; (8001884 <MX_GPIO_Init+0x130>)
 8001806:	f002 fc6f 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800180a:	230c      	movs	r3, #12
 800180c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800180e:	2302      	movs	r3, #2
 8001810:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001812:	2300      	movs	r3, #0
 8001814:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001816:	2303      	movs	r3, #3
 8001818:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800181a:	2307      	movs	r3, #7
 800181c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800181e:	f107 030c 	add.w	r3, r7, #12
 8001822:	4619      	mov	r1, r3
 8001824:	4817      	ldr	r0, [pc, #92]	; (8001884 <MX_GPIO_Init+0x130>)
 8001826:	f002 fc5f 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800182a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800182e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001830:	2300      	movs	r3, #0
 8001832:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001834:	2300      	movs	r3, #0
 8001836:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001838:	f107 030c 	add.w	r3, r7, #12
 800183c:	4619      	mov	r1, r3
 800183e:	4813      	ldr	r0, [pc, #76]	; (800188c <MX_GPIO_Init+0x138>)
 8001840:	f002 fc52 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001844:	2338      	movs	r3, #56	; 0x38
 8001846:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001848:	2300      	movs	r3, #0
 800184a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800184c:	2301      	movs	r3, #1
 800184e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001850:	f107 030c 	add.w	r3, r7, #12
 8001854:	4619      	mov	r1, r3
 8001856:	480c      	ldr	r0, [pc, #48]	; (8001888 <MX_GPIO_Init+0x134>)
 8001858:	f002 fc46 	bl	80040e8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800185c:	2340      	movs	r3, #64	; 0x40
 800185e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001860:	2301      	movs	r3, #1
 8001862:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001864:	2300      	movs	r3, #0
 8001866:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001868:	2300      	movs	r3, #0
 800186a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800186c:	f107 030c 	add.w	r3, r7, #12
 8001870:	4619      	mov	r1, r3
 8001872:	4805      	ldr	r0, [pc, #20]	; (8001888 <MX_GPIO_Init+0x134>)
 8001874:	f002 fc38 	bl	80040e8 <HAL_GPIO_Init>

}
 8001878:	bf00      	nop
 800187a:	3720      	adds	r7, #32
 800187c:	46bd      	mov	sp, r7
 800187e:	bd80      	pop	{r7, pc}
 8001880:	40023800 	.word	0x40023800
 8001884:	40020000 	.word	0x40020000
 8001888:	40020400 	.word	0x40020400
 800188c:	40020800 	.word	0x40020800

08001890 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001890:	b580      	push	{r7, lr}
 8001892:	b082      	sub	sp, #8
 8001894:	af00      	add	r7, sp, #0
 8001896:	6078      	str	r0, [r7, #4]
    // 50ms Poll Button Timer

    if (htim == &htim5)
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	4a4f      	ldr	r2, [pc, #316]	; (80019d8 <HAL_TIM_PeriodElapsedCallback+0x148>)
 800189c:	4293      	cmp	r3, r2
 800189e:	f040 8098 	bne.w	80019d2 <HAL_TIM_PeriodElapsedCallback+0x142>
        // Count the number of times the interrupt fires for flashing
        static uint8_t i = 0;
        // Set high if the button has been released, low while pressed
        static uint8_t released = 1;

        button = poll_buttons();
 80018a2:	f7fe ffc5 	bl	8000830 <poll_buttons>
 80018a6:	4603      	mov	r3, r0
 80018a8:	461a      	mov	r2, r3
 80018aa:	4b4c      	ldr	r3, [pc, #304]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80018ac:	701a      	strb	r2, [r3, #0]
        pollnow = 1;
 80018ae:	4b4c      	ldr	r3, [pc, #304]	; (80019e0 <HAL_TIM_PeriodElapsedCallback+0x150>)
 80018b0:	2201      	movs	r2, #1
 80018b2:	701a      	strb	r2, [r3, #0]
        if (!awake)
 80018b4:	4b4b      	ldr	r3, [pc, #300]	; (80019e4 <HAL_TIM_PeriodElapsedCallback+0x154>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	2b00      	cmp	r3, #0
 80018ba:	f000 8089 	beq.w	80019d0 <HAL_TIM_PeriodElapsedCallback+0x140>
            return;
        // If a new button is pressed
        if (button && released)
 80018be:	4b47      	ldr	r3, [pc, #284]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80018c0:	781b      	ldrb	r3, [r3, #0]
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d01f      	beq.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x76>
 80018c6:	4b48      	ldr	r3, [pc, #288]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018c8:	781b      	ldrb	r3, [r3, #0]
 80018ca:	2b00      	cmp	r3, #0
 80018cc:	d01b      	beq.n	8001906 <HAL_TIM_PeriodElapsedCallback+0x76>
        {
            // Turn on Button Light
            if (current_menu != settings_menu && current_menu != xbee_menu)
 80018ce:	4b47      	ldr	r3, [pc, #284]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	2b01      	cmp	r3, #1
 80018d4:	d005      	beq.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x52>
 80018d6:	4b45      	ldr	r3, [pc, #276]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 80018d8:	781b      	ldrb	r3, [r3, #0]
 80018da:	2b06      	cmp	r3, #6
 80018dc:	d001      	beq.n	80018e2 <HAL_TIM_PeriodElapsedCallback+0x52>
                enable_all_buttons();
 80018de:	f7fe ff5f 	bl	80007a0 <enable_all_buttons>
            disable_button(button);
 80018e2:	4b3e      	ldr	r3, [pc, #248]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80018e4:	781b      	ldrb	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fefa 	bl	80006e0 <disable_button>
            // Invert display
            update_buttons();
 80018ec:	f7fe ff82 	bl	80007f4 <update_buttons>

            last_pressed = button;
 80018f0:	4b3a      	ldr	r3, [pc, #232]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80018f2:	781a      	ldrb	r2, [r3, #0]
 80018f4:	4b3e      	ldr	r3, [pc, #248]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80018f6:	701a      	strb	r2, [r3, #0]
            released = 0;
 80018f8:	4b3b      	ldr	r3, [pc, #236]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	701a      	strb	r2, [r3, #0]
            i = 0; // Reset counter
 80018fe:	4b3d      	ldr	r3, [pc, #244]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001900:	2200      	movs	r2, #0
 8001902:	701a      	strb	r2, [r3, #0]
 8001904:	e065      	b.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x142>
        }
        else if (!button && last_pressed)
 8001906:	4b35      	ldr	r3, [pc, #212]	; (80019dc <HAL_TIM_PeriodElapsedCallback+0x14c>)
 8001908:	781b      	ldrb	r3, [r3, #0]
 800190a:	2b00      	cmp	r3, #0
 800190c:	d161      	bne.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x142>
 800190e:	4b38      	ldr	r3, [pc, #224]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001910:	781b      	ldrb	r3, [r3, #0]
 8001912:	2b00      	cmp	r3, #0
 8001914:	d05d      	beq.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x142>
        {
            // if no button is pressed, flash the last pressed
            // button until reaching BUTTON_FLASH_DURATION.
            released = 1;
 8001916:	4b34      	ldr	r3, [pc, #208]	; (80019e8 <HAL_TIM_PeriodElapsedCallback+0x158>)
 8001918:	2201      	movs	r2, #1
 800191a:	701a      	strb	r2, [r3, #0]
            ++i;
 800191c:	4b35      	ldr	r3, [pc, #212]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800191e:	781b      	ldrb	r3, [r3, #0]
 8001920:	3301      	adds	r3, #1
 8001922:	b2da      	uxtb	r2, r3
 8001924:	4b33      	ldr	r3, [pc, #204]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001926:	701a      	strb	r2, [r3, #0]
            if (!(i % 4))
 8001928:	4b32      	ldr	r3, [pc, #200]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 800192a:	781b      	ldrb	r3, [r3, #0]
 800192c:	f003 0303 	and.w	r3, r3, #3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	2b00      	cmp	r3, #0
 8001934:	d11f      	bne.n	8001976 <HAL_TIM_PeriodElapsedCallback+0xe6>
            {
                // toggle every 200 ms
                if ((current_menu != xbee_menu) && (current_menu != awaiting_menu) && ((current_menu != settings_menu) || (last_pressed == 1 || last_pressed == 2 || last_pressed == 9)))
 8001936:	4b2d      	ldr	r3, [pc, #180]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001938:	781b      	ldrb	r3, [r3, #0]
 800193a:	2b06      	cmp	r3, #6
 800193c:	d018      	beq.n	8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>
 800193e:	4b2b      	ldr	r3, [pc, #172]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	2b05      	cmp	r3, #5
 8001944:	d014      	beq.n	8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>
 8001946:	4b29      	ldr	r3, [pc, #164]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001948:	781b      	ldrb	r3, [r3, #0]
 800194a:	2b01      	cmp	r3, #1
 800194c:	d10b      	bne.n	8001966 <HAL_TIM_PeriodElapsedCallback+0xd6>
 800194e:	4b28      	ldr	r3, [pc, #160]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001950:	781b      	ldrb	r3, [r3, #0]
 8001952:	2b01      	cmp	r3, #1
 8001954:	d007      	beq.n	8001966 <HAL_TIM_PeriodElapsedCallback+0xd6>
 8001956:	4b26      	ldr	r3, [pc, #152]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001958:	781b      	ldrb	r3, [r3, #0]
 800195a:	2b02      	cmp	r3, #2
 800195c:	d003      	beq.n	8001966 <HAL_TIM_PeriodElapsedCallback+0xd6>
 800195e:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001960:	781b      	ldrb	r3, [r3, #0]
 8001962:	2b09      	cmp	r3, #9
 8001964:	d104      	bne.n	8001970 <HAL_TIM_PeriodElapsedCallback+0xe0>
                    toggle_button(last_pressed);
 8001966:	4b22      	ldr	r3, [pc, #136]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001968:	781b      	ldrb	r3, [r3, #0]
 800196a:	4618      	mov	r0, r3
 800196c:	f7fe fee8 	bl	8000740 <toggle_button>
                // invert display
                update_buttons();
 8001970:	f7fe ff40 	bl	80007f4 <update_buttons>
 8001974:	e02d      	b.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x142>
            }
            else if (i > BUTTON_FLASH_DURATION / 50)
 8001976:	4b1f      	ldr	r3, [pc, #124]	; (80019f4 <HAL_TIM_PeriodElapsedCallback+0x164>)
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b0c      	cmp	r3, #12
 800197c:	d929      	bls.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x142>
            {
                if ((current_menu != xbee_menu) && (current_menu != awaiting_menu) && ((current_menu != settings_menu) || last_pressed == 1 || last_pressed == 2 || last_pressed == 9))
 800197e:	4b1b      	ldr	r3, [pc, #108]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001980:	781b      	ldrb	r3, [r3, #0]
 8001982:	2b06      	cmp	r3, #6
 8001984:	d019      	beq.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x12a>
 8001986:	4b19      	ldr	r3, [pc, #100]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001988:	781b      	ldrb	r3, [r3, #0]
 800198a:	2b05      	cmp	r3, #5
 800198c:	d015      	beq.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x12a>
 800198e:	4b17      	ldr	r3, [pc, #92]	; (80019ec <HAL_TIM_PeriodElapsedCallback+0x15c>)
 8001990:	781b      	ldrb	r3, [r3, #0]
 8001992:	2b01      	cmp	r3, #1
 8001994:	d10b      	bne.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x11e>
 8001996:	4b16      	ldr	r3, [pc, #88]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 8001998:	781b      	ldrb	r3, [r3, #0]
 800199a:	2b01      	cmp	r3, #1
 800199c:	d007      	beq.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x11e>
 800199e:	4b14      	ldr	r3, [pc, #80]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80019a0:	781b      	ldrb	r3, [r3, #0]
 80019a2:	2b02      	cmp	r3, #2
 80019a4:	d003      	beq.n	80019ae <HAL_TIM_PeriodElapsedCallback+0x11e>
 80019a6:	4b12      	ldr	r3, [pc, #72]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80019a8:	781b      	ldrb	r3, [r3, #0]
 80019aa:	2b09      	cmp	r3, #9
 80019ac:	d105      	bne.n	80019ba <HAL_TIM_PeriodElapsedCallback+0x12a>
                    enable_button(last_pressed);
 80019ae:	4b10      	ldr	r3, [pc, #64]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80019b0:	781b      	ldrb	r3, [r3, #0]
 80019b2:	4618      	mov	r0, r3
 80019b4:	f7fe fe62 	bl	800067c <enable_button>
 80019b8:	e004      	b.n	80019c4 <HAL_TIM_PeriodElapsedCallback+0x134>
                else
                    disable_button(last_pressed);
 80019ba:	4b0d      	ldr	r3, [pc, #52]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80019bc:	781b      	ldrb	r3, [r3, #0]
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fe8e 	bl	80006e0 <disable_button>
                update_buttons();
 80019c4:	f7fe ff16 	bl	80007f4 <update_buttons>
                // set display to not inverted
                // clear the last pressed button and stop flashing
                last_pressed = 0;
 80019c8:	4b09      	ldr	r3, [pc, #36]	; (80019f0 <HAL_TIM_PeriodElapsedCallback+0x160>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	701a      	strb	r2, [r3, #0]
 80019ce:	e000      	b.n	80019d2 <HAL_TIM_PeriodElapsedCallback+0x142>
            return;
 80019d0:	bf00      	nop
            }
        }
    }
}
 80019d2:	3708      	adds	r7, #8
 80019d4:	46bd      	mov	sp, r7
 80019d6:	bd80      	pop	{r7, pc}
 80019d8:	20001760 	.word	0x20001760
 80019dc:	200017ed 	.word	0x200017ed
 80019e0:	20015bb1 	.word	0x20015bb1
 80019e4:	2000000c 	.word	0x2000000c
 80019e8:	20000010 	.word	0x20000010
 80019ec:	200017ec 	.word	0x200017ec
 80019f0:	20015bb5 	.word	0x20015bb5
 80019f4:	20015bb6 	.word	0x20015bb6

080019f8 <HAL_UART_RxCpltCallback>:
// Callback, recieved complete set of data from PC
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80019f8:	b580      	push	{r7, lr}
 80019fa:	b08c      	sub	sp, #48	; 0x30
 80019fc:	af00      	add	r7, sp, #0
 80019fe:	6078      	str	r0, [r7, #4]
	// Ensure this only runs for UART 1
	if (huart != &huart1) return;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	4ab0      	ldr	r2, [pc, #704]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001a04:	4293      	cmp	r3, r2
 8001a06:	f040 81a9 	bne.w	8001d5c <HAL_UART_RxCpltCallback+0x364>
	// Argument mode or command mode
	static enum Arg{noarg, xcon, vdev, edev, ecom} argument = noarg;
	static uint8_t argnum = 0;

	// Sync with the PC
    if (!sync) {
 8001a0a:	4baf      	ldr	r3, [pc, #700]	; (8001cc8 <HAL_UART_RxCpltCallback+0x2d0>)
 8001a0c:	781b      	ldrb	r3, [r3, #0]
 8001a0e:	2b00      	cmp	r3, #0
 8001a10:	d111      	bne.n	8001a36 <HAL_UART_RxCpltCallback+0x3e>
    	sync = 1;
 8001a12:	4bad      	ldr	r3, [pc, #692]	; (8001cc8 <HAL_UART_RxCpltCallback+0x2d0>)
 8001a14:	2201      	movs	r2, #1
 8001a16:	701a      	strb	r2, [r3, #0]
    	HAL_UART_Transmit(huart, UART1_rxBuffer, 1, 100);
 8001a18:	2364      	movs	r3, #100	; 0x64
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	49ab      	ldr	r1, [pc, #684]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001a1e:	6878      	ldr	r0, [r7, #4]
 8001a20:	f006 f81d 	bl	8007a5e <HAL_UART_Transmit>
    	HAL_UART_Receive_IT(huart, UART1_rxBuffer, 4);
 8001a24:	2204      	movs	r2, #4
 8001a26:	49a9      	ldr	r1, [pc, #676]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001a28:	6878      	ldr	r0, [r7, #4]
 8001a2a:	f006 f8aa 	bl	8007b82 <HAL_UART_Receive_IT>
    	argument = noarg;
 8001a2e:	4ba8      	ldr	r3, [pc, #672]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001a30:	2200      	movs	r2, #0
 8001a32:	701a      	strb	r2, [r3, #0]
    	return;
 8001a34:	e193      	b.n	8001d5e <HAL_UART_RxCpltCallback+0x366>
    }

    if (argument == noarg) UART1_rxBuffer[4] = '\0';
 8001a36:	4ba6      	ldr	r3, [pc, #664]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001a38:	781b      	ldrb	r3, [r3, #0]
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d102      	bne.n	8001a44 <HAL_UART_RxCpltCallback+0x4c>
 8001a3e:	4ba3      	ldr	r3, [pc, #652]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	711a      	strb	r2, [r3, #4]

    switch(argument) {
 8001a44:	4ba2      	ldr	r3, [pc, #648]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001a46:	781b      	ldrb	r3, [r3, #0]
 8001a48:	2b04      	cmp	r3, #4
 8001a4a:	f200 8174 	bhi.w	8001d36 <HAL_UART_RxCpltCallback+0x33e>
 8001a4e:	a201      	add	r2, pc, #4	; (adr r2, 8001a54 <HAL_UART_RxCpltCallback+0x5c>)
 8001a50:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a54:	08001a69 	.word	0x08001a69
 8001a58:	08001b47 	.word	0x08001b47
 8001a5c:	08001b85 	.word	0x08001b85
 8001a60:	08001b9d 	.word	0x08001b9d
 8001a64:	08001c2d 	.word	0x08001c2d
    case noarg:
        if (!strcmp((char*)UART1_rxBuffer,"quit")) {
 8001a68:	499a      	ldr	r1, [pc, #616]	; (8001cd4 <HAL_UART_RxCpltCallback+0x2dc>)
 8001a6a:	4898      	ldr	r0, [pc, #608]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001a6c:	f7fe fbb2 	bl	80001d4 <strcmp>
 8001a70:	4603      	mov	r3, r0
 8001a72:	2b00      	cmp	r3, #0
 8001a74:	d10b      	bne.n	8001a8e <HAL_UART_RxCpltCallback+0x96>
        	sync = 0;
 8001a76:	4b94      	ldr	r3, [pc, #592]	; (8001cc8 <HAL_UART_RxCpltCallback+0x2d0>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	701a      	strb	r2, [r3, #0]
        	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 8001a7c:	2201      	movs	r2, #1
 8001a7e:	4993      	ldr	r1, [pc, #588]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001a80:	4890      	ldr	r0, [pc, #576]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001a82:	f006 f87e 	bl	8007b82 <HAL_UART_Receive_IT>
        	argument = noarg;
 8001a86:	4b92      	ldr	r3, [pc, #584]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001a88:	2200      	movs	r2, #0
 8001a8a:	701a      	strb	r2, [r3, #0]
        	return;
 8001a8c:	e167      	b.n	8001d5e <HAL_UART_RxCpltCallback+0x366>
        } else if (!strcmp((char*)UART1_rxBuffer,"edev")) {
 8001a8e:	4992      	ldr	r1, [pc, #584]	; (8001cd8 <HAL_UART_RxCpltCallback+0x2e0>)
 8001a90:	488e      	ldr	r0, [pc, #568]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001a92:	f7fe fb9f 	bl	80001d4 <strcmp>
 8001a96:	4603      	mov	r3, r0
 8001a98:	2b00      	cmp	r3, #0
 8001a9a:	d10b      	bne.n	8001ab4 <HAL_UART_RxCpltCallback+0xbc>
        	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 11);
 8001a9c:	220b      	movs	r2, #11
 8001a9e:	498b      	ldr	r1, [pc, #556]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001aa0:	4888      	ldr	r0, [pc, #544]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001aa2:	f006 f86e 	bl	8007b82 <HAL_UART_Receive_IT>
        	argument = edev;
 8001aa6:	4b8a      	ldr	r3, [pc, #552]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001aa8:	2203      	movs	r2, #3
 8001aaa:	701a      	strb	r2, [r3, #0]
        	argnum = 0;
 8001aac:	4b8b      	ldr	r3, [pc, #556]	; (8001cdc <HAL_UART_RxCpltCallback+0x2e4>)
 8001aae:	2200      	movs	r2, #0
 8001ab0:	701a      	strb	r2, [r3, #0]
        } else if (!strcmp((char*)UART1_rxBuffer,"vdev")) {
        	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 2);
        	argument = vdev;
        	argnum = 0;
        }
        break;
 8001ab2:	e144      	b.n	8001d3e <HAL_UART_RxCpltCallback+0x346>
        } else if (!strcmp((char*)UART1_rxBuffer,"ecom")) {
 8001ab4:	498a      	ldr	r1, [pc, #552]	; (8001ce0 <HAL_UART_RxCpltCallback+0x2e8>)
 8001ab6:	4885      	ldr	r0, [pc, #532]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001ab8:	f7fe fb8c 	bl	80001d4 <strcmp>
 8001abc:	4603      	mov	r3, r0
 8001abe:	2b00      	cmp	r3, #0
 8001ac0:	d10b      	bne.n	8001ada <HAL_UART_RxCpltCallback+0xe2>
			HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 13);
 8001ac2:	220d      	movs	r2, #13
 8001ac4:	4981      	ldr	r1, [pc, #516]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001ac6:	487f      	ldr	r0, [pc, #508]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001ac8:	f006 f85b 	bl	8007b82 <HAL_UART_Receive_IT>
			argument = ecom;
 8001acc:	4b80      	ldr	r3, [pc, #512]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001ace:	2204      	movs	r2, #4
 8001ad0:	701a      	strb	r2, [r3, #0]
			argnum = 0;
 8001ad2:	4b82      	ldr	r3, [pc, #520]	; (8001cdc <HAL_UART_RxCpltCallback+0x2e4>)
 8001ad4:	2200      	movs	r2, #0
 8001ad6:	701a      	strb	r2, [r3, #0]
        break;
 8001ad8:	e131      	b.n	8001d3e <HAL_UART_RxCpltCallback+0x346>
        } else if (!strcmp((char*)UART1_rxBuffer,"xcon")) {
 8001ada:	4982      	ldr	r1, [pc, #520]	; (8001ce4 <HAL_UART_RxCpltCallback+0x2ec>)
 8001adc:	487b      	ldr	r0, [pc, #492]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001ade:	f7fe fb79 	bl	80001d4 <strcmp>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d10c      	bne.n	8001b02 <HAL_UART_RxCpltCallback+0x10a>
        	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 2219);
 8001ae8:	f640 02ab 	movw	r2, #2219	; 0x8ab
 8001aec:	4977      	ldr	r1, [pc, #476]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001aee:	4875      	ldr	r0, [pc, #468]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001af0:	f006 f847 	bl	8007b82 <HAL_UART_Receive_IT>
        	argument = xcon;
 8001af4:	4b76      	ldr	r3, [pc, #472]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001af6:	2201      	movs	r2, #1
 8001af8:	701a      	strb	r2, [r3, #0]
        	argnum = 0;
 8001afa:	4b78      	ldr	r3, [pc, #480]	; (8001cdc <HAL_UART_RxCpltCallback+0x2e4>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	701a      	strb	r2, [r3, #0]
        break;
 8001b00:	e11d      	b.n	8001d3e <HAL_UART_RxCpltCallback+0x346>
        } else if (!strcmp((char*)UART1_rxBuffer,"icon")) {
 8001b02:	4979      	ldr	r1, [pc, #484]	; (8001ce8 <HAL_UART_RxCpltCallback+0x2f0>)
 8001b04:	4871      	ldr	r0, [pc, #452]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001b06:	f7fe fb65 	bl	80001d4 <strcmp>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	2b00      	cmp	r3, #0
 8001b0e:	d106      	bne.n	8001b1e <HAL_UART_RxCpltCallback+0x126>
        	export_configuration(&controller);
 8001b10:	4876      	ldr	r0, [pc, #472]	; (8001cec <HAL_UART_RxCpltCallback+0x2f4>)
 8001b12:	f7ff f87b 	bl	8000c0c <export_configuration>
        	argument = noarg;
 8001b16:	4b6e      	ldr	r3, [pc, #440]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
        break;
 8001b1c:	e10f      	b.n	8001d3e <HAL_UART_RxCpltCallback+0x346>
        } else if (!strcmp((char*)UART1_rxBuffer,"vdev")) {
 8001b1e:	4974      	ldr	r1, [pc, #464]	; (8001cf0 <HAL_UART_RxCpltCallback+0x2f8>)
 8001b20:	486a      	ldr	r0, [pc, #424]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001b22:	f7fe fb57 	bl	80001d4 <strcmp>
 8001b26:	4603      	mov	r3, r0
 8001b28:	2b00      	cmp	r3, #0
 8001b2a:	f040 8108 	bne.w	8001d3e <HAL_UART_RxCpltCallback+0x346>
        	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 2);
 8001b2e:	2202      	movs	r2, #2
 8001b30:	4966      	ldr	r1, [pc, #408]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001b32:	4864      	ldr	r0, [pc, #400]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001b34:	f006 f825 	bl	8007b82 <HAL_UART_Receive_IT>
        	argument = vdev;
 8001b38:	4b65      	ldr	r3, [pc, #404]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001b3a:	2202      	movs	r2, #2
 8001b3c:	701a      	strb	r2, [r3, #0]
        	argnum = 0;
 8001b3e:	4b67      	ldr	r3, [pc, #412]	; (8001cdc <HAL_UART_RxCpltCallback+0x2e4>)
 8001b40:	2200      	movs	r2, #0
 8001b42:	701a      	strb	r2, [r3, #0]
        break;
 8001b44:	e0fb      	b.n	8001d3e <HAL_UART_RxCpltCallback+0x346>
    case xcon:
    	import_device(argnum++);
 8001b46:	4b65      	ldr	r3, [pc, #404]	; (8001cdc <HAL_UART_RxCpltCallback+0x2e4>)
 8001b48:	781b      	ldrb	r3, [r3, #0]
 8001b4a:	1c5a      	adds	r2, r3, #1
 8001b4c:	b2d1      	uxtb	r1, r2
 8001b4e:	4a63      	ldr	r2, [pc, #396]	; (8001cdc <HAL_UART_RxCpltCallback+0x2e4>)
 8001b50:	7011      	strb	r1, [r2, #0]
 8001b52:	4618      	mov	r0, r3
 8001b54:	f7fe ffaa 	bl	8000aac <import_device>
    	// check how many devices have been inputted so far
    	if (argnum == 18) {
 8001b58:	4b60      	ldr	r3, [pc, #384]	; (8001cdc <HAL_UART_RxCpltCallback+0x2e4>)
 8001b5a:	781b      	ldrb	r3, [r3, #0]
 8001b5c:	2b12      	cmp	r3, #18
 8001b5e:	d103      	bne.n	8001b68 <HAL_UART_RxCpltCallback+0x170>
    		// done receiving devices
    		argument = noarg;
 8001b60:	4b5b      	ldr	r3, [pc, #364]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001b62:	2200      	movs	r2, #0
 8001b64:	701a      	strb	r2, [r3, #0]
    	} else {
    		// receive another device
    		HAL_UART_Transmit(huart, UART1_rxBuffer, 1, 0xFFFF);
    		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 2219);
    	}
    	break;
 8001b66:	e0eb      	b.n	8001d40 <HAL_UART_RxCpltCallback+0x348>
    		HAL_UART_Transmit(huart, UART1_rxBuffer, 1, 0xFFFF);
 8001b68:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b6c:	2201      	movs	r2, #1
 8001b6e:	4957      	ldr	r1, [pc, #348]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001b70:	6878      	ldr	r0, [r7, #4]
 8001b72:	f005 ff74 	bl	8007a5e <HAL_UART_Transmit>
    		HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 2219);
 8001b76:	f640 02ab 	movw	r2, #2219	; 0x8ab
 8001b7a:	4954      	ldr	r1, [pc, #336]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001b7c:	4851      	ldr	r0, [pc, #324]	; (8001cc4 <HAL_UART_RxCpltCallback+0x2cc>)
 8001b7e:	f006 f800 	bl	8007b82 <HAL_UART_Receive_IT>
    	break;
 8001b82:	e0dd      	b.n	8001d40 <HAL_UART_RxCpltCallback+0x348>
    case vdev:
    	print_device((uint8_t)atoi(UART1_rxBuffer));
 8001b84:	4851      	ldr	r0, [pc, #324]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001b86:	f006 ff95 	bl	8008ab4 <atoi>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	b2db      	uxtb	r3, r3
 8001b8e:	4618      	mov	r0, r3
 8001b90:	f7fe ff58 	bl	8000a44 <print_device>
    	argument = noarg;
 8001b94:	4b4e      	ldr	r3, [pc, #312]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001b96:	2200      	movs	r2, #0
 8001b98:	701a      	strb	r2, [r3, #0]
    	break;
 8001b9a:	e0d1      	b.n	8001d40 <HAL_UART_RxCpltCallback+0x348>
    case edev: {
    	uint8_t device;
    	char dev_buf[3];
    	char new_name[10];
    	for (uint8_t i = 0; i < 2; ++i) {
 8001b9c:	2300      	movs	r3, #0
 8001b9e:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001ba2:	e00e      	b.n	8001bc2 <HAL_UART_RxCpltCallback+0x1ca>
    		dev_buf[i] = UART1_rxBuffer[i];
 8001ba4:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8001ba8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bac:	4947      	ldr	r1, [pc, #284]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001bae:	5c8a      	ldrb	r2, [r1, r2]
 8001bb0:	3330      	adds	r3, #48	; 0x30
 8001bb2:	443b      	add	r3, r7
 8001bb4:	f803 2c0c 	strb.w	r2, [r3, #-12]
    	for (uint8_t i = 0; i < 2; ++i) {
 8001bb8:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bbc:	3301      	adds	r3, #1
 8001bbe:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
 8001bc2:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001bc6:	2b01      	cmp	r3, #1
 8001bc8:	d9ec      	bls.n	8001ba4 <HAL_UART_RxCpltCallback+0x1ac>
    	}
    	dev_buf[2] = 0;
 8001bca:	2300      	movs	r3, #0
 8001bcc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
    	device = atoi(dev_buf) - 1;
 8001bd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f006 ff6d 	bl	8008ab4 <atoi>
 8001bda:	4603      	mov	r3, r0
 8001bdc:	b2db      	uxtb	r3, r3
 8001bde:	3b01      	subs	r3, #1
 8001be0:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
    	for (uint8_t i = 0; i < 10; ++i) {
 8001be4:	2300      	movs	r3, #0
 8001be6:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001bea:	e00f      	b.n	8001c0c <HAL_UART_RxCpltCallback+0x214>
    		new_name[i] = UART1_rxBuffer[i+2];
 8001bec:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001bf0:	1c9a      	adds	r2, r3, #2
 8001bf2:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001bf6:	4935      	ldr	r1, [pc, #212]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001bf8:	5c8a      	ldrb	r2, [r1, r2]
 8001bfa:	3330      	adds	r3, #48	; 0x30
 8001bfc:	443b      	add	r3, r7
 8001bfe:	f803 2c18 	strb.w	r2, [r3, #-24]
    	for (uint8_t i = 0; i < 10; ++i) {
 8001c02:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c06:	3301      	adds	r3, #1
 8001c08:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
 8001c0c:	f897 302e 	ldrb.w	r3, [r7, #46]	; 0x2e
 8001c10:	2b09      	cmp	r3, #9
 8001c12:	d9eb      	bls.n	8001bec <HAL_UART_RxCpltCallback+0x1f4>
    	}
    	rename_device(new_name, device);
 8001c14:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8001c18:	f107 0318 	add.w	r3, r7, #24
 8001c1c:	4611      	mov	r1, r2
 8001c1e:	4618      	mov	r0, r3
 8001c20:	f7fe ffba 	bl	8000b98 <rename_device>
    	argument = noarg;
 8001c24:	4b2a      	ldr	r3, [pc, #168]	; (8001cd0 <HAL_UART_RxCpltCallback+0x2d8>)
 8001c26:	2200      	movs	r2, #0
 8001c28:	701a      	strb	r2, [r3, #0]
    	break;
 8001c2a:	e089      	b.n	8001d40 <HAL_UART_RxCpltCallback+0x348>
    case ecom: {
    	uint8_t device;
    	uint8_t command;
		char num_buf[3];
		char new_name[10];
		for (uint8_t i = 0; i < 2; ++i) {
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001c32:	e00e      	b.n	8001c52 <HAL_UART_RxCpltCallback+0x25a>
			num_buf[i] = UART1_rxBuffer[i];
 8001c34:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8001c38:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c3c:	4923      	ldr	r1, [pc, #140]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001c3e:	5c8a      	ldrb	r2, [r1, r2]
 8001c40:	3330      	adds	r3, #48	; 0x30
 8001c42:	443b      	add	r3, r7
 8001c44:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < 2; ++i) {
 8001c48:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c4c:	3301      	adds	r3, #1
 8001c4e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
 8001c52:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8001c56:	2b01      	cmp	r3, #1
 8001c58:	d9ec      	bls.n	8001c34 <HAL_UART_RxCpltCallback+0x23c>
		}
		num_buf[2] = '/0';
 8001c5a:	2330      	movs	r3, #48	; 0x30
 8001c5c:	75bb      	strb	r3, [r7, #22]
		device = atoi(num_buf) - 1;
 8001c5e:	f107 0314 	add.w	r3, r7, #20
 8001c62:	4618      	mov	r0, r3
 8001c64:	f006 ff26 	bl	8008ab4 <atoi>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	b2db      	uxtb	r3, r3
 8001c6c:	3b01      	subs	r3, #1
 8001c6e:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
		for (uint8_t i = 0; i < 2; ++i) {
 8001c72:	2300      	movs	r3, #0
 8001c74:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001c78:	e00f      	b.n	8001c9a <HAL_UART_RxCpltCallback+0x2a2>
			num_buf[i] = UART1_rxBuffer[i+2];
 8001c7a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c7e:	1c9a      	adds	r2, r3, #2
 8001c80:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c84:	4911      	ldr	r1, [pc, #68]	; (8001ccc <HAL_UART_RxCpltCallback+0x2d4>)
 8001c86:	5c8a      	ldrb	r2, [r1, r2]
 8001c88:	3330      	adds	r3, #48	; 0x30
 8001c8a:	443b      	add	r3, r7
 8001c8c:	f803 2c1c 	strb.w	r2, [r3, #-28]
		for (uint8_t i = 0; i < 2; ++i) {
 8001c90:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c94:	3301      	adds	r3, #1
 8001c96:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
 8001c9a:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8001c9e:	2b01      	cmp	r3, #1
 8001ca0:	d9eb      	bls.n	8001c7a <HAL_UART_RxCpltCallback+0x282>
		}
		num_buf[2] = '/0';
 8001ca2:	2330      	movs	r3, #48	; 0x30
 8001ca4:	75bb      	strb	r3, [r7, #22]
		command = atoi(num_buf) - 1;
 8001ca6:	f107 0314 	add.w	r3, r7, #20
 8001caa:	4618      	mov	r0, r3
 8001cac:	f006 ff02 	bl	8008ab4 <atoi>
 8001cb0:	4603      	mov	r3, r0
 8001cb2:	b2db      	uxtb	r3, r3
 8001cb4:	3b01      	subs	r3, #1
 8001cb6:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
		for (uint8_t i = 0; i < 10; ++i) {
 8001cba:	2300      	movs	r3, #0
 8001cbc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001cc0:	e028      	b.n	8001d14 <HAL_UART_RxCpltCallback+0x31c>
 8001cc2:	bf00      	nop
 8001cc4:	200017a8 	.word	0x200017a8
 8001cc8:	20015b0c 	.word	0x20015b0c
 8001ccc:	20013b0c 	.word	0x20013b0c
 8001cd0:	20015bb7 	.word	0x20015bb7
 8001cd4:	08008d54 	.word	0x08008d54
 8001cd8:	08008d5c 	.word	0x08008d5c
 8001cdc:	20015bb8 	.word	0x20015bb8
 8001ce0:	08008d64 	.word	0x08008d64
 8001ce4:	08008d6c 	.word	0x08008d6c
 8001ce8:	08008d74 	.word	0x08008d74
 8001cec:	200017f0 	.word	0x200017f0
 8001cf0:	08008d7c 	.word	0x08008d7c
			new_name[i] = UART1_rxBuffer[i+4];
 8001cf4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cf8:	1d1a      	adds	r2, r3, #4
 8001cfa:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001cfe:	4919      	ldr	r1, [pc, #100]	; (8001d64 <HAL_UART_RxCpltCallback+0x36c>)
 8001d00:	5c8a      	ldrb	r2, [r1, r2]
 8001d02:	3330      	adds	r3, #48	; 0x30
 8001d04:	443b      	add	r3, r7
 8001d06:	f803 2c28 	strb.w	r2, [r3, #-40]
		for (uint8_t i = 0; i < 10; ++i) {
 8001d0a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d0e:	3301      	adds	r3, #1
 8001d10:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8001d14:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d9eb      	bls.n	8001cf4 <HAL_UART_RxCpltCallback+0x2fc>
		}
		rename_command(new_name, device, command);
 8001d1c:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8001d20:	f897 102a 	ldrb.w	r1, [r7, #42]	; 0x2a
 8001d24:	f107 0308 	add.w	r3, r7, #8
 8001d28:	4618      	mov	r0, r3
 8001d2a:	f7fe ff4f 	bl	8000bcc <rename_command>
		argument = noarg;
 8001d2e:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <HAL_UART_RxCpltCallback+0x370>)
 8001d30:	2200      	movs	r2, #0
 8001d32:	701a      	strb	r2, [r3, #0]
		break;
 8001d34:	e004      	b.n	8001d40 <HAL_UART_RxCpltCallback+0x348>
    }
    default:
    	argument = noarg;
 8001d36:	4b0c      	ldr	r3, [pc, #48]	; (8001d68 <HAL_UART_RxCpltCallback+0x370>)
 8001d38:	2200      	movs	r2, #0
 8001d3a:	701a      	strb	r2, [r3, #0]
    	break;
 8001d3c:	e000      	b.n	8001d40 <HAL_UART_RxCpltCallback+0x348>
        break;
 8001d3e:	bf00      	nop
    }

    if (argument == noarg) {
 8001d40:	4b09      	ldr	r3, [pc, #36]	; (8001d68 <HAL_UART_RxCpltCallback+0x370>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	2b00      	cmp	r3, #0
 8001d46:	d10a      	bne.n	8001d5e <HAL_UART_RxCpltCallback+0x366>
    	sync = 0;
 8001d48:	4b08      	ldr	r3, [pc, #32]	; (8001d6c <HAL_UART_RxCpltCallback+0x374>)
 8001d4a:	2200      	movs	r2, #0
 8001d4c:	701a      	strb	r2, [r3, #0]
    	UART1_rxBuffer[0] = '\0';
 8001d4e:	4b05      	ldr	r3, [pc, #20]	; (8001d64 <HAL_UART_RxCpltCallback+0x36c>)
 8001d50:	2200      	movs	r2, #0
 8001d52:	701a      	strb	r2, [r3, #0]
    	settings = 1;
 8001d54:	4b06      	ldr	r3, [pc, #24]	; (8001d70 <HAL_UART_RxCpltCallback+0x378>)
 8001d56:	2201      	movs	r2, #1
 8001d58:	701a      	strb	r2, [r3, #0]
 8001d5a:	e000      	b.n	8001d5e <HAL_UART_RxCpltCallback+0x366>
	if (huart != &huart1) return;
 8001d5c:	bf00      	nop
    }
}
 8001d5e:	3730      	adds	r7, #48	; 0x30
 8001d60:	46bd      	mov	sp, r7
 8001d62:	bd80      	pop	{r7, pc}
 8001d64:	20013b0c 	.word	0x20013b0c
 8001d68:	20015bb7 	.word	0x20015bb7
 8001d6c:	20015b0c 	.word	0x20015b0c
 8001d70:	20015bb4 	.word	0x20015bb4

08001d74 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001d78:	b672      	cpsid	i
}
 8001d7a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 8001d7c:	e7fe      	b.n	8001d7c <Error_Handler+0x8>
	...

08001d80 <display_menu>:
// Store Menu Commands
static char menu_commands[9][11];

void Learn_command(uint8_t com,uint8_t device);

void display_menu(Menu menu, uint8_t page, uint8_t device) {
 8001d80:	b590      	push	{r4, r7, lr}
 8001d82:	b087      	sub	sp, #28
 8001d84:	af00      	add	r7, sp, #0
 8001d86:	4603      	mov	r3, r0
 8001d88:	71fb      	strb	r3, [r7, #7]
 8001d8a:	460b      	mov	r3, r1
 8001d8c:	71bb      	strb	r3, [r7, #6]
 8001d8e:	4613      	mov	r3, r2
 8001d90:	717b      	strb	r3, [r7, #5]
	if (!page) return;
 8001d92:	79bb      	ldrb	r3, [r7, #6]
 8001d94:	2b00      	cmp	r3, #0
 8001d96:	f000 820a 	beq.w	80021ae <display_menu+0x42e>
	current_menu = menu;
 8001d9a:	4aaf      	ldr	r2, [pc, #700]	; (8002058 <display_menu+0x2d8>)
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	7013      	strb	r3, [r2, #0]
	current_page = page;
 8001da0:	4aae      	ldr	r2, [pc, #696]	; (800205c <display_menu+0x2dc>)
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	7013      	strb	r3, [r2, #0]
	switch(menu) {
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b06      	cmp	r3, #6
 8001daa:	f200 81e3 	bhi.w	8002174 <display_menu+0x3f4>
 8001dae:	a201      	add	r2, pc, #4	; (adr r2, 8001db4 <display_menu+0x34>)
 8001db0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001db4:	08001dd1 	.word	0x08001dd1
 8001db8:	08001e53 	.word	0x08001e53
 8001dbc:	08001eeb 	.word	0x08001eeb
 8001dc0:	08001f67 	.word	0x08001f67
 8001dc4:	08001fdf 	.word	0x08001fdf
 8001dc8:	080020a5 	.word	0x080020a5
 8001dcc:	08002119 	.word	0x08002119
	case main_menu:
		enable_all_buttons();
 8001dd0:	f7fe fce6 	bl	80007a0 <enable_all_buttons>
		update_buttons();
 8001dd4:	f7fe fd0e 	bl	80007f4 <update_buttons>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001dd8:	79bb      	ldrb	r3, [r7, #6]
 8001dda:	2b03      	cmp	r3, #3
 8001ddc:	f200 81e9 	bhi.w	80021b2 <display_menu+0x432>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 8001de0:	2300      	movs	r3, #0
 8001de2:	75fb      	strb	r3, [r7, #23]
 8001de4:	e01e      	b.n	8001e24 <display_menu+0xa4>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 8001de6:	7dfa      	ldrb	r2, [r7, #23]
 8001de8:	4613      	mov	r3, r2
 8001dea:	009b      	lsls	r3, r3, #2
 8001dec:	4413      	add	r3, r2
 8001dee:	005b      	lsls	r3, r3, #1
 8001df0:	4413      	add	r3, r2
 8001df2:	4a9b      	ldr	r2, [pc, #620]	; (8002060 <display_menu+0x2e0>)
 8001df4:	1898      	adds	r0, r3, r2
 8001df6:	7df9      	ldrb	r1, [r7, #23]
 8001df8:	4b98      	ldr	r3, [pc, #608]	; (800205c <display_menu+0x2dc>)
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	1e5a      	subs	r2, r3, #1
 8001dfe:	4613      	mov	r3, r2
 8001e00:	005b      	lsls	r3, r3, #1
 8001e02:	4413      	add	r3, r2
 8001e04:	005b      	lsls	r3, r3, #1
 8001e06:	440b      	add	r3, r1
 8001e08:	f241 022c 	movw	r2, #4140	; 0x102c
 8001e0c:	fb02 f303 	mul.w	r3, r2, r3
 8001e10:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001e14:	4a93      	ldr	r2, [pc, #588]	; (8002064 <display_menu+0x2e4>)
 8001e16:	4413      	add	r3, r2
 8001e18:	4619      	mov	r1, r3
 8001e1a:	f006 feaa 	bl	8008b72 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001e1e:	7dfb      	ldrb	r3, [r7, #23]
 8001e20:	3301      	adds	r3, #1
 8001e22:	75fb      	strb	r3, [r7, #23]
 8001e24:	7dfb      	ldrb	r3, [r7, #23]
 8001e26:	2b05      	cmp	r3, #5
 8001e28:	d9dd      	bls.n	8001de6 <display_menu+0x66>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 8001e2a:	4a8f      	ldr	r2, [pc, #572]	; (8002068 <display_menu+0x2e8>)
 8001e2c:	4b8f      	ldr	r3, [pc, #572]	; (800206c <display_menu+0x2ec>)
 8001e2e:	cb03      	ldmia	r3!, {r0, r1}
 8001e30:	6010      	str	r0, [r2, #0]
 8001e32:	6051      	str	r1, [r2, #4]
 8001e34:	881b      	ldrh	r3, [r3, #0]
 8001e36:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Settings");
 8001e38:	4a8d      	ldr	r2, [pc, #564]	; (8002070 <display_menu+0x2f0>)
 8001e3a:	4b8e      	ldr	r3, [pc, #568]	; (8002074 <display_menu+0x2f4>)
 8001e3c:	cb03      	ldmia	r3!, {r0, r1}
 8001e3e:	6010      	str	r0, [r2, #0]
 8001e40:	6051      	str	r1, [r2, #4]
 8001e42:	781b      	ldrb	r3, [r3, #0]
 8001e44:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 8001e46:	4b8c      	ldr	r3, [pc, #560]	; (8002078 <display_menu+0x2f8>)
 8001e48:	4a8c      	ldr	r2, [pc, #560]	; (800207c <display_menu+0x2fc>)
 8001e4a:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e4c:	c303      	stmia	r3!, {r0, r1}
 8001e4e:	801a      	strh	r2, [r3, #0]
		break;
 8001e50:	e190      	b.n	8002174 <display_menu+0x3f4>
	case settings_menu:
		enable_all_buttons();
 8001e52:	f7fe fca5 	bl	80007a0 <enable_all_buttons>
		for (uint8_t i = 5; i <= 8; ++i) {
 8001e56:	2305      	movs	r3, #5
 8001e58:	75bb      	strb	r3, [r7, #22]
 8001e5a:	e006      	b.n	8001e6a <display_menu+0xea>
			disable_button(i);
 8001e5c:	7dbb      	ldrb	r3, [r7, #22]
 8001e5e:	4618      	mov	r0, r3
 8001e60:	f7fe fc3e 	bl	80006e0 <disable_button>
		for (uint8_t i = 5; i <= 8; ++i) {
 8001e64:	7dbb      	ldrb	r3, [r7, #22]
 8001e66:	3301      	adds	r3, #1
 8001e68:	75bb      	strb	r3, [r7, #22]
 8001e6a:	7dbb      	ldrb	r3, [r7, #22]
 8001e6c:	2b08      	cmp	r3, #8
 8001e6e:	d9f5      	bls.n	8001e5c <display_menu+0xdc>
		}
		update_buttons();
 8001e70:	f7fe fcc0 	bl	80007f4 <update_buttons>
		strcpy(menu_commands[0], "PC Command");
 8001e74:	4b7a      	ldr	r3, [pc, #488]	; (8002060 <display_menu+0x2e0>)
 8001e76:	4a82      	ldr	r2, [pc, #520]	; (8002080 <display_menu+0x300>)
 8001e78:	ca07      	ldmia	r2, {r0, r1, r2}
 8001e7a:	c303      	stmia	r3!, {r0, r1}
 8001e7c:	801a      	strh	r2, [r3, #0]
 8001e7e:	3302      	adds	r3, #2
 8001e80:	0c12      	lsrs	r2, r2, #16
 8001e82:	701a      	strb	r2, [r3, #0]
		strcpy(menu_commands[1], "Learn Cmd");
 8001e84:	4a7f      	ldr	r2, [pc, #508]	; (8002084 <display_menu+0x304>)
 8001e86:	4b80      	ldr	r3, [pc, #512]	; (8002088 <display_menu+0x308>)
 8001e88:	cb03      	ldmia	r3!, {r0, r1}
 8001e8a:	6010      	str	r0, [r2, #0]
 8001e8c:	6051      	str	r1, [r2, #4]
 8001e8e:	881b      	ldrh	r3, [r3, #0]
 8001e90:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[2],"TimeoutOn");
 8001e92:	4a7e      	ldr	r2, [pc, #504]	; (800208c <display_menu+0x30c>)
 8001e94:	4b7e      	ldr	r3, [pc, #504]	; (8002090 <display_menu+0x310>)
 8001e96:	cb03      	ldmia	r3!, {r0, r1}
 8001e98:	6010      	str	r0, [r2, #0]
 8001e9a:	6051      	str	r1, [r2, #4]
 8001e9c:	881b      	ldrh	r3, [r3, #0]
 8001e9e:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[3],"TimeoutOff");	
 8001ea0:	4b6f      	ldr	r3, [pc, #444]	; (8002060 <display_menu+0x2e0>)
 8001ea2:	497c      	ldr	r1, [pc, #496]	; (8002094 <display_menu+0x314>)
 8001ea4:	f103 0221 	add.w	r2, r3, #33	; 0x21
 8001ea8:	460b      	mov	r3, r1
 8001eaa:	cb03      	ldmia	r3!, {r0, r1}
 8001eac:	6010      	str	r0, [r2, #0]
 8001eae:	6051      	str	r1, [r2, #4]
 8001eb0:	8819      	ldrh	r1, [r3, #0]
 8001eb2:	789b      	ldrb	r3, [r3, #2]
 8001eb4:	8111      	strh	r1, [r2, #8]
 8001eb6:	7293      	strb	r3, [r2, #10]
		for (uint8_t i = 4; i <= 7; ++i) {
 8001eb8:	2304      	movs	r3, #4
 8001eba:	757b      	strb	r3, [r7, #21]
 8001ebc:	e00c      	b.n	8001ed8 <display_menu+0x158>
			menu_commands[i][0] = '\0';
 8001ebe:	7d7a      	ldrb	r2, [r7, #21]
 8001ec0:	4967      	ldr	r1, [pc, #412]	; (8002060 <display_menu+0x2e0>)
 8001ec2:	4613      	mov	r3, r2
 8001ec4:	009b      	lsls	r3, r3, #2
 8001ec6:	4413      	add	r3, r2
 8001ec8:	005b      	lsls	r3, r3, #1
 8001eca:	4413      	add	r3, r2
 8001ecc:	440b      	add	r3, r1
 8001ece:	2200      	movs	r2, #0
 8001ed0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 4; i <= 7; ++i) {
 8001ed2:	7d7b      	ldrb	r3, [r7, #21]
 8001ed4:	3301      	adds	r3, #1
 8001ed6:	757b      	strb	r3, [r7, #21]
 8001ed8:	7d7b      	ldrb	r3, [r7, #21]
 8001eda:	2b07      	cmp	r3, #7
 8001edc:	d9ef      	bls.n	8001ebe <display_menu+0x13e>
		}
		strcpy(menu_commands[8], "Main Menu");
 8001ede:	4b66      	ldr	r3, [pc, #408]	; (8002078 <display_menu+0x2f8>)
 8001ee0:	4a6d      	ldr	r2, [pc, #436]	; (8002098 <display_menu+0x318>)
 8001ee2:	ca07      	ldmia	r2, {r0, r1, r2}
 8001ee4:	c303      	stmia	r3!, {r0, r1}
 8001ee6:	801a      	strh	r2, [r3, #0]
		break;
 8001ee8:	e144      	b.n	8002174 <display_menu+0x3f4>
	case device_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 8001eea:	2300      	movs	r3, #0
 8001eec:	753b      	strb	r3, [r7, #20]
 8001eee:	e023      	b.n	8001f38 <display_menu+0x1b8>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 8001ef0:	7d3a      	ldrb	r2, [r7, #20]
 8001ef2:	4613      	mov	r3, r2
 8001ef4:	009b      	lsls	r3, r3, #2
 8001ef6:	4413      	add	r3, r2
 8001ef8:	005b      	lsls	r3, r3, #1
 8001efa:	4413      	add	r3, r2
 8001efc:	4a58      	ldr	r2, [pc, #352]	; (8002060 <display_menu+0x2e0>)
 8001efe:	189c      	adds	r4, r3, r2
 8001f00:	7979      	ldrb	r1, [r7, #5]
 8001f02:	7d38      	ldrb	r0, [r7, #20]
 8001f04:	4b55      	ldr	r3, [pc, #340]	; (800205c <display_menu+0x2dc>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
 8001f08:	1e5a      	subs	r2, r3, #1
 8001f0a:	4613      	mov	r3, r2
 8001f0c:	005b      	lsls	r3, r3, #1
 8001f0e:	4413      	add	r3, r2
 8001f10:	005b      	lsls	r3, r3, #1
 8001f12:	4403      	add	r3, r0
 8001f14:	22ac      	movs	r2, #172	; 0xac
 8001f16:	fb03 f202 	mul.w	r2, r3, r2
 8001f1a:	f241 032c 	movw	r3, #4140	; 0x102c
 8001f1e:	fb01 f303 	mul.w	r3, r1, r3
 8001f22:	4413      	add	r3, r2
 8001f24:	33a0      	adds	r3, #160	; 0xa0
 8001f26:	4a4f      	ldr	r2, [pc, #316]	; (8002064 <display_menu+0x2e4>)
 8001f28:	4413      	add	r3, r2
 8001f2a:	4619      	mov	r1, r3
 8001f2c:	4620      	mov	r0, r4
 8001f2e:	f006 fe20 	bl	8008b72 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001f32:	7d3b      	ldrb	r3, [r7, #20]
 8001f34:	3301      	adds	r3, #1
 8001f36:	753b      	strb	r3, [r7, #20]
 8001f38:	7d3b      	ldrb	r3, [r7, #20]
 8001f3a:	2b05      	cmp	r3, #5
 8001f3c:	d9d8      	bls.n	8001ef0 <display_menu+0x170>
		}
		strcpy(menu_commands[6], "Prev Page");
 8001f3e:	4a4a      	ldr	r2, [pc, #296]	; (8002068 <display_menu+0x2e8>)
 8001f40:	4b4a      	ldr	r3, [pc, #296]	; (800206c <display_menu+0x2ec>)
 8001f42:	cb03      	ldmia	r3!, {r0, r1}
 8001f44:	6010      	str	r0, [r2, #0]
 8001f46:	6051      	str	r1, [r2, #4]
 8001f48:	881b      	ldrh	r3, [r3, #0]
 8001f4a:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Main Menu");
 8001f4c:	4a48      	ldr	r2, [pc, #288]	; (8002070 <display_menu+0x2f0>)
 8001f4e:	4b52      	ldr	r3, [pc, #328]	; (8002098 <display_menu+0x318>)
 8001f50:	cb03      	ldmia	r3!, {r0, r1}
 8001f52:	6010      	str	r0, [r2, #0]
 8001f54:	6051      	str	r1, [r2, #4]
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 8001f5a:	4b47      	ldr	r3, [pc, #284]	; (8002078 <display_menu+0x2f8>)
 8001f5c:	4a47      	ldr	r2, [pc, #284]	; (800207c <display_menu+0x2fc>)
 8001f5e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001f60:	c303      	stmia	r3!, {r0, r1}
 8001f62:	801a      	strh	r2, [r3, #0]
		break;
 8001f64:	e106      	b.n	8002174 <display_menu+0x3f4>
	case learn_device_menu:
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001f66:	79bb      	ldrb	r3, [r7, #6]
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	f200 8124 	bhi.w	80021b6 <display_menu+0x436>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 8001f6e:	2300      	movs	r3, #0
 8001f70:	74fb      	strb	r3, [r7, #19]
 8001f72:	e01e      	b.n	8001fb2 <display_menu+0x232>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 8001f74:	7cfa      	ldrb	r2, [r7, #19]
 8001f76:	4613      	mov	r3, r2
 8001f78:	009b      	lsls	r3, r3, #2
 8001f7a:	4413      	add	r3, r2
 8001f7c:	005b      	lsls	r3, r3, #1
 8001f7e:	4413      	add	r3, r2
 8001f80:	4a37      	ldr	r2, [pc, #220]	; (8002060 <display_menu+0x2e0>)
 8001f82:	1898      	adds	r0, r3, r2
 8001f84:	7cf9      	ldrb	r1, [r7, #19]
 8001f86:	4b35      	ldr	r3, [pc, #212]	; (800205c <display_menu+0x2dc>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	1e5a      	subs	r2, r3, #1
 8001f8c:	4613      	mov	r3, r2
 8001f8e:	005b      	lsls	r3, r3, #1
 8001f90:	4413      	add	r3, r2
 8001f92:	005b      	lsls	r3, r3, #1
 8001f94:	440b      	add	r3, r1
 8001f96:	f241 022c 	movw	r2, #4140	; 0x102c
 8001f9a:	fb02 f303 	mul.w	r3, r2, r3
 8001f9e:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001fa2:	4a30      	ldr	r2, [pc, #192]	; (8002064 <display_menu+0x2e4>)
 8001fa4:	4413      	add	r3, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f006 fde3 	bl	8008b72 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001fac:	7cfb      	ldrb	r3, [r7, #19]
 8001fae:	3301      	adds	r3, #1
 8001fb0:	74fb      	strb	r3, [r7, #19]
 8001fb2:	7cfb      	ldrb	r3, [r7, #19]
 8001fb4:	2b05      	cmp	r3, #5
 8001fb6:	d9dd      	bls.n	8001f74 <display_menu+0x1f4>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 8001fb8:	4a2b      	ldr	r2, [pc, #172]	; (8002068 <display_menu+0x2e8>)
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <display_menu+0x2ec>)
 8001fbc:	cb03      	ldmia	r3!, {r0, r1}
 8001fbe:	6010      	str	r0, [r2, #0]
 8001fc0:	6051      	str	r1, [r2, #4]
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Quit");
 8001fc6:	4b2a      	ldr	r3, [pc, #168]	; (8002070 <display_menu+0x2f0>)
 8001fc8:	4a34      	ldr	r2, [pc, #208]	; (800209c <display_menu+0x31c>)
 8001fca:	6810      	ldr	r0, [r2, #0]
 8001fcc:	6018      	str	r0, [r3, #0]
 8001fce:	7912      	ldrb	r2, [r2, #4]
 8001fd0:	711a      	strb	r2, [r3, #4]
		strcpy(menu_commands[8], "Next Page");
 8001fd2:	4b29      	ldr	r3, [pc, #164]	; (8002078 <display_menu+0x2f8>)
 8001fd4:	4a29      	ldr	r2, [pc, #164]	; (800207c <display_menu+0x2fc>)
 8001fd6:	ca07      	ldmia	r2, {r0, r1, r2}
 8001fd8:	c303      	stmia	r3!, {r0, r1}
 8001fda:	801a      	strh	r2, [r3, #0]
		break;
 8001fdc:	e0ca      	b.n	8002174 <display_menu+0x3f4>
	case learn_command_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 8001fde:	2300      	movs	r3, #0
 8001fe0:	74bb      	strb	r3, [r7, #18]
 8001fe2:	e023      	b.n	800202c <display_menu+0x2ac>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 8001fe4:	7cba      	ldrb	r2, [r7, #18]
 8001fe6:	4613      	mov	r3, r2
 8001fe8:	009b      	lsls	r3, r3, #2
 8001fea:	4413      	add	r3, r2
 8001fec:	005b      	lsls	r3, r3, #1
 8001fee:	4413      	add	r3, r2
 8001ff0:	4a1b      	ldr	r2, [pc, #108]	; (8002060 <display_menu+0x2e0>)
 8001ff2:	189c      	adds	r4, r3, r2
 8001ff4:	7979      	ldrb	r1, [r7, #5]
 8001ff6:	7cb8      	ldrb	r0, [r7, #18]
 8001ff8:	4b18      	ldr	r3, [pc, #96]	; (800205c <display_menu+0x2dc>)
 8001ffa:	781b      	ldrb	r3, [r3, #0]
 8001ffc:	1e5a      	subs	r2, r3, #1
 8001ffe:	4613      	mov	r3, r2
 8002000:	005b      	lsls	r3, r3, #1
 8002002:	4413      	add	r3, r2
 8002004:	005b      	lsls	r3, r3, #1
 8002006:	4403      	add	r3, r0
 8002008:	22ac      	movs	r2, #172	; 0xac
 800200a:	fb03 f202 	mul.w	r2, r3, r2
 800200e:	f241 032c 	movw	r3, #4140	; 0x102c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	33a0      	adds	r3, #160	; 0xa0
 800201a:	4a12      	ldr	r2, [pc, #72]	; (8002064 <display_menu+0x2e4>)
 800201c:	4413      	add	r3, r2
 800201e:	4619      	mov	r1, r3
 8002020:	4620      	mov	r0, r4
 8002022:	f006 fda6 	bl	8008b72 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8002026:	7cbb      	ldrb	r3, [r7, #18]
 8002028:	3301      	adds	r3, #1
 800202a:	74bb      	strb	r3, [r7, #18]
 800202c:	7cbb      	ldrb	r3, [r7, #18]
 800202e:	2b05      	cmp	r3, #5
 8002030:	d9d8      	bls.n	8001fe4 <display_menu+0x264>
		}
		strcpy(menu_commands[6], "Prev Page");
 8002032:	4a0d      	ldr	r2, [pc, #52]	; (8002068 <display_menu+0x2e8>)
 8002034:	4b0d      	ldr	r3, [pc, #52]	; (800206c <display_menu+0x2ec>)
 8002036:	cb03      	ldmia	r3!, {r0, r1}
 8002038:	6010      	str	r0, [r2, #0]
 800203a:	6051      	str	r1, [r2, #4]
 800203c:	881b      	ldrh	r3, [r3, #0]
 800203e:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Devices");
 8002040:	4a0b      	ldr	r2, [pc, #44]	; (8002070 <display_menu+0x2f0>)
 8002042:	4b17      	ldr	r3, [pc, #92]	; (80020a0 <display_menu+0x320>)
 8002044:	cb03      	ldmia	r3!, {r0, r1}
 8002046:	6010      	str	r0, [r2, #0]
 8002048:	6051      	str	r1, [r2, #4]
		strcpy(menu_commands[8], "Next Page");
 800204a:	4b0b      	ldr	r3, [pc, #44]	; (8002078 <display_menu+0x2f8>)
 800204c:	4a0b      	ldr	r2, [pc, #44]	; (800207c <display_menu+0x2fc>)
 800204e:	ca07      	ldmia	r2, {r0, r1, r2}
 8002050:	c303      	stmia	r3!, {r0, r1}
 8002052:	801a      	strh	r2, [r3, #0]
		break;
 8002054:	e08e      	b.n	8002174 <display_menu+0x3f4>
 8002056:	bf00      	nop
 8002058:	200017ec 	.word	0x200017ec
 800205c:	20015bb9 	.word	0x20015bb9
 8002060:	20015bbc 	.word	0x20015bbc
 8002064:	200017f0 	.word	0x200017f0
 8002068:	20015bfe 	.word	0x20015bfe
 800206c:	08008d84 	.word	0x08008d84
 8002070:	20015c09 	.word	0x20015c09
 8002074:	08008d90 	.word	0x08008d90
 8002078:	20015c14 	.word	0x20015c14
 800207c:	08008d9c 	.word	0x08008d9c
 8002080:	08008da8 	.word	0x08008da8
 8002084:	20015bc7 	.word	0x20015bc7
 8002088:	08008db4 	.word	0x08008db4
 800208c:	20015bd2 	.word	0x20015bd2
 8002090:	08008dc0 	.word	0x08008dc0
 8002094:	08008dcc 	.word	0x08008dcc
 8002098:	08008dd8 	.word	0x08008dd8
 800209c:	08008de4 	.word	0x08008de4
 80020a0:	08008dec 	.word	0x08008dec
	case awaiting_menu:
		strcpy(menu_commands[0], "Press");
 80020a4:	4b46      	ldr	r3, [pc, #280]	; (80021c0 <display_menu+0x440>)
 80020a6:	4a47      	ldr	r2, [pc, #284]	; (80021c4 <display_menu+0x444>)
 80020a8:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020ac:	6018      	str	r0, [r3, #0]
 80020ae:	3304      	adds	r3, #4
 80020b0:	8019      	strh	r1, [r3, #0]
		strcpy(menu_commands[1], "Button");
 80020b2:	4b45      	ldr	r3, [pc, #276]	; (80021c8 <display_menu+0x448>)
 80020b4:	4a45      	ldr	r2, [pc, #276]	; (80021cc <display_menu+0x44c>)
 80020b6:	6810      	ldr	r0, [r2, #0]
 80020b8:	6018      	str	r0, [r3, #0]
 80020ba:	8891      	ldrh	r1, [r2, #4]
 80020bc:	7992      	ldrb	r2, [r2, #6]
 80020be:	8099      	strh	r1, [r3, #4]
 80020c0:	719a      	strb	r2, [r3, #6]
		strcpy(menu_commands[2], "On");
 80020c2:	4b43      	ldr	r3, [pc, #268]	; (80021d0 <display_menu+0x450>)
 80020c4:	4a43      	ldr	r2, [pc, #268]	; (80021d4 <display_menu+0x454>)
 80020c6:	8811      	ldrh	r1, [r2, #0]
 80020c8:	7892      	ldrb	r2, [r2, #2]
 80020ca:	8019      	strh	r1, [r3, #0]
 80020cc:	709a      	strb	r2, [r3, #2]
		strcpy(menu_commands[3], "External");
 80020ce:	4a42      	ldr	r2, [pc, #264]	; (80021d8 <display_menu+0x458>)
 80020d0:	4b42      	ldr	r3, [pc, #264]	; (80021dc <display_menu+0x45c>)
 80020d2:	cb03      	ldmia	r3!, {r0, r1}
 80020d4:	6010      	str	r0, [r2, #0]
 80020d6:	6051      	str	r1, [r2, #4]
 80020d8:	781b      	ldrb	r3, [r3, #0]
 80020da:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[4], "Remote");
 80020dc:	4b40      	ldr	r3, [pc, #256]	; (80021e0 <display_menu+0x460>)
 80020de:	4a41      	ldr	r2, [pc, #260]	; (80021e4 <display_menu+0x464>)
 80020e0:	e892 0003 	ldmia.w	r2, {r0, r1}
 80020e4:	6018      	str	r0, [r3, #0]
 80020e6:	3304      	adds	r3, #4
 80020e8:	8019      	strh	r1, [r3, #0]
 80020ea:	3302      	adds	r3, #2
 80020ec:	0c0a      	lsrs	r2, r1, #16
 80020ee:	701a      	strb	r2, [r3, #0]
		for(int i = 5; i<=8; ++i){
 80020f0:	2305      	movs	r3, #5
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	e00c      	b.n	8002110 <display_menu+0x390>
			menu_commands[i][0]= '\0';
 80020f6:	4932      	ldr	r1, [pc, #200]	; (80021c0 <display_menu+0x440>)
 80020f8:	68fa      	ldr	r2, [r7, #12]
 80020fa:	4613      	mov	r3, r2
 80020fc:	009b      	lsls	r3, r3, #2
 80020fe:	4413      	add	r3, r2
 8002100:	005b      	lsls	r3, r3, #1
 8002102:	4413      	add	r3, r2
 8002104:	440b      	add	r3, r1
 8002106:	2200      	movs	r2, #0
 8002108:	701a      	strb	r2, [r3, #0]
		for(int i = 5; i<=8; ++i){
 800210a:	68fb      	ldr	r3, [r7, #12]
 800210c:	3301      	adds	r3, #1
 800210e:	60fb      	str	r3, [r7, #12]
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2b08      	cmp	r3, #8
 8002114:	ddef      	ble.n	80020f6 <display_menu+0x376>
		}
		break;
 8002116:	e02d      	b.n	8002174 <display_menu+0x3f4>
	case xbee_menu:
		strcpy(menu_commands[0], "PC");
 8002118:	4b29      	ldr	r3, [pc, #164]	; (80021c0 <display_menu+0x440>)
 800211a:	4a33      	ldr	r2, [pc, #204]	; (80021e8 <display_menu+0x468>)
 800211c:	6812      	ldr	r2, [r2, #0]
 800211e:	4611      	mov	r1, r2
 8002120:	8019      	strh	r1, [r3, #0]
 8002122:	3302      	adds	r3, #2
 8002124:	0c12      	lsrs	r2, r2, #16
 8002126:	701a      	strb	r2, [r3, #0]
		strcpy(menu_commands[1], "Command");
 8002128:	4a27      	ldr	r2, [pc, #156]	; (80021c8 <display_menu+0x448>)
 800212a:	4b30      	ldr	r3, [pc, #192]	; (80021ec <display_menu+0x46c>)
 800212c:	cb03      	ldmia	r3!, {r0, r1}
 800212e:	6010      	str	r0, [r2, #0]
 8002130:	6051      	str	r1, [r2, #4]
		strcpy(menu_commands[2], "Mode");
 8002132:	4b27      	ldr	r3, [pc, #156]	; (80021d0 <display_menu+0x450>)
 8002134:	4a2e      	ldr	r2, [pc, #184]	; (80021f0 <display_menu+0x470>)
 8002136:	6810      	ldr	r0, [r2, #0]
 8002138:	6018      	str	r0, [r3, #0]
 800213a:	7912      	ldrb	r2, [r2, #4]
 800213c:	711a      	strb	r2, [r3, #4]
		for(uint16_t i =3; i<8; ++i){
 800213e:	2303      	movs	r3, #3
 8002140:	817b      	strh	r3, [r7, #10]
 8002142:	e00c      	b.n	800215e <display_menu+0x3de>
			menu_commands[i][0]='\0';
 8002144:	897a      	ldrh	r2, [r7, #10]
 8002146:	491e      	ldr	r1, [pc, #120]	; (80021c0 <display_menu+0x440>)
 8002148:	4613      	mov	r3, r2
 800214a:	009b      	lsls	r3, r3, #2
 800214c:	4413      	add	r3, r2
 800214e:	005b      	lsls	r3, r3, #1
 8002150:	4413      	add	r3, r2
 8002152:	440b      	add	r3, r1
 8002154:	2200      	movs	r2, #0
 8002156:	701a      	strb	r2, [r3, #0]
		for(uint16_t i =3; i<8; ++i){
 8002158:	897b      	ldrh	r3, [r7, #10]
 800215a:	3301      	adds	r3, #1
 800215c:	817b      	strh	r3, [r7, #10]
 800215e:	897b      	ldrh	r3, [r7, #10]
 8002160:	2b07      	cmp	r3, #7
 8002162:	d9ef      	bls.n	8002144 <display_menu+0x3c4>
		}
		strcpy(menu_commands[8],"Back");
 8002164:	4b23      	ldr	r3, [pc, #140]	; (80021f4 <display_menu+0x474>)
 8002166:	4a24      	ldr	r2, [pc, #144]	; (80021f8 <display_menu+0x478>)
 8002168:	e892 0003 	ldmia.w	r2, {r0, r1}
 800216c:	6018      	str	r0, [r3, #0]
 800216e:	3304      	adds	r3, #4
 8002170:	7019      	strb	r1, [r3, #0]
		break;
 8002172:	bf00      	nop
	}
	for (uint8_t i = 1; i <= 9; ++i) {
 8002174:	2301      	movs	r3, #1
 8002176:	727b      	strb	r3, [r7, #9]
 8002178:	e015      	b.n	80021a6 <display_menu+0x426>
		erase_buffer();
 800217a:	f000 fccb 	bl	8002b14 <erase_buffer>
		draw_string(menu_commands[i-1], white);
 800217e:	7a7b      	ldrb	r3, [r7, #9]
 8002180:	1e5a      	subs	r2, r3, #1
 8002182:	4613      	mov	r3, r2
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	4413      	add	r3, r2
 8002188:	005b      	lsls	r3, r3, #1
 800218a:	4413      	add	r3, r2
 800218c:	4a0c      	ldr	r2, [pc, #48]	; (80021c0 <display_menu+0x440>)
 800218e:	4413      	add	r3, r2
 8002190:	2101      	movs	r1, #1
 8002192:	4618      	mov	r0, r3
 8002194:	f000 fdc3 	bl	8002d1e <draw_string>
		update_display(i);
 8002198:	7a7b      	ldrb	r3, [r7, #9]
 800219a:	4618      	mov	r0, r3
 800219c:	f000 fbc6 	bl	800292c <update_display>
	for (uint8_t i = 1; i <= 9; ++i) {
 80021a0:	7a7b      	ldrb	r3, [r7, #9]
 80021a2:	3301      	adds	r3, #1
 80021a4:	727b      	strb	r3, [r7, #9]
 80021a6:	7a7b      	ldrb	r3, [r7, #9]
 80021a8:	2b09      	cmp	r3, #9
 80021aa:	d9e6      	bls.n	800217a <display_menu+0x3fa>
 80021ac:	e004      	b.n	80021b8 <display_menu+0x438>
	if (!page) return;
 80021ae:	bf00      	nop
 80021b0:	e002      	b.n	80021b8 <display_menu+0x438>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 80021b2:	bf00      	nop
 80021b4:	e000      	b.n	80021b8 <display_menu+0x438>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 80021b6:	bf00      	nop
	}
}
 80021b8:	371c      	adds	r7, #28
 80021ba:	46bd      	mov	sp, r7
 80021bc:	bd90      	pop	{r4, r7, pc}
 80021be:	bf00      	nop
 80021c0:	20015bbc 	.word	0x20015bbc
 80021c4:	08008df4 	.word	0x08008df4
 80021c8:	20015bc7 	.word	0x20015bc7
 80021cc:	08008dfc 	.word	0x08008dfc
 80021d0:	20015bd2 	.word	0x20015bd2
 80021d4:	08008e04 	.word	0x08008e04
 80021d8:	20015bdd 	.word	0x20015bdd
 80021dc:	08008e08 	.word	0x08008e08
 80021e0:	20015be8 	.word	0x20015be8
 80021e4:	08008e14 	.word	0x08008e14
 80021e8:	08008e1c 	.word	0x08008e1c
 80021ec:	08008e20 	.word	0x08008e20
 80021f0:	08008e28 	.word	0x08008e28
 80021f4:	20015c14 	.word	0x20015c14
 80021f8:	08008e30 	.word	0x08008e30

080021fc <button_pressed>:

void button_pressed(uint8_t button) {
 80021fc:	b580      	push	{r7, lr}
 80021fe:	b084      	sub	sp, #16
 8002200:	af00      	add	r7, sp, #0
 8002202:	4603      	mov	r3, r0
 8002204:	71fb      	strb	r3, [r7, #7]
	static uint8_t in_device_menu = 0;
	static uint8_t active_device;
	if (!button || button > 9) return;
 8002206:	79fb      	ldrb	r3, [r7, #7]
 8002208:	2b00      	cmp	r3, #0
 800220a:	f000 8234 	beq.w	8002676 <button_pressed+0x47a>
 800220e:	79fb      	ldrb	r3, [r7, #7]
 8002210:	2b09      	cmp	r3, #9
 8002212:	f200 8230 	bhi.w	8002676 <button_pressed+0x47a>

	switch(current_menu) {
 8002216:	4baf      	ldr	r3, [pc, #700]	; (80024d4 <button_pressed+0x2d8>)
 8002218:	781b      	ldrb	r3, [r3, #0]
 800221a:	2b06      	cmp	r3, #6
 800221c:	f200 822d 	bhi.w	800267a <button_pressed+0x47e>
 8002220:	a201      	add	r2, pc, #4	; (adr r2, 8002228 <button_pressed+0x2c>)
 8002222:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002226:	bf00      	nop
 8002228:	08002245 	.word	0x08002245
 800222c:	080022ed 	.word	0x080022ed
 8002230:	080023ab 	.word	0x080023ab
 8002234:	08002491 	.word	0x08002491
 8002238:	0800256f 	.word	0x0800256f
 800223c:	0800267b 	.word	0x0800267b
 8002240:	0800265b 	.word	0x0800265b
	case main_menu:
		switch(button) {
 8002244:	79fb      	ldrb	r3, [r7, #7]
 8002246:	2b09      	cmp	r3, #9
 8002248:	d01c      	beq.n	8002284 <button_pressed+0x88>
 800224a:	2b09      	cmp	r3, #9
 800224c:	dc2a      	bgt.n	80022a4 <button_pressed+0xa8>
 800224e:	2b07      	cmp	r3, #7
 8002250:	d002      	beq.n	8002258 <button_pressed+0x5c>
 8002252:	2b08      	cmp	r3, #8
 8002254:	d010      	beq.n	8002278 <button_pressed+0x7c>
 8002256:	e025      	b.n	80022a4 <button_pressed+0xa8>
		case 7: // Previous
			display_menu(main_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 8002258:	4b9f      	ldr	r3, [pc, #636]	; (80024d8 <button_pressed+0x2dc>)
 800225a:	781b      	ldrb	r3, [r3, #0]
 800225c:	2b01      	cmp	r3, #1
 800225e:	d004      	beq.n	800226a <button_pressed+0x6e>
 8002260:	4b9d      	ldr	r3, [pc, #628]	; (80024d8 <button_pressed+0x2dc>)
 8002262:	781b      	ldrb	r3, [r3, #0]
 8002264:	3b01      	subs	r3, #1
 8002266:	b2db      	uxtb	r3, r3
 8002268:	e000      	b.n	800226c <button_pressed+0x70>
 800226a:	2303      	movs	r3, #3
 800226c:	2200      	movs	r2, #0
 800226e:	4619      	mov	r1, r3
 8002270:	2000      	movs	r0, #0
 8002272:	f7ff fd85 	bl	8001d80 <display_menu>
			break;
 8002276:	e035      	b.n	80022e4 <button_pressed+0xe8>
		case 8: // Settings
			display_menu(settings_menu, 1, 0);
 8002278:	2200      	movs	r2, #0
 800227a:	2101      	movs	r1, #1
 800227c:	2001      	movs	r0, #1
 800227e:	f7ff fd7f 	bl	8001d80 <display_menu>
			break;
 8002282:	e02f      	b.n	80022e4 <button_pressed+0xe8>
		case 9: // Next
			display_menu(main_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 8002284:	4b94      	ldr	r3, [pc, #592]	; (80024d8 <button_pressed+0x2dc>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	2b03      	cmp	r3, #3
 800228a:	d004      	beq.n	8002296 <button_pressed+0x9a>
 800228c:	4b92      	ldr	r3, [pc, #584]	; (80024d8 <button_pressed+0x2dc>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	3301      	adds	r3, #1
 8002292:	b2db      	uxtb	r3, r3
 8002294:	e000      	b.n	8002298 <button_pressed+0x9c>
 8002296:	2301      	movs	r3, #1
 8002298:	2200      	movs	r2, #0
 800229a:	4619      	mov	r1, r3
 800229c:	2000      	movs	r0, #0
 800229e:	f7ff fd6f 	bl	8001d80 <display_menu>
			break;
 80022a2:	e01f      	b.n	80022e4 <button_pressed+0xe8>
		default: // Device Selected
			active_device =  button - 1 + (6 * (current_page - 1));
 80022a4:	4b8c      	ldr	r3, [pc, #560]	; (80024d8 <button_pressed+0x2dc>)
 80022a6:	781b      	ldrb	r3, [r3, #0]
 80022a8:	461a      	mov	r2, r3
 80022aa:	0052      	lsls	r2, r2, #1
 80022ac:	4413      	add	r3, r2
 80022ae:	005b      	lsls	r3, r3, #1
 80022b0:	b2da      	uxtb	r2, r3
 80022b2:	79fb      	ldrb	r3, [r7, #7]
 80022b4:	4413      	add	r3, r2
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	3b07      	subs	r3, #7
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b87      	ldr	r3, [pc, #540]	; (80024dc <button_pressed+0x2e0>)
 80022be:	701a      	strb	r2, [r3, #0]
			display_menu(device_menu, 1, button - 1 + (6 * (current_page - 1)));
 80022c0:	4b85      	ldr	r3, [pc, #532]	; (80024d8 <button_pressed+0x2dc>)
 80022c2:	781b      	ldrb	r3, [r3, #0]
 80022c4:	461a      	mov	r2, r3
 80022c6:	0052      	lsls	r2, r2, #1
 80022c8:	4413      	add	r3, r2
 80022ca:	005b      	lsls	r3, r3, #1
 80022cc:	b2da      	uxtb	r2, r3
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	4413      	add	r3, r2
 80022d2:	b2db      	uxtb	r3, r3
 80022d4:	3b07      	subs	r3, #7
 80022d6:	b2db      	uxtb	r3, r3
 80022d8:	461a      	mov	r2, r3
 80022da:	2101      	movs	r1, #1
 80022dc:	2002      	movs	r0, #2
 80022de:	f7ff fd4f 	bl	8001d80 <display_menu>
			break;
 80022e2:	bf00      	nop
		}
		in_device_menu = 0;
 80022e4:	4b7e      	ldr	r3, [pc, #504]	; (80024e0 <button_pressed+0x2e4>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	701a      	strb	r2, [r3, #0]
		break;
 80022ea:	e1c7      	b.n	800267c <button_pressed+0x480>

	case settings_menu:
		switch(button) {
 80022ec:	79fb      	ldrb	r3, [r7, #7]
 80022ee:	3b01      	subs	r3, #1
 80022f0:	2b08      	cmp	r3, #8
 80022f2:	d852      	bhi.n	800239a <button_pressed+0x19e>
 80022f4:	a201      	add	r2, pc, #4	; (adr r2, 80022fc <button_pressed+0x100>)
 80022f6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022fa:	bf00      	nop
 80022fc:	08002321 	.word	0x08002321
 8002300:	0800234f 	.word	0x0800234f
 8002304:	0800235f 	.word	0x0800235f
 8002308:	08002375 	.word	0x08002375
 800230c:	0800239b 	.word	0x0800239b
 8002310:	0800239b 	.word	0x0800239b
 8002314:	0800239b 	.word	0x0800239b
 8002318:	0800239b 	.word	0x0800239b
 800231c:	0800238b 	.word	0x0800238b
		case 1:
			init_xbee_communication();
 8002320:	f7fe fb82 	bl	8000a28 <init_xbee_communication>
			display_menu(xbee_menu,1,0);
 8002324:	2200      	movs	r2, #0
 8002326:	2101      	movs	r1, #1
 8002328:	2006      	movs	r0, #6
 800232a:	f7ff fd29 	bl	8001d80 <display_menu>
			for (uint8_t i = 1; i <= 7; ++i) {
 800232e:	2301      	movs	r3, #1
 8002330:	73fb      	strb	r3, [r7, #15]
 8002332:	e006      	b.n	8002342 <button_pressed+0x146>
				disable_button(i);
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	4618      	mov	r0, r3
 8002338:	f7fe f9d2 	bl	80006e0 <disable_button>
			for (uint8_t i = 1; i <= 7; ++i) {
 800233c:	7bfb      	ldrb	r3, [r7, #15]
 800233e:	3301      	adds	r3, #1
 8002340:	73fb      	strb	r3, [r7, #15]
 8002342:	7bfb      	ldrb	r3, [r7, #15]
 8002344:	2b07      	cmp	r3, #7
 8002346:	d9f5      	bls.n	8002334 <button_pressed+0x138>
			}	
			update_buttons();
 8002348:	f7fe fa54 	bl	80007f4 <update_buttons>
			// Inform User that they are in PC mode somehow
			break;
 800234c:	e026      	b.n	800239c <button_pressed+0x1a0>
		case 2:
			// Select Device, then command, possibly while flashing the screens.
			// Prompt user to press remote button.
			display_menu(learn_device_menu, 1, 0);
 800234e:	2200      	movs	r2, #0
 8002350:	2101      	movs	r1, #1
 8002352:	2003      	movs	r0, #3
 8002354:	f7ff fd14 	bl	8001d80 <display_menu>
			enable_all_buttons();
 8002358:	f7fe fa22 	bl	80007a0 <enable_all_buttons>
			break;
 800235c:	e01e      	b.n	800239c <button_pressed+0x1a0>
		case 3:
			timeoutoff = 0;
 800235e:	4b61      	ldr	r3, [pc, #388]	; (80024e4 <button_pressed+0x2e8>)
 8002360:	2200      	movs	r2, #0
 8002362:	701a      	strb	r2, [r3, #0]
			display_menu(main_menu, 1,0);
 8002364:	2200      	movs	r2, #0
 8002366:	2101      	movs	r1, #1
 8002368:	2000      	movs	r0, #0
 800236a:	f7ff fd09 	bl	8001d80 <display_menu>
			enable_all_buttons();
 800236e:	f7fe fa17 	bl	80007a0 <enable_all_buttons>
			break;
 8002372:	e013      	b.n	800239c <button_pressed+0x1a0>
		case 4:
			timeoutoff = 1;
 8002374:	4b5b      	ldr	r3, [pc, #364]	; (80024e4 <button_pressed+0x2e8>)
 8002376:	2201      	movs	r2, #1
 8002378:	701a      	strb	r2, [r3, #0]
			display_menu(main_menu, 1,0);
 800237a:	2200      	movs	r2, #0
 800237c:	2101      	movs	r1, #1
 800237e:	2000      	movs	r0, #0
 8002380:	f7ff fcfe 	bl	8001d80 <display_menu>
			enable_all_buttons();	
 8002384:	f7fe fa0c 	bl	80007a0 <enable_all_buttons>
			break;
 8002388:	e008      	b.n	800239c <button_pressed+0x1a0>
		case 9: // Main Menu
			display_menu(main_menu, 1, 0);
 800238a:	2200      	movs	r2, #0
 800238c:	2101      	movs	r1, #1
 800238e:	2000      	movs	r0, #0
 8002390:	f7ff fcf6 	bl	8001d80 <display_menu>
			enable_all_buttons();
 8002394:	f7fe fa04 	bl	80007a0 <enable_all_buttons>
			break;
 8002398:	e000      	b.n	800239c <button_pressed+0x1a0>
		default:
			break;
 800239a:	bf00      	nop
		}
		in_device_menu = 0;
 800239c:	4b50      	ldr	r3, [pc, #320]	; (80024e0 <button_pressed+0x2e4>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
		active_device = 0;
 80023a2:	4b4e      	ldr	r3, [pc, #312]	; (80024dc <button_pressed+0x2e0>)
 80023a4:	2200      	movs	r2, #0
 80023a6:	701a      	strb	r2, [r3, #0]
		break;
 80023a8:	e168      	b.n	800267c <button_pressed+0x480>

	case device_menu:
		switch(button) {
 80023aa:	79fb      	ldrb	r3, [r7, #7]
 80023ac:	2b09      	cmp	r3, #9
 80023ae:	d02e      	beq.n	800240e <button_pressed+0x212>
 80023b0:	2b09      	cmp	r3, #9
 80023b2:	dc4e      	bgt.n	8002452 <button_pressed+0x256>
 80023b4:	2b07      	cmp	r3, #7
 80023b6:	d002      	beq.n	80023be <button_pressed+0x1c2>
 80023b8:	2b08      	cmp	r3, #8
 80023ba:	d022      	beq.n	8002402 <button_pressed+0x206>
 80023bc:	e049      	b.n	8002452 <button_pressed+0x256>
		case 7: // Previous Page
			display_menu(
					device_menu,
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 80023be:	4b46      	ldr	r3, [pc, #280]	; (80024d8 <button_pressed+0x2dc>)
 80023c0:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80023c2:	2b01      	cmp	r3, #1
 80023c4:	d004      	beq.n	80023d0 <button_pressed+0x1d4>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 80023c6:	4b44      	ldr	r3, [pc, #272]	; (80024d8 <button_pressed+0x2dc>)
 80023c8:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80023ca:	3b01      	subs	r3, #1
 80023cc:	b2d9      	uxtb	r1, r3
 80023ce:	e000      	b.n	80023d2 <button_pressed+0x1d6>
 80023d0:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 80023d2:	4b43      	ldr	r3, [pc, #268]	; (80024e0 <button_pressed+0x2e4>)
 80023d4:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10c      	bne.n	80023f4 <button_pressed+0x1f8>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 80023da:	4b3f      	ldr	r3, [pc, #252]	; (80024d8 <button_pressed+0x2dc>)
 80023dc:	781b      	ldrb	r3, [r3, #0]
 80023de:	461a      	mov	r2, r3
 80023e0:	0052      	lsls	r2, r2, #1
 80023e2:	4413      	add	r3, r2
 80023e4:	005b      	lsls	r3, r3, #1
 80023e6:	b2da      	uxtb	r2, r3
 80023e8:	79fb      	ldrb	r3, [r7, #7]
 80023ea:	4413      	add	r3, r2
 80023ec:	b2db      	uxtb	r3, r3
			display_menu(
 80023ee:	3b06      	subs	r3, #6
 80023f0:	b2db      	uxtb	r3, r3
 80023f2:	e001      	b.n	80023f8 <button_pressed+0x1fc>
 80023f4:	4b38      	ldr	r3, [pc, #224]	; (80024d8 <button_pressed+0x2dc>)
 80023f6:	781b      	ldrb	r3, [r3, #0]
 80023f8:	461a      	mov	r2, r3
 80023fa:	2002      	movs	r0, #2
 80023fc:	f7ff fcc0 	bl	8001d80 <display_menu>
			);
			break;
 8002400:	e042      	b.n	8002488 <button_pressed+0x28c>
		case 8: // Main Menu
			display_menu(main_menu, 1, 0);
 8002402:	2200      	movs	r2, #0
 8002404:	2101      	movs	r1, #1
 8002406:	2000      	movs	r0, #0
 8002408:	f7ff fcba 	bl	8001d80 <display_menu>
			break;
 800240c:	e03c      	b.n	8002488 <button_pressed+0x28c>
		case 9: // Next Page
			display_menu(
					device_menu,
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 800240e:	4b32      	ldr	r3, [pc, #200]	; (80024d8 <button_pressed+0x2dc>)
 8002410:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8002412:	2b04      	cmp	r3, #4
 8002414:	d004      	beq.n	8002420 <button_pressed+0x224>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8002416:	4b30      	ldr	r3, [pc, #192]	; (80024d8 <button_pressed+0x2dc>)
 8002418:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 800241a:	3301      	adds	r3, #1
 800241c:	b2d9      	uxtb	r1, r3
 800241e:	e000      	b.n	8002422 <button_pressed+0x226>
 8002420:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button -1 + (6 * (current_page - 1)))
 8002422:	4b2f      	ldr	r3, [pc, #188]	; (80024e0 <button_pressed+0x2e4>)
 8002424:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8002426:	2b00      	cmp	r3, #0
 8002428:	d10c      	bne.n	8002444 <button_pressed+0x248>
					in_device_menu ? current_page : (button -1 + (6 * (current_page - 1)))
 800242a:	4b2b      	ldr	r3, [pc, #172]	; (80024d8 <button_pressed+0x2dc>)
 800242c:	781b      	ldrb	r3, [r3, #0]
 800242e:	461a      	mov	r2, r3
 8002430:	0052      	lsls	r2, r2, #1
 8002432:	4413      	add	r3, r2
 8002434:	005b      	lsls	r3, r3, #1
 8002436:	b2da      	uxtb	r2, r3
 8002438:	79fb      	ldrb	r3, [r7, #7]
 800243a:	4413      	add	r3, r2
 800243c:	b2db      	uxtb	r3, r3
			display_menu(
 800243e:	3b07      	subs	r3, #7
 8002440:	b2db      	uxtb	r3, r3
 8002442:	e001      	b.n	8002448 <button_pressed+0x24c>
 8002444:	4b24      	ldr	r3, [pc, #144]	; (80024d8 <button_pressed+0x2dc>)
 8002446:	781b      	ldrb	r3, [r3, #0]
 8002448:	461a      	mov	r2, r3
 800244a:	2002      	movs	r0, #2
 800244c:	f7ff fc98 	bl	8001d80 <display_menu>
			);
			break;
 8002450:	e01a      	b.n	8002488 <button_pressed+0x28c>
		default: // Transmit IR Signal based on button!
			DeviceTransmit(controller.devices[active_device].commands[button - 1 + (6 * (current_page - 1))].Data);
 8002452:	4b22      	ldr	r3, [pc, #136]	; (80024dc <button_pressed+0x2e0>)
 8002454:	781b      	ldrb	r3, [r3, #0]
 8002456:	4618      	mov	r0, r3
 8002458:	79fb      	ldrb	r3, [r7, #7]
 800245a:	1e59      	subs	r1, r3, #1
 800245c:	4b1e      	ldr	r3, [pc, #120]	; (80024d8 <button_pressed+0x2dc>)
 800245e:	781b      	ldrb	r3, [r3, #0]
 8002460:	1e5a      	subs	r2, r3, #1
 8002462:	4613      	mov	r3, r2
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	4413      	add	r3, r2
 8002468:	005b      	lsls	r3, r3, #1
 800246a:	440b      	add	r3, r1
 800246c:	22ac      	movs	r2, #172	; 0xac
 800246e:	fb03 f202 	mul.w	r2, r3, r2
 8002472:	f241 032c 	movw	r3, #4140	; 0x102c
 8002476:	fb00 f303 	mul.w	r3, r0, r3
 800247a:	4413      	add	r3, r2
 800247c:	4a1a      	ldr	r2, [pc, #104]	; (80024e8 <button_pressed+0x2ec>)
 800247e:	4413      	add	r3, r2
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f8ab 	bl	80005dc <DeviceTransmit>
			break;
 8002486:	bf00      	nop
		}
		in_device_menu = 1;
 8002488:	4b15      	ldr	r3, [pc, #84]	; (80024e0 <button_pressed+0x2e4>)
 800248a:	2201      	movs	r2, #1
 800248c:	701a      	strb	r2, [r3, #0]
		break;
 800248e:	e0f5      	b.n	800267c <button_pressed+0x480>
	case learn_device_menu:
		switch(button) {
 8002490:	79fb      	ldrb	r3, [r7, #7]
 8002492:	2b09      	cmp	r3, #9
 8002494:	d037      	beq.n	8002506 <button_pressed+0x30a>
 8002496:	2b09      	cmp	r3, #9
 8002498:	dc45      	bgt.n	8002526 <button_pressed+0x32a>
 800249a:	2b07      	cmp	r3, #7
 800249c:	d002      	beq.n	80024a4 <button_pressed+0x2a8>
 800249e:	2b08      	cmp	r3, #8
 80024a0:	d010      	beq.n	80024c4 <button_pressed+0x2c8>
 80024a2:	e040      	b.n	8002526 <button_pressed+0x32a>
		case 7: // Previous
			display_menu(learn_device_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 80024a4:	4b0c      	ldr	r3, [pc, #48]	; (80024d8 <button_pressed+0x2dc>)
 80024a6:	781b      	ldrb	r3, [r3, #0]
 80024a8:	2b01      	cmp	r3, #1
 80024aa:	d004      	beq.n	80024b6 <button_pressed+0x2ba>
 80024ac:	4b0a      	ldr	r3, [pc, #40]	; (80024d8 <button_pressed+0x2dc>)
 80024ae:	781b      	ldrb	r3, [r3, #0]
 80024b0:	3b01      	subs	r3, #1
 80024b2:	b2db      	uxtb	r3, r3
 80024b4:	e000      	b.n	80024b8 <button_pressed+0x2bc>
 80024b6:	2303      	movs	r3, #3
 80024b8:	2200      	movs	r2, #0
 80024ba:	4619      	mov	r1, r3
 80024bc:	2003      	movs	r0, #3
 80024be:	f7ff fc5f 	bl	8001d80 <display_menu>
			break;
 80024c2:	e050      	b.n	8002566 <button_pressed+0x36a>
		case 8: // Settings
			display_menu(settings_menu, 1, 0);
 80024c4:	2200      	movs	r2, #0
 80024c6:	2101      	movs	r1, #1
 80024c8:	2001      	movs	r0, #1
 80024ca:	f7ff fc59 	bl	8001d80 <display_menu>
			for (uint8_t i = 3; i <= 8; ++i) {
 80024ce:	2303      	movs	r3, #3
 80024d0:	73bb      	strb	r3, [r7, #14]
 80024d2:	e012      	b.n	80024fa <button_pressed+0x2fe>
 80024d4:	200017ec 	.word	0x200017ec
 80024d8:	20015bb9 	.word	0x20015bb9
 80024dc:	20015c1f 	.word	0x20015c1f
 80024e0:	20015c20 	.word	0x20015c20
 80024e4:	20015bb3 	.word	0x20015bb3
 80024e8:	200017f0 	.word	0x200017f0
				disable_button(i);
 80024ec:	7bbb      	ldrb	r3, [r7, #14]
 80024ee:	4618      	mov	r0, r3
 80024f0:	f7fe f8f6 	bl	80006e0 <disable_button>
			for (uint8_t i = 3; i <= 8; ++i) {
 80024f4:	7bbb      	ldrb	r3, [r7, #14]
 80024f6:	3301      	adds	r3, #1
 80024f8:	73bb      	strb	r3, [r7, #14]
 80024fa:	7bbb      	ldrb	r3, [r7, #14]
 80024fc:	2b08      	cmp	r3, #8
 80024fe:	d9f5      	bls.n	80024ec <button_pressed+0x2f0>
			}
			update_buttons();
 8002500:	f7fe f978 	bl	80007f4 <update_buttons>
			break;
 8002504:	e02f      	b.n	8002566 <button_pressed+0x36a>
		case 9: // Next
			display_menu(learn_device_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 8002506:	4b5f      	ldr	r3, [pc, #380]	; (8002684 <button_pressed+0x488>)
 8002508:	781b      	ldrb	r3, [r3, #0]
 800250a:	2b03      	cmp	r3, #3
 800250c:	d004      	beq.n	8002518 <button_pressed+0x31c>
 800250e:	4b5d      	ldr	r3, [pc, #372]	; (8002684 <button_pressed+0x488>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	3301      	adds	r3, #1
 8002514:	b2db      	uxtb	r3, r3
 8002516:	e000      	b.n	800251a <button_pressed+0x31e>
 8002518:	2301      	movs	r3, #1
 800251a:	2200      	movs	r2, #0
 800251c:	4619      	mov	r1, r3
 800251e:	2003      	movs	r0, #3
 8002520:	f7ff fc2e 	bl	8001d80 <display_menu>
			break;
 8002524:	e01f      	b.n	8002566 <button_pressed+0x36a>
		default: // Device Selected
			active_device =  button - 1 + (6 * (current_page - 1));
 8002526:	4b57      	ldr	r3, [pc, #348]	; (8002684 <button_pressed+0x488>)
 8002528:	781b      	ldrb	r3, [r3, #0]
 800252a:	461a      	mov	r2, r3
 800252c:	0052      	lsls	r2, r2, #1
 800252e:	4413      	add	r3, r2
 8002530:	005b      	lsls	r3, r3, #1
 8002532:	b2da      	uxtb	r2, r3
 8002534:	79fb      	ldrb	r3, [r7, #7]
 8002536:	4413      	add	r3, r2
 8002538:	b2db      	uxtb	r3, r3
 800253a:	3b07      	subs	r3, #7
 800253c:	b2da      	uxtb	r2, r3
 800253e:	4b52      	ldr	r3, [pc, #328]	; (8002688 <button_pressed+0x48c>)
 8002540:	701a      	strb	r2, [r3, #0]
			display_menu(learn_command_menu, 1, button - 1 + (6 * (current_page - 1)));
 8002542:	4b50      	ldr	r3, [pc, #320]	; (8002684 <button_pressed+0x488>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	0052      	lsls	r2, r2, #1
 800254a:	4413      	add	r3, r2
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	b2da      	uxtb	r2, r3
 8002550:	79fb      	ldrb	r3, [r7, #7]
 8002552:	4413      	add	r3, r2
 8002554:	b2db      	uxtb	r3, r3
 8002556:	3b07      	subs	r3, #7
 8002558:	b2db      	uxtb	r3, r3
 800255a:	461a      	mov	r2, r3
 800255c:	2101      	movs	r1, #1
 800255e:	2004      	movs	r0, #4
 8002560:	f7ff fc0e 	bl	8001d80 <display_menu>
			break;
 8002564:	bf00      	nop
		}
		in_device_menu = 0;	
 8002566:	4b49      	ldr	r3, [pc, #292]	; (800268c <button_pressed+0x490>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]
		break;
 800256c:	e086      	b.n	800267c <button_pressed+0x480>
	case learn_command_menu:
		switch(button) {
 800256e:	79fb      	ldrb	r3, [r7, #7]
 8002570:	2b09      	cmp	r3, #9
 8002572:	d02e      	beq.n	80025d2 <button_pressed+0x3d6>
 8002574:	2b09      	cmp	r3, #9
 8002576:	dc4e      	bgt.n	8002616 <button_pressed+0x41a>
 8002578:	2b07      	cmp	r3, #7
 800257a:	d002      	beq.n	8002582 <button_pressed+0x386>
 800257c:	2b08      	cmp	r3, #8
 800257e:	d022      	beq.n	80025c6 <button_pressed+0x3ca>
 8002580:	e049      	b.n	8002616 <button_pressed+0x41a>
		case 7: // Previous Page
			display_menu(
					learn_command_menu,
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8002582:	4b40      	ldr	r3, [pc, #256]	; (8002684 <button_pressed+0x488>)
 8002584:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8002586:	2b01      	cmp	r3, #1
 8002588:	d004      	beq.n	8002594 <button_pressed+0x398>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 800258a:	4b3e      	ldr	r3, [pc, #248]	; (8002684 <button_pressed+0x488>)
 800258c:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 800258e:	3b01      	subs	r3, #1
 8002590:	b2d9      	uxtb	r1, r3
 8002592:	e000      	b.n	8002596 <button_pressed+0x39a>
 8002594:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8002596:	4b3d      	ldr	r3, [pc, #244]	; (800268c <button_pressed+0x490>)
 8002598:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10c      	bne.n	80025b8 <button_pressed+0x3bc>
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 800259e:	4b39      	ldr	r3, [pc, #228]	; (8002684 <button_pressed+0x488>)
 80025a0:	781b      	ldrb	r3, [r3, #0]
 80025a2:	461a      	mov	r2, r3
 80025a4:	0052      	lsls	r2, r2, #1
 80025a6:	4413      	add	r3, r2
 80025a8:	005b      	lsls	r3, r3, #1
 80025aa:	b2da      	uxtb	r2, r3
 80025ac:	79fb      	ldrb	r3, [r7, #7]
 80025ae:	4413      	add	r3, r2
 80025b0:	b2db      	uxtb	r3, r3
			display_menu(
 80025b2:	3b07      	subs	r3, #7
 80025b4:	b2db      	uxtb	r3, r3
 80025b6:	e001      	b.n	80025bc <button_pressed+0x3c0>
 80025b8:	4b32      	ldr	r3, [pc, #200]	; (8002684 <button_pressed+0x488>)
 80025ba:	781b      	ldrb	r3, [r3, #0]
 80025bc:	461a      	mov	r2, r3
 80025be:	2004      	movs	r0, #4
 80025c0:	f7ff fbde 	bl	8001d80 <display_menu>
			);
			break;
 80025c4:	e045      	b.n	8002652 <button_pressed+0x456>
		case 8: // Main Menu
			display_menu(learn_device_menu, 1, 0);
 80025c6:	2200      	movs	r2, #0
 80025c8:	2101      	movs	r1, #1
 80025ca:	2003      	movs	r0, #3
 80025cc:	f7ff fbd8 	bl	8001d80 <display_menu>
			break;
 80025d0:	e03f      	b.n	8002652 <button_pressed+0x456>
		case 9: // Next Page
			display_menu(
					learn_command_menu,
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 80025d2:	4b2c      	ldr	r3, [pc, #176]	; (8002684 <button_pressed+0x488>)
 80025d4:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80025d6:	2b04      	cmp	r3, #4
 80025d8:	d004      	beq.n	80025e4 <button_pressed+0x3e8>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 80025da:	4b2a      	ldr	r3, [pc, #168]	; (8002684 <button_pressed+0x488>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80025de:	3301      	adds	r3, #1
 80025e0:	b2d9      	uxtb	r1, r3
 80025e2:	e000      	b.n	80025e6 <button_pressed+0x3ea>
 80025e4:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 80025e6:	4b29      	ldr	r3, [pc, #164]	; (800268c <button_pressed+0x490>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	d10c      	bne.n	8002608 <button_pressed+0x40c>
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 80025ee:	4b25      	ldr	r3, [pc, #148]	; (8002684 <button_pressed+0x488>)
 80025f0:	781b      	ldrb	r3, [r3, #0]
 80025f2:	461a      	mov	r2, r3
 80025f4:	0052      	lsls	r2, r2, #1
 80025f6:	4413      	add	r3, r2
 80025f8:	005b      	lsls	r3, r3, #1
 80025fa:	b2da      	uxtb	r2, r3
 80025fc:	79fb      	ldrb	r3, [r7, #7]
 80025fe:	4413      	add	r3, r2
 8002600:	b2db      	uxtb	r3, r3
			display_menu(
 8002602:	3b07      	subs	r3, #7
 8002604:	b2db      	uxtb	r3, r3
 8002606:	e001      	b.n	800260c <button_pressed+0x410>
 8002608:	4b1e      	ldr	r3, [pc, #120]	; (8002684 <button_pressed+0x488>)
 800260a:	781b      	ldrb	r3, [r3, #0]
 800260c:	461a      	mov	r2, r3
 800260e:	2004      	movs	r0, #4
 8002610:	f7ff fbb6 	bl	8001d80 <display_menu>
			);
			break;
 8002614:	e01d      	b.n	8002652 <button_pressed+0x456>
		default: // Learn IR Signal based on button!
			disable_all_buttons();
 8002616:	f7fe f8d8 	bl	80007ca <disable_all_buttons>
			update_buttons();
 800261a:	f7fe f8eb 	bl	80007f4 <update_buttons>
			display_menu(awaiting_menu,current_page,0);
 800261e:	4b19      	ldr	r3, [pc, #100]	; (8002684 <button_pressed+0x488>)
 8002620:	781b      	ldrb	r3, [r3, #0]
 8002622:	2200      	movs	r2, #0
 8002624:	4619      	mov	r1, r3
 8002626:	2005      	movs	r0, #5
 8002628:	f7ff fbaa 	bl	8001d80 <display_menu>
			Learn_command(button - 1 + (6 * (current_page - 1)),active_device);
 800262c:	4b15      	ldr	r3, [pc, #84]	; (8002684 <button_pressed+0x488>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	0052      	lsls	r2, r2, #1
 8002634:	4413      	add	r3, r2
 8002636:	005b      	lsls	r3, r3, #1
 8002638:	b2da      	uxtb	r2, r3
 800263a:	79fb      	ldrb	r3, [r7, #7]
 800263c:	4413      	add	r3, r2
 800263e:	b2db      	uxtb	r3, r3
 8002640:	3b07      	subs	r3, #7
 8002642:	b2db      	uxtb	r3, r3
 8002644:	4a10      	ldr	r2, [pc, #64]	; (8002688 <button_pressed+0x48c>)
 8002646:	7812      	ldrb	r2, [r2, #0]
 8002648:	4611      	mov	r1, r2
 800264a:	4618      	mov	r0, r3
 800264c:	f000 f820 	bl	8002690 <Learn_command>
			break;
 8002650:	bf00      	nop
		}
		in_device_menu = 1;
 8002652:	4b0e      	ldr	r3, [pc, #56]	; (800268c <button_pressed+0x490>)
 8002654:	2201      	movs	r2, #1
 8002656:	701a      	strb	r2, [r3, #0]
		break;
 8002658:	e010      	b.n	800267c <button_pressed+0x480>
	case xbee_menu:
		switch(button){
 800265a:	79fb      	ldrb	r3, [r7, #7]
 800265c:	2b09      	cmp	r3, #9
 800265e:	d105      	bne.n	800266c <button_pressed+0x470>
		case 9:
			display_menu(settings_menu,1,0);
 8002660:	2200      	movs	r2, #0
 8002662:	2101      	movs	r1, #1
 8002664:	2001      	movs	r0, #1
 8002666:	f7ff fb8b 	bl	8001d80 <display_menu>
			break;
 800266a:	e000      	b.n	800266e <button_pressed+0x472>
		default:
			break;
 800266c:	bf00      	nop
		}
		in_device_menu =0;
 800266e:	4b07      	ldr	r3, [pc, #28]	; (800268c <button_pressed+0x490>)
 8002670:	2200      	movs	r2, #0
 8002672:	701a      	strb	r2, [r3, #0]
		break;
 8002674:	e002      	b.n	800267c <button_pressed+0x480>
	if (!button || button > 9) return;
 8002676:	bf00      	nop
 8002678:	e000      	b.n	800267c <button_pressed+0x480>
	default:	
		break;
 800267a:	bf00      	nop
	}
}
 800267c:	3710      	adds	r7, #16
 800267e:	46bd      	mov	sp, r7
 8002680:	bd80      	pop	{r7, pc}
 8002682:	bf00      	nop
 8002684:	20015bb9 	.word	0x20015bb9
 8002688:	20015c1f 	.word	0x20015c1f
 800268c:	20015c20 	.word	0x20015c20

08002690 <Learn_command>:
void Learn_command(uint8_t com,uint8_t device){	
 8002690:	b590      	push	{r4, r7, lr}
 8002692:	b085      	sub	sp, #20
 8002694:	af00      	add	r7, sp, #0
 8002696:	4603      	mov	r3, r0
 8002698:	460a      	mov	r2, r1
 800269a:	71fb      	strb	r3, [r7, #7]
 800269c:	4613      	mov	r3, r2
 800269e:	71bb      	strb	r3, [r7, #6]
	received = 0;
 80026a0:	4b1b      	ldr	r3, [pc, #108]	; (8002710 <Learn_command+0x80>)
 80026a2:	2200      	movs	r2, #0
 80026a4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //starts timer 2;
 80026a6:	2100      	movs	r1, #0
 80026a8:	481a      	ldr	r0, [pc, #104]	; (8002714 <Learn_command+0x84>)
 80026aa:	f004 f801 	bl	80066b0 <HAL_TIM_IC_Start_IT>
	while(!received);
 80026ae:	bf00      	nop
 80026b0:	4b17      	ldr	r3, [pc, #92]	; (8002710 <Learn_command+0x80>)
 80026b2:	781b      	ldrb	r3, [r3, #0]
 80026b4:	2b00      	cmp	r3, #0
 80026b6:	d0fb      	beq.n	80026b0 <Learn_command+0x20>
	//writeback
	for(uint32_t i= 0; i<dataLen;++i)
 80026b8:	2300      	movs	r3, #0
 80026ba:	60fb      	str	r3, [r7, #12]
 80026bc:	e016      	b.n	80026ec <Learn_command+0x5c>
		controller.devices[device].commands[com].Data[i] = data[i];
 80026be:	79bb      	ldrb	r3, [r7, #6]
 80026c0:	79fa      	ldrb	r2, [r7, #7]
 80026c2:	4815      	ldr	r0, [pc, #84]	; (8002718 <Learn_command+0x88>)
 80026c4:	68f9      	ldr	r1, [r7, #12]
 80026c6:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
 80026ca:	4914      	ldr	r1, [pc, #80]	; (800271c <Learn_command+0x8c>)
 80026cc:	2056      	movs	r0, #86	; 0x56
 80026ce:	fb00 f202 	mul.w	r2, r0, r2
 80026d2:	f640 0016 	movw	r0, #2070	; 0x816
 80026d6:	fb00 f303 	mul.w	r3, r0, r3
 80026da:	441a      	add	r2, r3
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	4413      	add	r3, r2
 80026e0:	4622      	mov	r2, r4
 80026e2:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i= 0; i<dataLen;++i)
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	3301      	adds	r3, #1
 80026ea:	60fb      	str	r3, [r7, #12]
 80026ec:	4b0c      	ldr	r3, [pc, #48]	; (8002720 <Learn_command+0x90>)
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	68fa      	ldr	r2, [r7, #12]
 80026f2:	429a      	cmp	r2, r3
 80026f4:	d3e3      	bcc.n	80026be <Learn_command+0x2e>
	enable_all_buttons();
 80026f6:	f7fe f853 	bl	80007a0 <enable_all_buttons>
	update_buttons();
 80026fa:	f7fe f87b 	bl	80007f4 <update_buttons>
	display_menu(main_menu,1,0);
 80026fe:	2200      	movs	r2, #0
 8002700:	2101      	movs	r1, #1
 8002702:	2000      	movs	r0, #0
 8002704:	f7ff fb3c 	bl	8001d80 <display_menu>
}
 8002708:	bf00      	nop
 800270a:	3714      	adds	r7, #20
 800270c:	46bd      	mov	sp, r7
 800270e:	bd90      	pop	{r4, r7, pc}
 8002710:	20015bb0 	.word	0x20015bb0
 8002714:	20001688 	.word	0x20001688
 8002718:	20015b10 	.word	0x20015b10
 800271c:	200017f0 	.word	0x200017f0
 8002720:	20000008 	.word	0x20000008

08002724 <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 8002724:	b580      	push	{r7, lr}
 8002726:	b084      	sub	sp, #16
 8002728:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 800272a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800272e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 8002730:	1d3a      	adds	r2, r7, #4
 8002732:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002736:	9300      	str	r3, [sp, #0]
 8002738:	2302      	movs	r3, #2
 800273a:	21a2      	movs	r1, #162	; 0xa2
 800273c:	4803      	ldr	r0, [pc, #12]	; (800274c <disable_OLED_EEPROM_writes+0x28>)
 800273e:	f001 ffcd 	bl	80046dc <HAL_I2C_Master_Transmit>
}
 8002742:	bf00      	nop
 8002744:	3708      	adds	r7, #8
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	20001540 	.word	0x20001540

08002750 <drop_all_CS>:

void drop_all_CS(void) {
 8002750:	b580      	push	{r7, lr}
 8002752:	b082      	sub	sp, #8
 8002754:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 8002756:	4b0a      	ldr	r3, [pc, #40]	; (8002780 <drop_all_CS+0x30>)
 8002758:	2200      	movs	r2, #0
 800275a:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 800275c:	4b08      	ldr	r3, [pc, #32]	; (8002780 <drop_all_CS+0x30>)
 800275e:	2200      	movs	r2, #0
 8002760:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8002762:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002766:	9300      	str	r3, [sp, #0]
 8002768:	2303      	movs	r3, #3
 800276a:	4a05      	ldr	r2, [pc, #20]	; (8002780 <drop_all_CS+0x30>)
 800276c:	21a2      	movs	r1, #162	; 0xa2
 800276e:	4805      	ldr	r0, [pc, #20]	; (8002784 <drop_all_CS+0x34>)
 8002770:	f001 ffb4 	bl	80046dc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8002774:	2001      	movs	r0, #1
 8002776:	f000 ff41 	bl	80035fc <HAL_Delay>
}
 800277a:	bf00      	nop
 800277c:	46bd      	mov	sp, r7
 800277e:	bd80      	pop	{r7, pc}
 8002780:	20001420 	.word	0x20001420
 8002784:	20001540 	.word	0x20001540

08002788 <raise_all_CS>:

void raise_all_CS(void) {
 8002788:	b580      	push	{r7, lr}
 800278a:	b082      	sub	sp, #8
 800278c:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 800278e:	4b09      	ldr	r3, [pc, #36]	; (80027b4 <raise_all_CS+0x2c>)
 8002790:	22ff      	movs	r2, #255	; 0xff
 8002792:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8002794:	4b07      	ldr	r3, [pc, #28]	; (80027b4 <raise_all_CS+0x2c>)
 8002796:	2201      	movs	r2, #1
 8002798:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 800279a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800279e:	9300      	str	r3, [sp, #0]
 80027a0:	2303      	movs	r3, #3
 80027a2:	4a04      	ldr	r2, [pc, #16]	; (80027b4 <raise_all_CS+0x2c>)
 80027a4:	21a2      	movs	r1, #162	; 0xa2
 80027a6:	4804      	ldr	r0, [pc, #16]	; (80027b8 <raise_all_CS+0x30>)
 80027a8:	f001 ff98 	bl	80046dc <HAL_I2C_Master_Transmit>
}
 80027ac:	bf00      	nop
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	20001420 	.word	0x20001420
 80027b8:	20001540 	.word	0x20001540

080027bc <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 80027bc:	b580      	push	{r7, lr}
 80027be:	b084      	sub	sp, #16
 80027c0:	af02      	add	r7, sp, #8
 80027c2:	4603      	mov	r3, r0
 80027c4:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 80027c6:	4b1a      	ldr	r3, [pc, #104]	; (8002830 <drop_CS+0x74>)
 80027c8:	22ff      	movs	r2, #255	; 0xff
 80027ca:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 80027cc:	4b18      	ldr	r3, [pc, #96]	; (8002830 <drop_CS+0x74>)
 80027ce:	2201      	movs	r2, #1
 80027d0:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 80027d2:	79fb      	ldrb	r3, [r7, #7]
 80027d4:	2b09      	cmp	r3, #9
 80027d6:	d107      	bne.n	80027e8 <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 80027d8:	4b15      	ldr	r3, [pc, #84]	; (8002830 <drop_CS+0x74>)
 80027da:	789b      	ldrb	r3, [r3, #2]
 80027dc:	f023 0301 	bic.w	r3, r3, #1
 80027e0:	b2da      	uxtb	r2, r3
 80027e2:	4b13      	ldr	r3, [pc, #76]	; (8002830 <drop_CS+0x74>)
 80027e4:	709a      	strb	r2, [r3, #2]
 80027e6:	e012      	b.n	800280e <drop_CS+0x52>
	} else if (display <= 8) {
 80027e8:	79fb      	ldrb	r3, [r7, #7]
 80027ea:	2b08      	cmp	r3, #8
 80027ec:	d80f      	bhi.n	800280e <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 80027ee:	4b10      	ldr	r3, [pc, #64]	; (8002830 <drop_CS+0x74>)
 80027f0:	785b      	ldrb	r3, [r3, #1]
 80027f2:	b25a      	sxtb	r2, r3
 80027f4:	79fb      	ldrb	r3, [r7, #7]
 80027f6:	3b01      	subs	r3, #1
 80027f8:	2101      	movs	r1, #1
 80027fa:	fa01 f303 	lsl.w	r3, r1, r3
 80027fe:	b25b      	sxtb	r3, r3
 8002800:	43db      	mvns	r3, r3
 8002802:	b25b      	sxtb	r3, r3
 8002804:	4013      	ands	r3, r2
 8002806:	b25b      	sxtb	r3, r3
 8002808:	b2da      	uxtb	r2, r3
 800280a:	4b09      	ldr	r3, [pc, #36]	; (8002830 <drop_CS+0x74>)
 800280c:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 800280e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002812:	9300      	str	r3, [sp, #0]
 8002814:	2303      	movs	r3, #3
 8002816:	4a06      	ldr	r2, [pc, #24]	; (8002830 <drop_CS+0x74>)
 8002818:	21a2      	movs	r1, #162	; 0xa2
 800281a:	4806      	ldr	r0, [pc, #24]	; (8002834 <drop_CS+0x78>)
 800281c:	f001 ff5e 	bl	80046dc <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8002820:	2001      	movs	r0, #1
 8002822:	f000 feeb 	bl	80035fc <HAL_Delay>
}
 8002826:	bf00      	nop
 8002828:	3708      	adds	r7, #8
 800282a:	46bd      	mov	sp, r7
 800282c:	bd80      	pop	{r7, pc}
 800282e:	bf00      	nop
 8002830:	20001420 	.word	0x20001420
 8002834:	20001540 	.word	0x20001540

08002838 <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 8002838:	b580      	push	{r7, lr}
 800283a:	b082      	sub	sp, #8
 800283c:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 800283e:	4b37      	ldr	r3, [pc, #220]	; (800291c <init_displays+0xe4>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a36      	ldr	r2, [pc, #216]	; (800291c <init_displays+0xe4>)
 8002844:	f023 0301 	bic.w	r3, r3, #1
 8002848:	6013      	str	r3, [r2, #0]
	disable_OLED_EEPROM_writes();
 800284a:	f7ff ff6b 	bl	8002724 <disable_OLED_EEPROM_writes>
	raise_all_CS();
 800284e:	f7ff ff9b 	bl	8002788 <raise_all_CS>
	DC_HIGH();
 8002852:	2201      	movs	r2, #1
 8002854:	2101      	movs	r1, #1
 8002856:	4832      	ldr	r0, [pc, #200]	; (8002920 <init_displays+0xe8>)
 8002858:	f001 fde2 	bl	8004420 <HAL_GPIO_WritePin>
	RST_HIGH();
 800285c:	2201      	movs	r2, #1
 800285e:	2102      	movs	r1, #2
 8002860:	482f      	ldr	r0, [pc, #188]	; (8002920 <init_displays+0xe8>)
 8002862:	f001 fddd 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8002866:	200a      	movs	r0, #10
 8002868:	f000 fec8 	bl	80035fc <HAL_Delay>
	RST_LOW();
 800286c:	2200      	movs	r2, #0
 800286e:	2102      	movs	r1, #2
 8002870:	482b      	ldr	r0, [pc, #172]	; (8002920 <init_displays+0xe8>)
 8002872:	f001 fdd5 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 8002876:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800287a:	2201      	movs	r2, #1
 800287c:	4929      	ldr	r1, [pc, #164]	; (8002924 <init_displays+0xec>)
 800287e:	482a      	ldr	r0, [pc, #168]	; (8002928 <init_displays+0xf0>)
 8002880:	f003 fa9f 	bl	8005dc2 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8002884:	200a      	movs	r0, #10
 8002886:	f000 feb9 	bl	80035fc <HAL_Delay>
	RST_HIGH();
 800288a:	2201      	movs	r2, #1
 800288c:	2102      	movs	r1, #2
 800288e:	4824      	ldr	r0, [pc, #144]	; (8002920 <init_displays+0xe8>)
 8002890:	f001 fdc6 	bl	8004420 <HAL_GPIO_WritePin>

	DC_LOW();
 8002894:	2200      	movs	r2, #0
 8002896:	2101      	movs	r1, #1
 8002898:	4821      	ldr	r0, [pc, #132]	; (8002920 <init_displays+0xe8>)
 800289a:	f001 fdc1 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800289e:	2001      	movs	r0, #1
 80028a0:	f000 feac 	bl	80035fc <HAL_Delay>

	drop_all_CS();
 80028a4:	f7ff ff54 	bl	8002750 <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 80028a8:	2300      	movs	r3, #0
 80028aa:	71fb      	strb	r3, [r7, #7]
 80028ac:	e002      	b.n	80028b4 <init_displays+0x7c>
 80028ae:	79fb      	ldrb	r3, [r7, #7]
 80028b0:	3301      	adds	r3, #1
 80028b2:	71fb      	strb	r3, [r7, #7]
 80028b4:	79fb      	ldrb	r3, [r7, #7]
 80028b6:	2b4f      	cmp	r3, #79	; 0x4f
 80028b8:	d9f9      	bls.n	80028ae <init_displays+0x76>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 80028ba:	2300      	movs	r3, #0
 80028bc:	80bb      	strh	r3, [r7, #4]
 80028be:	e014      	b.n	80028ea <init_displays+0xb2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 80028c0:	88bb      	ldrh	r3, [r7, #4]
 80028c2:	4a18      	ldr	r2, [pc, #96]	; (8002924 <init_displays+0xec>)
 80028c4:	1899      	adds	r1, r3, r2
 80028c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80028ca:	2201      	movs	r2, #1
 80028cc:	4816      	ldr	r0, [pc, #88]	; (8002928 <init_displays+0xf0>)
 80028ce:	f003 fa78 	bl	8005dc2 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 80028d2:	2300      	movs	r3, #0
 80028d4:	70fb      	strb	r3, [r7, #3]
 80028d6:	e002      	b.n	80028de <init_displays+0xa6>
 80028d8:	78fb      	ldrb	r3, [r7, #3]
 80028da:	3301      	adds	r3, #1
 80028dc:	70fb      	strb	r3, [r7, #3]
 80028de:	78fb      	ldrb	r3, [r7, #3]
 80028e0:	2b09      	cmp	r3, #9
 80028e2:	d9f9      	bls.n	80028d8 <init_displays+0xa0>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 80028e4:	88bb      	ldrh	r3, [r7, #4]
 80028e6:	3301      	adds	r3, #1
 80028e8:	80bb      	strh	r3, [r7, #4]
 80028ea:	88bb      	ldrh	r3, [r7, #4]
 80028ec:	2b19      	cmp	r3, #25
 80028ee:	d9e7      	bls.n	80028c0 <init_displays+0x88>
	}

	raise_all_CS();
 80028f0:	f7ff ff4a 	bl	8002788 <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 80028f4:	2201      	movs	r2, #1
 80028f6:	2101      	movs	r1, #1
 80028f8:	4809      	ldr	r0, [pc, #36]	; (8002920 <init_displays+0xe8>)
 80028fa:	f001 fd91 	bl	8004420 <HAL_GPIO_WritePin>
	START_BUTTON_POLL();
 80028fe:	4b07      	ldr	r3, [pc, #28]	; (800291c <init_displays+0xe4>)
 8002900:	681b      	ldr	r3, [r3, #0]
 8002902:	4a06      	ldr	r2, [pc, #24]	; (800291c <init_displays+0xe4>)
 8002904:	f043 0301 	orr.w	r3, r3, #1
 8002908:	6013      	str	r3, [r2, #0]
	erase_buffer();
 800290a:	f000 f903 	bl	8002b14 <erase_buffer>
	update_all_displays();
 800290e:	f000 f889 	bl	8002a24 <update_all_displays>
}
 8002912:	bf00      	nop
 8002914:	3708      	adds	r7, #8
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40000c00 	.word	0x40000c00
 8002920:	40020000 	.word	0x40020000
 8002924:	20001424 	.word	0x20001424
 8002928:	200015e8 	.word	0x200015e8

0800292c <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 800292c:	b580      	push	{r7, lr}
 800292e:	b086      	sub	sp, #24
 8002930:	af00      	add	r7, sp, #0
 8002932:	4603      	mov	r3, r0
 8002934:	71fb      	strb	r3, [r7, #7]
	STOP_BUTTON_POLL();
 8002936:	4b36      	ldr	r3, [pc, #216]	; (8002a10 <update_display+0xe4>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4a35      	ldr	r2, [pc, #212]	; (8002a10 <update_display+0xe4>)
 800293c:	f023 0301 	bic.w	r3, r3, #1
 8002940:	6013      	str	r3, [r2, #0]
	DC_LOW();
 8002942:	2200      	movs	r2, #0
 8002944:	2101      	movs	r1, #1
 8002946:	4833      	ldr	r0, [pc, #204]	; (8002a14 <update_display+0xe8>)
 8002948:	f001 fd6a 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800294c:	2001      	movs	r0, #1
 800294e:	f000 fe55 	bl	80035fc <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 8002952:	79fb      	ldrb	r3, [r7, #7]
 8002954:	4618      	mov	r0, r3
 8002956:	f7ff ff31 	bl	80027bc <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 800295a:	2300      	movs	r3, #0
 800295c:	75fb      	strb	r3, [r7, #23]
 800295e:	e002      	b.n	8002966 <update_display+0x3a>
 8002960:	7dfb      	ldrb	r3, [r7, #23]
 8002962:	3301      	adds	r3, #1
 8002964:	75fb      	strb	r3, [r7, #23]
 8002966:	7dfb      	ldrb	r3, [r7, #23]
 8002968:	2b4f      	cmp	r3, #79	; 0x4f
 800296a:	d9f9      	bls.n	8002960 <update_display+0x34>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 800296c:	2300      	movs	r3, #0
 800296e:	82bb      	strh	r3, [r7, #20]
 8002970:	e014      	b.n	800299c <update_display+0x70>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8002972:	8abb      	ldrh	r3, [r7, #20]
 8002974:	4a28      	ldr	r2, [pc, #160]	; (8002a18 <update_display+0xec>)
 8002976:	1899      	adds	r1, r3, r2
 8002978:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800297c:	2201      	movs	r2, #1
 800297e:	4827      	ldr	r0, [pc, #156]	; (8002a1c <update_display+0xf0>)
 8002980:	f003 fa1f 	bl	8005dc2 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8002984:	2300      	movs	r3, #0
 8002986:	74fb      	strb	r3, [r7, #19]
 8002988:	e002      	b.n	8002990 <update_display+0x64>
 800298a:	7cfb      	ldrb	r3, [r7, #19]
 800298c:	3301      	adds	r3, #1
 800298e:	74fb      	strb	r3, [r7, #19]
 8002990:	7cfb      	ldrb	r3, [r7, #19]
 8002992:	2b09      	cmp	r3, #9
 8002994:	d9f9      	bls.n	800298a <update_display+0x5e>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8002996:	8abb      	ldrh	r3, [r7, #20]
 8002998:	3301      	adds	r3, #1
 800299a:	82bb      	strh	r3, [r7, #20]
 800299c:	8abb      	ldrh	r3, [r7, #20]
 800299e:	2b05      	cmp	r3, #5
 80029a0:	d9e7      	bls.n	8002972 <update_display+0x46>
	}

	DC_HIGH();
 80029a2:	2201      	movs	r2, #1
 80029a4:	2101      	movs	r1, #1
 80029a6:	481b      	ldr	r0, [pc, #108]	; (8002a14 <update_display+0xe8>)
 80029a8:	f001 fd3a 	bl	8004420 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 80029ac:	2300      	movs	r3, #0
 80029ae:	74bb      	strb	r3, [r7, #18]
 80029b0:	e002      	b.n	80029b8 <update_display+0x8c>
 80029b2:	7cbb      	ldrb	r3, [r7, #18]
 80029b4:	3301      	adds	r3, #1
 80029b6:	74bb      	strb	r3, [r7, #18]
 80029b8:	7cbb      	ldrb	r3, [r7, #18]
 80029ba:	2b4f      	cmp	r3, #79	; 0x4f
 80029bc:	d9f9      	bls.n	80029b2 <update_display+0x86>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80029be:	2300      	movs	r3, #0
 80029c0:	823b      	strh	r3, [r7, #16]
 80029c2:	e014      	b.n	80029ee <update_display+0xc2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 80029c4:	8a3b      	ldrh	r3, [r7, #16]
 80029c6:	4a16      	ldr	r2, [pc, #88]	; (8002a20 <update_display+0xf4>)
 80029c8:	1899      	adds	r1, r3, r2
 80029ca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80029ce:	2201      	movs	r2, #1
 80029d0:	4812      	ldr	r0, [pc, #72]	; (8002a1c <update_display+0xf0>)
 80029d2:	f003 f9f6 	bl	8005dc2 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 80029d6:	2300      	movs	r3, #0
 80029d8:	73fb      	strb	r3, [r7, #15]
 80029da:	e002      	b.n	80029e2 <update_display+0xb6>
 80029dc:	7bfb      	ldrb	r3, [r7, #15]
 80029de:	3301      	adds	r3, #1
 80029e0:	73fb      	strb	r3, [r7, #15]
 80029e2:	7bfb      	ldrb	r3, [r7, #15]
 80029e4:	2b09      	cmp	r3, #9
 80029e6:	d9f9      	bls.n	80029dc <update_display+0xb0>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80029e8:	8a3b      	ldrh	r3, [r7, #16]
 80029ea:	3301      	adds	r3, #1
 80029ec:	823b      	strh	r3, [r7, #16]
 80029ee:	8a3b      	ldrh	r3, [r7, #16]
 80029f0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80029f4:	d3e6      	bcc.n	80029c4 <update_display+0x98>
	}

	raise_all_CS();
 80029f6:	f7ff fec7 	bl	8002788 <raise_all_CS>
	START_BUTTON_POLL();
 80029fa:	4b05      	ldr	r3, [pc, #20]	; (8002a10 <update_display+0xe4>)
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	4a04      	ldr	r2, [pc, #16]	; (8002a10 <update_display+0xe4>)
 8002a00:	f043 0301 	orr.w	r3, r3, #1
 8002a04:	6013      	str	r3, [r2, #0]
}
 8002a06:	bf00      	nop
 8002a08:	3718      	adds	r7, #24
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	40000c00 	.word	0x40000c00
 8002a14:	40020000 	.word	0x40020000
 8002a18:	20001440 	.word	0x20001440
 8002a1c:	200015e8 	.word	0x200015e8
 8002a20:	20015c24 	.word	0x20015c24

08002a24 <update_all_displays>:

void update_all_displays() {
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b084      	sub	sp, #16
 8002a28:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8002a2a:	4b35      	ldr	r3, [pc, #212]	; (8002b00 <update_all_displays+0xdc>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	4a34      	ldr	r2, [pc, #208]	; (8002b00 <update_all_displays+0xdc>)
 8002a30:	f023 0301 	bic.w	r3, r3, #1
 8002a34:	6013      	str	r3, [r2, #0]
	DC_LOW();
 8002a36:	2200      	movs	r2, #0
 8002a38:	2101      	movs	r1, #1
 8002a3a:	4832      	ldr	r0, [pc, #200]	; (8002b04 <update_all_displays+0xe0>)
 8002a3c:	f001 fcf0 	bl	8004420 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002a40:	2001      	movs	r0, #1
 8002a42:	f000 fddb 	bl	80035fc <HAL_Delay>
	drop_all_CS();
 8002a46:	f7ff fe83 	bl	8002750 <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	73fb      	strb	r3, [r7, #15]
 8002a4e:	e002      	b.n	8002a56 <update_all_displays+0x32>
 8002a50:	7bfb      	ldrb	r3, [r7, #15]
 8002a52:	3301      	adds	r3, #1
 8002a54:	73fb      	strb	r3, [r7, #15]
 8002a56:	7bfb      	ldrb	r3, [r7, #15]
 8002a58:	2b4f      	cmp	r3, #79	; 0x4f
 8002a5a:	d9f9      	bls.n	8002a50 <update_all_displays+0x2c>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	81bb      	strh	r3, [r7, #12]
 8002a60:	e014      	b.n	8002a8c <update_all_displays+0x68>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8002a62:	89bb      	ldrh	r3, [r7, #12]
 8002a64:	4a28      	ldr	r2, [pc, #160]	; (8002b08 <update_all_displays+0xe4>)
 8002a66:	1899      	adds	r1, r3, r2
 8002a68:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	4827      	ldr	r0, [pc, #156]	; (8002b0c <update_all_displays+0xe8>)
 8002a70:	f003 f9a7 	bl	8005dc2 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8002a74:	2300      	movs	r3, #0
 8002a76:	72fb      	strb	r3, [r7, #11]
 8002a78:	e002      	b.n	8002a80 <update_all_displays+0x5c>
 8002a7a:	7afb      	ldrb	r3, [r7, #11]
 8002a7c:	3301      	adds	r3, #1
 8002a7e:	72fb      	strb	r3, [r7, #11]
 8002a80:	7afb      	ldrb	r3, [r7, #11]
 8002a82:	2b09      	cmp	r3, #9
 8002a84:	d9f9      	bls.n	8002a7a <update_all_displays+0x56>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8002a86:	89bb      	ldrh	r3, [r7, #12]
 8002a88:	3301      	adds	r3, #1
 8002a8a:	81bb      	strh	r3, [r7, #12]
 8002a8c:	89bb      	ldrh	r3, [r7, #12]
 8002a8e:	2b05      	cmp	r3, #5
 8002a90:	d9e7      	bls.n	8002a62 <update_all_displays+0x3e>
	}

	DC_HIGH();
 8002a92:	2201      	movs	r2, #1
 8002a94:	2101      	movs	r1, #1
 8002a96:	481b      	ldr	r0, [pc, #108]	; (8002b04 <update_all_displays+0xe0>)
 8002a98:	f001 fcc2 	bl	8004420 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8002a9c:	2300      	movs	r3, #0
 8002a9e:	72bb      	strb	r3, [r7, #10]
 8002aa0:	e002      	b.n	8002aa8 <update_all_displays+0x84>
 8002aa2:	7abb      	ldrb	r3, [r7, #10]
 8002aa4:	3301      	adds	r3, #1
 8002aa6:	72bb      	strb	r3, [r7, #10]
 8002aa8:	7abb      	ldrb	r3, [r7, #10]
 8002aaa:	2b4f      	cmp	r3, #79	; 0x4f
 8002aac:	d9f9      	bls.n	8002aa2 <update_all_displays+0x7e>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002aae:	2300      	movs	r3, #0
 8002ab0:	813b      	strh	r3, [r7, #8]
 8002ab2:	e014      	b.n	8002ade <update_all_displays+0xba>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8002ab4:	893b      	ldrh	r3, [r7, #8]
 8002ab6:	4a16      	ldr	r2, [pc, #88]	; (8002b10 <update_all_displays+0xec>)
 8002ab8:	1899      	adds	r1, r3, r2
 8002aba:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002abe:	2201      	movs	r2, #1
 8002ac0:	4812      	ldr	r0, [pc, #72]	; (8002b0c <update_all_displays+0xe8>)
 8002ac2:	f003 f97e 	bl	8005dc2 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8002ac6:	2300      	movs	r3, #0
 8002ac8:	71fb      	strb	r3, [r7, #7]
 8002aca:	e002      	b.n	8002ad2 <update_all_displays+0xae>
 8002acc:	79fb      	ldrb	r3, [r7, #7]
 8002ace:	3301      	adds	r3, #1
 8002ad0:	71fb      	strb	r3, [r7, #7]
 8002ad2:	79fb      	ldrb	r3, [r7, #7]
 8002ad4:	2b09      	cmp	r3, #9
 8002ad6:	d9f9      	bls.n	8002acc <update_all_displays+0xa8>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002ad8:	893b      	ldrh	r3, [r7, #8]
 8002ada:	3301      	adds	r3, #1
 8002adc:	813b      	strh	r3, [r7, #8]
 8002ade:	893b      	ldrh	r3, [r7, #8]
 8002ae0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002ae4:	d3e6      	bcc.n	8002ab4 <update_all_displays+0x90>
	}
	raise_all_CS();
 8002ae6:	f7ff fe4f 	bl	8002788 <raise_all_CS>
	START_BUTTON_POLL();
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <update_all_displays+0xdc>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a04      	ldr	r2, [pc, #16]	; (8002b00 <update_all_displays+0xdc>)
 8002af0:	f043 0301 	orr.w	r3, r3, #1
 8002af4:	6013      	str	r3, [r2, #0]
}
 8002af6:	bf00      	nop
 8002af8:	3710      	adds	r7, #16
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}
 8002afe:	bf00      	nop
 8002b00:	40000c00 	.word	0x40000c00
 8002b04:	40020000 	.word	0x40020000
 8002b08:	20001440 	.word	0x20001440
 8002b0c:	200015e8 	.word	0x200015e8
 8002b10:	20015c24 	.word	0x20015c24

08002b14 <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 8002b14:	b480      	push	{r7}
 8002b16:	b083      	sub	sp, #12
 8002b18:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	80fb      	strh	r3, [r7, #6]
 8002b1e:	e006      	b.n	8002b2e <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 8002b20:	88fb      	ldrh	r3, [r7, #6]
 8002b22:	4a08      	ldr	r2, [pc, #32]	; (8002b44 <erase_buffer+0x30>)
 8002b24:	2100      	movs	r1, #0
 8002b26:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002b28:	88fb      	ldrh	r3, [r7, #6]
 8002b2a:	3301      	adds	r3, #1
 8002b2c:	80fb      	strh	r3, [r7, #6]
 8002b2e:	88fb      	ldrh	r3, [r7, #6]
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b34:	d3f4      	bcc.n	8002b20 <erase_buffer+0xc>
	}
}
 8002b36:	bf00      	nop
 8002b38:	bf00      	nop
 8002b3a:	370c      	adds	r7, #12
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	20015c24 	.word	0x20015c24

08002b48 <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 8002b48:	b480      	push	{r7}
 8002b4a:	b083      	sub	sp, #12
 8002b4c:	af00      	add	r7, sp, #0
 8002b4e:	4603      	mov	r3, r0
 8002b50:	71fb      	strb	r3, [r7, #7]
 8002b52:	460b      	mov	r3, r1
 8002b54:	71bb      	strb	r3, [r7, #6]
 8002b56:	4613      	mov	r3, r2
 8002b58:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8002b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	db3d      	blt.n	8002bde <draw_pixel+0x96>
 8002b62:	79bb      	ldrb	r3, [r7, #6]
 8002b64:	2b1f      	cmp	r3, #31
 8002b66:	d83a      	bhi.n	8002bde <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 8002b68:	797b      	ldrb	r3, [r7, #5]
 8002b6a:	2b00      	cmp	r3, #0
 8002b6c:	d01a      	beq.n	8002ba4 <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 8002b6e:	79fa      	ldrb	r2, [r7, #7]
 8002b70:	79bb      	ldrb	r3, [r7, #6]
 8002b72:	08db      	lsrs	r3, r3, #3
 8002b74:	b2d8      	uxtb	r0, r3
 8002b76:	4603      	mov	r3, r0
 8002b78:	01db      	lsls	r3, r3, #7
 8002b7a:	4413      	add	r3, r2
 8002b7c:	4a1b      	ldr	r2, [pc, #108]	; (8002bec <draw_pixel+0xa4>)
 8002b7e:	5cd3      	ldrb	r3, [r2, r3]
 8002b80:	b25a      	sxtb	r2, r3
 8002b82:	79bb      	ldrb	r3, [r7, #6]
 8002b84:	f003 0307 	and.w	r3, r3, #7
 8002b88:	2101      	movs	r1, #1
 8002b8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002b8e:	b25b      	sxtb	r3, r3
 8002b90:	4313      	orrs	r3, r2
 8002b92:	b259      	sxtb	r1, r3
 8002b94:	79fa      	ldrb	r2, [r7, #7]
 8002b96:	4603      	mov	r3, r0
 8002b98:	01db      	lsls	r3, r3, #7
 8002b9a:	4413      	add	r3, r2
 8002b9c:	b2c9      	uxtb	r1, r1
 8002b9e:	4a13      	ldr	r2, [pc, #76]	; (8002bec <draw_pixel+0xa4>)
 8002ba0:	54d1      	strb	r1, [r2, r3]
 8002ba2:	e01d      	b.n	8002be0 <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 8002ba4:	79fa      	ldrb	r2, [r7, #7]
 8002ba6:	79bb      	ldrb	r3, [r7, #6]
 8002ba8:	08db      	lsrs	r3, r3, #3
 8002baa:	b2d8      	uxtb	r0, r3
 8002bac:	4603      	mov	r3, r0
 8002bae:	01db      	lsls	r3, r3, #7
 8002bb0:	4413      	add	r3, r2
 8002bb2:	4a0e      	ldr	r2, [pc, #56]	; (8002bec <draw_pixel+0xa4>)
 8002bb4:	5cd3      	ldrb	r3, [r2, r3]
 8002bb6:	b25a      	sxtb	r2, r3
 8002bb8:	79bb      	ldrb	r3, [r7, #6]
 8002bba:	f003 0307 	and.w	r3, r3, #7
 8002bbe:	2101      	movs	r1, #1
 8002bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8002bc4:	b25b      	sxtb	r3, r3
 8002bc6:	43db      	mvns	r3, r3
 8002bc8:	b25b      	sxtb	r3, r3
 8002bca:	4013      	ands	r3, r2
 8002bcc:	b259      	sxtb	r1, r3
 8002bce:	79fa      	ldrb	r2, [r7, #7]
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	01db      	lsls	r3, r3, #7
 8002bd4:	4413      	add	r3, r2
 8002bd6:	b2c9      	uxtb	r1, r1
 8002bd8:	4a04      	ldr	r2, [pc, #16]	; (8002bec <draw_pixel+0xa4>)
 8002bda:	54d1      	strb	r1, [r2, r3]
 8002bdc:	e000      	b.n	8002be0 <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8002bde:	bf00      	nop
	}
}
 8002be0:	370c      	adds	r7, #12
 8002be2:	46bd      	mov	sp, r7
 8002be4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002be8:	4770      	bx	lr
 8002bea:	bf00      	nop
 8002bec:	20015c24 	.word	0x20015c24

08002bf0 <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 8002bf0:	b590      	push	{r4, r7, lr}
 8002bf2:	b085      	sub	sp, #20
 8002bf4:	af02      	add	r7, sp, #8
 8002bf6:	4604      	mov	r4, r0
 8002bf8:	4608      	mov	r0, r1
 8002bfa:	4611      	mov	r1, r2
 8002bfc:	461a      	mov	r2, r3
 8002bfe:	4623      	mov	r3, r4
 8002c00:	71fb      	strb	r3, [r7, #7]
 8002c02:	4603      	mov	r3, r0
 8002c04:	71bb      	strb	r3, [r7, #6]
 8002c06:	460b      	mov	r3, r1
 8002c08:	717b      	strb	r3, [r7, #5]
 8002c0a:	4613      	mov	r3, r2
 8002c0c:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 8002c0e:	79fb      	ldrb	r3, [r7, #7]
 8002c10:	2b1f      	cmp	r3, #31
 8002c12:	d913      	bls.n	8002c3c <draw_char+0x4c>
 8002c14:	79fb      	ldrb	r3, [r7, #7]
 8002c16:	2b7e      	cmp	r3, #126	; 0x7e
 8002c18:	d810      	bhi.n	8002c3c <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 8002c1a:	79fb      	ldrb	r3, [r7, #7]
 8002c1c:	3b20      	subs	r3, #32
 8002c1e:	2236      	movs	r2, #54	; 0x36
 8002c20:	fb02 f303 	mul.w	r3, r2, r3
 8002c24:	4a07      	ldr	r2, [pc, #28]	; (8002c44 <draw_char+0x54>)
 8002c26:	1898      	adds	r0, r3, r2
 8002c28:	797a      	ldrb	r2, [r7, #5]
 8002c2a:	79b9      	ldrb	r1, [r7, #6]
 8002c2c:	793b      	ldrb	r3, [r7, #4]
 8002c2e:	9301      	str	r3, [sp, #4]
 8002c30:	231b      	movs	r3, #27
 8002c32:	9300      	str	r3, [sp, #0]
 8002c34:	230c      	movs	r3, #12
 8002c36:	f000 f807 	bl	8002c48 <draw_bmp>
 8002c3a:	e000      	b.n	8002c3e <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 8002c3c:	bf00      	nop
}
 8002c3e:	370c      	adds	r7, #12
 8002c40:	46bd      	mov	sp, r7
 8002c42:	bd90      	pop	{r4, r7, pc}
 8002c44:	20000014 	.word	0x20000014

08002c48 <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	4608      	mov	r0, r1
 8002c52:	4611      	mov	r1, r2
 8002c54:	461a      	mov	r2, r3
 8002c56:	4603      	mov	r3, r0
 8002c58:	70fb      	strb	r3, [r7, #3]
 8002c5a:	460b      	mov	r3, r1
 8002c5c:	70bb      	strb	r3, [r7, #2]
 8002c5e:	4613      	mov	r3, r2
 8002c60:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 8002c62:	787b      	ldrb	r3, [r7, #1]
 8002c64:	3307      	adds	r3, #7
 8002c66:	2b00      	cmp	r3, #0
 8002c68:	da00      	bge.n	8002c6c <draw_bmp+0x24>
 8002c6a:	3307      	adds	r3, #7
 8002c6c:	10db      	asrs	r3, r3, #3
 8002c6e:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 8002c70:	2300      	movs	r3, #0
 8002c72:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 8002c74:	2300      	movs	r3, #0
 8002c76:	81bb      	strh	r3, [r7, #12]
 8002c78:	e047      	b.n	8002d0a <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	817b      	strh	r3, [r7, #10]
 8002c7e:	e036      	b.n	8002cee <draw_bmp+0xa6>
			if (i & 7)
 8002c80:	897b      	ldrh	r3, [r7, #10]
 8002c82:	f003 0307 	and.w	r3, r3, #7
 8002c86:	2b00      	cmp	r3, #0
 8002c88:	d003      	beq.n	8002c92 <draw_bmp+0x4a>
				b <<= 1;
 8002c8a:	7bfb      	ldrb	r3, [r7, #15]
 8002c8c:	005b      	lsls	r3, r3, #1
 8002c8e:	73fb      	strb	r3, [r7, #15]
 8002c90:	e012      	b.n	8002cb8 <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 8002c92:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002c96:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002c9a:	fb03 f202 	mul.w	r2, r3, r2
 8002c9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ca2:	2b00      	cmp	r3, #0
 8002ca4:	da00      	bge.n	8002ca8 <draw_bmp+0x60>
 8002ca6:	3307      	adds	r3, #7
 8002ca8:	10db      	asrs	r3, r3, #3
 8002caa:	b21b      	sxth	r3, r3
 8002cac:	4413      	add	r3, r2
 8002cae:	461a      	mov	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	4413      	add	r3, r2
 8002cb4:	781b      	ldrb	r3, [r3, #0]
 8002cb6:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 8002cb8:	897b      	ldrh	r3, [r7, #10]
 8002cba:	b2da      	uxtb	r2, r3
 8002cbc:	78fb      	ldrb	r3, [r7, #3]
 8002cbe:	4413      	add	r3, r2
 8002cc0:	b2d8      	uxtb	r0, r3
 8002cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002cc6:	2b00      	cmp	r3, #0
 8002cc8:	db06      	blt.n	8002cd8 <draw_bmp+0x90>
 8002cca:	7f3b      	ldrb	r3, [r7, #28]
 8002ccc:	2b00      	cmp	r3, #0
 8002cce:	bf0c      	ite	eq
 8002cd0:	2301      	moveq	r3, #1
 8002cd2:	2300      	movne	r3, #0
 8002cd4:	b2db      	uxtb	r3, r3
 8002cd6:	e000      	b.n	8002cda <draw_bmp+0x92>
 8002cd8:	7f3b      	ldrb	r3, [r7, #28]
 8002cda:	78b9      	ldrb	r1, [r7, #2]
 8002cdc:	461a      	mov	r2, r3
 8002cde:	f7ff ff33 	bl	8002b48 <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 8002ce2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ce6:	b29b      	uxth	r3, r3
 8002ce8:	3301      	adds	r3, #1
 8002cea:	b29b      	uxth	r3, r3
 8002cec:	817b      	strh	r3, [r7, #10]
 8002cee:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002cf2:	787b      	ldrb	r3, [r7, #1]
 8002cf4:	429a      	cmp	r2, r3
 8002cf6:	dbc3      	blt.n	8002c80 <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 8002cf8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002cfc:	b29b      	uxth	r3, r3
 8002cfe:	3301      	adds	r3, #1
 8002d00:	b29b      	uxth	r3, r3
 8002d02:	81bb      	strh	r3, [r7, #12]
 8002d04:	78bb      	ldrb	r3, [r7, #2]
 8002d06:	3301      	adds	r3, #1
 8002d08:	70bb      	strb	r3, [r7, #2]
 8002d0a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002d0e:	7e3b      	ldrb	r3, [r7, #24]
 8002d10:	429a      	cmp	r2, r3
 8002d12:	dbb2      	blt.n	8002c7a <draw_bmp+0x32>
		}
	}
}
 8002d14:	bf00      	nop
 8002d16:	bf00      	nop
 8002d18:	3710      	adds	r7, #16
 8002d1a:	46bd      	mov	sp, r7
 8002d1c:	bd80      	pop	{r7, pc}

08002d1e <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 8002d1e:	b580      	push	{r7, lr}
 8002d20:	b084      	sub	sp, #16
 8002d22:	af00      	add	r7, sp, #0
 8002d24:	6078      	str	r0, [r7, #4]
 8002d26:	460b      	mov	r3, r1
 8002d28:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fd fa5c 	bl	80001e8 <strlen>
 8002d30:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	2b00      	cmp	r3, #0
 8002d36:	d046      	beq.n	8002dc6 <draw_string+0xa8>
 8002d38:	68fb      	ldr	r3, [r7, #12]
 8002d3a:	2b0a      	cmp	r3, #10
 8002d3c:	d843      	bhi.n	8002dc6 <draw_string+0xa8>

    for (uint8_t i = 0; i < len; ++i) {
 8002d3e:	2300      	movs	r3, #0
 8002d40:	72fb      	strb	r3, [r7, #11]
 8002d42:	e00e      	b.n	8002d62 <draw_string+0x44>
    	if (str[i] == '\n') {
 8002d44:	7afb      	ldrb	r3, [r7, #11]
 8002d46:	687a      	ldr	r2, [r7, #4]
 8002d48:	4413      	add	r3, r2
 8002d4a:	781b      	ldrb	r3, [r3, #0]
 8002d4c:	2b0a      	cmp	r3, #10
 8002d4e:	d105      	bne.n	8002d5c <draw_string+0x3e>
    		str[i] = '\0';
 8002d50:	7afb      	ldrb	r3, [r7, #11]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	4413      	add	r3, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	701a      	strb	r2, [r3, #0]
    		break;
 8002d5a:	e006      	b.n	8002d6a <draw_string+0x4c>
    for (uint8_t i = 0; i < len; ++i) {
 8002d5c:	7afb      	ldrb	r3, [r7, #11]
 8002d5e:	3301      	adds	r3, #1
 8002d60:	72fb      	strb	r3, [r7, #11]
 8002d62:	7afb      	ldrb	r3, [r7, #11]
 8002d64:	68fa      	ldr	r2, [r7, #12]
 8002d66:	429a      	cmp	r2, r3
 8002d68:	d8ec      	bhi.n	8002d44 <draw_string+0x26>
    	}
    }

    len = strlen(str);
 8002d6a:	6878      	ldr	r0, [r7, #4]
 8002d6c:	f7fd fa3c 	bl	80001e8 <strlen>
 8002d70:	60f8      	str	r0, [r7, #12]

    uint8_t x = DISPLAY_WIDTH/2;
 8002d72:	2340      	movs	r3, #64	; 0x40
 8002d74:	72bb      	strb	r3, [r7, #10]
    if (len%2) {
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	f003 0301 	and.w	r3, r3, #1
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d005      	beq.n	8002d8c <draw_string+0x6e>
        x -= FONT_WIDTH/2;
 8002d80:	7abb      	ldrb	r3, [r7, #10]
 8002d82:	3b06      	subs	r3, #6
 8002d84:	72bb      	strb	r3, [r7, #10]
        len -= 1;
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	3b01      	subs	r3, #1
 8002d8a:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 8002d8c:	68fa      	ldr	r2, [r7, #12]
 8002d8e:	4613      	mov	r3, r2
 8002d90:	005b      	lsls	r3, r3, #1
 8002d92:	4413      	add	r3, r2
 8002d94:	009b      	lsls	r3, r3, #2
 8002d96:	085b      	lsrs	r3, r3, #1
 8002d98:	b2db      	uxtb	r3, r3
 8002d9a:	7aba      	ldrb	r2, [r7, #10]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	72bb      	strb	r3, [r7, #10]

    while(*str) {
 8002da0:	e00c      	b.n	8002dbc <draw_string+0x9e>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	7818      	ldrb	r0, [r3, #0]
 8002da6:	78fb      	ldrb	r3, [r7, #3]
 8002da8:	7ab9      	ldrb	r1, [r7, #10]
 8002daa:	2203      	movs	r2, #3
 8002dac:	f7ff ff20 	bl	8002bf0 <draw_char>
        x += FONT_WIDTH;
 8002db0:	7abb      	ldrb	r3, [r7, #10]
 8002db2:	330c      	adds	r3, #12
 8002db4:	72bb      	strb	r3, [r7, #10]
        ++str;
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	3301      	adds	r3, #1
 8002dba:	607b      	str	r3, [r7, #4]
    while(*str) {
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	781b      	ldrb	r3, [r3, #0]
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d1ee      	bne.n	8002da2 <draw_string+0x84>
 8002dc4:	e000      	b.n	8002dc8 <draw_string+0xaa>
    if (len <= 0 || len > 10) return;
 8002dc6:	bf00      	nop
    }
}
 8002dc8:	3710      	adds	r7, #16
 8002dca:	46bd      	mov	sp, r7
 8002dcc:	bd80      	pop	{r7, pc}
	...

08002dd0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002dd0:	b580      	push	{r7, lr}
 8002dd2:	b082      	sub	sp, #8
 8002dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	607b      	str	r3, [r7, #4]
 8002dda:	4b10      	ldr	r3, [pc, #64]	; (8002e1c <HAL_MspInit+0x4c>)
 8002ddc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dde:	4a0f      	ldr	r2, [pc, #60]	; (8002e1c <HAL_MspInit+0x4c>)
 8002de0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002de4:	6453      	str	r3, [r2, #68]	; 0x44
 8002de6:	4b0d      	ldr	r3, [pc, #52]	; (8002e1c <HAL_MspInit+0x4c>)
 8002de8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dea:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002dee:	607b      	str	r3, [r7, #4]
 8002df0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002df2:	2300      	movs	r3, #0
 8002df4:	603b      	str	r3, [r7, #0]
 8002df6:	4b09      	ldr	r3, [pc, #36]	; (8002e1c <HAL_MspInit+0x4c>)
 8002df8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002dfa:	4a08      	ldr	r2, [pc, #32]	; (8002e1c <HAL_MspInit+0x4c>)
 8002dfc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002e00:	6413      	str	r3, [r2, #64]	; 0x40
 8002e02:	4b06      	ldr	r3, [pc, #24]	; (8002e1c <HAL_MspInit+0x4c>)
 8002e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002e06:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e0a:	603b      	str	r3, [r7, #0]
 8002e0c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002e0e:	2007      	movs	r0, #7
 8002e10:	f001 f896 	bl	8003f40 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002e14:	bf00      	nop
 8002e16:	3708      	adds	r7, #8
 8002e18:	46bd      	mov	sp, r7
 8002e1a:	bd80      	pop	{r7, pc}
 8002e1c:	40023800 	.word	0x40023800

08002e20 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b08a      	sub	sp, #40	; 0x28
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002e28:	f107 0314 	add.w	r3, r7, #20
 8002e2c:	2200      	movs	r2, #0
 8002e2e:	601a      	str	r2, [r3, #0]
 8002e30:	605a      	str	r2, [r3, #4]
 8002e32:	609a      	str	r2, [r3, #8]
 8002e34:	60da      	str	r2, [r3, #12]
 8002e36:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002e38:	687b      	ldr	r3, [r7, #4]
 8002e3a:	681b      	ldr	r3, [r3, #0]
 8002e3c:	4a17      	ldr	r2, [pc, #92]	; (8002e9c <HAL_ADC_MspInit+0x7c>)
 8002e3e:	4293      	cmp	r3, r2
 8002e40:	d127      	bne.n	8002e92 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002e42:	2300      	movs	r3, #0
 8002e44:	613b      	str	r3, [r7, #16]
 8002e46:	4b16      	ldr	r3, [pc, #88]	; (8002ea0 <HAL_ADC_MspInit+0x80>)
 8002e48:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e4a:	4a15      	ldr	r2, [pc, #84]	; (8002ea0 <HAL_ADC_MspInit+0x80>)
 8002e4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e50:	6453      	str	r3, [r2, #68]	; 0x44
 8002e52:	4b13      	ldr	r3, [pc, #76]	; (8002ea0 <HAL_ADC_MspInit+0x80>)
 8002e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e5a:	613b      	str	r3, [r7, #16]
 8002e5c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002e5e:	2300      	movs	r3, #0
 8002e60:	60fb      	str	r3, [r7, #12]
 8002e62:	4b0f      	ldr	r3, [pc, #60]	; (8002ea0 <HAL_ADC_MspInit+0x80>)
 8002e64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e66:	4a0e      	ldr	r2, [pc, #56]	; (8002ea0 <HAL_ADC_MspInit+0x80>)
 8002e68:	f043 0301 	orr.w	r3, r3, #1
 8002e6c:	6313      	str	r3, [r2, #48]	; 0x30
 8002e6e:	4b0c      	ldr	r3, [pc, #48]	; (8002ea0 <HAL_ADC_MspInit+0x80>)
 8002e70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e72:	f003 0301 	and.w	r3, r3, #1
 8002e76:	60fb      	str	r3, [r7, #12]
 8002e78:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002e7a:	2310      	movs	r3, #16
 8002e7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e82:	2300      	movs	r3, #0
 8002e84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002e86:	f107 0314 	add.w	r3, r7, #20
 8002e8a:	4619      	mov	r1, r3
 8002e8c:	4805      	ldr	r0, [pc, #20]	; (8002ea4 <HAL_ADC_MspInit+0x84>)
 8002e8e:	f001 f92b 	bl	80040e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8002e92:	bf00      	nop
 8002e94:	3728      	adds	r7, #40	; 0x28
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}
 8002e9a:	bf00      	nop
 8002e9c:	40012000 	.word	0x40012000
 8002ea0:	40023800 	.word	0x40023800
 8002ea4:	40020000 	.word	0x40020000

08002ea8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002ea8:	b580      	push	{r7, lr}
 8002eaa:	b08c      	sub	sp, #48	; 0x30
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002eb0:	f107 031c 	add.w	r3, r7, #28
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	601a      	str	r2, [r3, #0]
 8002eb8:	605a      	str	r2, [r3, #4]
 8002eba:	609a      	str	r2, [r3, #8]
 8002ebc:	60da      	str	r2, [r3, #12]
 8002ebe:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002ec0:	687b      	ldr	r3, [r7, #4]
 8002ec2:	681b      	ldr	r3, [r3, #0]
 8002ec4:	4a42      	ldr	r2, [pc, #264]	; (8002fd0 <HAL_I2C_MspInit+0x128>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d12d      	bne.n	8002f26 <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002eca:	2300      	movs	r3, #0
 8002ecc:	61bb      	str	r3, [r7, #24]
 8002ece:	4b41      	ldr	r3, [pc, #260]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ed2:	4a40      	ldr	r2, [pc, #256]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002ed4:	f043 0302 	orr.w	r3, r3, #2
 8002ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8002eda:	4b3e      	ldr	r3, [pc, #248]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ede:	f003 0302 	and.w	r3, r3, #2
 8002ee2:	61bb      	str	r3, [r7, #24]
 8002ee4:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ee6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002eea:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002eec:	2312      	movs	r3, #18
 8002eee:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ef0:	2300      	movs	r3, #0
 8002ef2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ef4:	2303      	movs	r3, #3
 8002ef6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ef8:	2304      	movs	r3, #4
 8002efa:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002efc:	f107 031c 	add.w	r3, r7, #28
 8002f00:	4619      	mov	r1, r3
 8002f02:	4835      	ldr	r0, [pc, #212]	; (8002fd8 <HAL_I2C_MspInit+0x130>)
 8002f04:	f001 f8f0 	bl	80040e8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
 8002f0c:	4b31      	ldr	r3, [pc, #196]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f10:	4a30      	ldr	r2, [pc, #192]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f12:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002f16:	6413      	str	r3, [r2, #64]	; 0x40
 8002f18:	4b2e      	ldr	r3, [pc, #184]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002f20:	617b      	str	r3, [r7, #20]
 8002f22:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 8002f24:	e050      	b.n	8002fc8 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	4a2c      	ldr	r2, [pc, #176]	; (8002fdc <HAL_I2C_MspInit+0x134>)
 8002f2c:	4293      	cmp	r3, r2
 8002f2e:	d14b      	bne.n	8002fc8 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002f30:	2300      	movs	r3, #0
 8002f32:	613b      	str	r3, [r7, #16]
 8002f34:	4b27      	ldr	r3, [pc, #156]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f38:	4a26      	ldr	r2, [pc, #152]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f3a:	f043 0304 	orr.w	r3, r3, #4
 8002f3e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f40:	4b24      	ldr	r3, [pc, #144]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f44:	f003 0304 	and.w	r3, r3, #4
 8002f48:	613b      	str	r3, [r7, #16]
 8002f4a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002f4c:	2300      	movs	r3, #0
 8002f4e:	60fb      	str	r3, [r7, #12]
 8002f50:	4b20      	ldr	r3, [pc, #128]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f52:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f54:	4a1f      	ldr	r2, [pc, #124]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f56:	f043 0301 	orr.w	r3, r3, #1
 8002f5a:	6313      	str	r3, [r2, #48]	; 0x30
 8002f5c:	4b1d      	ldr	r3, [pc, #116]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002f5e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f60:	f003 0301 	and.w	r3, r3, #1
 8002f64:	60fb      	str	r3, [r7, #12]
 8002f66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002f68:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002f6c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f6e:	2312      	movs	r3, #18
 8002f70:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f76:	2303      	movs	r3, #3
 8002f78:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f7a:	2304      	movs	r3, #4
 8002f7c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002f7e:	f107 031c 	add.w	r3, r7, #28
 8002f82:	4619      	mov	r1, r3
 8002f84:	4816      	ldr	r0, [pc, #88]	; (8002fe0 <HAL_I2C_MspInit+0x138>)
 8002f86:	f001 f8af 	bl	80040e8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002f8a:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f8e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002f90:	2312      	movs	r3, #18
 8002f92:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f94:	2300      	movs	r3, #0
 8002f96:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f98:	2303      	movs	r3, #3
 8002f9a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002f9c:	2304      	movs	r3, #4
 8002f9e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002fa0:	f107 031c 	add.w	r3, r7, #28
 8002fa4:	4619      	mov	r1, r3
 8002fa6:	480f      	ldr	r0, [pc, #60]	; (8002fe4 <HAL_I2C_MspInit+0x13c>)
 8002fa8:	f001 f89e 	bl	80040e8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8002fac:	2300      	movs	r3, #0
 8002fae:	60bb      	str	r3, [r7, #8]
 8002fb0:	4b08      	ldr	r3, [pc, #32]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb4:	4a07      	ldr	r2, [pc, #28]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002fb6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8002fba:	6413      	str	r3, [r2, #64]	; 0x40
 8002fbc:	4b05      	ldr	r3, [pc, #20]	; (8002fd4 <HAL_I2C_MspInit+0x12c>)
 8002fbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fc0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002fc4:	60bb      	str	r3, [r7, #8]
 8002fc6:	68bb      	ldr	r3, [r7, #8]
}
 8002fc8:	bf00      	nop
 8002fca:	3730      	adds	r7, #48	; 0x30
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	bd80      	pop	{r7, pc}
 8002fd0:	40005400 	.word	0x40005400
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40020400 	.word	0x40020400
 8002fdc:	40005c00 	.word	0x40005c00
 8002fe0:	40020800 	.word	0x40020800
 8002fe4:	40020000 	.word	0x40020000

08002fe8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002fe8:	b580      	push	{r7, lr}
 8002fea:	b08a      	sub	sp, #40	; 0x28
 8002fec:	af00      	add	r7, sp, #0
 8002fee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002ff0:	f107 0314 	add.w	r3, r7, #20
 8002ff4:	2200      	movs	r2, #0
 8002ff6:	601a      	str	r2, [r3, #0]
 8002ff8:	605a      	str	r2, [r3, #4]
 8002ffa:	609a      	str	r2, [r3, #8]
 8002ffc:	60da      	str	r2, [r3, #12]
 8002ffe:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8003000:	687b      	ldr	r3, [r7, #4]
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a28      	ldr	r2, [pc, #160]	; (80030a8 <HAL_SPI_MspInit+0xc0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d14a      	bne.n	80030a0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800300a:	2300      	movs	r3, #0
 800300c:	613b      	str	r3, [r7, #16]
 800300e:	4b27      	ldr	r3, [pc, #156]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 8003010:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003012:	4a26      	ldr	r2, [pc, #152]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 8003014:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003018:	6413      	str	r3, [r2, #64]	; 0x40
 800301a:	4b24      	ldr	r3, [pc, #144]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 800301c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800301e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003022:	613b      	str	r3, [r7, #16]
 8003024:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003026:	2300      	movs	r3, #0
 8003028:	60fb      	str	r3, [r7, #12]
 800302a:	4b20      	ldr	r3, [pc, #128]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 800302c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800302e:	4a1f      	ldr	r2, [pc, #124]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 8003030:	f043 0304 	orr.w	r3, r3, #4
 8003034:	6313      	str	r3, [r2, #48]	; 0x30
 8003036:	4b1d      	ldr	r3, [pc, #116]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 8003038:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800303a:	f003 0304 	and.w	r3, r3, #4
 800303e:	60fb      	str	r3, [r7, #12]
 8003040:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003042:	2300      	movs	r3, #0
 8003044:	60bb      	str	r3, [r7, #8]
 8003046:	4b19      	ldr	r3, [pc, #100]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 8003048:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800304a:	4a18      	ldr	r2, [pc, #96]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 800304c:	f043 0302 	orr.w	r3, r3, #2
 8003050:	6313      	str	r3, [r2, #48]	; 0x30
 8003052:	4b16      	ldr	r3, [pc, #88]	; (80030ac <HAL_SPI_MspInit+0xc4>)
 8003054:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	60bb      	str	r3, [r7, #8]
 800305c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 800305e:	2308      	movs	r3, #8
 8003060:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003062:	2302      	movs	r3, #2
 8003064:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003066:	2300      	movs	r3, #0
 8003068:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800306a:	2303      	movs	r3, #3
 800306c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800306e:	2305      	movs	r3, #5
 8003070:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003072:	f107 0314 	add.w	r3, r7, #20
 8003076:	4619      	mov	r1, r3
 8003078:	480d      	ldr	r0, [pc, #52]	; (80030b0 <HAL_SPI_MspInit+0xc8>)
 800307a:	f001 f835 	bl	80040e8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800307e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8003082:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003084:	2302      	movs	r3, #2
 8003086:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003088:	2300      	movs	r3, #0
 800308a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800308c:	2303      	movs	r3, #3
 800308e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8003090:	2305      	movs	r3, #5
 8003092:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003094:	f107 0314 	add.w	r3, r7, #20
 8003098:	4619      	mov	r1, r3
 800309a:	4806      	ldr	r0, [pc, #24]	; (80030b4 <HAL_SPI_MspInit+0xcc>)
 800309c:	f001 f824 	bl	80040e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80030a0:	bf00      	nop
 80030a2:	3728      	adds	r7, #40	; 0x28
 80030a4:	46bd      	mov	sp, r7
 80030a6:	bd80      	pop	{r7, pc}
 80030a8:	40003800 	.word	0x40003800
 80030ac:	40023800 	.word	0x40023800
 80030b0:	40020800 	.word	0x40020800
 80030b4:	40020400 	.word	0x40020400

080030b8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	b08c      	sub	sp, #48	; 0x30
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80030c0:	f107 031c 	add.w	r3, r7, #28
 80030c4:	2200      	movs	r2, #0
 80030c6:	601a      	str	r2, [r3, #0]
 80030c8:	605a      	str	r2, [r3, #4]
 80030ca:	609a      	str	r2, [r3, #8]
 80030cc:	60da      	str	r2, [r3, #12]
 80030ce:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	4a3f      	ldr	r2, [pc, #252]	; (80031d4 <HAL_TIM_Base_MspInit+0x11c>)
 80030d6:	4293      	cmp	r3, r2
 80030d8:	d10e      	bne.n	80030f8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80030da:	2300      	movs	r3, #0
 80030dc:	61bb      	str	r3, [r7, #24]
 80030de:	4b3e      	ldr	r3, [pc, #248]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 80030e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e2:	4a3d      	ldr	r2, [pc, #244]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 80030e4:	f043 0301 	orr.w	r3, r3, #1
 80030e8:	6453      	str	r3, [r2, #68]	; 0x44
 80030ea:	4b3b      	ldr	r3, [pc, #236]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 80030ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030ee:	f003 0301 	and.w	r3, r3, #1
 80030f2:	61bb      	str	r3, [r7, #24]
 80030f4:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80030f6:	e069      	b.n	80031cc <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003100:	d135      	bne.n	800316e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
 8003106:	4b34      	ldr	r3, [pc, #208]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 8003108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800310a:	4a33      	ldr	r2, [pc, #204]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 800310c:	f043 0301 	orr.w	r3, r3, #1
 8003110:	6413      	str	r3, [r2, #64]	; 0x40
 8003112:	4b31      	ldr	r3, [pc, #196]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 8003114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003116:	f003 0301 	and.w	r3, r3, #1
 800311a:	617b      	str	r3, [r7, #20]
 800311c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800311e:	2300      	movs	r3, #0
 8003120:	613b      	str	r3, [r7, #16]
 8003122:	4b2d      	ldr	r3, [pc, #180]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 8003124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003126:	4a2c      	ldr	r2, [pc, #176]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 8003128:	f043 0301 	orr.w	r3, r3, #1
 800312c:	6313      	str	r3, [r2, #48]	; 0x30
 800312e:	4b2a      	ldr	r3, [pc, #168]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 8003130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003132:	f003 0301 	and.w	r3, r3, #1
 8003136:	613b      	str	r3, [r7, #16]
 8003138:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 800313a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800313e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003140:	2302      	movs	r3, #2
 8003142:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003144:	2300      	movs	r3, #0
 8003146:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003148:	2300      	movs	r3, #0
 800314a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800314c:	2301      	movs	r3, #1
 800314e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003150:	f107 031c 	add.w	r3, r7, #28
 8003154:	4619      	mov	r1, r3
 8003156:	4821      	ldr	r0, [pc, #132]	; (80031dc <HAL_TIM_Base_MspInit+0x124>)
 8003158:	f000 ffc6 	bl	80040e8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800315c:	2200      	movs	r2, #0
 800315e:	2100      	movs	r1, #0
 8003160:	201c      	movs	r0, #28
 8003162:	f000 fef8 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003166:	201c      	movs	r0, #28
 8003168:	f000 ff11 	bl	8003f8e <HAL_NVIC_EnableIRQ>
}
 800316c:	e02e      	b.n	80031cc <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a1b      	ldr	r2, [pc, #108]	; (80031e0 <HAL_TIM_Base_MspInit+0x128>)
 8003174:	4293      	cmp	r3, r2
 8003176:	d10e      	bne.n	8003196 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003178:	2300      	movs	r3, #0
 800317a:	60fb      	str	r3, [r7, #12]
 800317c:	4b16      	ldr	r3, [pc, #88]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 800317e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003180:	4a15      	ldr	r2, [pc, #84]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 8003182:	f043 0302 	orr.w	r3, r3, #2
 8003186:	6413      	str	r3, [r2, #64]	; 0x40
 8003188:	4b13      	ldr	r3, [pc, #76]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 800318a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800318c:	f003 0302 	and.w	r3, r3, #2
 8003190:	60fb      	str	r3, [r7, #12]
 8003192:	68fb      	ldr	r3, [r7, #12]
}
 8003194:	e01a      	b.n	80031cc <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	4a12      	ldr	r2, [pc, #72]	; (80031e4 <HAL_TIM_Base_MspInit+0x12c>)
 800319c:	4293      	cmp	r3, r2
 800319e:	d115      	bne.n	80031cc <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM5_CLK_ENABLE();
 80031a0:	2300      	movs	r3, #0
 80031a2:	60bb      	str	r3, [r7, #8]
 80031a4:	4b0c      	ldr	r3, [pc, #48]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 80031a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a8:	4a0b      	ldr	r2, [pc, #44]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 80031aa:	f043 0308 	orr.w	r3, r3, #8
 80031ae:	6413      	str	r3, [r2, #64]	; 0x40
 80031b0:	4b09      	ldr	r3, [pc, #36]	; (80031d8 <HAL_TIM_Base_MspInit+0x120>)
 80031b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031b4:	f003 0308 	and.w	r3, r3, #8
 80031b8:	60bb      	str	r3, [r7, #8]
 80031ba:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 80031bc:	2200      	movs	r2, #0
 80031be:	2100      	movs	r1, #0
 80031c0:	2032      	movs	r0, #50	; 0x32
 80031c2:	f000 fec8 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 80031c6:	2032      	movs	r0, #50	; 0x32
 80031c8:	f000 fee1 	bl	8003f8e <HAL_NVIC_EnableIRQ>
}
 80031cc:	bf00      	nop
 80031ce:	3730      	adds	r7, #48	; 0x30
 80031d0:	46bd      	mov	sp, r7
 80031d2:	bd80      	pop	{r7, pc}
 80031d4:	40010000 	.word	0x40010000
 80031d8:	40023800 	.word	0x40023800
 80031dc:	40020000 	.word	0x40020000
 80031e0:	40000400 	.word	0x40000400
 80031e4:	40000c00 	.word	0x40000c00

080031e8 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 80031e8:	b480      	push	{r7}
 80031ea:	b085      	sub	sp, #20
 80031ec:	af00      	add	r7, sp, #0
 80031ee:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4a0b      	ldr	r2, [pc, #44]	; (8003224 <HAL_TIM_PWM_MspInit+0x3c>)
 80031f6:	4293      	cmp	r3, r2
 80031f8:	d10d      	bne.n	8003216 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 80031fa:	2300      	movs	r3, #0
 80031fc:	60fb      	str	r3, [r7, #12]
 80031fe:	4b0a      	ldr	r3, [pc, #40]	; (8003228 <HAL_TIM_PWM_MspInit+0x40>)
 8003200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003202:	4a09      	ldr	r2, [pc, #36]	; (8003228 <HAL_TIM_PWM_MspInit+0x40>)
 8003204:	f043 0304 	orr.w	r3, r3, #4
 8003208:	6413      	str	r3, [r2, #64]	; 0x40
 800320a:	4b07      	ldr	r3, [pc, #28]	; (8003228 <HAL_TIM_PWM_MspInit+0x40>)
 800320c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800320e:	f003 0304 	and.w	r3, r3, #4
 8003212:	60fb      	str	r3, [r7, #12]
 8003214:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8003216:	bf00      	nop
 8003218:	3714      	adds	r7, #20
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	40000800 	.word	0x40000800
 8003228:	40023800 	.word	0x40023800

0800322c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800322c:	b580      	push	{r7, lr}
 800322e:	b08a      	sub	sp, #40	; 0x28
 8003230:	af00      	add	r7, sp, #0
 8003232:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003234:	f107 0314 	add.w	r3, r7, #20
 8003238:	2200      	movs	r2, #0
 800323a:	601a      	str	r2, [r3, #0]
 800323c:	605a      	str	r2, [r3, #4]
 800323e:	609a      	str	r2, [r3, #8]
 8003240:	60da      	str	r2, [r3, #12]
 8003242:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003244:	687b      	ldr	r3, [r7, #4]
 8003246:	681b      	ldr	r3, [r3, #0]
 8003248:	4a24      	ldr	r2, [pc, #144]	; (80032dc <HAL_TIM_MspPostInit+0xb0>)
 800324a:	4293      	cmp	r3, r2
 800324c:	d11e      	bne.n	800328c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800324e:	2300      	movs	r3, #0
 8003250:	613b      	str	r3, [r7, #16]
 8003252:	4b23      	ldr	r3, [pc, #140]	; (80032e0 <HAL_TIM_MspPostInit+0xb4>)
 8003254:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003256:	4a22      	ldr	r2, [pc, #136]	; (80032e0 <HAL_TIM_MspPostInit+0xb4>)
 8003258:	f043 0304 	orr.w	r3, r3, #4
 800325c:	6313      	str	r3, [r2, #48]	; 0x30
 800325e:	4b20      	ldr	r3, [pc, #128]	; (80032e0 <HAL_TIM_MspPostInit+0xb4>)
 8003260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003262:	f003 0304 	and.w	r3, r3, #4
 8003266:	613b      	str	r3, [r7, #16]
 8003268:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800326a:	2380      	movs	r3, #128	; 0x80
 800326c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800326e:	2302      	movs	r3, #2
 8003270:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003272:	2300      	movs	r3, #0
 8003274:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003276:	2300      	movs	r3, #0
 8003278:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800327a:	2302      	movs	r3, #2
 800327c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800327e:	f107 0314 	add.w	r3, r7, #20
 8003282:	4619      	mov	r1, r3
 8003284:	4817      	ldr	r0, [pc, #92]	; (80032e4 <HAL_TIM_MspPostInit+0xb8>)
 8003286:	f000 ff2f 	bl	80040e8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 800328a:	e022      	b.n	80032d2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	4a15      	ldr	r2, [pc, #84]	; (80032e8 <HAL_TIM_MspPostInit+0xbc>)
 8003292:	4293      	cmp	r3, r2
 8003294:	d11d      	bne.n	80032d2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003296:	2300      	movs	r3, #0
 8003298:	60fb      	str	r3, [r7, #12]
 800329a:	4b11      	ldr	r3, [pc, #68]	; (80032e0 <HAL_TIM_MspPostInit+0xb4>)
 800329c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800329e:	4a10      	ldr	r2, [pc, #64]	; (80032e0 <HAL_TIM_MspPostInit+0xb4>)
 80032a0:	f043 0302 	orr.w	r3, r3, #2
 80032a4:	6313      	str	r3, [r2, #48]	; 0x30
 80032a6:	4b0e      	ldr	r3, [pc, #56]	; (80032e0 <HAL_TIM_MspPostInit+0xb4>)
 80032a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032aa:	f003 0302 	and.w	r3, r3, #2
 80032ae:	60fb      	str	r3, [r7, #12]
 80032b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80032b2:	2380      	movs	r3, #128	; 0x80
 80032b4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80032b6:	2302      	movs	r3, #2
 80032b8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80032ba:	2300      	movs	r3, #0
 80032bc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80032be:	2300      	movs	r3, #0
 80032c0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80032c2:	2302      	movs	r3, #2
 80032c4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80032c6:	f107 0314 	add.w	r3, r7, #20
 80032ca:	4619      	mov	r1, r3
 80032cc:	4807      	ldr	r0, [pc, #28]	; (80032ec <HAL_TIM_MspPostInit+0xc0>)
 80032ce:	f000 ff0b 	bl	80040e8 <HAL_GPIO_Init>
}
 80032d2:	bf00      	nop
 80032d4:	3728      	adds	r7, #40	; 0x28
 80032d6:	46bd      	mov	sp, r7
 80032d8:	bd80      	pop	{r7, pc}
 80032da:	bf00      	nop
 80032dc:	40000400 	.word	0x40000400
 80032e0:	40023800 	.word	0x40023800
 80032e4:	40020800 	.word	0x40020800
 80032e8:	40000800 	.word	0x40000800
 80032ec:	40020400 	.word	0x40020400

080032f0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80032f0:	b580      	push	{r7, lr}
 80032f2:	b08a      	sub	sp, #40	; 0x28
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80032f8:	f107 0314 	add.w	r3, r7, #20
 80032fc:	2200      	movs	r2, #0
 80032fe:	601a      	str	r2, [r3, #0]
 8003300:	605a      	str	r2, [r3, #4]
 8003302:	609a      	str	r2, [r3, #8]
 8003304:	60da      	str	r2, [r3, #12]
 8003306:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	4a1d      	ldr	r2, [pc, #116]	; (8003384 <HAL_UART_MspInit+0x94>)
 800330e:	4293      	cmp	r3, r2
 8003310:	d134      	bne.n	800337c <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8003312:	2300      	movs	r3, #0
 8003314:	613b      	str	r3, [r7, #16]
 8003316:	4b1c      	ldr	r3, [pc, #112]	; (8003388 <HAL_UART_MspInit+0x98>)
 8003318:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800331a:	4a1b      	ldr	r2, [pc, #108]	; (8003388 <HAL_UART_MspInit+0x98>)
 800331c:	f043 0310 	orr.w	r3, r3, #16
 8003320:	6453      	str	r3, [r2, #68]	; 0x44
 8003322:	4b19      	ldr	r3, [pc, #100]	; (8003388 <HAL_UART_MspInit+0x98>)
 8003324:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003326:	f003 0310 	and.w	r3, r3, #16
 800332a:	613b      	str	r3, [r7, #16]
 800332c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800332e:	2300      	movs	r3, #0
 8003330:	60fb      	str	r3, [r7, #12]
 8003332:	4b15      	ldr	r3, [pc, #84]	; (8003388 <HAL_UART_MspInit+0x98>)
 8003334:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003336:	4a14      	ldr	r2, [pc, #80]	; (8003388 <HAL_UART_MspInit+0x98>)
 8003338:	f043 0301 	orr.w	r3, r3, #1
 800333c:	6313      	str	r3, [r2, #48]	; 0x30
 800333e:	4b12      	ldr	r3, [pc, #72]	; (8003388 <HAL_UART_MspInit+0x98>)
 8003340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003342:	f003 0301 	and.w	r3, r3, #1
 8003346:	60fb      	str	r3, [r7, #12]
 8003348:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800334a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800334e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003350:	2302      	movs	r3, #2
 8003352:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003354:	2300      	movs	r3, #0
 8003356:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003358:	2303      	movs	r3, #3
 800335a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800335c:	2307      	movs	r3, #7
 800335e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003360:	f107 0314 	add.w	r3, r7, #20
 8003364:	4619      	mov	r1, r3
 8003366:	4809      	ldr	r0, [pc, #36]	; (800338c <HAL_UART_MspInit+0x9c>)
 8003368:	f000 febe 	bl	80040e8 <HAL_GPIO_Init>

    /* USART1 interrupt Init */
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800336c:	2200      	movs	r2, #0
 800336e:	2100      	movs	r1, #0
 8003370:	2025      	movs	r0, #37	; 0x25
 8003372:	f000 fdf0 	bl	8003f56 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8003376:	2025      	movs	r0, #37	; 0x25
 8003378:	f000 fe09 	bl	8003f8e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800337c:	bf00      	nop
 800337e:	3728      	adds	r7, #40	; 0x28
 8003380:	46bd      	mov	sp, r7
 8003382:	bd80      	pop	{r7, pc}
 8003384:	40011000 	.word	0x40011000
 8003388:	40023800 	.word	0x40023800
 800338c:	40020000 	.word	0x40020000

08003390 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003390:	b480      	push	{r7}
 8003392:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003394:	e7fe      	b.n	8003394 <NMI_Handler+0x4>

08003396 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003396:	b480      	push	{r7}
 8003398:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800339a:	e7fe      	b.n	800339a <HardFault_Handler+0x4>

0800339c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800339c:	b480      	push	{r7}
 800339e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80033a0:	e7fe      	b.n	80033a0 <MemManage_Handler+0x4>

080033a2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80033a2:	b480      	push	{r7}
 80033a4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80033a6:	e7fe      	b.n	80033a6 <BusFault_Handler+0x4>

080033a8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80033a8:	b480      	push	{r7}
 80033aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80033ac:	e7fe      	b.n	80033ac <UsageFault_Handler+0x4>

080033ae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80033ae:	b480      	push	{r7}
 80033b0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80033b2:	bf00      	nop
 80033b4:	46bd      	mov	sp, r7
 80033b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033ba:	4770      	bx	lr

080033bc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80033bc:	b480      	push	{r7}
 80033be:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80033c0:	bf00      	nop
 80033c2:	46bd      	mov	sp, r7
 80033c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c8:	4770      	bx	lr

080033ca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80033ca:	b480      	push	{r7}
 80033cc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80033ce:	bf00      	nop
 80033d0:	46bd      	mov	sp, r7
 80033d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d6:	4770      	bx	lr

080033d8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80033d8:	b580      	push	{r7, lr}
 80033da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80033dc:	f000 f8ee 	bl	80035bc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80033e0:	bf00      	nop
 80033e2:	bd80      	pop	{r7, pc}

080033e4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80033e8:	481d      	ldr	r0, [pc, #116]	; (8003460 <TIM2_IRQHandler+0x7c>)
 80033ea:	f003 fb29 	bl	8006a40 <HAL_TIM_IRQHandler>
	if(firsttime){
 80033ee:	4b1d      	ldr	r3, [pc, #116]	; (8003464 <TIM2_IRQHandler+0x80>)
 80033f0:	781b      	ldrb	r3, [r3, #0]
 80033f2:	2b00      	cmp	r3, #0
 80033f4:	d00d      	beq.n	8003412 <TIM2_IRQHandler+0x2e>
		firsttime =0;
 80033f6:	4b1b      	ldr	r3, [pc, #108]	; (8003464 <TIM2_IRQHandler+0x80>)
 80033f8:	2200      	movs	r2, #0
 80033fa:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = 0;
 80033fc:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003400:	2200      	movs	r2, #0
 8003402:	625a      	str	r2, [r3, #36]	; 0x24
		index = 0;
 8003404:	4b18      	ldr	r3, [pc, #96]	; (8003468 <TIM2_IRQHandler+0x84>)
 8003406:	2200      	movs	r2, #0
 8003408:	601a      	str	r2, [r3, #0]
		HAL_TIM_IRQHandler(&htim2);
 800340a:	4815      	ldr	r0, [pc, #84]	; (8003460 <TIM2_IRQHandler+0x7c>)
 800340c:	f003 fb18 	bl	8006a40 <HAL_TIM_IRQHandler>
		return;
 8003410:	e024      	b.n	800345c <TIM2_IRQHandler+0x78>
	}
	data[index] = TIM2->CNT;
 8003412:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003416:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8003418:	4b13      	ldr	r3, [pc, #76]	; (8003468 <TIM2_IRQHandler+0x84>)
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	b291      	uxth	r1, r2
 800341e:	4a13      	ldr	r2, [pc, #76]	; (800346c <TIM2_IRQHandler+0x88>)
 8003420:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TIM2->CNT =0;
 8003424:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8003428:	2200      	movs	r2, #0
 800342a:	625a      	str	r2, [r3, #36]	; 0x24
	index++;
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <TIM2_IRQHandler+0x84>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	3301      	adds	r3, #1
 8003432:	4a0d      	ldr	r2, [pc, #52]	; (8003468 <TIM2_IRQHandler+0x84>)
 8003434:	6013      	str	r3, [r2, #0]
	if(index == dataLen){
 8003436:	4b0c      	ldr	r3, [pc, #48]	; (8003468 <TIM2_IRQHandler+0x84>)
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	4b0d      	ldr	r3, [pc, #52]	; (8003470 <TIM2_IRQHandler+0x8c>)
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	429a      	cmp	r2, r3
 8003440:	d109      	bne.n	8003456 <TIM2_IRQHandler+0x72>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);		//Transmit();
 8003442:	2100      	movs	r1, #0
 8003444:	4806      	ldr	r0, [pc, #24]	; (8003460 <TIM2_IRQHandler+0x7c>)
 8003446:	f003 fa4d 	bl	80068e4 <HAL_TIM_IC_Stop_IT>
    firsttime = 1;
 800344a:	4b06      	ldr	r3, [pc, #24]	; (8003464 <TIM2_IRQHandler+0x80>)
 800344c:	2201      	movs	r2, #1
 800344e:	701a      	strb	r2, [r3, #0]
    received = 1;
 8003450:	4b08      	ldr	r3, [pc, #32]	; (8003474 <TIM2_IRQHandler+0x90>)
 8003452:	2201      	movs	r2, #1
 8003454:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003456:	4802      	ldr	r0, [pc, #8]	; (8003460 <TIM2_IRQHandler+0x7c>)
 8003458:	f003 faf2 	bl	8006a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800345c:	bd80      	pop	{r7, pc}
 800345e:	bf00      	nop
 8003460:	20001688 	.word	0x20001688
 8003464:	20001446 	.word	0x20001446
 8003468:	20015e24 	.word	0x20015e24
 800346c:	20015b10 	.word	0x20015b10
 8003470:	20000008 	.word	0x20000008
 8003474:	20015bb0 	.word	0x20015bb0

08003478 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8003478:	b580      	push	{r7, lr}
 800347a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800347c:	4802      	ldr	r0, [pc, #8]	; (8003488 <USART1_IRQHandler+0x10>)
 800347e:	f004 fbb1 	bl	8007be4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8003482:	bf00      	nop
 8003484:	bd80      	pop	{r7, pc}
 8003486:	bf00      	nop
 8003488:	200017a8 	.word	0x200017a8

0800348c <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 800348c:	b580      	push	{r7, lr}
 800348e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8003490:	4802      	ldr	r0, [pc, #8]	; (800349c <TIM5_IRQHandler+0x10>)
 8003492:	f003 fad5 	bl	8006a40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8003496:	bf00      	nop
 8003498:	bd80      	pop	{r7, pc}
 800349a:	bf00      	nop
 800349c:	20001760 	.word	0x20001760

080034a0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80034a0:	b480      	push	{r7}
 80034a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80034a4:	4b06      	ldr	r3, [pc, #24]	; (80034c0 <SystemInit+0x20>)
 80034a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80034aa:	4a05      	ldr	r2, [pc, #20]	; (80034c0 <SystemInit+0x20>)
 80034ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80034b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80034b4:	bf00      	nop
 80034b6:	46bd      	mov	sp, r7
 80034b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034bc:	4770      	bx	lr
 80034be:	bf00      	nop
 80034c0:	e000ed00 	.word	0xe000ed00

080034c4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80034c4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80034fc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80034c8:	480d      	ldr	r0, [pc, #52]	; (8003500 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80034ca:	490e      	ldr	r1, [pc, #56]	; (8003504 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80034cc:	4a0e      	ldr	r2, [pc, #56]	; (8003508 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80034ce:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80034d0:	e002      	b.n	80034d8 <LoopCopyDataInit>

080034d2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80034d2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80034d4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80034d6:	3304      	adds	r3, #4

080034d8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80034d8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80034da:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80034dc:	d3f9      	bcc.n	80034d2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80034de:	4a0b      	ldr	r2, [pc, #44]	; (800350c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80034e0:	4c0b      	ldr	r4, [pc, #44]	; (8003510 <LoopFillZerobss+0x26>)
  movs r3, #0
 80034e2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80034e4:	e001      	b.n	80034ea <LoopFillZerobss>

080034e6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80034e6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80034e8:	3204      	adds	r2, #4

080034ea <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80034ea:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80034ec:	d3fb      	bcc.n	80034e6 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80034ee:	f7ff ffd7 	bl	80034a0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80034f2:	f005 fae9 	bl	8008ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80034f6:	f7fd fcc1 	bl	8000e7c <main>
  bx  lr    
 80034fa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80034fc:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8003500:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003504:	200014b8 	.word	0x200014b8
  ldr r2, =_sidata
 8003508:	08008f88 	.word	0x08008f88
  ldr r2, =_sbss
 800350c:	200014b8 	.word	0x200014b8
  ldr r4, =_ebss
 8003510:	20015e2c 	.word	0x20015e2c

08003514 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003514:	e7fe      	b.n	8003514 <ADC_IRQHandler>
	...

08003518 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800351c:	4b0e      	ldr	r3, [pc, #56]	; (8003558 <HAL_Init+0x40>)
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	4a0d      	ldr	r2, [pc, #52]	; (8003558 <HAL_Init+0x40>)
 8003522:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003526:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003528:	4b0b      	ldr	r3, [pc, #44]	; (8003558 <HAL_Init+0x40>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4a0a      	ldr	r2, [pc, #40]	; (8003558 <HAL_Init+0x40>)
 800352e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003532:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003534:	4b08      	ldr	r3, [pc, #32]	; (8003558 <HAL_Init+0x40>)
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	4a07      	ldr	r2, [pc, #28]	; (8003558 <HAL_Init+0x40>)
 800353a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800353e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003540:	2003      	movs	r0, #3
 8003542:	f000 fcfd 	bl	8003f40 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003546:	2000      	movs	r0, #0
 8003548:	f000 f808 	bl	800355c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800354c:	f7ff fc40 	bl	8002dd0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003550:	2300      	movs	r3, #0
}
 8003552:	4618      	mov	r0, r3
 8003554:	bd80      	pop	{r7, pc}
 8003556:	bf00      	nop
 8003558:	40023c00 	.word	0x40023c00

0800355c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800355c:	b580      	push	{r7, lr}
 800355e:	b082      	sub	sp, #8
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003564:	4b12      	ldr	r3, [pc, #72]	; (80035b0 <HAL_InitTick+0x54>)
 8003566:	681a      	ldr	r2, [r3, #0]
 8003568:	4b12      	ldr	r3, [pc, #72]	; (80035b4 <HAL_InitTick+0x58>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	4619      	mov	r1, r3
 800356e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003572:	fbb3 f3f1 	udiv	r3, r3, r1
 8003576:	fbb2 f3f3 	udiv	r3, r2, r3
 800357a:	4618      	mov	r0, r3
 800357c:	f000 fd15 	bl	8003faa <HAL_SYSTICK_Config>
 8003580:	4603      	mov	r3, r0
 8003582:	2b00      	cmp	r3, #0
 8003584:	d001      	beq.n	800358a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003586:	2301      	movs	r3, #1
 8003588:	e00e      	b.n	80035a8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	2b0f      	cmp	r3, #15
 800358e:	d80a      	bhi.n	80035a6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003590:	2200      	movs	r2, #0
 8003592:	6879      	ldr	r1, [r7, #4]
 8003594:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003598:	f000 fcdd 	bl	8003f56 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800359c:	4a06      	ldr	r2, [pc, #24]	; (80035b8 <HAL_InitTick+0x5c>)
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80035a2:	2300      	movs	r3, #0
 80035a4:	e000      	b.n	80035a8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80035a6:	2301      	movs	r3, #1
}
 80035a8:	4618      	mov	r0, r3
 80035aa:	3708      	adds	r7, #8
 80035ac:	46bd      	mov	sp, r7
 80035ae:	bd80      	pop	{r7, pc}
 80035b0:	20001448 	.word	0x20001448
 80035b4:	20001450 	.word	0x20001450
 80035b8:	2000144c 	.word	0x2000144c

080035bc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80035bc:	b480      	push	{r7}
 80035be:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80035c0:	4b06      	ldr	r3, [pc, #24]	; (80035dc <HAL_IncTick+0x20>)
 80035c2:	781b      	ldrb	r3, [r3, #0]
 80035c4:	461a      	mov	r2, r3
 80035c6:	4b06      	ldr	r3, [pc, #24]	; (80035e0 <HAL_IncTick+0x24>)
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	4413      	add	r3, r2
 80035cc:	4a04      	ldr	r2, [pc, #16]	; (80035e0 <HAL_IncTick+0x24>)
 80035ce:	6013      	str	r3, [r2, #0]
}
 80035d0:	bf00      	nop
 80035d2:	46bd      	mov	sp, r7
 80035d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035d8:	4770      	bx	lr
 80035da:	bf00      	nop
 80035dc:	20001450 	.word	0x20001450
 80035e0:	20015e28 	.word	0x20015e28

080035e4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80035e4:	b480      	push	{r7}
 80035e6:	af00      	add	r7, sp, #0
  return uwTick;
 80035e8:	4b03      	ldr	r3, [pc, #12]	; (80035f8 <HAL_GetTick+0x14>)
 80035ea:	681b      	ldr	r3, [r3, #0]
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	46bd      	mov	sp, r7
 80035f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f4:	4770      	bx	lr
 80035f6:	bf00      	nop
 80035f8:	20015e28 	.word	0x20015e28

080035fc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003604:	f7ff ffee 	bl	80035e4 <HAL_GetTick>
 8003608:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003614:	d005      	beq.n	8003622 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003616:	4b0a      	ldr	r3, [pc, #40]	; (8003640 <HAL_Delay+0x44>)
 8003618:	781b      	ldrb	r3, [r3, #0]
 800361a:	461a      	mov	r2, r3
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	4413      	add	r3, r2
 8003620:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003622:	bf00      	nop
 8003624:	f7ff ffde 	bl	80035e4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	68bb      	ldr	r3, [r7, #8]
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	68fa      	ldr	r2, [r7, #12]
 8003630:	429a      	cmp	r2, r3
 8003632:	d8f7      	bhi.n	8003624 <HAL_Delay+0x28>
  {
  }
}
 8003634:	bf00      	nop
 8003636:	bf00      	nop
 8003638:	3710      	adds	r7, #16
 800363a:	46bd      	mov	sp, r7
 800363c:	bd80      	pop	{r7, pc}
 800363e:	bf00      	nop
 8003640:	20001450 	.word	0x20001450

08003644 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003644:	b580      	push	{r7, lr}
 8003646:	b084      	sub	sp, #16
 8003648:	af00      	add	r7, sp, #0
 800364a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800364c:	2300      	movs	r3, #0
 800364e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d101      	bne.n	800365a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8003656:	2301      	movs	r3, #1
 8003658:	e033      	b.n	80036c2 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800365e:	2b00      	cmp	r3, #0
 8003660:	d109      	bne.n	8003676 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8003662:	6878      	ldr	r0, [r7, #4]
 8003664:	f7ff fbdc 	bl	8002e20 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2200      	movs	r2, #0
 800366c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	2200      	movs	r2, #0
 8003672:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800367a:	f003 0310 	and.w	r3, r3, #16
 800367e:	2b00      	cmp	r3, #0
 8003680:	d118      	bne.n	80036b4 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 800368a:	f023 0302 	bic.w	r3, r3, #2
 800368e:	f043 0202 	orr.w	r2, r3, #2
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8003696:	6878      	ldr	r0, [r7, #4]
 8003698:	f000 fa86 	bl	8003ba8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2200      	movs	r2, #0
 80036a0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036a6:	f023 0303 	bic.w	r3, r3, #3
 80036aa:	f043 0201 	orr.w	r2, r3, #1
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	641a      	str	r2, [r3, #64]	; 0x40
 80036b2:	e001      	b.n	80036b8 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80036b4:	2301      	movs	r3, #1
 80036b6:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2200      	movs	r2, #0
 80036bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80036c0:	7bfb      	ldrb	r3, [r7, #15]
}
 80036c2:	4618      	mov	r0, r3
 80036c4:	3710      	adds	r7, #16
 80036c6:	46bd      	mov	sp, r7
 80036c8:	bd80      	pop	{r7, pc}
	...

080036cc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80036cc:	b480      	push	{r7}
 80036ce:	b085      	sub	sp, #20
 80036d0:	af00      	add	r7, sp, #0
 80036d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 80036d4:	2300      	movs	r3, #0
 80036d6:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d101      	bne.n	80036e6 <HAL_ADC_Start+0x1a>
 80036e2:	2302      	movs	r3, #2
 80036e4:	e097      	b.n	8003816 <HAL_ADC_Start+0x14a>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2201      	movs	r2, #1
 80036ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	689b      	ldr	r3, [r3, #8]
 80036f4:	f003 0301 	and.w	r3, r3, #1
 80036f8:	2b01      	cmp	r3, #1
 80036fa:	d018      	beq.n	800372e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	689a      	ldr	r2, [r3, #8]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f042 0201 	orr.w	r2, r2, #1
 800370a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 800370c:	4b45      	ldr	r3, [pc, #276]	; (8003824 <HAL_ADC_Start+0x158>)
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a45      	ldr	r2, [pc, #276]	; (8003828 <HAL_ADC_Start+0x15c>)
 8003712:	fba2 2303 	umull	r2, r3, r2, r3
 8003716:	0c9a      	lsrs	r2, r3, #18
 8003718:	4613      	mov	r3, r2
 800371a:	005b      	lsls	r3, r3, #1
 800371c:	4413      	add	r3, r2
 800371e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003720:	e002      	b.n	8003728 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003722:	68bb      	ldr	r3, [r7, #8]
 8003724:	3b01      	subs	r3, #1
 8003726:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003728:	68bb      	ldr	r3, [r7, #8]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d1f9      	bne.n	8003722 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	689b      	ldr	r3, [r3, #8]
 8003734:	f003 0301 	and.w	r3, r3, #1
 8003738:	2b01      	cmp	r3, #1
 800373a:	d15f      	bne.n	80037fc <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003740:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003744:	f023 0301 	bic.w	r3, r3, #1
 8003748:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	685b      	ldr	r3, [r3, #4]
 8003756:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800375a:	2b00      	cmp	r3, #0
 800375c:	d007      	beq.n	800376e <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003762:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8003766:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003772:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003776:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800377a:	d106      	bne.n	800378a <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003780:	f023 0206 	bic.w	r2, r3, #6
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	645a      	str	r2, [r3, #68]	; 0x44
 8003788:	e002      	b.n	8003790 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	2200      	movs	r2, #0
 800378e:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	2200      	movs	r2, #0
 8003794:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003798:	4b24      	ldr	r3, [pc, #144]	; (800382c <HAL_ADC_Start+0x160>)
 800379a:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681b      	ldr	r3, [r3, #0]
 80037a0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80037a4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	685b      	ldr	r3, [r3, #4]
 80037aa:	f003 031f 	and.w	r3, r3, #31
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d10f      	bne.n	80037d2 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037bc:	2b00      	cmp	r3, #0
 80037be:	d129      	bne.n	8003814 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	689a      	ldr	r2, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037ce:	609a      	str	r2, [r3, #8]
 80037d0:	e020      	b.n	8003814 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	4a16      	ldr	r2, [pc, #88]	; (8003830 <HAL_ADC_Start+0x164>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d11b      	bne.n	8003814 <HAL_ADC_Start+0x148>
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689b      	ldr	r3, [r3, #8]
 80037e2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80037e6:	2b00      	cmp	r3, #0
 80037e8:	d114      	bne.n	8003814 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	689a      	ldr	r2, [r3, #8]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80037f8:	609a      	str	r2, [r3, #8]
 80037fa:	e00b      	b.n	8003814 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003800:	f043 0210 	orr.w	r2, r3, #16
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800380c:	f043 0201 	orr.w	r2, r3, #1
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003814:	2300      	movs	r3, #0
}
 8003816:	4618      	mov	r0, r3
 8003818:	3714      	adds	r7, #20
 800381a:	46bd      	mov	sp, r7
 800381c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003820:	4770      	bx	lr
 8003822:	bf00      	nop
 8003824:	20001448 	.word	0x20001448
 8003828:	431bde83 	.word	0x431bde83
 800382c:	40012300 	.word	0x40012300
 8003830:	40012000 	.word	0x40012000

08003834 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 800383e:	2300      	movs	r3, #0
 8003840:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689b      	ldr	r3, [r3, #8]
 8003848:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800384c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003850:	d113      	bne.n	800387a <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	689b      	ldr	r3, [r3, #8]
 8003858:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800385c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003860:	d10b      	bne.n	800387a <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003862:	687b      	ldr	r3, [r7, #4]
 8003864:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003866:	f043 0220 	orr.w	r2, r3, #32
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800386e:	687b      	ldr	r3, [r7, #4]
 8003870:	2200      	movs	r2, #0
 8003872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8003876:	2301      	movs	r3, #1
 8003878:	e063      	b.n	8003942 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800387a:	f7ff feb3 	bl	80035e4 <HAL_GetTick>
 800387e:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003880:	e021      	b.n	80038c6 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003888:	d01d      	beq.n	80038c6 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800388a:	683b      	ldr	r3, [r7, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d007      	beq.n	80038a0 <HAL_ADC_PollForConversion+0x6c>
 8003890:	f7ff fea8 	bl	80035e4 <HAL_GetTick>
 8003894:	4602      	mov	r2, r0
 8003896:	68fb      	ldr	r3, [r7, #12]
 8003898:	1ad3      	subs	r3, r2, r3
 800389a:	683a      	ldr	r2, [r7, #0]
 800389c:	429a      	cmp	r2, r3
 800389e:	d212      	bcs.n	80038c6 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b02      	cmp	r3, #2
 80038ac:	d00b      	beq.n	80038c6 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b2:	f043 0204 	orr.w	r2, r3, #4
 80038b6:	687b      	ldr	r3, [r7, #4]
 80038b8:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	2200      	movs	r2, #0
 80038be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80038c2:	2303      	movs	r3, #3
 80038c4:	e03d      	b.n	8003942 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	f003 0302 	and.w	r3, r3, #2
 80038d0:	2b02      	cmp	r3, #2
 80038d2:	d1d6      	bne.n	8003882 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f06f 0212 	mvn.w	r2, #18
 80038dc:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	689b      	ldr	r3, [r3, #8]
 80038f0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80038f4:	2b00      	cmp	r3, #0
 80038f6:	d123      	bne.n	8003940 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d11f      	bne.n	8003940 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003906:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800390a:	2b00      	cmp	r3, #0
 800390c:	d006      	beq.n	800391c <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	681b      	ldr	r3, [r3, #0]
 8003912:	689b      	ldr	r3, [r3, #8]
 8003914:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8003918:	2b00      	cmp	r3, #0
 800391a:	d111      	bne.n	8003940 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003930:	2b00      	cmp	r3, #0
 8003932:	d105      	bne.n	8003940 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003938:	f043 0201 	orr.w	r2, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3710      	adds	r7, #16
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	681b      	ldr	r3, [r3, #0]
 8003956:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8003958:	4618      	mov	r0, r3
 800395a:	370c      	adds	r7, #12
 800395c:	46bd      	mov	sp, r7
 800395e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003962:	4770      	bx	lr

08003964 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]
 800396c:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 800396e:	2300      	movs	r3, #0
 8003970:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003978:	2b01      	cmp	r3, #1
 800397a:	d101      	bne.n	8003980 <HAL_ADC_ConfigChannel+0x1c>
 800397c:	2302      	movs	r3, #2
 800397e:	e105      	b.n	8003b8c <HAL_ADC_ConfigChannel+0x228>
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	2201      	movs	r2, #1
 8003984:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8003988:	683b      	ldr	r3, [r7, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	2b09      	cmp	r3, #9
 800398e:	d925      	bls.n	80039dc <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	68d9      	ldr	r1, [r3, #12]
 8003996:	683b      	ldr	r3, [r7, #0]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	b29b      	uxth	r3, r3
 800399c:	461a      	mov	r2, r3
 800399e:	4613      	mov	r3, r2
 80039a0:	005b      	lsls	r3, r3, #1
 80039a2:	4413      	add	r3, r2
 80039a4:	3b1e      	subs	r3, #30
 80039a6:	2207      	movs	r2, #7
 80039a8:	fa02 f303 	lsl.w	r3, r2, r3
 80039ac:	43da      	mvns	r2, r3
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	400a      	ands	r2, r1
 80039b4:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68d9      	ldr	r1, [r3, #12]
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	689a      	ldr	r2, [r3, #8]
 80039c0:	683b      	ldr	r3, [r7, #0]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	b29b      	uxth	r3, r3
 80039c6:	4618      	mov	r0, r3
 80039c8:	4603      	mov	r3, r0
 80039ca:	005b      	lsls	r3, r3, #1
 80039cc:	4403      	add	r3, r0
 80039ce:	3b1e      	subs	r3, #30
 80039d0:	409a      	lsls	r2, r3
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	430a      	orrs	r2, r1
 80039d8:	60da      	str	r2, [r3, #12]
 80039da:	e022      	b.n	8003a22 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	6919      	ldr	r1, [r3, #16]
 80039e2:	683b      	ldr	r3, [r7, #0]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	b29b      	uxth	r3, r3
 80039e8:	461a      	mov	r2, r3
 80039ea:	4613      	mov	r3, r2
 80039ec:	005b      	lsls	r3, r3, #1
 80039ee:	4413      	add	r3, r2
 80039f0:	2207      	movs	r2, #7
 80039f2:	fa02 f303 	lsl.w	r3, r2, r3
 80039f6:	43da      	mvns	r2, r3
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	400a      	ands	r2, r1
 80039fe:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	6919      	ldr	r1, [r3, #16]
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	689a      	ldr	r2, [r3, #8]
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	b29b      	uxth	r3, r3
 8003a10:	4618      	mov	r0, r3
 8003a12:	4603      	mov	r3, r0
 8003a14:	005b      	lsls	r3, r3, #1
 8003a16:	4403      	add	r3, r0
 8003a18:	409a      	lsls	r2, r3
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	430a      	orrs	r2, r1
 8003a20:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003a22:	683b      	ldr	r3, [r7, #0]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	2b06      	cmp	r3, #6
 8003a28:	d824      	bhi.n	8003a74 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	681b      	ldr	r3, [r3, #0]
 8003a2e:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	4613      	mov	r3, r2
 8003a36:	009b      	lsls	r3, r3, #2
 8003a38:	4413      	add	r3, r2
 8003a3a:	3b05      	subs	r3, #5
 8003a3c:	221f      	movs	r2, #31
 8003a3e:	fa02 f303 	lsl.w	r3, r2, r3
 8003a42:	43da      	mvns	r2, r3
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	400a      	ands	r2, r1
 8003a4a:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003a52:	683b      	ldr	r3, [r7, #0]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	4618      	mov	r0, r3
 8003a5a:	683b      	ldr	r3, [r7, #0]
 8003a5c:	685a      	ldr	r2, [r3, #4]
 8003a5e:	4613      	mov	r3, r2
 8003a60:	009b      	lsls	r3, r3, #2
 8003a62:	4413      	add	r3, r2
 8003a64:	3b05      	subs	r3, #5
 8003a66:	fa00 f203 	lsl.w	r2, r0, r3
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	635a      	str	r2, [r3, #52]	; 0x34
 8003a72:	e04c      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	2b0c      	cmp	r3, #12
 8003a7a:	d824      	bhi.n	8003ac6 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003a82:	683b      	ldr	r3, [r7, #0]
 8003a84:	685a      	ldr	r2, [r3, #4]
 8003a86:	4613      	mov	r3, r2
 8003a88:	009b      	lsls	r3, r3, #2
 8003a8a:	4413      	add	r3, r2
 8003a8c:	3b23      	subs	r3, #35	; 0x23
 8003a8e:	221f      	movs	r2, #31
 8003a90:	fa02 f303 	lsl.w	r3, r2, r3
 8003a94:	43da      	mvns	r2, r3
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	400a      	ands	r2, r1
 8003a9c:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003aa4:	683b      	ldr	r3, [r7, #0]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	b29b      	uxth	r3, r3
 8003aaa:	4618      	mov	r0, r3
 8003aac:	683b      	ldr	r3, [r7, #0]
 8003aae:	685a      	ldr	r2, [r3, #4]
 8003ab0:	4613      	mov	r3, r2
 8003ab2:	009b      	lsls	r3, r3, #2
 8003ab4:	4413      	add	r3, r2
 8003ab6:	3b23      	subs	r3, #35	; 0x23
 8003ab8:	fa00 f203 	lsl.w	r2, r0, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	430a      	orrs	r2, r1
 8003ac2:	631a      	str	r2, [r3, #48]	; 0x30
 8003ac4:	e023      	b.n	8003b0e <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003acc:	683b      	ldr	r3, [r7, #0]
 8003ace:	685a      	ldr	r2, [r3, #4]
 8003ad0:	4613      	mov	r3, r2
 8003ad2:	009b      	lsls	r3, r3, #2
 8003ad4:	4413      	add	r3, r2
 8003ad6:	3b41      	subs	r3, #65	; 0x41
 8003ad8:	221f      	movs	r2, #31
 8003ada:	fa02 f303 	lsl.w	r3, r2, r3
 8003ade:	43da      	mvns	r2, r3
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	681b      	ldr	r3, [r3, #0]
 8003ae4:	400a      	ands	r2, r1
 8003ae6:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003aee:	683b      	ldr	r3, [r7, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	b29b      	uxth	r3, r3
 8003af4:	4618      	mov	r0, r3
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	685a      	ldr	r2, [r3, #4]
 8003afa:	4613      	mov	r3, r2
 8003afc:	009b      	lsls	r3, r3, #2
 8003afe:	4413      	add	r3, r2
 8003b00:	3b41      	subs	r3, #65	; 0x41
 8003b02:	fa00 f203 	lsl.w	r2, r0, r3
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	430a      	orrs	r2, r1
 8003b0c:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003b0e:	4b22      	ldr	r3, [pc, #136]	; (8003b98 <HAL_ADC_ConfigChannel+0x234>)
 8003b10:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	4a21      	ldr	r2, [pc, #132]	; (8003b9c <HAL_ADC_ConfigChannel+0x238>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d109      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x1cc>
 8003b1c:	683b      	ldr	r3, [r7, #0]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	2b12      	cmp	r3, #18
 8003b22:	d105      	bne.n	8003b30 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	685b      	ldr	r3, [r3, #4]
 8003b28:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4a19      	ldr	r2, [pc, #100]	; (8003b9c <HAL_ADC_ConfigChannel+0x238>)
 8003b36:	4293      	cmp	r3, r2
 8003b38:	d123      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x21e>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	2b10      	cmp	r3, #16
 8003b40:	d003      	beq.n	8003b4a <HAL_ADC_ConfigChannel+0x1e6>
 8003b42:	683b      	ldr	r3, [r7, #0]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	2b11      	cmp	r3, #17
 8003b48:	d11b      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8003b4a:	68fb      	ldr	r3, [r7, #12]
 8003b4c:	685b      	ldr	r3, [r3, #4]
 8003b4e:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003b52:	68fb      	ldr	r3, [r7, #12]
 8003b54:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	2b10      	cmp	r3, #16
 8003b5c:	d111      	bne.n	8003b82 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003b5e:	4b10      	ldr	r3, [pc, #64]	; (8003ba0 <HAL_ADC_ConfigChannel+0x23c>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <HAL_ADC_ConfigChannel+0x240>)
 8003b64:	fba2 2303 	umull	r2, r3, r2, r3
 8003b68:	0c9a      	lsrs	r2, r3, #18
 8003b6a:	4613      	mov	r3, r2
 8003b6c:	009b      	lsls	r3, r3, #2
 8003b6e:	4413      	add	r3, r2
 8003b70:	005b      	lsls	r3, r3, #1
 8003b72:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b74:	e002      	b.n	8003b7c <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8003b76:	68bb      	ldr	r3, [r7, #8]
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003b7c:	68bb      	ldr	r3, [r7, #8]
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d1f9      	bne.n	8003b76 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2200      	movs	r2, #0
 8003b86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3714      	adds	r7, #20
 8003b90:	46bd      	mov	sp, r7
 8003b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b96:	4770      	bx	lr
 8003b98:	40012300 	.word	0x40012300
 8003b9c:	40012000 	.word	0x40012000
 8003ba0:	20001448 	.word	0x20001448
 8003ba4:	431bde83 	.word	0x431bde83

08003ba8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003bb0:	4b79      	ldr	r3, [pc, #484]	; (8003d98 <ADC_Init+0x1f0>)
 8003bb2:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003bb4:	68fb      	ldr	r3, [r7, #12]
 8003bb6:	685b      	ldr	r3, [r3, #4]
 8003bb8:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	685a      	ldr	r2, [r3, #4]
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	685b      	ldr	r3, [r3, #4]
 8003bc8:	431a      	orrs	r2, r3
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	685a      	ldr	r2, [r3, #4]
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	681b      	ldr	r3, [r3, #0]
 8003bd8:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003bdc:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	6859      	ldr	r1, [r3, #4]
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	691b      	ldr	r3, [r3, #16]
 8003be8:	021a      	lsls	r2, r3, #8
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	430a      	orrs	r2, r1
 8003bf0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	685a      	ldr	r2, [r3, #4]
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003c00:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	681b      	ldr	r3, [r3, #0]
 8003c06:	6859      	ldr	r1, [r3, #4]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	689a      	ldr	r2, [r3, #8]
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	430a      	orrs	r2, r1
 8003c12:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	689a      	ldr	r2, [r3, #8]
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c22:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	6899      	ldr	r1, [r3, #8]
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	68da      	ldr	r2, [r3, #12]
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	430a      	orrs	r2, r1
 8003c34:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c3a:	4a58      	ldr	r2, [pc, #352]	; (8003d9c <ADC_Init+0x1f4>)
 8003c3c:	4293      	cmp	r3, r2
 8003c3e:	d022      	beq.n	8003c86 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	689a      	ldr	r2, [r3, #8]
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	681b      	ldr	r3, [r3, #0]
 8003c4a:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c4e:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	6899      	ldr	r1, [r3, #8]
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	430a      	orrs	r2, r1
 8003c60:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	681b      	ldr	r3, [r3, #0]
 8003c66:	689a      	ldr	r2, [r3, #8]
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003c70:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	6899      	ldr	r1, [r3, #8]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	430a      	orrs	r2, r1
 8003c82:	609a      	str	r2, [r3, #8]
 8003c84:	e00f      	b.n	8003ca6 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	689a      	ldr	r2, [r3, #8]
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003c94:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003c96:	687b      	ldr	r3, [r7, #4]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	689a      	ldr	r2, [r3, #8]
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ca4:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	689a      	ldr	r2, [r3, #8]
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f022 0202 	bic.w	r2, r2, #2
 8003cb4:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	6899      	ldr	r1, [r3, #8]
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	7e1b      	ldrb	r3, [r3, #24]
 8003cc0:	005a      	lsls	r2, r3, #1
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	430a      	orrs	r2, r1
 8003cc8:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003cd0:	2b00      	cmp	r3, #0
 8003cd2:	d01b      	beq.n	8003d0c <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	685a      	ldr	r2, [r3, #4]
 8003cda:	687b      	ldr	r3, [r7, #4]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003ce2:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003ce4:	687b      	ldr	r3, [r7, #4]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	685a      	ldr	r2, [r3, #4]
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003cf2:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	6859      	ldr	r1, [r3, #4]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	035a      	lsls	r2, r3, #13
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	430a      	orrs	r2, r1
 8003d08:	605a      	str	r2, [r3, #4]
 8003d0a:	e007      	b.n	8003d1c <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	685a      	ldr	r2, [r3, #4]
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003d1a:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	681b      	ldr	r3, [r3, #0]
 8003d26:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003d2a:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	69db      	ldr	r3, [r3, #28]
 8003d36:	3b01      	subs	r3, #1
 8003d38:	051a      	lsls	r2, r3, #20
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	430a      	orrs	r2, r1
 8003d40:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	689a      	ldr	r2, [r3, #8]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003d50:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	6899      	ldr	r1, [r3, #8]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003d5e:	025a      	lsls	r2, r3, #9
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	430a      	orrs	r2, r1
 8003d66:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	689a      	ldr	r2, [r3, #8]
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d76:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	6899      	ldr	r1, [r3, #8]
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	695b      	ldr	r3, [r3, #20]
 8003d82:	029a      	lsls	r2, r3, #10
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	430a      	orrs	r2, r1
 8003d8a:	609a      	str	r2, [r3, #8]
}
 8003d8c:	bf00      	nop
 8003d8e:	3714      	adds	r7, #20
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	40012300 	.word	0x40012300
 8003d9c:	0f000001 	.word	0x0f000001

08003da0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003da0:	b480      	push	{r7}
 8003da2:	b085      	sub	sp, #20
 8003da4:	af00      	add	r7, sp, #0
 8003da6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	f003 0307 	and.w	r3, r3, #7
 8003dae:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003db0:	4b0c      	ldr	r3, [pc, #48]	; (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003db2:	68db      	ldr	r3, [r3, #12]
 8003db4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003db6:	68ba      	ldr	r2, [r7, #8]
 8003db8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003dbc:	4013      	ands	r3, r2
 8003dbe:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003dc4:	68bb      	ldr	r3, [r7, #8]
 8003dc6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003dc8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003dcc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003dd0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003dd2:	4a04      	ldr	r2, [pc, #16]	; (8003de4 <__NVIC_SetPriorityGrouping+0x44>)
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	60d3      	str	r3, [r2, #12]
}
 8003dd8:	bf00      	nop
 8003dda:	3714      	adds	r7, #20
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de2:	4770      	bx	lr
 8003de4:	e000ed00 	.word	0xe000ed00

08003de8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003de8:	b480      	push	{r7}
 8003dea:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003dec:	4b04      	ldr	r3, [pc, #16]	; (8003e00 <__NVIC_GetPriorityGrouping+0x18>)
 8003dee:	68db      	ldr	r3, [r3, #12]
 8003df0:	0a1b      	lsrs	r3, r3, #8
 8003df2:	f003 0307 	and.w	r3, r3, #7
}
 8003df6:	4618      	mov	r0, r3
 8003df8:	46bd      	mov	sp, r7
 8003dfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dfe:	4770      	bx	lr
 8003e00:	e000ed00 	.word	0xe000ed00

08003e04 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003e04:	b480      	push	{r7}
 8003e06:	b083      	sub	sp, #12
 8003e08:	af00      	add	r7, sp, #0
 8003e0a:	4603      	mov	r3, r0
 8003e0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e12:	2b00      	cmp	r3, #0
 8003e14:	db0b      	blt.n	8003e2e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e16:	79fb      	ldrb	r3, [r7, #7]
 8003e18:	f003 021f 	and.w	r2, r3, #31
 8003e1c:	4907      	ldr	r1, [pc, #28]	; (8003e3c <__NVIC_EnableIRQ+0x38>)
 8003e1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e22:	095b      	lsrs	r3, r3, #5
 8003e24:	2001      	movs	r0, #1
 8003e26:	fa00 f202 	lsl.w	r2, r0, r2
 8003e2a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003e2e:	bf00      	nop
 8003e30:	370c      	adds	r7, #12
 8003e32:	46bd      	mov	sp, r7
 8003e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e38:	4770      	bx	lr
 8003e3a:	bf00      	nop
 8003e3c:	e000e100 	.word	0xe000e100

08003e40 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e40:	b480      	push	{r7}
 8003e42:	b083      	sub	sp, #12
 8003e44:	af00      	add	r7, sp, #0
 8003e46:	4603      	mov	r3, r0
 8003e48:	6039      	str	r1, [r7, #0]
 8003e4a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	db0a      	blt.n	8003e6a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e54:	683b      	ldr	r3, [r7, #0]
 8003e56:	b2da      	uxtb	r2, r3
 8003e58:	490c      	ldr	r1, [pc, #48]	; (8003e8c <__NVIC_SetPriority+0x4c>)
 8003e5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e5e:	0112      	lsls	r2, r2, #4
 8003e60:	b2d2      	uxtb	r2, r2
 8003e62:	440b      	add	r3, r1
 8003e64:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e68:	e00a      	b.n	8003e80 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	b2da      	uxtb	r2, r3
 8003e6e:	4908      	ldr	r1, [pc, #32]	; (8003e90 <__NVIC_SetPriority+0x50>)
 8003e70:	79fb      	ldrb	r3, [r7, #7]
 8003e72:	f003 030f 	and.w	r3, r3, #15
 8003e76:	3b04      	subs	r3, #4
 8003e78:	0112      	lsls	r2, r2, #4
 8003e7a:	b2d2      	uxtb	r2, r2
 8003e7c:	440b      	add	r3, r1
 8003e7e:	761a      	strb	r2, [r3, #24]
}
 8003e80:	bf00      	nop
 8003e82:	370c      	adds	r7, #12
 8003e84:	46bd      	mov	sp, r7
 8003e86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e8a:	4770      	bx	lr
 8003e8c:	e000e100 	.word	0xe000e100
 8003e90:	e000ed00 	.word	0xe000ed00

08003e94 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003e94:	b480      	push	{r7}
 8003e96:	b089      	sub	sp, #36	; 0x24
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	60f8      	str	r0, [r7, #12]
 8003e9c:	60b9      	str	r1, [r7, #8]
 8003e9e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	f003 0307 	and.w	r3, r3, #7
 8003ea6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ea8:	69fb      	ldr	r3, [r7, #28]
 8003eaa:	f1c3 0307 	rsb	r3, r3, #7
 8003eae:	2b04      	cmp	r3, #4
 8003eb0:	bf28      	it	cs
 8003eb2:	2304      	movcs	r3, #4
 8003eb4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eb6:	69fb      	ldr	r3, [r7, #28]
 8003eb8:	3304      	adds	r3, #4
 8003eba:	2b06      	cmp	r3, #6
 8003ebc:	d902      	bls.n	8003ec4 <NVIC_EncodePriority+0x30>
 8003ebe:	69fb      	ldr	r3, [r7, #28]
 8003ec0:	3b03      	subs	r3, #3
 8003ec2:	e000      	b.n	8003ec6 <NVIC_EncodePriority+0x32>
 8003ec4:	2300      	movs	r3, #0
 8003ec6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003ec8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003ecc:	69bb      	ldr	r3, [r7, #24]
 8003ece:	fa02 f303 	lsl.w	r3, r2, r3
 8003ed2:	43da      	mvns	r2, r3
 8003ed4:	68bb      	ldr	r3, [r7, #8]
 8003ed6:	401a      	ands	r2, r3
 8003ed8:	697b      	ldr	r3, [r7, #20]
 8003eda:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003edc:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003ee0:	697b      	ldr	r3, [r7, #20]
 8003ee2:	fa01 f303 	lsl.w	r3, r1, r3
 8003ee6:	43d9      	mvns	r1, r3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003eec:	4313      	orrs	r3, r2
         );
}
 8003eee:	4618      	mov	r0, r3
 8003ef0:	3724      	adds	r7, #36	; 0x24
 8003ef2:	46bd      	mov	sp, r7
 8003ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ef8:	4770      	bx	lr
	...

08003efc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003efc:	b580      	push	{r7, lr}
 8003efe:	b082      	sub	sp, #8
 8003f00:	af00      	add	r7, sp, #0
 8003f02:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f04:	687b      	ldr	r3, [r7, #4]
 8003f06:	3b01      	subs	r3, #1
 8003f08:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f0c:	d301      	bcc.n	8003f12 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f0e:	2301      	movs	r3, #1
 8003f10:	e00f      	b.n	8003f32 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f12:	4a0a      	ldr	r2, [pc, #40]	; (8003f3c <SysTick_Config+0x40>)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	3b01      	subs	r3, #1
 8003f18:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f1a:	210f      	movs	r1, #15
 8003f1c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003f20:	f7ff ff8e 	bl	8003e40 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f24:	4b05      	ldr	r3, [pc, #20]	; (8003f3c <SysTick_Config+0x40>)
 8003f26:	2200      	movs	r2, #0
 8003f28:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f2a:	4b04      	ldr	r3, [pc, #16]	; (8003f3c <SysTick_Config+0x40>)
 8003f2c:	2207      	movs	r2, #7
 8003f2e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f30:	2300      	movs	r3, #0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
 8003f3a:	bf00      	nop
 8003f3c:	e000e010 	.word	0xe000e010

08003f40 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f48:	6878      	ldr	r0, [r7, #4]
 8003f4a:	f7ff ff29 	bl	8003da0 <__NVIC_SetPriorityGrouping>
}
 8003f4e:	bf00      	nop
 8003f50:	3708      	adds	r7, #8
 8003f52:	46bd      	mov	sp, r7
 8003f54:	bd80      	pop	{r7, pc}

08003f56 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f56:	b580      	push	{r7, lr}
 8003f58:	b086      	sub	sp, #24
 8003f5a:	af00      	add	r7, sp, #0
 8003f5c:	4603      	mov	r3, r0
 8003f5e:	60b9      	str	r1, [r7, #8]
 8003f60:	607a      	str	r2, [r7, #4]
 8003f62:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f64:	2300      	movs	r3, #0
 8003f66:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f68:	f7ff ff3e 	bl	8003de8 <__NVIC_GetPriorityGrouping>
 8003f6c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f6e:	687a      	ldr	r2, [r7, #4]
 8003f70:	68b9      	ldr	r1, [r7, #8]
 8003f72:	6978      	ldr	r0, [r7, #20]
 8003f74:	f7ff ff8e 	bl	8003e94 <NVIC_EncodePriority>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f7e:	4611      	mov	r1, r2
 8003f80:	4618      	mov	r0, r3
 8003f82:	f7ff ff5d 	bl	8003e40 <__NVIC_SetPriority>
}
 8003f86:	bf00      	nop
 8003f88:	3718      	adds	r7, #24
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	bd80      	pop	{r7, pc}

08003f8e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003f8e:	b580      	push	{r7, lr}
 8003f90:	b082      	sub	sp, #8
 8003f92:	af00      	add	r7, sp, #0
 8003f94:	4603      	mov	r3, r0
 8003f96:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003f98:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f9c:	4618      	mov	r0, r3
 8003f9e:	f7ff ff31 	bl	8003e04 <__NVIC_EnableIRQ>
}
 8003fa2:	bf00      	nop
 8003fa4:	3708      	adds	r7, #8
 8003fa6:	46bd      	mov	sp, r7
 8003fa8:	bd80      	pop	{r7, pc}

08003faa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003faa:	b580      	push	{r7, lr}
 8003fac:	b082      	sub	sp, #8
 8003fae:	af00      	add	r7, sp, #0
 8003fb0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f7ff ffa2 	bl	8003efc <SysTick_Config>
 8003fb8:	4603      	mov	r3, r0
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3708      	adds	r7, #8
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003fc2:	b580      	push	{r7, lr}
 8003fc4:	b084      	sub	sp, #16
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003fce:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003fd0:	f7ff fb08 	bl	80035e4 <HAL_GetTick>
 8003fd4:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003fdc:	b2db      	uxtb	r3, r3
 8003fde:	2b02      	cmp	r3, #2
 8003fe0:	d008      	beq.n	8003ff4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2280      	movs	r2, #128	; 0x80
 8003fe6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	2200      	movs	r2, #0
 8003fec:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003ff0:	2301      	movs	r3, #1
 8003ff2:	e052      	b.n	800409a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	681a      	ldr	r2, [r3, #0]
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	f022 0216 	bic.w	r2, r2, #22
 8004002:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	695a      	ldr	r2, [r3, #20]
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004012:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004018:	2b00      	cmp	r3, #0
 800401a:	d103      	bne.n	8004024 <HAL_DMA_Abort+0x62>
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004020:	2b00      	cmp	r3, #0
 8004022:	d007      	beq.n	8004034 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	681a      	ldr	r2, [r3, #0]
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	f022 0208 	bic.w	r2, r2, #8
 8004032:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	681a      	ldr	r2, [r3, #0]
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f022 0201 	bic.w	r2, r2, #1
 8004042:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004044:	e013      	b.n	800406e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004046:	f7ff facd 	bl	80035e4 <HAL_GetTick>
 800404a:	4602      	mov	r2, r0
 800404c:	68bb      	ldr	r3, [r7, #8]
 800404e:	1ad3      	subs	r3, r2, r3
 8004050:	2b05      	cmp	r3, #5
 8004052:	d90c      	bls.n	800406e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	2220      	movs	r2, #32
 8004058:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	2203      	movs	r2, #3
 800405e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 800406a:	2303      	movs	r3, #3
 800406c:	e015      	b.n	800409a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0301 	and.w	r3, r3, #1
 8004078:	2b00      	cmp	r3, #0
 800407a:	d1e4      	bne.n	8004046 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004080:	223f      	movs	r2, #63	; 0x3f
 8004082:	409a      	lsls	r2, r3
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	2201      	movs	r2, #1
 800408c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	2200      	movs	r2, #0
 8004094:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004098:	2300      	movs	r3, #0
}
 800409a:	4618      	mov	r0, r3
 800409c:	3710      	adds	r7, #16
 800409e:	46bd      	mov	sp, r7
 80040a0:	bd80      	pop	{r7, pc}

080040a2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80040a2:	b480      	push	{r7}
 80040a4:	b083      	sub	sp, #12
 80040a6:	af00      	add	r7, sp, #0
 80040a8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040b0:	b2db      	uxtb	r3, r3
 80040b2:	2b02      	cmp	r3, #2
 80040b4:	d004      	beq.n	80040c0 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	2280      	movs	r2, #128	; 0x80
 80040ba:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80040bc:	2301      	movs	r3, #1
 80040be:	e00c      	b.n	80040da <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2205      	movs	r2, #5
 80040c4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80040c8:	687b      	ldr	r3, [r7, #4]
 80040ca:	681b      	ldr	r3, [r3, #0]
 80040cc:	681a      	ldr	r2, [r3, #0]
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f022 0201 	bic.w	r2, r2, #1
 80040d6:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80040d8:	2300      	movs	r3, #0
}
 80040da:	4618      	mov	r0, r3
 80040dc:	370c      	adds	r7, #12
 80040de:	46bd      	mov	sp, r7
 80040e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040e4:	4770      	bx	lr
	...

080040e8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80040e8:	b480      	push	{r7}
 80040ea:	b089      	sub	sp, #36	; 0x24
 80040ec:	af00      	add	r7, sp, #0
 80040ee:	6078      	str	r0, [r7, #4]
 80040f0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80040f2:	2300      	movs	r3, #0
 80040f4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80040f6:	2300      	movs	r3, #0
 80040f8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80040fe:	2300      	movs	r3, #0
 8004100:	61fb      	str	r3, [r7, #28]
 8004102:	e159      	b.n	80043b8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004104:	2201      	movs	r2, #1
 8004106:	69fb      	ldr	r3, [r7, #28]
 8004108:	fa02 f303 	lsl.w	r3, r2, r3
 800410c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	697a      	ldr	r2, [r7, #20]
 8004114:	4013      	ands	r3, r2
 8004116:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004118:	693a      	ldr	r2, [r7, #16]
 800411a:	697b      	ldr	r3, [r7, #20]
 800411c:	429a      	cmp	r2, r3
 800411e:	f040 8148 	bne.w	80043b2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	685b      	ldr	r3, [r3, #4]
 8004126:	f003 0303 	and.w	r3, r3, #3
 800412a:	2b01      	cmp	r3, #1
 800412c:	d005      	beq.n	800413a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004136:	2b02      	cmp	r3, #2
 8004138:	d130      	bne.n	800419c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	689b      	ldr	r3, [r3, #8]
 800413e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004140:	69fb      	ldr	r3, [r7, #28]
 8004142:	005b      	lsls	r3, r3, #1
 8004144:	2203      	movs	r2, #3
 8004146:	fa02 f303 	lsl.w	r3, r2, r3
 800414a:	43db      	mvns	r3, r3
 800414c:	69ba      	ldr	r2, [r7, #24]
 800414e:	4013      	ands	r3, r2
 8004150:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68da      	ldr	r2, [r3, #12]
 8004156:	69fb      	ldr	r3, [r7, #28]
 8004158:	005b      	lsls	r3, r3, #1
 800415a:	fa02 f303 	lsl.w	r3, r2, r3
 800415e:	69ba      	ldr	r2, [r7, #24]
 8004160:	4313      	orrs	r3, r2
 8004162:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	69ba      	ldr	r2, [r7, #24]
 8004168:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	685b      	ldr	r3, [r3, #4]
 800416e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004170:	2201      	movs	r2, #1
 8004172:	69fb      	ldr	r3, [r7, #28]
 8004174:	fa02 f303 	lsl.w	r3, r2, r3
 8004178:	43db      	mvns	r3, r3
 800417a:	69ba      	ldr	r2, [r7, #24]
 800417c:	4013      	ands	r3, r2
 800417e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	091b      	lsrs	r3, r3, #4
 8004186:	f003 0201 	and.w	r2, r3, #1
 800418a:	69fb      	ldr	r3, [r7, #28]
 800418c:	fa02 f303 	lsl.w	r3, r2, r3
 8004190:	69ba      	ldr	r2, [r7, #24]
 8004192:	4313      	orrs	r3, r2
 8004194:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	69ba      	ldr	r2, [r7, #24]
 800419a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	685b      	ldr	r3, [r3, #4]
 80041a0:	f003 0303 	and.w	r3, r3, #3
 80041a4:	2b03      	cmp	r3, #3
 80041a6:	d017      	beq.n	80041d8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	68db      	ldr	r3, [r3, #12]
 80041ac:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80041ae:	69fb      	ldr	r3, [r7, #28]
 80041b0:	005b      	lsls	r3, r3, #1
 80041b2:	2203      	movs	r2, #3
 80041b4:	fa02 f303 	lsl.w	r3, r2, r3
 80041b8:	43db      	mvns	r3, r3
 80041ba:	69ba      	ldr	r2, [r7, #24]
 80041bc:	4013      	ands	r3, r2
 80041be:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80041c0:	683b      	ldr	r3, [r7, #0]
 80041c2:	689a      	ldr	r2, [r3, #8]
 80041c4:	69fb      	ldr	r3, [r7, #28]
 80041c6:	005b      	lsls	r3, r3, #1
 80041c8:	fa02 f303 	lsl.w	r3, r2, r3
 80041cc:	69ba      	ldr	r2, [r7, #24]
 80041ce:	4313      	orrs	r3, r2
 80041d0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	69ba      	ldr	r2, [r7, #24]
 80041d6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80041d8:	683b      	ldr	r3, [r7, #0]
 80041da:	685b      	ldr	r3, [r3, #4]
 80041dc:	f003 0303 	and.w	r3, r3, #3
 80041e0:	2b02      	cmp	r3, #2
 80041e2:	d123      	bne.n	800422c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80041e4:	69fb      	ldr	r3, [r7, #28]
 80041e6:	08da      	lsrs	r2, r3, #3
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	3208      	adds	r2, #8
 80041ec:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80041f0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80041f2:	69fb      	ldr	r3, [r7, #28]
 80041f4:	f003 0307 	and.w	r3, r3, #7
 80041f8:	009b      	lsls	r3, r3, #2
 80041fa:	220f      	movs	r2, #15
 80041fc:	fa02 f303 	lsl.w	r3, r2, r3
 8004200:	43db      	mvns	r3, r3
 8004202:	69ba      	ldr	r2, [r7, #24]
 8004204:	4013      	ands	r3, r2
 8004206:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	691a      	ldr	r2, [r3, #16]
 800420c:	69fb      	ldr	r3, [r7, #28]
 800420e:	f003 0307 	and.w	r3, r3, #7
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	fa02 f303 	lsl.w	r3, r2, r3
 8004218:	69ba      	ldr	r2, [r7, #24]
 800421a:	4313      	orrs	r3, r2
 800421c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800421e:	69fb      	ldr	r3, [r7, #28]
 8004220:	08da      	lsrs	r2, r3, #3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	3208      	adds	r2, #8
 8004226:	69b9      	ldr	r1, [r7, #24]
 8004228:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004232:	69fb      	ldr	r3, [r7, #28]
 8004234:	005b      	lsls	r3, r3, #1
 8004236:	2203      	movs	r2, #3
 8004238:	fa02 f303 	lsl.w	r3, r2, r3
 800423c:	43db      	mvns	r3, r3
 800423e:	69ba      	ldr	r2, [r7, #24]
 8004240:	4013      	ands	r3, r2
 8004242:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	685b      	ldr	r3, [r3, #4]
 8004248:	f003 0203 	and.w	r2, r3, #3
 800424c:	69fb      	ldr	r3, [r7, #28]
 800424e:	005b      	lsls	r3, r3, #1
 8004250:	fa02 f303 	lsl.w	r3, r2, r3
 8004254:	69ba      	ldr	r2, [r7, #24]
 8004256:	4313      	orrs	r3, r2
 8004258:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	69ba      	ldr	r2, [r7, #24]
 800425e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004260:	683b      	ldr	r3, [r7, #0]
 8004262:	685b      	ldr	r3, [r3, #4]
 8004264:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004268:	2b00      	cmp	r3, #0
 800426a:	f000 80a2 	beq.w	80043b2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800426e:	2300      	movs	r3, #0
 8004270:	60fb      	str	r3, [r7, #12]
 8004272:	4b57      	ldr	r3, [pc, #348]	; (80043d0 <HAL_GPIO_Init+0x2e8>)
 8004274:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004276:	4a56      	ldr	r2, [pc, #344]	; (80043d0 <HAL_GPIO_Init+0x2e8>)
 8004278:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800427c:	6453      	str	r3, [r2, #68]	; 0x44
 800427e:	4b54      	ldr	r3, [pc, #336]	; (80043d0 <HAL_GPIO_Init+0x2e8>)
 8004280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004282:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004286:	60fb      	str	r3, [r7, #12]
 8004288:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800428a:	4a52      	ldr	r2, [pc, #328]	; (80043d4 <HAL_GPIO_Init+0x2ec>)
 800428c:	69fb      	ldr	r3, [r7, #28]
 800428e:	089b      	lsrs	r3, r3, #2
 8004290:	3302      	adds	r3, #2
 8004292:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004296:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004298:	69fb      	ldr	r3, [r7, #28]
 800429a:	f003 0303 	and.w	r3, r3, #3
 800429e:	009b      	lsls	r3, r3, #2
 80042a0:	220f      	movs	r2, #15
 80042a2:	fa02 f303 	lsl.w	r3, r2, r3
 80042a6:	43db      	mvns	r3, r3
 80042a8:	69ba      	ldr	r2, [r7, #24]
 80042aa:	4013      	ands	r3, r2
 80042ac:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	4a49      	ldr	r2, [pc, #292]	; (80043d8 <HAL_GPIO_Init+0x2f0>)
 80042b2:	4293      	cmp	r3, r2
 80042b4:	d019      	beq.n	80042ea <HAL_GPIO_Init+0x202>
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	4a48      	ldr	r2, [pc, #288]	; (80043dc <HAL_GPIO_Init+0x2f4>)
 80042ba:	4293      	cmp	r3, r2
 80042bc:	d013      	beq.n	80042e6 <HAL_GPIO_Init+0x1fe>
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	4a47      	ldr	r2, [pc, #284]	; (80043e0 <HAL_GPIO_Init+0x2f8>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d00d      	beq.n	80042e2 <HAL_GPIO_Init+0x1fa>
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	4a46      	ldr	r2, [pc, #280]	; (80043e4 <HAL_GPIO_Init+0x2fc>)
 80042ca:	4293      	cmp	r3, r2
 80042cc:	d007      	beq.n	80042de <HAL_GPIO_Init+0x1f6>
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	4a45      	ldr	r2, [pc, #276]	; (80043e8 <HAL_GPIO_Init+0x300>)
 80042d2:	4293      	cmp	r3, r2
 80042d4:	d101      	bne.n	80042da <HAL_GPIO_Init+0x1f2>
 80042d6:	2304      	movs	r3, #4
 80042d8:	e008      	b.n	80042ec <HAL_GPIO_Init+0x204>
 80042da:	2307      	movs	r3, #7
 80042dc:	e006      	b.n	80042ec <HAL_GPIO_Init+0x204>
 80042de:	2303      	movs	r3, #3
 80042e0:	e004      	b.n	80042ec <HAL_GPIO_Init+0x204>
 80042e2:	2302      	movs	r3, #2
 80042e4:	e002      	b.n	80042ec <HAL_GPIO_Init+0x204>
 80042e6:	2301      	movs	r3, #1
 80042e8:	e000      	b.n	80042ec <HAL_GPIO_Init+0x204>
 80042ea:	2300      	movs	r3, #0
 80042ec:	69fa      	ldr	r2, [r7, #28]
 80042ee:	f002 0203 	and.w	r2, r2, #3
 80042f2:	0092      	lsls	r2, r2, #2
 80042f4:	4093      	lsls	r3, r2
 80042f6:	69ba      	ldr	r2, [r7, #24]
 80042f8:	4313      	orrs	r3, r2
 80042fa:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80042fc:	4935      	ldr	r1, [pc, #212]	; (80043d4 <HAL_GPIO_Init+0x2ec>)
 80042fe:	69fb      	ldr	r3, [r7, #28]
 8004300:	089b      	lsrs	r3, r3, #2
 8004302:	3302      	adds	r3, #2
 8004304:	69ba      	ldr	r2, [r7, #24]
 8004306:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800430a:	4b38      	ldr	r3, [pc, #224]	; (80043ec <HAL_GPIO_Init+0x304>)
 800430c:	689b      	ldr	r3, [r3, #8]
 800430e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004310:	693b      	ldr	r3, [r7, #16]
 8004312:	43db      	mvns	r3, r3
 8004314:	69ba      	ldr	r2, [r7, #24]
 8004316:	4013      	ands	r3, r2
 8004318:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800431a:	683b      	ldr	r3, [r7, #0]
 800431c:	685b      	ldr	r3, [r3, #4]
 800431e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004322:	2b00      	cmp	r3, #0
 8004324:	d003      	beq.n	800432e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004326:	69ba      	ldr	r2, [r7, #24]
 8004328:	693b      	ldr	r3, [r7, #16]
 800432a:	4313      	orrs	r3, r2
 800432c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800432e:	4a2f      	ldr	r2, [pc, #188]	; (80043ec <HAL_GPIO_Init+0x304>)
 8004330:	69bb      	ldr	r3, [r7, #24]
 8004332:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004334:	4b2d      	ldr	r3, [pc, #180]	; (80043ec <HAL_GPIO_Init+0x304>)
 8004336:	68db      	ldr	r3, [r3, #12]
 8004338:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800433a:	693b      	ldr	r3, [r7, #16]
 800433c:	43db      	mvns	r3, r3
 800433e:	69ba      	ldr	r2, [r7, #24]
 8004340:	4013      	ands	r3, r2
 8004342:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004344:	683b      	ldr	r3, [r7, #0]
 8004346:	685b      	ldr	r3, [r3, #4]
 8004348:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800434c:	2b00      	cmp	r3, #0
 800434e:	d003      	beq.n	8004358 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004350:	69ba      	ldr	r2, [r7, #24]
 8004352:	693b      	ldr	r3, [r7, #16]
 8004354:	4313      	orrs	r3, r2
 8004356:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004358:	4a24      	ldr	r2, [pc, #144]	; (80043ec <HAL_GPIO_Init+0x304>)
 800435a:	69bb      	ldr	r3, [r7, #24]
 800435c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800435e:	4b23      	ldr	r3, [pc, #140]	; (80043ec <HAL_GPIO_Init+0x304>)
 8004360:	685b      	ldr	r3, [r3, #4]
 8004362:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004364:	693b      	ldr	r3, [r7, #16]
 8004366:	43db      	mvns	r3, r3
 8004368:	69ba      	ldr	r2, [r7, #24]
 800436a:	4013      	ands	r3, r2
 800436c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685b      	ldr	r3, [r3, #4]
 8004372:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004376:	2b00      	cmp	r3, #0
 8004378:	d003      	beq.n	8004382 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800437a:	69ba      	ldr	r2, [r7, #24]
 800437c:	693b      	ldr	r3, [r7, #16]
 800437e:	4313      	orrs	r3, r2
 8004380:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004382:	4a1a      	ldr	r2, [pc, #104]	; (80043ec <HAL_GPIO_Init+0x304>)
 8004384:	69bb      	ldr	r3, [r7, #24]
 8004386:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004388:	4b18      	ldr	r3, [pc, #96]	; (80043ec <HAL_GPIO_Init+0x304>)
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800438e:	693b      	ldr	r3, [r7, #16]
 8004390:	43db      	mvns	r3, r3
 8004392:	69ba      	ldr	r2, [r7, #24]
 8004394:	4013      	ands	r3, r2
 8004396:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	685b      	ldr	r3, [r3, #4]
 800439c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d003      	beq.n	80043ac <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80043a4:	69ba      	ldr	r2, [r7, #24]
 80043a6:	693b      	ldr	r3, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80043ac:	4a0f      	ldr	r2, [pc, #60]	; (80043ec <HAL_GPIO_Init+0x304>)
 80043ae:	69bb      	ldr	r3, [r7, #24]
 80043b0:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	3301      	adds	r3, #1
 80043b6:	61fb      	str	r3, [r7, #28]
 80043b8:	69fb      	ldr	r3, [r7, #28]
 80043ba:	2b0f      	cmp	r3, #15
 80043bc:	f67f aea2 	bls.w	8004104 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80043c0:	bf00      	nop
 80043c2:	bf00      	nop
 80043c4:	3724      	adds	r7, #36	; 0x24
 80043c6:	46bd      	mov	sp, r7
 80043c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043cc:	4770      	bx	lr
 80043ce:	bf00      	nop
 80043d0:	40023800 	.word	0x40023800
 80043d4:	40013800 	.word	0x40013800
 80043d8:	40020000 	.word	0x40020000
 80043dc:	40020400 	.word	0x40020400
 80043e0:	40020800 	.word	0x40020800
 80043e4:	40020c00 	.word	0x40020c00
 80043e8:	40021000 	.word	0x40021000
 80043ec:	40013c00 	.word	0x40013c00

080043f0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b085      	sub	sp, #20
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	6078      	str	r0, [r7, #4]
 80043f8:	460b      	mov	r3, r1
 80043fa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	691a      	ldr	r2, [r3, #16]
 8004400:	887b      	ldrh	r3, [r7, #2]
 8004402:	4013      	ands	r3, r2
 8004404:	2b00      	cmp	r3, #0
 8004406:	d002      	beq.n	800440e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004408:	2301      	movs	r3, #1
 800440a:	73fb      	strb	r3, [r7, #15]
 800440c:	e001      	b.n	8004412 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800440e:	2300      	movs	r3, #0
 8004410:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004412:	7bfb      	ldrb	r3, [r7, #15]
}
 8004414:	4618      	mov	r0, r3
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004420:	b480      	push	{r7}
 8004422:	b083      	sub	sp, #12
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
 8004428:	460b      	mov	r3, r1
 800442a:	807b      	strh	r3, [r7, #2]
 800442c:	4613      	mov	r3, r2
 800442e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004430:	787b      	ldrb	r3, [r7, #1]
 8004432:	2b00      	cmp	r3, #0
 8004434:	d003      	beq.n	800443e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004436:	887a      	ldrh	r2, [r7, #2]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800443c:	e003      	b.n	8004446 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800443e:	887b      	ldrh	r3, [r7, #2]
 8004440:	041a      	lsls	r2, r3, #16
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	619a      	str	r2, [r3, #24]
}
 8004446:	bf00      	nop
 8004448:	370c      	adds	r7, #12
 800444a:	46bd      	mov	sp, r7
 800444c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004450:	4770      	bx	lr
	...

08004454 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e12b      	b.n	80046be <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800446c:	b2db      	uxtb	r3, r3
 800446e:	2b00      	cmp	r3, #0
 8004470:	d106      	bne.n	8004480 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2200      	movs	r2, #0
 8004476:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f7fe fd14 	bl	8002ea8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	2224      	movs	r2, #36	; 0x24
 8004484:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	681a      	ldr	r2, [r3, #0]
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	f022 0201 	bic.w	r2, r2, #1
 8004496:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	681a      	ldr	r2, [r3, #0]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80044a6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	681a      	ldr	r2, [r3, #0]
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80044b6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80044b8:	f001 fbd2 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 80044bc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	685b      	ldr	r3, [r3, #4]
 80044c2:	4a81      	ldr	r2, [pc, #516]	; (80046c8 <HAL_I2C_Init+0x274>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d807      	bhi.n	80044d8 <HAL_I2C_Init+0x84>
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	4a80      	ldr	r2, [pc, #512]	; (80046cc <HAL_I2C_Init+0x278>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	bf94      	ite	ls
 80044d0:	2301      	movls	r3, #1
 80044d2:	2300      	movhi	r3, #0
 80044d4:	b2db      	uxtb	r3, r3
 80044d6:	e006      	b.n	80044e6 <HAL_I2C_Init+0x92>
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	4a7d      	ldr	r2, [pc, #500]	; (80046d0 <HAL_I2C_Init+0x27c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	bf94      	ite	ls
 80044e0:	2301      	movls	r3, #1
 80044e2:	2300      	movhi	r3, #0
 80044e4:	b2db      	uxtb	r3, r3
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d001      	beq.n	80044ee <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	e0e7      	b.n	80046be <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80044ee:	68fb      	ldr	r3, [r7, #12]
 80044f0:	4a78      	ldr	r2, [pc, #480]	; (80046d4 <HAL_I2C_Init+0x280>)
 80044f2:	fba2 2303 	umull	r2, r3, r2, r3
 80044f6:	0c9b      	lsrs	r3, r3, #18
 80044f8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	685b      	ldr	r3, [r3, #4]
 8004500:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	68ba      	ldr	r2, [r7, #8]
 800450a:	430a      	orrs	r2, r1
 800450c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	6a1b      	ldr	r3, [r3, #32]
 8004514:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	685b      	ldr	r3, [r3, #4]
 800451c:	4a6a      	ldr	r2, [pc, #424]	; (80046c8 <HAL_I2C_Init+0x274>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d802      	bhi.n	8004528 <HAL_I2C_Init+0xd4>
 8004522:	68bb      	ldr	r3, [r7, #8]
 8004524:	3301      	adds	r3, #1
 8004526:	e009      	b.n	800453c <HAL_I2C_Init+0xe8>
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800452e:	fb02 f303 	mul.w	r3, r2, r3
 8004532:	4a69      	ldr	r2, [pc, #420]	; (80046d8 <HAL_I2C_Init+0x284>)
 8004534:	fba2 2303 	umull	r2, r3, r2, r3
 8004538:	099b      	lsrs	r3, r3, #6
 800453a:	3301      	adds	r3, #1
 800453c:	687a      	ldr	r2, [r7, #4]
 800453e:	6812      	ldr	r2, [r2, #0]
 8004540:	430b      	orrs	r3, r1
 8004542:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	69db      	ldr	r3, [r3, #28]
 800454a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800454e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	685b      	ldr	r3, [r3, #4]
 8004556:	495c      	ldr	r1, [pc, #368]	; (80046c8 <HAL_I2C_Init+0x274>)
 8004558:	428b      	cmp	r3, r1
 800455a:	d819      	bhi.n	8004590 <HAL_I2C_Init+0x13c>
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	1e59      	subs	r1, r3, #1
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	685b      	ldr	r3, [r3, #4]
 8004564:	005b      	lsls	r3, r3, #1
 8004566:	fbb1 f3f3 	udiv	r3, r1, r3
 800456a:	1c59      	adds	r1, r3, #1
 800456c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004570:	400b      	ands	r3, r1
 8004572:	2b00      	cmp	r3, #0
 8004574:	d00a      	beq.n	800458c <HAL_I2C_Init+0x138>
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	1e59      	subs	r1, r3, #1
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	005b      	lsls	r3, r3, #1
 8004580:	fbb1 f3f3 	udiv	r3, r1, r3
 8004584:	3301      	adds	r3, #1
 8004586:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800458a:	e051      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 800458c:	2304      	movs	r3, #4
 800458e:	e04f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	689b      	ldr	r3, [r3, #8]
 8004594:	2b00      	cmp	r3, #0
 8004596:	d111      	bne.n	80045bc <HAL_I2C_Init+0x168>
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	1e58      	subs	r0, r3, #1
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	6859      	ldr	r1, [r3, #4]
 80045a0:	460b      	mov	r3, r1
 80045a2:	005b      	lsls	r3, r3, #1
 80045a4:	440b      	add	r3, r1
 80045a6:	fbb0 f3f3 	udiv	r3, r0, r3
 80045aa:	3301      	adds	r3, #1
 80045ac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	bf0c      	ite	eq
 80045b4:	2301      	moveq	r3, #1
 80045b6:	2300      	movne	r3, #0
 80045b8:	b2db      	uxtb	r3, r3
 80045ba:	e012      	b.n	80045e2 <HAL_I2C_Init+0x18e>
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	1e58      	subs	r0, r3, #1
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	6859      	ldr	r1, [r3, #4]
 80045c4:	460b      	mov	r3, r1
 80045c6:	009b      	lsls	r3, r3, #2
 80045c8:	440b      	add	r3, r1
 80045ca:	0099      	lsls	r1, r3, #2
 80045cc:	440b      	add	r3, r1
 80045ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80045d2:	3301      	adds	r3, #1
 80045d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80045d8:	2b00      	cmp	r3, #0
 80045da:	bf0c      	ite	eq
 80045dc:	2301      	moveq	r3, #1
 80045de:	2300      	movne	r3, #0
 80045e0:	b2db      	uxtb	r3, r3
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d001      	beq.n	80045ea <HAL_I2C_Init+0x196>
 80045e6:	2301      	movs	r3, #1
 80045e8:	e022      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	689b      	ldr	r3, [r3, #8]
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d10e      	bne.n	8004610 <HAL_I2C_Init+0x1bc>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	1e58      	subs	r0, r3, #1
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	6859      	ldr	r1, [r3, #4]
 80045fa:	460b      	mov	r3, r1
 80045fc:	005b      	lsls	r3, r3, #1
 80045fe:	440b      	add	r3, r1
 8004600:	fbb0 f3f3 	udiv	r3, r0, r3
 8004604:	3301      	adds	r3, #1
 8004606:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800460a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800460e:	e00f      	b.n	8004630 <HAL_I2C_Init+0x1dc>
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	1e58      	subs	r0, r3, #1
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	6859      	ldr	r1, [r3, #4]
 8004618:	460b      	mov	r3, r1
 800461a:	009b      	lsls	r3, r3, #2
 800461c:	440b      	add	r3, r1
 800461e:	0099      	lsls	r1, r3, #2
 8004620:	440b      	add	r3, r1
 8004622:	fbb0 f3f3 	udiv	r3, r0, r3
 8004626:	3301      	adds	r3, #1
 8004628:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800462c:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004630:	6879      	ldr	r1, [r7, #4]
 8004632:	6809      	ldr	r1, [r1, #0]
 8004634:	4313      	orrs	r3, r2
 8004636:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	69da      	ldr	r2, [r3, #28]
 8004646:	687b      	ldr	r3, [r7, #4]
 8004648:	6a1b      	ldr	r3, [r3, #32]
 800464a:	431a      	orrs	r2, r3
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	430a      	orrs	r2, r1
 8004652:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	689b      	ldr	r3, [r3, #8]
 800465a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800465e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004662:	687a      	ldr	r2, [r7, #4]
 8004664:	6911      	ldr	r1, [r2, #16]
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	68d2      	ldr	r2, [r2, #12]
 800466a:	4311      	orrs	r1, r2
 800466c:	687a      	ldr	r2, [r7, #4]
 800466e:	6812      	ldr	r2, [r2, #0]
 8004670:	430b      	orrs	r3, r1
 8004672:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	68db      	ldr	r3, [r3, #12]
 800467a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	695a      	ldr	r2, [r3, #20]
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	699b      	ldr	r3, [r3, #24]
 8004686:	431a      	orrs	r2, r3
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	430a      	orrs	r2, r1
 800468e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	681b      	ldr	r3, [r3, #0]
 8004694:	681a      	ldr	r2, [r3, #0]
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	f042 0201 	orr.w	r2, r2, #1
 800469e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	2200      	movs	r2, #0
 80046a4:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2200      	movs	r2, #0
 80046b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80046bc:	2300      	movs	r3, #0
}
 80046be:	4618      	mov	r0, r3
 80046c0:	3710      	adds	r7, #16
 80046c2:	46bd      	mov	sp, r7
 80046c4:	bd80      	pop	{r7, pc}
 80046c6:	bf00      	nop
 80046c8:	000186a0 	.word	0x000186a0
 80046cc:	001e847f 	.word	0x001e847f
 80046d0:	003d08ff 	.word	0x003d08ff
 80046d4:	431bde83 	.word	0x431bde83
 80046d8:	10624dd3 	.word	0x10624dd3

080046dc <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046dc:	b580      	push	{r7, lr}
 80046de:	b088      	sub	sp, #32
 80046e0:	af02      	add	r7, sp, #8
 80046e2:	60f8      	str	r0, [r7, #12]
 80046e4:	607a      	str	r2, [r7, #4]
 80046e6:	461a      	mov	r2, r3
 80046e8:	460b      	mov	r3, r1
 80046ea:	817b      	strh	r3, [r7, #10]
 80046ec:	4613      	mov	r3, r2
 80046ee:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80046f0:	f7fe ff78 	bl	80035e4 <HAL_GetTick>
 80046f4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046fc:	b2db      	uxtb	r3, r3
 80046fe:	2b20      	cmp	r3, #32
 8004700:	f040 80e0 	bne.w	80048c4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004704:	697b      	ldr	r3, [r7, #20]
 8004706:	9300      	str	r3, [sp, #0]
 8004708:	2319      	movs	r3, #25
 800470a:	2201      	movs	r2, #1
 800470c:	4970      	ldr	r1, [pc, #448]	; (80048d0 <HAL_I2C_Master_Transmit+0x1f4>)
 800470e:	68f8      	ldr	r0, [r7, #12]
 8004710:	f000 fc58 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004714:	4603      	mov	r3, r0
 8004716:	2b00      	cmp	r3, #0
 8004718:	d001      	beq.n	800471e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800471a:	2302      	movs	r3, #2
 800471c:	e0d3      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004724:	2b01      	cmp	r3, #1
 8004726:	d101      	bne.n	800472c <HAL_I2C_Master_Transmit+0x50>
 8004728:	2302      	movs	r3, #2
 800472a:	e0cc      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
 800472c:	68fb      	ldr	r3, [r7, #12]
 800472e:	2201      	movs	r2, #1
 8004730:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	681b      	ldr	r3, [r3, #0]
 8004738:	681b      	ldr	r3, [r3, #0]
 800473a:	f003 0301 	and.w	r3, r3, #1
 800473e:	2b01      	cmp	r3, #1
 8004740:	d007      	beq.n	8004752 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004742:	68fb      	ldr	r3, [r7, #12]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	681a      	ldr	r2, [r3, #0]
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	681b      	ldr	r3, [r3, #0]
 800474c:	f042 0201 	orr.w	r2, r2, #1
 8004750:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	68fb      	ldr	r3, [r7, #12]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004760:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2221      	movs	r2, #33	; 0x21
 8004766:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	2210      	movs	r2, #16
 800476e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	2200      	movs	r2, #0
 8004776:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	687a      	ldr	r2, [r7, #4]
 800477c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800477e:	68fb      	ldr	r3, [r7, #12]
 8004780:	893a      	ldrh	r2, [r7, #8]
 8004782:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004788:	b29a      	uxth	r2, r3
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4a50      	ldr	r2, [pc, #320]	; (80048d4 <HAL_I2C_Master_Transmit+0x1f8>)
 8004792:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004794:	8979      	ldrh	r1, [r7, #10]
 8004796:	697b      	ldr	r3, [r7, #20]
 8004798:	6a3a      	ldr	r2, [r7, #32]
 800479a:	68f8      	ldr	r0, [r7, #12]
 800479c:	f000 fac2 	bl	8004d24 <I2C_MasterRequestWrite>
 80047a0:	4603      	mov	r3, r0
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d001      	beq.n	80047aa <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80047a6:	2301      	movs	r3, #1
 80047a8:	e08d      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80047aa:	2300      	movs	r3, #0
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	68fb      	ldr	r3, [r7, #12]
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	695b      	ldr	r3, [r3, #20]
 80047b4:	613b      	str	r3, [r7, #16]
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	699b      	ldr	r3, [r3, #24]
 80047bc:	613b      	str	r3, [r7, #16]
 80047be:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80047c0:	e066      	b.n	8004890 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80047c2:	697a      	ldr	r2, [r7, #20]
 80047c4:	6a39      	ldr	r1, [r7, #32]
 80047c6:	68f8      	ldr	r0, [r7, #12]
 80047c8:	f000 fcd2 	bl	8005170 <I2C_WaitOnTXEFlagUntilTimeout>
 80047cc:	4603      	mov	r3, r0
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d00d      	beq.n	80047ee <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047d6:	2b04      	cmp	r3, #4
 80047d8:	d107      	bne.n	80047ea <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	681b      	ldr	r3, [r3, #0]
 80047de:	681a      	ldr	r2, [r3, #0]
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80047e8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e06b      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80047ee:	68fb      	ldr	r3, [r7, #12]
 80047f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047f2:	781a      	ldrb	r2, [r3, #0]
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047fe:	1c5a      	adds	r2, r3, #1
 8004800:	68fb      	ldr	r3, [r7, #12]
 8004802:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004808:	b29b      	uxth	r3, r3
 800480a:	3b01      	subs	r3, #1
 800480c:	b29a      	uxth	r2, r3
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8004812:	68fb      	ldr	r3, [r7, #12]
 8004814:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004816:	3b01      	subs	r3, #1
 8004818:	b29a      	uxth	r2, r3
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800481e:	68fb      	ldr	r3, [r7, #12]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	695b      	ldr	r3, [r3, #20]
 8004824:	f003 0304 	and.w	r3, r3, #4
 8004828:	2b04      	cmp	r3, #4
 800482a:	d11b      	bne.n	8004864 <HAL_I2C_Master_Transmit+0x188>
 800482c:	68fb      	ldr	r3, [r7, #12]
 800482e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004830:	2b00      	cmp	r3, #0
 8004832:	d017      	beq.n	8004864 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004834:	68fb      	ldr	r3, [r7, #12]
 8004836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004838:	781a      	ldrb	r2, [r3, #0]
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004844:	1c5a      	adds	r2, r3, #1
 8004846:	68fb      	ldr	r3, [r7, #12]
 8004848:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800484e:	b29b      	uxth	r3, r3
 8004850:	3b01      	subs	r3, #1
 8004852:	b29a      	uxth	r2, r3
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004858:	68fb      	ldr	r3, [r7, #12]
 800485a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485c:	3b01      	subs	r3, #1
 800485e:	b29a      	uxth	r2, r3
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004864:	697a      	ldr	r2, [r7, #20]
 8004866:	6a39      	ldr	r1, [r7, #32]
 8004868:	68f8      	ldr	r0, [r7, #12]
 800486a:	f000 fcc2 	bl	80051f2 <I2C_WaitOnBTFFlagUntilTimeout>
 800486e:	4603      	mov	r3, r0
 8004870:	2b00      	cmp	r3, #0
 8004872:	d00d      	beq.n	8004890 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004874:	68fb      	ldr	r3, [r7, #12]
 8004876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004878:	2b04      	cmp	r3, #4
 800487a:	d107      	bne.n	800488c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	681a      	ldr	r2, [r3, #0]
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800488a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800488c:	2301      	movs	r3, #1
 800488e:	e01a      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004894:	2b00      	cmp	r3, #0
 8004896:	d194      	bne.n	80047c2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	681a      	ldr	r2, [r3, #0]
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048a6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80048a8:	68fb      	ldr	r3, [r7, #12]
 80048aa:	2220      	movs	r2, #32
 80048ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2200      	movs	r2, #0
 80048b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048b8:	68fb      	ldr	r3, [r7, #12]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80048c0:	2300      	movs	r3, #0
 80048c2:	e000      	b.n	80048c6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80048c4:	2302      	movs	r3, #2
  }
}
 80048c6:	4618      	mov	r0, r3
 80048c8:	3718      	adds	r7, #24
 80048ca:	46bd      	mov	sp, r7
 80048cc:	bd80      	pop	{r7, pc}
 80048ce:	bf00      	nop
 80048d0:	00100002 	.word	0x00100002
 80048d4:	ffff0000 	.word	0xffff0000

080048d8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80048d8:	b580      	push	{r7, lr}
 80048da:	b08c      	sub	sp, #48	; 0x30
 80048dc:	af02      	add	r7, sp, #8
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	607a      	str	r2, [r7, #4]
 80048e2:	461a      	mov	r2, r3
 80048e4:	460b      	mov	r3, r1
 80048e6:	817b      	strh	r3, [r7, #10]
 80048e8:	4613      	mov	r3, r2
 80048ea:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80048ec:	f7fe fe7a 	bl	80035e4 <HAL_GetTick>
 80048f0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048f8:	b2db      	uxtb	r3, r3
 80048fa:	2b20      	cmp	r3, #32
 80048fc:	f040 820b 	bne.w	8004d16 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004900:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004902:	9300      	str	r3, [sp, #0]
 8004904:	2319      	movs	r3, #25
 8004906:	2201      	movs	r2, #1
 8004908:	497c      	ldr	r1, [pc, #496]	; (8004afc <HAL_I2C_Master_Receive+0x224>)
 800490a:	68f8      	ldr	r0, [r7, #12]
 800490c:	f000 fb5a 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004910:	4603      	mov	r3, r0
 8004912:	2b00      	cmp	r3, #0
 8004914:	d001      	beq.n	800491a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8004916:	2302      	movs	r3, #2
 8004918:	e1fe      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004920:	2b01      	cmp	r3, #1
 8004922:	d101      	bne.n	8004928 <HAL_I2C_Master_Receive+0x50>
 8004924:	2302      	movs	r3, #2
 8004926:	e1f7      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	2201      	movs	r2, #1
 800492c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	f003 0301 	and.w	r3, r3, #1
 800493a:	2b01      	cmp	r3, #1
 800493c:	d007      	beq.n	800494e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800493e:	68fb      	ldr	r3, [r7, #12]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	681a      	ldr	r2, [r3, #0]
 8004944:	68fb      	ldr	r3, [r7, #12]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	f042 0201 	orr.w	r2, r2, #1
 800494c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	681a      	ldr	r2, [r3, #0]
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	2222      	movs	r2, #34	; 0x22
 8004962:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	2210      	movs	r2, #16
 800496a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	2200      	movs	r2, #0
 8004972:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	687a      	ldr	r2, [r7, #4]
 8004978:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800497a:	68fb      	ldr	r3, [r7, #12]
 800497c:	893a      	ldrh	r2, [r7, #8]
 800497e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004984:	b29a      	uxth	r2, r3
 8004986:	68fb      	ldr	r3, [r7, #12]
 8004988:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a5c      	ldr	r2, [pc, #368]	; (8004b00 <HAL_I2C_Master_Receive+0x228>)
 800498e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004990:	8979      	ldrh	r1, [r7, #10]
 8004992:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004994:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004996:	68f8      	ldr	r0, [r7, #12]
 8004998:	f000 fa46 	bl	8004e28 <I2C_MasterRequestRead>
 800499c:	4603      	mov	r3, r0
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d001      	beq.n	80049a6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80049a2:	2301      	movs	r3, #1
 80049a4:	e1b8      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 80049a6:	68fb      	ldr	r3, [r7, #12]
 80049a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d113      	bne.n	80049d6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ae:	2300      	movs	r3, #0
 80049b0:	623b      	str	r3, [r7, #32]
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	681b      	ldr	r3, [r3, #0]
 80049b6:	695b      	ldr	r3, [r3, #20]
 80049b8:	623b      	str	r3, [r7, #32]
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	699b      	ldr	r3, [r3, #24]
 80049c0:	623b      	str	r3, [r7, #32]
 80049c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	681b      	ldr	r3, [r3, #0]
 80049c8:	681a      	ldr	r2, [r3, #0]
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80049d2:	601a      	str	r2, [r3, #0]
 80049d4:	e18c      	b.n	8004cf0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d11b      	bne.n	8004a16 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	681b      	ldr	r3, [r3, #0]
 80049e2:	681a      	ldr	r2, [r3, #0]
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80049ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80049ee:	2300      	movs	r3, #0
 80049f0:	61fb      	str	r3, [r7, #28]
 80049f2:	68fb      	ldr	r3, [r7, #12]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	695b      	ldr	r3, [r3, #20]
 80049f8:	61fb      	str	r3, [r7, #28]
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	699b      	ldr	r3, [r3, #24]
 8004a00:	61fb      	str	r3, [r7, #28]
 8004a02:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	68fb      	ldr	r3, [r7, #12]
 8004a0c:	681b      	ldr	r3, [r3, #0]
 8004a0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a12:	601a      	str	r2, [r3, #0]
 8004a14:	e16c      	b.n	8004cf0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 8004a16:	68fb      	ldr	r3, [r7, #12]
 8004a18:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a1a:	2b02      	cmp	r3, #2
 8004a1c:	d11b      	bne.n	8004a56 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	681b      	ldr	r3, [r3, #0]
 8004a22:	681a      	ldr	r2, [r3, #0]
 8004a24:	68fb      	ldr	r3, [r7, #12]
 8004a26:	681b      	ldr	r3, [r3, #0]
 8004a28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004a2c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681a      	ldr	r2, [r3, #0]
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004a3c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a3e:	2300      	movs	r3, #0
 8004a40:	61bb      	str	r3, [r7, #24]
 8004a42:	68fb      	ldr	r3, [r7, #12]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	61bb      	str	r3, [r7, #24]
 8004a4a:	68fb      	ldr	r3, [r7, #12]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	699b      	ldr	r3, [r3, #24]
 8004a50:	61bb      	str	r3, [r7, #24]
 8004a52:	69bb      	ldr	r3, [r7, #24]
 8004a54:	e14c      	b.n	8004cf0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004a56:	68fb      	ldr	r3, [r7, #12]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	681a      	ldr	r2, [r3, #0]
 8004a5c:	68fb      	ldr	r3, [r7, #12]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004a64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a66:	2300      	movs	r3, #0
 8004a68:	617b      	str	r3, [r7, #20]
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	695b      	ldr	r3, [r3, #20]
 8004a70:	617b      	str	r3, [r7, #20]
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	699b      	ldr	r3, [r3, #24]
 8004a78:	617b      	str	r3, [r7, #20]
 8004a7a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8004a7c:	e138      	b.n	8004cf0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 8004a7e:	68fb      	ldr	r3, [r7, #12]
 8004a80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a82:	2b03      	cmp	r3, #3
 8004a84:	f200 80f1 	bhi.w	8004c6a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004a8c:	2b01      	cmp	r3, #1
 8004a8e:	d123      	bne.n	8004ad8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004a90:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004a92:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004a94:	68f8      	ldr	r0, [r7, #12]
 8004a96:	f000 fbed 	bl	8005274 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004a9a:	4603      	mov	r3, r0
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d001      	beq.n	8004aa4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004aa0:	2301      	movs	r3, #1
 8004aa2:	e139      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	691a      	ldr	r2, [r3, #16]
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aae:	b2d2      	uxtb	r2, r2
 8004ab0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ab2:	68fb      	ldr	r3, [r7, #12]
 8004ab4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ab6:	1c5a      	adds	r2, r3, #1
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004ac0:	3b01      	subs	r3, #1
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	68fb      	ldr	r3, [r7, #12]
 8004ac6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004acc:	b29b      	uxth	r3, r3
 8004ace:	3b01      	subs	r3, #1
 8004ad0:	b29a      	uxth	r2, r3
 8004ad2:	68fb      	ldr	r3, [r7, #12]
 8004ad4:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004ad6:	e10b      	b.n	8004cf0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004adc:	2b02      	cmp	r3, #2
 8004ade:	d14e      	bne.n	8004b7e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae2:	9300      	str	r3, [sp, #0]
 8004ae4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ae6:	2200      	movs	r2, #0
 8004ae8:	4906      	ldr	r1, [pc, #24]	; (8004b04 <HAL_I2C_Master_Receive+0x22c>)
 8004aea:	68f8      	ldr	r0, [r7, #12]
 8004aec:	f000 fa6a 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004af0:	4603      	mov	r3, r0
 8004af2:	2b00      	cmp	r3, #0
 8004af4:	d008      	beq.n	8004b08 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8004af6:	2301      	movs	r3, #1
 8004af8:	e10e      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
 8004afa:	bf00      	nop
 8004afc:	00100002 	.word	0x00100002
 8004b00:	ffff0000 	.word	0xffff0000
 8004b04:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	681a      	ldr	r2, [r3, #0]
 8004b0e:	68fb      	ldr	r3, [r7, #12]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b16:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b18:	68fb      	ldr	r3, [r7, #12]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	691a      	ldr	r2, [r3, #16]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b22:	b2d2      	uxtb	r2, r2
 8004b24:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b26:	68fb      	ldr	r3, [r7, #12]
 8004b28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b2a:	1c5a      	adds	r2, r3, #1
 8004b2c:	68fb      	ldr	r3, [r7, #12]
 8004b2e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b30:	68fb      	ldr	r3, [r7, #12]
 8004b32:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b34:	3b01      	subs	r3, #1
 8004b36:	b29a      	uxth	r2, r3
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b40:	b29b      	uxth	r3, r3
 8004b42:	3b01      	subs	r3, #1
 8004b44:	b29a      	uxth	r2, r3
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b4a:	68fb      	ldr	r3, [r7, #12]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	691a      	ldr	r2, [r3, #16]
 8004b50:	68fb      	ldr	r3, [r7, #12]
 8004b52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b54:	b2d2      	uxtb	r2, r2
 8004b56:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b5c:	1c5a      	adds	r2, r3, #1
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004b66:	3b01      	subs	r3, #1
 8004b68:	b29a      	uxth	r2, r3
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b72:	b29b      	uxth	r3, r3
 8004b74:	3b01      	subs	r3, #1
 8004b76:	b29a      	uxth	r2, r3
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004b7c:	e0b8      	b.n	8004cf0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004b7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004b80:	9300      	str	r3, [sp, #0]
 8004b82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b84:	2200      	movs	r2, #0
 8004b86:	4966      	ldr	r1, [pc, #408]	; (8004d20 <HAL_I2C_Master_Receive+0x448>)
 8004b88:	68f8      	ldr	r0, [r7, #12]
 8004b8a:	f000 fa1b 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004b8e:	4603      	mov	r3, r0
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d001      	beq.n	8004b98 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004b94:	2301      	movs	r3, #1
 8004b96:	e0bf      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b98:	68fb      	ldr	r3, [r7, #12]
 8004b9a:	681b      	ldr	r3, [r3, #0]
 8004b9c:	681a      	ldr	r2, [r3, #0]
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ba6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004ba8:	68fb      	ldr	r3, [r7, #12]
 8004baa:	681b      	ldr	r3, [r3, #0]
 8004bac:	691a      	ldr	r2, [r3, #16]
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bb2:	b2d2      	uxtb	r2, r2
 8004bb4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004bba:	1c5a      	adds	r2, r3, #1
 8004bbc:	68fb      	ldr	r3, [r7, #12]
 8004bbe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004bc0:	68fb      	ldr	r3, [r7, #12]
 8004bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004bc4:	3b01      	subs	r3, #1
 8004bc6:	b29a      	uxth	r2, r3
 8004bc8:	68fb      	ldr	r3, [r7, #12]
 8004bca:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bd0:	b29b      	uxth	r3, r3
 8004bd2:	3b01      	subs	r3, #1
 8004bd4:	b29a      	uxth	r2, r3
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8004bda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004bdc:	9300      	str	r3, [sp, #0]
 8004bde:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004be0:	2200      	movs	r2, #0
 8004be2:	494f      	ldr	r1, [pc, #316]	; (8004d20 <HAL_I2C_Master_Receive+0x448>)
 8004be4:	68f8      	ldr	r0, [r7, #12]
 8004be6:	f000 f9ed 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004bea:	4603      	mov	r3, r0
 8004bec:	2b00      	cmp	r3, #0
 8004bee:	d001      	beq.n	8004bf4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8004bf0:	2301      	movs	r3, #1
 8004bf2:	e091      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	681a      	ldr	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004c02:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	691a      	ldr	r2, [r3, #16]
 8004c0a:	68fb      	ldr	r3, [r7, #12]
 8004c0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c0e:	b2d2      	uxtb	r2, r2
 8004c10:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c12:	68fb      	ldr	r3, [r7, #12]
 8004c14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c16:	1c5a      	adds	r2, r3, #1
 8004c18:	68fb      	ldr	r3, [r7, #12]
 8004c1a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c1c:	68fb      	ldr	r3, [r7, #12]
 8004c1e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c20:	3b01      	subs	r3, #1
 8004c22:	b29a      	uxth	r2, r3
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	3b01      	subs	r3, #1
 8004c30:	b29a      	uxth	r2, r3
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c36:	68fb      	ldr	r3, [r7, #12]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	691a      	ldr	r2, [r3, #16]
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c40:	b2d2      	uxtb	r2, r2
 8004c42:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c48:	1c5a      	adds	r2, r3, #1
 8004c4a:	68fb      	ldr	r3, [r7, #12]
 8004c4c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c52:	3b01      	subs	r3, #1
 8004c54:	b29a      	uxth	r2, r3
 8004c56:	68fb      	ldr	r3, [r7, #12]
 8004c58:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c5e:	b29b      	uxth	r3, r3
 8004c60:	3b01      	subs	r3, #1
 8004c62:	b29a      	uxth	r2, r3
 8004c64:	68fb      	ldr	r3, [r7, #12]
 8004c66:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004c68:	e042      	b.n	8004cf0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004c6a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004c6c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004c6e:	68f8      	ldr	r0, [r7, #12]
 8004c70:	f000 fb00 	bl	8005274 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004c74:	4603      	mov	r3, r0
 8004c76:	2b00      	cmp	r3, #0
 8004c78:	d001      	beq.n	8004c7e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004c7a:	2301      	movs	r3, #1
 8004c7c:	e04c      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	691a      	ldr	r2, [r3, #16]
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c88:	b2d2      	uxtb	r2, r2
 8004c8a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c90:	1c5a      	adds	r2, r3, #1
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004c9a:	3b01      	subs	r3, #1
 8004c9c:	b29a      	uxth	r2, r3
 8004c9e:	68fb      	ldr	r3, [r7, #12]
 8004ca0:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ca6:	b29b      	uxth	r3, r3
 8004ca8:	3b01      	subs	r3, #1
 8004caa:	b29a      	uxth	r2, r3
 8004cac:	68fb      	ldr	r3, [r7, #12]
 8004cae:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004cb0:	68fb      	ldr	r3, [r7, #12]
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	695b      	ldr	r3, [r3, #20]
 8004cb6:	f003 0304 	and.w	r3, r3, #4
 8004cba:	2b04      	cmp	r3, #4
 8004cbc:	d118      	bne.n	8004cf0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	691a      	ldr	r2, [r3, #16]
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cc8:	b2d2      	uxtb	r2, r2
 8004cca:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cd0:	1c5a      	adds	r2, r3, #1
 8004cd2:	68fb      	ldr	r3, [r7, #12]
 8004cd4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004cd6:	68fb      	ldr	r3, [r7, #12]
 8004cd8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cda:	3b01      	subs	r3, #1
 8004cdc:	b29a      	uxth	r2, r3
 8004cde:	68fb      	ldr	r3, [r7, #12]
 8004ce0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004ce2:	68fb      	ldr	r3, [r7, #12]
 8004ce4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ce6:	b29b      	uxth	r3, r3
 8004ce8:	3b01      	subs	r3, #1
 8004cea:	b29a      	uxth	r2, r3
 8004cec:	68fb      	ldr	r3, [r7, #12]
 8004cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004cf4:	2b00      	cmp	r3, #0
 8004cf6:	f47f aec2 	bne.w	8004a7e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004cfa:	68fb      	ldr	r3, [r7, #12]
 8004cfc:	2220      	movs	r2, #32
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d02:	68fb      	ldr	r3, [r7, #12]
 8004d04:	2200      	movs	r2, #0
 8004d06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004d0a:	68fb      	ldr	r3, [r7, #12]
 8004d0c:	2200      	movs	r2, #0
 8004d0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004d12:	2300      	movs	r3, #0
 8004d14:	e000      	b.n	8004d18 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 8004d16:	2302      	movs	r3, #2
  }
}
 8004d18:	4618      	mov	r0, r3
 8004d1a:	3728      	adds	r7, #40	; 0x28
 8004d1c:	46bd      	mov	sp, r7
 8004d1e:	bd80      	pop	{r7, pc}
 8004d20:	00010004 	.word	0x00010004

08004d24 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004d24:	b580      	push	{r7, lr}
 8004d26:	b088      	sub	sp, #32
 8004d28:	af02      	add	r7, sp, #8
 8004d2a:	60f8      	str	r0, [r7, #12]
 8004d2c:	607a      	str	r2, [r7, #4]
 8004d2e:	603b      	str	r3, [r7, #0]
 8004d30:	460b      	mov	r3, r1
 8004d32:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d38:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004d3a:	697b      	ldr	r3, [r7, #20]
 8004d3c:	2b08      	cmp	r3, #8
 8004d3e:	d006      	beq.n	8004d4e <I2C_MasterRequestWrite+0x2a>
 8004d40:	697b      	ldr	r3, [r7, #20]
 8004d42:	2b01      	cmp	r3, #1
 8004d44:	d003      	beq.n	8004d4e <I2C_MasterRequestWrite+0x2a>
 8004d46:	697b      	ldr	r3, [r7, #20]
 8004d48:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004d4c:	d108      	bne.n	8004d60 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	681b      	ldr	r3, [r3, #0]
 8004d52:	681a      	ldr	r2, [r3, #0]
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d5c:	601a      	str	r2, [r3, #0]
 8004d5e:	e00b      	b.n	8004d78 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004d60:	68fb      	ldr	r3, [r7, #12]
 8004d62:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004d64:	2b12      	cmp	r3, #18
 8004d66:	d107      	bne.n	8004d78 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004d68:	68fb      	ldr	r3, [r7, #12]
 8004d6a:	681b      	ldr	r3, [r3, #0]
 8004d6c:	681a      	ldr	r2, [r3, #0]
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004d76:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2200      	movs	r2, #0
 8004d80:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004d84:	68f8      	ldr	r0, [r7, #12]
 8004d86:	f000 f91d 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004d8a:	4603      	mov	r3, r0
 8004d8c:	2b00      	cmp	r3, #0
 8004d8e:	d00d      	beq.n	8004dac <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	681b      	ldr	r3, [r3, #0]
 8004d96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004d9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004d9e:	d103      	bne.n	8004da8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004da6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004da8:	2303      	movs	r3, #3
 8004daa:	e035      	b.n	8004e18 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	691b      	ldr	r3, [r3, #16]
 8004db0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004db4:	d108      	bne.n	8004dc8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004db6:	897b      	ldrh	r3, [r7, #10]
 8004db8:	b2db      	uxtb	r3, r3
 8004dba:	461a      	mov	r2, r3
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004dc4:	611a      	str	r2, [r3, #16]
 8004dc6:	e01b      	b.n	8004e00 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004dc8:	897b      	ldrh	r3, [r7, #10]
 8004dca:	11db      	asrs	r3, r3, #7
 8004dcc:	b2db      	uxtb	r3, r3
 8004dce:	f003 0306 	and.w	r3, r3, #6
 8004dd2:	b2db      	uxtb	r3, r3
 8004dd4:	f063 030f 	orn	r3, r3, #15
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	68fb      	ldr	r3, [r7, #12]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004de0:	683b      	ldr	r3, [r7, #0]
 8004de2:	687a      	ldr	r2, [r7, #4]
 8004de4:	490e      	ldr	r1, [pc, #56]	; (8004e20 <I2C_MasterRequestWrite+0xfc>)
 8004de6:	68f8      	ldr	r0, [r7, #12]
 8004de8:	f000 f943 	bl	8005072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004dec:	4603      	mov	r3, r0
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d001      	beq.n	8004df6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	e010      	b.n	8004e18 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004df6:	897b      	ldrh	r3, [r7, #10]
 8004df8:	b2da      	uxtb	r2, r3
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004e00:	683b      	ldr	r3, [r7, #0]
 8004e02:	687a      	ldr	r2, [r7, #4]
 8004e04:	4907      	ldr	r1, [pc, #28]	; (8004e24 <I2C_MasterRequestWrite+0x100>)
 8004e06:	68f8      	ldr	r0, [r7, #12]
 8004e08:	f000 f933 	bl	8005072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	2b00      	cmp	r3, #0
 8004e10:	d001      	beq.n	8004e16 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004e12:	2301      	movs	r3, #1
 8004e14:	e000      	b.n	8004e18 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004e16:	2300      	movs	r3, #0
}
 8004e18:	4618      	mov	r0, r3
 8004e1a:	3718      	adds	r7, #24
 8004e1c:	46bd      	mov	sp, r7
 8004e1e:	bd80      	pop	{r7, pc}
 8004e20:	00010008 	.word	0x00010008
 8004e24:	00010002 	.word	0x00010002

08004e28 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004e28:	b580      	push	{r7, lr}
 8004e2a:	b088      	sub	sp, #32
 8004e2c:	af02      	add	r7, sp, #8
 8004e2e:	60f8      	str	r0, [r7, #12]
 8004e30:	607a      	str	r2, [r7, #4]
 8004e32:	603b      	str	r3, [r7, #0]
 8004e34:	460b      	mov	r3, r1
 8004e36:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e3c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	681a      	ldr	r2, [r3, #0]
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	681b      	ldr	r3, [r3, #0]
 8004e48:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004e4c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b08      	cmp	r3, #8
 8004e52:	d006      	beq.n	8004e62 <I2C_MasterRequestRead+0x3a>
 8004e54:	697b      	ldr	r3, [r7, #20]
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d003      	beq.n	8004e62 <I2C_MasterRequestRead+0x3a>
 8004e5a:	697b      	ldr	r3, [r7, #20]
 8004e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004e60:	d108      	bne.n	8004e74 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	681b      	ldr	r3, [r3, #0]
 8004e66:	681a      	ldr	r2, [r3, #0]
 8004e68:	68fb      	ldr	r3, [r7, #12]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e70:	601a      	str	r2, [r3, #0]
 8004e72:	e00b      	b.n	8004e8c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004e78:	2b11      	cmp	r3, #17
 8004e7a:	d107      	bne.n	8004e8c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004e7c:	68fb      	ldr	r3, [r7, #12]
 8004e7e:	681b      	ldr	r3, [r3, #0]
 8004e80:	681a      	ldr	r2, [r3, #0]
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004e8a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004e8c:	683b      	ldr	r3, [r7, #0]
 8004e8e:	9300      	str	r3, [sp, #0]
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2200      	movs	r2, #0
 8004e94:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004e98:	68f8      	ldr	r0, [r7, #12]
 8004e9a:	f000 f893 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004e9e:	4603      	mov	r3, r0
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d00d      	beq.n	8004ec0 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	681b      	ldr	r3, [r3, #0]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004eae:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004eb2:	d103      	bne.n	8004ebc <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004eba:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004ebc:	2303      	movs	r3, #3
 8004ebe:	e079      	b.n	8004fb4 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	691b      	ldr	r3, [r3, #16]
 8004ec4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ec8:	d108      	bne.n	8004edc <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004eca:	897b      	ldrh	r3, [r7, #10]
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	611a      	str	r2, [r3, #16]
 8004eda:	e05f      	b.n	8004f9c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004edc:	897b      	ldrh	r3, [r7, #10]
 8004ede:	11db      	asrs	r3, r3, #7
 8004ee0:	b2db      	uxtb	r3, r3
 8004ee2:	f003 0306 	and.w	r3, r3, #6
 8004ee6:	b2db      	uxtb	r3, r3
 8004ee8:	f063 030f 	orn	r3, r3, #15
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	68fb      	ldr	r3, [r7, #12]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004ef4:	683b      	ldr	r3, [r7, #0]
 8004ef6:	687a      	ldr	r2, [r7, #4]
 8004ef8:	4930      	ldr	r1, [pc, #192]	; (8004fbc <I2C_MasterRequestRead+0x194>)
 8004efa:	68f8      	ldr	r0, [r7, #12]
 8004efc:	f000 f8b9 	bl	8005072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f00:	4603      	mov	r3, r0
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d001      	beq.n	8004f0a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004f06:	2301      	movs	r3, #1
 8004f08:	e054      	b.n	8004fb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004f0a:	897b      	ldrh	r3, [r7, #10]
 8004f0c:	b2da      	uxtb	r2, r3
 8004f0e:	68fb      	ldr	r3, [r7, #12]
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f14:	683b      	ldr	r3, [r7, #0]
 8004f16:	687a      	ldr	r2, [r7, #4]
 8004f18:	4929      	ldr	r1, [pc, #164]	; (8004fc0 <I2C_MasterRequestRead+0x198>)
 8004f1a:	68f8      	ldr	r0, [r7, #12]
 8004f1c:	f000 f8a9 	bl	8005072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004f20:	4603      	mov	r3, r0
 8004f22:	2b00      	cmp	r3, #0
 8004f24:	d001      	beq.n	8004f2a <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 8004f26:	2301      	movs	r3, #1
 8004f28:	e044      	b.n	8004fb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004f2a:	2300      	movs	r3, #0
 8004f2c:	613b      	str	r3, [r7, #16]
 8004f2e:	68fb      	ldr	r3, [r7, #12]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	695b      	ldr	r3, [r3, #20]
 8004f34:	613b      	str	r3, [r7, #16]
 8004f36:	68fb      	ldr	r3, [r7, #12]
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	699b      	ldr	r3, [r3, #24]
 8004f3c:	613b      	str	r3, [r7, #16]
 8004f3e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f40:	68fb      	ldr	r3, [r7, #12]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681a      	ldr	r2, [r3, #0]
 8004f46:	68fb      	ldr	r3, [r7, #12]
 8004f48:	681b      	ldr	r3, [r3, #0]
 8004f4a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f4e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	9300      	str	r3, [sp, #0]
 8004f54:	687b      	ldr	r3, [r7, #4]
 8004f56:	2200      	movs	r2, #0
 8004f58:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004f5c:	68f8      	ldr	r0, [r7, #12]
 8004f5e:	f000 f831 	bl	8004fc4 <I2C_WaitOnFlagUntilTimeout>
 8004f62:	4603      	mov	r3, r0
 8004f64:	2b00      	cmp	r3, #0
 8004f66:	d00d      	beq.n	8004f84 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004f68:	68fb      	ldr	r3, [r7, #12]
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004f72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004f76:	d103      	bne.n	8004f80 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004f78:	68fb      	ldr	r3, [r7, #12]
 8004f7a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004f7e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004f80:	2303      	movs	r3, #3
 8004f82:	e017      	b.n	8004fb4 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004f84:	897b      	ldrh	r3, [r7, #10]
 8004f86:	11db      	asrs	r3, r3, #7
 8004f88:	b2db      	uxtb	r3, r3
 8004f8a:	f003 0306 	and.w	r3, r3, #6
 8004f8e:	b2db      	uxtb	r3, r3
 8004f90:	f063 030e 	orn	r3, r3, #14
 8004f94:	b2da      	uxtb	r2, r3
 8004f96:	68fb      	ldr	r3, [r7, #12]
 8004f98:	681b      	ldr	r3, [r3, #0]
 8004f9a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004f9c:	683b      	ldr	r3, [r7, #0]
 8004f9e:	687a      	ldr	r2, [r7, #4]
 8004fa0:	4907      	ldr	r1, [pc, #28]	; (8004fc0 <I2C_MasterRequestRead+0x198>)
 8004fa2:	68f8      	ldr	r0, [r7, #12]
 8004fa4:	f000 f865 	bl	8005072 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d001      	beq.n	8004fb2 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004fae:	2301      	movs	r3, #1
 8004fb0:	e000      	b.n	8004fb4 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004fb2:	2300      	movs	r3, #0
}
 8004fb4:	4618      	mov	r0, r3
 8004fb6:	3718      	adds	r7, #24
 8004fb8:	46bd      	mov	sp, r7
 8004fba:	bd80      	pop	{r7, pc}
 8004fbc:	00010008 	.word	0x00010008
 8004fc0:	00010002 	.word	0x00010002

08004fc4 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004fc4:	b580      	push	{r7, lr}
 8004fc6:	b084      	sub	sp, #16
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	60f8      	str	r0, [r7, #12]
 8004fcc:	60b9      	str	r1, [r7, #8]
 8004fce:	603b      	str	r3, [r7, #0]
 8004fd0:	4613      	mov	r3, r2
 8004fd2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004fd4:	e025      	b.n	8005022 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fd6:	683b      	ldr	r3, [r7, #0]
 8004fd8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004fdc:	d021      	beq.n	8005022 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fde:	f7fe fb01 	bl	80035e4 <HAL_GetTick>
 8004fe2:	4602      	mov	r2, r0
 8004fe4:	69bb      	ldr	r3, [r7, #24]
 8004fe6:	1ad3      	subs	r3, r2, r3
 8004fe8:	683a      	ldr	r2, [r7, #0]
 8004fea:	429a      	cmp	r2, r3
 8004fec:	d302      	bcc.n	8004ff4 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004fee:	683b      	ldr	r3, [r7, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d116      	bne.n	8005022 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8004ff4:	68fb      	ldr	r3, [r7, #12]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8004ffa:	68fb      	ldr	r3, [r7, #12]
 8004ffc:	2220      	movs	r2, #32
 8004ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005002:	68fb      	ldr	r3, [r7, #12]
 8005004:	2200      	movs	r2, #0
 8005006:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800500a:	68fb      	ldr	r3, [r7, #12]
 800500c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800500e:	f043 0220 	orr.w	r2, r3, #32
 8005012:	68fb      	ldr	r3, [r7, #12]
 8005014:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	2200      	movs	r2, #0
 800501a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800501e:	2301      	movs	r3, #1
 8005020:	e023      	b.n	800506a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005022:	68bb      	ldr	r3, [r7, #8]
 8005024:	0c1b      	lsrs	r3, r3, #16
 8005026:	b2db      	uxtb	r3, r3
 8005028:	2b01      	cmp	r3, #1
 800502a:	d10d      	bne.n	8005048 <I2C_WaitOnFlagUntilTimeout+0x84>
 800502c:	68fb      	ldr	r3, [r7, #12]
 800502e:	681b      	ldr	r3, [r3, #0]
 8005030:	695b      	ldr	r3, [r3, #20]
 8005032:	43da      	mvns	r2, r3
 8005034:	68bb      	ldr	r3, [r7, #8]
 8005036:	4013      	ands	r3, r2
 8005038:	b29b      	uxth	r3, r3
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf0c      	ite	eq
 800503e:	2301      	moveq	r3, #1
 8005040:	2300      	movne	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	e00c      	b.n	8005062 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8005048:	68fb      	ldr	r3, [r7, #12]
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	699b      	ldr	r3, [r3, #24]
 800504e:	43da      	mvns	r2, r3
 8005050:	68bb      	ldr	r3, [r7, #8]
 8005052:	4013      	ands	r3, r2
 8005054:	b29b      	uxth	r3, r3
 8005056:	2b00      	cmp	r3, #0
 8005058:	bf0c      	ite	eq
 800505a:	2301      	moveq	r3, #1
 800505c:	2300      	movne	r3, #0
 800505e:	b2db      	uxtb	r3, r3
 8005060:	461a      	mov	r2, r3
 8005062:	79fb      	ldrb	r3, [r7, #7]
 8005064:	429a      	cmp	r2, r3
 8005066:	d0b6      	beq.n	8004fd6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8005068:	2300      	movs	r3, #0
}
 800506a:	4618      	mov	r0, r3
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}

08005072 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8005072:	b580      	push	{r7, lr}
 8005074:	b084      	sub	sp, #16
 8005076:	af00      	add	r7, sp, #0
 8005078:	60f8      	str	r0, [r7, #12]
 800507a:	60b9      	str	r1, [r7, #8]
 800507c:	607a      	str	r2, [r7, #4]
 800507e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005080:	e051      	b.n	8005126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	681b      	ldr	r3, [r3, #0]
 8005086:	695b      	ldr	r3, [r3, #20]
 8005088:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800508c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005090:	d123      	bne.n	80050da <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005092:	68fb      	ldr	r3, [r7, #12]
 8005094:	681b      	ldr	r3, [r3, #0]
 8005096:	681a      	ldr	r2, [r3, #0]
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050a0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80050aa:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80050ac:	68fb      	ldr	r3, [r7, #12]
 80050ae:	2200      	movs	r2, #0
 80050b0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80050b2:	68fb      	ldr	r3, [r7, #12]
 80050b4:	2220      	movs	r2, #32
 80050b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	2200      	movs	r2, #0
 80050be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80050c2:	68fb      	ldr	r3, [r7, #12]
 80050c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80050c6:	f043 0204 	orr.w	r2, r3, #4
 80050ca:	68fb      	ldr	r3, [r7, #12]
 80050cc:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	2200      	movs	r2, #0
 80050d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e046      	b.n	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80050e0:	d021      	beq.n	8005126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80050e2:	f7fe fa7f 	bl	80035e4 <HAL_GetTick>
 80050e6:	4602      	mov	r2, r0
 80050e8:	683b      	ldr	r3, [r7, #0]
 80050ea:	1ad3      	subs	r3, r2, r3
 80050ec:	687a      	ldr	r2, [r7, #4]
 80050ee:	429a      	cmp	r2, r3
 80050f0:	d302      	bcc.n	80050f8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	d116      	bne.n	8005126 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	2200      	movs	r2, #0
 80050fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	2220      	movs	r2, #32
 8005102:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	2200      	movs	r2, #0
 800510a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800510e:	68fb      	ldr	r3, [r7, #12]
 8005110:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005112:	f043 0220 	orr.w	r2, r3, #32
 8005116:	68fb      	ldr	r3, [r7, #12]
 8005118:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800511a:	68fb      	ldr	r3, [r7, #12]
 800511c:	2200      	movs	r2, #0
 800511e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005122:	2301      	movs	r3, #1
 8005124:	e020      	b.n	8005168 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005126:	68bb      	ldr	r3, [r7, #8]
 8005128:	0c1b      	lsrs	r3, r3, #16
 800512a:	b2db      	uxtb	r3, r3
 800512c:	2b01      	cmp	r3, #1
 800512e:	d10c      	bne.n	800514a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8005130:	68fb      	ldr	r3, [r7, #12]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	43da      	mvns	r2, r3
 8005138:	68bb      	ldr	r3, [r7, #8]
 800513a:	4013      	ands	r3, r2
 800513c:	b29b      	uxth	r3, r3
 800513e:	2b00      	cmp	r3, #0
 8005140:	bf14      	ite	ne
 8005142:	2301      	movne	r3, #1
 8005144:	2300      	moveq	r3, #0
 8005146:	b2db      	uxtb	r3, r3
 8005148:	e00b      	b.n	8005162 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	699b      	ldr	r3, [r3, #24]
 8005150:	43da      	mvns	r2, r3
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4013      	ands	r3, r2
 8005156:	b29b      	uxth	r3, r3
 8005158:	2b00      	cmp	r3, #0
 800515a:	bf14      	ite	ne
 800515c:	2301      	movne	r3, #1
 800515e:	2300      	moveq	r3, #0
 8005160:	b2db      	uxtb	r3, r3
 8005162:	2b00      	cmp	r3, #0
 8005164:	d18d      	bne.n	8005082 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8005166:	2300      	movs	r3, #0
}
 8005168:	4618      	mov	r0, r3
 800516a:	3710      	adds	r7, #16
 800516c:	46bd      	mov	sp, r7
 800516e:	bd80      	pop	{r7, pc}

08005170 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005170:	b580      	push	{r7, lr}
 8005172:	b084      	sub	sp, #16
 8005174:	af00      	add	r7, sp, #0
 8005176:	60f8      	str	r0, [r7, #12]
 8005178:	60b9      	str	r1, [r7, #8]
 800517a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800517c:	e02d      	b.n	80051da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800517e:	68f8      	ldr	r0, [r7, #12]
 8005180:	f000 f8ce 	bl	8005320 <I2C_IsAcknowledgeFailed>
 8005184:	4603      	mov	r3, r0
 8005186:	2b00      	cmp	r3, #0
 8005188:	d001      	beq.n	800518e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800518a:	2301      	movs	r3, #1
 800518c:	e02d      	b.n	80051ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800518e:	68bb      	ldr	r3, [r7, #8]
 8005190:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005194:	d021      	beq.n	80051da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005196:	f7fe fa25 	bl	80035e4 <HAL_GetTick>
 800519a:	4602      	mov	r2, r0
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	1ad3      	subs	r3, r2, r3
 80051a0:	68ba      	ldr	r2, [r7, #8]
 80051a2:	429a      	cmp	r2, r3
 80051a4:	d302      	bcc.n	80051ac <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80051a6:	68bb      	ldr	r3, [r7, #8]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d116      	bne.n	80051da <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	2200      	movs	r2, #0
 80051b0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80051b2:	68fb      	ldr	r3, [r7, #12]
 80051b4:	2220      	movs	r2, #32
 80051b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80051ba:	68fb      	ldr	r3, [r7, #12]
 80051bc:	2200      	movs	r2, #0
 80051be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80051c6:	f043 0220 	orr.w	r2, r3, #32
 80051ca:	68fb      	ldr	r3, [r7, #12]
 80051cc:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	2200      	movs	r2, #0
 80051d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80051d6:	2301      	movs	r3, #1
 80051d8:	e007      	b.n	80051ea <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80051da:	68fb      	ldr	r3, [r7, #12]
 80051dc:	681b      	ldr	r3, [r3, #0]
 80051de:	695b      	ldr	r3, [r3, #20]
 80051e0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80051e4:	2b80      	cmp	r3, #128	; 0x80
 80051e6:	d1ca      	bne.n	800517e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80051e8:	2300      	movs	r3, #0
}
 80051ea:	4618      	mov	r0, r3
 80051ec:	3710      	adds	r7, #16
 80051ee:	46bd      	mov	sp, r7
 80051f0:	bd80      	pop	{r7, pc}

080051f2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80051f2:	b580      	push	{r7, lr}
 80051f4:	b084      	sub	sp, #16
 80051f6:	af00      	add	r7, sp, #0
 80051f8:	60f8      	str	r0, [r7, #12]
 80051fa:	60b9      	str	r1, [r7, #8]
 80051fc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80051fe:	e02d      	b.n	800525c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005200:	68f8      	ldr	r0, [r7, #12]
 8005202:	f000 f88d 	bl	8005320 <I2C_IsAcknowledgeFailed>
 8005206:	4603      	mov	r3, r0
 8005208:	2b00      	cmp	r3, #0
 800520a:	d001      	beq.n	8005210 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800520c:	2301      	movs	r3, #1
 800520e:	e02d      	b.n	800526c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005210:	68bb      	ldr	r3, [r7, #8]
 8005212:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005216:	d021      	beq.n	800525c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005218:	f7fe f9e4 	bl	80035e4 <HAL_GetTick>
 800521c:	4602      	mov	r2, r0
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	1ad3      	subs	r3, r2, r3
 8005222:	68ba      	ldr	r2, [r7, #8]
 8005224:	429a      	cmp	r2, r3
 8005226:	d302      	bcc.n	800522e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8005228:	68bb      	ldr	r3, [r7, #8]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d116      	bne.n	800525c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800522e:	68fb      	ldr	r3, [r7, #12]
 8005230:	2200      	movs	r2, #0
 8005232:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005234:	68fb      	ldr	r3, [r7, #12]
 8005236:	2220      	movs	r2, #32
 8005238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	2200      	movs	r2, #0
 8005240:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005248:	f043 0220 	orr.w	r2, r3, #32
 800524c:	68fb      	ldr	r3, [r7, #12]
 800524e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2200      	movs	r2, #0
 8005254:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e007      	b.n	800526c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	681b      	ldr	r3, [r3, #0]
 8005260:	695b      	ldr	r3, [r3, #20]
 8005262:	f003 0304 	and.w	r3, r3, #4
 8005266:	2b04      	cmp	r3, #4
 8005268:	d1ca      	bne.n	8005200 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800526a:	2300      	movs	r3, #0
}
 800526c:	4618      	mov	r0, r3
 800526e:	3710      	adds	r7, #16
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}

08005274 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005274:	b580      	push	{r7, lr}
 8005276:	b084      	sub	sp, #16
 8005278:	af00      	add	r7, sp, #0
 800527a:	60f8      	str	r0, [r7, #12]
 800527c:	60b9      	str	r1, [r7, #8]
 800527e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005280:	e042      	b.n	8005308 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	681b      	ldr	r3, [r3, #0]
 8005286:	695b      	ldr	r3, [r3, #20]
 8005288:	f003 0310 	and.w	r3, r3, #16
 800528c:	2b10      	cmp	r3, #16
 800528e:	d119      	bne.n	80052c4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	f06f 0210 	mvn.w	r2, #16
 8005298:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800529a:	68fb      	ldr	r3, [r7, #12]
 800529c:	2200      	movs	r2, #0
 800529e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052a0:	68fb      	ldr	r3, [r7, #12]
 80052a2:	2220      	movs	r2, #32
 80052a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052a8:	68fb      	ldr	r3, [r7, #12]
 80052aa:	2200      	movs	r2, #0
 80052ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80052b0:	68fb      	ldr	r3, [r7, #12]
 80052b2:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052b8:	68fb      	ldr	r3, [r7, #12]
 80052ba:	2200      	movs	r2, #0
 80052bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80052c0:	2301      	movs	r3, #1
 80052c2:	e029      	b.n	8005318 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80052c4:	f7fe f98e 	bl	80035e4 <HAL_GetTick>
 80052c8:	4602      	mov	r2, r0
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	1ad3      	subs	r3, r2, r3
 80052ce:	68ba      	ldr	r2, [r7, #8]
 80052d0:	429a      	cmp	r2, r3
 80052d2:	d302      	bcc.n	80052da <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80052d4:	68bb      	ldr	r3, [r7, #8]
 80052d6:	2b00      	cmp	r3, #0
 80052d8:	d116      	bne.n	8005308 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	2200      	movs	r2, #0
 80052de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	2220      	movs	r2, #32
 80052e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80052e8:	68fb      	ldr	r3, [r7, #12]
 80052ea:	2200      	movs	r2, #0
 80052ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052f4:	f043 0220 	orr.w	r2, r3, #32
 80052f8:	68fb      	ldr	r3, [r7, #12]
 80052fa:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2200      	movs	r2, #0
 8005300:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005304:	2301      	movs	r3, #1
 8005306:	e007      	b.n	8005318 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	695b      	ldr	r3, [r3, #20]
 800530e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005312:	2b40      	cmp	r3, #64	; 0x40
 8005314:	d1b5      	bne.n	8005282 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005316:	2300      	movs	r3, #0
}
 8005318:	4618      	mov	r0, r3
 800531a:	3710      	adds	r7, #16
 800531c:	46bd      	mov	sp, r7
 800531e:	bd80      	pop	{r7, pc}

08005320 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005320:	b480      	push	{r7}
 8005322:	b083      	sub	sp, #12
 8005324:	af00      	add	r7, sp, #0
 8005326:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	695b      	ldr	r3, [r3, #20]
 800532e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005332:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005336:	d11b      	bne.n	8005370 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005340:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005342:	687b      	ldr	r3, [r7, #4]
 8005344:	2200      	movs	r2, #0
 8005346:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005348:	687b      	ldr	r3, [r7, #4]
 800534a:	2220      	movs	r2, #32
 800534c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	2200      	movs	r2, #0
 8005354:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800535c:	f043 0204 	orr.w	r2, r3, #4
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2200      	movs	r2, #0
 8005368:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 800536c:	2301      	movs	r3, #1
 800536e:	e000      	b.n	8005372 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005370:	2300      	movs	r3, #0
}
 8005372:	4618      	mov	r0, r3
 8005374:	370c      	adds	r7, #12
 8005376:	46bd      	mov	sp, r7
 8005378:	f85d 7b04 	ldr.w	r7, [sp], #4
 800537c:	4770      	bx	lr
	...

08005380 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b086      	sub	sp, #24
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	2b00      	cmp	r3, #0
 800538c:	d101      	bne.n	8005392 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800538e:	2301      	movs	r3, #1
 8005390:	e267      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	681b      	ldr	r3, [r3, #0]
 8005396:	f003 0301 	and.w	r3, r3, #1
 800539a:	2b00      	cmp	r3, #0
 800539c:	d075      	beq.n	800548a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800539e:	4b88      	ldr	r3, [pc, #544]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053a0:	689b      	ldr	r3, [r3, #8]
 80053a2:	f003 030c 	and.w	r3, r3, #12
 80053a6:	2b04      	cmp	r3, #4
 80053a8:	d00c      	beq.n	80053c4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053aa:	4b85      	ldr	r3, [pc, #532]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80053b2:	2b08      	cmp	r3, #8
 80053b4:	d112      	bne.n	80053dc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80053b6:	4b82      	ldr	r3, [pc, #520]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053b8:	685b      	ldr	r3, [r3, #4]
 80053ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80053be:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80053c2:	d10b      	bne.n	80053dc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80053c4:	4b7e      	ldr	r3, [pc, #504]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053c6:	681b      	ldr	r3, [r3, #0]
 80053c8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80053cc:	2b00      	cmp	r3, #0
 80053ce:	d05b      	beq.n	8005488 <HAL_RCC_OscConfig+0x108>
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	685b      	ldr	r3, [r3, #4]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d157      	bne.n	8005488 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80053d8:	2301      	movs	r3, #1
 80053da:	e242      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80053e4:	d106      	bne.n	80053f4 <HAL_RCC_OscConfig+0x74>
 80053e6:	4b76      	ldr	r3, [pc, #472]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053e8:	681b      	ldr	r3, [r3, #0]
 80053ea:	4a75      	ldr	r2, [pc, #468]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80053ec:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80053f0:	6013      	str	r3, [r2, #0]
 80053f2:	e01d      	b.n	8005430 <HAL_RCC_OscConfig+0xb0>
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	685b      	ldr	r3, [r3, #4]
 80053f8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80053fc:	d10c      	bne.n	8005418 <HAL_RCC_OscConfig+0x98>
 80053fe:	4b70      	ldr	r3, [pc, #448]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005400:	681b      	ldr	r3, [r3, #0]
 8005402:	4a6f      	ldr	r2, [pc, #444]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005404:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005408:	6013      	str	r3, [r2, #0]
 800540a:	4b6d      	ldr	r3, [pc, #436]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800540c:	681b      	ldr	r3, [r3, #0]
 800540e:	4a6c      	ldr	r2, [pc, #432]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005410:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005414:	6013      	str	r3, [r2, #0]
 8005416:	e00b      	b.n	8005430 <HAL_RCC_OscConfig+0xb0>
 8005418:	4b69      	ldr	r3, [pc, #420]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800541a:	681b      	ldr	r3, [r3, #0]
 800541c:	4a68      	ldr	r2, [pc, #416]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800541e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005422:	6013      	str	r3, [r2, #0]
 8005424:	4b66      	ldr	r3, [pc, #408]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005426:	681b      	ldr	r3, [r3, #0]
 8005428:	4a65      	ldr	r2, [pc, #404]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800542a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800542e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005430:	687b      	ldr	r3, [r7, #4]
 8005432:	685b      	ldr	r3, [r3, #4]
 8005434:	2b00      	cmp	r3, #0
 8005436:	d013      	beq.n	8005460 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005438:	f7fe f8d4 	bl	80035e4 <HAL_GetTick>
 800543c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800543e:	e008      	b.n	8005452 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005440:	f7fe f8d0 	bl	80035e4 <HAL_GetTick>
 8005444:	4602      	mov	r2, r0
 8005446:	693b      	ldr	r3, [r7, #16]
 8005448:	1ad3      	subs	r3, r2, r3
 800544a:	2b64      	cmp	r3, #100	; 0x64
 800544c:	d901      	bls.n	8005452 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800544e:	2303      	movs	r3, #3
 8005450:	e207      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005452:	4b5b      	ldr	r3, [pc, #364]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005454:	681b      	ldr	r3, [r3, #0]
 8005456:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800545a:	2b00      	cmp	r3, #0
 800545c:	d0f0      	beq.n	8005440 <HAL_RCC_OscConfig+0xc0>
 800545e:	e014      	b.n	800548a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005460:	f7fe f8c0 	bl	80035e4 <HAL_GetTick>
 8005464:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005466:	e008      	b.n	800547a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005468:	f7fe f8bc 	bl	80035e4 <HAL_GetTick>
 800546c:	4602      	mov	r2, r0
 800546e:	693b      	ldr	r3, [r7, #16]
 8005470:	1ad3      	subs	r3, r2, r3
 8005472:	2b64      	cmp	r3, #100	; 0x64
 8005474:	d901      	bls.n	800547a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005476:	2303      	movs	r3, #3
 8005478:	e1f3      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800547a:	4b51      	ldr	r3, [pc, #324]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005482:	2b00      	cmp	r3, #0
 8005484:	d1f0      	bne.n	8005468 <HAL_RCC_OscConfig+0xe8>
 8005486:	e000      	b.n	800548a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005488:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	f003 0302 	and.w	r3, r3, #2
 8005492:	2b00      	cmp	r3, #0
 8005494:	d063      	beq.n	800555e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005496:	4b4a      	ldr	r3, [pc, #296]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005498:	689b      	ldr	r3, [r3, #8]
 800549a:	f003 030c 	and.w	r3, r3, #12
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d00b      	beq.n	80054ba <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054a2:	4b47      	ldr	r3, [pc, #284]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054a4:	689b      	ldr	r3, [r3, #8]
 80054a6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80054aa:	2b08      	cmp	r3, #8
 80054ac:	d11c      	bne.n	80054e8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80054ae:	4b44      	ldr	r3, [pc, #272]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054b6:	2b00      	cmp	r3, #0
 80054b8:	d116      	bne.n	80054e8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054ba:	4b41      	ldr	r3, [pc, #260]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f003 0302 	and.w	r3, r3, #2
 80054c2:	2b00      	cmp	r3, #0
 80054c4:	d005      	beq.n	80054d2 <HAL_RCC_OscConfig+0x152>
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	68db      	ldr	r3, [r3, #12]
 80054ca:	2b01      	cmp	r3, #1
 80054cc:	d001      	beq.n	80054d2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80054ce:	2301      	movs	r3, #1
 80054d0:	e1c7      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80054d2:	4b3b      	ldr	r3, [pc, #236]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	691b      	ldr	r3, [r3, #16]
 80054de:	00db      	lsls	r3, r3, #3
 80054e0:	4937      	ldr	r1, [pc, #220]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 80054e2:	4313      	orrs	r3, r2
 80054e4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80054e6:	e03a      	b.n	800555e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	68db      	ldr	r3, [r3, #12]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d020      	beq.n	8005532 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80054f0:	4b34      	ldr	r3, [pc, #208]	; (80055c4 <HAL_RCC_OscConfig+0x244>)
 80054f2:	2201      	movs	r2, #1
 80054f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80054f6:	f7fe f875 	bl	80035e4 <HAL_GetTick>
 80054fa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80054fc:	e008      	b.n	8005510 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80054fe:	f7fe f871 	bl	80035e4 <HAL_GetTick>
 8005502:	4602      	mov	r2, r0
 8005504:	693b      	ldr	r3, [r7, #16]
 8005506:	1ad3      	subs	r3, r2, r3
 8005508:	2b02      	cmp	r3, #2
 800550a:	d901      	bls.n	8005510 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800550c:	2303      	movs	r3, #3
 800550e:	e1a8      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005510:	4b2b      	ldr	r3, [pc, #172]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005512:	681b      	ldr	r3, [r3, #0]
 8005514:	f003 0302 	and.w	r3, r3, #2
 8005518:	2b00      	cmp	r3, #0
 800551a:	d0f0      	beq.n	80054fe <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800551c:	4b28      	ldr	r3, [pc, #160]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	691b      	ldr	r3, [r3, #16]
 8005528:	00db      	lsls	r3, r3, #3
 800552a:	4925      	ldr	r1, [pc, #148]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 800552c:	4313      	orrs	r3, r2
 800552e:	600b      	str	r3, [r1, #0]
 8005530:	e015      	b.n	800555e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005532:	4b24      	ldr	r3, [pc, #144]	; (80055c4 <HAL_RCC_OscConfig+0x244>)
 8005534:	2200      	movs	r2, #0
 8005536:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005538:	f7fe f854 	bl	80035e4 <HAL_GetTick>
 800553c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800553e:	e008      	b.n	8005552 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005540:	f7fe f850 	bl	80035e4 <HAL_GetTick>
 8005544:	4602      	mov	r2, r0
 8005546:	693b      	ldr	r3, [r7, #16]
 8005548:	1ad3      	subs	r3, r2, r3
 800554a:	2b02      	cmp	r3, #2
 800554c:	d901      	bls.n	8005552 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800554e:	2303      	movs	r3, #3
 8005550:	e187      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005552:	4b1b      	ldr	r3, [pc, #108]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f003 0302 	and.w	r3, r3, #2
 800555a:	2b00      	cmp	r3, #0
 800555c:	d1f0      	bne.n	8005540 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	f003 0308 	and.w	r3, r3, #8
 8005566:	2b00      	cmp	r3, #0
 8005568:	d036      	beq.n	80055d8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	695b      	ldr	r3, [r3, #20]
 800556e:	2b00      	cmp	r3, #0
 8005570:	d016      	beq.n	80055a0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005572:	4b15      	ldr	r3, [pc, #84]	; (80055c8 <HAL_RCC_OscConfig+0x248>)
 8005574:	2201      	movs	r2, #1
 8005576:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005578:	f7fe f834 	bl	80035e4 <HAL_GetTick>
 800557c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800557e:	e008      	b.n	8005592 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005580:	f7fe f830 	bl	80035e4 <HAL_GetTick>
 8005584:	4602      	mov	r2, r0
 8005586:	693b      	ldr	r3, [r7, #16]
 8005588:	1ad3      	subs	r3, r2, r3
 800558a:	2b02      	cmp	r3, #2
 800558c:	d901      	bls.n	8005592 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800558e:	2303      	movs	r3, #3
 8005590:	e167      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005592:	4b0b      	ldr	r3, [pc, #44]	; (80055c0 <HAL_RCC_OscConfig+0x240>)
 8005594:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005596:	f003 0302 	and.w	r3, r3, #2
 800559a:	2b00      	cmp	r3, #0
 800559c:	d0f0      	beq.n	8005580 <HAL_RCC_OscConfig+0x200>
 800559e:	e01b      	b.n	80055d8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80055a0:	4b09      	ldr	r3, [pc, #36]	; (80055c8 <HAL_RCC_OscConfig+0x248>)
 80055a2:	2200      	movs	r2, #0
 80055a4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80055a6:	f7fe f81d 	bl	80035e4 <HAL_GetTick>
 80055aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055ac:	e00e      	b.n	80055cc <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80055ae:	f7fe f819 	bl	80035e4 <HAL_GetTick>
 80055b2:	4602      	mov	r2, r0
 80055b4:	693b      	ldr	r3, [r7, #16]
 80055b6:	1ad3      	subs	r3, r2, r3
 80055b8:	2b02      	cmp	r3, #2
 80055ba:	d907      	bls.n	80055cc <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80055bc:	2303      	movs	r3, #3
 80055be:	e150      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
 80055c0:	40023800 	.word	0x40023800
 80055c4:	42470000 	.word	0x42470000
 80055c8:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80055cc:	4b88      	ldr	r3, [pc, #544]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80055d0:	f003 0302 	and.w	r3, r3, #2
 80055d4:	2b00      	cmp	r3, #0
 80055d6:	d1ea      	bne.n	80055ae <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	681b      	ldr	r3, [r3, #0]
 80055dc:	f003 0304 	and.w	r3, r3, #4
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	f000 8097 	beq.w	8005714 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80055e6:	2300      	movs	r3, #0
 80055e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80055ea:	4b81      	ldr	r3, [pc, #516]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d10f      	bne.n	8005616 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80055f6:	2300      	movs	r3, #0
 80055f8:	60bb      	str	r3, [r7, #8]
 80055fa:	4b7d      	ldr	r3, [pc, #500]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80055fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055fe:	4a7c      	ldr	r2, [pc, #496]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005600:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005604:	6413      	str	r3, [r2, #64]	; 0x40
 8005606:	4b7a      	ldr	r3, [pc, #488]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800560a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800560e:	60bb      	str	r3, [r7, #8]
 8005610:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005612:	2301      	movs	r3, #1
 8005614:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005616:	4b77      	ldr	r3, [pc, #476]	; (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800561e:	2b00      	cmp	r3, #0
 8005620:	d118      	bne.n	8005654 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005622:	4b74      	ldr	r3, [pc, #464]	; (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005624:	681b      	ldr	r3, [r3, #0]
 8005626:	4a73      	ldr	r2, [pc, #460]	; (80057f4 <HAL_RCC_OscConfig+0x474>)
 8005628:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800562c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800562e:	f7fd ffd9 	bl	80035e4 <HAL_GetTick>
 8005632:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005634:	e008      	b.n	8005648 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005636:	f7fd ffd5 	bl	80035e4 <HAL_GetTick>
 800563a:	4602      	mov	r2, r0
 800563c:	693b      	ldr	r3, [r7, #16]
 800563e:	1ad3      	subs	r3, r2, r3
 8005640:	2b02      	cmp	r3, #2
 8005642:	d901      	bls.n	8005648 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005644:	2303      	movs	r3, #3
 8005646:	e10c      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005648:	4b6a      	ldr	r3, [pc, #424]	; (80057f4 <HAL_RCC_OscConfig+0x474>)
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005650:	2b00      	cmp	r3, #0
 8005652:	d0f0      	beq.n	8005636 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	689b      	ldr	r3, [r3, #8]
 8005658:	2b01      	cmp	r3, #1
 800565a:	d106      	bne.n	800566a <HAL_RCC_OscConfig+0x2ea>
 800565c:	4b64      	ldr	r3, [pc, #400]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800565e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005660:	4a63      	ldr	r2, [pc, #396]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005662:	f043 0301 	orr.w	r3, r3, #1
 8005666:	6713      	str	r3, [r2, #112]	; 0x70
 8005668:	e01c      	b.n	80056a4 <HAL_RCC_OscConfig+0x324>
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	689b      	ldr	r3, [r3, #8]
 800566e:	2b05      	cmp	r3, #5
 8005670:	d10c      	bne.n	800568c <HAL_RCC_OscConfig+0x30c>
 8005672:	4b5f      	ldr	r3, [pc, #380]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005674:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005676:	4a5e      	ldr	r2, [pc, #376]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005678:	f043 0304 	orr.w	r3, r3, #4
 800567c:	6713      	str	r3, [r2, #112]	; 0x70
 800567e:	4b5c      	ldr	r3, [pc, #368]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005682:	4a5b      	ldr	r2, [pc, #364]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005684:	f043 0301 	orr.w	r3, r3, #1
 8005688:	6713      	str	r3, [r2, #112]	; 0x70
 800568a:	e00b      	b.n	80056a4 <HAL_RCC_OscConfig+0x324>
 800568c:	4b58      	ldr	r3, [pc, #352]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800568e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005690:	4a57      	ldr	r2, [pc, #348]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005692:	f023 0301 	bic.w	r3, r3, #1
 8005696:	6713      	str	r3, [r2, #112]	; 0x70
 8005698:	4b55      	ldr	r3, [pc, #340]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800569a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800569c:	4a54      	ldr	r2, [pc, #336]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800569e:	f023 0304 	bic.w	r3, r3, #4
 80056a2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	689b      	ldr	r3, [r3, #8]
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	d015      	beq.n	80056d8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80056ac:	f7fd ff9a 	bl	80035e4 <HAL_GetTick>
 80056b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056b2:	e00a      	b.n	80056ca <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056b4:	f7fd ff96 	bl	80035e4 <HAL_GetTick>
 80056b8:	4602      	mov	r2, r0
 80056ba:	693b      	ldr	r3, [r7, #16]
 80056bc:	1ad3      	subs	r3, r2, r3
 80056be:	f241 3288 	movw	r2, #5000	; 0x1388
 80056c2:	4293      	cmp	r3, r2
 80056c4:	d901      	bls.n	80056ca <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80056c6:	2303      	movs	r3, #3
 80056c8:	e0cb      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80056ca:	4b49      	ldr	r3, [pc, #292]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80056cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056ce:	f003 0302 	and.w	r3, r3, #2
 80056d2:	2b00      	cmp	r3, #0
 80056d4:	d0ee      	beq.n	80056b4 <HAL_RCC_OscConfig+0x334>
 80056d6:	e014      	b.n	8005702 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80056d8:	f7fd ff84 	bl	80035e4 <HAL_GetTick>
 80056dc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056de:	e00a      	b.n	80056f6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80056e0:	f7fd ff80 	bl	80035e4 <HAL_GetTick>
 80056e4:	4602      	mov	r2, r0
 80056e6:	693b      	ldr	r3, [r7, #16]
 80056e8:	1ad3      	subs	r3, r2, r3
 80056ea:	f241 3288 	movw	r2, #5000	; 0x1388
 80056ee:	4293      	cmp	r3, r2
 80056f0:	d901      	bls.n	80056f6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80056f2:	2303      	movs	r3, #3
 80056f4:	e0b5      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80056f6:	4b3e      	ldr	r3, [pc, #248]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80056f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80056fa:	f003 0302 	and.w	r3, r3, #2
 80056fe:	2b00      	cmp	r3, #0
 8005700:	d1ee      	bne.n	80056e0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005702:	7dfb      	ldrb	r3, [r7, #23]
 8005704:	2b01      	cmp	r3, #1
 8005706:	d105      	bne.n	8005714 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005708:	4b39      	ldr	r3, [pc, #228]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800570a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800570c:	4a38      	ldr	r2, [pc, #224]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 800570e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005712:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	699b      	ldr	r3, [r3, #24]
 8005718:	2b00      	cmp	r3, #0
 800571a:	f000 80a1 	beq.w	8005860 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800571e:	4b34      	ldr	r3, [pc, #208]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005720:	689b      	ldr	r3, [r3, #8]
 8005722:	f003 030c 	and.w	r3, r3, #12
 8005726:	2b08      	cmp	r3, #8
 8005728:	d05c      	beq.n	80057e4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	699b      	ldr	r3, [r3, #24]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d141      	bne.n	80057b6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005732:	4b31      	ldr	r3, [pc, #196]	; (80057f8 <HAL_RCC_OscConfig+0x478>)
 8005734:	2200      	movs	r2, #0
 8005736:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005738:	f7fd ff54 	bl	80035e4 <HAL_GetTick>
 800573c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800573e:	e008      	b.n	8005752 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005740:	f7fd ff50 	bl	80035e4 <HAL_GetTick>
 8005744:	4602      	mov	r2, r0
 8005746:	693b      	ldr	r3, [r7, #16]
 8005748:	1ad3      	subs	r3, r2, r3
 800574a:	2b02      	cmp	r3, #2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e087      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005752:	4b27      	ldr	r3, [pc, #156]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800575a:	2b00      	cmp	r3, #0
 800575c:	d1f0      	bne.n	8005740 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	69da      	ldr	r2, [r3, #28]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a1b      	ldr	r3, [r3, #32]
 8005766:	431a      	orrs	r2, r3
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576c:	019b      	lsls	r3, r3, #6
 800576e:	431a      	orrs	r2, r3
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005774:	085b      	lsrs	r3, r3, #1
 8005776:	3b01      	subs	r3, #1
 8005778:	041b      	lsls	r3, r3, #16
 800577a:	431a      	orrs	r2, r3
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005780:	061b      	lsls	r3, r3, #24
 8005782:	491b      	ldr	r1, [pc, #108]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 8005784:	4313      	orrs	r3, r2
 8005786:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005788:	4b1b      	ldr	r3, [pc, #108]	; (80057f8 <HAL_RCC_OscConfig+0x478>)
 800578a:	2201      	movs	r2, #1
 800578c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800578e:	f7fd ff29 	bl	80035e4 <HAL_GetTick>
 8005792:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005794:	e008      	b.n	80057a8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005796:	f7fd ff25 	bl	80035e4 <HAL_GetTick>
 800579a:	4602      	mov	r2, r0
 800579c:	693b      	ldr	r3, [r7, #16]
 800579e:	1ad3      	subs	r3, r2, r3
 80057a0:	2b02      	cmp	r3, #2
 80057a2:	d901      	bls.n	80057a8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80057a4:	2303      	movs	r3, #3
 80057a6:	e05c      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057a8:	4b11      	ldr	r3, [pc, #68]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d0f0      	beq.n	8005796 <HAL_RCC_OscConfig+0x416>
 80057b4:	e054      	b.n	8005860 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80057b6:	4b10      	ldr	r3, [pc, #64]	; (80057f8 <HAL_RCC_OscConfig+0x478>)
 80057b8:	2200      	movs	r2, #0
 80057ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80057bc:	f7fd ff12 	bl	80035e4 <HAL_GetTick>
 80057c0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057c2:	e008      	b.n	80057d6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80057c4:	f7fd ff0e 	bl	80035e4 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	693b      	ldr	r3, [r7, #16]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d901      	bls.n	80057d6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	e045      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80057d6:	4b06      	ldr	r3, [pc, #24]	; (80057f0 <HAL_RCC_OscConfig+0x470>)
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057de:	2b00      	cmp	r3, #0
 80057e0:	d1f0      	bne.n	80057c4 <HAL_RCC_OscConfig+0x444>
 80057e2:	e03d      	b.n	8005860 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	699b      	ldr	r3, [r3, #24]
 80057e8:	2b01      	cmp	r3, #1
 80057ea:	d107      	bne.n	80057fc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80057ec:	2301      	movs	r3, #1
 80057ee:	e038      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
 80057f0:	40023800 	.word	0x40023800
 80057f4:	40007000 	.word	0x40007000
 80057f8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80057fc:	4b1b      	ldr	r3, [pc, #108]	; (800586c <HAL_RCC_OscConfig+0x4ec>)
 80057fe:	685b      	ldr	r3, [r3, #4]
 8005800:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	699b      	ldr	r3, [r3, #24]
 8005806:	2b01      	cmp	r3, #1
 8005808:	d028      	beq.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005814:	429a      	cmp	r2, r3
 8005816:	d121      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005822:	429a      	cmp	r2, r3
 8005824:	d11a      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800582c:	4013      	ands	r3, r2
 800582e:	687a      	ldr	r2, [r7, #4]
 8005830:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005832:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005834:	4293      	cmp	r3, r2
 8005836:	d111      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005838:	68fb      	ldr	r3, [r7, #12]
 800583a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005842:	085b      	lsrs	r3, r3, #1
 8005844:	3b01      	subs	r3, #1
 8005846:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005848:	429a      	cmp	r2, r3
 800584a:	d107      	bne.n	800585c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800584c:	68fb      	ldr	r3, [r7, #12]
 800584e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005856:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005858:	429a      	cmp	r2, r3
 800585a:	d001      	beq.n	8005860 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800585c:	2301      	movs	r3, #1
 800585e:	e000      	b.n	8005862 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005860:	2300      	movs	r3, #0
}
 8005862:	4618      	mov	r0, r3
 8005864:	3718      	adds	r7, #24
 8005866:	46bd      	mov	sp, r7
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	40023800 	.word	0x40023800

08005870 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005870:	b580      	push	{r7, lr}
 8005872:	b084      	sub	sp, #16
 8005874:	af00      	add	r7, sp, #0
 8005876:	6078      	str	r0, [r7, #4]
 8005878:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800587a:	687b      	ldr	r3, [r7, #4]
 800587c:	2b00      	cmp	r3, #0
 800587e:	d101      	bne.n	8005884 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005880:	2301      	movs	r3, #1
 8005882:	e0cc      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005884:	4b68      	ldr	r3, [pc, #416]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	f003 0307 	and.w	r3, r3, #7
 800588c:	683a      	ldr	r2, [r7, #0]
 800588e:	429a      	cmp	r2, r3
 8005890:	d90c      	bls.n	80058ac <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005892:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005894:	683a      	ldr	r2, [r7, #0]
 8005896:	b2d2      	uxtb	r2, r2
 8005898:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800589a:	4b63      	ldr	r3, [pc, #396]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	f003 0307 	and.w	r3, r3, #7
 80058a2:	683a      	ldr	r2, [r7, #0]
 80058a4:	429a      	cmp	r2, r3
 80058a6:	d001      	beq.n	80058ac <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80058a8:	2301      	movs	r3, #1
 80058aa:	e0b8      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	681b      	ldr	r3, [r3, #0]
 80058b0:	f003 0302 	and.w	r3, r3, #2
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d020      	beq.n	80058fa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	681b      	ldr	r3, [r3, #0]
 80058bc:	f003 0304 	and.w	r3, r3, #4
 80058c0:	2b00      	cmp	r3, #0
 80058c2:	d005      	beq.n	80058d0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80058c4:	4b59      	ldr	r3, [pc, #356]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058c6:	689b      	ldr	r3, [r3, #8]
 80058c8:	4a58      	ldr	r2, [pc, #352]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ca:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80058ce:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f003 0308 	and.w	r3, r3, #8
 80058d8:	2b00      	cmp	r3, #0
 80058da:	d005      	beq.n	80058e8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80058dc:	4b53      	ldr	r3, [pc, #332]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058de:	689b      	ldr	r3, [r3, #8]
 80058e0:	4a52      	ldr	r2, [pc, #328]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058e2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80058e6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80058e8:	4b50      	ldr	r3, [pc, #320]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058ea:	689b      	ldr	r3, [r3, #8]
 80058ec:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	689b      	ldr	r3, [r3, #8]
 80058f4:	494d      	ldr	r1, [pc, #308]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80058f6:	4313      	orrs	r3, r2
 80058f8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80058fa:	687b      	ldr	r3, [r7, #4]
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 0301 	and.w	r3, r3, #1
 8005902:	2b00      	cmp	r3, #0
 8005904:	d044      	beq.n	8005990 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	2b01      	cmp	r3, #1
 800590c:	d107      	bne.n	800591e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800590e:	4b47      	ldr	r3, [pc, #284]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005916:	2b00      	cmp	r3, #0
 8005918:	d119      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800591a:	2301      	movs	r3, #1
 800591c:	e07f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	685b      	ldr	r3, [r3, #4]
 8005922:	2b02      	cmp	r3, #2
 8005924:	d003      	beq.n	800592e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800592a:	2b03      	cmp	r3, #3
 800592c:	d107      	bne.n	800593e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800592e:	4b3f      	ldr	r3, [pc, #252]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d109      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800593a:	2301      	movs	r3, #1
 800593c:	e06f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800593e:	4b3b      	ldr	r3, [pc, #236]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	f003 0302 	and.w	r3, r3, #2
 8005946:	2b00      	cmp	r3, #0
 8005948:	d101      	bne.n	800594e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800594a:	2301      	movs	r3, #1
 800594c:	e067      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800594e:	4b37      	ldr	r3, [pc, #220]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005950:	689b      	ldr	r3, [r3, #8]
 8005952:	f023 0203 	bic.w	r2, r3, #3
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	685b      	ldr	r3, [r3, #4]
 800595a:	4934      	ldr	r1, [pc, #208]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 800595c:	4313      	orrs	r3, r2
 800595e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005960:	f7fd fe40 	bl	80035e4 <HAL_GetTick>
 8005964:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005966:	e00a      	b.n	800597e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005968:	f7fd fe3c 	bl	80035e4 <HAL_GetTick>
 800596c:	4602      	mov	r2, r0
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	1ad3      	subs	r3, r2, r3
 8005972:	f241 3288 	movw	r2, #5000	; 0x1388
 8005976:	4293      	cmp	r3, r2
 8005978:	d901      	bls.n	800597e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800597a:	2303      	movs	r3, #3
 800597c:	e04f      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800597e:	4b2b      	ldr	r3, [pc, #172]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 8005980:	689b      	ldr	r3, [r3, #8]
 8005982:	f003 020c 	and.w	r2, r3, #12
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	685b      	ldr	r3, [r3, #4]
 800598a:	009b      	lsls	r3, r3, #2
 800598c:	429a      	cmp	r2, r3
 800598e:	d1eb      	bne.n	8005968 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005990:	4b25      	ldr	r3, [pc, #148]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f003 0307 	and.w	r3, r3, #7
 8005998:	683a      	ldr	r2, [r7, #0]
 800599a:	429a      	cmp	r2, r3
 800599c:	d20c      	bcs.n	80059b8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800599e:	4b22      	ldr	r3, [pc, #136]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a0:	683a      	ldr	r2, [r7, #0]
 80059a2:	b2d2      	uxtb	r2, r2
 80059a4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80059a6:	4b20      	ldr	r3, [pc, #128]	; (8005a28 <HAL_RCC_ClockConfig+0x1b8>)
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	f003 0307 	and.w	r3, r3, #7
 80059ae:	683a      	ldr	r2, [r7, #0]
 80059b0:	429a      	cmp	r2, r3
 80059b2:	d001      	beq.n	80059b8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80059b4:	2301      	movs	r3, #1
 80059b6:	e032      	b.n	8005a1e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	f003 0304 	and.w	r3, r3, #4
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d008      	beq.n	80059d6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80059c4:	4b19      	ldr	r3, [pc, #100]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059c6:	689b      	ldr	r3, [r3, #8]
 80059c8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	68db      	ldr	r3, [r3, #12]
 80059d0:	4916      	ldr	r1, [pc, #88]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059d2:	4313      	orrs	r3, r2
 80059d4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f003 0308 	and.w	r3, r3, #8
 80059de:	2b00      	cmp	r3, #0
 80059e0:	d009      	beq.n	80059f6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80059e2:	4b12      	ldr	r3, [pc, #72]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059e4:	689b      	ldr	r3, [r3, #8]
 80059e6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	691b      	ldr	r3, [r3, #16]
 80059ee:	00db      	lsls	r3, r3, #3
 80059f0:	490e      	ldr	r1, [pc, #56]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059f2:	4313      	orrs	r3, r2
 80059f4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80059f6:	f000 f821 	bl	8005a3c <HAL_RCC_GetSysClockFreq>
 80059fa:	4602      	mov	r2, r0
 80059fc:	4b0b      	ldr	r3, [pc, #44]	; (8005a2c <HAL_RCC_ClockConfig+0x1bc>)
 80059fe:	689b      	ldr	r3, [r3, #8]
 8005a00:	091b      	lsrs	r3, r3, #4
 8005a02:	f003 030f 	and.w	r3, r3, #15
 8005a06:	490a      	ldr	r1, [pc, #40]	; (8005a30 <HAL_RCC_ClockConfig+0x1c0>)
 8005a08:	5ccb      	ldrb	r3, [r1, r3]
 8005a0a:	fa22 f303 	lsr.w	r3, r2, r3
 8005a0e:	4a09      	ldr	r2, [pc, #36]	; (8005a34 <HAL_RCC_ClockConfig+0x1c4>)
 8005a10:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005a12:	4b09      	ldr	r3, [pc, #36]	; (8005a38 <HAL_RCC_ClockConfig+0x1c8>)
 8005a14:	681b      	ldr	r3, [r3, #0]
 8005a16:	4618      	mov	r0, r3
 8005a18:	f7fd fda0 	bl	800355c <HAL_InitTick>

  return HAL_OK;
 8005a1c:	2300      	movs	r3, #0
}
 8005a1e:	4618      	mov	r0, r3
 8005a20:	3710      	adds	r7, #16
 8005a22:	46bd      	mov	sp, r7
 8005a24:	bd80      	pop	{r7, pc}
 8005a26:	bf00      	nop
 8005a28:	40023c00 	.word	0x40023c00
 8005a2c:	40023800 	.word	0x40023800
 8005a30:	08008e38 	.word	0x08008e38
 8005a34:	20001448 	.word	0x20001448
 8005a38:	2000144c 	.word	0x2000144c

08005a3c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005a3c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a40:	b094      	sub	sp, #80	; 0x50
 8005a42:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005a44:	2300      	movs	r3, #0
 8005a46:	647b      	str	r3, [r7, #68]	; 0x44
 8005a48:	2300      	movs	r3, #0
 8005a4a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005a50:	2300      	movs	r3, #0
 8005a52:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005a54:	4b79      	ldr	r3, [pc, #484]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a56:	689b      	ldr	r3, [r3, #8]
 8005a58:	f003 030c 	and.w	r3, r3, #12
 8005a5c:	2b08      	cmp	r3, #8
 8005a5e:	d00d      	beq.n	8005a7c <HAL_RCC_GetSysClockFreq+0x40>
 8005a60:	2b08      	cmp	r3, #8
 8005a62:	f200 80e1 	bhi.w	8005c28 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005a66:	2b00      	cmp	r3, #0
 8005a68:	d002      	beq.n	8005a70 <HAL_RCC_GetSysClockFreq+0x34>
 8005a6a:	2b04      	cmp	r3, #4
 8005a6c:	d003      	beq.n	8005a76 <HAL_RCC_GetSysClockFreq+0x3a>
 8005a6e:	e0db      	b.n	8005c28 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005a70:	4b73      	ldr	r3, [pc, #460]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005a72:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005a74:	e0db      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005a76:	4b73      	ldr	r3, [pc, #460]	; (8005c44 <HAL_RCC_GetSysClockFreq+0x208>)
 8005a78:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005a7a:	e0d8      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005a7c:	4b6f      	ldr	r3, [pc, #444]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a7e:	685b      	ldr	r3, [r3, #4]
 8005a80:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005a84:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005a86:	4b6d      	ldr	r3, [pc, #436]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a88:	685b      	ldr	r3, [r3, #4]
 8005a8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d063      	beq.n	8005b5a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005a92:	4b6a      	ldr	r3, [pc, #424]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005a94:	685b      	ldr	r3, [r3, #4]
 8005a96:	099b      	lsrs	r3, r3, #6
 8005a98:	2200      	movs	r2, #0
 8005a9a:	63bb      	str	r3, [r7, #56]	; 0x38
 8005a9c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005a9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005aa0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005aa4:	633b      	str	r3, [r7, #48]	; 0x30
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	637b      	str	r3, [r7, #52]	; 0x34
 8005aaa:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8005aae:	4622      	mov	r2, r4
 8005ab0:	462b      	mov	r3, r5
 8005ab2:	f04f 0000 	mov.w	r0, #0
 8005ab6:	f04f 0100 	mov.w	r1, #0
 8005aba:	0159      	lsls	r1, r3, #5
 8005abc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005ac0:	0150      	lsls	r0, r2, #5
 8005ac2:	4602      	mov	r2, r0
 8005ac4:	460b      	mov	r3, r1
 8005ac6:	4621      	mov	r1, r4
 8005ac8:	1a51      	subs	r1, r2, r1
 8005aca:	6139      	str	r1, [r7, #16]
 8005acc:	4629      	mov	r1, r5
 8005ace:	eb63 0301 	sbc.w	r3, r3, r1
 8005ad2:	617b      	str	r3, [r7, #20]
 8005ad4:	f04f 0200 	mov.w	r2, #0
 8005ad8:	f04f 0300 	mov.w	r3, #0
 8005adc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ae0:	4659      	mov	r1, fp
 8005ae2:	018b      	lsls	r3, r1, #6
 8005ae4:	4651      	mov	r1, sl
 8005ae6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005aea:	4651      	mov	r1, sl
 8005aec:	018a      	lsls	r2, r1, #6
 8005aee:	4651      	mov	r1, sl
 8005af0:	ebb2 0801 	subs.w	r8, r2, r1
 8005af4:	4659      	mov	r1, fp
 8005af6:	eb63 0901 	sbc.w	r9, r3, r1
 8005afa:	f04f 0200 	mov.w	r2, #0
 8005afe:	f04f 0300 	mov.w	r3, #0
 8005b02:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b06:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b0a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b0e:	4690      	mov	r8, r2
 8005b10:	4699      	mov	r9, r3
 8005b12:	4623      	mov	r3, r4
 8005b14:	eb18 0303 	adds.w	r3, r8, r3
 8005b18:	60bb      	str	r3, [r7, #8]
 8005b1a:	462b      	mov	r3, r5
 8005b1c:	eb49 0303 	adc.w	r3, r9, r3
 8005b20:	60fb      	str	r3, [r7, #12]
 8005b22:	f04f 0200 	mov.w	r2, #0
 8005b26:	f04f 0300 	mov.w	r3, #0
 8005b2a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005b2e:	4629      	mov	r1, r5
 8005b30:	024b      	lsls	r3, r1, #9
 8005b32:	4621      	mov	r1, r4
 8005b34:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005b38:	4621      	mov	r1, r4
 8005b3a:	024a      	lsls	r2, r1, #9
 8005b3c:	4610      	mov	r0, r2
 8005b3e:	4619      	mov	r1, r3
 8005b40:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005b42:	2200      	movs	r2, #0
 8005b44:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b46:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005b48:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005b4c:	f7fa fb54 	bl	80001f8 <__aeabi_uldivmod>
 8005b50:	4602      	mov	r2, r0
 8005b52:	460b      	mov	r3, r1
 8005b54:	4613      	mov	r3, r2
 8005b56:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b58:	e058      	b.n	8005c0c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005b5a:	4b38      	ldr	r3, [pc, #224]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	099b      	lsrs	r3, r3, #6
 8005b60:	2200      	movs	r2, #0
 8005b62:	4618      	mov	r0, r3
 8005b64:	4611      	mov	r1, r2
 8005b66:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005b6a:	623b      	str	r3, [r7, #32]
 8005b6c:	2300      	movs	r3, #0
 8005b6e:	627b      	str	r3, [r7, #36]	; 0x24
 8005b70:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005b74:	4642      	mov	r2, r8
 8005b76:	464b      	mov	r3, r9
 8005b78:	f04f 0000 	mov.w	r0, #0
 8005b7c:	f04f 0100 	mov.w	r1, #0
 8005b80:	0159      	lsls	r1, r3, #5
 8005b82:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005b86:	0150      	lsls	r0, r2, #5
 8005b88:	4602      	mov	r2, r0
 8005b8a:	460b      	mov	r3, r1
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005b92:	4649      	mov	r1, r9
 8005b94:	eb63 0b01 	sbc.w	fp, r3, r1
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005ba4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005ba8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005bac:	ebb2 040a 	subs.w	r4, r2, sl
 8005bb0:	eb63 050b 	sbc.w	r5, r3, fp
 8005bb4:	f04f 0200 	mov.w	r2, #0
 8005bb8:	f04f 0300 	mov.w	r3, #0
 8005bbc:	00eb      	lsls	r3, r5, #3
 8005bbe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005bc2:	00e2      	lsls	r2, r4, #3
 8005bc4:	4614      	mov	r4, r2
 8005bc6:	461d      	mov	r5, r3
 8005bc8:	4643      	mov	r3, r8
 8005bca:	18e3      	adds	r3, r4, r3
 8005bcc:	603b      	str	r3, [r7, #0]
 8005bce:	464b      	mov	r3, r9
 8005bd0:	eb45 0303 	adc.w	r3, r5, r3
 8005bd4:	607b      	str	r3, [r7, #4]
 8005bd6:	f04f 0200 	mov.w	r2, #0
 8005bda:	f04f 0300 	mov.w	r3, #0
 8005bde:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005be2:	4629      	mov	r1, r5
 8005be4:	028b      	lsls	r3, r1, #10
 8005be6:	4621      	mov	r1, r4
 8005be8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005bec:	4621      	mov	r1, r4
 8005bee:	028a      	lsls	r2, r1, #10
 8005bf0:	4610      	mov	r0, r2
 8005bf2:	4619      	mov	r1, r3
 8005bf4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	61bb      	str	r3, [r7, #24]
 8005bfa:	61fa      	str	r2, [r7, #28]
 8005bfc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005c00:	f7fa fafa 	bl	80001f8 <__aeabi_uldivmod>
 8005c04:	4602      	mov	r2, r0
 8005c06:	460b      	mov	r3, r1
 8005c08:	4613      	mov	r3, r2
 8005c0a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005c0c:	4b0b      	ldr	r3, [pc, #44]	; (8005c3c <HAL_RCC_GetSysClockFreq+0x200>)
 8005c0e:	685b      	ldr	r3, [r3, #4]
 8005c10:	0c1b      	lsrs	r3, r3, #16
 8005c12:	f003 0303 	and.w	r3, r3, #3
 8005c16:	3301      	adds	r3, #1
 8005c18:	005b      	lsls	r3, r3, #1
 8005c1a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8005c1c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c1e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005c24:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c26:	e002      	b.n	8005c2e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005c28:	4b05      	ldr	r3, [pc, #20]	; (8005c40 <HAL_RCC_GetSysClockFreq+0x204>)
 8005c2a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8005c2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005c2e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005c30:	4618      	mov	r0, r3
 8005c32:	3750      	adds	r7, #80	; 0x50
 8005c34:	46bd      	mov	sp, r7
 8005c36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005c3a:	bf00      	nop
 8005c3c:	40023800 	.word	0x40023800
 8005c40:	00f42400 	.word	0x00f42400
 8005c44:	007a1200 	.word	0x007a1200

08005c48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005c48:	b480      	push	{r7}
 8005c4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005c4c:	4b03      	ldr	r3, [pc, #12]	; (8005c5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005c4e:	681b      	ldr	r3, [r3, #0]
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	46bd      	mov	sp, r7
 8005c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c58:	4770      	bx	lr
 8005c5a:	bf00      	nop
 8005c5c:	20001448 	.word	0x20001448

08005c60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005c60:	b580      	push	{r7, lr}
 8005c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005c64:	f7ff fff0 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c68:	4602      	mov	r2, r0
 8005c6a:	4b05      	ldr	r3, [pc, #20]	; (8005c80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005c6c:	689b      	ldr	r3, [r3, #8]
 8005c6e:	0a9b      	lsrs	r3, r3, #10
 8005c70:	f003 0307 	and.w	r3, r3, #7
 8005c74:	4903      	ldr	r1, [pc, #12]	; (8005c84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005c76:	5ccb      	ldrb	r3, [r1, r3]
 8005c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	bd80      	pop	{r7, pc}
 8005c80:	40023800 	.word	0x40023800
 8005c84:	08008e48 	.word	0x08008e48

08005c88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005c88:	b580      	push	{r7, lr}
 8005c8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005c8c:	f7ff ffdc 	bl	8005c48 <HAL_RCC_GetHCLKFreq>
 8005c90:	4602      	mov	r2, r0
 8005c92:	4b05      	ldr	r3, [pc, #20]	; (8005ca8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005c94:	689b      	ldr	r3, [r3, #8]
 8005c96:	0b5b      	lsrs	r3, r3, #13
 8005c98:	f003 0307 	and.w	r3, r3, #7
 8005c9c:	4903      	ldr	r1, [pc, #12]	; (8005cac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005c9e:	5ccb      	ldrb	r3, [r1, r3]
 8005ca0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005ca4:	4618      	mov	r0, r3
 8005ca6:	bd80      	pop	{r7, pc}
 8005ca8:	40023800 	.word	0x40023800
 8005cac:	08008e48 	.word	0x08008e48

08005cb0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b082      	sub	sp, #8
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e07b      	b.n	8005dba <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005cc6:	2b00      	cmp	r3, #0
 8005cc8:	d108      	bne.n	8005cdc <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	685b      	ldr	r3, [r3, #4]
 8005cce:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005cd2:	d009      	beq.n	8005ce8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	2200      	movs	r2, #0
 8005cd8:	61da      	str	r2, [r3, #28]
 8005cda:	e005      	b.n	8005ce8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	2200      	movs	r2, #0
 8005ce0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2200      	movs	r2, #0
 8005ce6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	2200      	movs	r2, #0
 8005cec:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005cf4:	b2db      	uxtb	r3, r3
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d106      	bne.n	8005d08 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d02:	6878      	ldr	r0, [r7, #4]
 8005d04:	f7fd f970 	bl	8002fe8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	2202      	movs	r2, #2
 8005d0c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005d10:	687b      	ldr	r3, [r7, #4]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	681a      	ldr	r2, [r3, #0]
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005d1e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005d20:	687b      	ldr	r3, [r7, #4]
 8005d22:	685b      	ldr	r3, [r3, #4]
 8005d24:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	689b      	ldr	r3, [r3, #8]
 8005d2c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005d30:	431a      	orrs	r2, r3
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	68db      	ldr	r3, [r3, #12]
 8005d36:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d3a:	431a      	orrs	r2, r3
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	691b      	ldr	r3, [r3, #16]
 8005d40:	f003 0302 	and.w	r3, r3, #2
 8005d44:	431a      	orrs	r2, r3
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	695b      	ldr	r3, [r3, #20]
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	431a      	orrs	r2, r3
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	699b      	ldr	r3, [r3, #24]
 8005d54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005d58:	431a      	orrs	r2, r3
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	69db      	ldr	r3, [r3, #28]
 8005d5e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005d62:	431a      	orrs	r2, r3
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	6a1b      	ldr	r3, [r3, #32]
 8005d68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d6c:	ea42 0103 	orr.w	r1, r2, r3
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d74:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	681b      	ldr	r3, [r3, #0]
 8005d7c:	430a      	orrs	r2, r1
 8005d7e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	699b      	ldr	r3, [r3, #24]
 8005d84:	0c1b      	lsrs	r3, r3, #16
 8005d86:	f003 0104 	and.w	r1, r3, #4
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d8e:	f003 0210 	and.w	r2, r3, #16
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	430a      	orrs	r2, r1
 8005d98:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	69da      	ldr	r2, [r3, #28]
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005da8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	2200      	movs	r2, #0
 8005dae:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2201      	movs	r2, #1
 8005db4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005db8:	2300      	movs	r3, #0
}
 8005dba:	4618      	mov	r0, r3
 8005dbc:	3708      	adds	r7, #8
 8005dbe:	46bd      	mov	sp, r7
 8005dc0:	bd80      	pop	{r7, pc}

08005dc2 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005dc2:	b580      	push	{r7, lr}
 8005dc4:	b088      	sub	sp, #32
 8005dc6:	af00      	add	r7, sp, #0
 8005dc8:	60f8      	str	r0, [r7, #12]
 8005dca:	60b9      	str	r1, [r7, #8]
 8005dcc:	603b      	str	r3, [r7, #0]
 8005dce:	4613      	mov	r3, r2
 8005dd0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8005dd6:	68fb      	ldr	r3, [r7, #12]
 8005dd8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8005ddc:	2b01      	cmp	r3, #1
 8005dde:	d101      	bne.n	8005de4 <HAL_SPI_Transmit+0x22>
 8005de0:	2302      	movs	r3, #2
 8005de2:	e126      	b.n	8006032 <HAL_SPI_Transmit+0x270>
 8005de4:	68fb      	ldr	r3, [r7, #12]
 8005de6:	2201      	movs	r2, #1
 8005de8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8005dec:	f7fd fbfa 	bl	80035e4 <HAL_GetTick>
 8005df0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8005df2:	88fb      	ldrh	r3, [r7, #6]
 8005df4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8005df6:	68fb      	ldr	r3, [r7, #12]
 8005df8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8005dfc:	b2db      	uxtb	r3, r3
 8005dfe:	2b01      	cmp	r3, #1
 8005e00:	d002      	beq.n	8005e08 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8005e02:	2302      	movs	r3, #2
 8005e04:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e06:	e10b      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8005e08:	68bb      	ldr	r3, [r7, #8]
 8005e0a:	2b00      	cmp	r3, #0
 8005e0c:	d002      	beq.n	8005e14 <HAL_SPI_Transmit+0x52>
 8005e0e:	88fb      	ldrh	r3, [r7, #6]
 8005e10:	2b00      	cmp	r3, #0
 8005e12:	d102      	bne.n	8005e1a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8005e14:	2301      	movs	r3, #1
 8005e16:	77fb      	strb	r3, [r7, #31]
    goto error;
 8005e18:	e102      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8005e1a:	68fb      	ldr	r3, [r7, #12]
 8005e1c:	2203      	movs	r2, #3
 8005e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8005e22:	68fb      	ldr	r3, [r7, #12]
 8005e24:	2200      	movs	r2, #0
 8005e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8005e28:	68fb      	ldr	r3, [r7, #12]
 8005e2a:	68ba      	ldr	r2, [r7, #8]
 8005e2c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8005e2e:	68fb      	ldr	r3, [r7, #12]
 8005e30:	88fa      	ldrh	r2, [r7, #6]
 8005e32:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	88fa      	ldrh	r2, [r7, #6]
 8005e38:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005e40:	68fb      	ldr	r3, [r7, #12]
 8005e42:	2200      	movs	r2, #0
 8005e44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	2200      	movs	r2, #0
 8005e4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	2200      	movs	r2, #0
 8005e50:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005e52:	68fb      	ldr	r3, [r7, #12]
 8005e54:	2200      	movs	r2, #0
 8005e56:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	689b      	ldr	r3, [r3, #8]
 8005e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005e60:	d10f      	bne.n	8005e82 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005e62:	68fb      	ldr	r3, [r7, #12]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	681a      	ldr	r2, [r3, #0]
 8005e68:	68fb      	ldr	r3, [r7, #12]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005e70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005e72:	68fb      	ldr	r3, [r7, #12]
 8005e74:	681b      	ldr	r3, [r3, #0]
 8005e76:	681a      	ldr	r2, [r3, #0]
 8005e78:	68fb      	ldr	r3, [r7, #12]
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e80:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005e82:	68fb      	ldr	r3, [r7, #12]
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005e8c:	2b40      	cmp	r3, #64	; 0x40
 8005e8e:	d007      	beq.n	8005ea0 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005e90:	68fb      	ldr	r3, [r7, #12]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681a      	ldr	r2, [r3, #0]
 8005e96:	68fb      	ldr	r3, [r7, #12]
 8005e98:	681b      	ldr	r3, [r3, #0]
 8005e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8005e9e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005ea0:	68fb      	ldr	r3, [r7, #12]
 8005ea2:	68db      	ldr	r3, [r3, #12]
 8005ea4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005ea8:	d14b      	bne.n	8005f42 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005eaa:	68fb      	ldr	r3, [r7, #12]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d002      	beq.n	8005eb8 <HAL_SPI_Transmit+0xf6>
 8005eb2:	8afb      	ldrh	r3, [r7, #22]
 8005eb4:	2b01      	cmp	r3, #1
 8005eb6:	d13e      	bne.n	8005f36 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eb8:	68fb      	ldr	r3, [r7, #12]
 8005eba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ebc:	881a      	ldrh	r2, [r3, #0]
 8005ebe:	68fb      	ldr	r3, [r7, #12]
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ec4:	68fb      	ldr	r3, [r7, #12]
 8005ec6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ec8:	1c9a      	adds	r2, r3, #2
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005ece:	68fb      	ldr	r3, [r7, #12]
 8005ed0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005ed2:	b29b      	uxth	r3, r3
 8005ed4:	3b01      	subs	r3, #1
 8005ed6:	b29a      	uxth	r2, r3
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8005edc:	e02b      	b.n	8005f36 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	689b      	ldr	r3, [r3, #8]
 8005ee4:	f003 0302 	and.w	r3, r3, #2
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d112      	bne.n	8005f12 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005eec:	68fb      	ldr	r3, [r7, #12]
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	881a      	ldrh	r2, [r3, #0]
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8005ef8:	68fb      	ldr	r3, [r7, #12]
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	1c9a      	adds	r2, r3, #2
 8005efe:	68fb      	ldr	r3, [r7, #12]
 8005f00:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f02:	68fb      	ldr	r3, [r7, #12]
 8005f04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f06:	b29b      	uxth	r3, r3
 8005f08:	3b01      	subs	r3, #1
 8005f0a:	b29a      	uxth	r2, r3
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	86da      	strh	r2, [r3, #54]	; 0x36
 8005f10:	e011      	b.n	8005f36 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005f12:	f7fd fb67 	bl	80035e4 <HAL_GetTick>
 8005f16:	4602      	mov	r2, r0
 8005f18:	69bb      	ldr	r3, [r7, #24]
 8005f1a:	1ad3      	subs	r3, r2, r3
 8005f1c:	683a      	ldr	r2, [r7, #0]
 8005f1e:	429a      	cmp	r2, r3
 8005f20:	d803      	bhi.n	8005f2a <HAL_SPI_Transmit+0x168>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005f28:	d102      	bne.n	8005f30 <HAL_SPI_Transmit+0x16e>
 8005f2a:	683b      	ldr	r3, [r7, #0]
 8005f2c:	2b00      	cmp	r3, #0
 8005f2e:	d102      	bne.n	8005f36 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005f30:	2303      	movs	r3, #3
 8005f32:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005f34:	e074      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d1ce      	bne.n	8005ede <HAL_SPI_Transmit+0x11c>
 8005f40:	e04c      	b.n	8005fdc <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005f42:	68fb      	ldr	r3, [r7, #12]
 8005f44:	685b      	ldr	r3, [r3, #4]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d002      	beq.n	8005f50 <HAL_SPI_Transmit+0x18e>
 8005f4a:	8afb      	ldrh	r3, [r7, #22]
 8005f4c:	2b01      	cmp	r3, #1
 8005f4e:	d140      	bne.n	8005fd2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f54:	68fb      	ldr	r3, [r7, #12]
 8005f56:	681b      	ldr	r3, [r3, #0]
 8005f58:	330c      	adds	r3, #12
 8005f5a:	7812      	ldrb	r2, [r2, #0]
 8005f5c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f5e:	68fb      	ldr	r3, [r7, #12]
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	1c5a      	adds	r2, r3, #1
 8005f64:	68fb      	ldr	r3, [r7, #12]
 8005f66:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	3b01      	subs	r3, #1
 8005f70:	b29a      	uxth	r2, r3
 8005f72:	68fb      	ldr	r3, [r7, #12]
 8005f74:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005f76:	e02c      	b.n	8005fd2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005f78:	68fb      	ldr	r3, [r7, #12]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	689b      	ldr	r3, [r3, #8]
 8005f7e:	f003 0302 	and.w	r3, r3, #2
 8005f82:	2b02      	cmp	r3, #2
 8005f84:	d113      	bne.n	8005fae <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005f8a:	68fb      	ldr	r3, [r7, #12]
 8005f8c:	681b      	ldr	r3, [r3, #0]
 8005f8e:	330c      	adds	r3, #12
 8005f90:	7812      	ldrb	r2, [r2, #0]
 8005f92:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f98:	1c5a      	adds	r2, r3, #1
 8005f9a:	68fb      	ldr	r3, [r7, #12]
 8005f9c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8005f9e:	68fb      	ldr	r3, [r7, #12]
 8005fa0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fa2:	b29b      	uxth	r3, r3
 8005fa4:	3b01      	subs	r3, #1
 8005fa6:	b29a      	uxth	r2, r3
 8005fa8:	68fb      	ldr	r3, [r7, #12]
 8005faa:	86da      	strh	r2, [r3, #54]	; 0x36
 8005fac:	e011      	b.n	8005fd2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8005fae:	f7fd fb19 	bl	80035e4 <HAL_GetTick>
 8005fb2:	4602      	mov	r2, r0
 8005fb4:	69bb      	ldr	r3, [r7, #24]
 8005fb6:	1ad3      	subs	r3, r2, r3
 8005fb8:	683a      	ldr	r2, [r7, #0]
 8005fba:	429a      	cmp	r2, r3
 8005fbc:	d803      	bhi.n	8005fc6 <HAL_SPI_Transmit+0x204>
 8005fbe:	683b      	ldr	r3, [r7, #0]
 8005fc0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005fc4:	d102      	bne.n	8005fcc <HAL_SPI_Transmit+0x20a>
 8005fc6:	683b      	ldr	r3, [r7, #0]
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d102      	bne.n	8005fd2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8005fcc:	2303      	movs	r3, #3
 8005fce:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005fd0:	e026      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005fd2:	68fb      	ldr	r3, [r7, #12]
 8005fd4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005fd6:	b29b      	uxth	r3, r3
 8005fd8:	2b00      	cmp	r3, #0
 8005fda:	d1cd      	bne.n	8005f78 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8005fdc:	69ba      	ldr	r2, [r7, #24]
 8005fde:	6839      	ldr	r1, [r7, #0]
 8005fe0:	68f8      	ldr	r0, [r7, #12]
 8005fe2:	f000 f8b3 	bl	800614c <SPI_EndRxTxTransaction>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d002      	beq.n	8005ff2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8005fec:	68fb      	ldr	r3, [r7, #12]
 8005fee:	2220      	movs	r2, #32
 8005ff0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	689b      	ldr	r3, [r3, #8]
 8005ff6:	2b00      	cmp	r3, #0
 8005ff8:	d10a      	bne.n	8006010 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8005ffa:	2300      	movs	r3, #0
 8005ffc:	613b      	str	r3, [r7, #16]
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681b      	ldr	r3, [r3, #0]
 8006002:	68db      	ldr	r3, [r3, #12]
 8006004:	613b      	str	r3, [r7, #16]
 8006006:	68fb      	ldr	r3, [r7, #12]
 8006008:	681b      	ldr	r3, [r3, #0]
 800600a:	689b      	ldr	r3, [r3, #8]
 800600c:	613b      	str	r3, [r7, #16]
 800600e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8006010:	68fb      	ldr	r3, [r7, #12]
 8006012:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006014:	2b00      	cmp	r3, #0
 8006016:	d002      	beq.n	800601e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8006018:	2301      	movs	r3, #1
 800601a:	77fb      	strb	r3, [r7, #31]
 800601c:	e000      	b.n	8006020 <HAL_SPI_Transmit+0x25e>
  }

error:
 800601e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8006020:	68fb      	ldr	r3, [r7, #12]
 8006022:	2201      	movs	r2, #1
 8006024:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	2200      	movs	r2, #0
 800602c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8006030:	7ffb      	ldrb	r3, [r7, #31]
}
 8006032:	4618      	mov	r0, r3
 8006034:	3720      	adds	r7, #32
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
	...

0800603c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	b088      	sub	sp, #32
 8006040:	af00      	add	r7, sp, #0
 8006042:	60f8      	str	r0, [r7, #12]
 8006044:	60b9      	str	r1, [r7, #8]
 8006046:	603b      	str	r3, [r7, #0]
 8006048:	4613      	mov	r3, r2
 800604a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800604c:	f7fd faca 	bl	80035e4 <HAL_GetTick>
 8006050:	4602      	mov	r2, r0
 8006052:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006054:	1a9b      	subs	r3, r3, r2
 8006056:	683a      	ldr	r2, [r7, #0]
 8006058:	4413      	add	r3, r2
 800605a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800605c:	f7fd fac2 	bl	80035e4 <HAL_GetTick>
 8006060:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8006062:	4b39      	ldr	r3, [pc, #228]	; (8006148 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	015b      	lsls	r3, r3, #5
 8006068:	0d1b      	lsrs	r3, r3, #20
 800606a:	69fa      	ldr	r2, [r7, #28]
 800606c:	fb02 f303 	mul.w	r3, r2, r3
 8006070:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8006072:	e054      	b.n	800611e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800607a:	d050      	beq.n	800611e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800607c:	f7fd fab2 	bl	80035e4 <HAL_GetTick>
 8006080:	4602      	mov	r2, r0
 8006082:	69bb      	ldr	r3, [r7, #24]
 8006084:	1ad3      	subs	r3, r2, r3
 8006086:	69fa      	ldr	r2, [r7, #28]
 8006088:	429a      	cmp	r2, r3
 800608a:	d902      	bls.n	8006092 <SPI_WaitFlagStateUntilTimeout+0x56>
 800608c:	69fb      	ldr	r3, [r7, #28]
 800608e:	2b00      	cmp	r3, #0
 8006090:	d13d      	bne.n	800610e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8006092:	68fb      	ldr	r3, [r7, #12]
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	685a      	ldr	r2, [r3, #4]
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80060a0:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80060a2:	68fb      	ldr	r3, [r7, #12]
 80060a4:	685b      	ldr	r3, [r3, #4]
 80060a6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80060aa:	d111      	bne.n	80060d0 <SPI_WaitFlagStateUntilTimeout+0x94>
 80060ac:	68fb      	ldr	r3, [r7, #12]
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80060b4:	d004      	beq.n	80060c0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80060b6:	68fb      	ldr	r3, [r7, #12]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80060be:	d107      	bne.n	80060d0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80060c0:	68fb      	ldr	r3, [r7, #12]
 80060c2:	681b      	ldr	r3, [r3, #0]
 80060c4:	681a      	ldr	r2, [r3, #0]
 80060c6:	68fb      	ldr	r3, [r7, #12]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80060ce:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80060d0:	68fb      	ldr	r3, [r7, #12]
 80060d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060d4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060d8:	d10f      	bne.n	80060fa <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80060da:	68fb      	ldr	r3, [r7, #12]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	681a      	ldr	r2, [r3, #0]
 80060e0:	68fb      	ldr	r3, [r7, #12]
 80060e2:	681b      	ldr	r3, [r3, #0]
 80060e4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80060e8:	601a      	str	r2, [r3, #0]
 80060ea:	68fb      	ldr	r3, [r7, #12]
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	681a      	ldr	r2, [r3, #0]
 80060f0:	68fb      	ldr	r3, [r7, #12]
 80060f2:	681b      	ldr	r3, [r3, #0]
 80060f4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80060f8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	2201      	movs	r2, #1
 80060fe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	2200      	movs	r2, #0
 8006106:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800610a:	2303      	movs	r3, #3
 800610c:	e017      	b.n	800613e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	2b00      	cmp	r3, #0
 8006112:	d101      	bne.n	8006118 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8006114:	2300      	movs	r3, #0
 8006116:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8006118:	697b      	ldr	r3, [r7, #20]
 800611a:	3b01      	subs	r3, #1
 800611c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800611e:	68fb      	ldr	r3, [r7, #12]
 8006120:	681b      	ldr	r3, [r3, #0]
 8006122:	689a      	ldr	r2, [r3, #8]
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	4013      	ands	r3, r2
 8006128:	68ba      	ldr	r2, [r7, #8]
 800612a:	429a      	cmp	r2, r3
 800612c:	bf0c      	ite	eq
 800612e:	2301      	moveq	r3, #1
 8006130:	2300      	movne	r3, #0
 8006132:	b2db      	uxtb	r3, r3
 8006134:	461a      	mov	r2, r3
 8006136:	79fb      	ldrb	r3, [r7, #7]
 8006138:	429a      	cmp	r2, r3
 800613a:	d19b      	bne.n	8006074 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800613c:	2300      	movs	r3, #0
}
 800613e:	4618      	mov	r0, r3
 8006140:	3720      	adds	r7, #32
 8006142:	46bd      	mov	sp, r7
 8006144:	bd80      	pop	{r7, pc}
 8006146:	bf00      	nop
 8006148:	20001448 	.word	0x20001448

0800614c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800614c:	b580      	push	{r7, lr}
 800614e:	b088      	sub	sp, #32
 8006150:	af02      	add	r7, sp, #8
 8006152:	60f8      	str	r0, [r7, #12]
 8006154:	60b9      	str	r1, [r7, #8]
 8006156:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8006158:	4b1b      	ldr	r3, [pc, #108]	; (80061c8 <SPI_EndRxTxTransaction+0x7c>)
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	4a1b      	ldr	r2, [pc, #108]	; (80061cc <SPI_EndRxTxTransaction+0x80>)
 800615e:	fba2 2303 	umull	r2, r3, r2, r3
 8006162:	0d5b      	lsrs	r3, r3, #21
 8006164:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8006168:	fb02 f303 	mul.w	r3, r2, r3
 800616c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800616e:	68fb      	ldr	r3, [r7, #12]
 8006170:	685b      	ldr	r3, [r3, #4]
 8006172:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8006176:	d112      	bne.n	800619e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8006178:	687b      	ldr	r3, [r7, #4]
 800617a:	9300      	str	r3, [sp, #0]
 800617c:	68bb      	ldr	r3, [r7, #8]
 800617e:	2200      	movs	r2, #0
 8006180:	2180      	movs	r1, #128	; 0x80
 8006182:	68f8      	ldr	r0, [r7, #12]
 8006184:	f7ff ff5a 	bl	800603c <SPI_WaitFlagStateUntilTimeout>
 8006188:	4603      	mov	r3, r0
 800618a:	2b00      	cmp	r3, #0
 800618c:	d016      	beq.n	80061bc <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006192:	f043 0220 	orr.w	r2, r3, #32
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800619a:	2303      	movs	r3, #3
 800619c:	e00f      	b.n	80061be <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800619e:	697b      	ldr	r3, [r7, #20]
 80061a0:	2b00      	cmp	r3, #0
 80061a2:	d00a      	beq.n	80061ba <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80061a4:	697b      	ldr	r3, [r7, #20]
 80061a6:	3b01      	subs	r3, #1
 80061a8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80061aa:	68fb      	ldr	r3, [r7, #12]
 80061ac:	681b      	ldr	r3, [r3, #0]
 80061ae:	689b      	ldr	r3, [r3, #8]
 80061b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80061b4:	2b80      	cmp	r3, #128	; 0x80
 80061b6:	d0f2      	beq.n	800619e <SPI_EndRxTxTransaction+0x52>
 80061b8:	e000      	b.n	80061bc <SPI_EndRxTxTransaction+0x70>
        break;
 80061ba:	bf00      	nop
  }

  return HAL_OK;
 80061bc:	2300      	movs	r3, #0
}
 80061be:	4618      	mov	r0, r3
 80061c0:	3718      	adds	r7, #24
 80061c2:	46bd      	mov	sp, r7
 80061c4:	bd80      	pop	{r7, pc}
 80061c6:	bf00      	nop
 80061c8:	20001448 	.word	0x20001448
 80061cc:	165e9f81 	.word	0x165e9f81

080061d0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b082      	sub	sp, #8
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	2b00      	cmp	r3, #0
 80061dc:	d101      	bne.n	80061e2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80061de:	2301      	movs	r3, #1
 80061e0:	e041      	b.n	8006266 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061e8:	b2db      	uxtb	r3, r3
 80061ea:	2b00      	cmp	r3, #0
 80061ec:	d106      	bne.n	80061fc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80061ee:	687b      	ldr	r3, [r7, #4]
 80061f0:	2200      	movs	r2, #0
 80061f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80061f6:	6878      	ldr	r0, [r7, #4]
 80061f8:	f7fc ff5e 	bl	80030b8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2202      	movs	r2, #2
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	681a      	ldr	r2, [r3, #0]
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	3304      	adds	r3, #4
 800620c:	4619      	mov	r1, r3
 800620e:	4610      	mov	r0, r2
 8006210:	f000 ff6c 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2201      	movs	r2, #1
 8006218:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2201      	movs	r2, #1
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	2201      	movs	r2, #1
 8006228:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	2201      	movs	r2, #1
 8006230:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2201      	movs	r2, #1
 8006238:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	2201      	movs	r2, #1
 8006240:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	2201      	movs	r2, #1
 8006248:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800624c:	687b      	ldr	r3, [r7, #4]
 800624e:	2201      	movs	r2, #1
 8006250:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006254:	687b      	ldr	r3, [r7, #4]
 8006256:	2201      	movs	r2, #1
 8006258:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2201      	movs	r2, #1
 8006260:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006264:	2300      	movs	r3, #0
}
 8006266:	4618      	mov	r0, r3
 8006268:	3708      	adds	r7, #8
 800626a:	46bd      	mov	sp, r7
 800626c:	bd80      	pop	{r7, pc}
	...

08006270 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006270:	b480      	push	{r7}
 8006272:	b085      	sub	sp, #20
 8006274:	af00      	add	r7, sp, #0
 8006276:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627e:	b2db      	uxtb	r3, r3
 8006280:	2b01      	cmp	r3, #1
 8006282:	d001      	beq.n	8006288 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006284:	2301      	movs	r3, #1
 8006286:	e044      	b.n	8006312 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	2202      	movs	r2, #2
 800628c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	68da      	ldr	r2, [r3, #12]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	f042 0201 	orr.w	r2, r2, #1
 800629e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	681b      	ldr	r3, [r3, #0]
 80062a4:	4a1e      	ldr	r2, [pc, #120]	; (8006320 <HAL_TIM_Base_Start_IT+0xb0>)
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d018      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x6c>
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062b2:	d013      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x6c>
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	4a1a      	ldr	r2, [pc, #104]	; (8006324 <HAL_TIM_Base_Start_IT+0xb4>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d00e      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x6c>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	681b      	ldr	r3, [r3, #0]
 80062c2:	4a19      	ldr	r2, [pc, #100]	; (8006328 <HAL_TIM_Base_Start_IT+0xb8>)
 80062c4:	4293      	cmp	r3, r2
 80062c6:	d009      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x6c>
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	681b      	ldr	r3, [r3, #0]
 80062cc:	4a17      	ldr	r2, [pc, #92]	; (800632c <HAL_TIM_Base_Start_IT+0xbc>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d004      	beq.n	80062dc <HAL_TIM_Base_Start_IT+0x6c>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	681b      	ldr	r3, [r3, #0]
 80062d6:	4a16      	ldr	r2, [pc, #88]	; (8006330 <HAL_TIM_Base_Start_IT+0xc0>)
 80062d8:	4293      	cmp	r3, r2
 80062da:	d111      	bne.n	8006300 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	689b      	ldr	r3, [r3, #8]
 80062e2:	f003 0307 	and.w	r3, r3, #7
 80062e6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062e8:	68fb      	ldr	r3, [r7, #12]
 80062ea:	2b06      	cmp	r3, #6
 80062ec:	d010      	beq.n	8006310 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	681a      	ldr	r2, [r3, #0]
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	f042 0201 	orr.w	r2, r2, #1
 80062fc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80062fe:	e007      	b.n	8006310 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006300:	687b      	ldr	r3, [r7, #4]
 8006302:	681b      	ldr	r3, [r3, #0]
 8006304:	681a      	ldr	r2, [r3, #0]
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f042 0201 	orr.w	r2, r2, #1
 800630e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006310:	2300      	movs	r3, #0
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800631c:	4770      	bx	lr
 800631e:	bf00      	nop
 8006320:	40010000 	.word	0x40010000
 8006324:	40000400 	.word	0x40000400
 8006328:	40000800 	.word	0x40000800
 800632c:	40000c00 	.word	0x40000c00
 8006330:	40014000 	.word	0x40014000

08006334 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b082      	sub	sp, #8
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800633c:	687b      	ldr	r3, [r7, #4]
 800633e:	2b00      	cmp	r3, #0
 8006340:	d101      	bne.n	8006346 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8006342:	2301      	movs	r3, #1
 8006344:	e041      	b.n	80063ca <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634c:	b2db      	uxtb	r3, r3
 800634e:	2b00      	cmp	r3, #0
 8006350:	d106      	bne.n	8006360 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	2200      	movs	r2, #0
 8006356:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800635a:	6878      	ldr	r0, [r7, #4]
 800635c:	f7fc ff44 	bl	80031e8 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006360:	687b      	ldr	r3, [r7, #4]
 8006362:	2202      	movs	r2, #2
 8006364:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	3304      	adds	r3, #4
 8006370:	4619      	mov	r1, r3
 8006372:	4610      	mov	r0, r2
 8006374:	f000 feba 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2201      	movs	r2, #1
 800637c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2201      	movs	r2, #1
 8006384:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	2201      	movs	r2, #1
 800638c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2201      	movs	r2, #1
 8006394:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	2201      	movs	r2, #1
 800639c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	2201      	movs	r2, #1
 80063a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80063a8:	687b      	ldr	r3, [r7, #4]
 80063aa:	2201      	movs	r2, #1
 80063ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	2201      	movs	r2, #1
 80063b4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	2201      	movs	r2, #1
 80063bc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	2201      	movs	r2, #1
 80063c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80063c8:	2300      	movs	r3, #0
}
 80063ca:	4618      	mov	r0, r3
 80063cc:	3708      	adds	r7, #8
 80063ce:	46bd      	mov	sp, r7
 80063d0:	bd80      	pop	{r7, pc}
	...

080063d4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80063d4:	b580      	push	{r7, lr}
 80063d6:	b084      	sub	sp, #16
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
 80063dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	2b00      	cmp	r3, #0
 80063e2:	d109      	bne.n	80063f8 <HAL_TIM_PWM_Start+0x24>
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80063ea:	b2db      	uxtb	r3, r3
 80063ec:	2b01      	cmp	r3, #1
 80063ee:	bf14      	ite	ne
 80063f0:	2301      	movne	r3, #1
 80063f2:	2300      	moveq	r3, #0
 80063f4:	b2db      	uxtb	r3, r3
 80063f6:	e022      	b.n	800643e <HAL_TIM_PWM_Start+0x6a>
 80063f8:	683b      	ldr	r3, [r7, #0]
 80063fa:	2b04      	cmp	r3, #4
 80063fc:	d109      	bne.n	8006412 <HAL_TIM_PWM_Start+0x3e>
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006404:	b2db      	uxtb	r3, r3
 8006406:	2b01      	cmp	r3, #1
 8006408:	bf14      	ite	ne
 800640a:	2301      	movne	r3, #1
 800640c:	2300      	moveq	r3, #0
 800640e:	b2db      	uxtb	r3, r3
 8006410:	e015      	b.n	800643e <HAL_TIM_PWM_Start+0x6a>
 8006412:	683b      	ldr	r3, [r7, #0]
 8006414:	2b08      	cmp	r3, #8
 8006416:	d109      	bne.n	800642c <HAL_TIM_PWM_Start+0x58>
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800641e:	b2db      	uxtb	r3, r3
 8006420:	2b01      	cmp	r3, #1
 8006422:	bf14      	ite	ne
 8006424:	2301      	movne	r3, #1
 8006426:	2300      	moveq	r3, #0
 8006428:	b2db      	uxtb	r3, r3
 800642a:	e008      	b.n	800643e <HAL_TIM_PWM_Start+0x6a>
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b01      	cmp	r3, #1
 8006436:	bf14      	ite	ne
 8006438:	2301      	movne	r3, #1
 800643a:	2300      	moveq	r3, #0
 800643c:	b2db      	uxtb	r3, r3
 800643e:	2b00      	cmp	r3, #0
 8006440:	d001      	beq.n	8006446 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006442:	2301      	movs	r3, #1
 8006444:	e068      	b.n	8006518 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006446:	683b      	ldr	r3, [r7, #0]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d104      	bne.n	8006456 <HAL_TIM_PWM_Start+0x82>
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	2202      	movs	r2, #2
 8006450:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006454:	e013      	b.n	800647e <HAL_TIM_PWM_Start+0xaa>
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	2b04      	cmp	r3, #4
 800645a:	d104      	bne.n	8006466 <HAL_TIM_PWM_Start+0x92>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	2202      	movs	r2, #2
 8006460:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006464:	e00b      	b.n	800647e <HAL_TIM_PWM_Start+0xaa>
 8006466:	683b      	ldr	r3, [r7, #0]
 8006468:	2b08      	cmp	r3, #8
 800646a:	d104      	bne.n	8006476 <HAL_TIM_PWM_Start+0xa2>
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2202      	movs	r2, #2
 8006470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006474:	e003      	b.n	800647e <HAL_TIM_PWM_Start+0xaa>
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	2202      	movs	r2, #2
 800647a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800647e:	687b      	ldr	r3, [r7, #4]
 8006480:	681b      	ldr	r3, [r3, #0]
 8006482:	2201      	movs	r2, #1
 8006484:	6839      	ldr	r1, [r7, #0]
 8006486:	4618      	mov	r0, r3
 8006488:	f001 f9f4 	bl	8007874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	4a23      	ldr	r2, [pc, #140]	; (8006520 <HAL_TIM_PWM_Start+0x14c>)
 8006492:	4293      	cmp	r3, r2
 8006494:	d107      	bne.n	80064a6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006496:	687b      	ldr	r3, [r7, #4]
 8006498:	681b      	ldr	r3, [r3, #0]
 800649a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	681b      	ldr	r3, [r3, #0]
 80064a0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064a4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	4a1d      	ldr	r2, [pc, #116]	; (8006520 <HAL_TIM_PWM_Start+0x14c>)
 80064ac:	4293      	cmp	r3, r2
 80064ae:	d018      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x10e>
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	681b      	ldr	r3, [r3, #0]
 80064b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80064b8:	d013      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x10e>
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	4a19      	ldr	r2, [pc, #100]	; (8006524 <HAL_TIM_PWM_Start+0x150>)
 80064c0:	4293      	cmp	r3, r2
 80064c2:	d00e      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x10e>
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	4a17      	ldr	r2, [pc, #92]	; (8006528 <HAL_TIM_PWM_Start+0x154>)
 80064ca:	4293      	cmp	r3, r2
 80064cc:	d009      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x10e>
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	681b      	ldr	r3, [r3, #0]
 80064d2:	4a16      	ldr	r2, [pc, #88]	; (800652c <HAL_TIM_PWM_Start+0x158>)
 80064d4:	4293      	cmp	r3, r2
 80064d6:	d004      	beq.n	80064e2 <HAL_TIM_PWM_Start+0x10e>
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	4a14      	ldr	r2, [pc, #80]	; (8006530 <HAL_TIM_PWM_Start+0x15c>)
 80064de:	4293      	cmp	r3, r2
 80064e0:	d111      	bne.n	8006506 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	689b      	ldr	r3, [r3, #8]
 80064e8:	f003 0307 	and.w	r3, r3, #7
 80064ec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	2b06      	cmp	r3, #6
 80064f2:	d010      	beq.n	8006516 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	681a      	ldr	r2, [r3, #0]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f042 0201 	orr.w	r2, r2, #1
 8006502:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006504:	e007      	b.n	8006516 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	681a      	ldr	r2, [r3, #0]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f042 0201 	orr.w	r2, r2, #1
 8006514:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006516:	2300      	movs	r3, #0
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	bd80      	pop	{r7, pc}
 8006520:	40010000 	.word	0x40010000
 8006524:	40000400 	.word	0x40000400
 8006528:	40000800 	.word	0x40000800
 800652c:	40000c00 	.word	0x40000c00
 8006530:	40014000 	.word	0x40014000

08006534 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006534:	b580      	push	{r7, lr}
 8006536:	b082      	sub	sp, #8
 8006538:	af00      	add	r7, sp, #0
 800653a:	6078      	str	r0, [r7, #4]
 800653c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2200      	movs	r2, #0
 8006544:	6839      	ldr	r1, [r7, #0]
 8006546:	4618      	mov	r0, r3
 8006548:	f001 f994 	bl	8007874 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	681b      	ldr	r3, [r3, #0]
 8006550:	4a29      	ldr	r2, [pc, #164]	; (80065f8 <HAL_TIM_PWM_Stop+0xc4>)
 8006552:	4293      	cmp	r3, r2
 8006554:	d117      	bne.n	8006586 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	6a1a      	ldr	r2, [r3, #32]
 800655c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006560:	4013      	ands	r3, r2
 8006562:	2b00      	cmp	r3, #0
 8006564:	d10f      	bne.n	8006586 <HAL_TIM_PWM_Stop+0x52>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	6a1a      	ldr	r2, [r3, #32]
 800656c:	f240 4344 	movw	r3, #1092	; 0x444
 8006570:	4013      	ands	r3, r2
 8006572:	2b00      	cmp	r3, #0
 8006574:	d107      	bne.n	8006586 <HAL_TIM_PWM_Stop+0x52>
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	681b      	ldr	r3, [r3, #0]
 800657a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006584:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	6a1a      	ldr	r2, [r3, #32]
 800658c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006590:	4013      	ands	r3, r2
 8006592:	2b00      	cmp	r3, #0
 8006594:	d10f      	bne.n	80065b6 <HAL_TIM_PWM_Stop+0x82>
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	6a1a      	ldr	r2, [r3, #32]
 800659c:	f240 4344 	movw	r3, #1092	; 0x444
 80065a0:	4013      	ands	r3, r2
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d107      	bne.n	80065b6 <HAL_TIM_PWM_Stop+0x82>
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	681a      	ldr	r2, [r3, #0]
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	681b      	ldr	r3, [r3, #0]
 80065b0:	f022 0201 	bic.w	r2, r2, #1
 80065b4:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80065b6:	683b      	ldr	r3, [r7, #0]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d104      	bne.n	80065c6 <HAL_TIM_PWM_Stop+0x92>
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2201      	movs	r2, #1
 80065c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065c4:	e013      	b.n	80065ee <HAL_TIM_PWM_Stop+0xba>
 80065c6:	683b      	ldr	r3, [r7, #0]
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d104      	bne.n	80065d6 <HAL_TIM_PWM_Stop+0xa2>
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	2201      	movs	r2, #1
 80065d0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065d4:	e00b      	b.n	80065ee <HAL_TIM_PWM_Stop+0xba>
 80065d6:	683b      	ldr	r3, [r7, #0]
 80065d8:	2b08      	cmp	r3, #8
 80065da:	d104      	bne.n	80065e6 <HAL_TIM_PWM_Stop+0xb2>
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065e4:	e003      	b.n	80065ee <HAL_TIM_PWM_Stop+0xba>
 80065e6:	687b      	ldr	r3, [r7, #4]
 80065e8:	2201      	movs	r2, #1
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80065ee:	2300      	movs	r3, #0
}
 80065f0:	4618      	mov	r0, r3
 80065f2:	3708      	adds	r7, #8
 80065f4:	46bd      	mov	sp, r7
 80065f6:	bd80      	pop	{r7, pc}
 80065f8:	40010000 	.word	0x40010000

080065fc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b082      	sub	sp, #8
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d101      	bne.n	800660e <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800660a:	2301      	movs	r3, #1
 800660c:	e041      	b.n	8006692 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006614:	b2db      	uxtb	r3, r3
 8006616:	2b00      	cmp	r3, #0
 8006618:	d106      	bne.n	8006628 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800661a:	687b      	ldr	r3, [r7, #4]
 800661c:	2200      	movs	r2, #0
 800661e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8006622:	6878      	ldr	r0, [r7, #4]
 8006624:	f000 f839 	bl	800669a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2202      	movs	r2, #2
 800662c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681a      	ldr	r2, [r3, #0]
 8006634:	687b      	ldr	r3, [r7, #4]
 8006636:	3304      	adds	r3, #4
 8006638:	4619      	mov	r1, r3
 800663a:	4610      	mov	r0, r2
 800663c:	f000 fd56 	bl	80070ec <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2201      	movs	r2, #1
 800667c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2201      	movs	r2, #1
 8006684:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	2201      	movs	r2, #1
 800668c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006690:	2300      	movs	r3, #0
}
 8006692:	4618      	mov	r0, r3
 8006694:	3708      	adds	r7, #8
 8006696:	46bd      	mov	sp, r7
 8006698:	bd80      	pop	{r7, pc}

0800669a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800669a:	b480      	push	{r7}
 800669c:	b083      	sub	sp, #12
 800669e:	af00      	add	r7, sp, #0
 80066a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80066a2:	bf00      	nop
 80066a4:	370c      	adds	r7, #12
 80066a6:	46bd      	mov	sp, r7
 80066a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ac:	4770      	bx	lr
	...

080066b0 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80066b0:	b580      	push	{r7, lr}
 80066b2:	b084      	sub	sp, #16
 80066b4:	af00      	add	r7, sp, #0
 80066b6:	6078      	str	r0, [r7, #4]
 80066b8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066ba:	2300      	movs	r3, #0
 80066bc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	2b00      	cmp	r3, #0
 80066c2:	d104      	bne.n	80066ce <HAL_TIM_IC_Start_IT+0x1e>
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	e013      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0x46>
 80066ce:	683b      	ldr	r3, [r7, #0]
 80066d0:	2b04      	cmp	r3, #4
 80066d2:	d104      	bne.n	80066de <HAL_TIM_IC_Start_IT+0x2e>
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066da:	b2db      	uxtb	r3, r3
 80066dc:	e00b      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0x46>
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	2b08      	cmp	r3, #8
 80066e2:	d104      	bne.n	80066ee <HAL_TIM_IC_Start_IT+0x3e>
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066ea:	b2db      	uxtb	r3, r3
 80066ec:	e003      	b.n	80066f6 <HAL_TIM_IC_Start_IT+0x46>
 80066ee:	687b      	ldr	r3, [r7, #4]
 80066f0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066f4:	b2db      	uxtb	r3, r3
 80066f6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80066f8:	683b      	ldr	r3, [r7, #0]
 80066fa:	2b00      	cmp	r3, #0
 80066fc:	d104      	bne.n	8006708 <HAL_TIM_IC_Start_IT+0x58>
 80066fe:	687b      	ldr	r3, [r7, #4]
 8006700:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006704:	b2db      	uxtb	r3, r3
 8006706:	e013      	b.n	8006730 <HAL_TIM_IC_Start_IT+0x80>
 8006708:	683b      	ldr	r3, [r7, #0]
 800670a:	2b04      	cmp	r3, #4
 800670c:	d104      	bne.n	8006718 <HAL_TIM_IC_Start_IT+0x68>
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006714:	b2db      	uxtb	r3, r3
 8006716:	e00b      	b.n	8006730 <HAL_TIM_IC_Start_IT+0x80>
 8006718:	683b      	ldr	r3, [r7, #0]
 800671a:	2b08      	cmp	r3, #8
 800671c:	d104      	bne.n	8006728 <HAL_TIM_IC_Start_IT+0x78>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006724:	b2db      	uxtb	r3, r3
 8006726:	e003      	b.n	8006730 <HAL_TIM_IC_Start_IT+0x80>
 8006728:	687b      	ldr	r3, [r7, #4]
 800672a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800672e:	b2db      	uxtb	r3, r3
 8006730:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8006732:	7bbb      	ldrb	r3, [r7, #14]
 8006734:	2b01      	cmp	r3, #1
 8006736:	d102      	bne.n	800673e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8006738:	7b7b      	ldrb	r3, [r7, #13]
 800673a:	2b01      	cmp	r3, #1
 800673c:	d001      	beq.n	8006742 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 800673e:	2301      	movs	r3, #1
 8006740:	e0c2      	b.n	80068c8 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8006742:	683b      	ldr	r3, [r7, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d104      	bne.n	8006752 <HAL_TIM_IC_Start_IT+0xa2>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2202      	movs	r2, #2
 800674c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006750:	e013      	b.n	800677a <HAL_TIM_IC_Start_IT+0xca>
 8006752:	683b      	ldr	r3, [r7, #0]
 8006754:	2b04      	cmp	r3, #4
 8006756:	d104      	bne.n	8006762 <HAL_TIM_IC_Start_IT+0xb2>
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	2202      	movs	r2, #2
 800675c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006760:	e00b      	b.n	800677a <HAL_TIM_IC_Start_IT+0xca>
 8006762:	683b      	ldr	r3, [r7, #0]
 8006764:	2b08      	cmp	r3, #8
 8006766:	d104      	bne.n	8006772 <HAL_TIM_IC_Start_IT+0xc2>
 8006768:	687b      	ldr	r3, [r7, #4]
 800676a:	2202      	movs	r2, #2
 800676c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006770:	e003      	b.n	800677a <HAL_TIM_IC_Start_IT+0xca>
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	2202      	movs	r2, #2
 8006776:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800677a:	683b      	ldr	r3, [r7, #0]
 800677c:	2b00      	cmp	r3, #0
 800677e:	d104      	bne.n	800678a <HAL_TIM_IC_Start_IT+0xda>
 8006780:	687b      	ldr	r3, [r7, #4]
 8006782:	2202      	movs	r2, #2
 8006784:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006788:	e013      	b.n	80067b2 <HAL_TIM_IC_Start_IT+0x102>
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	2b04      	cmp	r3, #4
 800678e:	d104      	bne.n	800679a <HAL_TIM_IC_Start_IT+0xea>
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	2202      	movs	r2, #2
 8006794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006798:	e00b      	b.n	80067b2 <HAL_TIM_IC_Start_IT+0x102>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	2b08      	cmp	r3, #8
 800679e:	d104      	bne.n	80067aa <HAL_TIM_IC_Start_IT+0xfa>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	2202      	movs	r2, #2
 80067a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80067a8:	e003      	b.n	80067b2 <HAL_TIM_IC_Start_IT+0x102>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	2202      	movs	r2, #2
 80067ae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 80067b2:	683b      	ldr	r3, [r7, #0]
 80067b4:	2b0c      	cmp	r3, #12
 80067b6:	d841      	bhi.n	800683c <HAL_TIM_IC_Start_IT+0x18c>
 80067b8:	a201      	add	r2, pc, #4	; (adr r2, 80067c0 <HAL_TIM_IC_Start_IT+0x110>)
 80067ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80067be:	bf00      	nop
 80067c0:	080067f5 	.word	0x080067f5
 80067c4:	0800683d 	.word	0x0800683d
 80067c8:	0800683d 	.word	0x0800683d
 80067cc:	0800683d 	.word	0x0800683d
 80067d0:	08006807 	.word	0x08006807
 80067d4:	0800683d 	.word	0x0800683d
 80067d8:	0800683d 	.word	0x0800683d
 80067dc:	0800683d 	.word	0x0800683d
 80067e0:	08006819 	.word	0x08006819
 80067e4:	0800683d 	.word	0x0800683d
 80067e8:	0800683d 	.word	0x0800683d
 80067ec:	0800683d 	.word	0x0800683d
 80067f0:	0800682b 	.word	0x0800682b
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	681b      	ldr	r3, [r3, #0]
 80067f8:	68da      	ldr	r2, [r3, #12]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	681b      	ldr	r3, [r3, #0]
 80067fe:	f042 0202 	orr.w	r2, r2, #2
 8006802:	60da      	str	r2, [r3, #12]
      break;
 8006804:	e01d      	b.n	8006842 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006806:	687b      	ldr	r3, [r7, #4]
 8006808:	681b      	ldr	r3, [r3, #0]
 800680a:	68da      	ldr	r2, [r3, #12]
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	f042 0204 	orr.w	r2, r2, #4
 8006814:	60da      	str	r2, [r3, #12]
      break;
 8006816:	e014      	b.n	8006842 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	681b      	ldr	r3, [r3, #0]
 800681c:	68da      	ldr	r2, [r3, #12]
 800681e:	687b      	ldr	r3, [r7, #4]
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	f042 0208 	orr.w	r2, r2, #8
 8006826:	60da      	str	r2, [r3, #12]
      break;
 8006828:	e00b      	b.n	8006842 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	681b      	ldr	r3, [r3, #0]
 800682e:	68da      	ldr	r2, [r3, #12]
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	f042 0210 	orr.w	r2, r2, #16
 8006838:	60da      	str	r2, [r3, #12]
      break;
 800683a:	e002      	b.n	8006842 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800683c:	2301      	movs	r3, #1
 800683e:	73fb      	strb	r3, [r7, #15]
      break;
 8006840:	bf00      	nop
  }

  if (status == HAL_OK)
 8006842:	7bfb      	ldrb	r3, [r7, #15]
 8006844:	2b00      	cmp	r3, #0
 8006846:	d13e      	bne.n	80068c6 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	681b      	ldr	r3, [r3, #0]
 800684c:	2201      	movs	r2, #1
 800684e:	6839      	ldr	r1, [r7, #0]
 8006850:	4618      	mov	r0, r3
 8006852:	f001 f80f 	bl	8007874 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	4a1d      	ldr	r2, [pc, #116]	; (80068d0 <HAL_TIM_IC_Start_IT+0x220>)
 800685c:	4293      	cmp	r3, r2
 800685e:	d018      	beq.n	8006892 <HAL_TIM_IC_Start_IT+0x1e2>
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006868:	d013      	beq.n	8006892 <HAL_TIM_IC_Start_IT+0x1e2>
 800686a:	687b      	ldr	r3, [r7, #4]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	4a19      	ldr	r2, [pc, #100]	; (80068d4 <HAL_TIM_IC_Start_IT+0x224>)
 8006870:	4293      	cmp	r3, r2
 8006872:	d00e      	beq.n	8006892 <HAL_TIM_IC_Start_IT+0x1e2>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	4a17      	ldr	r2, [pc, #92]	; (80068d8 <HAL_TIM_IC_Start_IT+0x228>)
 800687a:	4293      	cmp	r3, r2
 800687c:	d009      	beq.n	8006892 <HAL_TIM_IC_Start_IT+0x1e2>
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	681b      	ldr	r3, [r3, #0]
 8006882:	4a16      	ldr	r2, [pc, #88]	; (80068dc <HAL_TIM_IC_Start_IT+0x22c>)
 8006884:	4293      	cmp	r3, r2
 8006886:	d004      	beq.n	8006892 <HAL_TIM_IC_Start_IT+0x1e2>
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	681b      	ldr	r3, [r3, #0]
 800688c:	4a14      	ldr	r2, [pc, #80]	; (80068e0 <HAL_TIM_IC_Start_IT+0x230>)
 800688e:	4293      	cmp	r3, r2
 8006890:	d111      	bne.n	80068b6 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	689b      	ldr	r3, [r3, #8]
 8006898:	f003 0307 	and.w	r3, r3, #7
 800689c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800689e:	68bb      	ldr	r3, [r7, #8]
 80068a0:	2b06      	cmp	r3, #6
 80068a2:	d010      	beq.n	80068c6 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	681b      	ldr	r3, [r3, #0]
 80068a8:	681a      	ldr	r2, [r3, #0]
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	f042 0201 	orr.w	r2, r2, #1
 80068b2:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80068b4:	e007      	b.n	80068c6 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 80068b6:	687b      	ldr	r3, [r7, #4]
 80068b8:	681b      	ldr	r3, [r3, #0]
 80068ba:	681a      	ldr	r2, [r3, #0]
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	f042 0201 	orr.w	r2, r2, #1
 80068c4:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 80068c6:	7bfb      	ldrb	r3, [r7, #15]
}
 80068c8:	4618      	mov	r0, r3
 80068ca:	3710      	adds	r7, #16
 80068cc:	46bd      	mov	sp, r7
 80068ce:	bd80      	pop	{r7, pc}
 80068d0:	40010000 	.word	0x40010000
 80068d4:	40000400 	.word	0x40000400
 80068d8:	40000800 	.word	0x40000800
 80068dc:	40000c00 	.word	0x40000c00
 80068e0:	40014000 	.word	0x40014000

080068e4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b084      	sub	sp, #16
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80068ee:	2300      	movs	r3, #0
 80068f0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	2b0c      	cmp	r3, #12
 80068f6:	d841      	bhi.n	800697c <HAL_TIM_IC_Stop_IT+0x98>
 80068f8:	a201      	add	r2, pc, #4	; (adr r2, 8006900 <HAL_TIM_IC_Stop_IT+0x1c>)
 80068fa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80068fe:	bf00      	nop
 8006900:	08006935 	.word	0x08006935
 8006904:	0800697d 	.word	0x0800697d
 8006908:	0800697d 	.word	0x0800697d
 800690c:	0800697d 	.word	0x0800697d
 8006910:	08006947 	.word	0x08006947
 8006914:	0800697d 	.word	0x0800697d
 8006918:	0800697d 	.word	0x0800697d
 800691c:	0800697d 	.word	0x0800697d
 8006920:	08006959 	.word	0x08006959
 8006924:	0800697d 	.word	0x0800697d
 8006928:	0800697d 	.word	0x0800697d
 800692c:	0800697d 	.word	0x0800697d
 8006930:	0800696b 	.word	0x0800696b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	68da      	ldr	r2, [r3, #12]
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0202 	bic.w	r2, r2, #2
 8006942:	60da      	str	r2, [r3, #12]
      break;
 8006944:	e01d      	b.n	8006982 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	68da      	ldr	r2, [r3, #12]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	f022 0204 	bic.w	r2, r2, #4
 8006954:	60da      	str	r2, [r3, #12]
      break;
 8006956:	e014      	b.n	8006982 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	68da      	ldr	r2, [r3, #12]
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f022 0208 	bic.w	r2, r2, #8
 8006966:	60da      	str	r2, [r3, #12]
      break;
 8006968:	e00b      	b.n	8006982 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	68da      	ldr	r2, [r3, #12]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	f022 0210 	bic.w	r2, r2, #16
 8006978:	60da      	str	r2, [r3, #12]
      break;
 800697a:	e002      	b.n	8006982 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800697c:	2301      	movs	r3, #1
 800697e:	73fb      	strb	r3, [r7, #15]
      break;
 8006980:	bf00      	nop
  }

  if (status == HAL_OK)
 8006982:	7bfb      	ldrb	r3, [r7, #15]
 8006984:	2b00      	cmp	r3, #0
 8006986:	d156      	bne.n	8006a36 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	681b      	ldr	r3, [r3, #0]
 800698c:	2200      	movs	r2, #0
 800698e:	6839      	ldr	r1, [r7, #0]
 8006990:	4618      	mov	r0, r3
 8006992:	f000 ff6f 	bl	8007874 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	6a1a      	ldr	r2, [r3, #32]
 800699c:	f241 1311 	movw	r3, #4369	; 0x1111
 80069a0:	4013      	ands	r3, r2
 80069a2:	2b00      	cmp	r3, #0
 80069a4:	d10f      	bne.n	80069c6 <HAL_TIM_IC_Stop_IT+0xe2>
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	681b      	ldr	r3, [r3, #0]
 80069aa:	6a1a      	ldr	r2, [r3, #32]
 80069ac:	f240 4344 	movw	r3, #1092	; 0x444
 80069b0:	4013      	ands	r3, r2
 80069b2:	2b00      	cmp	r3, #0
 80069b4:	d107      	bne.n	80069c6 <HAL_TIM_IC_Stop_IT+0xe2>
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	681a      	ldr	r2, [r3, #0]
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	681b      	ldr	r3, [r3, #0]
 80069c0:	f022 0201 	bic.w	r2, r2, #1
 80069c4:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d104      	bne.n	80069d6 <HAL_TIM_IC_Stop_IT+0xf2>
 80069cc:	687b      	ldr	r3, [r7, #4]
 80069ce:	2201      	movs	r2, #1
 80069d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80069d4:	e013      	b.n	80069fe <HAL_TIM_IC_Stop_IT+0x11a>
 80069d6:	683b      	ldr	r3, [r7, #0]
 80069d8:	2b04      	cmp	r3, #4
 80069da:	d104      	bne.n	80069e6 <HAL_TIM_IC_Stop_IT+0x102>
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2201      	movs	r2, #1
 80069e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80069e4:	e00b      	b.n	80069fe <HAL_TIM_IC_Stop_IT+0x11a>
 80069e6:	683b      	ldr	r3, [r7, #0]
 80069e8:	2b08      	cmp	r3, #8
 80069ea:	d104      	bne.n	80069f6 <HAL_TIM_IC_Stop_IT+0x112>
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	2201      	movs	r2, #1
 80069f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80069f4:	e003      	b.n	80069fe <HAL_TIM_IC_Stop_IT+0x11a>
 80069f6:	687b      	ldr	r3, [r7, #4]
 80069f8:	2201      	movs	r2, #1
 80069fa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d104      	bne.n	8006a0e <HAL_TIM_IC_Stop_IT+0x12a>
 8006a04:	687b      	ldr	r3, [r7, #4]
 8006a06:	2201      	movs	r2, #1
 8006a08:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006a0c:	e013      	b.n	8006a36 <HAL_TIM_IC_Stop_IT+0x152>
 8006a0e:	683b      	ldr	r3, [r7, #0]
 8006a10:	2b04      	cmp	r3, #4
 8006a12:	d104      	bne.n	8006a1e <HAL_TIM_IC_Stop_IT+0x13a>
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	2201      	movs	r2, #1
 8006a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006a1c:	e00b      	b.n	8006a36 <HAL_TIM_IC_Stop_IT+0x152>
 8006a1e:	683b      	ldr	r3, [r7, #0]
 8006a20:	2b08      	cmp	r3, #8
 8006a22:	d104      	bne.n	8006a2e <HAL_TIM_IC_Stop_IT+0x14a>
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	2201      	movs	r2, #1
 8006a28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a2c:	e003      	b.n	8006a36 <HAL_TIM_IC_Stop_IT+0x152>
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2201      	movs	r2, #1
 8006a32:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8006a36:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a38:	4618      	mov	r0, r3
 8006a3a:	3710      	adds	r7, #16
 8006a3c:	46bd      	mov	sp, r7
 8006a3e:	bd80      	pop	{r7, pc}

08006a40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006a40:	b580      	push	{r7, lr}
 8006a42:	b082      	sub	sp, #8
 8006a44:	af00      	add	r7, sp, #0
 8006a46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	681b      	ldr	r3, [r3, #0]
 8006a4c:	691b      	ldr	r3, [r3, #16]
 8006a4e:	f003 0302 	and.w	r3, r3, #2
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d122      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	681b      	ldr	r3, [r3, #0]
 8006a5a:	68db      	ldr	r3, [r3, #12]
 8006a5c:	f003 0302 	and.w	r3, r3, #2
 8006a60:	2b02      	cmp	r3, #2
 8006a62:	d11b      	bne.n	8006a9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	f06f 0202 	mvn.w	r2, #2
 8006a6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	2201      	movs	r2, #1
 8006a72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	681b      	ldr	r3, [r3, #0]
 8006a78:	699b      	ldr	r3, [r3, #24]
 8006a7a:	f003 0303 	and.w	r3, r3, #3
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d003      	beq.n	8006a8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006a82:	6878      	ldr	r0, [r7, #4]
 8006a84:	f000 fb13 	bl	80070ae <HAL_TIM_IC_CaptureCallback>
 8006a88:	e005      	b.n	8006a96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006a8a:	6878      	ldr	r0, [r7, #4]
 8006a8c:	f000 fb05 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006a90:	6878      	ldr	r0, [r7, #4]
 8006a92:	f000 fb16 	bl	80070c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006a96:	687b      	ldr	r3, [r7, #4]
 8006a98:	2200      	movs	r2, #0
 8006a9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	681b      	ldr	r3, [r3, #0]
 8006aa0:	691b      	ldr	r3, [r3, #16]
 8006aa2:	f003 0304 	and.w	r3, r3, #4
 8006aa6:	2b04      	cmp	r3, #4
 8006aa8:	d122      	bne.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	68db      	ldr	r3, [r3, #12]
 8006ab0:	f003 0304 	and.w	r3, r3, #4
 8006ab4:	2b04      	cmp	r3, #4
 8006ab6:	d11b      	bne.n	8006af0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ab8:	687b      	ldr	r3, [r7, #4]
 8006aba:	681b      	ldr	r3, [r3, #0]
 8006abc:	f06f 0204 	mvn.w	r2, #4
 8006ac0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	2202      	movs	r2, #2
 8006ac6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	699b      	ldr	r3, [r3, #24]
 8006ace:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006ad2:	2b00      	cmp	r3, #0
 8006ad4:	d003      	beq.n	8006ade <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006ad6:	6878      	ldr	r0, [r7, #4]
 8006ad8:	f000 fae9 	bl	80070ae <HAL_TIM_IC_CaptureCallback>
 8006adc:	e005      	b.n	8006aea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006ade:	6878      	ldr	r0, [r7, #4]
 8006ae0:	f000 fadb 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006ae4:	6878      	ldr	r0, [r7, #4]
 8006ae6:	f000 faec 	bl	80070c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	2200      	movs	r2, #0
 8006aee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	691b      	ldr	r3, [r3, #16]
 8006af6:	f003 0308 	and.w	r3, r3, #8
 8006afa:	2b08      	cmp	r3, #8
 8006afc:	d122      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	681b      	ldr	r3, [r3, #0]
 8006b02:	68db      	ldr	r3, [r3, #12]
 8006b04:	f003 0308 	and.w	r3, r3, #8
 8006b08:	2b08      	cmp	r3, #8
 8006b0a:	d11b      	bne.n	8006b44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f06f 0208 	mvn.w	r2, #8
 8006b14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006b16:	687b      	ldr	r3, [r7, #4]
 8006b18:	2204      	movs	r2, #4
 8006b1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006b1c:	687b      	ldr	r3, [r7, #4]
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	69db      	ldr	r3, [r3, #28]
 8006b22:	f003 0303 	and.w	r3, r3, #3
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d003      	beq.n	8006b32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b2a:	6878      	ldr	r0, [r7, #4]
 8006b2c:	f000 fabf 	bl	80070ae <HAL_TIM_IC_CaptureCallback>
 8006b30:	e005      	b.n	8006b3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b32:	6878      	ldr	r0, [r7, #4]
 8006b34:	f000 fab1 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b38:	6878      	ldr	r0, [r7, #4]
 8006b3a:	f000 fac2 	bl	80070c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	2200      	movs	r2, #0
 8006b42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	681b      	ldr	r3, [r3, #0]
 8006b48:	691b      	ldr	r3, [r3, #16]
 8006b4a:	f003 0310 	and.w	r3, r3, #16
 8006b4e:	2b10      	cmp	r3, #16
 8006b50:	d122      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	68db      	ldr	r3, [r3, #12]
 8006b58:	f003 0310 	and.w	r3, r3, #16
 8006b5c:	2b10      	cmp	r3, #16
 8006b5e:	d11b      	bne.n	8006b98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006b60:	687b      	ldr	r3, [r7, #4]
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	f06f 0210 	mvn.w	r2, #16
 8006b68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	2208      	movs	r2, #8
 8006b6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	69db      	ldr	r3, [r3, #28]
 8006b76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d003      	beq.n	8006b86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b7e:	6878      	ldr	r0, [r7, #4]
 8006b80:	f000 fa95 	bl	80070ae <HAL_TIM_IC_CaptureCallback>
 8006b84:	e005      	b.n	8006b92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b86:	6878      	ldr	r0, [r7, #4]
 8006b88:	f000 fa87 	bl	800709a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b8c:	6878      	ldr	r0, [r7, #4]
 8006b8e:	f000 fa98 	bl	80070c2 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	2200      	movs	r2, #0
 8006b96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006b98:	687b      	ldr	r3, [r7, #4]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	691b      	ldr	r3, [r3, #16]
 8006b9e:	f003 0301 	and.w	r3, r3, #1
 8006ba2:	2b01      	cmp	r3, #1
 8006ba4:	d10e      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68db      	ldr	r3, [r3, #12]
 8006bac:	f003 0301 	and.w	r3, r3, #1
 8006bb0:	2b01      	cmp	r3, #1
 8006bb2:	d107      	bne.n	8006bc4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006bb4:	687b      	ldr	r3, [r7, #4]
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	f06f 0201 	mvn.w	r2, #1
 8006bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006bbe:	6878      	ldr	r0, [r7, #4]
 8006bc0:	f7fa fe66 	bl	8001890 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	691b      	ldr	r3, [r3, #16]
 8006bca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bce:	2b80      	cmp	r3, #128	; 0x80
 8006bd0:	d10e      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	681b      	ldr	r3, [r3, #0]
 8006bd6:	68db      	ldr	r3, [r3, #12]
 8006bd8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bdc:	2b80      	cmp	r3, #128	; 0x80
 8006bde:	d107      	bne.n	8006bf0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006be0:	687b      	ldr	r3, [r7, #4]
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fee0 	bl	80079b0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	691b      	ldr	r3, [r3, #16]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d10e      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	68db      	ldr	r3, [r3, #12]
 8006c04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c08:	2b40      	cmp	r3, #64	; 0x40
 8006c0a:	d107      	bne.n	8006c1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006c14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa5d 	bl	80070d6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	691b      	ldr	r3, [r3, #16]
 8006c22:	f003 0320 	and.w	r3, r3, #32
 8006c26:	2b20      	cmp	r3, #32
 8006c28:	d10e      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006c2a:	687b      	ldr	r3, [r7, #4]
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	68db      	ldr	r3, [r3, #12]
 8006c30:	f003 0320 	and.w	r3, r3, #32
 8006c34:	2b20      	cmp	r3, #32
 8006c36:	d107      	bne.n	8006c48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006c38:	687b      	ldr	r3, [r7, #4]
 8006c3a:	681b      	ldr	r3, [r3, #0]
 8006c3c:	f06f 0220 	mvn.w	r2, #32
 8006c40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006c42:	6878      	ldr	r0, [r7, #4]
 8006c44:	f000 feaa 	bl	800799c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006c48:	bf00      	nop
 8006c4a:	3708      	adds	r7, #8
 8006c4c:	46bd      	mov	sp, r7
 8006c4e:	bd80      	pop	{r7, pc}

08006c50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006c50:	b580      	push	{r7, lr}
 8006c52:	b086      	sub	sp, #24
 8006c54:	af00      	add	r7, sp, #0
 8006c56:	60f8      	str	r0, [r7, #12]
 8006c58:	60b9      	str	r1, [r7, #8]
 8006c5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006c5c:	2300      	movs	r3, #0
 8006c5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006c60:	68fb      	ldr	r3, [r7, #12]
 8006c62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006c66:	2b01      	cmp	r3, #1
 8006c68:	d101      	bne.n	8006c6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8006c6a:	2302      	movs	r3, #2
 8006c6c:	e088      	b.n	8006d80 <HAL_TIM_IC_ConfigChannel+0x130>
 8006c6e:	68fb      	ldr	r3, [r7, #12]
 8006c70:	2201      	movs	r2, #1
 8006c72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006c76:	687b      	ldr	r3, [r7, #4]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d11b      	bne.n	8006cb4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8006c7c:	68fb      	ldr	r3, [r7, #12]
 8006c7e:	6818      	ldr	r0, [r3, #0]
 8006c80:	68bb      	ldr	r3, [r7, #8]
 8006c82:	6819      	ldr	r1, [r3, #0]
 8006c84:	68bb      	ldr	r3, [r7, #8]
 8006c86:	685a      	ldr	r2, [r3, #4]
 8006c88:	68bb      	ldr	r3, [r7, #8]
 8006c8a:	68db      	ldr	r3, [r3, #12]
 8006c8c:	f000 fc3a 	bl	8007504 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006c90:	68fb      	ldr	r3, [r7, #12]
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	699a      	ldr	r2, [r3, #24]
 8006c96:	68fb      	ldr	r3, [r7, #12]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	f022 020c 	bic.w	r2, r2, #12
 8006c9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006ca0:	68fb      	ldr	r3, [r7, #12]
 8006ca2:	681b      	ldr	r3, [r3, #0]
 8006ca4:	6999      	ldr	r1, [r3, #24]
 8006ca6:	68bb      	ldr	r3, [r7, #8]
 8006ca8:	689a      	ldr	r2, [r3, #8]
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	681b      	ldr	r3, [r3, #0]
 8006cae:	430a      	orrs	r2, r1
 8006cb0:	619a      	str	r2, [r3, #24]
 8006cb2:	e060      	b.n	8006d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	2b04      	cmp	r3, #4
 8006cb8:	d11c      	bne.n	8006cf4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	6818      	ldr	r0, [r3, #0]
 8006cbe:	68bb      	ldr	r3, [r7, #8]
 8006cc0:	6819      	ldr	r1, [r3, #0]
 8006cc2:	68bb      	ldr	r3, [r7, #8]
 8006cc4:	685a      	ldr	r2, [r3, #4]
 8006cc6:	68bb      	ldr	r3, [r7, #8]
 8006cc8:	68db      	ldr	r3, [r3, #12]
 8006cca:	f000 fcb2 	bl	8007632 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8006cce:	68fb      	ldr	r3, [r7, #12]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	699a      	ldr	r2, [r3, #24]
 8006cd4:	68fb      	ldr	r3, [r7, #12]
 8006cd6:	681b      	ldr	r3, [r3, #0]
 8006cd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006cdc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	6999      	ldr	r1, [r3, #24]
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	689b      	ldr	r3, [r3, #8]
 8006ce8:	021a      	lsls	r2, r3, #8
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	430a      	orrs	r2, r1
 8006cf0:	619a      	str	r2, [r3, #24]
 8006cf2:	e040      	b.n	8006d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	2b08      	cmp	r3, #8
 8006cf8:	d11b      	bne.n	8006d32 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	6818      	ldr	r0, [r3, #0]
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	6819      	ldr	r1, [r3, #0]
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	685a      	ldr	r2, [r3, #4]
 8006d06:	68bb      	ldr	r3, [r7, #8]
 8006d08:	68db      	ldr	r3, [r3, #12]
 8006d0a:	f000 fcff 	bl	800770c <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8006d0e:	68fb      	ldr	r3, [r7, #12]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	69da      	ldr	r2, [r3, #28]
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	681b      	ldr	r3, [r3, #0]
 8006d18:	f022 020c 	bic.w	r2, r2, #12
 8006d1c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	69d9      	ldr	r1, [r3, #28]
 8006d24:	68bb      	ldr	r3, [r7, #8]
 8006d26:	689a      	ldr	r2, [r3, #8]
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	430a      	orrs	r2, r1
 8006d2e:	61da      	str	r2, [r3, #28]
 8006d30:	e021      	b.n	8006d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2b0c      	cmp	r3, #12
 8006d36:	d11c      	bne.n	8006d72 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006d38:	68fb      	ldr	r3, [r7, #12]
 8006d3a:	6818      	ldr	r0, [r3, #0]
 8006d3c:	68bb      	ldr	r3, [r7, #8]
 8006d3e:	6819      	ldr	r1, [r3, #0]
 8006d40:	68bb      	ldr	r3, [r7, #8]
 8006d42:	685a      	ldr	r2, [r3, #4]
 8006d44:	68bb      	ldr	r3, [r7, #8]
 8006d46:	68db      	ldr	r3, [r3, #12]
 8006d48:	f000 fd1c 	bl	8007784 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	69da      	ldr	r2, [r3, #28]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	681b      	ldr	r3, [r3, #0]
 8006d56:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8006d5a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8006d5c:	68fb      	ldr	r3, [r7, #12]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69d9      	ldr	r1, [r3, #28]
 8006d62:	68bb      	ldr	r3, [r7, #8]
 8006d64:	689b      	ldr	r3, [r3, #8]
 8006d66:	021a      	lsls	r2, r3, #8
 8006d68:	68fb      	ldr	r3, [r7, #12]
 8006d6a:	681b      	ldr	r3, [r3, #0]
 8006d6c:	430a      	orrs	r2, r1
 8006d6e:	61da      	str	r2, [r3, #28]
 8006d70:	e001      	b.n	8006d76 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006d72:	2301      	movs	r3, #1
 8006d74:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2200      	movs	r2, #0
 8006d7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006d7e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006d80:	4618      	mov	r0, r3
 8006d82:	3718      	adds	r7, #24
 8006d84:	46bd      	mov	sp, r7
 8006d86:	bd80      	pop	{r7, pc}

08006d88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006d88:	b580      	push	{r7, lr}
 8006d8a:	b086      	sub	sp, #24
 8006d8c:	af00      	add	r7, sp, #0
 8006d8e:	60f8      	str	r0, [r7, #12]
 8006d90:	60b9      	str	r1, [r7, #8]
 8006d92:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006d94:	2300      	movs	r3, #0
 8006d96:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006d98:	68fb      	ldr	r3, [r7, #12]
 8006d9a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006d9e:	2b01      	cmp	r3, #1
 8006da0:	d101      	bne.n	8006da6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006da2:	2302      	movs	r3, #2
 8006da4:	e0ae      	b.n	8006f04 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006da6:	68fb      	ldr	r3, [r7, #12]
 8006da8:	2201      	movs	r2, #1
 8006daa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2b0c      	cmp	r3, #12
 8006db2:	f200 809f 	bhi.w	8006ef4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006db6:	a201      	add	r2, pc, #4	; (adr r2, 8006dbc <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006db8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006dbc:	08006df1 	.word	0x08006df1
 8006dc0:	08006ef5 	.word	0x08006ef5
 8006dc4:	08006ef5 	.word	0x08006ef5
 8006dc8:	08006ef5 	.word	0x08006ef5
 8006dcc:	08006e31 	.word	0x08006e31
 8006dd0:	08006ef5 	.word	0x08006ef5
 8006dd4:	08006ef5 	.word	0x08006ef5
 8006dd8:	08006ef5 	.word	0x08006ef5
 8006ddc:	08006e73 	.word	0x08006e73
 8006de0:	08006ef5 	.word	0x08006ef5
 8006de4:	08006ef5 	.word	0x08006ef5
 8006de8:	08006ef5 	.word	0x08006ef5
 8006dec:	08006eb3 	.word	0x08006eb3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	68b9      	ldr	r1, [r7, #8]
 8006df6:	4618      	mov	r0, r3
 8006df8:	f000 f9f8 	bl	80071ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006dfc:	68fb      	ldr	r3, [r7, #12]
 8006dfe:	681b      	ldr	r3, [r3, #0]
 8006e00:	699a      	ldr	r2, [r3, #24]
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	681b      	ldr	r3, [r3, #0]
 8006e06:	f042 0208 	orr.w	r2, r2, #8
 8006e0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	699a      	ldr	r2, [r3, #24]
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	681b      	ldr	r3, [r3, #0]
 8006e16:	f022 0204 	bic.w	r2, r2, #4
 8006e1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	6999      	ldr	r1, [r3, #24]
 8006e22:	68bb      	ldr	r3, [r7, #8]
 8006e24:	691a      	ldr	r2, [r3, #16]
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	619a      	str	r2, [r3, #24]
      break;
 8006e2e:	e064      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	681b      	ldr	r3, [r3, #0]
 8006e34:	68b9      	ldr	r1, [r7, #8]
 8006e36:	4618      	mov	r0, r3
 8006e38:	f000 fa3e 	bl	80072b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006e3c:	68fb      	ldr	r3, [r7, #12]
 8006e3e:	681b      	ldr	r3, [r3, #0]
 8006e40:	699a      	ldr	r2, [r3, #24]
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e4a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	681b      	ldr	r3, [r3, #0]
 8006e50:	699a      	ldr	r2, [r3, #24]
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	681b      	ldr	r3, [r3, #0]
 8006e56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e5a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006e5c:	68fb      	ldr	r3, [r7, #12]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	6999      	ldr	r1, [r3, #24]
 8006e62:	68bb      	ldr	r3, [r7, #8]
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	021a      	lsls	r2, r3, #8
 8006e68:	68fb      	ldr	r3, [r7, #12]
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	430a      	orrs	r2, r1
 8006e6e:	619a      	str	r2, [r3, #24]
      break;
 8006e70:	e043      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006e72:	68fb      	ldr	r3, [r7, #12]
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	68b9      	ldr	r1, [r7, #8]
 8006e78:	4618      	mov	r0, r3
 8006e7a:	f000 fa89 	bl	8007390 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006e7e:	68fb      	ldr	r3, [r7, #12]
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	69da      	ldr	r2, [r3, #28]
 8006e84:	68fb      	ldr	r3, [r7, #12]
 8006e86:	681b      	ldr	r3, [r3, #0]
 8006e88:	f042 0208 	orr.w	r2, r2, #8
 8006e8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006e8e:	68fb      	ldr	r3, [r7, #12]
 8006e90:	681b      	ldr	r3, [r3, #0]
 8006e92:	69da      	ldr	r2, [r3, #28]
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	681b      	ldr	r3, [r3, #0]
 8006e98:	f022 0204 	bic.w	r2, r2, #4
 8006e9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006e9e:	68fb      	ldr	r3, [r7, #12]
 8006ea0:	681b      	ldr	r3, [r3, #0]
 8006ea2:	69d9      	ldr	r1, [r3, #28]
 8006ea4:	68bb      	ldr	r3, [r7, #8]
 8006ea6:	691a      	ldr	r2, [r3, #16]
 8006ea8:	68fb      	ldr	r3, [r7, #12]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	430a      	orrs	r2, r1
 8006eae:	61da      	str	r2, [r3, #28]
      break;
 8006eb0:	e023      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	68b9      	ldr	r1, [r7, #8]
 8006eb8:	4618      	mov	r0, r3
 8006eba:	f000 fad3 	bl	8007464 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	681b      	ldr	r3, [r3, #0]
 8006ec2:	69da      	ldr	r2, [r3, #28]
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	681b      	ldr	r3, [r3, #0]
 8006ec8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006ecc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006ece:	68fb      	ldr	r3, [r7, #12]
 8006ed0:	681b      	ldr	r3, [r3, #0]
 8006ed2:	69da      	ldr	r2, [r3, #28]
 8006ed4:	68fb      	ldr	r3, [r7, #12]
 8006ed6:	681b      	ldr	r3, [r3, #0]
 8006ed8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006edc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	69d9      	ldr	r1, [r3, #28]
 8006ee4:	68bb      	ldr	r3, [r7, #8]
 8006ee6:	691b      	ldr	r3, [r3, #16]
 8006ee8:	021a      	lsls	r2, r3, #8
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	681b      	ldr	r3, [r3, #0]
 8006eee:	430a      	orrs	r2, r1
 8006ef0:	61da      	str	r2, [r3, #28]
      break;
 8006ef2:	e002      	b.n	8006efa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	75fb      	strb	r3, [r7, #23]
      break;
 8006ef8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	2200      	movs	r2, #0
 8006efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006f02:	7dfb      	ldrb	r3, [r7, #23]
}
 8006f04:	4618      	mov	r0, r3
 8006f06:	3718      	adds	r7, #24
 8006f08:	46bd      	mov	sp, r7
 8006f0a:	bd80      	pop	{r7, pc}

08006f0c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006f0c:	b580      	push	{r7, lr}
 8006f0e:	b084      	sub	sp, #16
 8006f10:	af00      	add	r7, sp, #0
 8006f12:	6078      	str	r0, [r7, #4]
 8006f14:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006f16:	2300      	movs	r3, #0
 8006f18:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006f1a:	687b      	ldr	r3, [r7, #4]
 8006f1c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006f20:	2b01      	cmp	r3, #1
 8006f22:	d101      	bne.n	8006f28 <HAL_TIM_ConfigClockSource+0x1c>
 8006f24:	2302      	movs	r3, #2
 8006f26:	e0b4      	b.n	8007092 <HAL_TIM_ConfigClockSource+0x186>
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	2202      	movs	r2, #2
 8006f34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	689b      	ldr	r3, [r3, #8]
 8006f3e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006f40:	68bb      	ldr	r3, [r7, #8]
 8006f42:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006f46:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006f48:	68bb      	ldr	r3, [r7, #8]
 8006f4a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006f4e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006f50:	687b      	ldr	r3, [r7, #4]
 8006f52:	681b      	ldr	r3, [r3, #0]
 8006f54:	68ba      	ldr	r2, [r7, #8]
 8006f56:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f60:	d03e      	beq.n	8006fe0 <HAL_TIM_ConfigClockSource+0xd4>
 8006f62:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006f66:	f200 8087 	bhi.w	8007078 <HAL_TIM_ConfigClockSource+0x16c>
 8006f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f6e:	f000 8086 	beq.w	800707e <HAL_TIM_ConfigClockSource+0x172>
 8006f72:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006f76:	d87f      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x16c>
 8006f78:	2b70      	cmp	r3, #112	; 0x70
 8006f7a:	d01a      	beq.n	8006fb2 <HAL_TIM_ConfigClockSource+0xa6>
 8006f7c:	2b70      	cmp	r3, #112	; 0x70
 8006f7e:	d87b      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x16c>
 8006f80:	2b60      	cmp	r3, #96	; 0x60
 8006f82:	d050      	beq.n	8007026 <HAL_TIM_ConfigClockSource+0x11a>
 8006f84:	2b60      	cmp	r3, #96	; 0x60
 8006f86:	d877      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x16c>
 8006f88:	2b50      	cmp	r3, #80	; 0x50
 8006f8a:	d03c      	beq.n	8007006 <HAL_TIM_ConfigClockSource+0xfa>
 8006f8c:	2b50      	cmp	r3, #80	; 0x50
 8006f8e:	d873      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x16c>
 8006f90:	2b40      	cmp	r3, #64	; 0x40
 8006f92:	d058      	beq.n	8007046 <HAL_TIM_ConfigClockSource+0x13a>
 8006f94:	2b40      	cmp	r3, #64	; 0x40
 8006f96:	d86f      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x16c>
 8006f98:	2b30      	cmp	r3, #48	; 0x30
 8006f9a:	d064      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x15a>
 8006f9c:	2b30      	cmp	r3, #48	; 0x30
 8006f9e:	d86b      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa0:	2b20      	cmp	r3, #32
 8006fa2:	d060      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x15a>
 8006fa4:	2b20      	cmp	r3, #32
 8006fa6:	d867      	bhi.n	8007078 <HAL_TIM_ConfigClockSource+0x16c>
 8006fa8:	2b00      	cmp	r3, #0
 8006faa:	d05c      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x15a>
 8006fac:	2b10      	cmp	r3, #16
 8006fae:	d05a      	beq.n	8007066 <HAL_TIM_ConfigClockSource+0x15a>
 8006fb0:	e062      	b.n	8007078 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	6818      	ldr	r0, [r3, #0]
 8006fb6:	683b      	ldr	r3, [r7, #0]
 8006fb8:	6899      	ldr	r1, [r3, #8]
 8006fba:	683b      	ldr	r3, [r7, #0]
 8006fbc:	685a      	ldr	r2, [r3, #4]
 8006fbe:	683b      	ldr	r3, [r7, #0]
 8006fc0:	68db      	ldr	r3, [r3, #12]
 8006fc2:	f000 fc37 	bl	8007834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006fc6:	687b      	ldr	r3, [r7, #4]
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	689b      	ldr	r3, [r3, #8]
 8006fcc:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006fce:	68bb      	ldr	r3, [r7, #8]
 8006fd0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006fd4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	68ba      	ldr	r2, [r7, #8]
 8006fdc:	609a      	str	r2, [r3, #8]
      break;
 8006fde:	e04f      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	6818      	ldr	r0, [r3, #0]
 8006fe4:	683b      	ldr	r3, [r7, #0]
 8006fe6:	6899      	ldr	r1, [r3, #8]
 8006fe8:	683b      	ldr	r3, [r7, #0]
 8006fea:	685a      	ldr	r2, [r3, #4]
 8006fec:	683b      	ldr	r3, [r7, #0]
 8006fee:	68db      	ldr	r3, [r3, #12]
 8006ff0:	f000 fc20 	bl	8007834 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006ff4:	687b      	ldr	r3, [r7, #4]
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	689a      	ldr	r2, [r3, #8]
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007002:	609a      	str	r2, [r3, #8]
      break;
 8007004:	e03c      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007006:	687b      	ldr	r3, [r7, #4]
 8007008:	6818      	ldr	r0, [r3, #0]
 800700a:	683b      	ldr	r3, [r7, #0]
 800700c:	6859      	ldr	r1, [r3, #4]
 800700e:	683b      	ldr	r3, [r7, #0]
 8007010:	68db      	ldr	r3, [r3, #12]
 8007012:	461a      	mov	r2, r3
 8007014:	f000 fade 	bl	80075d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	681b      	ldr	r3, [r3, #0]
 800701c:	2150      	movs	r1, #80	; 0x50
 800701e:	4618      	mov	r0, r3
 8007020:	f000 fbed 	bl	80077fe <TIM_ITRx_SetConfig>
      break;
 8007024:	e02c      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	6818      	ldr	r0, [r3, #0]
 800702a:	683b      	ldr	r3, [r7, #0]
 800702c:	6859      	ldr	r1, [r3, #4]
 800702e:	683b      	ldr	r3, [r7, #0]
 8007030:	68db      	ldr	r3, [r3, #12]
 8007032:	461a      	mov	r2, r3
 8007034:	f000 fb3a 	bl	80076ac <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	681b      	ldr	r3, [r3, #0]
 800703c:	2160      	movs	r1, #96	; 0x60
 800703e:	4618      	mov	r0, r3
 8007040:	f000 fbdd 	bl	80077fe <TIM_ITRx_SetConfig>
      break;
 8007044:	e01c      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007046:	687b      	ldr	r3, [r7, #4]
 8007048:	6818      	ldr	r0, [r3, #0]
 800704a:	683b      	ldr	r3, [r7, #0]
 800704c:	6859      	ldr	r1, [r3, #4]
 800704e:	683b      	ldr	r3, [r7, #0]
 8007050:	68db      	ldr	r3, [r3, #12]
 8007052:	461a      	mov	r2, r3
 8007054:	f000 fabe 	bl	80075d4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	2140      	movs	r1, #64	; 0x40
 800705e:	4618      	mov	r0, r3
 8007060:	f000 fbcd 	bl	80077fe <TIM_ITRx_SetConfig>
      break;
 8007064:	e00c      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007066:	687b      	ldr	r3, [r7, #4]
 8007068:	681a      	ldr	r2, [r3, #0]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	681b      	ldr	r3, [r3, #0]
 800706e:	4619      	mov	r1, r3
 8007070:	4610      	mov	r0, r2
 8007072:	f000 fbc4 	bl	80077fe <TIM_ITRx_SetConfig>
      break;
 8007076:	e003      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007078:	2301      	movs	r3, #1
 800707a:	73fb      	strb	r3, [r7, #15]
      break;
 800707c:	e000      	b.n	8007080 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800707e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007080:	687b      	ldr	r3, [r7, #4]
 8007082:	2201      	movs	r2, #1
 8007084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	2200      	movs	r2, #0
 800708c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007090:	7bfb      	ldrb	r3, [r7, #15]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3710      	adds	r7, #16
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}

0800709a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800709a:	b480      	push	{r7}
 800709c:	b083      	sub	sp, #12
 800709e:	af00      	add	r7, sp, #0
 80070a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80070a2:	bf00      	nop
 80070a4:	370c      	adds	r7, #12
 80070a6:	46bd      	mov	sp, r7
 80070a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070ac:	4770      	bx	lr

080070ae <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80070ae:	b480      	push	{r7}
 80070b0:	b083      	sub	sp, #12
 80070b2:	af00      	add	r7, sp, #0
 80070b4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80070b6:	bf00      	nop
 80070b8:	370c      	adds	r7, #12
 80070ba:	46bd      	mov	sp, r7
 80070bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c0:	4770      	bx	lr

080070c2 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80070c2:	b480      	push	{r7}
 80070c4:	b083      	sub	sp, #12
 80070c6:	af00      	add	r7, sp, #0
 80070c8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80070ca:	bf00      	nop
 80070cc:	370c      	adds	r7, #12
 80070ce:	46bd      	mov	sp, r7
 80070d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070d4:	4770      	bx	lr

080070d6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070d6:	b480      	push	{r7}
 80070d8:	b083      	sub	sp, #12
 80070da:	af00      	add	r7, sp, #0
 80070dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070de:	bf00      	nop
 80070e0:	370c      	adds	r7, #12
 80070e2:	46bd      	mov	sp, r7
 80070e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e8:	4770      	bx	lr
	...

080070ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070ec:	b480      	push	{r7}
 80070ee:	b085      	sub	sp, #20
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	6078      	str	r0, [r7, #4]
 80070f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070fc:	687b      	ldr	r3, [r7, #4]
 80070fe:	4a34      	ldr	r2, [pc, #208]	; (80071d0 <TIM_Base_SetConfig+0xe4>)
 8007100:	4293      	cmp	r3, r2
 8007102:	d00f      	beq.n	8007124 <TIM_Base_SetConfig+0x38>
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800710a:	d00b      	beq.n	8007124 <TIM_Base_SetConfig+0x38>
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	4a31      	ldr	r2, [pc, #196]	; (80071d4 <TIM_Base_SetConfig+0xe8>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d007      	beq.n	8007124 <TIM_Base_SetConfig+0x38>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	4a30      	ldr	r2, [pc, #192]	; (80071d8 <TIM_Base_SetConfig+0xec>)
 8007118:	4293      	cmp	r3, r2
 800711a:	d003      	beq.n	8007124 <TIM_Base_SetConfig+0x38>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	4a2f      	ldr	r2, [pc, #188]	; (80071dc <TIM_Base_SetConfig+0xf0>)
 8007120:	4293      	cmp	r3, r2
 8007122:	d108      	bne.n	8007136 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007124:	68fb      	ldr	r3, [r7, #12]
 8007126:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800712a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800712c:	683b      	ldr	r3, [r7, #0]
 800712e:	685b      	ldr	r3, [r3, #4]
 8007130:	68fa      	ldr	r2, [r7, #12]
 8007132:	4313      	orrs	r3, r2
 8007134:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007136:	687b      	ldr	r3, [r7, #4]
 8007138:	4a25      	ldr	r2, [pc, #148]	; (80071d0 <TIM_Base_SetConfig+0xe4>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d01b      	beq.n	8007176 <TIM_Base_SetConfig+0x8a>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007144:	d017      	beq.n	8007176 <TIM_Base_SetConfig+0x8a>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	4a22      	ldr	r2, [pc, #136]	; (80071d4 <TIM_Base_SetConfig+0xe8>)
 800714a:	4293      	cmp	r3, r2
 800714c:	d013      	beq.n	8007176 <TIM_Base_SetConfig+0x8a>
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	4a21      	ldr	r2, [pc, #132]	; (80071d8 <TIM_Base_SetConfig+0xec>)
 8007152:	4293      	cmp	r3, r2
 8007154:	d00f      	beq.n	8007176 <TIM_Base_SetConfig+0x8a>
 8007156:	687b      	ldr	r3, [r7, #4]
 8007158:	4a20      	ldr	r2, [pc, #128]	; (80071dc <TIM_Base_SetConfig+0xf0>)
 800715a:	4293      	cmp	r3, r2
 800715c:	d00b      	beq.n	8007176 <TIM_Base_SetConfig+0x8a>
 800715e:	687b      	ldr	r3, [r7, #4]
 8007160:	4a1f      	ldr	r2, [pc, #124]	; (80071e0 <TIM_Base_SetConfig+0xf4>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d007      	beq.n	8007176 <TIM_Base_SetConfig+0x8a>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	4a1e      	ldr	r2, [pc, #120]	; (80071e4 <TIM_Base_SetConfig+0xf8>)
 800716a:	4293      	cmp	r3, r2
 800716c:	d003      	beq.n	8007176 <TIM_Base_SetConfig+0x8a>
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	4a1d      	ldr	r2, [pc, #116]	; (80071e8 <TIM_Base_SetConfig+0xfc>)
 8007172:	4293      	cmp	r3, r2
 8007174:	d108      	bne.n	8007188 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007176:	68fb      	ldr	r3, [r7, #12]
 8007178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800717c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800717e:	683b      	ldr	r3, [r7, #0]
 8007180:	68db      	ldr	r3, [r3, #12]
 8007182:	68fa      	ldr	r2, [r7, #12]
 8007184:	4313      	orrs	r3, r2
 8007186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007188:	68fb      	ldr	r3, [r7, #12]
 800718a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	4313      	orrs	r3, r2
 8007194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007196:	687b      	ldr	r3, [r7, #4]
 8007198:	68fa      	ldr	r2, [r7, #12]
 800719a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800719c:	683b      	ldr	r3, [r7, #0]
 800719e:	689a      	ldr	r2, [r3, #8]
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80071a4:	683b      	ldr	r3, [r7, #0]
 80071a6:	681a      	ldr	r2, [r3, #0]
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071ac:	687b      	ldr	r3, [r7, #4]
 80071ae:	4a08      	ldr	r2, [pc, #32]	; (80071d0 <TIM_Base_SetConfig+0xe4>)
 80071b0:	4293      	cmp	r3, r2
 80071b2:	d103      	bne.n	80071bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b4:	683b      	ldr	r3, [r7, #0]
 80071b6:	691a      	ldr	r2, [r3, #16]
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071bc:	687b      	ldr	r3, [r7, #4]
 80071be:	2201      	movs	r2, #1
 80071c0:	615a      	str	r2, [r3, #20]
}
 80071c2:	bf00      	nop
 80071c4:	3714      	adds	r7, #20
 80071c6:	46bd      	mov	sp, r7
 80071c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071cc:	4770      	bx	lr
 80071ce:	bf00      	nop
 80071d0:	40010000 	.word	0x40010000
 80071d4:	40000400 	.word	0x40000400
 80071d8:	40000800 	.word	0x40000800
 80071dc:	40000c00 	.word	0x40000c00
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400
 80071e8:	40014800 	.word	0x40014800

080071ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071ec:	b480      	push	{r7}
 80071ee:	b087      	sub	sp, #28
 80071f0:	af00      	add	r7, sp, #0
 80071f2:	6078      	str	r0, [r7, #4]
 80071f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80071f6:	687b      	ldr	r3, [r7, #4]
 80071f8:	6a1b      	ldr	r3, [r3, #32]
 80071fa:	f023 0201 	bic.w	r2, r3, #1
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	699b      	ldr	r3, [r3, #24]
 8007212:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007214:	68fb      	ldr	r3, [r7, #12]
 8007216:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800721a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800721c:	68fb      	ldr	r3, [r7, #12]
 800721e:	f023 0303 	bic.w	r3, r3, #3
 8007222:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007224:	683b      	ldr	r3, [r7, #0]
 8007226:	681b      	ldr	r3, [r3, #0]
 8007228:	68fa      	ldr	r2, [r7, #12]
 800722a:	4313      	orrs	r3, r2
 800722c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800722e:	697b      	ldr	r3, [r7, #20]
 8007230:	f023 0302 	bic.w	r3, r3, #2
 8007234:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007236:	683b      	ldr	r3, [r7, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	697a      	ldr	r2, [r7, #20]
 800723c:	4313      	orrs	r3, r2
 800723e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	4a1c      	ldr	r2, [pc, #112]	; (80072b4 <TIM_OC1_SetConfig+0xc8>)
 8007244:	4293      	cmp	r3, r2
 8007246:	d10c      	bne.n	8007262 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f023 0308 	bic.w	r3, r3, #8
 800724e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007250:	683b      	ldr	r3, [r7, #0]
 8007252:	68db      	ldr	r3, [r3, #12]
 8007254:	697a      	ldr	r2, [r7, #20]
 8007256:	4313      	orrs	r3, r2
 8007258:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800725a:	697b      	ldr	r3, [r7, #20]
 800725c:	f023 0304 	bic.w	r3, r3, #4
 8007260:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	4a13      	ldr	r2, [pc, #76]	; (80072b4 <TIM_OC1_SetConfig+0xc8>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d111      	bne.n	800728e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007270:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007272:	693b      	ldr	r3, [r7, #16]
 8007274:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007278:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	695b      	ldr	r3, [r3, #20]
 800727e:	693a      	ldr	r2, [r7, #16]
 8007280:	4313      	orrs	r3, r2
 8007282:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007284:	683b      	ldr	r3, [r7, #0]
 8007286:	699b      	ldr	r3, [r3, #24]
 8007288:	693a      	ldr	r2, [r7, #16]
 800728a:	4313      	orrs	r3, r2
 800728c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	693a      	ldr	r2, [r7, #16]
 8007292:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	68fa      	ldr	r2, [r7, #12]
 8007298:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800729a:	683b      	ldr	r3, [r7, #0]
 800729c:	685a      	ldr	r2, [r3, #4]
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	697a      	ldr	r2, [r7, #20]
 80072a6:	621a      	str	r2, [r3, #32]
}
 80072a8:	bf00      	nop
 80072aa:	371c      	adds	r7, #28
 80072ac:	46bd      	mov	sp, r7
 80072ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b2:	4770      	bx	lr
 80072b4:	40010000 	.word	0x40010000

080072b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072b8:	b480      	push	{r7}
 80072ba:	b087      	sub	sp, #28
 80072bc:	af00      	add	r7, sp, #0
 80072be:	6078      	str	r0, [r7, #4]
 80072c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	6a1b      	ldr	r3, [r3, #32]
 80072c6:	f023 0210 	bic.w	r2, r3, #16
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a1b      	ldr	r3, [r3, #32]
 80072d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072d4:	687b      	ldr	r3, [r7, #4]
 80072d6:	685b      	ldr	r3, [r3, #4]
 80072d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072da:	687b      	ldr	r3, [r7, #4]
 80072dc:	699b      	ldr	r3, [r3, #24]
 80072de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80072e0:	68fb      	ldr	r3, [r7, #12]
 80072e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80072e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80072e8:	68fb      	ldr	r3, [r7, #12]
 80072ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80072f0:	683b      	ldr	r3, [r7, #0]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	021b      	lsls	r3, r3, #8
 80072f6:	68fa      	ldr	r2, [r7, #12]
 80072f8:	4313      	orrs	r3, r2
 80072fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80072fc:	697b      	ldr	r3, [r7, #20]
 80072fe:	f023 0320 	bic.w	r3, r3, #32
 8007302:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007304:	683b      	ldr	r3, [r7, #0]
 8007306:	689b      	ldr	r3, [r3, #8]
 8007308:	011b      	lsls	r3, r3, #4
 800730a:	697a      	ldr	r2, [r7, #20]
 800730c:	4313      	orrs	r3, r2
 800730e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	4a1e      	ldr	r2, [pc, #120]	; (800738c <TIM_OC2_SetConfig+0xd4>)
 8007314:	4293      	cmp	r3, r2
 8007316:	d10d      	bne.n	8007334 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007318:	697b      	ldr	r3, [r7, #20]
 800731a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800731e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007320:	683b      	ldr	r3, [r7, #0]
 8007322:	68db      	ldr	r3, [r3, #12]
 8007324:	011b      	lsls	r3, r3, #4
 8007326:	697a      	ldr	r2, [r7, #20]
 8007328:	4313      	orrs	r3, r2
 800732a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007332:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007334:	687b      	ldr	r3, [r7, #4]
 8007336:	4a15      	ldr	r2, [pc, #84]	; (800738c <TIM_OC2_SetConfig+0xd4>)
 8007338:	4293      	cmp	r3, r2
 800733a:	d113      	bne.n	8007364 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800733c:	693b      	ldr	r3, [r7, #16]
 800733e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007342:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007344:	693b      	ldr	r3, [r7, #16]
 8007346:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800734a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800734c:	683b      	ldr	r3, [r7, #0]
 800734e:	695b      	ldr	r3, [r3, #20]
 8007350:	009b      	lsls	r3, r3, #2
 8007352:	693a      	ldr	r2, [r7, #16]
 8007354:	4313      	orrs	r3, r2
 8007356:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	009b      	lsls	r3, r3, #2
 800735e:	693a      	ldr	r2, [r7, #16]
 8007360:	4313      	orrs	r3, r2
 8007362:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	693a      	ldr	r2, [r7, #16]
 8007368:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	68fa      	ldr	r2, [r7, #12]
 800736e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007370:	683b      	ldr	r3, [r7, #0]
 8007372:	685a      	ldr	r2, [r3, #4]
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	697a      	ldr	r2, [r7, #20]
 800737c:	621a      	str	r2, [r3, #32]
}
 800737e:	bf00      	nop
 8007380:	371c      	adds	r7, #28
 8007382:	46bd      	mov	sp, r7
 8007384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007388:	4770      	bx	lr
 800738a:	bf00      	nop
 800738c:	40010000 	.word	0x40010000

08007390 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007390:	b480      	push	{r7}
 8007392:	b087      	sub	sp, #28
 8007394:	af00      	add	r7, sp, #0
 8007396:	6078      	str	r0, [r7, #4]
 8007398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	6a1b      	ldr	r3, [r3, #32]
 800739e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	6a1b      	ldr	r3, [r3, #32]
 80073aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073ac:	687b      	ldr	r3, [r7, #4]
 80073ae:	685b      	ldr	r3, [r3, #4]
 80073b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	69db      	ldr	r3, [r3, #28]
 80073b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073c0:	68fb      	ldr	r3, [r7, #12]
 80073c2:	f023 0303 	bic.w	r3, r3, #3
 80073c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073c8:	683b      	ldr	r3, [r7, #0]
 80073ca:	681b      	ldr	r3, [r3, #0]
 80073cc:	68fa      	ldr	r2, [r7, #12]
 80073ce:	4313      	orrs	r3, r2
 80073d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80073d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80073da:	683b      	ldr	r3, [r7, #0]
 80073dc:	689b      	ldr	r3, [r3, #8]
 80073de:	021b      	lsls	r3, r3, #8
 80073e0:	697a      	ldr	r2, [r7, #20]
 80073e2:	4313      	orrs	r3, r2
 80073e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	4a1d      	ldr	r2, [pc, #116]	; (8007460 <TIM_OC3_SetConfig+0xd0>)
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d10d      	bne.n	800740a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80073ee:	697b      	ldr	r3, [r7, #20]
 80073f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80073f6:	683b      	ldr	r3, [r7, #0]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	021b      	lsls	r3, r3, #8
 80073fc:	697a      	ldr	r2, [r7, #20]
 80073fe:	4313      	orrs	r3, r2
 8007400:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007402:	697b      	ldr	r3, [r7, #20]
 8007404:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007408:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800740a:	687b      	ldr	r3, [r7, #4]
 800740c:	4a14      	ldr	r2, [pc, #80]	; (8007460 <TIM_OC3_SetConfig+0xd0>)
 800740e:	4293      	cmp	r3, r2
 8007410:	d113      	bne.n	800743a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007412:	693b      	ldr	r3, [r7, #16]
 8007414:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007418:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800741a:	693b      	ldr	r3, [r7, #16]
 800741c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007420:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007422:	683b      	ldr	r3, [r7, #0]
 8007424:	695b      	ldr	r3, [r3, #20]
 8007426:	011b      	lsls	r3, r3, #4
 8007428:	693a      	ldr	r2, [r7, #16]
 800742a:	4313      	orrs	r3, r2
 800742c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800742e:	683b      	ldr	r3, [r7, #0]
 8007430:	699b      	ldr	r3, [r3, #24]
 8007432:	011b      	lsls	r3, r3, #4
 8007434:	693a      	ldr	r2, [r7, #16]
 8007436:	4313      	orrs	r3, r2
 8007438:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	693a      	ldr	r2, [r7, #16]
 800743e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007440:	687b      	ldr	r3, [r7, #4]
 8007442:	68fa      	ldr	r2, [r7, #12]
 8007444:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685a      	ldr	r2, [r3, #4]
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	697a      	ldr	r2, [r7, #20]
 8007452:	621a      	str	r2, [r3, #32]
}
 8007454:	bf00      	nop
 8007456:	371c      	adds	r7, #28
 8007458:	46bd      	mov	sp, r7
 800745a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745e:	4770      	bx	lr
 8007460:	40010000 	.word	0x40010000

08007464 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007464:	b480      	push	{r7}
 8007466:	b087      	sub	sp, #28
 8007468:	af00      	add	r7, sp, #0
 800746a:	6078      	str	r0, [r7, #4]
 800746c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800746e:	687b      	ldr	r3, [r7, #4]
 8007470:	6a1b      	ldr	r3, [r3, #32]
 8007472:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800747a:	687b      	ldr	r3, [r7, #4]
 800747c:	6a1b      	ldr	r3, [r3, #32]
 800747e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	685b      	ldr	r3, [r3, #4]
 8007484:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800748c:	68fb      	ldr	r3, [r7, #12]
 800748e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007492:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007494:	68fb      	ldr	r3, [r7, #12]
 8007496:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800749a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800749c:	683b      	ldr	r3, [r7, #0]
 800749e:	681b      	ldr	r3, [r3, #0]
 80074a0:	021b      	lsls	r3, r3, #8
 80074a2:	68fa      	ldr	r2, [r7, #12]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074a8:	693b      	ldr	r3, [r7, #16]
 80074aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074b0:	683b      	ldr	r3, [r7, #0]
 80074b2:	689b      	ldr	r3, [r3, #8]
 80074b4:	031b      	lsls	r3, r3, #12
 80074b6:	693a      	ldr	r2, [r7, #16]
 80074b8:	4313      	orrs	r3, r2
 80074ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	4a10      	ldr	r2, [pc, #64]	; (8007500 <TIM_OC4_SetConfig+0x9c>)
 80074c0:	4293      	cmp	r3, r2
 80074c2:	d109      	bne.n	80074d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80074c4:	697b      	ldr	r3, [r7, #20]
 80074c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80074cc:	683b      	ldr	r3, [r7, #0]
 80074ce:	695b      	ldr	r3, [r3, #20]
 80074d0:	019b      	lsls	r3, r3, #6
 80074d2:	697a      	ldr	r2, [r7, #20]
 80074d4:	4313      	orrs	r3, r2
 80074d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074d8:	687b      	ldr	r3, [r7, #4]
 80074da:	697a      	ldr	r2, [r7, #20]
 80074dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	68fa      	ldr	r2, [r7, #12]
 80074e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	685a      	ldr	r2, [r3, #4]
 80074e8:	687b      	ldr	r3, [r7, #4]
 80074ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	693a      	ldr	r2, [r7, #16]
 80074f0:	621a      	str	r2, [r3, #32]
}
 80074f2:	bf00      	nop
 80074f4:	371c      	adds	r7, #28
 80074f6:	46bd      	mov	sp, r7
 80074f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074fc:	4770      	bx	lr
 80074fe:	bf00      	nop
 8007500:	40010000 	.word	0x40010000

08007504 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8007504:	b480      	push	{r7}
 8007506:	b087      	sub	sp, #28
 8007508:	af00      	add	r7, sp, #0
 800750a:	60f8      	str	r0, [r7, #12]
 800750c:	60b9      	str	r1, [r7, #8]
 800750e:	607a      	str	r2, [r7, #4]
 8007510:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f023 0201 	bic.w	r2, r3, #1
 800751a:	68fb      	ldr	r3, [r7, #12]
 800751c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800751e:	68fb      	ldr	r3, [r7, #12]
 8007520:	699b      	ldr	r3, [r3, #24]
 8007522:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007524:	68fb      	ldr	r3, [r7, #12]
 8007526:	6a1b      	ldr	r3, [r3, #32]
 8007528:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	4a24      	ldr	r2, [pc, #144]	; (80075c0 <TIM_TI1_SetConfig+0xbc>)
 800752e:	4293      	cmp	r3, r2
 8007530:	d013      	beq.n	800755a <TIM_TI1_SetConfig+0x56>
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007538:	d00f      	beq.n	800755a <TIM_TI1_SetConfig+0x56>
 800753a:	68fb      	ldr	r3, [r7, #12]
 800753c:	4a21      	ldr	r2, [pc, #132]	; (80075c4 <TIM_TI1_SetConfig+0xc0>)
 800753e:	4293      	cmp	r3, r2
 8007540:	d00b      	beq.n	800755a <TIM_TI1_SetConfig+0x56>
 8007542:	68fb      	ldr	r3, [r7, #12]
 8007544:	4a20      	ldr	r2, [pc, #128]	; (80075c8 <TIM_TI1_SetConfig+0xc4>)
 8007546:	4293      	cmp	r3, r2
 8007548:	d007      	beq.n	800755a <TIM_TI1_SetConfig+0x56>
 800754a:	68fb      	ldr	r3, [r7, #12]
 800754c:	4a1f      	ldr	r2, [pc, #124]	; (80075cc <TIM_TI1_SetConfig+0xc8>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d003      	beq.n	800755a <TIM_TI1_SetConfig+0x56>
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	4a1e      	ldr	r2, [pc, #120]	; (80075d0 <TIM_TI1_SetConfig+0xcc>)
 8007556:	4293      	cmp	r3, r2
 8007558:	d101      	bne.n	800755e <TIM_TI1_SetConfig+0x5a>
 800755a:	2301      	movs	r3, #1
 800755c:	e000      	b.n	8007560 <TIM_TI1_SetConfig+0x5c>
 800755e:	2300      	movs	r3, #0
 8007560:	2b00      	cmp	r3, #0
 8007562:	d008      	beq.n	8007576 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8007564:	697b      	ldr	r3, [r7, #20]
 8007566:	f023 0303 	bic.w	r3, r3, #3
 800756a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 800756c:	697a      	ldr	r2, [r7, #20]
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4313      	orrs	r3, r2
 8007572:	617b      	str	r3, [r7, #20]
 8007574:	e003      	b.n	800757e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8007576:	697b      	ldr	r3, [r7, #20]
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800757e:	697b      	ldr	r3, [r7, #20]
 8007580:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007584:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8007586:	683b      	ldr	r3, [r7, #0]
 8007588:	011b      	lsls	r3, r3, #4
 800758a:	b2db      	uxtb	r3, r3
 800758c:	697a      	ldr	r2, [r7, #20]
 800758e:	4313      	orrs	r3, r2
 8007590:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007592:	693b      	ldr	r3, [r7, #16]
 8007594:	f023 030a 	bic.w	r3, r3, #10
 8007598:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800759a:	68bb      	ldr	r3, [r7, #8]
 800759c:	f003 030a 	and.w	r3, r3, #10
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	4313      	orrs	r3, r2
 80075a4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	697a      	ldr	r2, [r7, #20]
 80075aa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075ac:	68fb      	ldr	r3, [r7, #12]
 80075ae:	693a      	ldr	r2, [r7, #16]
 80075b0:	621a      	str	r2, [r3, #32]
}
 80075b2:	bf00      	nop
 80075b4:	371c      	adds	r7, #28
 80075b6:	46bd      	mov	sp, r7
 80075b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075bc:	4770      	bx	lr
 80075be:	bf00      	nop
 80075c0:	40010000 	.word	0x40010000
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40000c00 	.word	0x40000c00
 80075d0:	40014000 	.word	0x40014000

080075d4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075d4:	b480      	push	{r7}
 80075d6:	b087      	sub	sp, #28
 80075d8:	af00      	add	r7, sp, #0
 80075da:	60f8      	str	r0, [r7, #12]
 80075dc:	60b9      	str	r1, [r7, #8]
 80075de:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075e0:	68fb      	ldr	r3, [r7, #12]
 80075e2:	6a1b      	ldr	r3, [r3, #32]
 80075e4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075e6:	68fb      	ldr	r3, [r7, #12]
 80075e8:	6a1b      	ldr	r3, [r3, #32]
 80075ea:	f023 0201 	bic.w	r2, r3, #1
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075f2:	68fb      	ldr	r3, [r7, #12]
 80075f4:	699b      	ldr	r3, [r3, #24]
 80075f6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075f8:	693b      	ldr	r3, [r7, #16]
 80075fa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075fe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	011b      	lsls	r3, r3, #4
 8007604:	693a      	ldr	r2, [r7, #16]
 8007606:	4313      	orrs	r3, r2
 8007608:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800760a:	697b      	ldr	r3, [r7, #20]
 800760c:	f023 030a 	bic.w	r3, r3, #10
 8007610:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007612:	697a      	ldr	r2, [r7, #20]
 8007614:	68bb      	ldr	r3, [r7, #8]
 8007616:	4313      	orrs	r3, r2
 8007618:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	693a      	ldr	r2, [r7, #16]
 800761e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007620:	68fb      	ldr	r3, [r7, #12]
 8007622:	697a      	ldr	r2, [r7, #20]
 8007624:	621a      	str	r2, [r3, #32]
}
 8007626:	bf00      	nop
 8007628:	371c      	adds	r7, #28
 800762a:	46bd      	mov	sp, r7
 800762c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007630:	4770      	bx	lr

08007632 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007632:	b480      	push	{r7}
 8007634:	b087      	sub	sp, #28
 8007636:	af00      	add	r7, sp, #0
 8007638:	60f8      	str	r0, [r7, #12]
 800763a:	60b9      	str	r1, [r7, #8]
 800763c:	607a      	str	r2, [r7, #4]
 800763e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007640:	68fb      	ldr	r3, [r7, #12]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	f023 0210 	bic.w	r2, r3, #16
 8007648:	68fb      	ldr	r3, [r7, #12]
 800764a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	699b      	ldr	r3, [r3, #24]
 8007650:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007652:	68fb      	ldr	r3, [r7, #12]
 8007654:	6a1b      	ldr	r3, [r3, #32]
 8007656:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800765e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8007660:	687b      	ldr	r3, [r7, #4]
 8007662:	021b      	lsls	r3, r3, #8
 8007664:	697a      	ldr	r2, [r7, #20]
 8007666:	4313      	orrs	r3, r2
 8007668:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800766a:	697b      	ldr	r3, [r7, #20]
 800766c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007670:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8007672:	683b      	ldr	r3, [r7, #0]
 8007674:	031b      	lsls	r3, r3, #12
 8007676:	b29b      	uxth	r3, r3
 8007678:	697a      	ldr	r2, [r7, #20]
 800767a:	4313      	orrs	r3, r2
 800767c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800767e:	693b      	ldr	r3, [r7, #16]
 8007680:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007684:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8007686:	68bb      	ldr	r3, [r7, #8]
 8007688:	011b      	lsls	r3, r3, #4
 800768a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800768e:	693a      	ldr	r2, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	697a      	ldr	r2, [r7, #20]
 8007698:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	693a      	ldr	r2, [r7, #16]
 800769e:	621a      	str	r2, [r3, #32]
}
 80076a0:	bf00      	nop
 80076a2:	371c      	adds	r7, #28
 80076a4:	46bd      	mov	sp, r7
 80076a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076aa:	4770      	bx	lr

080076ac <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80076ac:	b480      	push	{r7}
 80076ae:	b087      	sub	sp, #28
 80076b0:	af00      	add	r7, sp, #0
 80076b2:	60f8      	str	r0, [r7, #12]
 80076b4:	60b9      	str	r1, [r7, #8]
 80076b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80076b8:	68fb      	ldr	r3, [r7, #12]
 80076ba:	6a1b      	ldr	r3, [r3, #32]
 80076bc:	f023 0210 	bic.w	r2, r3, #16
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80076c4:	68fb      	ldr	r3, [r7, #12]
 80076c6:	699b      	ldr	r3, [r3, #24]
 80076c8:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	6a1b      	ldr	r3, [r3, #32]
 80076ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80076d0:	697b      	ldr	r3, [r7, #20]
 80076d2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80076d6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80076d8:	687b      	ldr	r3, [r7, #4]
 80076da:	031b      	lsls	r3, r3, #12
 80076dc:	697a      	ldr	r2, [r7, #20]
 80076de:	4313      	orrs	r3, r2
 80076e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80076e8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80076ea:	68bb      	ldr	r3, [r7, #8]
 80076ec:	011b      	lsls	r3, r3, #4
 80076ee:	693a      	ldr	r2, [r7, #16]
 80076f0:	4313      	orrs	r3, r2
 80076f2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	697a      	ldr	r2, [r7, #20]
 80076f8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80076fa:	68fb      	ldr	r3, [r7, #12]
 80076fc:	693a      	ldr	r2, [r7, #16]
 80076fe:	621a      	str	r2, [r3, #32]
}
 8007700:	bf00      	nop
 8007702:	371c      	adds	r7, #28
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800770c:	b480      	push	{r7}
 800770e:	b087      	sub	sp, #28
 8007710:	af00      	add	r7, sp, #0
 8007712:	60f8      	str	r0, [r7, #12]
 8007714:	60b9      	str	r1, [r7, #8]
 8007716:	607a      	str	r2, [r7, #4]
 8007718:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800771a:	68fb      	ldr	r3, [r7, #12]
 800771c:	6a1b      	ldr	r3, [r3, #32]
 800771e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007722:	68fb      	ldr	r3, [r7, #12]
 8007724:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	69db      	ldr	r3, [r3, #28]
 800772a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	6a1b      	ldr	r3, [r3, #32]
 8007730:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8007732:	697b      	ldr	r3, [r7, #20]
 8007734:	f023 0303 	bic.w	r3, r3, #3
 8007738:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800773a:	697a      	ldr	r2, [r7, #20]
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	4313      	orrs	r3, r2
 8007740:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8007742:	697b      	ldr	r3, [r7, #20]
 8007744:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007748:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	011b      	lsls	r3, r3, #4
 800774e:	b2db      	uxtb	r3, r3
 8007750:	697a      	ldr	r2, [r7, #20]
 8007752:	4313      	orrs	r3, r2
 8007754:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8007756:	693b      	ldr	r3, [r7, #16]
 8007758:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 800775c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800775e:	68bb      	ldr	r3, [r7, #8]
 8007760:	021b      	lsls	r3, r3, #8
 8007762:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8007766:	693a      	ldr	r2, [r7, #16]
 8007768:	4313      	orrs	r3, r2
 800776a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	697a      	ldr	r2, [r7, #20]
 8007770:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8007772:	68fb      	ldr	r3, [r7, #12]
 8007774:	693a      	ldr	r2, [r7, #16]
 8007776:	621a      	str	r2, [r3, #32]
}
 8007778:	bf00      	nop
 800777a:	371c      	adds	r7, #28
 800777c:	46bd      	mov	sp, r7
 800777e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007782:	4770      	bx	lr

08007784 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8007784:	b480      	push	{r7}
 8007786:	b087      	sub	sp, #28
 8007788:	af00      	add	r7, sp, #0
 800778a:	60f8      	str	r0, [r7, #12]
 800778c:	60b9      	str	r1, [r7, #8]
 800778e:	607a      	str	r2, [r7, #4]
 8007790:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007792:	68fb      	ldr	r3, [r7, #12]
 8007794:	6a1b      	ldr	r3, [r3, #32]
 8007796:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800779e:	68fb      	ldr	r3, [r7, #12]
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	6a1b      	ldr	r3, [r3, #32]
 80077a8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80077aa:	697b      	ldr	r3, [r7, #20]
 80077ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80077b0:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	021b      	lsls	r3, r3, #8
 80077b6:	697a      	ldr	r2, [r7, #20]
 80077b8:	4313      	orrs	r3, r2
 80077ba:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80077bc:	697b      	ldr	r3, [r7, #20]
 80077be:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80077c2:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80077c4:	683b      	ldr	r3, [r7, #0]
 80077c6:	031b      	lsls	r3, r3, #12
 80077c8:	b29b      	uxth	r3, r3
 80077ca:	697a      	ldr	r2, [r7, #20]
 80077cc:	4313      	orrs	r3, r2
 80077ce:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80077d0:	693b      	ldr	r3, [r7, #16]
 80077d2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80077d6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80077d8:	68bb      	ldr	r3, [r7, #8]
 80077da:	031b      	lsls	r3, r3, #12
 80077dc:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80077e0:	693a      	ldr	r2, [r7, #16]
 80077e2:	4313      	orrs	r3, r2
 80077e4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80077e6:	68fb      	ldr	r3, [r7, #12]
 80077e8:	697a      	ldr	r2, [r7, #20]
 80077ea:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80077ec:	68fb      	ldr	r3, [r7, #12]
 80077ee:	693a      	ldr	r2, [r7, #16]
 80077f0:	621a      	str	r2, [r3, #32]
}
 80077f2:	bf00      	nop
 80077f4:	371c      	adds	r7, #28
 80077f6:	46bd      	mov	sp, r7
 80077f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fc:	4770      	bx	lr

080077fe <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80077fe:	b480      	push	{r7}
 8007800:	b085      	sub	sp, #20
 8007802:	af00      	add	r7, sp, #0
 8007804:	6078      	str	r0, [r7, #4]
 8007806:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007808:	687b      	ldr	r3, [r7, #4]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800780e:	68fb      	ldr	r3, [r7, #12]
 8007810:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007814:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8007816:	683a      	ldr	r2, [r7, #0]
 8007818:	68fb      	ldr	r3, [r7, #12]
 800781a:	4313      	orrs	r3, r2
 800781c:	f043 0307 	orr.w	r3, r3, #7
 8007820:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	68fa      	ldr	r2, [r7, #12]
 8007826:	609a      	str	r2, [r3, #8]
}
 8007828:	bf00      	nop
 800782a:	3714      	adds	r7, #20
 800782c:	46bd      	mov	sp, r7
 800782e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007832:	4770      	bx	lr

08007834 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007834:	b480      	push	{r7}
 8007836:	b087      	sub	sp, #28
 8007838:	af00      	add	r7, sp, #0
 800783a:	60f8      	str	r0, [r7, #12]
 800783c:	60b9      	str	r1, [r7, #8]
 800783e:	607a      	str	r2, [r7, #4]
 8007840:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007842:	68fb      	ldr	r3, [r7, #12]
 8007844:	689b      	ldr	r3, [r3, #8]
 8007846:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007848:	697b      	ldr	r3, [r7, #20]
 800784a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800784e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007850:	683b      	ldr	r3, [r7, #0]
 8007852:	021a      	lsls	r2, r3, #8
 8007854:	687b      	ldr	r3, [r7, #4]
 8007856:	431a      	orrs	r2, r3
 8007858:	68bb      	ldr	r3, [r7, #8]
 800785a:	4313      	orrs	r3, r2
 800785c:	697a      	ldr	r2, [r7, #20]
 800785e:	4313      	orrs	r3, r2
 8007860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	697a      	ldr	r2, [r7, #20]
 8007866:	609a      	str	r2, [r3, #8]
}
 8007868:	bf00      	nop
 800786a:	371c      	adds	r7, #28
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007874:	b480      	push	{r7}
 8007876:	b087      	sub	sp, #28
 8007878:	af00      	add	r7, sp, #0
 800787a:	60f8      	str	r0, [r7, #12]
 800787c:	60b9      	str	r1, [r7, #8]
 800787e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007880:	68bb      	ldr	r3, [r7, #8]
 8007882:	f003 031f 	and.w	r3, r3, #31
 8007886:	2201      	movs	r2, #1
 8007888:	fa02 f303 	lsl.w	r3, r2, r3
 800788c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800788e:	68fb      	ldr	r3, [r7, #12]
 8007890:	6a1a      	ldr	r2, [r3, #32]
 8007892:	697b      	ldr	r3, [r7, #20]
 8007894:	43db      	mvns	r3, r3
 8007896:	401a      	ands	r2, r3
 8007898:	68fb      	ldr	r3, [r7, #12]
 800789a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800789c:	68fb      	ldr	r3, [r7, #12]
 800789e:	6a1a      	ldr	r2, [r3, #32]
 80078a0:	68bb      	ldr	r3, [r7, #8]
 80078a2:	f003 031f 	and.w	r3, r3, #31
 80078a6:	6879      	ldr	r1, [r7, #4]
 80078a8:	fa01 f303 	lsl.w	r3, r1, r3
 80078ac:	431a      	orrs	r2, r3
 80078ae:	68fb      	ldr	r3, [r7, #12]
 80078b0:	621a      	str	r2, [r3, #32]
}
 80078b2:	bf00      	nop
 80078b4:	371c      	adds	r7, #28
 80078b6:	46bd      	mov	sp, r7
 80078b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078bc:	4770      	bx	lr
	...

080078c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
 80078c6:	6078      	str	r0, [r7, #4]
 80078c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078d0:	2b01      	cmp	r3, #1
 80078d2:	d101      	bne.n	80078d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80078d4:	2302      	movs	r3, #2
 80078d6:	e050      	b.n	800797a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	2201      	movs	r2, #1
 80078dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078e0:	687b      	ldr	r3, [r7, #4]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80078e8:	687b      	ldr	r3, [r7, #4]
 80078ea:	681b      	ldr	r3, [r3, #0]
 80078ec:	685b      	ldr	r3, [r3, #4]
 80078ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80078fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007900:	683b      	ldr	r3, [r7, #0]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	68fa      	ldr	r2, [r7, #12]
 8007906:	4313      	orrs	r3, r2
 8007908:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	68fa      	ldr	r2, [r7, #12]
 8007910:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	4a1c      	ldr	r2, [pc, #112]	; (8007988 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007918:	4293      	cmp	r3, r2
 800791a:	d018      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007924:	d013      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4a18      	ldr	r2, [pc, #96]	; (800798c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800792c:	4293      	cmp	r3, r2
 800792e:	d00e      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	681b      	ldr	r3, [r3, #0]
 8007934:	4a16      	ldr	r2, [pc, #88]	; (8007990 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007936:	4293      	cmp	r3, r2
 8007938:	d009      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	4a15      	ldr	r2, [pc, #84]	; (8007994 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007940:	4293      	cmp	r3, r2
 8007942:	d004      	beq.n	800794e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	681b      	ldr	r3, [r3, #0]
 8007948:	4a13      	ldr	r2, [pc, #76]	; (8007998 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800794a:	4293      	cmp	r3, r2
 800794c:	d10c      	bne.n	8007968 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800794e:	68bb      	ldr	r3, [r7, #8]
 8007950:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007954:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007956:	683b      	ldr	r3, [r7, #0]
 8007958:	685b      	ldr	r3, [r3, #4]
 800795a:	68ba      	ldr	r2, [r7, #8]
 800795c:	4313      	orrs	r3, r2
 800795e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	68ba      	ldr	r2, [r7, #8]
 8007966:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	2201      	movs	r2, #1
 800796c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007970:	687b      	ldr	r3, [r7, #4]
 8007972:	2200      	movs	r2, #0
 8007974:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007978:	2300      	movs	r3, #0
}
 800797a:	4618      	mov	r0, r3
 800797c:	3714      	adds	r7, #20
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
 8007986:	bf00      	nop
 8007988:	40010000 	.word	0x40010000
 800798c:	40000400 	.word	0x40000400
 8007990:	40000800 	.word	0x40000800
 8007994:	40000c00 	.word	0x40000c00
 8007998:	40014000 	.word	0x40014000

0800799c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800799c:	b480      	push	{r7}
 800799e:	b083      	sub	sp, #12
 80079a0:	af00      	add	r7, sp, #0
 80079a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80079a4:	bf00      	nop
 80079a6:	370c      	adds	r7, #12
 80079a8:	46bd      	mov	sp, r7
 80079aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079ae:	4770      	bx	lr

080079b0 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80079b8:	bf00      	nop
 80079ba:	370c      	adds	r7, #12
 80079bc:	46bd      	mov	sp, r7
 80079be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c2:	4770      	bx	lr

080079c4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b082      	sub	sp, #8
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2b00      	cmp	r3, #0
 80079d0:	d101      	bne.n	80079d6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80079d2:	2301      	movs	r3, #1
 80079d4:	e03f      	b.n	8007a56 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80079dc:	b2db      	uxtb	r3, r3
 80079de:	2b00      	cmp	r3, #0
 80079e0:	d106      	bne.n	80079f0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80079ea:	6878      	ldr	r0, [r7, #4]
 80079ec:	f7fb fc80 	bl	80032f0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80079f0:	687b      	ldr	r3, [r7, #4]
 80079f2:	2224      	movs	r2, #36	; 0x24
 80079f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68da      	ldr	r2, [r3, #12]
 80079fe:	687b      	ldr	r3, [r7, #4]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8007a06:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007a08:	6878      	ldr	r0, [r7, #4]
 8007a0a:	f000 fddf 	bl	80085cc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	681b      	ldr	r3, [r3, #0]
 8007a12:	691a      	ldr	r2, [r3, #16]
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	681b      	ldr	r3, [r3, #0]
 8007a18:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007a1c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	695a      	ldr	r2, [r3, #20]
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007a2c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007a2e:	687b      	ldr	r3, [r7, #4]
 8007a30:	681b      	ldr	r3, [r3, #0]
 8007a32:	68da      	ldr	r2, [r3, #12]
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007a3c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007a3e:	687b      	ldr	r3, [r7, #4]
 8007a40:	2200      	movs	r2, #0
 8007a42:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007a44:	687b      	ldr	r3, [r7, #4]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007a4c:	687b      	ldr	r3, [r7, #4]
 8007a4e:	2220      	movs	r2, #32
 8007a50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007a54:	2300      	movs	r3, #0
}
 8007a56:	4618      	mov	r0, r3
 8007a58:	3708      	adds	r7, #8
 8007a5a:	46bd      	mov	sp, r7
 8007a5c:	bd80      	pop	{r7, pc}

08007a5e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007a5e:	b580      	push	{r7, lr}
 8007a60:	b08a      	sub	sp, #40	; 0x28
 8007a62:	af02      	add	r7, sp, #8
 8007a64:	60f8      	str	r0, [r7, #12]
 8007a66:	60b9      	str	r1, [r7, #8]
 8007a68:	603b      	str	r3, [r7, #0]
 8007a6a:	4613      	mov	r3, r2
 8007a6c:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007a6e:	2300      	movs	r3, #0
 8007a70:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a78:	b2db      	uxtb	r3, r3
 8007a7a:	2b20      	cmp	r3, #32
 8007a7c:	d17c      	bne.n	8007b78 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a7e:	68bb      	ldr	r3, [r7, #8]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d002      	beq.n	8007a8a <HAL_UART_Transmit+0x2c>
 8007a84:	88fb      	ldrh	r3, [r7, #6]
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d101      	bne.n	8007a8e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007a8a:	2301      	movs	r3, #1
 8007a8c:	e075      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a8e:	68fb      	ldr	r3, [r7, #12]
 8007a90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a94:	2b01      	cmp	r3, #1
 8007a96:	d101      	bne.n	8007a9c <HAL_UART_Transmit+0x3e>
 8007a98:	2302      	movs	r3, #2
 8007a9a:	e06e      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
 8007a9c:	68fb      	ldr	r3, [r7, #12]
 8007a9e:	2201      	movs	r2, #1
 8007aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2200      	movs	r2, #0
 8007aa8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007aaa:	68fb      	ldr	r3, [r7, #12]
 8007aac:	2221      	movs	r2, #33	; 0x21
 8007aae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8007ab2:	f7fb fd97 	bl	80035e4 <HAL_GetTick>
 8007ab6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007ab8:	68fb      	ldr	r3, [r7, #12]
 8007aba:	88fa      	ldrh	r2, [r7, #6]
 8007abc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007abe:	68fb      	ldr	r3, [r7, #12]
 8007ac0:	88fa      	ldrh	r2, [r7, #6]
 8007ac2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	689b      	ldr	r3, [r3, #8]
 8007ac8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007acc:	d108      	bne.n	8007ae0 <HAL_UART_Transmit+0x82>
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	691b      	ldr	r3, [r3, #16]
 8007ad2:	2b00      	cmp	r3, #0
 8007ad4:	d104      	bne.n	8007ae0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8007ad6:	2300      	movs	r3, #0
 8007ad8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8007ada:	68bb      	ldr	r3, [r7, #8]
 8007adc:	61bb      	str	r3, [r7, #24]
 8007ade:	e003      	b.n	8007ae8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8007ae0:	68bb      	ldr	r3, [r7, #8]
 8007ae2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8007ae4:	2300      	movs	r3, #0
 8007ae6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	2200      	movs	r2, #0
 8007aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8007af0:	e02a      	b.n	8007b48 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8007af2:	683b      	ldr	r3, [r7, #0]
 8007af4:	9300      	str	r3, [sp, #0]
 8007af6:	697b      	ldr	r3, [r7, #20]
 8007af8:	2200      	movs	r2, #0
 8007afa:	2180      	movs	r1, #128	; 0x80
 8007afc:	68f8      	ldr	r0, [r7, #12]
 8007afe:	f000 fb1f 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 8007b02:	4603      	mov	r3, r0
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d001      	beq.n	8007b0c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8007b08:	2303      	movs	r3, #3
 8007b0a:	e036      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8007b0c:	69fb      	ldr	r3, [r7, #28]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10b      	bne.n	8007b2a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	881b      	ldrh	r3, [r3, #0]
 8007b16:	461a      	mov	r2, r3
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8007b20:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8007b22:	69bb      	ldr	r3, [r7, #24]
 8007b24:	3302      	adds	r3, #2
 8007b26:	61bb      	str	r3, [r7, #24]
 8007b28:	e007      	b.n	8007b3a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007b2a:	69fb      	ldr	r3, [r7, #28]
 8007b2c:	781a      	ldrb	r2, [r3, #0]
 8007b2e:	68fb      	ldr	r3, [r7, #12]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007b34:	69fb      	ldr	r3, [r7, #28]
 8007b36:	3301      	adds	r3, #1
 8007b38:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007b3a:	68fb      	ldr	r3, [r7, #12]
 8007b3c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b3e:	b29b      	uxth	r3, r3
 8007b40:	3b01      	subs	r3, #1
 8007b42:	b29a      	uxth	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007b4c:	b29b      	uxth	r3, r3
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1cf      	bne.n	8007af2 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007b52:	683b      	ldr	r3, [r7, #0]
 8007b54:	9300      	str	r3, [sp, #0]
 8007b56:	697b      	ldr	r3, [r7, #20]
 8007b58:	2200      	movs	r2, #0
 8007b5a:	2140      	movs	r1, #64	; 0x40
 8007b5c:	68f8      	ldr	r0, [r7, #12]
 8007b5e:	f000 faef 	bl	8008140 <UART_WaitOnFlagUntilTimeout>
 8007b62:	4603      	mov	r3, r0
 8007b64:	2b00      	cmp	r3, #0
 8007b66:	d001      	beq.n	8007b6c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007b68:	2303      	movs	r3, #3
 8007b6a:	e006      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007b6c:	68fb      	ldr	r3, [r7, #12]
 8007b6e:	2220      	movs	r2, #32
 8007b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007b74:	2300      	movs	r3, #0
 8007b76:	e000      	b.n	8007b7a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007b78:	2302      	movs	r3, #2
  }
}
 8007b7a:	4618      	mov	r0, r3
 8007b7c:	3720      	adds	r7, #32
 8007b7e:	46bd      	mov	sp, r7
 8007b80:	bd80      	pop	{r7, pc}

08007b82 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007b82:	b580      	push	{r7, lr}
 8007b84:	b084      	sub	sp, #16
 8007b86:	af00      	add	r7, sp, #0
 8007b88:	60f8      	str	r0, [r7, #12]
 8007b8a:	60b9      	str	r1, [r7, #8]
 8007b8c:	4613      	mov	r3, r2
 8007b8e:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007b90:	68fb      	ldr	r3, [r7, #12]
 8007b92:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007b96:	b2db      	uxtb	r3, r3
 8007b98:	2b20      	cmp	r3, #32
 8007b9a:	d11d      	bne.n	8007bd8 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007b9c:	68bb      	ldr	r3, [r7, #8]
 8007b9e:	2b00      	cmp	r3, #0
 8007ba0:	d002      	beq.n	8007ba8 <HAL_UART_Receive_IT+0x26>
 8007ba2:	88fb      	ldrh	r3, [r7, #6]
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d101      	bne.n	8007bac <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007ba8:	2301      	movs	r3, #1
 8007baa:	e016      	b.n	8007bda <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007bac:	68fb      	ldr	r3, [r7, #12]
 8007bae:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bb2:	2b01      	cmp	r3, #1
 8007bb4:	d101      	bne.n	8007bba <HAL_UART_Receive_IT+0x38>
 8007bb6:	2302      	movs	r3, #2
 8007bb8:	e00f      	b.n	8007bda <HAL_UART_Receive_IT+0x58>
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007bc2:	68fb      	ldr	r3, [r7, #12]
 8007bc4:	2200      	movs	r2, #0
 8007bc6:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007bc8:	88fb      	ldrh	r3, [r7, #6]
 8007bca:	461a      	mov	r2, r3
 8007bcc:	68b9      	ldr	r1, [r7, #8]
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fb24 	bl	800821c <UART_Start_Receive_IT>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	e000      	b.n	8007bda <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007bd8:	2302      	movs	r3, #2
  }
}
 8007bda:	4618      	mov	r0, r3
 8007bdc:	3710      	adds	r7, #16
 8007bde:	46bd      	mov	sp, r7
 8007be0:	bd80      	pop	{r7, pc}
	...

08007be4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007be4:	b580      	push	{r7, lr}
 8007be6:	b0ba      	sub	sp, #232	; 0xe8
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007bec:	687b      	ldr	r3, [r7, #4]
 8007bee:	681b      	ldr	r3, [r3, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	68db      	ldr	r3, [r3, #12]
 8007bfc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	681b      	ldr	r3, [r3, #0]
 8007c04:	695b      	ldr	r3, [r3, #20]
 8007c06:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007c0a:	2300      	movs	r3, #0
 8007c0c:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007c10:	2300      	movs	r3, #0
 8007c12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c1a:	f003 030f 	and.w	r3, r3, #15
 8007c1e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007c22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d10f      	bne.n	8007c4a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007c2a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c2e:	f003 0320 	and.w	r3, r3, #32
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d009      	beq.n	8007c4a <HAL_UART_IRQHandler+0x66>
 8007c36:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c3a:	f003 0320 	and.w	r3, r3, #32
 8007c3e:	2b00      	cmp	r3, #0
 8007c40:	d003      	beq.n	8007c4a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007c42:	6878      	ldr	r0, [r7, #4]
 8007c44:	f000 fc07 	bl	8008456 <UART_Receive_IT>
      return;
 8007c48:	e256      	b.n	80080f8 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007c4a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	f000 80de 	beq.w	8007e10 <HAL_UART_IRQHandler+0x22c>
 8007c54:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007c58:	f003 0301 	and.w	r3, r3, #1
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d106      	bne.n	8007c6e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007c60:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c64:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	f000 80d1 	beq.w	8007e10 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007c6e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c72:	f003 0301 	and.w	r3, r3, #1
 8007c76:	2b00      	cmp	r3, #0
 8007c78:	d00b      	beq.n	8007c92 <HAL_UART_IRQHandler+0xae>
 8007c7a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007c7e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d005      	beq.n	8007c92 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c8a:	f043 0201 	orr.w	r2, r3, #1
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007c92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007c96:	f003 0304 	and.w	r3, r3, #4
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d00b      	beq.n	8007cb6 <HAL_UART_IRQHandler+0xd2>
 8007c9e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007ca2:	f003 0301 	and.w	r3, r3, #1
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d005      	beq.n	8007cb6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cae:	f043 0202 	orr.w	r2, r3, #2
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007cb6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cba:	f003 0302 	and.w	r3, r3, #2
 8007cbe:	2b00      	cmp	r3, #0
 8007cc0:	d00b      	beq.n	8007cda <HAL_UART_IRQHandler+0xf6>
 8007cc2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d005      	beq.n	8007cda <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007cd2:	f043 0204 	orr.w	r2, r3, #4
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007cda:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cde:	f003 0308 	and.w	r3, r3, #8
 8007ce2:	2b00      	cmp	r3, #0
 8007ce4:	d011      	beq.n	8007d0a <HAL_UART_IRQHandler+0x126>
 8007ce6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007cea:	f003 0320 	and.w	r3, r3, #32
 8007cee:	2b00      	cmp	r3, #0
 8007cf0:	d105      	bne.n	8007cfe <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007cf2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007cf6:	f003 0301 	and.w	r3, r3, #1
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	d005      	beq.n	8007d0a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d02:	f043 0208 	orr.w	r2, r3, #8
 8007d06:	687b      	ldr	r3, [r7, #4]
 8007d08:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007d0a:	687b      	ldr	r3, [r7, #4]
 8007d0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	f000 81ed 	beq.w	80080ee <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007d14:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d008      	beq.n	8007d32 <HAL_UART_IRQHandler+0x14e>
 8007d20:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d24:	f003 0320 	and.w	r3, r3, #32
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d002      	beq.n	8007d32 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007d2c:	6878      	ldr	r0, [r7, #4]
 8007d2e:	f000 fb92 	bl	8008456 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007d32:	687b      	ldr	r3, [r7, #4]
 8007d34:	681b      	ldr	r3, [r3, #0]
 8007d36:	695b      	ldr	r3, [r3, #20]
 8007d38:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d3c:	2b40      	cmp	r3, #64	; 0x40
 8007d3e:	bf0c      	ite	eq
 8007d40:	2301      	moveq	r3, #1
 8007d42:	2300      	movne	r3, #0
 8007d44:	b2db      	uxtb	r3, r3
 8007d46:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007d4e:	f003 0308 	and.w	r3, r3, #8
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d103      	bne.n	8007d5e <HAL_UART_IRQHandler+0x17a>
 8007d56:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007d5a:	2b00      	cmp	r3, #0
 8007d5c:	d04f      	beq.n	8007dfe <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007d5e:	6878      	ldr	r0, [r7, #4]
 8007d60:	f000 fa9a 	bl	8008298 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	681b      	ldr	r3, [r3, #0]
 8007d68:	695b      	ldr	r3, [r3, #20]
 8007d6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d6e:	2b40      	cmp	r3, #64	; 0x40
 8007d70:	d141      	bne.n	8007df6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	3314      	adds	r3, #20
 8007d78:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d7c:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007d80:	e853 3f00 	ldrex	r3, [r3]
 8007d84:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007d88:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007d8c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007d90:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	3314      	adds	r3, #20
 8007d9a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007d9e:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007da2:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007daa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007dae:	e841 2300 	strex	r3, r2, [r1]
 8007db2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007db6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007dba:	2b00      	cmp	r3, #0
 8007dbc:	d1d9      	bne.n	8007d72 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007dbe:	687b      	ldr	r3, [r7, #4]
 8007dc0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	d013      	beq.n	8007dee <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007dc6:	687b      	ldr	r3, [r7, #4]
 8007dc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dca:	4a7d      	ldr	r2, [pc, #500]	; (8007fc0 <HAL_UART_IRQHandler+0x3dc>)
 8007dcc:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007dce:	687b      	ldr	r3, [r7, #4]
 8007dd0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007dd2:	4618      	mov	r0, r3
 8007dd4:	f7fc f965 	bl	80040a2 <HAL_DMA_Abort_IT>
 8007dd8:	4603      	mov	r3, r0
 8007dda:	2b00      	cmp	r3, #0
 8007ddc:	d016      	beq.n	8007e0c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007de4:	687a      	ldr	r2, [r7, #4]
 8007de6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007de8:	4610      	mov	r0, r2
 8007dea:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dec:	e00e      	b.n	8007e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007dee:	6878      	ldr	r0, [r7, #4]
 8007df0:	f000 f990 	bl	8008114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007df4:	e00a      	b.n	8007e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007df6:	6878      	ldr	r0, [r7, #4]
 8007df8:	f000 f98c 	bl	8008114 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007dfc:	e006      	b.n	8007e0c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007dfe:	6878      	ldr	r0, [r7, #4]
 8007e00:	f000 f988 	bl	8008114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	2200      	movs	r2, #0
 8007e08:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007e0a:	e170      	b.n	80080ee <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e0c:	bf00      	nop
    return;
 8007e0e:	e16e      	b.n	80080ee <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e14:	2b01      	cmp	r3, #1
 8007e16:	f040 814a 	bne.w	80080ae <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007e1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007e1e:	f003 0310 	and.w	r3, r3, #16
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	f000 8143 	beq.w	80080ae <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007e28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 813c 	beq.w	80080ae <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007e36:	2300      	movs	r3, #0
 8007e38:	60bb      	str	r3, [r7, #8]
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	60bb      	str	r3, [r7, #8]
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	60bb      	str	r3, [r7, #8]
 8007e4a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007e4c:	687b      	ldr	r3, [r7, #4]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	695b      	ldr	r3, [r3, #20]
 8007e52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007e56:	2b40      	cmp	r3, #64	; 0x40
 8007e58:	f040 80b4 	bne.w	8007fc4 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007e68:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	f000 8140 	beq.w	80080f2 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007e72:	687b      	ldr	r3, [r7, #4]
 8007e74:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007e76:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e7a:	429a      	cmp	r2, r3
 8007e7c:	f080 8139 	bcs.w	80080f2 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007e86:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e8c:	69db      	ldr	r3, [r3, #28]
 8007e8e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007e92:	f000 8088 	beq.w	8007fa6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	681b      	ldr	r3, [r3, #0]
 8007e9a:	330c      	adds	r3, #12
 8007e9c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ea0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007ea4:	e853 3f00 	ldrex	r3, [r3]
 8007ea8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007eac:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007eb0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007eb4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	681b      	ldr	r3, [r3, #0]
 8007ebc:	330c      	adds	r3, #12
 8007ebe:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007ec2:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007ec6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eca:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007ece:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007ed2:	e841 2300 	strex	r3, r2, [r1]
 8007ed6:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007eda:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d1d9      	bne.n	8007e96 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007ee2:	687b      	ldr	r3, [r7, #4]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	3314      	adds	r3, #20
 8007ee8:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eea:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007eec:	e853 3f00 	ldrex	r3, [r3]
 8007ef0:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007ef2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007ef4:	f023 0301 	bic.w	r3, r3, #1
 8007ef8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007efc:	687b      	ldr	r3, [r7, #4]
 8007efe:	681b      	ldr	r3, [r3, #0]
 8007f00:	3314      	adds	r3, #20
 8007f02:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007f06:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007f0a:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f0c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007f0e:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007f12:	e841 2300 	strex	r3, r2, [r1]
 8007f16:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007f18:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007f1a:	2b00      	cmp	r3, #0
 8007f1c:	d1e1      	bne.n	8007ee2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	681b      	ldr	r3, [r3, #0]
 8007f22:	3314      	adds	r3, #20
 8007f24:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f26:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007f28:	e853 3f00 	ldrex	r3, [r3]
 8007f2c:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007f2e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007f34:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007f38:	687b      	ldr	r3, [r7, #4]
 8007f3a:	681b      	ldr	r3, [r3, #0]
 8007f3c:	3314      	adds	r3, #20
 8007f3e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007f42:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007f44:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f46:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007f48:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007f4a:	e841 2300 	strex	r3, r2, [r1]
 8007f4e:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007f50:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d1e3      	bne.n	8007f1e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2220      	movs	r2, #32
 8007f5a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	2200      	movs	r2, #0
 8007f62:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	330c      	adds	r3, #12
 8007f6a:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007f6e:	e853 3f00 	ldrex	r3, [r3]
 8007f72:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007f74:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007f76:	f023 0310 	bic.w	r3, r3, #16
 8007f7a:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	681b      	ldr	r3, [r3, #0]
 8007f82:	330c      	adds	r3, #12
 8007f84:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007f88:	65ba      	str	r2, [r7, #88]	; 0x58
 8007f8a:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f8c:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007f8e:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007f90:	e841 2300 	strex	r3, r2, [r1]
 8007f94:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007f96:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007f98:	2b00      	cmp	r3, #0
 8007f9a:	d1e3      	bne.n	8007f64 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fa0:	4618      	mov	r0, r3
 8007fa2:	f7fc f80e 	bl	8003fc2 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fae:	b29b      	uxth	r3, r3
 8007fb0:	1ad3      	subs	r3, r2, r3
 8007fb2:	b29b      	uxth	r3, r3
 8007fb4:	4619      	mov	r1, r3
 8007fb6:	6878      	ldr	r0, [r7, #4]
 8007fb8:	f000 f8b6 	bl	8008128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007fbc:	e099      	b.n	80080f2 <HAL_UART_IRQHandler+0x50e>
 8007fbe:	bf00      	nop
 8007fc0:	0800835f 	.word	0x0800835f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007fc8:	687b      	ldr	r3, [r7, #4]
 8007fca:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fcc:	b29b      	uxth	r3, r3
 8007fce:	1ad3      	subs	r3, r2, r3
 8007fd0:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007fd4:	687b      	ldr	r3, [r7, #4]
 8007fd6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007fd8:	b29b      	uxth	r3, r3
 8007fda:	2b00      	cmp	r3, #0
 8007fdc:	f000 808b 	beq.w	80080f6 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007fe0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007fe4:	2b00      	cmp	r3, #0
 8007fe6:	f000 8086 	beq.w	80080f6 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	330c      	adds	r3, #12
 8007ff0:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007ff2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ff4:	e853 3f00 	ldrex	r3, [r3]
 8007ff8:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ffa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ffc:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008000:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	681b      	ldr	r3, [r3, #0]
 8008008:	330c      	adds	r3, #12
 800800a:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800800e:	647a      	str	r2, [r7, #68]	; 0x44
 8008010:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008012:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008014:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008016:	e841 2300 	strex	r3, r2, [r1]
 800801a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800801c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800801e:	2b00      	cmp	r3, #0
 8008020:	d1e3      	bne.n	8007fea <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	681b      	ldr	r3, [r3, #0]
 8008026:	3314      	adds	r3, #20
 8008028:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800802a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800802c:	e853 3f00 	ldrex	r3, [r3]
 8008030:	623b      	str	r3, [r7, #32]
   return(result);
 8008032:	6a3b      	ldr	r3, [r7, #32]
 8008034:	f023 0301 	bic.w	r3, r3, #1
 8008038:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	3314      	adds	r3, #20
 8008042:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008046:	633a      	str	r2, [r7, #48]	; 0x30
 8008048:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800804a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800804c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800804e:	e841 2300 	strex	r3, r2, [r1]
 8008052:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008054:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008056:	2b00      	cmp	r3, #0
 8008058:	d1e3      	bne.n	8008022 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	2220      	movs	r2, #32
 800805e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2200      	movs	r2, #0
 8008066:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	681b      	ldr	r3, [r3, #0]
 800806c:	330c      	adds	r3, #12
 800806e:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008070:	693b      	ldr	r3, [r7, #16]
 8008072:	e853 3f00 	ldrex	r3, [r3]
 8008076:	60fb      	str	r3, [r7, #12]
   return(result);
 8008078:	68fb      	ldr	r3, [r7, #12]
 800807a:	f023 0310 	bic.w	r3, r3, #16
 800807e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008082:	687b      	ldr	r3, [r7, #4]
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	330c      	adds	r3, #12
 8008088:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800808c:	61fa      	str	r2, [r7, #28]
 800808e:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008090:	69b9      	ldr	r1, [r7, #24]
 8008092:	69fa      	ldr	r2, [r7, #28]
 8008094:	e841 2300 	strex	r3, r2, [r1]
 8008098:	617b      	str	r3, [r7, #20]
   return(result);
 800809a:	697b      	ldr	r3, [r7, #20]
 800809c:	2b00      	cmp	r3, #0
 800809e:	d1e3      	bne.n	8008068 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80080a0:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80080a4:	4619      	mov	r1, r3
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f000 f83e 	bl	8008128 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80080ac:	e023      	b.n	80080f6 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80080ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080b2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080b6:	2b00      	cmp	r3, #0
 80080b8:	d009      	beq.n	80080ce <HAL_UART_IRQHandler+0x4ea>
 80080ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080be:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80080c2:	2b00      	cmp	r3, #0
 80080c4:	d003      	beq.n	80080ce <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 80080c6:	6878      	ldr	r0, [r7, #4]
 80080c8:	f000 f95d 	bl	8008386 <UART_Transmit_IT>
    return;
 80080cc:	e014      	b.n	80080f8 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80080ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80080d2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	d00e      	beq.n	80080f8 <HAL_UART_IRQHandler+0x514>
 80080da:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80080de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80080e2:	2b00      	cmp	r3, #0
 80080e4:	d008      	beq.n	80080f8 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80080e6:	6878      	ldr	r0, [r7, #4]
 80080e8:	f000 f99d 	bl	8008426 <UART_EndTransmit_IT>
    return;
 80080ec:	e004      	b.n	80080f8 <HAL_UART_IRQHandler+0x514>
    return;
 80080ee:	bf00      	nop
 80080f0:	e002      	b.n	80080f8 <HAL_UART_IRQHandler+0x514>
      return;
 80080f2:	bf00      	nop
 80080f4:	e000      	b.n	80080f8 <HAL_UART_IRQHandler+0x514>
      return;
 80080f6:	bf00      	nop
  }
}
 80080f8:	37e8      	adds	r7, #232	; 0xe8
 80080fa:	46bd      	mov	sp, r7
 80080fc:	bd80      	pop	{r7, pc}
 80080fe:	bf00      	nop

08008100 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008100:	b480      	push	{r7}
 8008102:	b083      	sub	sp, #12
 8008104:	af00      	add	r7, sp, #0
 8008106:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008108:	bf00      	nop
 800810a:	370c      	adds	r7, #12
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr

08008114 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008114:	b480      	push	{r7}
 8008116:	b083      	sub	sp, #12
 8008118:	af00      	add	r7, sp, #0
 800811a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800811c:	bf00      	nop
 800811e:	370c      	adds	r7, #12
 8008120:	46bd      	mov	sp, r7
 8008122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008126:	4770      	bx	lr

08008128 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008128:	b480      	push	{r7}
 800812a:	b083      	sub	sp, #12
 800812c:	af00      	add	r7, sp, #0
 800812e:	6078      	str	r0, [r7, #4]
 8008130:	460b      	mov	r3, r1
 8008132:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008134:	bf00      	nop
 8008136:	370c      	adds	r7, #12
 8008138:	46bd      	mov	sp, r7
 800813a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800813e:	4770      	bx	lr

08008140 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008140:	b580      	push	{r7, lr}
 8008142:	b090      	sub	sp, #64	; 0x40
 8008144:	af00      	add	r7, sp, #0
 8008146:	60f8      	str	r0, [r7, #12]
 8008148:	60b9      	str	r1, [r7, #8]
 800814a:	603b      	str	r3, [r7, #0]
 800814c:	4613      	mov	r3, r2
 800814e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008150:	e050      	b.n	80081f4 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008152:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008154:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008158:	d04c      	beq.n	80081f4 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800815a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800815c:	2b00      	cmp	r3, #0
 800815e:	d007      	beq.n	8008170 <UART_WaitOnFlagUntilTimeout+0x30>
 8008160:	f7fb fa40 	bl	80035e4 <HAL_GetTick>
 8008164:	4602      	mov	r2, r0
 8008166:	683b      	ldr	r3, [r7, #0]
 8008168:	1ad3      	subs	r3, r2, r3
 800816a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800816c:	429a      	cmp	r2, r3
 800816e:	d241      	bcs.n	80081f4 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008170:	68fb      	ldr	r3, [r7, #12]
 8008172:	681b      	ldr	r3, [r3, #0]
 8008174:	330c      	adds	r3, #12
 8008176:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008178:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800817a:	e853 3f00 	ldrex	r3, [r3]
 800817e:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008180:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008182:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008186:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008188:	68fb      	ldr	r3, [r7, #12]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	330c      	adds	r3, #12
 800818e:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008190:	637a      	str	r2, [r7, #52]	; 0x34
 8008192:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008194:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008196:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008198:	e841 2300 	strex	r3, r2, [r1]
 800819c:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800819e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80081a0:	2b00      	cmp	r3, #0
 80081a2:	d1e5      	bne.n	8008170 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081a4:	68fb      	ldr	r3, [r7, #12]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	3314      	adds	r3, #20
 80081aa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081ac:	697b      	ldr	r3, [r7, #20]
 80081ae:	e853 3f00 	ldrex	r3, [r3]
 80081b2:	613b      	str	r3, [r7, #16]
   return(result);
 80081b4:	693b      	ldr	r3, [r7, #16]
 80081b6:	f023 0301 	bic.w	r3, r3, #1
 80081ba:	63bb      	str	r3, [r7, #56]	; 0x38
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	681b      	ldr	r3, [r3, #0]
 80081c0:	3314      	adds	r3, #20
 80081c2:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80081c4:	623a      	str	r2, [r7, #32]
 80081c6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081c8:	69f9      	ldr	r1, [r7, #28]
 80081ca:	6a3a      	ldr	r2, [r7, #32]
 80081cc:	e841 2300 	strex	r3, r2, [r1]
 80081d0:	61bb      	str	r3, [r7, #24]
   return(result);
 80081d2:	69bb      	ldr	r3, [r7, #24]
 80081d4:	2b00      	cmp	r3, #0
 80081d6:	d1e5      	bne.n	80081a4 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80081d8:	68fb      	ldr	r3, [r7, #12]
 80081da:	2220      	movs	r2, #32
 80081dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	2220      	movs	r2, #32
 80081e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80081e8:	68fb      	ldr	r3, [r7, #12]
 80081ea:	2200      	movs	r2, #0
 80081ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80081f0:	2303      	movs	r3, #3
 80081f2:	e00f      	b.n	8008214 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80081f4:	68fb      	ldr	r3, [r7, #12]
 80081f6:	681b      	ldr	r3, [r3, #0]
 80081f8:	681a      	ldr	r2, [r3, #0]
 80081fa:	68bb      	ldr	r3, [r7, #8]
 80081fc:	4013      	ands	r3, r2
 80081fe:	68ba      	ldr	r2, [r7, #8]
 8008200:	429a      	cmp	r2, r3
 8008202:	bf0c      	ite	eq
 8008204:	2301      	moveq	r3, #1
 8008206:	2300      	movne	r3, #0
 8008208:	b2db      	uxtb	r3, r3
 800820a:	461a      	mov	r2, r3
 800820c:	79fb      	ldrb	r3, [r7, #7]
 800820e:	429a      	cmp	r2, r3
 8008210:	d09f      	beq.n	8008152 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008212:	2300      	movs	r3, #0
}
 8008214:	4618      	mov	r0, r3
 8008216:	3740      	adds	r7, #64	; 0x40
 8008218:	46bd      	mov	sp, r7
 800821a:	bd80      	pop	{r7, pc}

0800821c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800821c:	b480      	push	{r7}
 800821e:	b085      	sub	sp, #20
 8008220:	af00      	add	r7, sp, #0
 8008222:	60f8      	str	r0, [r7, #12]
 8008224:	60b9      	str	r1, [r7, #8]
 8008226:	4613      	mov	r3, r2
 8008228:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	68ba      	ldr	r2, [r7, #8]
 800822e:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008230:	68fb      	ldr	r3, [r7, #12]
 8008232:	88fa      	ldrh	r2, [r7, #6]
 8008234:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008236:	68fb      	ldr	r3, [r7, #12]
 8008238:	88fa      	ldrh	r2, [r7, #6]
 800823a:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	2200      	movs	r2, #0
 8008240:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	2222      	movs	r2, #34	; 0x22
 8008246:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8008252:	68fb      	ldr	r3, [r7, #12]
 8008254:	691b      	ldr	r3, [r3, #16]
 8008256:	2b00      	cmp	r3, #0
 8008258:	d007      	beq.n	800826a <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	681b      	ldr	r3, [r3, #0]
 800825e:	68da      	ldr	r2, [r3, #12]
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008268:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	695a      	ldr	r2, [r3, #20]
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	681b      	ldr	r3, [r3, #0]
 8008274:	f042 0201 	orr.w	r2, r2, #1
 8008278:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	681b      	ldr	r3, [r3, #0]
 800827e:	68da      	ldr	r2, [r3, #12]
 8008280:	68fb      	ldr	r3, [r7, #12]
 8008282:	681b      	ldr	r3, [r3, #0]
 8008284:	f042 0220 	orr.w	r2, r2, #32
 8008288:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800828a:	2300      	movs	r3, #0
}
 800828c:	4618      	mov	r0, r3
 800828e:	3714      	adds	r7, #20
 8008290:	46bd      	mov	sp, r7
 8008292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008296:	4770      	bx	lr

08008298 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008298:	b480      	push	{r7}
 800829a:	b095      	sub	sp, #84	; 0x54
 800829c:	af00      	add	r7, sp, #0
 800829e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	681b      	ldr	r3, [r3, #0]
 80082a4:	330c      	adds	r3, #12
 80082a6:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80082aa:	e853 3f00 	ldrex	r3, [r3]
 80082ae:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 80082b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80082b2:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80082b6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	330c      	adds	r3, #12
 80082be:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80082c0:	643a      	str	r2, [r7, #64]	; 0x40
 80082c2:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082c4:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80082c6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80082c8:	e841 2300 	strex	r3, r2, [r1]
 80082cc:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80082ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d1e5      	bne.n	80082a0 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	681b      	ldr	r3, [r3, #0]
 80082d8:	3314      	adds	r3, #20
 80082da:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80082dc:	6a3b      	ldr	r3, [r7, #32]
 80082de:	e853 3f00 	ldrex	r3, [r3]
 80082e2:	61fb      	str	r3, [r7, #28]
   return(result);
 80082e4:	69fb      	ldr	r3, [r7, #28]
 80082e6:	f023 0301 	bic.w	r3, r3, #1
 80082ea:	64bb      	str	r3, [r7, #72]	; 0x48
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	681b      	ldr	r3, [r3, #0]
 80082f0:	3314      	adds	r3, #20
 80082f2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80082f4:	62fa      	str	r2, [r7, #44]	; 0x2c
 80082f6:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80082f8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80082fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80082fc:	e841 2300 	strex	r3, r2, [r1]
 8008300:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008302:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008304:	2b00      	cmp	r3, #0
 8008306:	d1e5      	bne.n	80082d4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800830c:	2b01      	cmp	r3, #1
 800830e:	d119      	bne.n	8008344 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	330c      	adds	r3, #12
 8008316:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	e853 3f00 	ldrex	r3, [r3]
 800831e:	60bb      	str	r3, [r7, #8]
   return(result);
 8008320:	68bb      	ldr	r3, [r7, #8]
 8008322:	f023 0310 	bic.w	r3, r3, #16
 8008326:	647b      	str	r3, [r7, #68]	; 0x44
 8008328:	687b      	ldr	r3, [r7, #4]
 800832a:	681b      	ldr	r3, [r3, #0]
 800832c:	330c      	adds	r3, #12
 800832e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008330:	61ba      	str	r2, [r7, #24]
 8008332:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008334:	6979      	ldr	r1, [r7, #20]
 8008336:	69ba      	ldr	r2, [r7, #24]
 8008338:	e841 2300 	strex	r3, r2, [r1]
 800833c:	613b      	str	r3, [r7, #16]
   return(result);
 800833e:	693b      	ldr	r3, [r7, #16]
 8008340:	2b00      	cmp	r3, #0
 8008342:	d1e5      	bne.n	8008310 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	2220      	movs	r2, #32
 8008348:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800834c:	687b      	ldr	r3, [r7, #4]
 800834e:	2200      	movs	r2, #0
 8008350:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008352:	bf00      	nop
 8008354:	3754      	adds	r7, #84	; 0x54
 8008356:	46bd      	mov	sp, r7
 8008358:	f85d 7b04 	ldr.w	r7, [sp], #4
 800835c:	4770      	bx	lr

0800835e <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800835e:	b580      	push	{r7, lr}
 8008360:	b084      	sub	sp, #16
 8008362:	af00      	add	r7, sp, #0
 8008364:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800836a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800836c:	68fb      	ldr	r3, [r7, #12]
 800836e:	2200      	movs	r2, #0
 8008370:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008372:	68fb      	ldr	r3, [r7, #12]
 8008374:	2200      	movs	r2, #0
 8008376:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008378:	68f8      	ldr	r0, [r7, #12]
 800837a:	f7ff fecb 	bl	8008114 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800837e:	bf00      	nop
 8008380:	3710      	adds	r7, #16
 8008382:	46bd      	mov	sp, r7
 8008384:	bd80      	pop	{r7, pc}

08008386 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008386:	b480      	push	{r7}
 8008388:	b085      	sub	sp, #20
 800838a:	af00      	add	r7, sp, #0
 800838c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008394:	b2db      	uxtb	r3, r3
 8008396:	2b21      	cmp	r3, #33	; 0x21
 8008398:	d13e      	bne.n	8008418 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	689b      	ldr	r3, [r3, #8]
 800839e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80083a2:	d114      	bne.n	80083ce <UART_Transmit_IT+0x48>
 80083a4:	687b      	ldr	r3, [r7, #4]
 80083a6:	691b      	ldr	r3, [r3, #16]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	d110      	bne.n	80083ce <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 80083ac:	687b      	ldr	r3, [r7, #4]
 80083ae:	6a1b      	ldr	r3, [r3, #32]
 80083b0:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	881b      	ldrh	r3, [r3, #0]
 80083b6:	461a      	mov	r2, r3
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80083c0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a1b      	ldr	r3, [r3, #32]
 80083c6:	1c9a      	adds	r2, r3, #2
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	621a      	str	r2, [r3, #32]
 80083cc:	e008      	b.n	80083e0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	6a1b      	ldr	r3, [r3, #32]
 80083d2:	1c59      	adds	r1, r3, #1
 80083d4:	687a      	ldr	r2, [r7, #4]
 80083d6:	6211      	str	r1, [r2, #32]
 80083d8:	781a      	ldrb	r2, [r3, #0]
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	681b      	ldr	r3, [r3, #0]
 80083de:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80083e4:	b29b      	uxth	r3, r3
 80083e6:	3b01      	subs	r3, #1
 80083e8:	b29b      	uxth	r3, r3
 80083ea:	687a      	ldr	r2, [r7, #4]
 80083ec:	4619      	mov	r1, r3
 80083ee:	84d1      	strh	r1, [r2, #38]	; 0x26
 80083f0:	2b00      	cmp	r3, #0
 80083f2:	d10f      	bne.n	8008414 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80083f4:	687b      	ldr	r3, [r7, #4]
 80083f6:	681b      	ldr	r3, [r3, #0]
 80083f8:	68da      	ldr	r2, [r3, #12]
 80083fa:	687b      	ldr	r3, [r7, #4]
 80083fc:	681b      	ldr	r3, [r3, #0]
 80083fe:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008402:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	681b      	ldr	r3, [r3, #0]
 8008408:	68da      	ldr	r2, [r3, #12]
 800840a:	687b      	ldr	r3, [r7, #4]
 800840c:	681b      	ldr	r3, [r3, #0]
 800840e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008412:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008414:	2300      	movs	r3, #0
 8008416:	e000      	b.n	800841a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008418:	2302      	movs	r3, #2
  }
}
 800841a:	4618      	mov	r0, r3
 800841c:	3714      	adds	r7, #20
 800841e:	46bd      	mov	sp, r7
 8008420:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008424:	4770      	bx	lr

08008426 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008426:	b580      	push	{r7, lr}
 8008428:	b082      	sub	sp, #8
 800842a:	af00      	add	r7, sp, #0
 800842c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800842e:	687b      	ldr	r3, [r7, #4]
 8008430:	681b      	ldr	r3, [r3, #0]
 8008432:	68da      	ldr	r2, [r3, #12]
 8008434:	687b      	ldr	r3, [r7, #4]
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800843c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	2220      	movs	r2, #32
 8008442:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008446:	6878      	ldr	r0, [r7, #4]
 8008448:	f7ff fe5a 	bl	8008100 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800844c:	2300      	movs	r3, #0
}
 800844e:	4618      	mov	r0, r3
 8008450:	3708      	adds	r7, #8
 8008452:	46bd      	mov	sp, r7
 8008454:	bd80      	pop	{r7, pc}

08008456 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008456:	b580      	push	{r7, lr}
 8008458:	b08c      	sub	sp, #48	; 0x30
 800845a:	af00      	add	r7, sp, #0
 800845c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800845e:	687b      	ldr	r3, [r7, #4]
 8008460:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008464:	b2db      	uxtb	r3, r3
 8008466:	2b22      	cmp	r3, #34	; 0x22
 8008468:	f040 80ab 	bne.w	80085c2 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	689b      	ldr	r3, [r3, #8]
 8008470:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008474:	d117      	bne.n	80084a6 <UART_Receive_IT+0x50>
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	691b      	ldr	r3, [r3, #16]
 800847a:	2b00      	cmp	r3, #0
 800847c:	d113      	bne.n	80084a6 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800847e:	2300      	movs	r3, #0
 8008480:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008482:	687b      	ldr	r3, [r7, #4]
 8008484:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008486:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008488:	687b      	ldr	r3, [r7, #4]
 800848a:	681b      	ldr	r3, [r3, #0]
 800848c:	685b      	ldr	r3, [r3, #4]
 800848e:	b29b      	uxth	r3, r3
 8008490:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008494:	b29a      	uxth	r2, r3
 8008496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008498:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800849e:	1c9a      	adds	r2, r3, #2
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	629a      	str	r2, [r3, #40]	; 0x28
 80084a4:	e026      	b.n	80084f4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084aa:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80084ac:	2300      	movs	r3, #0
 80084ae:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	689b      	ldr	r3, [r3, #8]
 80084b4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80084b8:	d007      	beq.n	80084ca <UART_Receive_IT+0x74>
 80084ba:	687b      	ldr	r3, [r7, #4]
 80084bc:	689b      	ldr	r3, [r3, #8]
 80084be:	2b00      	cmp	r3, #0
 80084c0:	d10a      	bne.n	80084d8 <UART_Receive_IT+0x82>
 80084c2:	687b      	ldr	r3, [r7, #4]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	2b00      	cmp	r3, #0
 80084c8:	d106      	bne.n	80084d8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80084ca:	687b      	ldr	r3, [r7, #4]
 80084cc:	681b      	ldr	r3, [r3, #0]
 80084ce:	685b      	ldr	r3, [r3, #4]
 80084d0:	b2da      	uxtb	r2, r3
 80084d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084d4:	701a      	strb	r2, [r3, #0]
 80084d6:	e008      	b.n	80084ea <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	685b      	ldr	r3, [r3, #4]
 80084de:	b2db      	uxtb	r3, r3
 80084e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80084e4:	b2da      	uxtb	r2, r3
 80084e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80084e8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80084ea:	687b      	ldr	r3, [r7, #4]
 80084ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80084ee:	1c5a      	adds	r2, r3, #1
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80084f8:	b29b      	uxth	r3, r3
 80084fa:	3b01      	subs	r3, #1
 80084fc:	b29b      	uxth	r3, r3
 80084fe:	687a      	ldr	r2, [r7, #4]
 8008500:	4619      	mov	r1, r3
 8008502:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008504:	2b00      	cmp	r3, #0
 8008506:	d15a      	bne.n	80085be <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	68da      	ldr	r2, [r3, #12]
 800850e:	687b      	ldr	r3, [r7, #4]
 8008510:	681b      	ldr	r3, [r3, #0]
 8008512:	f022 0220 	bic.w	r2, r2, #32
 8008516:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	681b      	ldr	r3, [r3, #0]
 800851c:	68da      	ldr	r2, [r3, #12]
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	681b      	ldr	r3, [r3, #0]
 8008522:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008526:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008528:	687b      	ldr	r3, [r7, #4]
 800852a:	681b      	ldr	r3, [r3, #0]
 800852c:	695a      	ldr	r2, [r3, #20]
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	681b      	ldr	r3, [r3, #0]
 8008532:	f022 0201 	bic.w	r2, r2, #1
 8008536:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2220      	movs	r2, #32
 800853c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008544:	2b01      	cmp	r3, #1
 8008546:	d135      	bne.n	80085b4 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2200      	movs	r2, #0
 800854c:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800854e:	687b      	ldr	r3, [r7, #4]
 8008550:	681b      	ldr	r3, [r3, #0]
 8008552:	330c      	adds	r3, #12
 8008554:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008556:	697b      	ldr	r3, [r7, #20]
 8008558:	e853 3f00 	ldrex	r3, [r3]
 800855c:	613b      	str	r3, [r7, #16]
   return(result);
 800855e:	693b      	ldr	r3, [r7, #16]
 8008560:	f023 0310 	bic.w	r3, r3, #16
 8008564:	627b      	str	r3, [r7, #36]	; 0x24
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	330c      	adds	r3, #12
 800856c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800856e:	623a      	str	r2, [r7, #32]
 8008570:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008572:	69f9      	ldr	r1, [r7, #28]
 8008574:	6a3a      	ldr	r2, [r7, #32]
 8008576:	e841 2300 	strex	r3, r2, [r1]
 800857a:	61bb      	str	r3, [r7, #24]
   return(result);
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	2b00      	cmp	r3, #0
 8008580:	d1e5      	bne.n	800854e <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8008582:	687b      	ldr	r3, [r7, #4]
 8008584:	681b      	ldr	r3, [r3, #0]
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f003 0310 	and.w	r3, r3, #16
 800858c:	2b10      	cmp	r3, #16
 800858e:	d10a      	bne.n	80085a6 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008590:	2300      	movs	r3, #0
 8008592:	60fb      	str	r3, [r7, #12]
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	60fb      	str	r3, [r7, #12]
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	685b      	ldr	r3, [r3, #4]
 80085a2:	60fb      	str	r3, [r7, #12]
 80085a4:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80085aa:	4619      	mov	r1, r3
 80085ac:	6878      	ldr	r0, [r7, #4]
 80085ae:	f7ff fdbb 	bl	8008128 <HAL_UARTEx_RxEventCallback>
 80085b2:	e002      	b.n	80085ba <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80085b4:	6878      	ldr	r0, [r7, #4]
 80085b6:	f7f9 fa1f 	bl	80019f8 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80085ba:	2300      	movs	r3, #0
 80085bc:	e002      	b.n	80085c4 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80085be:	2300      	movs	r3, #0
 80085c0:	e000      	b.n	80085c4 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80085c2:	2302      	movs	r3, #2
  }
}
 80085c4:	4618      	mov	r0, r3
 80085c6:	3730      	adds	r7, #48	; 0x30
 80085c8:	46bd      	mov	sp, r7
 80085ca:	bd80      	pop	{r7, pc}

080085cc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80085cc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80085d0:	b0c0      	sub	sp, #256	; 0x100
 80085d2:	af00      	add	r7, sp, #0
 80085d4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80085d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085dc:	681b      	ldr	r3, [r3, #0]
 80085de:	691b      	ldr	r3, [r3, #16]
 80085e0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80085e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085e8:	68d9      	ldr	r1, [r3, #12]
 80085ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085ee:	681a      	ldr	r2, [r3, #0]
 80085f0:	ea40 0301 	orr.w	r3, r0, r1
 80085f4:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80085f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085fa:	689a      	ldr	r2, [r3, #8]
 80085fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008600:	691b      	ldr	r3, [r3, #16]
 8008602:	431a      	orrs	r2, r3
 8008604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008608:	695b      	ldr	r3, [r3, #20]
 800860a:	431a      	orrs	r2, r3
 800860c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008610:	69db      	ldr	r3, [r3, #28]
 8008612:	4313      	orrs	r3, r2
 8008614:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8008618:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	68db      	ldr	r3, [r3, #12]
 8008620:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008624:	f021 010c 	bic.w	r1, r1, #12
 8008628:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800862c:	681a      	ldr	r2, [r3, #0]
 800862e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8008632:	430b      	orrs	r3, r1
 8008634:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	695b      	ldr	r3, [r3, #20]
 800863e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008646:	6999      	ldr	r1, [r3, #24]
 8008648:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800864c:	681a      	ldr	r2, [r3, #0]
 800864e:	ea40 0301 	orr.w	r3, r0, r1
 8008652:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008658:	681a      	ldr	r2, [r3, #0]
 800865a:	4b8f      	ldr	r3, [pc, #572]	; (8008898 <UART_SetConfig+0x2cc>)
 800865c:	429a      	cmp	r2, r3
 800865e:	d005      	beq.n	800866c <UART_SetConfig+0xa0>
 8008660:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008664:	681a      	ldr	r2, [r3, #0]
 8008666:	4b8d      	ldr	r3, [pc, #564]	; (800889c <UART_SetConfig+0x2d0>)
 8008668:	429a      	cmp	r2, r3
 800866a:	d104      	bne.n	8008676 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800866c:	f7fd fb0c 	bl	8005c88 <HAL_RCC_GetPCLK2Freq>
 8008670:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8008674:	e003      	b.n	800867e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008676:	f7fd faf3 	bl	8005c60 <HAL_RCC_GetPCLK1Freq>
 800867a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800867e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008682:	69db      	ldr	r3, [r3, #28]
 8008684:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008688:	f040 810c 	bne.w	80088a4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800868c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008690:	2200      	movs	r2, #0
 8008692:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8008696:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800869a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800869e:	4622      	mov	r2, r4
 80086a0:	462b      	mov	r3, r5
 80086a2:	1891      	adds	r1, r2, r2
 80086a4:	65b9      	str	r1, [r7, #88]	; 0x58
 80086a6:	415b      	adcs	r3, r3
 80086a8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80086aa:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80086ae:	4621      	mov	r1, r4
 80086b0:	eb12 0801 	adds.w	r8, r2, r1
 80086b4:	4629      	mov	r1, r5
 80086b6:	eb43 0901 	adc.w	r9, r3, r1
 80086ba:	f04f 0200 	mov.w	r2, #0
 80086be:	f04f 0300 	mov.w	r3, #0
 80086c2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80086c6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80086ca:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80086ce:	4690      	mov	r8, r2
 80086d0:	4699      	mov	r9, r3
 80086d2:	4623      	mov	r3, r4
 80086d4:	eb18 0303 	adds.w	r3, r8, r3
 80086d8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80086dc:	462b      	mov	r3, r5
 80086de:	eb49 0303 	adc.w	r3, r9, r3
 80086e2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80086e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	2200      	movs	r2, #0
 80086ee:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80086f2:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80086f6:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80086fa:	460b      	mov	r3, r1
 80086fc:	18db      	adds	r3, r3, r3
 80086fe:	653b      	str	r3, [r7, #80]	; 0x50
 8008700:	4613      	mov	r3, r2
 8008702:	eb42 0303 	adc.w	r3, r2, r3
 8008706:	657b      	str	r3, [r7, #84]	; 0x54
 8008708:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800870c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8008710:	f7f7 fd72 	bl	80001f8 <__aeabi_uldivmod>
 8008714:	4602      	mov	r2, r0
 8008716:	460b      	mov	r3, r1
 8008718:	4b61      	ldr	r3, [pc, #388]	; (80088a0 <UART_SetConfig+0x2d4>)
 800871a:	fba3 2302 	umull	r2, r3, r3, r2
 800871e:	095b      	lsrs	r3, r3, #5
 8008720:	011c      	lsls	r4, r3, #4
 8008722:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008726:	2200      	movs	r2, #0
 8008728:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800872c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008730:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8008734:	4642      	mov	r2, r8
 8008736:	464b      	mov	r3, r9
 8008738:	1891      	adds	r1, r2, r2
 800873a:	64b9      	str	r1, [r7, #72]	; 0x48
 800873c:	415b      	adcs	r3, r3
 800873e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008740:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8008744:	4641      	mov	r1, r8
 8008746:	eb12 0a01 	adds.w	sl, r2, r1
 800874a:	4649      	mov	r1, r9
 800874c:	eb43 0b01 	adc.w	fp, r3, r1
 8008750:	f04f 0200 	mov.w	r2, #0
 8008754:	f04f 0300 	mov.w	r3, #0
 8008758:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800875c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008760:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8008764:	4692      	mov	sl, r2
 8008766:	469b      	mov	fp, r3
 8008768:	4643      	mov	r3, r8
 800876a:	eb1a 0303 	adds.w	r3, sl, r3
 800876e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008772:	464b      	mov	r3, r9
 8008774:	eb4b 0303 	adc.w	r3, fp, r3
 8008778:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800877c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008780:	685b      	ldr	r3, [r3, #4]
 8008782:	2200      	movs	r2, #0
 8008784:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008788:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800878c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008790:	460b      	mov	r3, r1
 8008792:	18db      	adds	r3, r3, r3
 8008794:	643b      	str	r3, [r7, #64]	; 0x40
 8008796:	4613      	mov	r3, r2
 8008798:	eb42 0303 	adc.w	r3, r2, r3
 800879c:	647b      	str	r3, [r7, #68]	; 0x44
 800879e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80087a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80087a6:	f7f7 fd27 	bl	80001f8 <__aeabi_uldivmod>
 80087aa:	4602      	mov	r2, r0
 80087ac:	460b      	mov	r3, r1
 80087ae:	4611      	mov	r1, r2
 80087b0:	4b3b      	ldr	r3, [pc, #236]	; (80088a0 <UART_SetConfig+0x2d4>)
 80087b2:	fba3 2301 	umull	r2, r3, r3, r1
 80087b6:	095b      	lsrs	r3, r3, #5
 80087b8:	2264      	movs	r2, #100	; 0x64
 80087ba:	fb02 f303 	mul.w	r3, r2, r3
 80087be:	1acb      	subs	r3, r1, r3
 80087c0:	00db      	lsls	r3, r3, #3
 80087c2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80087c6:	4b36      	ldr	r3, [pc, #216]	; (80088a0 <UART_SetConfig+0x2d4>)
 80087c8:	fba3 2302 	umull	r2, r3, r3, r2
 80087cc:	095b      	lsrs	r3, r3, #5
 80087ce:	005b      	lsls	r3, r3, #1
 80087d0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80087d4:	441c      	add	r4, r3
 80087d6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80087da:	2200      	movs	r2, #0
 80087dc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80087e0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80087e4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80087e8:	4642      	mov	r2, r8
 80087ea:	464b      	mov	r3, r9
 80087ec:	1891      	adds	r1, r2, r2
 80087ee:	63b9      	str	r1, [r7, #56]	; 0x38
 80087f0:	415b      	adcs	r3, r3
 80087f2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80087f4:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80087f8:	4641      	mov	r1, r8
 80087fa:	1851      	adds	r1, r2, r1
 80087fc:	6339      	str	r1, [r7, #48]	; 0x30
 80087fe:	4649      	mov	r1, r9
 8008800:	414b      	adcs	r3, r1
 8008802:	637b      	str	r3, [r7, #52]	; 0x34
 8008804:	f04f 0200 	mov.w	r2, #0
 8008808:	f04f 0300 	mov.w	r3, #0
 800880c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8008810:	4659      	mov	r1, fp
 8008812:	00cb      	lsls	r3, r1, #3
 8008814:	4651      	mov	r1, sl
 8008816:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800881a:	4651      	mov	r1, sl
 800881c:	00ca      	lsls	r2, r1, #3
 800881e:	4610      	mov	r0, r2
 8008820:	4619      	mov	r1, r3
 8008822:	4603      	mov	r3, r0
 8008824:	4642      	mov	r2, r8
 8008826:	189b      	adds	r3, r3, r2
 8008828:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800882c:	464b      	mov	r3, r9
 800882e:	460a      	mov	r2, r1
 8008830:	eb42 0303 	adc.w	r3, r2, r3
 8008834:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008838:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800883c:	685b      	ldr	r3, [r3, #4]
 800883e:	2200      	movs	r2, #0
 8008840:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8008844:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008848:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800884c:	460b      	mov	r3, r1
 800884e:	18db      	adds	r3, r3, r3
 8008850:	62bb      	str	r3, [r7, #40]	; 0x28
 8008852:	4613      	mov	r3, r2
 8008854:	eb42 0303 	adc.w	r3, r2, r3
 8008858:	62fb      	str	r3, [r7, #44]	; 0x2c
 800885a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800885e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8008862:	f7f7 fcc9 	bl	80001f8 <__aeabi_uldivmod>
 8008866:	4602      	mov	r2, r0
 8008868:	460b      	mov	r3, r1
 800886a:	4b0d      	ldr	r3, [pc, #52]	; (80088a0 <UART_SetConfig+0x2d4>)
 800886c:	fba3 1302 	umull	r1, r3, r3, r2
 8008870:	095b      	lsrs	r3, r3, #5
 8008872:	2164      	movs	r1, #100	; 0x64
 8008874:	fb01 f303 	mul.w	r3, r1, r3
 8008878:	1ad3      	subs	r3, r2, r3
 800887a:	00db      	lsls	r3, r3, #3
 800887c:	3332      	adds	r3, #50	; 0x32
 800887e:	4a08      	ldr	r2, [pc, #32]	; (80088a0 <UART_SetConfig+0x2d4>)
 8008880:	fba2 2303 	umull	r2, r3, r2, r3
 8008884:	095b      	lsrs	r3, r3, #5
 8008886:	f003 0207 	and.w	r2, r3, #7
 800888a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800888e:	681b      	ldr	r3, [r3, #0]
 8008890:	4422      	add	r2, r4
 8008892:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008894:	e105      	b.n	8008aa2 <UART_SetConfig+0x4d6>
 8008896:	bf00      	nop
 8008898:	40011000 	.word	0x40011000
 800889c:	40011400 	.word	0x40011400
 80088a0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80088a4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088a8:	2200      	movs	r2, #0
 80088aa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80088ae:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80088b2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80088b6:	4642      	mov	r2, r8
 80088b8:	464b      	mov	r3, r9
 80088ba:	1891      	adds	r1, r2, r2
 80088bc:	6239      	str	r1, [r7, #32]
 80088be:	415b      	adcs	r3, r3
 80088c0:	627b      	str	r3, [r7, #36]	; 0x24
 80088c2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80088c6:	4641      	mov	r1, r8
 80088c8:	1854      	adds	r4, r2, r1
 80088ca:	4649      	mov	r1, r9
 80088cc:	eb43 0501 	adc.w	r5, r3, r1
 80088d0:	f04f 0200 	mov.w	r2, #0
 80088d4:	f04f 0300 	mov.w	r3, #0
 80088d8:	00eb      	lsls	r3, r5, #3
 80088da:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80088de:	00e2      	lsls	r2, r4, #3
 80088e0:	4614      	mov	r4, r2
 80088e2:	461d      	mov	r5, r3
 80088e4:	4643      	mov	r3, r8
 80088e6:	18e3      	adds	r3, r4, r3
 80088e8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80088ec:	464b      	mov	r3, r9
 80088ee:	eb45 0303 	adc.w	r3, r5, r3
 80088f2:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80088f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80088fa:	685b      	ldr	r3, [r3, #4]
 80088fc:	2200      	movs	r2, #0
 80088fe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8008902:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008906:	f04f 0200 	mov.w	r2, #0
 800890a:	f04f 0300 	mov.w	r3, #0
 800890e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8008912:	4629      	mov	r1, r5
 8008914:	008b      	lsls	r3, r1, #2
 8008916:	4621      	mov	r1, r4
 8008918:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800891c:	4621      	mov	r1, r4
 800891e:	008a      	lsls	r2, r1, #2
 8008920:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8008924:	f7f7 fc68 	bl	80001f8 <__aeabi_uldivmod>
 8008928:	4602      	mov	r2, r0
 800892a:	460b      	mov	r3, r1
 800892c:	4b60      	ldr	r3, [pc, #384]	; (8008ab0 <UART_SetConfig+0x4e4>)
 800892e:	fba3 2302 	umull	r2, r3, r3, r2
 8008932:	095b      	lsrs	r3, r3, #5
 8008934:	011c      	lsls	r4, r3, #4
 8008936:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800893a:	2200      	movs	r2, #0
 800893c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008940:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8008944:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008948:	4642      	mov	r2, r8
 800894a:	464b      	mov	r3, r9
 800894c:	1891      	adds	r1, r2, r2
 800894e:	61b9      	str	r1, [r7, #24]
 8008950:	415b      	adcs	r3, r3
 8008952:	61fb      	str	r3, [r7, #28]
 8008954:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008958:	4641      	mov	r1, r8
 800895a:	1851      	adds	r1, r2, r1
 800895c:	6139      	str	r1, [r7, #16]
 800895e:	4649      	mov	r1, r9
 8008960:	414b      	adcs	r3, r1
 8008962:	617b      	str	r3, [r7, #20]
 8008964:	f04f 0200 	mov.w	r2, #0
 8008968:	f04f 0300 	mov.w	r3, #0
 800896c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008970:	4659      	mov	r1, fp
 8008972:	00cb      	lsls	r3, r1, #3
 8008974:	4651      	mov	r1, sl
 8008976:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800897a:	4651      	mov	r1, sl
 800897c:	00ca      	lsls	r2, r1, #3
 800897e:	4610      	mov	r0, r2
 8008980:	4619      	mov	r1, r3
 8008982:	4603      	mov	r3, r0
 8008984:	4642      	mov	r2, r8
 8008986:	189b      	adds	r3, r3, r2
 8008988:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800898c:	464b      	mov	r3, r9
 800898e:	460a      	mov	r2, r1
 8008990:	eb42 0303 	adc.w	r3, r2, r3
 8008994:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008998:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800899c:	685b      	ldr	r3, [r3, #4]
 800899e:	2200      	movs	r2, #0
 80089a0:	67bb      	str	r3, [r7, #120]	; 0x78
 80089a2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80089a4:	f04f 0200 	mov.w	r2, #0
 80089a8:	f04f 0300 	mov.w	r3, #0
 80089ac:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80089b0:	4649      	mov	r1, r9
 80089b2:	008b      	lsls	r3, r1, #2
 80089b4:	4641      	mov	r1, r8
 80089b6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80089ba:	4641      	mov	r1, r8
 80089bc:	008a      	lsls	r2, r1, #2
 80089be:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80089c2:	f7f7 fc19 	bl	80001f8 <__aeabi_uldivmod>
 80089c6:	4602      	mov	r2, r0
 80089c8:	460b      	mov	r3, r1
 80089ca:	4b39      	ldr	r3, [pc, #228]	; (8008ab0 <UART_SetConfig+0x4e4>)
 80089cc:	fba3 1302 	umull	r1, r3, r3, r2
 80089d0:	095b      	lsrs	r3, r3, #5
 80089d2:	2164      	movs	r1, #100	; 0x64
 80089d4:	fb01 f303 	mul.w	r3, r1, r3
 80089d8:	1ad3      	subs	r3, r2, r3
 80089da:	011b      	lsls	r3, r3, #4
 80089dc:	3332      	adds	r3, #50	; 0x32
 80089de:	4a34      	ldr	r2, [pc, #208]	; (8008ab0 <UART_SetConfig+0x4e4>)
 80089e0:	fba2 2303 	umull	r2, r3, r2, r3
 80089e4:	095b      	lsrs	r3, r3, #5
 80089e6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80089ea:	441c      	add	r4, r3
 80089ec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80089f0:	2200      	movs	r2, #0
 80089f2:	673b      	str	r3, [r7, #112]	; 0x70
 80089f4:	677a      	str	r2, [r7, #116]	; 0x74
 80089f6:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80089fa:	4642      	mov	r2, r8
 80089fc:	464b      	mov	r3, r9
 80089fe:	1891      	adds	r1, r2, r2
 8008a00:	60b9      	str	r1, [r7, #8]
 8008a02:	415b      	adcs	r3, r3
 8008a04:	60fb      	str	r3, [r7, #12]
 8008a06:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008a0a:	4641      	mov	r1, r8
 8008a0c:	1851      	adds	r1, r2, r1
 8008a0e:	6039      	str	r1, [r7, #0]
 8008a10:	4649      	mov	r1, r9
 8008a12:	414b      	adcs	r3, r1
 8008a14:	607b      	str	r3, [r7, #4]
 8008a16:	f04f 0200 	mov.w	r2, #0
 8008a1a:	f04f 0300 	mov.w	r3, #0
 8008a1e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8008a22:	4659      	mov	r1, fp
 8008a24:	00cb      	lsls	r3, r1, #3
 8008a26:	4651      	mov	r1, sl
 8008a28:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008a2c:	4651      	mov	r1, sl
 8008a2e:	00ca      	lsls	r2, r1, #3
 8008a30:	4610      	mov	r0, r2
 8008a32:	4619      	mov	r1, r3
 8008a34:	4603      	mov	r3, r0
 8008a36:	4642      	mov	r2, r8
 8008a38:	189b      	adds	r3, r3, r2
 8008a3a:	66bb      	str	r3, [r7, #104]	; 0x68
 8008a3c:	464b      	mov	r3, r9
 8008a3e:	460a      	mov	r2, r1
 8008a40:	eb42 0303 	adc.w	r3, r2, r3
 8008a44:	66fb      	str	r3, [r7, #108]	; 0x6c
 8008a46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a4a:	685b      	ldr	r3, [r3, #4]
 8008a4c:	2200      	movs	r2, #0
 8008a4e:	663b      	str	r3, [r7, #96]	; 0x60
 8008a50:	667a      	str	r2, [r7, #100]	; 0x64
 8008a52:	f04f 0200 	mov.w	r2, #0
 8008a56:	f04f 0300 	mov.w	r3, #0
 8008a5a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008a5e:	4649      	mov	r1, r9
 8008a60:	008b      	lsls	r3, r1, #2
 8008a62:	4641      	mov	r1, r8
 8008a64:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008a68:	4641      	mov	r1, r8
 8008a6a:	008a      	lsls	r2, r1, #2
 8008a6c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008a70:	f7f7 fbc2 	bl	80001f8 <__aeabi_uldivmod>
 8008a74:	4602      	mov	r2, r0
 8008a76:	460b      	mov	r3, r1
 8008a78:	4b0d      	ldr	r3, [pc, #52]	; (8008ab0 <UART_SetConfig+0x4e4>)
 8008a7a:	fba3 1302 	umull	r1, r3, r3, r2
 8008a7e:	095b      	lsrs	r3, r3, #5
 8008a80:	2164      	movs	r1, #100	; 0x64
 8008a82:	fb01 f303 	mul.w	r3, r1, r3
 8008a86:	1ad3      	subs	r3, r2, r3
 8008a88:	011b      	lsls	r3, r3, #4
 8008a8a:	3332      	adds	r3, #50	; 0x32
 8008a8c:	4a08      	ldr	r2, [pc, #32]	; (8008ab0 <UART_SetConfig+0x4e4>)
 8008a8e:	fba2 2303 	umull	r2, r3, r2, r3
 8008a92:	095b      	lsrs	r3, r3, #5
 8008a94:	f003 020f 	and.w	r2, r3, #15
 8008a98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	4422      	add	r2, r4
 8008aa0:	609a      	str	r2, [r3, #8]
}
 8008aa2:	bf00      	nop
 8008aa4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008aae:	bf00      	nop
 8008ab0:	51eb851f 	.word	0x51eb851f

08008ab4 <atoi>:
 8008ab4:	220a      	movs	r2, #10
 8008ab6:	2100      	movs	r1, #0
 8008ab8:	f000 b8e6 	b.w	8008c88 <strtol>

08008abc <__errno>:
 8008abc:	4b01      	ldr	r3, [pc, #4]	; (8008ac4 <__errno+0x8>)
 8008abe:	6818      	ldr	r0, [r3, #0]
 8008ac0:	4770      	bx	lr
 8008ac2:	bf00      	nop
 8008ac4:	20001454 	.word	0x20001454

08008ac8 <__libc_init_array>:
 8008ac8:	b570      	push	{r4, r5, r6, lr}
 8008aca:	4d0d      	ldr	r5, [pc, #52]	; (8008b00 <__libc_init_array+0x38>)
 8008acc:	4c0d      	ldr	r4, [pc, #52]	; (8008b04 <__libc_init_array+0x3c>)
 8008ace:	1b64      	subs	r4, r4, r5
 8008ad0:	10a4      	asrs	r4, r4, #2
 8008ad2:	2600      	movs	r6, #0
 8008ad4:	42a6      	cmp	r6, r4
 8008ad6:	d109      	bne.n	8008aec <__libc_init_array+0x24>
 8008ad8:	4d0b      	ldr	r5, [pc, #44]	; (8008b08 <__libc_init_array+0x40>)
 8008ada:	4c0c      	ldr	r4, [pc, #48]	; (8008b0c <__libc_init_array+0x44>)
 8008adc:	f000 f920 	bl	8008d20 <_init>
 8008ae0:	1b64      	subs	r4, r4, r5
 8008ae2:	10a4      	asrs	r4, r4, #2
 8008ae4:	2600      	movs	r6, #0
 8008ae6:	42a6      	cmp	r6, r4
 8008ae8:	d105      	bne.n	8008af6 <__libc_init_array+0x2e>
 8008aea:	bd70      	pop	{r4, r5, r6, pc}
 8008aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8008af0:	4798      	blx	r3
 8008af2:	3601      	adds	r6, #1
 8008af4:	e7ee      	b.n	8008ad4 <__libc_init_array+0xc>
 8008af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8008afa:	4798      	blx	r3
 8008afc:	3601      	adds	r6, #1
 8008afe:	e7f2      	b.n	8008ae6 <__libc_init_array+0x1e>
 8008b00:	08008f80 	.word	0x08008f80
 8008b04:	08008f80 	.word	0x08008f80
 8008b08:	08008f80 	.word	0x08008f80
 8008b0c:	08008f84 	.word	0x08008f84

08008b10 <__itoa>:
 8008b10:	1e93      	subs	r3, r2, #2
 8008b12:	2b22      	cmp	r3, #34	; 0x22
 8008b14:	b510      	push	{r4, lr}
 8008b16:	460c      	mov	r4, r1
 8008b18:	d904      	bls.n	8008b24 <__itoa+0x14>
 8008b1a:	2300      	movs	r3, #0
 8008b1c:	700b      	strb	r3, [r1, #0]
 8008b1e:	461c      	mov	r4, r3
 8008b20:	4620      	mov	r0, r4
 8008b22:	bd10      	pop	{r4, pc}
 8008b24:	2a0a      	cmp	r2, #10
 8008b26:	d109      	bne.n	8008b3c <__itoa+0x2c>
 8008b28:	2800      	cmp	r0, #0
 8008b2a:	da07      	bge.n	8008b3c <__itoa+0x2c>
 8008b2c:	232d      	movs	r3, #45	; 0x2d
 8008b2e:	700b      	strb	r3, [r1, #0]
 8008b30:	4240      	negs	r0, r0
 8008b32:	2101      	movs	r1, #1
 8008b34:	4421      	add	r1, r4
 8008b36:	f000 f8b1 	bl	8008c9c <__utoa>
 8008b3a:	e7f1      	b.n	8008b20 <__itoa+0x10>
 8008b3c:	2100      	movs	r1, #0
 8008b3e:	e7f9      	b.n	8008b34 <__itoa+0x24>

08008b40 <itoa>:
 8008b40:	f7ff bfe6 	b.w	8008b10 <__itoa>

08008b44 <memset>:
 8008b44:	4402      	add	r2, r0
 8008b46:	4603      	mov	r3, r0
 8008b48:	4293      	cmp	r3, r2
 8008b4a:	d100      	bne.n	8008b4e <memset+0xa>
 8008b4c:	4770      	bx	lr
 8008b4e:	f803 1b01 	strb.w	r1, [r3], #1
 8008b52:	e7f9      	b.n	8008b48 <memset+0x4>

08008b54 <strcat>:
 8008b54:	b510      	push	{r4, lr}
 8008b56:	4602      	mov	r2, r0
 8008b58:	7814      	ldrb	r4, [r2, #0]
 8008b5a:	4613      	mov	r3, r2
 8008b5c:	3201      	adds	r2, #1
 8008b5e:	2c00      	cmp	r4, #0
 8008b60:	d1fa      	bne.n	8008b58 <strcat+0x4>
 8008b62:	3b01      	subs	r3, #1
 8008b64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b68:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008b6c:	2a00      	cmp	r2, #0
 8008b6e:	d1f9      	bne.n	8008b64 <strcat+0x10>
 8008b70:	bd10      	pop	{r4, pc}

08008b72 <strcpy>:
 8008b72:	4603      	mov	r3, r0
 8008b74:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008b78:	f803 2b01 	strb.w	r2, [r3], #1
 8008b7c:	2a00      	cmp	r2, #0
 8008b7e:	d1f9      	bne.n	8008b74 <strcpy+0x2>
 8008b80:	4770      	bx	lr
	...

08008b84 <_strtol_l.constprop.0>:
 8008b84:	2b01      	cmp	r3, #1
 8008b86:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008b8a:	d001      	beq.n	8008b90 <_strtol_l.constprop.0+0xc>
 8008b8c:	2b24      	cmp	r3, #36	; 0x24
 8008b8e:	d906      	bls.n	8008b9e <_strtol_l.constprop.0+0x1a>
 8008b90:	f7ff ff94 	bl	8008abc <__errno>
 8008b94:	2316      	movs	r3, #22
 8008b96:	6003      	str	r3, [r0, #0]
 8008b98:	2000      	movs	r0, #0
 8008b9a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b9e:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8008c84 <_strtol_l.constprop.0+0x100>
 8008ba2:	460d      	mov	r5, r1
 8008ba4:	462e      	mov	r6, r5
 8008ba6:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008baa:	f814 700c 	ldrb.w	r7, [r4, ip]
 8008bae:	f017 0708 	ands.w	r7, r7, #8
 8008bb2:	d1f7      	bne.n	8008ba4 <_strtol_l.constprop.0+0x20>
 8008bb4:	2c2d      	cmp	r4, #45	; 0x2d
 8008bb6:	d132      	bne.n	8008c1e <_strtol_l.constprop.0+0x9a>
 8008bb8:	782c      	ldrb	r4, [r5, #0]
 8008bba:	2701      	movs	r7, #1
 8008bbc:	1cb5      	adds	r5, r6, #2
 8008bbe:	2b00      	cmp	r3, #0
 8008bc0:	d05b      	beq.n	8008c7a <_strtol_l.constprop.0+0xf6>
 8008bc2:	2b10      	cmp	r3, #16
 8008bc4:	d109      	bne.n	8008bda <_strtol_l.constprop.0+0x56>
 8008bc6:	2c30      	cmp	r4, #48	; 0x30
 8008bc8:	d107      	bne.n	8008bda <_strtol_l.constprop.0+0x56>
 8008bca:	782c      	ldrb	r4, [r5, #0]
 8008bcc:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8008bd0:	2c58      	cmp	r4, #88	; 0x58
 8008bd2:	d14d      	bne.n	8008c70 <_strtol_l.constprop.0+0xec>
 8008bd4:	786c      	ldrb	r4, [r5, #1]
 8008bd6:	2310      	movs	r3, #16
 8008bd8:	3502      	adds	r5, #2
 8008bda:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8008bde:	f108 38ff 	add.w	r8, r8, #4294967295	; 0xffffffff
 8008be2:	f04f 0c00 	mov.w	ip, #0
 8008be6:	fbb8 f9f3 	udiv	r9, r8, r3
 8008bea:	4666      	mov	r6, ip
 8008bec:	fb03 8a19 	mls	sl, r3, r9, r8
 8008bf0:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8008bf4:	f1be 0f09 	cmp.w	lr, #9
 8008bf8:	d816      	bhi.n	8008c28 <_strtol_l.constprop.0+0xa4>
 8008bfa:	4674      	mov	r4, lr
 8008bfc:	42a3      	cmp	r3, r4
 8008bfe:	dd24      	ble.n	8008c4a <_strtol_l.constprop.0+0xc6>
 8008c00:	f1bc 0f00 	cmp.w	ip, #0
 8008c04:	db1e      	blt.n	8008c44 <_strtol_l.constprop.0+0xc0>
 8008c06:	45b1      	cmp	r9, r6
 8008c08:	d31c      	bcc.n	8008c44 <_strtol_l.constprop.0+0xc0>
 8008c0a:	d101      	bne.n	8008c10 <_strtol_l.constprop.0+0x8c>
 8008c0c:	45a2      	cmp	sl, r4
 8008c0e:	db19      	blt.n	8008c44 <_strtol_l.constprop.0+0xc0>
 8008c10:	fb06 4603 	mla	r6, r6, r3, r4
 8008c14:	f04f 0c01 	mov.w	ip, #1
 8008c18:	f815 4b01 	ldrb.w	r4, [r5], #1
 8008c1c:	e7e8      	b.n	8008bf0 <_strtol_l.constprop.0+0x6c>
 8008c1e:	2c2b      	cmp	r4, #43	; 0x2b
 8008c20:	bf04      	itt	eq
 8008c22:	782c      	ldrbeq	r4, [r5, #0]
 8008c24:	1cb5      	addeq	r5, r6, #2
 8008c26:	e7ca      	b.n	8008bbe <_strtol_l.constprop.0+0x3a>
 8008c28:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8008c2c:	f1be 0f19 	cmp.w	lr, #25
 8008c30:	d801      	bhi.n	8008c36 <_strtol_l.constprop.0+0xb2>
 8008c32:	3c37      	subs	r4, #55	; 0x37
 8008c34:	e7e2      	b.n	8008bfc <_strtol_l.constprop.0+0x78>
 8008c36:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 8008c3a:	f1be 0f19 	cmp.w	lr, #25
 8008c3e:	d804      	bhi.n	8008c4a <_strtol_l.constprop.0+0xc6>
 8008c40:	3c57      	subs	r4, #87	; 0x57
 8008c42:	e7db      	b.n	8008bfc <_strtol_l.constprop.0+0x78>
 8008c44:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8008c48:	e7e6      	b.n	8008c18 <_strtol_l.constprop.0+0x94>
 8008c4a:	f1bc 0f00 	cmp.w	ip, #0
 8008c4e:	da05      	bge.n	8008c5c <_strtol_l.constprop.0+0xd8>
 8008c50:	2322      	movs	r3, #34	; 0x22
 8008c52:	6003      	str	r3, [r0, #0]
 8008c54:	4646      	mov	r6, r8
 8008c56:	b942      	cbnz	r2, 8008c6a <_strtol_l.constprop.0+0xe6>
 8008c58:	4630      	mov	r0, r6
 8008c5a:	e79e      	b.n	8008b9a <_strtol_l.constprop.0+0x16>
 8008c5c:	b107      	cbz	r7, 8008c60 <_strtol_l.constprop.0+0xdc>
 8008c5e:	4276      	negs	r6, r6
 8008c60:	2a00      	cmp	r2, #0
 8008c62:	d0f9      	beq.n	8008c58 <_strtol_l.constprop.0+0xd4>
 8008c64:	f1bc 0f00 	cmp.w	ip, #0
 8008c68:	d000      	beq.n	8008c6c <_strtol_l.constprop.0+0xe8>
 8008c6a:	1e69      	subs	r1, r5, #1
 8008c6c:	6011      	str	r1, [r2, #0]
 8008c6e:	e7f3      	b.n	8008c58 <_strtol_l.constprop.0+0xd4>
 8008c70:	2430      	movs	r4, #48	; 0x30
 8008c72:	2b00      	cmp	r3, #0
 8008c74:	d1b1      	bne.n	8008bda <_strtol_l.constprop.0+0x56>
 8008c76:	2308      	movs	r3, #8
 8008c78:	e7af      	b.n	8008bda <_strtol_l.constprop.0+0x56>
 8008c7a:	2c30      	cmp	r4, #48	; 0x30
 8008c7c:	d0a5      	beq.n	8008bca <_strtol_l.constprop.0+0x46>
 8008c7e:	230a      	movs	r3, #10
 8008c80:	e7ab      	b.n	8008bda <_strtol_l.constprop.0+0x56>
 8008c82:	bf00      	nop
 8008c84:	08008e76 	.word	0x08008e76

08008c88 <strtol>:
 8008c88:	4613      	mov	r3, r2
 8008c8a:	460a      	mov	r2, r1
 8008c8c:	4601      	mov	r1, r0
 8008c8e:	4802      	ldr	r0, [pc, #8]	; (8008c98 <strtol+0x10>)
 8008c90:	6800      	ldr	r0, [r0, #0]
 8008c92:	f7ff bf77 	b.w	8008b84 <_strtol_l.constprop.0>
 8008c96:	bf00      	nop
 8008c98:	20001454 	.word	0x20001454

08008c9c <__utoa>:
 8008c9c:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008c9e:	4c1f      	ldr	r4, [pc, #124]	; (8008d1c <__utoa+0x80>)
 8008ca0:	b08b      	sub	sp, #44	; 0x2c
 8008ca2:	4605      	mov	r5, r0
 8008ca4:	460b      	mov	r3, r1
 8008ca6:	466e      	mov	r6, sp
 8008ca8:	f104 0c20 	add.w	ip, r4, #32
 8008cac:	6820      	ldr	r0, [r4, #0]
 8008cae:	6861      	ldr	r1, [r4, #4]
 8008cb0:	4637      	mov	r7, r6
 8008cb2:	c703      	stmia	r7!, {r0, r1}
 8008cb4:	3408      	adds	r4, #8
 8008cb6:	4564      	cmp	r4, ip
 8008cb8:	463e      	mov	r6, r7
 8008cba:	d1f7      	bne.n	8008cac <__utoa+0x10>
 8008cbc:	7921      	ldrb	r1, [r4, #4]
 8008cbe:	7139      	strb	r1, [r7, #4]
 8008cc0:	1e91      	subs	r1, r2, #2
 8008cc2:	6820      	ldr	r0, [r4, #0]
 8008cc4:	6038      	str	r0, [r7, #0]
 8008cc6:	2922      	cmp	r1, #34	; 0x22
 8008cc8:	f04f 0100 	mov.w	r1, #0
 8008ccc:	d904      	bls.n	8008cd8 <__utoa+0x3c>
 8008cce:	7019      	strb	r1, [r3, #0]
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	4618      	mov	r0, r3
 8008cd4:	b00b      	add	sp, #44	; 0x2c
 8008cd6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008cd8:	1e58      	subs	r0, r3, #1
 8008cda:	4684      	mov	ip, r0
 8008cdc:	fbb5 f7f2 	udiv	r7, r5, r2
 8008ce0:	fb02 5617 	mls	r6, r2, r7, r5
 8008ce4:	3628      	adds	r6, #40	; 0x28
 8008ce6:	446e      	add	r6, sp
 8008ce8:	460c      	mov	r4, r1
 8008cea:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8008cee:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8008cf2:	462e      	mov	r6, r5
 8008cf4:	42b2      	cmp	r2, r6
 8008cf6:	f101 0101 	add.w	r1, r1, #1
 8008cfa:	463d      	mov	r5, r7
 8008cfc:	d9ee      	bls.n	8008cdc <__utoa+0x40>
 8008cfe:	2200      	movs	r2, #0
 8008d00:	545a      	strb	r2, [r3, r1]
 8008d02:	1919      	adds	r1, r3, r4
 8008d04:	1aa5      	subs	r5, r4, r2
 8008d06:	42aa      	cmp	r2, r5
 8008d08:	dae3      	bge.n	8008cd2 <__utoa+0x36>
 8008d0a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8008d0e:	780e      	ldrb	r6, [r1, #0]
 8008d10:	7006      	strb	r6, [r0, #0]
 8008d12:	3201      	adds	r2, #1
 8008d14:	f801 5901 	strb.w	r5, [r1], #-1
 8008d18:	e7f4      	b.n	8008d04 <__utoa+0x68>
 8008d1a:	bf00      	nop
 8008d1c:	08008e50 	.word	0x08008e50

08008d20 <_init>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	bf00      	nop
 8008d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d26:	bc08      	pop	{r3}
 8008d28:	469e      	mov	lr, r3
 8008d2a:	4770      	bx	lr

08008d2c <_fini>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	bf00      	nop
 8008d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d32:	bc08      	pop	{r3}
 8008d34:	469e      	mov	lr, r3
 8008d36:	4770      	bx	lr
