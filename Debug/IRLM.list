
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005034  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000010c  080051c8  080051c8  000151c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080052d4  080052d4  00021444  2**0
                  CONTENTS
  4 .ARM          00000008  080052d4  080052d4  000152d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080052dc  080052dc  00021444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080052dc  080052dc  000152dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080052e0  080052e0  000152e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001444  20000000  080052e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00003574  20001444  08006728  00021444  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200049b8  08006728  000249b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013e17  00000000  00000000  00021474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000026f7  00000000  00000000  0003528b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00037988  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001138  00000000  00000000  00038b58  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175bf  00000000  00000000  00039c90  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000152f9  00000000  00000000  0005124f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090fbd  00000000  00000000  00066548  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7505  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004d28  00000000  00000000  000f7558  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20001444 	.word	0x20001444
 80001b0:	00000000 	.word	0x00000000
 80001b4:	080051b0 	.word	0x080051b0

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001448 	.word	0x20001448
 80001d0:	080051b0 	.word	0x080051b0

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <disable_button_EEPROM_writes>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

void disable_button_EEPROM_writes(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 80004ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004f2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 2, HAL_MAX_DELAY);
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	21a0      	movs	r1, #160	; 0xa0
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <disable_button_EEPROM_writes+0x28>)
 8000502:	f002 f8ed 	bl	80026e0 <HAL_I2C_Master_Transmit>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20001460 	.word	0x20001460

08000514 <initialize_buttons>:

// Initialize Buttons
void initialize_buttons(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	disable_button_EEPROM_writes();
 8000518:	f7ff ffe6 	bl	80004e8 <disable_button_EEPROM_writes>
	enable_all_buttons();
 800051c:	f000 f89a 	bl	8000654 <enable_all_buttons>
	update_buttons();
 8000520:	f000 f8c2 	bl	80006a8 <update_buttons>
	HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f001 fcab 	bl	8001e80 <HAL_Delay>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <enable_button>:

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01e      	beq.n	800057e <enable_button+0x4e>
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b09      	cmp	r3, #9
 8000544:	d107      	bne.n	8000556 <enable_button+0x26>
		io_ctrl_2 &= ~(0b1);
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <enable_button+0x5c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <enable_button+0x5c>)
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e014      	b.n	8000580 <enable_button+0x50>
	} else if (button <= 8) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d811      	bhi.n	8000580 <enable_button+0x50>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	3b01      	subs	r3, #1
 8000560:	2201      	movs	r2, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	b25b      	sxtb	r3, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	b25a      	sxtb	r2, r3
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <enable_button+0x60>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4013      	ands	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <enable_button+0x60>)
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e000      	b.n	8000580 <enable_button+0x50>
	if (!button) return;
 800057e:	bf00      	nop
	}
}
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000001 	.word	0x20000001
 8000590:	20000000 	.word	0x20000000

08000594 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d01c      	beq.n	80005de <disable_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	d107      	bne.n	80005ba <disable_button+0x26>
		io_ctrl_2 |= 0b1;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <disable_button+0x58>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <disable_button+0x58>)
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e012      	b.n	80005e0 <disable_button+0x4c>
	} else if (button <= 8) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d80f      	bhi.n	80005e0 <disable_button+0x4c>
		io_ctrl_1 |= 0b1 << (button - 1);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <disable_button+0x5c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <disable_button+0x5c>)
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e000      	b.n	80005e0 <disable_button+0x4c>
	if (!button) return;
 80005de:	bf00      	nop
	}
}
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000001 	.word	0x20000001
 80005f0:	20000000 	.word	0x20000000

080005f4 <toggle_button>:

// Toggle a button (1 indexed, left-to-right, top-to-bottom)
void toggle_button(uint8_t button) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d01c      	beq.n	800063e <toggle_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b09      	cmp	r3, #9
 8000608:	d107      	bne.n	800061a <toggle_button+0x26>
		io_ctrl_2 ^= 0b1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <toggle_button+0x58>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <toggle_button+0x58>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e012      	b.n	8000640 <toggle_button+0x4c>
	} else if (button <= 8) {
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d80f      	bhi.n	8000640 <toggle_button+0x4c>
		io_ctrl_1 ^= 0b1 << (button - 1);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b01      	subs	r3, #1
 8000624:	2201      	movs	r2, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <toggle_button+0x5c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4053      	eors	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <toggle_button+0x5c>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e000      	b.n	8000640 <toggle_button+0x4c>
	if (!button) return;
 800063e:	bf00      	nop
	}
}
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000001 	.word	0x20000001
 8000650:	20000000 	.word	0x20000000

08000654 <enable_all_buttons>:

// Enable all of the buttons
void enable_all_buttons(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 800065a:	2301      	movs	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e006      	b.n	800066e <enable_all_buttons+0x1a>
		enable_button(i);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff64 	bl	8000530 <enable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b09      	cmp	r3, #9
 8000672:	d9f5      	bls.n	8000660 <enable_all_buttons+0xc>
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <disable_all_buttons>:

// Disable all of the buttons
void disable_all_buttons(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 8000684:	2301      	movs	r3, #1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	e006      	b.n	8000698 <disable_all_buttons+0x1a>
		disable_button(i);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff81 	bl	8000594 <disable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	3301      	adds	r3, #1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b09      	cmp	r3, #9
 800069c:	d9f5      	bls.n	800068a <disable_all_buttons+0xc>
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <update_buttons>:
		toggle_button(i);
	}
}

// Write the updated button configuration to the remote
void update_buttons(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 80006ae:	23f2      	movs	r3, #242	; 0xf2
 80006b0:	713b      	strb	r3, [r7, #4]
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <update_buttons+0x30>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	717b      	strb	r3, [r7, #5]
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <update_buttons+0x34>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2303      	movs	r3, #3
 80006c8:	21a0      	movs	r1, #160	; 0xa0
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <update_buttons+0x38>)
 80006cc:	f002 f808 	bl	80026e0 <HAL_I2C_Master_Transmit>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000001 	.word	0x20000001
 80006e0:	20001460 	.word	0x20001460

080006e4 <poll_buttons>:

// Poll buttons, returns the first pressed button
// or zero if no button is pressed
uint8_t poll_buttons(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	C1_HIGH();
 80006e8:	2201      	movs	r2, #1
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	483c      	ldr	r0, [pc, #240]	; (80007e0 <poll_buttons+0xfc>)
 80006ee:	f001 fe99 	bl	8002424 <HAL_GPIO_WritePin>
	C2_HIGH();
 80006f2:	2201      	movs	r2, #1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	483a      	ldr	r0, [pc, #232]	; (80007e0 <poll_buttons+0xfc>)
 80006f8:	f001 fe94 	bl	8002424 <HAL_GPIO_WritePin>
	C0_LOW();
 80006fc:	2200      	movs	r2, #0
 80006fe:	2140      	movs	r1, #64	; 0x40
 8000700:	4838      	ldr	r0, [pc, #224]	; (80007e4 <poll_buttons+0x100>)
 8000702:	f001 fe8f 	bl	8002424 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 1;
 8000706:	2108      	movs	r1, #8
 8000708:	4836      	ldr	r0, [pc, #216]	; (80007e4 <poll_buttons+0x100>)
 800070a:	f001 fe73 	bl	80023f4 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <poll_buttons+0x34>
 8000714:	2301      	movs	r3, #1
 8000716:	e061      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 4;
 8000718:	2120      	movs	r1, #32
 800071a:	4832      	ldr	r0, [pc, #200]	; (80007e4 <poll_buttons+0x100>)
 800071c:	f001 fe6a 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <poll_buttons+0x46>
 8000726:	2304      	movs	r3, #4
 8000728:	e058      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 7;
 800072a:	2110      	movs	r1, #16
 800072c:	482d      	ldr	r0, [pc, #180]	; (80007e4 <poll_buttons+0x100>)
 800072e:	f001 fe61 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <poll_buttons+0x58>
 8000738:	2307      	movs	r3, #7
 800073a:	e04f      	b.n	80007dc <poll_buttons+0xf8>
	C0_HIGH();
 800073c:	2201      	movs	r2, #1
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	4828      	ldr	r0, [pc, #160]	; (80007e4 <poll_buttons+0x100>)
 8000742:	f001 fe6f 	bl	8002424 <HAL_GPIO_WritePin>

	C1_LOW();
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4825      	ldr	r0, [pc, #148]	; (80007e0 <poll_buttons+0xfc>)
 800074c:	f001 fe6a 	bl	8002424 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 2;
 8000750:	2108      	movs	r1, #8
 8000752:	4824      	ldr	r0, [pc, #144]	; (80007e4 <poll_buttons+0x100>)
 8000754:	f001 fe4e 	bl	80023f4 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <poll_buttons+0x7e>
 800075e:	2302      	movs	r3, #2
 8000760:	e03c      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 5;
 8000762:	2120      	movs	r1, #32
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <poll_buttons+0x100>)
 8000766:	f001 fe45 	bl	80023f4 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <poll_buttons+0x90>
 8000770:	2305      	movs	r3, #5
 8000772:	e033      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 8;
 8000774:	2110      	movs	r1, #16
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <poll_buttons+0x100>)
 8000778:	f001 fe3c 	bl	80023f4 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <poll_buttons+0xa2>
 8000782:	2308      	movs	r3, #8
 8000784:	e02a      	b.n	80007dc <poll_buttons+0xf8>
	C1_HIGH();
 8000786:	2201      	movs	r2, #1
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	4815      	ldr	r0, [pc, #84]	; (80007e0 <poll_buttons+0xfc>)
 800078c:	f001 fe4a 	bl	8002424 <HAL_GPIO_WritePin>

	C2_LOW();
 8000790:	2200      	movs	r2, #0
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <poll_buttons+0xfc>)
 8000796:	f001 fe45 	bl	8002424 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 3;
 800079a:	2108      	movs	r1, #8
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <poll_buttons+0x100>)
 800079e:	f001 fe29 	bl	80023f4 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <poll_buttons+0xc8>
 80007a8:	2303      	movs	r3, #3
 80007aa:	e017      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 6;
 80007ac:	2120      	movs	r1, #32
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <poll_buttons+0x100>)
 80007b0:	f001 fe20 	bl	80023f4 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <poll_buttons+0xda>
 80007ba:	2306      	movs	r3, #6
 80007bc:	e00e      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 9;
 80007be:	2110      	movs	r1, #16
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <poll_buttons+0x100>)
 80007c2:	f001 fe17 	bl	80023f4 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <poll_buttons+0xec>
 80007cc:	2309      	movs	r3, #9
 80007ce:	e005      	b.n	80007dc <poll_buttons+0xf8>
	C2_HIGH();
 80007d0:	2201      	movs	r2, #1
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <poll_buttons+0xfc>)
 80007d6:	f001 fe25 	bl	8002424 <HAL_GPIO_WritePin>

	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400

080007e8 <init_default_controller>:
static const char* section_deliminator = ",";

extern UART_HandleTypeDef huart1;
extern unsigned char UART1_rxBuffer[8192];

void init_default_controller(Controller* controller) {
 80007e8:	b5b0      	push	{r4, r5, r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
 80007ee:	6078      	str	r0, [r7, #4]
	strcpy(controller->devices[0].commands[0].desc, "PWR");
 80007f0:	687b      	ldr	r3, [r7, #4]
 80007f2:	3311      	adds	r3, #17
 80007f4:	4ab5      	ldr	r2, [pc, #724]	; (8000acc <init_default_controller+0x2e4>)
 80007f6:	6810      	ldr	r0, [r2, #0]
 80007f8:	6018      	str	r0, [r3, #0]
	strcpy(controller->devices[0].commands[0].full_desc, "Power Toggle");
 80007fa:	687b      	ldr	r3, [r7, #4]
 80007fc:	3301      	adds	r3, #1
 80007fe:	4ab4      	ldr	r2, [pc, #720]	; (8000ad0 <init_default_controller+0x2e8>)
 8000800:	461c      	mov	r4, r3
 8000802:	4613      	mov	r3, r2
 8000804:	cb07      	ldmia	r3!, {r0, r1, r2}
 8000806:	6020      	str	r0, [r4, #0]
 8000808:	6061      	str	r1, [r4, #4]
 800080a:	60a2      	str	r2, [r4, #8]
 800080c:	781b      	ldrb	r3, [r3, #0]
 800080e:	7323      	strb	r3, [r4, #12]
	controller->devices[0].commands[0].UART_Data = 0x7B;
 8000810:	687b      	ldr	r3, [r7, #4]
 8000812:	227b      	movs	r2, #123	; 0x7b
 8000814:	701a      	strb	r2, [r3, #0]
	char buf[3];
	for (uint8_t i = 1; i <= 9; ++i) {
 8000816:	2301      	movs	r3, #1
 8000818:	73fb      	strb	r3, [r7, #15]
 800081a:	e099      	b.n	8000950 <init_default_controller+0x168>
		itoa(i < 5 ? i : i + 5,buf,10);
 800081c:	7bfb      	ldrb	r3, [r7, #15]
 800081e:	2b04      	cmp	r3, #4
 8000820:	d801      	bhi.n	8000826 <init_default_controller+0x3e>
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	e001      	b.n	800082a <init_default_controller+0x42>
 8000826:	7bfb      	ldrb	r3, [r7, #15]
 8000828:	3305      	adds	r3, #5
 800082a:	f107 0108 	add.w	r1, r7, #8
 800082e:	220a      	movs	r2, #10
 8000830:	4618      	mov	r0, r3
 8000832:	f004 fc47 	bl	80050c4 <itoa>
		strcpy(controller->devices[0].name, "Example Device 0");
 8000836:	687b      	ldr	r3, [r7, #4]
 8000838:	f503 733d 	add.w	r3, r3, #756	; 0x2f4
 800083c:	4aa5      	ldr	r2, [pc, #660]	; (8000ad4 <init_default_controller+0x2ec>)
 800083e:	461d      	mov	r5, r3
 8000840:	4614      	mov	r4, r2
 8000842:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000844:	6028      	str	r0, [r5, #0]
 8000846:	6069      	str	r1, [r5, #4]
 8000848:	60aa      	str	r2, [r5, #8]
 800084a:	60eb      	str	r3, [r5, #12]
 800084c:	7823      	ldrb	r3, [r4, #0]
 800084e:	742b      	strb	r3, [r5, #16]
		strcpy(controller->devices[0].commands[i < 5 ? i : i + 5].desc, "CM");
 8000850:	7bfb      	ldrb	r3, [r7, #15]
 8000852:	2b04      	cmp	r3, #4
 8000854:	d801      	bhi.n	800085a <init_default_controller+0x72>
 8000856:	7bfa      	ldrb	r2, [r7, #15]
 8000858:	e001      	b.n	800085e <init_default_controller+0x76>
 800085a:	7bfb      	ldrb	r3, [r7, #15]
 800085c:	1d5a      	adds	r2, r3, #5
 800085e:	4613      	mov	r3, r2
 8000860:	005b      	lsls	r3, r3, #1
 8000862:	4413      	add	r3, r2
 8000864:	00da      	lsls	r2, r3, #3
 8000866:	4413      	add	r3, r2
 8000868:	3310      	adds	r3, #16
 800086a:	687a      	ldr	r2, [r7, #4]
 800086c:	4413      	add	r3, r2
 800086e:	3301      	adds	r3, #1
 8000870:	4a99      	ldr	r2, [pc, #612]	; (8000ad8 <init_default_controller+0x2f0>)
 8000872:	8811      	ldrh	r1, [r2, #0]
 8000874:	7892      	ldrb	r2, [r2, #2]
 8000876:	8019      	strh	r1, [r3, #0]
 8000878:	709a      	strb	r2, [r3, #2]
		strncat(controller->devices[0].commands[(i < 5 ? i : i + 5)].desc, buf,strlen(buf));
 800087a:	7bfb      	ldrb	r3, [r7, #15]
 800087c:	2b04      	cmp	r3, #4
 800087e:	d801      	bhi.n	8000884 <init_default_controller+0x9c>
 8000880:	7bfa      	ldrb	r2, [r7, #15]
 8000882:	e001      	b.n	8000888 <init_default_controller+0xa0>
 8000884:	7bfb      	ldrb	r3, [r7, #15]
 8000886:	1d5a      	adds	r2, r3, #5
 8000888:	4613      	mov	r3, r2
 800088a:	005b      	lsls	r3, r3, #1
 800088c:	4413      	add	r3, r2
 800088e:	00da      	lsls	r2, r3, #3
 8000890:	4413      	add	r3, r2
 8000892:	3310      	adds	r3, #16
 8000894:	687a      	ldr	r2, [r7, #4]
 8000896:	4413      	add	r3, r2
 8000898:	1c5c      	adds	r4, r3, #1
 800089a:	f107 0308 	add.w	r3, r7, #8
 800089e:	4618      	mov	r0, r3
 80008a0:	f7ff fc98 	bl	80001d4 <strlen>
 80008a4:	4602      	mov	r2, r0
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	4620      	mov	r0, r4
 80008ae:	f004 fc2a 	bl	8005106 <strncat>
		strcpy(controller->devices[0].commands[i < 5 ? i : i + 5].full_desc, "Long Desc ");
 80008b2:	7bfb      	ldrb	r3, [r7, #15]
 80008b4:	2b04      	cmp	r3, #4
 80008b6:	d801      	bhi.n	80008bc <init_default_controller+0xd4>
 80008b8:	7bfa      	ldrb	r2, [r7, #15]
 80008ba:	e001      	b.n	80008c0 <init_default_controller+0xd8>
 80008bc:	7bfb      	ldrb	r3, [r7, #15]
 80008be:	1d5a      	adds	r2, r3, #5
 80008c0:	4613      	mov	r3, r2
 80008c2:	005b      	lsls	r3, r3, #1
 80008c4:	4413      	add	r3, r2
 80008c6:	00da      	lsls	r2, r3, #3
 80008c8:	4413      	add	r3, r2
 80008ca:	687a      	ldr	r2, [r7, #4]
 80008cc:	4413      	add	r3, r2
 80008ce:	3301      	adds	r3, #1
 80008d0:	4982      	ldr	r1, [pc, #520]	; (8000adc <init_default_controller+0x2f4>)
 80008d2:	461a      	mov	r2, r3
 80008d4:	460b      	mov	r3, r1
 80008d6:	cb03      	ldmia	r3!, {r0, r1}
 80008d8:	6010      	str	r0, [r2, #0]
 80008da:	6051      	str	r1, [r2, #4]
 80008dc:	8819      	ldrh	r1, [r3, #0]
 80008de:	789b      	ldrb	r3, [r3, #2]
 80008e0:	8111      	strh	r1, [r2, #8]
 80008e2:	7293      	strb	r3, [r2, #10]
		strncat(controller->devices[0].commands[(i < 5 ? i : i + 5)].full_desc, buf,strlen(buf));
 80008e4:	7bfb      	ldrb	r3, [r7, #15]
 80008e6:	2b04      	cmp	r3, #4
 80008e8:	d801      	bhi.n	80008ee <init_default_controller+0x106>
 80008ea:	7bfa      	ldrb	r2, [r7, #15]
 80008ec:	e001      	b.n	80008f2 <init_default_controller+0x10a>
 80008ee:	7bfb      	ldrb	r3, [r7, #15]
 80008f0:	1d5a      	adds	r2, r3, #5
 80008f2:	4613      	mov	r3, r2
 80008f4:	005b      	lsls	r3, r3, #1
 80008f6:	4413      	add	r3, r2
 80008f8:	00da      	lsls	r2, r3, #3
 80008fa:	4413      	add	r3, r2
 80008fc:	687a      	ldr	r2, [r7, #4]
 80008fe:	4413      	add	r3, r2
 8000900:	1c5c      	adds	r4, r3, #1
 8000902:	f107 0308 	add.w	r3, r7, #8
 8000906:	4618      	mov	r0, r3
 8000908:	f7ff fc64 	bl	80001d4 <strlen>
 800090c:	4602      	mov	r2, r0
 800090e:	f107 0308 	add.w	r3, r7, #8
 8000912:	4619      	mov	r1, r3
 8000914:	4620      	mov	r0, r4
 8000916:	f004 fbf6 	bl	8005106 <strncat>
		controller->devices[0].commands[i < 5 ? i : i + 5].UART_Data = i < 5 ? i : i + 5;
 800091a:	7bfb      	ldrb	r3, [r7, #15]
 800091c:	2b04      	cmp	r3, #4
 800091e:	d903      	bls.n	8000928 <init_default_controller+0x140>
 8000920:	7bfb      	ldrb	r3, [r7, #15]
 8000922:	3305      	adds	r3, #5
 8000924:	b2d9      	uxtb	r1, r3
 8000926:	e000      	b.n	800092a <init_default_controller+0x142>
 8000928:	7bf9      	ldrb	r1, [r7, #15]
 800092a:	7bfb      	ldrb	r3, [r7, #15]
 800092c:	2b04      	cmp	r3, #4
 800092e:	d801      	bhi.n	8000934 <init_default_controller+0x14c>
 8000930:	7bfa      	ldrb	r2, [r7, #15]
 8000932:	e001      	b.n	8000938 <init_default_controller+0x150>
 8000934:	7bfb      	ldrb	r3, [r7, #15]
 8000936:	1d5a      	adds	r2, r3, #5
 8000938:	6878      	ldr	r0, [r7, #4]
 800093a:	4613      	mov	r3, r2
 800093c:	005b      	lsls	r3, r3, #1
 800093e:	4413      	add	r3, r2
 8000940:	00da      	lsls	r2, r3, #3
 8000942:	4413      	add	r3, r2
 8000944:	4403      	add	r3, r0
 8000946:	460a      	mov	r2, r1
 8000948:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= 9; ++i) {
 800094a:	7bfb      	ldrb	r3, [r7, #15]
 800094c:	3301      	adds	r3, #1
 800094e:	73fb      	strb	r3, [r7, #15]
 8000950:	7bfb      	ldrb	r3, [r7, #15]
 8000952:	2b09      	cmp	r3, #9
 8000954:	f67f af62 	bls.w	800081c <init_default_controller+0x34>
	}
	controller->num_devices = 1;
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 800095e:	2201      	movs	r2, #1
 8000960:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	controller->devices[0].num_button_commands = 5;
 8000964:	687b      	ldr	r3, [r7, #4]
 8000966:	2205      	movs	r2, #5
 8000968:	f883 2314 	strb.w	r2, [r3, #788]	; 0x314
	controller->devices[0].num_touch_commands = 5;
 800096c:	687b      	ldr	r3, [r7, #4]
 800096e:	2205      	movs	r2, #5
 8000970:	f883 2315 	strb.w	r2, [r3, #789]	; 0x315

	strcpy(controller->devices[1].commands[0].desc, "PWR");
 8000974:	687b      	ldr	r3, [r7, #4]
 8000976:	f203 3327 	addw	r3, r3, #807	; 0x327
 800097a:	4a54      	ldr	r2, [pc, #336]	; (8000acc <init_default_controller+0x2e4>)
 800097c:	6810      	ldr	r0, [r2, #0]
 800097e:	6018      	str	r0, [r3, #0]
	strcpy(controller->devices[1].commands[0].full_desc, "Power Toggle");
 8000980:	687b      	ldr	r3, [r7, #4]
 8000982:	f203 3317 	addw	r3, r3, #791	; 0x317
 8000986:	4a52      	ldr	r2, [pc, #328]	; (8000ad0 <init_default_controller+0x2e8>)
 8000988:	461c      	mov	r4, r3
 800098a:	4613      	mov	r3, r2
 800098c:	cb07      	ldmia	r3!, {r0, r1, r2}
 800098e:	6020      	str	r0, [r4, #0]
 8000990:	6061      	str	r1, [r4, #4]
 8000992:	60a2      	str	r2, [r4, #8]
 8000994:	781b      	ldrb	r3, [r3, #0]
 8000996:	7323      	strb	r3, [r4, #12]
	controller->devices[1].commands[0].UART_Data = 0x4A;
 8000998:	687b      	ldr	r3, [r7, #4]
 800099a:	224a      	movs	r2, #74	; 0x4a
 800099c:	f883 2316 	strb.w	r2, [r3, #790]	; 0x316
	for (uint8_t i = 1; i <= 8; ++i) {
 80009a0:	2301      	movs	r3, #1
 80009a2:	73bb      	strb	r3, [r7, #14]
 80009a4:	e0ae      	b.n	8000b04 <init_default_controller+0x31c>
		itoa(i < 5 ? i : i + 5,buf,10);
 80009a6:	7bbb      	ldrb	r3, [r7, #14]
 80009a8:	2b04      	cmp	r3, #4
 80009aa:	d801      	bhi.n	80009b0 <init_default_controller+0x1c8>
 80009ac:	7bbb      	ldrb	r3, [r7, #14]
 80009ae:	e001      	b.n	80009b4 <init_default_controller+0x1cc>
 80009b0:	7bbb      	ldrb	r3, [r7, #14]
 80009b2:	3305      	adds	r3, #5
 80009b4:	f107 0108 	add.w	r1, r7, #8
 80009b8:	220a      	movs	r2, #10
 80009ba:	4618      	mov	r0, r3
 80009bc:	f004 fb82 	bl	80050c4 <itoa>
		strcpy(controller->devices[1].name, "Example Device 1");
 80009c0:	687b      	ldr	r3, [r7, #4]
 80009c2:	f203 630a 	addw	r3, r3, #1546	; 0x60a
 80009c6:	4a46      	ldr	r2, [pc, #280]	; (8000ae0 <init_default_controller+0x2f8>)
 80009c8:	461d      	mov	r5, r3
 80009ca:	4614      	mov	r4, r2
 80009cc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80009ce:	6028      	str	r0, [r5, #0]
 80009d0:	6069      	str	r1, [r5, #4]
 80009d2:	60aa      	str	r2, [r5, #8]
 80009d4:	60eb      	str	r3, [r5, #12]
 80009d6:	7823      	ldrb	r3, [r4, #0]
 80009d8:	742b      	strb	r3, [r5, #16]
		strcpy(controller->devices[1].commands[i < 5 ? i : i + 5].desc, "CM");
 80009da:	7bbb      	ldrb	r3, [r7, #14]
 80009dc:	2b04      	cmp	r3, #4
 80009de:	d801      	bhi.n	80009e4 <init_default_controller+0x1fc>
 80009e0:	7bba      	ldrb	r2, [r7, #14]
 80009e2:	e001      	b.n	80009e8 <init_default_controller+0x200>
 80009e4:	7bbb      	ldrb	r3, [r7, #14]
 80009e6:	1d5a      	adds	r2, r3, #5
 80009e8:	4613      	mov	r3, r2
 80009ea:	005b      	lsls	r3, r3, #1
 80009ec:	4413      	add	r3, r2
 80009ee:	00da      	lsls	r2, r3, #3
 80009f0:	4413      	add	r3, r2
 80009f2:	f203 3326 	addw	r3, r3, #806	; 0x326
 80009f6:	687a      	ldr	r2, [r7, #4]
 80009f8:	4413      	add	r3, r2
 80009fa:	3301      	adds	r3, #1
 80009fc:	4a36      	ldr	r2, [pc, #216]	; (8000ad8 <init_default_controller+0x2f0>)
 80009fe:	8811      	ldrh	r1, [r2, #0]
 8000a00:	7892      	ldrb	r2, [r2, #2]
 8000a02:	8019      	strh	r1, [r3, #0]
 8000a04:	709a      	strb	r2, [r3, #2]
		strncat(controller->devices[1].commands[(i < 5 ? i : i + 5)].desc, buf,strlen(buf));
 8000a06:	7bbb      	ldrb	r3, [r7, #14]
 8000a08:	2b04      	cmp	r3, #4
 8000a0a:	d801      	bhi.n	8000a10 <init_default_controller+0x228>
 8000a0c:	7bba      	ldrb	r2, [r7, #14]
 8000a0e:	e001      	b.n	8000a14 <init_default_controller+0x22c>
 8000a10:	7bbb      	ldrb	r3, [r7, #14]
 8000a12:	1d5a      	adds	r2, r3, #5
 8000a14:	4613      	mov	r3, r2
 8000a16:	005b      	lsls	r3, r3, #1
 8000a18:	4413      	add	r3, r2
 8000a1a:	00da      	lsls	r2, r3, #3
 8000a1c:	4413      	add	r3, r2
 8000a1e:	f203 3326 	addw	r3, r3, #806	; 0x326
 8000a22:	687a      	ldr	r2, [r7, #4]
 8000a24:	4413      	add	r3, r2
 8000a26:	1c5c      	adds	r4, r3, #1
 8000a28:	f107 0308 	add.w	r3, r7, #8
 8000a2c:	4618      	mov	r0, r3
 8000a2e:	f7ff fbd1 	bl	80001d4 <strlen>
 8000a32:	4602      	mov	r2, r0
 8000a34:	f107 0308 	add.w	r3, r7, #8
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4620      	mov	r0, r4
 8000a3c:	f004 fb63 	bl	8005106 <strncat>
		strcpy(controller->devices[1].commands[i < 5 ? i : i + 5].full_desc, "Long Desc ");
 8000a40:	7bbb      	ldrb	r3, [r7, #14]
 8000a42:	2b04      	cmp	r3, #4
 8000a44:	d801      	bhi.n	8000a4a <init_default_controller+0x262>
 8000a46:	7bba      	ldrb	r2, [r7, #14]
 8000a48:	e001      	b.n	8000a4e <init_default_controller+0x266>
 8000a4a:	7bbb      	ldrb	r3, [r7, #14]
 8000a4c:	1d5a      	adds	r2, r3, #5
 8000a4e:	4613      	mov	r3, r2
 8000a50:	005b      	lsls	r3, r3, #1
 8000a52:	4413      	add	r3, r2
 8000a54:	00da      	lsls	r2, r3, #3
 8000a56:	4413      	add	r3, r2
 8000a58:	f203 3316 	addw	r3, r3, #790	; 0x316
 8000a5c:	687a      	ldr	r2, [r7, #4]
 8000a5e:	4413      	add	r3, r2
 8000a60:	3301      	adds	r3, #1
 8000a62:	491e      	ldr	r1, [pc, #120]	; (8000adc <init_default_controller+0x2f4>)
 8000a64:	461a      	mov	r2, r3
 8000a66:	460b      	mov	r3, r1
 8000a68:	cb03      	ldmia	r3!, {r0, r1}
 8000a6a:	6010      	str	r0, [r2, #0]
 8000a6c:	6051      	str	r1, [r2, #4]
 8000a6e:	8819      	ldrh	r1, [r3, #0]
 8000a70:	789b      	ldrb	r3, [r3, #2]
 8000a72:	8111      	strh	r1, [r2, #8]
 8000a74:	7293      	strb	r3, [r2, #10]
		strncat(controller->devices[1].commands[(i < 5 ? i : i + 5)].full_desc, buf,strlen(buf));
 8000a76:	7bbb      	ldrb	r3, [r7, #14]
 8000a78:	2b04      	cmp	r3, #4
 8000a7a:	d801      	bhi.n	8000a80 <init_default_controller+0x298>
 8000a7c:	7bba      	ldrb	r2, [r7, #14]
 8000a7e:	e001      	b.n	8000a84 <init_default_controller+0x29c>
 8000a80:	7bbb      	ldrb	r3, [r7, #14]
 8000a82:	1d5a      	adds	r2, r3, #5
 8000a84:	4613      	mov	r3, r2
 8000a86:	005b      	lsls	r3, r3, #1
 8000a88:	4413      	add	r3, r2
 8000a8a:	00da      	lsls	r2, r3, #3
 8000a8c:	4413      	add	r3, r2
 8000a8e:	f203 3316 	addw	r3, r3, #790	; 0x316
 8000a92:	687a      	ldr	r2, [r7, #4]
 8000a94:	4413      	add	r3, r2
 8000a96:	1c5c      	adds	r4, r3, #1
 8000a98:	f107 0308 	add.w	r3, r7, #8
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	f7ff fb99 	bl	80001d4 <strlen>
 8000aa2:	4602      	mov	r2, r0
 8000aa4:	f107 0308 	add.w	r3, r7, #8
 8000aa8:	4619      	mov	r1, r3
 8000aaa:	4620      	mov	r0, r4
 8000aac:	f004 fb2b 	bl	8005106 <strncat>
		controller->devices[1].commands[i < 5 ? i : i + 5].UART_Data = i < 5 ? i : i + 5;
 8000ab0:	7bbb      	ldrb	r3, [r7, #14]
 8000ab2:	2b04      	cmp	r3, #4
 8000ab4:	d903      	bls.n	8000abe <init_default_controller+0x2d6>
 8000ab6:	7bbb      	ldrb	r3, [r7, #14]
 8000ab8:	3305      	adds	r3, #5
 8000aba:	b2d9      	uxtb	r1, r3
 8000abc:	e000      	b.n	8000ac0 <init_default_controller+0x2d8>
 8000abe:	7bb9      	ldrb	r1, [r7, #14]
 8000ac0:	7bbb      	ldrb	r3, [r7, #14]
 8000ac2:	2b04      	cmp	r3, #4
 8000ac4:	d80e      	bhi.n	8000ae4 <init_default_controller+0x2fc>
 8000ac6:	7bba      	ldrb	r2, [r7, #14]
 8000ac8:	e00e      	b.n	8000ae8 <init_default_controller+0x300>
 8000aca:	bf00      	nop
 8000acc:	080051d0 	.word	0x080051d0
 8000ad0:	080051d4 	.word	0x080051d4
 8000ad4:	080051e4 	.word	0x080051e4
 8000ad8:	080051f8 	.word	0x080051f8
 8000adc:	080051fc 	.word	0x080051fc
 8000ae0:	08005208 	.word	0x08005208
 8000ae4:	7bbb      	ldrb	r3, [r7, #14]
 8000ae6:	1d5a      	adds	r2, r3, #5
 8000ae8:	6878      	ldr	r0, [r7, #4]
 8000aea:	4613      	mov	r3, r2
 8000aec:	005b      	lsls	r3, r3, #1
 8000aee:	4413      	add	r3, r2
 8000af0:	00da      	lsls	r2, r3, #3
 8000af2:	4413      	add	r3, r2
 8000af4:	4403      	add	r3, r0
 8000af6:	f203 3316 	addw	r3, r3, #790	; 0x316
 8000afa:	460a      	mov	r2, r1
 8000afc:	701a      	strb	r2, [r3, #0]
	for (uint8_t i = 1; i <= 8; ++i) {
 8000afe:	7bbb      	ldrb	r3, [r7, #14]
 8000b00:	3301      	adds	r3, #1
 8000b02:	73bb      	strb	r3, [r7, #14]
 8000b04:	7bbb      	ldrb	r3, [r7, #14]
 8000b06:	2b08      	cmp	r3, #8
 8000b08:	f67f af4d 	bls.w	80009a6 <init_default_controller+0x1be>
	}
	controller->num_devices = 2;
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f503 5340 	add.w	r3, r3, #12288	; 0x3000
 8000b12:	2202      	movs	r2, #2
 8000b14:	f883 2160 	strb.w	r2, [r3, #352]	; 0x160
	controller->devices[1].num_button_commands = 5;
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	2205      	movs	r2, #5
 8000b1c:	f883 262a 	strb.w	r2, [r3, #1578]	; 0x62a
	controller->devices[1].num_touch_commands = 4;
 8000b20:	687b      	ldr	r3, [r7, #4]
 8000b22:	2204      	movs	r2, #4
 8000b24:	f883 262b 	strb.w	r2, [r3, #1579]	; 0x62b
}
 8000b28:	bf00      	nop
 8000b2a:	3710      	adds	r7, #16
 8000b2c:	46bd      	mov	sp, r7
 8000b2e:	bdb0      	pop	{r4, r5, r7, pc}

08000b30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000b34:	f001 f932 	bl	8001d9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000b38:	f000 f83c 	bl	8000bb4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000b3c:	f000 f9fa 	bl	8000f34 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000b40:	f000 f8d2 	bl	8000ce8 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000b44:	f000 f908 	bl	8000d58 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000b48:	f000 f9ca 	bl	8000ee0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000b4c:	f000 f89e 	bl	8000c8c <MX_I2C1_Init>
  MX_TIM5_Init();
 8000b50:	f000 f978 	bl	8000e44 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  init_default_controller(&controller);
 8000b54:	4813      	ldr	r0, [pc, #76]	; (8000ba4 <main+0x74>)
 8000b56:	f7ff fe47 	bl	80007e8 <init_default_controller>
  // init_xbee_communication();
  init_displays();
 8000b5a:	f000 fc69 	bl	8001430 <init_displays>
  HAL_TIM_Base_Start_IT(&htim5);
 8000b5e:	4812      	ldr	r0, [pc, #72]	; (8000ba8 <main+0x78>)
 8000b60:	f003 f83e 	bl	8003be0 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000b64:	2108      	movs	r1, #8
 8000b66:	4811      	ldr	r0, [pc, #68]	; (8000bac <main+0x7c>)
 8000b68:	f003 f8f6 	bl	8003d58 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 200); // Adjust LED Brightness
 8000b6c:	4b0f      	ldr	r3, [pc, #60]	; (8000bac <main+0x7c>)
 8000b6e:	681b      	ldr	r3, [r3, #0]
 8000b70:	22c8      	movs	r2, #200	; 0xc8
 8000b72:	63da      	str	r2, [r3, #60]	; 0x3c
  initialize_buttons();
 8000b74:	f7ff fcce 	bl	8000514 <initialize_buttons>
  disable_all_buttons();
 8000b78:	f7ff fd81 	bl	800067e <disable_all_buttons>
  update_buttons();
 8000b7c:	f7ff fd94 	bl	80006a8 <update_buttons>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  display_menu(main_menu, 1);
 8000b80:	2101      	movs	r1, #1
 8000b82:	2000      	movs	r0, #0
 8000b84:	f000 fade 	bl	8001144 <display_menu>
  while (1)
  {
	  if (button) {
 8000b88:	4b09      	ldr	r3, [pc, #36]	; (8000bb0 <main+0x80>)
 8000b8a:	781b      	ldrb	r3, [r3, #0]
 8000b8c:	2b00      	cmp	r3, #0
 8000b8e:	d0fb      	beq.n	8000b88 <main+0x58>
		  button_pressed(button);
 8000b90:	4b07      	ldr	r3, [pc, #28]	; (8000bb0 <main+0x80>)
 8000b92:	781b      	ldrb	r3, [r3, #0]
 8000b94:	4618      	mov	r0, r3
 8000b96:	f000 fb6f 	bl	8001278 <button_pressed>
		  button = 0;
 8000b9a:	4b05      	ldr	r3, [pc, #20]	; (8000bb0 <main+0x80>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	701a      	strb	r2, [r3, #0]
	  if (button) {
 8000ba0:	e7f2      	b.n	8000b88 <main+0x58>
 8000ba2:	bf00      	nop
 8000ba4:	200015e4 	.word	0x200015e4
 8000ba8:	20001554 	.word	0x20001554
 8000bac:	2000150c 	.word	0x2000150c
 8000bb0:	200015e0 	.word	0x200015e0

08000bb4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b094      	sub	sp, #80	; 0x50
 8000bb8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bba:	f107 0320 	add.w	r3, r7, #32
 8000bbe:	2230      	movs	r2, #48	; 0x30
 8000bc0:	2100      	movs	r1, #0
 8000bc2:	4618      	mov	r0, r3
 8000bc4:	f004 fa80 	bl	80050c8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc8:	f107 030c 	add.w	r3, r7, #12
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]
 8000bd6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000bd8:	2300      	movs	r3, #0
 8000bda:	60bb      	str	r3, [r7, #8]
 8000bdc:	4b29      	ldr	r3, [pc, #164]	; (8000c84 <SystemClock_Config+0xd0>)
 8000bde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000be0:	4a28      	ldr	r2, [pc, #160]	; (8000c84 <SystemClock_Config+0xd0>)
 8000be2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000be6:	6413      	str	r3, [r2, #64]	; 0x40
 8000be8:	4b26      	ldr	r3, [pc, #152]	; (8000c84 <SystemClock_Config+0xd0>)
 8000bea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bf0:	60bb      	str	r3, [r7, #8]
 8000bf2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000bf4:	2300      	movs	r3, #0
 8000bf6:	607b      	str	r3, [r7, #4]
 8000bf8:	4b23      	ldr	r3, [pc, #140]	; (8000c88 <SystemClock_Config+0xd4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000c00:	4a21      	ldr	r2, [pc, #132]	; (8000c88 <SystemClock_Config+0xd4>)
 8000c02:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000c06:	6013      	str	r3, [r2, #0]
 8000c08:	4b1f      	ldr	r3, [pc, #124]	; (8000c88 <SystemClock_Config+0xd4>)
 8000c0a:	681b      	ldr	r3, [r3, #0]
 8000c0c:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000c10:	607b      	str	r3, [r7, #4]
 8000c12:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000c14:	2302      	movs	r3, #2
 8000c16:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000c18:	2301      	movs	r3, #1
 8000c1a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000c1c:	2310      	movs	r3, #16
 8000c1e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000c20:	2302      	movs	r3, #2
 8000c22:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000c24:	2300      	movs	r3, #0
 8000c26:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000c28:	2310      	movs	r3, #16
 8000c2a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000c2c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000c30:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000c32:	2304      	movs	r3, #4
 8000c34:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000c36:	2307      	movs	r3, #7
 8000c38:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000c3a:	f107 0320 	add.w	r3, r7, #32
 8000c3e:	4618      	mov	r0, r3
 8000c40:	f002 f856 	bl	8002cf0 <HAL_RCC_OscConfig>
 8000c44:	4603      	mov	r3, r0
 8000c46:	2b00      	cmp	r3, #0
 8000c48:	d001      	beq.n	8000c4e <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000c4a:	f000 fa75 	bl	8001138 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c4e:	230f      	movs	r3, #15
 8000c50:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c52:	2302      	movs	r3, #2
 8000c54:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c56:	2300      	movs	r3, #0
 8000c58:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c5a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c5e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c60:	2300      	movs	r3, #0
 8000c62:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c64:	f107 030c 	add.w	r3, r7, #12
 8000c68:	2102      	movs	r1, #2
 8000c6a:	4618      	mov	r0, r3
 8000c6c:	f002 fab8 	bl	80031e0 <HAL_RCC_ClockConfig>
 8000c70:	4603      	mov	r3, r0
 8000c72:	2b00      	cmp	r3, #0
 8000c74:	d001      	beq.n	8000c7a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c76:	f000 fa5f 	bl	8001138 <Error_Handler>
  }
}
 8000c7a:	bf00      	nop
 8000c7c:	3750      	adds	r7, #80	; 0x50
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	40023800 	.word	0x40023800
 8000c88:	40007000 	.word	0x40007000

08000c8c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c90:	4b12      	ldr	r3, [pc, #72]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c92:	4a13      	ldr	r2, [pc, #76]	; (8000ce0 <MX_I2C1_Init+0x54>)
 8000c94:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c96:	4b11      	ldr	r3, [pc, #68]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c98:	4a12      	ldr	r2, [pc, #72]	; (8000ce4 <MX_I2C1_Init+0x58>)
 8000c9a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c9c:	4b0f      	ldr	r3, [pc, #60]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000ca2:	4b0e      	ldr	r3, [pc, #56]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000ca4:	2200      	movs	r2, #0
 8000ca6:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ca8:	4b0c      	ldr	r3, [pc, #48]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000caa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cae:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cb0:	4b0a      	ldr	r3, [pc, #40]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000cb6:	4b09      	ldr	r3, [pc, #36]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cb8:	2200      	movs	r2, #0
 8000cba:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000cbc:	4b07      	ldr	r3, [pc, #28]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cc2:	4b06      	ldr	r3, [pc, #24]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cc4:	2200      	movs	r2, #0
 8000cc6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cc8:	4804      	ldr	r0, [pc, #16]	; (8000cdc <MX_I2C1_Init+0x50>)
 8000cca:	f001 fbc5 	bl	8002458 <HAL_I2C_Init>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	2b00      	cmp	r3, #0
 8000cd2:	d001      	beq.n	8000cd8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cd4:	f000 fa30 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cd8:	bf00      	nop
 8000cda:	bd80      	pop	{r7, pc}
 8000cdc:	20001460 	.word	0x20001460
 8000ce0:	40005400 	.word	0x40005400
 8000ce4:	000186a0 	.word	0x000186a0

08000ce8 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cec:	4b18      	ldr	r3, [pc, #96]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000cee:	4a19      	ldr	r2, [pc, #100]	; (8000d54 <MX_SPI2_Init+0x6c>)
 8000cf0:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cf2:	4b17      	ldr	r3, [pc, #92]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000cf4:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cf8:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000cfa:	4b15      	ldr	r3, [pc, #84]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000cfc:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000d00:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d02:	4b13      	ldr	r3, [pc, #76]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d08:	4b11      	ldr	r3, [pc, #68]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d0e:	4b10      	ldr	r3, [pc, #64]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d14:	4b0e      	ldr	r3, [pc, #56]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d16:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d1a:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d1c:	4b0c      	ldr	r3, [pc, #48]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d1e:	2230      	movs	r2, #48	; 0x30
 8000d20:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d22:	4b0b      	ldr	r3, [pc, #44]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d24:	2200      	movs	r2, #0
 8000d26:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d28:	4b09      	ldr	r3, [pc, #36]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d2a:	2200      	movs	r2, #0
 8000d2c:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d2e:	4b08      	ldr	r3, [pc, #32]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d30:	2200      	movs	r2, #0
 8000d32:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d34:	4b06      	ldr	r3, [pc, #24]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d36:	220a      	movs	r2, #10
 8000d38:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d3a:	4805      	ldr	r0, [pc, #20]	; (8000d50 <MX_SPI2_Init+0x68>)
 8000d3c:	f002 fc70 	bl	8003620 <HAL_SPI_Init>
 8000d40:	4603      	mov	r3, r0
 8000d42:	2b00      	cmp	r3, #0
 8000d44:	d001      	beq.n	8000d4a <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000d46:	f000 f9f7 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d4a:	bf00      	nop
 8000d4c:	bd80      	pop	{r7, pc}
 8000d4e:	bf00      	nop
 8000d50:	200014b4 	.word	0x200014b4
 8000d54:	40003800 	.word	0x40003800

08000d58 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000d58:	b580      	push	{r7, lr}
 8000d5a:	b08e      	sub	sp, #56	; 0x38
 8000d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d5e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000d62:	2200      	movs	r2, #0
 8000d64:	601a      	str	r2, [r3, #0]
 8000d66:	605a      	str	r2, [r3, #4]
 8000d68:	609a      	str	r2, [r3, #8]
 8000d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d6c:	f107 0320 	add.w	r3, r7, #32
 8000d70:	2200      	movs	r2, #0
 8000d72:	601a      	str	r2, [r3, #0]
 8000d74:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000d76:	1d3b      	adds	r3, r7, #4
 8000d78:	2200      	movs	r2, #0
 8000d7a:	601a      	str	r2, [r3, #0]
 8000d7c:	605a      	str	r2, [r3, #4]
 8000d7e:	609a      	str	r2, [r3, #8]
 8000d80:	60da      	str	r2, [r3, #12]
 8000d82:	611a      	str	r2, [r3, #16]
 8000d84:	615a      	str	r2, [r3, #20]
 8000d86:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d88:	4b2d      	ldr	r3, [pc, #180]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000d8a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d8e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000d90:	4b2b      	ldr	r3, [pc, #172]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000d92:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000d96:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d98:	4b29      	ldr	r3, [pc, #164]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000d9a:	2200      	movs	r2, #0
 8000d9c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d9e:	4b28      	ldr	r3, [pc, #160]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000da0:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000da4:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000da6:	4b26      	ldr	r3, [pc, #152]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000da8:	2200      	movs	r2, #0
 8000daa:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dac:	4b24      	ldr	r3, [pc, #144]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000dae:	2200      	movs	r2, #0
 8000db0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000db2:	4823      	ldr	r0, [pc, #140]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000db4:	f002 fec4 	bl	8003b40 <HAL_TIM_Base_Init>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000dbe:	f000 f9bb 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dc6:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000dc8:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dcc:	4619      	mov	r1, r3
 8000dce:	481c      	ldr	r0, [pc, #112]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000dd0:	f003 fa3c 	bl	800424c <HAL_TIM_ConfigClockSource>
 8000dd4:	4603      	mov	r3, r0
 8000dd6:	2b00      	cmp	r3, #0
 8000dd8:	d001      	beq.n	8000dde <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000dda:	f000 f9ad 	bl	8001138 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000dde:	4818      	ldr	r0, [pc, #96]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000de0:	f002 ff60 	bl	8003ca4 <HAL_TIM_PWM_Init>
 8000de4:	4603      	mov	r3, r0
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d001      	beq.n	8000dee <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000dea:	f000 f9a5 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000dee:	2300      	movs	r3, #0
 8000df0:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000df2:	2300      	movs	r3, #0
 8000df4:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000df6:	f107 0320 	add.w	r3, r7, #32
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	4810      	ldr	r0, [pc, #64]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000dfe:	f003 fde1 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000e08:	f000 f996 	bl	8001138 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000e0c:	2370      	movs	r3, #112	; 0x70
 8000e0e:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e10:	2300      	movs	r3, #0
 8000e12:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e14:	2300      	movs	r3, #0
 8000e16:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e18:	2300      	movs	r3, #0
 8000e1a:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2208      	movs	r2, #8
 8000e20:	4619      	mov	r1, r3
 8000e22:	4807      	ldr	r0, [pc, #28]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000e24:	f003 f950 	bl	80040c8 <HAL_TIM_PWM_ConfigChannel>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000e2e:	f000 f983 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000e32:	4803      	ldr	r0, [pc, #12]	; (8000e40 <MX_TIM2_Init+0xe8>)
 8000e34:	f000 fec2 	bl	8001bbc <HAL_TIM_MspPostInit>

}
 8000e38:	bf00      	nop
 8000e3a:	3738      	adds	r7, #56	; 0x38
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	bd80      	pop	{r7, pc}
 8000e40:	2000150c 	.word	0x2000150c

08000e44 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b086      	sub	sp, #24
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0308 	add.w	r3, r7, #8
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	463b      	mov	r3, r7
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	601a      	str	r2, [r3, #0]
 8000e5e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000e60:	4b1d      	ldr	r3, [pc, #116]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000e62:	4a1e      	ldr	r2, [pc, #120]	; (8000edc <MX_TIM5_Init+0x98>)
 8000e64:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000e66:	4b1c      	ldr	r3, [pc, #112]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000e68:	2253      	movs	r2, #83	; 0x53
 8000e6a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49999;
 8000e72:	4b19      	ldr	r3, [pc, #100]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000e74:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000e78:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e7a:	4b17      	ldr	r3, [pc, #92]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000e7c:	2200      	movs	r2, #0
 8000e7e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000e80:	4b15      	ldr	r3, [pc, #84]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000e82:	2280      	movs	r2, #128	; 0x80
 8000e84:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000e86:	4814      	ldr	r0, [pc, #80]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000e88:	f002 fe5a 	bl	8003b40 <HAL_TIM_Base_Init>
 8000e8c:	4603      	mov	r3, r0
 8000e8e:	2b00      	cmp	r3, #0
 8000e90:	d001      	beq.n	8000e96 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000e92:	f000 f951 	bl	8001138 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e96:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e9a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000e9c:	f107 0308 	add.w	r3, r7, #8
 8000ea0:	4619      	mov	r1, r3
 8000ea2:	480d      	ldr	r0, [pc, #52]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000ea4:	f003 f9d2 	bl	800424c <HAL_TIM_ConfigClockSource>
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d001      	beq.n	8000eb2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000eae:	f000 f943 	bl	8001138 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000eba:	463b      	mov	r3, r7
 8000ebc:	4619      	mov	r1, r3
 8000ebe:	4806      	ldr	r0, [pc, #24]	; (8000ed8 <MX_TIM5_Init+0x94>)
 8000ec0:	f003 fd80 	bl	80049c4 <HAL_TIMEx_MasterConfigSynchronization>
 8000ec4:	4603      	mov	r3, r0
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d001      	beq.n	8000ece <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000eca:	f000 f935 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ece:	bf00      	nop
 8000ed0:	3718      	adds	r7, #24
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20001554 	.word	0x20001554
 8000edc:	40000c00 	.word	0x40000c00

08000ee0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ee4:	4b11      	ldr	r3, [pc, #68]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ee6:	4a12      	ldr	r2, [pc, #72]	; (8000f30 <MX_USART1_UART_Init+0x50>)
 8000ee8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000eea:	4b10      	ldr	r3, [pc, #64]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000eec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000ef0:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ef2:	4b0e      	ldr	r3, [pc, #56]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000ef4:	2200      	movs	r2, #0
 8000ef6:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000ef8:	4b0c      	ldr	r3, [pc, #48]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000efa:	2200      	movs	r2, #0
 8000efc:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000efe:	4b0b      	ldr	r3, [pc, #44]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f00:	2200      	movs	r2, #0
 8000f02:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000f04:	4b09      	ldr	r3, [pc, #36]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f06:	220c      	movs	r2, #12
 8000f08:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f0a:	4b08      	ldr	r3, [pc, #32]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f0c:	2200      	movs	r2, #0
 8000f0e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f10:	4b06      	ldr	r3, [pc, #24]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000f16:	4805      	ldr	r0, [pc, #20]	; (8000f2c <MX_USART1_UART_Init+0x4c>)
 8000f18:	f003 fdd6 	bl	8004ac8 <HAL_UART_Init>
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	2b00      	cmp	r3, #0
 8000f20:	d001      	beq.n	8000f26 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000f22:	f000 f909 	bl	8001138 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000f26:	bf00      	nop
 8000f28:	bd80      	pop	{r7, pc}
 8000f2a:	bf00      	nop
 8000f2c:	2000159c 	.word	0x2000159c
 8000f30:	40011000 	.word	0x40011000

08000f34 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b088      	sub	sp, #32
 8000f38:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f3a:	f107 030c 	add.w	r3, r7, #12
 8000f3e:	2200      	movs	r2, #0
 8000f40:	601a      	str	r2, [r3, #0]
 8000f42:	605a      	str	r2, [r3, #4]
 8000f44:	609a      	str	r2, [r3, #8]
 8000f46:	60da      	str	r2, [r3, #12]
 8000f48:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000f4a:	2300      	movs	r3, #0
 8000f4c:	60bb      	str	r3, [r7, #8]
 8000f4e:	4b44      	ldr	r3, [pc, #272]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f52:	4a43      	ldr	r2, [pc, #268]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f54:	f043 0304 	orr.w	r3, r3, #4
 8000f58:	6313      	str	r3, [r2, #48]	; 0x30
 8000f5a:	4b41      	ldr	r3, [pc, #260]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f5e:	f003 0304 	and.w	r3, r3, #4
 8000f62:	60bb      	str	r3, [r7, #8]
 8000f64:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f66:	2300      	movs	r3, #0
 8000f68:	607b      	str	r3, [r7, #4]
 8000f6a:	4b3d      	ldr	r3, [pc, #244]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f6e:	4a3c      	ldr	r2, [pc, #240]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f70:	f043 0301 	orr.w	r3, r3, #1
 8000f74:	6313      	str	r3, [r2, #48]	; 0x30
 8000f76:	4b3a      	ldr	r3, [pc, #232]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f7a:	f003 0301 	and.w	r3, r3, #1
 8000f7e:	607b      	str	r3, [r7, #4]
 8000f80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f82:	2300      	movs	r3, #0
 8000f84:	603b      	str	r3, [r7, #0]
 8000f86:	4b36      	ldr	r3, [pc, #216]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f8a:	4a35      	ldr	r2, [pc, #212]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f8c:	f043 0302 	orr.w	r3, r3, #2
 8000f90:	6313      	str	r3, [r2, #48]	; 0x30
 8000f92:	4b33      	ldr	r3, [pc, #204]	; (8001060 <MX_GPIO_Init+0x12c>)
 8000f94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f96:	f003 0302 	and.w	r3, r3, #2
 8000f9a:	603b      	str	r3, [r7, #0]
 8000f9c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	21f3      	movs	r1, #243	; 0xf3
 8000fa2:	4830      	ldr	r0, [pc, #192]	; (8001064 <MX_GPIO_Init+0x130>)
 8000fa4:	f001 fa3e 	bl	8002424 <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000fa8:	2200      	movs	r2, #0
 8000faa:	2140      	movs	r1, #64	; 0x40
 8000fac:	482e      	ldr	r0, [pc, #184]	; (8001068 <MX_GPIO_Init+0x134>)
 8000fae:	f001 fa39 	bl	8002424 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000fb2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fbe:	2300      	movs	r3, #0
 8000fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	4828      	ldr	r0, [pc, #160]	; (800106c <MX_GPIO_Init+0x138>)
 8000fca:	f001 f88f 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000fce:	23f3      	movs	r3, #243	; 0xf3
 8000fd0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd2:	2301      	movs	r3, #1
 8000fd4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000fde:	f107 030c 	add.w	r3, r7, #12
 8000fe2:	4619      	mov	r1, r3
 8000fe4:	481f      	ldr	r0, [pc, #124]	; (8001064 <MX_GPIO_Init+0x130>)
 8000fe6:	f001 f881 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000fea:	230c      	movs	r3, #12
 8000fec:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000fee:	2302      	movs	r3, #2
 8000ff0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ff6:	2303      	movs	r3, #3
 8000ff8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000ffa:	2307      	movs	r3, #7
 8000ffc:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000ffe:	f107 030c 	add.w	r3, r7, #12
 8001002:	4619      	mov	r1, r3
 8001004:	4817      	ldr	r0, [pc, #92]	; (8001064 <MX_GPIO_Init+0x130>)
 8001006:	f001 f871 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800100a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800100e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001010:	2300      	movs	r3, #0
 8001012:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001014:	2300      	movs	r3, #0
 8001016:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001018:	f107 030c 	add.w	r3, r7, #12
 800101c:	4619      	mov	r1, r3
 800101e:	4813      	ldr	r0, [pc, #76]	; (800106c <MX_GPIO_Init+0x138>)
 8001020:	f001 f864 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001024:	2338      	movs	r3, #56	; 0x38
 8001026:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001028:	2300      	movs	r3, #0
 800102a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800102c:	2301      	movs	r3, #1
 800102e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001030:	f107 030c 	add.w	r3, r7, #12
 8001034:	4619      	mov	r1, r3
 8001036:	480c      	ldr	r0, [pc, #48]	; (8001068 <MX_GPIO_Init+0x134>)
 8001038:	f001 f858 	bl	80020ec <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800103c:	2340      	movs	r3, #64	; 0x40
 800103e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001040:	2301      	movs	r3, #1
 8001042:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001044:	2300      	movs	r3, #0
 8001046:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001048:	2300      	movs	r3, #0
 800104a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800104c:	f107 030c 	add.w	r3, r7, #12
 8001050:	4619      	mov	r1, r3
 8001052:	4805      	ldr	r0, [pc, #20]	; (8001068 <MX_GPIO_Init+0x134>)
 8001054:	f001 f84a 	bl	80020ec <HAL_GPIO_Init>

}
 8001058:	bf00      	nop
 800105a:	3720      	adds	r7, #32
 800105c:	46bd      	mov	sp, r7
 800105e:	bd80      	pop	{r7, pc}
 8001060:	40023800 	.word	0x40023800
 8001064:	40020000 	.word	0x40020000
 8001068:	40020400 	.word	0x40020400
 800106c:	40020800 	.word	0x40020800

08001070 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001070:	b580      	push	{r7, lr}
 8001072:	b082      	sub	sp, #8
 8001074:	af00      	add	r7, sp, #0
 8001076:	6078      	str	r0, [r7, #4]
	// 50ms Poll Button Timer
	if (htim == &htim5 )
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	4a2a      	ldr	r2, [pc, #168]	; (8001124 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 800107c:	4293      	cmp	r3, r2
 800107e:	d14c      	bne.n	800111a <HAL_TIM_PeriodElapsedCallback+0xaa>
		// Count the number of times the interrupt fires for flashing
		static uint8_t i = 0;
		// Set high if the button has been released, low while pressed
		static uint8_t released = 1;

		button = poll_buttons();
 8001080:	f7ff fb30 	bl	80006e4 <poll_buttons>
 8001084:	4603      	mov	r3, r0
 8001086:	461a      	mov	r2, r3
 8001088:	4b27      	ldr	r3, [pc, #156]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800108a:	701a      	strb	r2, [r3, #0]
		// If a new button is pressed
		if (button && released) {
 800108c:	4b26      	ldr	r3, [pc, #152]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 800108e:	781b      	ldrb	r3, [r3, #0]
 8001090:	2b00      	cmp	r3, #0
 8001092:	d017      	beq.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x54>
 8001094:	4b25      	ldr	r3, [pc, #148]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8001096:	781b      	ldrb	r3, [r3, #0]
 8001098:	2b00      	cmp	r3, #0
 800109a:	d013      	beq.n	80010c4 <HAL_TIM_PeriodElapsedCallback+0x54>
			// Turn on Button Light
			disable_all_buttons();
 800109c:	f7ff faef 	bl	800067e <disable_all_buttons>
			enable_button(button);
 80010a0:	4b21      	ldr	r3, [pc, #132]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010a2:	781b      	ldrb	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fa43 	bl	8000530 <enable_button>
			update_buttons();
 80010aa:	f7ff fafd 	bl	80006a8 <update_buttons>
			// Handle Button Press
			// MUST BE RUN OUTSIDE OF INTERRUPT WITH ZERO PRIORITY
			//button_pressed(button);

			last_pressed = button;
 80010ae:	4b1e      	ldr	r3, [pc, #120]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010b0:	781a      	ldrb	r2, [r3, #0]
 80010b2:	4b1f      	ldr	r3, [pc, #124]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010b4:	701a      	strb	r2, [r3, #0]
			released = 0;
 80010b6:	4b1d      	ldr	r3, [pc, #116]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010b8:	2200      	movs	r2, #0
 80010ba:	701a      	strb	r2, [r3, #0]
			i = 0; // Reset counter
 80010bc:	4b1d      	ldr	r3, [pc, #116]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010be:	2200      	movs	r2, #0
 80010c0:	701a      	strb	r2, [r3, #0]
				// clear the last pressed button and stop flashing
				last_pressed = 0;
			}
		}
	}
}
 80010c2:	e02a      	b.n	800111a <HAL_TIM_PeriodElapsedCallback+0xaa>
		} else if (!button && last_pressed) {
 80010c4:	4b18      	ldr	r3, [pc, #96]	; (8001128 <HAL_TIM_PeriodElapsedCallback+0xb8>)
 80010c6:	781b      	ldrb	r3, [r3, #0]
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d126      	bne.n	800111a <HAL_TIM_PeriodElapsedCallback+0xaa>
 80010cc:	4b18      	ldr	r3, [pc, #96]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010ce:	781b      	ldrb	r3, [r3, #0]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d022      	beq.n	800111a <HAL_TIM_PeriodElapsedCallback+0xaa>
			released = 1;
 80010d4:	4b15      	ldr	r3, [pc, #84]	; (800112c <HAL_TIM_PeriodElapsedCallback+0xbc>)
 80010d6:	2201      	movs	r2, #1
 80010d8:	701a      	strb	r2, [r3, #0]
			++i;
 80010da:	4b16      	ldr	r3, [pc, #88]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	3301      	adds	r3, #1
 80010e0:	b2da      	uxtb	r2, r3
 80010e2:	4b14      	ldr	r3, [pc, #80]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010e4:	701a      	strb	r2, [r3, #0]
			if (!(i % 4)) {
 80010e6:	4b13      	ldr	r3, [pc, #76]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 80010e8:	781b      	ldrb	r3, [r3, #0]
 80010ea:	f003 0303 	and.w	r3, r3, #3
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d107      	bne.n	8001104 <HAL_TIM_PeriodElapsedCallback+0x94>
				toggle_button(last_pressed);
 80010f4:	4b0e      	ldr	r3, [pc, #56]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 80010f6:	781b      	ldrb	r3, [r3, #0]
 80010f8:	4618      	mov	r0, r3
 80010fa:	f7ff fa7b 	bl	80005f4 <toggle_button>
				update_buttons();
 80010fe:	f7ff fad3 	bl	80006a8 <update_buttons>
}
 8001102:	e00a      	b.n	800111a <HAL_TIM_PeriodElapsedCallback+0xaa>
			else if (i > BUTTON_FLASH_DURATION / 50) {
 8001104:	4b0b      	ldr	r3, [pc, #44]	; (8001134 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8001106:	781b      	ldrb	r3, [r3, #0]
 8001108:	2b1e      	cmp	r3, #30
 800110a:	d906      	bls.n	800111a <HAL_TIM_PeriodElapsedCallback+0xaa>
				disable_all_buttons();
 800110c:	f7ff fab7 	bl	800067e <disable_all_buttons>
				update_buttons();
 8001110:	f7ff faca 	bl	80006a8 <update_buttons>
				last_pressed = 0;
 8001114:	4b06      	ldr	r3, [pc, #24]	; (8001130 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8001116:	2200      	movs	r2, #0
 8001118:	701a      	strb	r2, [r3, #0]
}
 800111a:	bf00      	nop
 800111c:	3708      	adds	r7, #8
 800111e:	46bd      	mov	sp, r7
 8001120:	bd80      	pop	{r7, pc}
 8001122:	bf00      	nop
 8001124:	20001554 	.word	0x20001554
 8001128:	200015e0 	.word	0x200015e0
 800112c:	20000002 	.word	0x20000002
 8001130:	20004745 	.word	0x20004745
 8001134:	20004746 	.word	0x20004746

08001138 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001138:	b480      	push	{r7}
 800113a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800113c:	b672      	cpsid	i
}
 800113e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001140:	e7fe      	b.n	8001140 <Error_Handler+0x8>
	...

08001144 <display_menu>:

// Store Menu Commands
static char menu_commands[9][10];
static char cmd_buf[10];

void display_menu(Menu menu, uint8_t page) {
 8001144:	b580      	push	{r7, lr}
 8001146:	b084      	sub	sp, #16
 8001148:	af00      	add	r7, sp, #0
 800114a:	4603      	mov	r3, r0
 800114c:	460a      	mov	r2, r1
 800114e:	71fb      	strb	r3, [r7, #7]
 8001150:	4613      	mov	r3, r2
 8001152:	71bb      	strb	r3, [r7, #6]
	if (!page) return;
 8001154:	79bb      	ldrb	r3, [r7, #6]
 8001156:	2b00      	cmp	r3, #0
 8001158:	d075      	beq.n	8001246 <display_menu+0x102>
	current_menu = menu;
 800115a:	4a3e      	ldr	r2, [pc, #248]	; (8001254 <display_menu+0x110>)
 800115c:	79fb      	ldrb	r3, [r7, #7]
 800115e:	7013      	strb	r3, [r2, #0]
	current_page = page;
 8001160:	4a3d      	ldr	r2, [pc, #244]	; (8001258 <display_menu+0x114>)
 8001162:	79bb      	ldrb	r3, [r7, #6]
 8001164:	7013      	strb	r3, [r2, #0]
	switch(menu) {
 8001166:	79fb      	ldrb	r3, [r7, #7]
 8001168:	2b02      	cmp	r3, #2
 800116a:	d04f      	beq.n	800120c <display_menu+0xc8>
 800116c:	2b02      	cmp	r3, #2
 800116e:	dc4e      	bgt.n	800120e <display_menu+0xca>
 8001170:	2b00      	cmp	r3, #0
 8001172:	d001      	beq.n	8001178 <display_menu+0x34>
 8001174:	2b01      	cmp	r3, #1
		strcpy(menu_commands[6], "Prev Page");
		strcpy(menu_commands[7], "Settings");
		strcpy(menu_commands[8], "Next Page");
		break;
	case settings_menu:
		break;
 8001176:	e04a      	b.n	800120e <display_menu+0xca>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	2b03      	cmp	r3, #3
 800117c:	d865      	bhi.n	800124a <display_menu+0x106>
		strcpy(cmd_buf, "Device ");
 800117e:	4b37      	ldr	r3, [pc, #220]	; (800125c <display_menu+0x118>)
 8001180:	4a37      	ldr	r2, [pc, #220]	; (8001260 <display_menu+0x11c>)
 8001182:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001186:	e883 0003 	stmia.w	r3, {r0, r1}
		for (uint8_t i = 1; i <= 6; ++i) {
 800118a:	2301      	movs	r3, #1
 800118c:	73fb      	strb	r3, [r7, #15]
 800118e:	e026      	b.n	80011de <display_menu+0x9a>
			itoa(i+(6*(current_page - 1)), device_number, 10);
 8001190:	7bf9      	ldrb	r1, [r7, #15]
 8001192:	4b31      	ldr	r3, [pc, #196]	; (8001258 <display_menu+0x114>)
 8001194:	781b      	ldrb	r3, [r3, #0]
 8001196:	1e5a      	subs	r2, r3, #1
 8001198:	4613      	mov	r3, r2
 800119a:	005b      	lsls	r3, r3, #1
 800119c:	4413      	add	r3, r2
 800119e:	005b      	lsls	r3, r3, #1
 80011a0:	440b      	add	r3, r1
 80011a2:	f107 0108 	add.w	r1, r7, #8
 80011a6:	220a      	movs	r2, #10
 80011a8:	4618      	mov	r0, r3
 80011aa:	f003 ff8b 	bl	80050c4 <itoa>
			strcat(cmd_buf, device_number);
 80011ae:	f107 0308 	add.w	r3, r7, #8
 80011b2:	4619      	mov	r1, r3
 80011b4:	4829      	ldr	r0, [pc, #164]	; (800125c <display_menu+0x118>)
 80011b6:	f003 ff8f 	bl	80050d8 <strcat>
			strcpy(menu_commands[i - 1], cmd_buf);
 80011ba:	7bfb      	ldrb	r3, [r7, #15]
 80011bc:	1e5a      	subs	r2, r3, #1
 80011be:	4613      	mov	r3, r2
 80011c0:	009b      	lsls	r3, r3, #2
 80011c2:	4413      	add	r3, r2
 80011c4:	005b      	lsls	r3, r3, #1
 80011c6:	4a27      	ldr	r2, [pc, #156]	; (8001264 <display_menu+0x120>)
 80011c8:	4413      	add	r3, r2
 80011ca:	4924      	ldr	r1, [pc, #144]	; (800125c <display_menu+0x118>)
 80011cc:	4618      	mov	r0, r3
 80011ce:	f003 ff92 	bl	80050f6 <strcpy>
			cmd_buf[7] = '\0';
 80011d2:	4b22      	ldr	r3, [pc, #136]	; (800125c <display_menu+0x118>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	71da      	strb	r2, [r3, #7]
		for (uint8_t i = 1; i <= 6; ++i) {
 80011d8:	7bfb      	ldrb	r3, [r7, #15]
 80011da:	3301      	adds	r3, #1
 80011dc:	73fb      	strb	r3, [r7, #15]
 80011de:	7bfb      	ldrb	r3, [r7, #15]
 80011e0:	2b06      	cmp	r3, #6
 80011e2:	d9d5      	bls.n	8001190 <display_menu+0x4c>
		strcpy(menu_commands[6], "Prev Page");
 80011e4:	4b1f      	ldr	r3, [pc, #124]	; (8001264 <display_menu+0x120>)
 80011e6:	4a20      	ldr	r2, [pc, #128]	; (8001268 <display_menu+0x124>)
 80011e8:	333c      	adds	r3, #60	; 0x3c
 80011ea:	ca07      	ldmia	r2, {r0, r1, r2}
 80011ec:	c303      	stmia	r3!, {r0, r1}
 80011ee:	801a      	strh	r2, [r3, #0]
		strcpy(menu_commands[7], "Settings");
 80011f0:	4a1e      	ldr	r2, [pc, #120]	; (800126c <display_menu+0x128>)
 80011f2:	4b1f      	ldr	r3, [pc, #124]	; (8001270 <display_menu+0x12c>)
 80011f4:	cb03      	ldmia	r3!, {r0, r1}
 80011f6:	6010      	str	r0, [r2, #0]
 80011f8:	6051      	str	r1, [r2, #4]
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 80011fe:	4b19      	ldr	r3, [pc, #100]	; (8001264 <display_menu+0x120>)
 8001200:	4a1c      	ldr	r2, [pc, #112]	; (8001274 <display_menu+0x130>)
 8001202:	3350      	adds	r3, #80	; 0x50
 8001204:	ca07      	ldmia	r2, {r0, r1, r2}
 8001206:	c303      	stmia	r3!, {r0, r1}
 8001208:	801a      	strh	r2, [r3, #0]
		break;
 800120a:	e000      	b.n	800120e <display_menu+0xca>
	case device_menu:
		break;
 800120c:	bf00      	nop
	}
	for (uint8_t i = 1; i <= 9; ++i) {
 800120e:	2301      	movs	r3, #1
 8001210:	73bb      	strb	r3, [r7, #14]
 8001212:	e014      	b.n	800123e <display_menu+0xfa>
		erase_buffer();
 8001214:	f000 fa7a 	bl	800170c <erase_buffer>
		draw_string(menu_commands[i-1], white);
 8001218:	7bbb      	ldrb	r3, [r7, #14]
 800121a:	1e5a      	subs	r2, r3, #1
 800121c:	4613      	mov	r3, r2
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	4413      	add	r3, r2
 8001222:	005b      	lsls	r3, r3, #1
 8001224:	4a0f      	ldr	r2, [pc, #60]	; (8001264 <display_menu+0x120>)
 8001226:	4413      	add	r3, r2
 8001228:	2101      	movs	r1, #1
 800122a:	4618      	mov	r0, r3
 800122c:	f000 fb73 	bl	8001916 <draw_string>
		update_display(i);
 8001230:	7bbb      	ldrb	r3, [r7, #14]
 8001232:	4618      	mov	r0, r3
 8001234:	f000 f976 	bl	8001524 <update_display>
	for (uint8_t i = 1; i <= 9; ++i) {
 8001238:	7bbb      	ldrb	r3, [r7, #14]
 800123a:	3301      	adds	r3, #1
 800123c:	73bb      	strb	r3, [r7, #14]
 800123e:	7bbb      	ldrb	r3, [r7, #14]
 8001240:	2b09      	cmp	r3, #9
 8001242:	d9e7      	bls.n	8001214 <display_menu+0xd0>
 8001244:	e002      	b.n	800124c <display_menu+0x108>
	if (!page) return;
 8001246:	bf00      	nop
 8001248:	e000      	b.n	800124c <display_menu+0x108>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 800124a:	bf00      	nop
	}
}
 800124c:	3710      	adds	r7, #16
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}
 8001252:	bf00      	nop
 8001254:	20004747 	.word	0x20004747
 8001258:	20004748 	.word	0x20004748
 800125c:	200047a8 	.word	0x200047a8
 8001260:	08005268 	.word	0x08005268
 8001264:	2000474c 	.word	0x2000474c
 8001268:	08005270 	.word	0x08005270
 800126c:	20004792 	.word	0x20004792
 8001270:	0800527c 	.word	0x0800527c
 8001274:	08005288 	.word	0x08005288

08001278 <button_pressed>:

void button_pressed(uint8_t button) {
 8001278:	b580      	push	{r7, lr}
 800127a:	b082      	sub	sp, #8
 800127c:	af00      	add	r7, sp, #0
 800127e:	4603      	mov	r3, r0
 8001280:	71fb      	strb	r3, [r7, #7]
	switch(current_menu) {
 8001282:	4b24      	ldr	r3, [pc, #144]	; (8001314 <button_pressed+0x9c>)
 8001284:	781b      	ldrb	r3, [r3, #0]
 8001286:	2b00      	cmp	r3, #0
 8001288:	d13e      	bne.n	8001308 <button_pressed+0x90>
	case main_menu:
		if (!button || button > 9) return;
 800128a:	79fb      	ldrb	r3, [r7, #7]
 800128c:	2b00      	cmp	r3, #0
 800128e:	d03d      	beq.n	800130c <button_pressed+0x94>
 8001290:	79fb      	ldrb	r3, [r7, #7]
 8001292:	2b09      	cmp	r3, #9
 8001294:	d83a      	bhi.n	800130c <button_pressed+0x94>
		switch(button) {
 8001296:	79fb      	ldrb	r3, [r7, #7]
 8001298:	2b09      	cmp	r3, #9
 800129a:	d01a      	beq.n	80012d2 <button_pressed+0x5a>
 800129c:	2b09      	cmp	r3, #9
 800129e:	dc27      	bgt.n	80012f0 <button_pressed+0x78>
 80012a0:	2b07      	cmp	r3, #7
 80012a2:	d002      	beq.n	80012aa <button_pressed+0x32>
 80012a4:	2b08      	cmp	r3, #8
 80012a6:	d00f      	beq.n	80012c8 <button_pressed+0x50>
 80012a8:	e022      	b.n	80012f0 <button_pressed+0x78>
		case 7: // Previous
			display_menu(main_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT);
 80012aa:	4b1b      	ldr	r3, [pc, #108]	; (8001318 <button_pressed+0xa0>)
 80012ac:	781b      	ldrb	r3, [r3, #0]
 80012ae:	2b01      	cmp	r3, #1
 80012b0:	d004      	beq.n	80012bc <button_pressed+0x44>
 80012b2:	4b19      	ldr	r3, [pc, #100]	; (8001318 <button_pressed+0xa0>)
 80012b4:	781b      	ldrb	r3, [r3, #0]
 80012b6:	3b01      	subs	r3, #1
 80012b8:	b2db      	uxtb	r3, r3
 80012ba:	e000      	b.n	80012be <button_pressed+0x46>
 80012bc:	2303      	movs	r3, #3
 80012be:	4619      	mov	r1, r3
 80012c0:	2000      	movs	r0, #0
 80012c2:	f7ff ff3f 	bl	8001144 <display_menu>
			break;
 80012c6:	e01e      	b.n	8001306 <button_pressed+0x8e>
		case 8: // Settings
			display_menu(settings_menu, 1);
 80012c8:	2101      	movs	r1, #1
 80012ca:	2001      	movs	r0, #1
 80012cc:	f7ff ff3a 	bl	8001144 <display_menu>
			break;
 80012d0:	e019      	b.n	8001306 <button_pressed+0x8e>
		case 9: // Next
			display_menu(main_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1);
 80012d2:	4b11      	ldr	r3, [pc, #68]	; (8001318 <button_pressed+0xa0>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b03      	cmp	r3, #3
 80012d8:	d004      	beq.n	80012e4 <button_pressed+0x6c>
 80012da:	4b0f      	ldr	r3, [pc, #60]	; (8001318 <button_pressed+0xa0>)
 80012dc:	781b      	ldrb	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	b2db      	uxtb	r3, r3
 80012e2:	e000      	b.n	80012e6 <button_pressed+0x6e>
 80012e4:	2301      	movs	r3, #1
 80012e6:	4619      	mov	r1, r3
 80012e8:	2000      	movs	r0, #0
 80012ea:	f7ff ff2b 	bl	8001144 <display_menu>
			break;
 80012ee:	e00a      	b.n	8001306 <button_pressed+0x8e>
		default: // Device Selected
			display_menu(device_menu, button*current_page);
 80012f0:	4b09      	ldr	r3, [pc, #36]	; (8001318 <button_pressed+0xa0>)
 80012f2:	781b      	ldrb	r3, [r3, #0]
 80012f4:	79fa      	ldrb	r2, [r7, #7]
 80012f6:	fb12 f303 	smulbb	r3, r2, r3
 80012fa:	b2db      	uxtb	r3, r3
 80012fc:	4619      	mov	r1, r3
 80012fe:	2002      	movs	r0, #2
 8001300:	f7ff ff20 	bl	8001144 <display_menu>
			break;
 8001304:	bf00      	nop
		}

		break;
 8001306:	e002      	b.n	800130e <button_pressed+0x96>
	default:
		break;
 8001308:	bf00      	nop
 800130a:	e000      	b.n	800130e <button_pressed+0x96>
		if (!button || button > 9) return;
 800130c:	bf00      	nop
	}
}
 800130e:	3708      	adds	r7, #8
 8001310:	46bd      	mov	sp, r7
 8001312:	bd80      	pop	{r7, pc}
 8001314:	20004747 	.word	0x20004747
 8001318:	20004748 	.word	0x20004748

0800131c <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	b084      	sub	sp, #16
 8001320:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 8001322:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001326:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 8001328:	1d3a      	adds	r2, r7, #4
 800132a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800132e:	9300      	str	r3, [sp, #0]
 8001330:	2302      	movs	r3, #2
 8001332:	21a2      	movs	r1, #162	; 0xa2
 8001334:	4803      	ldr	r0, [pc, #12]	; (8001344 <disable_OLED_EEPROM_writes+0x28>)
 8001336:	f001 f9d3 	bl	80026e0 <HAL_I2C_Master_Transmit>
}
 800133a:	bf00      	nop
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	20001460 	.word	0x20001460

08001348 <drop_all_CS>:

void drop_all_CS(void) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 800134e:	4b0a      	ldr	r3, [pc, #40]	; (8001378 <drop_all_CS+0x30>)
 8001350:	2200      	movs	r2, #0
 8001352:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 8001354:	4b08      	ldr	r3, [pc, #32]	; (8001378 <drop_all_CS+0x30>)
 8001356:	2200      	movs	r2, #0
 8001358:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 800135a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800135e:	9300      	str	r3, [sp, #0]
 8001360:	2303      	movs	r3, #3
 8001362:	4a05      	ldr	r2, [pc, #20]	; (8001378 <drop_all_CS+0x30>)
 8001364:	21a2      	movs	r1, #162	; 0xa2
 8001366:	4805      	ldr	r0, [pc, #20]	; (800137c <drop_all_CS+0x34>)
 8001368:	f001 f9ba 	bl	80026e0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800136c:	2001      	movs	r0, #1
 800136e:	f000 fd87 	bl	8001e80 <HAL_Delay>
}
 8001372:	bf00      	nop
 8001374:	46bd      	mov	sp, r7
 8001376:	bd80      	pop	{r7, pc}
 8001378:	20001410 	.word	0x20001410
 800137c:	20001460 	.word	0x20001460

08001380 <raise_all_CS>:

void raise_all_CS(void) {
 8001380:	b580      	push	{r7, lr}
 8001382:	b082      	sub	sp, #8
 8001384:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 8001386:	4b09      	ldr	r3, [pc, #36]	; (80013ac <raise_all_CS+0x2c>)
 8001388:	22ff      	movs	r2, #255	; 0xff
 800138a:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 800138c:	4b07      	ldr	r3, [pc, #28]	; (80013ac <raise_all_CS+0x2c>)
 800138e:	2201      	movs	r2, #1
 8001390:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8001392:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001396:	9300      	str	r3, [sp, #0]
 8001398:	2303      	movs	r3, #3
 800139a:	4a04      	ldr	r2, [pc, #16]	; (80013ac <raise_all_CS+0x2c>)
 800139c:	21a2      	movs	r1, #162	; 0xa2
 800139e:	4804      	ldr	r0, [pc, #16]	; (80013b0 <raise_all_CS+0x30>)
 80013a0:	f001 f99e 	bl	80026e0 <HAL_I2C_Master_Transmit>
}
 80013a4:	bf00      	nop
 80013a6:	46bd      	mov	sp, r7
 80013a8:	bd80      	pop	{r7, pc}
 80013aa:	bf00      	nop
 80013ac:	20001410 	.word	0x20001410
 80013b0:	20001460 	.word	0x20001460

080013b4 <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 80013b4:	b580      	push	{r7, lr}
 80013b6:	b084      	sub	sp, #16
 80013b8:	af02      	add	r7, sp, #8
 80013ba:	4603      	mov	r3, r0
 80013bc:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 80013be:	4b1a      	ldr	r3, [pc, #104]	; (8001428 <drop_CS+0x74>)
 80013c0:	22ff      	movs	r2, #255	; 0xff
 80013c2:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 80013c4:	4b18      	ldr	r3, [pc, #96]	; (8001428 <drop_CS+0x74>)
 80013c6:	2201      	movs	r2, #1
 80013c8:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	2b09      	cmp	r3, #9
 80013ce:	d107      	bne.n	80013e0 <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 80013d0:	4b15      	ldr	r3, [pc, #84]	; (8001428 <drop_CS+0x74>)
 80013d2:	789b      	ldrb	r3, [r3, #2]
 80013d4:	f023 0301 	bic.w	r3, r3, #1
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b13      	ldr	r3, [pc, #76]	; (8001428 <drop_CS+0x74>)
 80013dc:	709a      	strb	r2, [r3, #2]
 80013de:	e012      	b.n	8001406 <drop_CS+0x52>
	} else if (display <= 8) {
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b08      	cmp	r3, #8
 80013e4:	d80f      	bhi.n	8001406 <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 80013e6:	4b10      	ldr	r3, [pc, #64]	; (8001428 <drop_CS+0x74>)
 80013e8:	785b      	ldrb	r3, [r3, #1]
 80013ea:	b25a      	sxtb	r2, r3
 80013ec:	79fb      	ldrb	r3, [r7, #7]
 80013ee:	3b01      	subs	r3, #1
 80013f0:	2101      	movs	r1, #1
 80013f2:	fa01 f303 	lsl.w	r3, r1, r3
 80013f6:	b25b      	sxtb	r3, r3
 80013f8:	43db      	mvns	r3, r3
 80013fa:	b25b      	sxtb	r3, r3
 80013fc:	4013      	ands	r3, r2
 80013fe:	b25b      	sxtb	r3, r3
 8001400:	b2da      	uxtb	r2, r3
 8001402:	4b09      	ldr	r3, [pc, #36]	; (8001428 <drop_CS+0x74>)
 8001404:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 8001406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800140a:	9300      	str	r3, [sp, #0]
 800140c:	2303      	movs	r3, #3
 800140e:	4a06      	ldr	r2, [pc, #24]	; (8001428 <drop_CS+0x74>)
 8001410:	21a2      	movs	r1, #162	; 0xa2
 8001412:	4806      	ldr	r0, [pc, #24]	; (800142c <drop_CS+0x78>)
 8001414:	f001 f964 	bl	80026e0 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001418:	2001      	movs	r0, #1
 800141a:	f000 fd31 	bl	8001e80 <HAL_Delay>
}
 800141e:	bf00      	nop
 8001420:	3708      	adds	r7, #8
 8001422:	46bd      	mov	sp, r7
 8001424:	bd80      	pop	{r7, pc}
 8001426:	bf00      	nop
 8001428:	20001410 	.word	0x20001410
 800142c:	20001460 	.word	0x20001460

08001430 <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 8001430:	b580      	push	{r7, lr}
 8001432:	b082      	sub	sp, #8
 8001434:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8001436:	4b37      	ldr	r3, [pc, #220]	; (8001514 <init_displays+0xe4>)
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a36      	ldr	r2, [pc, #216]	; (8001514 <init_displays+0xe4>)
 800143c:	f023 0301 	bic.w	r3, r3, #1
 8001440:	6013      	str	r3, [r2, #0]
	disable_OLED_EEPROM_writes();
 8001442:	f7ff ff6b 	bl	800131c <disable_OLED_EEPROM_writes>
	raise_all_CS();
 8001446:	f7ff ff9b 	bl	8001380 <raise_all_CS>
	DC_HIGH();
 800144a:	2201      	movs	r2, #1
 800144c:	2101      	movs	r1, #1
 800144e:	4832      	ldr	r0, [pc, #200]	; (8001518 <init_displays+0xe8>)
 8001450:	f000 ffe8 	bl	8002424 <HAL_GPIO_WritePin>
	RST_HIGH();
 8001454:	2201      	movs	r2, #1
 8001456:	2102      	movs	r1, #2
 8001458:	482f      	ldr	r0, [pc, #188]	; (8001518 <init_displays+0xe8>)
 800145a:	f000 ffe3 	bl	8002424 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 800145e:	200a      	movs	r0, #10
 8001460:	f000 fd0e 	bl	8001e80 <HAL_Delay>
	RST_LOW();
 8001464:	2200      	movs	r2, #0
 8001466:	2102      	movs	r1, #2
 8001468:	482b      	ldr	r0, [pc, #172]	; (8001518 <init_displays+0xe8>)
 800146a:	f000 ffdb 	bl	8002424 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 800146e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001472:	2201      	movs	r2, #1
 8001474:	4929      	ldr	r1, [pc, #164]	; (800151c <init_displays+0xec>)
 8001476:	482a      	ldr	r0, [pc, #168]	; (8001520 <init_displays+0xf0>)
 8001478:	f002 f95b 	bl	8003732 <HAL_SPI_Transmit>
	HAL_Delay(10);
 800147c:	200a      	movs	r0, #10
 800147e:	f000 fcff 	bl	8001e80 <HAL_Delay>
	RST_HIGH();
 8001482:	2201      	movs	r2, #1
 8001484:	2102      	movs	r1, #2
 8001486:	4824      	ldr	r0, [pc, #144]	; (8001518 <init_displays+0xe8>)
 8001488:	f000 ffcc 	bl	8002424 <HAL_GPIO_WritePin>

	DC_LOW();
 800148c:	2200      	movs	r2, #0
 800148e:	2101      	movs	r1, #1
 8001490:	4821      	ldr	r0, [pc, #132]	; (8001518 <init_displays+0xe8>)
 8001492:	f000 ffc7 	bl	8002424 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001496:	2001      	movs	r0, #1
 8001498:	f000 fcf2 	bl	8001e80 <HAL_Delay>

	drop_all_CS();
 800149c:	f7ff ff54 	bl	8001348 <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 80014a0:	2300      	movs	r3, #0
 80014a2:	71fb      	strb	r3, [r7, #7]
 80014a4:	e002      	b.n	80014ac <init_displays+0x7c>
 80014a6:	79fb      	ldrb	r3, [r7, #7]
 80014a8:	3301      	adds	r3, #1
 80014aa:	71fb      	strb	r3, [r7, #7]
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	2b4f      	cmp	r3, #79	; 0x4f
 80014b0:	d9f9      	bls.n	80014a6 <init_displays+0x76>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 80014b2:	2300      	movs	r3, #0
 80014b4:	80bb      	strh	r3, [r7, #4]
 80014b6:	e014      	b.n	80014e2 <init_displays+0xb2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 80014b8:	88bb      	ldrh	r3, [r7, #4]
 80014ba:	4a18      	ldr	r2, [pc, #96]	; (800151c <init_displays+0xec>)
 80014bc:	1899      	adds	r1, r3, r2
 80014be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80014c2:	2201      	movs	r2, #1
 80014c4:	4816      	ldr	r0, [pc, #88]	; (8001520 <init_displays+0xf0>)
 80014c6:	f002 f934 	bl	8003732 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 80014ca:	2300      	movs	r3, #0
 80014cc:	70fb      	strb	r3, [r7, #3]
 80014ce:	e002      	b.n	80014d6 <init_displays+0xa6>
 80014d0:	78fb      	ldrb	r3, [r7, #3]
 80014d2:	3301      	adds	r3, #1
 80014d4:	70fb      	strb	r3, [r7, #3]
 80014d6:	78fb      	ldrb	r3, [r7, #3]
 80014d8:	2b09      	cmp	r3, #9
 80014da:	d9f9      	bls.n	80014d0 <init_displays+0xa0>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 80014dc:	88bb      	ldrh	r3, [r7, #4]
 80014de:	3301      	adds	r3, #1
 80014e0:	80bb      	strh	r3, [r7, #4]
 80014e2:	88bb      	ldrh	r3, [r7, #4]
 80014e4:	2b19      	cmp	r3, #25
 80014e6:	d9e7      	bls.n	80014b8 <init_displays+0x88>
	}

	raise_all_CS();
 80014e8:	f7ff ff4a 	bl	8001380 <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 80014ec:	2201      	movs	r2, #1
 80014ee:	2101      	movs	r1, #1
 80014f0:	4809      	ldr	r0, [pc, #36]	; (8001518 <init_displays+0xe8>)
 80014f2:	f000 ff97 	bl	8002424 <HAL_GPIO_WritePin>
	START_BUTTON_POLL();
 80014f6:	4b07      	ldr	r3, [pc, #28]	; (8001514 <init_displays+0xe4>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4a06      	ldr	r2, [pc, #24]	; (8001514 <init_displays+0xe4>)
 80014fc:	f043 0301 	orr.w	r3, r3, #1
 8001500:	6013      	str	r3, [r2, #0]
	erase_buffer();
 8001502:	f000 f903 	bl	800170c <erase_buffer>
	update_all_displays();
 8001506:	f000 f889 	bl	800161c <update_all_displays>
}
 800150a:	bf00      	nop
 800150c:	3708      	adds	r7, #8
 800150e:	46bd      	mov	sp, r7
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	40000c00 	.word	0x40000c00
 8001518:	40020000 	.word	0x40020000
 800151c:	20001414 	.word	0x20001414
 8001520:	200014b4 	.word	0x200014b4

08001524 <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 8001524:	b580      	push	{r7, lr}
 8001526:	b086      	sub	sp, #24
 8001528:	af00      	add	r7, sp, #0
 800152a:	4603      	mov	r3, r0
 800152c:	71fb      	strb	r3, [r7, #7]
	STOP_BUTTON_POLL();
 800152e:	4b36      	ldr	r3, [pc, #216]	; (8001608 <update_display+0xe4>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	4a35      	ldr	r2, [pc, #212]	; (8001608 <update_display+0xe4>)
 8001534:	f023 0301 	bic.w	r3, r3, #1
 8001538:	6013      	str	r3, [r2, #0]
	DC_LOW();
 800153a:	2200      	movs	r2, #0
 800153c:	2101      	movs	r1, #1
 800153e:	4833      	ldr	r0, [pc, #204]	; (800160c <update_display+0xe8>)
 8001540:	f000 ff70 	bl	8002424 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001544:	2001      	movs	r0, #1
 8001546:	f000 fc9b 	bl	8001e80 <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 800154a:	79fb      	ldrb	r3, [r7, #7]
 800154c:	4618      	mov	r0, r3
 800154e:	f7ff ff31 	bl	80013b4 <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001552:	2300      	movs	r3, #0
 8001554:	75fb      	strb	r3, [r7, #23]
 8001556:	e002      	b.n	800155e <update_display+0x3a>
 8001558:	7dfb      	ldrb	r3, [r7, #23]
 800155a:	3301      	adds	r3, #1
 800155c:	75fb      	strb	r3, [r7, #23]
 800155e:	7dfb      	ldrb	r3, [r7, #23]
 8001560:	2b4f      	cmp	r3, #79	; 0x4f
 8001562:	d9f9      	bls.n	8001558 <update_display+0x34>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001564:	2300      	movs	r3, #0
 8001566:	82bb      	strh	r3, [r7, #20]
 8001568:	e014      	b.n	8001594 <update_display+0x70>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 800156a:	8abb      	ldrh	r3, [r7, #20]
 800156c:	4a28      	ldr	r2, [pc, #160]	; (8001610 <update_display+0xec>)
 800156e:	1899      	adds	r1, r3, r2
 8001570:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001574:	2201      	movs	r2, #1
 8001576:	4827      	ldr	r0, [pc, #156]	; (8001614 <update_display+0xf0>)
 8001578:	f002 f8db 	bl	8003732 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 800157c:	2300      	movs	r3, #0
 800157e:	74fb      	strb	r3, [r7, #19]
 8001580:	e002      	b.n	8001588 <update_display+0x64>
 8001582:	7cfb      	ldrb	r3, [r7, #19]
 8001584:	3301      	adds	r3, #1
 8001586:	74fb      	strb	r3, [r7, #19]
 8001588:	7cfb      	ldrb	r3, [r7, #19]
 800158a:	2b09      	cmp	r3, #9
 800158c:	d9f9      	bls.n	8001582 <update_display+0x5e>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 800158e:	8abb      	ldrh	r3, [r7, #20]
 8001590:	3301      	adds	r3, #1
 8001592:	82bb      	strh	r3, [r7, #20]
 8001594:	8abb      	ldrh	r3, [r7, #20]
 8001596:	2b05      	cmp	r3, #5
 8001598:	d9e7      	bls.n	800156a <update_display+0x46>
	}

	DC_HIGH();
 800159a:	2201      	movs	r2, #1
 800159c:	2101      	movs	r1, #1
 800159e:	481b      	ldr	r0, [pc, #108]	; (800160c <update_display+0xe8>)
 80015a0:	f000 ff40 	bl	8002424 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 80015a4:	2300      	movs	r3, #0
 80015a6:	74bb      	strb	r3, [r7, #18]
 80015a8:	e002      	b.n	80015b0 <update_display+0x8c>
 80015aa:	7cbb      	ldrb	r3, [r7, #18]
 80015ac:	3301      	adds	r3, #1
 80015ae:	74bb      	strb	r3, [r7, #18]
 80015b0:	7cbb      	ldrb	r3, [r7, #18]
 80015b2:	2b4f      	cmp	r3, #79	; 0x4f
 80015b4:	d9f9      	bls.n	80015aa <update_display+0x86>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80015b6:	2300      	movs	r3, #0
 80015b8:	823b      	strh	r3, [r7, #16]
 80015ba:	e014      	b.n	80015e6 <update_display+0xc2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 80015bc:	8a3b      	ldrh	r3, [r7, #16]
 80015be:	4a16      	ldr	r2, [pc, #88]	; (8001618 <update_display+0xf4>)
 80015c0:	1899      	adds	r1, r3, r2
 80015c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80015c6:	2201      	movs	r2, #1
 80015c8:	4812      	ldr	r0, [pc, #72]	; (8001614 <update_display+0xf0>)
 80015ca:	f002 f8b2 	bl	8003732 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 80015ce:	2300      	movs	r3, #0
 80015d0:	73fb      	strb	r3, [r7, #15]
 80015d2:	e002      	b.n	80015da <update_display+0xb6>
 80015d4:	7bfb      	ldrb	r3, [r7, #15]
 80015d6:	3301      	adds	r3, #1
 80015d8:	73fb      	strb	r3, [r7, #15]
 80015da:	7bfb      	ldrb	r3, [r7, #15]
 80015dc:	2b09      	cmp	r3, #9
 80015de:	d9f9      	bls.n	80015d4 <update_display+0xb0>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80015e0:	8a3b      	ldrh	r3, [r7, #16]
 80015e2:	3301      	adds	r3, #1
 80015e4:	823b      	strh	r3, [r7, #16]
 80015e6:	8a3b      	ldrh	r3, [r7, #16]
 80015e8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80015ec:	d3e6      	bcc.n	80015bc <update_display+0x98>
	}

	raise_all_CS();
 80015ee:	f7ff fec7 	bl	8001380 <raise_all_CS>
	START_BUTTON_POLL();
 80015f2:	4b05      	ldr	r3, [pc, #20]	; (8001608 <update_display+0xe4>)
 80015f4:	681b      	ldr	r3, [r3, #0]
 80015f6:	4a04      	ldr	r2, [pc, #16]	; (8001608 <update_display+0xe4>)
 80015f8:	f043 0301 	orr.w	r3, r3, #1
 80015fc:	6013      	str	r3, [r2, #0]
}
 80015fe:	bf00      	nop
 8001600:	3718      	adds	r7, #24
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	40000c00 	.word	0x40000c00
 800160c:	40020000 	.word	0x40020000
 8001610:	20001430 	.word	0x20001430
 8001614:	200014b4 	.word	0x200014b4
 8001618:	200047b4 	.word	0x200047b4

0800161c <update_all_displays>:

void update_all_displays() {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8001622:	4b35      	ldr	r3, [pc, #212]	; (80016f8 <update_all_displays+0xdc>)
 8001624:	681b      	ldr	r3, [r3, #0]
 8001626:	4a34      	ldr	r2, [pc, #208]	; (80016f8 <update_all_displays+0xdc>)
 8001628:	f023 0301 	bic.w	r3, r3, #1
 800162c:	6013      	str	r3, [r2, #0]
	DC_LOW();
 800162e:	2200      	movs	r2, #0
 8001630:	2101      	movs	r1, #1
 8001632:	4832      	ldr	r0, [pc, #200]	; (80016fc <update_all_displays+0xe0>)
 8001634:	f000 fef6 	bl	8002424 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001638:	2001      	movs	r0, #1
 800163a:	f000 fc21 	bl	8001e80 <HAL_Delay>
	drop_all_CS();
 800163e:	f7ff fe83 	bl	8001348 <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001642:	2300      	movs	r3, #0
 8001644:	73fb      	strb	r3, [r7, #15]
 8001646:	e002      	b.n	800164e <update_all_displays+0x32>
 8001648:	7bfb      	ldrb	r3, [r7, #15]
 800164a:	3301      	adds	r3, #1
 800164c:	73fb      	strb	r3, [r7, #15]
 800164e:	7bfb      	ldrb	r3, [r7, #15]
 8001650:	2b4f      	cmp	r3, #79	; 0x4f
 8001652:	d9f9      	bls.n	8001648 <update_all_displays+0x2c>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001654:	2300      	movs	r3, #0
 8001656:	81bb      	strh	r3, [r7, #12]
 8001658:	e014      	b.n	8001684 <update_all_displays+0x68>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 800165a:	89bb      	ldrh	r3, [r7, #12]
 800165c:	4a28      	ldr	r2, [pc, #160]	; (8001700 <update_all_displays+0xe4>)
 800165e:	1899      	adds	r1, r3, r2
 8001660:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001664:	2201      	movs	r2, #1
 8001666:	4827      	ldr	r0, [pc, #156]	; (8001704 <update_all_displays+0xe8>)
 8001668:	f002 f863 	bl	8003732 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 800166c:	2300      	movs	r3, #0
 800166e:	72fb      	strb	r3, [r7, #11]
 8001670:	e002      	b.n	8001678 <update_all_displays+0x5c>
 8001672:	7afb      	ldrb	r3, [r7, #11]
 8001674:	3301      	adds	r3, #1
 8001676:	72fb      	strb	r3, [r7, #11]
 8001678:	7afb      	ldrb	r3, [r7, #11]
 800167a:	2b09      	cmp	r3, #9
 800167c:	d9f9      	bls.n	8001672 <update_all_displays+0x56>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 800167e:	89bb      	ldrh	r3, [r7, #12]
 8001680:	3301      	adds	r3, #1
 8001682:	81bb      	strh	r3, [r7, #12]
 8001684:	89bb      	ldrh	r3, [r7, #12]
 8001686:	2b05      	cmp	r3, #5
 8001688:	d9e7      	bls.n	800165a <update_all_displays+0x3e>
	}

	DC_HIGH();
 800168a:	2201      	movs	r2, #1
 800168c:	2101      	movs	r1, #1
 800168e:	481b      	ldr	r0, [pc, #108]	; (80016fc <update_all_displays+0xe0>)
 8001690:	f000 fec8 	bl	8002424 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001694:	2300      	movs	r3, #0
 8001696:	72bb      	strb	r3, [r7, #10]
 8001698:	e002      	b.n	80016a0 <update_all_displays+0x84>
 800169a:	7abb      	ldrb	r3, [r7, #10]
 800169c:	3301      	adds	r3, #1
 800169e:	72bb      	strb	r3, [r7, #10]
 80016a0:	7abb      	ldrb	r3, [r7, #10]
 80016a2:	2b4f      	cmp	r3, #79	; 0x4f
 80016a4:	d9f9      	bls.n	800169a <update_all_displays+0x7e>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80016a6:	2300      	movs	r3, #0
 80016a8:	813b      	strh	r3, [r7, #8]
 80016aa:	e014      	b.n	80016d6 <update_all_displays+0xba>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 80016ac:	893b      	ldrh	r3, [r7, #8]
 80016ae:	4a16      	ldr	r2, [pc, #88]	; (8001708 <update_all_displays+0xec>)
 80016b0:	1899      	adds	r1, r3, r2
 80016b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016b6:	2201      	movs	r2, #1
 80016b8:	4812      	ldr	r0, [pc, #72]	; (8001704 <update_all_displays+0xe8>)
 80016ba:	f002 f83a 	bl	8003732 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 80016be:	2300      	movs	r3, #0
 80016c0:	71fb      	strb	r3, [r7, #7]
 80016c2:	e002      	b.n	80016ca <update_all_displays+0xae>
 80016c4:	79fb      	ldrb	r3, [r7, #7]
 80016c6:	3301      	adds	r3, #1
 80016c8:	71fb      	strb	r3, [r7, #7]
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d9f9      	bls.n	80016c4 <update_all_displays+0xa8>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80016d0:	893b      	ldrh	r3, [r7, #8]
 80016d2:	3301      	adds	r3, #1
 80016d4:	813b      	strh	r3, [r7, #8]
 80016d6:	893b      	ldrh	r3, [r7, #8]
 80016d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80016dc:	d3e6      	bcc.n	80016ac <update_all_displays+0x90>
	}
	raise_all_CS();
 80016de:	f7ff fe4f 	bl	8001380 <raise_all_CS>
	START_BUTTON_POLL();
 80016e2:	4b05      	ldr	r3, [pc, #20]	; (80016f8 <update_all_displays+0xdc>)
 80016e4:	681b      	ldr	r3, [r3, #0]
 80016e6:	4a04      	ldr	r2, [pc, #16]	; (80016f8 <update_all_displays+0xdc>)
 80016e8:	f043 0301 	orr.w	r3, r3, #1
 80016ec:	6013      	str	r3, [r2, #0]
}
 80016ee:	bf00      	nop
 80016f0:	3710      	adds	r7, #16
 80016f2:	46bd      	mov	sp, r7
 80016f4:	bd80      	pop	{r7, pc}
 80016f6:	bf00      	nop
 80016f8:	40000c00 	.word	0x40000c00
 80016fc:	40020000 	.word	0x40020000
 8001700:	20001430 	.word	0x20001430
 8001704:	200014b4 	.word	0x200014b4
 8001708:	200047b4 	.word	0x200047b4

0800170c <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 800170c:	b480      	push	{r7}
 800170e:	b083      	sub	sp, #12
 8001710:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001712:	2300      	movs	r3, #0
 8001714:	80fb      	strh	r3, [r7, #6]
 8001716:	e006      	b.n	8001726 <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 8001718:	88fb      	ldrh	r3, [r7, #6]
 800171a:	4a08      	ldr	r2, [pc, #32]	; (800173c <erase_buffer+0x30>)
 800171c:	2100      	movs	r1, #0
 800171e:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001720:	88fb      	ldrh	r3, [r7, #6]
 8001722:	3301      	adds	r3, #1
 8001724:	80fb      	strh	r3, [r7, #6]
 8001726:	88fb      	ldrh	r3, [r7, #6]
 8001728:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800172c:	d3f4      	bcc.n	8001718 <erase_buffer+0xc>
	}
}
 800172e:	bf00      	nop
 8001730:	bf00      	nop
 8001732:	370c      	adds	r7, #12
 8001734:	46bd      	mov	sp, r7
 8001736:	f85d 7b04 	ldr.w	r7, [sp], #4
 800173a:	4770      	bx	lr
 800173c:	200047b4 	.word	0x200047b4

08001740 <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 8001740:	b480      	push	{r7}
 8001742:	b083      	sub	sp, #12
 8001744:	af00      	add	r7, sp, #0
 8001746:	4603      	mov	r3, r0
 8001748:	71fb      	strb	r3, [r7, #7]
 800174a:	460b      	mov	r3, r1
 800174c:	71bb      	strb	r3, [r7, #6]
 800174e:	4613      	mov	r3, r2
 8001750:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db3d      	blt.n	80017d6 <draw_pixel+0x96>
 800175a:	79bb      	ldrb	r3, [r7, #6]
 800175c:	2b1f      	cmp	r3, #31
 800175e:	d83a      	bhi.n	80017d6 <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 8001760:	797b      	ldrb	r3, [r7, #5]
 8001762:	2b00      	cmp	r3, #0
 8001764:	d01a      	beq.n	800179c <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 8001766:	79fa      	ldrb	r2, [r7, #7]
 8001768:	79bb      	ldrb	r3, [r7, #6]
 800176a:	08db      	lsrs	r3, r3, #3
 800176c:	b2d8      	uxtb	r0, r3
 800176e:	4603      	mov	r3, r0
 8001770:	01db      	lsls	r3, r3, #7
 8001772:	4413      	add	r3, r2
 8001774:	4a1b      	ldr	r2, [pc, #108]	; (80017e4 <draw_pixel+0xa4>)
 8001776:	5cd3      	ldrb	r3, [r2, r3]
 8001778:	b25a      	sxtb	r2, r3
 800177a:	79bb      	ldrb	r3, [r7, #6]
 800177c:	f003 0307 	and.w	r3, r3, #7
 8001780:	2101      	movs	r1, #1
 8001782:	fa01 f303 	lsl.w	r3, r1, r3
 8001786:	b25b      	sxtb	r3, r3
 8001788:	4313      	orrs	r3, r2
 800178a:	b259      	sxtb	r1, r3
 800178c:	79fa      	ldrb	r2, [r7, #7]
 800178e:	4603      	mov	r3, r0
 8001790:	01db      	lsls	r3, r3, #7
 8001792:	4413      	add	r3, r2
 8001794:	b2c9      	uxtb	r1, r1
 8001796:	4a13      	ldr	r2, [pc, #76]	; (80017e4 <draw_pixel+0xa4>)
 8001798:	54d1      	strb	r1, [r2, r3]
 800179a:	e01d      	b.n	80017d8 <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 800179c:	79fa      	ldrb	r2, [r7, #7]
 800179e:	79bb      	ldrb	r3, [r7, #6]
 80017a0:	08db      	lsrs	r3, r3, #3
 80017a2:	b2d8      	uxtb	r0, r3
 80017a4:	4603      	mov	r3, r0
 80017a6:	01db      	lsls	r3, r3, #7
 80017a8:	4413      	add	r3, r2
 80017aa:	4a0e      	ldr	r2, [pc, #56]	; (80017e4 <draw_pixel+0xa4>)
 80017ac:	5cd3      	ldrb	r3, [r2, r3]
 80017ae:	b25a      	sxtb	r2, r3
 80017b0:	79bb      	ldrb	r3, [r7, #6]
 80017b2:	f003 0307 	and.w	r3, r3, #7
 80017b6:	2101      	movs	r1, #1
 80017b8:	fa01 f303 	lsl.w	r3, r1, r3
 80017bc:	b25b      	sxtb	r3, r3
 80017be:	43db      	mvns	r3, r3
 80017c0:	b25b      	sxtb	r3, r3
 80017c2:	4013      	ands	r3, r2
 80017c4:	b259      	sxtb	r1, r3
 80017c6:	79fa      	ldrb	r2, [r7, #7]
 80017c8:	4603      	mov	r3, r0
 80017ca:	01db      	lsls	r3, r3, #7
 80017cc:	4413      	add	r3, r2
 80017ce:	b2c9      	uxtb	r1, r1
 80017d0:	4a04      	ldr	r2, [pc, #16]	; (80017e4 <draw_pixel+0xa4>)
 80017d2:	54d1      	strb	r1, [r2, r3]
 80017d4:	e000      	b.n	80017d8 <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 80017d6:	bf00      	nop
	}
}
 80017d8:	370c      	adds	r7, #12
 80017da:	46bd      	mov	sp, r7
 80017dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017e0:	4770      	bx	lr
 80017e2:	bf00      	nop
 80017e4:	200047b4 	.word	0x200047b4

080017e8 <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 80017e8:	b590      	push	{r4, r7, lr}
 80017ea:	b085      	sub	sp, #20
 80017ec:	af02      	add	r7, sp, #8
 80017ee:	4604      	mov	r4, r0
 80017f0:	4608      	mov	r0, r1
 80017f2:	4611      	mov	r1, r2
 80017f4:	461a      	mov	r2, r3
 80017f6:	4623      	mov	r3, r4
 80017f8:	71fb      	strb	r3, [r7, #7]
 80017fa:	4603      	mov	r3, r0
 80017fc:	71bb      	strb	r3, [r7, #6]
 80017fe:	460b      	mov	r3, r1
 8001800:	717b      	strb	r3, [r7, #5]
 8001802:	4613      	mov	r3, r2
 8001804:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	2b1f      	cmp	r3, #31
 800180a:	d913      	bls.n	8001834 <draw_char+0x4c>
 800180c:	79fb      	ldrb	r3, [r7, #7]
 800180e:	2b7e      	cmp	r3, #126	; 0x7e
 8001810:	d810      	bhi.n	8001834 <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 8001812:	79fb      	ldrb	r3, [r7, #7]
 8001814:	3b20      	subs	r3, #32
 8001816:	2236      	movs	r2, #54	; 0x36
 8001818:	fb02 f303 	mul.w	r3, r2, r3
 800181c:	4a07      	ldr	r2, [pc, #28]	; (800183c <draw_char+0x54>)
 800181e:	1898      	adds	r0, r3, r2
 8001820:	797a      	ldrb	r2, [r7, #5]
 8001822:	79b9      	ldrb	r1, [r7, #6]
 8001824:	793b      	ldrb	r3, [r7, #4]
 8001826:	9301      	str	r3, [sp, #4]
 8001828:	231b      	movs	r3, #27
 800182a:	9300      	str	r3, [sp, #0]
 800182c:	230c      	movs	r3, #12
 800182e:	f000 f807 	bl	8001840 <draw_bmp>
 8001832:	e000      	b.n	8001836 <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 8001834:	bf00      	nop
}
 8001836:	370c      	adds	r7, #12
 8001838:	46bd      	mov	sp, r7
 800183a:	bd90      	pop	{r4, r7, pc}
 800183c:	20000004 	.word	0x20000004

08001840 <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 8001840:	b580      	push	{r7, lr}
 8001842:	b084      	sub	sp, #16
 8001844:	af00      	add	r7, sp, #0
 8001846:	6078      	str	r0, [r7, #4]
 8001848:	4608      	mov	r0, r1
 800184a:	4611      	mov	r1, r2
 800184c:	461a      	mov	r2, r3
 800184e:	4603      	mov	r3, r0
 8001850:	70fb      	strb	r3, [r7, #3]
 8001852:	460b      	mov	r3, r1
 8001854:	70bb      	strb	r3, [r7, #2]
 8001856:	4613      	mov	r3, r2
 8001858:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 800185a:	787b      	ldrb	r3, [r7, #1]
 800185c:	3307      	adds	r3, #7
 800185e:	2b00      	cmp	r3, #0
 8001860:	da00      	bge.n	8001864 <draw_bmp+0x24>
 8001862:	3307      	adds	r3, #7
 8001864:	10db      	asrs	r3, r3, #3
 8001866:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 8001868:	2300      	movs	r3, #0
 800186a:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 800186c:	2300      	movs	r3, #0
 800186e:	81bb      	strh	r3, [r7, #12]
 8001870:	e047      	b.n	8001902 <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 8001872:	2300      	movs	r3, #0
 8001874:	817b      	strh	r3, [r7, #10]
 8001876:	e036      	b.n	80018e6 <draw_bmp+0xa6>
			if (i & 7)
 8001878:	897b      	ldrh	r3, [r7, #10]
 800187a:	f003 0307 	and.w	r3, r3, #7
 800187e:	2b00      	cmp	r3, #0
 8001880:	d003      	beq.n	800188a <draw_bmp+0x4a>
				b <<= 1;
 8001882:	7bfb      	ldrb	r3, [r7, #15]
 8001884:	005b      	lsls	r3, r3, #1
 8001886:	73fb      	strb	r3, [r7, #15]
 8001888:	e012      	b.n	80018b0 <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 800188a:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 800188e:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001892:	fb03 f202 	mul.w	r2, r3, r2
 8001896:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800189a:	2b00      	cmp	r3, #0
 800189c:	da00      	bge.n	80018a0 <draw_bmp+0x60>
 800189e:	3307      	adds	r3, #7
 80018a0:	10db      	asrs	r3, r3, #3
 80018a2:	b21b      	sxth	r3, r3
 80018a4:	4413      	add	r3, r2
 80018a6:	461a      	mov	r2, r3
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	4413      	add	r3, r2
 80018ac:	781b      	ldrb	r3, [r3, #0]
 80018ae:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 80018b0:	897b      	ldrh	r3, [r7, #10]
 80018b2:	b2da      	uxtb	r2, r3
 80018b4:	78fb      	ldrb	r3, [r7, #3]
 80018b6:	4413      	add	r3, r2
 80018b8:	b2d8      	uxtb	r0, r3
 80018ba:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80018be:	2b00      	cmp	r3, #0
 80018c0:	db06      	blt.n	80018d0 <draw_bmp+0x90>
 80018c2:	7f3b      	ldrb	r3, [r7, #28]
 80018c4:	2b00      	cmp	r3, #0
 80018c6:	bf0c      	ite	eq
 80018c8:	2301      	moveq	r3, #1
 80018ca:	2300      	movne	r3, #0
 80018cc:	b2db      	uxtb	r3, r3
 80018ce:	e000      	b.n	80018d2 <draw_bmp+0x92>
 80018d0:	7f3b      	ldrb	r3, [r7, #28]
 80018d2:	78b9      	ldrb	r1, [r7, #2]
 80018d4:	461a      	mov	r2, r3
 80018d6:	f7ff ff33 	bl	8001740 <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 80018da:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80018de:	b29b      	uxth	r3, r3
 80018e0:	3301      	adds	r3, #1
 80018e2:	b29b      	uxth	r3, r3
 80018e4:	817b      	strh	r3, [r7, #10]
 80018e6:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80018ea:	787b      	ldrb	r3, [r7, #1]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	dbc3      	blt.n	8001878 <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 80018f0:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80018f4:	b29b      	uxth	r3, r3
 80018f6:	3301      	adds	r3, #1
 80018f8:	b29b      	uxth	r3, r3
 80018fa:	81bb      	strh	r3, [r7, #12]
 80018fc:	78bb      	ldrb	r3, [r7, #2]
 80018fe:	3301      	adds	r3, #1
 8001900:	70bb      	strb	r3, [r7, #2]
 8001902:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001906:	7e3b      	ldrb	r3, [r7, #24]
 8001908:	429a      	cmp	r2, r3
 800190a:	dbb2      	blt.n	8001872 <draw_bmp+0x32>
		}
	}
}
 800190c:	bf00      	nop
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 8001916:	b580      	push	{r7, lr}
 8001918:	b084      	sub	sp, #16
 800191a:	af00      	add	r7, sp, #0
 800191c:	6078      	str	r0, [r7, #4]
 800191e:	460b      	mov	r3, r1
 8001920:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f7fe fc56 	bl	80001d4 <strlen>
 8001928:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 800192a:	68fb      	ldr	r3, [r7, #12]
 800192c:	2b00      	cmp	r3, #0
 800192e:	d02c      	beq.n	800198a <draw_string+0x74>
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	2b0a      	cmp	r3, #10
 8001934:	d829      	bhi.n	800198a <draw_string+0x74>

    uint8_t x = DISPLAY_WIDTH/2;
 8001936:	2340      	movs	r3, #64	; 0x40
 8001938:	72fb      	strb	r3, [r7, #11]
    if (len%2) {
 800193a:	68fb      	ldr	r3, [r7, #12]
 800193c:	f003 0301 	and.w	r3, r3, #1
 8001940:	2b00      	cmp	r3, #0
 8001942:	d005      	beq.n	8001950 <draw_string+0x3a>
        x -= FONT_WIDTH/2;
 8001944:	7afb      	ldrb	r3, [r7, #11]
 8001946:	3b06      	subs	r3, #6
 8001948:	72fb      	strb	r3, [r7, #11]
        len -= 1;
 800194a:	68fb      	ldr	r3, [r7, #12]
 800194c:	3b01      	subs	r3, #1
 800194e:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	4613      	mov	r3, r2
 8001954:	005b      	lsls	r3, r3, #1
 8001956:	4413      	add	r3, r2
 8001958:	009b      	lsls	r3, r3, #2
 800195a:	085b      	lsrs	r3, r3, #1
 800195c:	b2db      	uxtb	r3, r3
 800195e:	7afa      	ldrb	r2, [r7, #11]
 8001960:	1ad3      	subs	r3, r2, r3
 8001962:	72fb      	strb	r3, [r7, #11]

    while(*str) {
 8001964:	e00c      	b.n	8001980 <draw_string+0x6a>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	7818      	ldrb	r0, [r3, #0]
 800196a:	78fb      	ldrb	r3, [r7, #3]
 800196c:	7af9      	ldrb	r1, [r7, #11]
 800196e:	2203      	movs	r2, #3
 8001970:	f7ff ff3a 	bl	80017e8 <draw_char>
        x += FONT_WIDTH;
 8001974:	7afb      	ldrb	r3, [r7, #11]
 8001976:	330c      	adds	r3, #12
 8001978:	72fb      	strb	r3, [r7, #11]
        ++str;
 800197a:	687b      	ldr	r3, [r7, #4]
 800197c:	3301      	adds	r3, #1
 800197e:	607b      	str	r3, [r7, #4]
    while(*str) {
 8001980:	687b      	ldr	r3, [r7, #4]
 8001982:	781b      	ldrb	r3, [r3, #0]
 8001984:	2b00      	cmp	r3, #0
 8001986:	d1ee      	bne.n	8001966 <draw_string+0x50>
 8001988:	e000      	b.n	800198c <draw_string+0x76>
    if (len <= 0 || len > 10) return;
 800198a:	bf00      	nop
    }
}
 800198c:	3710      	adds	r7, #16
 800198e:	46bd      	mov	sp, r7
 8001990:	bd80      	pop	{r7, pc}
	...

08001994 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001994:	b580      	push	{r7, lr}
 8001996:	b082      	sub	sp, #8
 8001998:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800199a:	2300      	movs	r3, #0
 800199c:	607b      	str	r3, [r7, #4]
 800199e:	4b10      	ldr	r3, [pc, #64]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019a2:	4a0f      	ldr	r2, [pc, #60]	; (80019e0 <HAL_MspInit+0x4c>)
 80019a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80019a8:	6453      	str	r3, [r2, #68]	; 0x44
 80019aa:	4b0d      	ldr	r3, [pc, #52]	; (80019e0 <HAL_MspInit+0x4c>)
 80019ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80019ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80019b2:	607b      	str	r3, [r7, #4]
 80019b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019b6:	2300      	movs	r3, #0
 80019b8:	603b      	str	r3, [r7, #0]
 80019ba:	4b09      	ldr	r3, [pc, #36]	; (80019e0 <HAL_MspInit+0x4c>)
 80019bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019be:	4a08      	ldr	r2, [pc, #32]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80019c4:	6413      	str	r3, [r2, #64]	; 0x40
 80019c6:	4b06      	ldr	r3, [pc, #24]	; (80019e0 <HAL_MspInit+0x4c>)
 80019c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80019ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80019ce:	603b      	str	r3, [r7, #0]
 80019d0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80019d2:	2007      	movs	r0, #7
 80019d4:	f000 fb48 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80019d8:	bf00      	nop
 80019da:	3708      	adds	r7, #8
 80019dc:	46bd      	mov	sp, r7
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	40023800 	.word	0x40023800

080019e4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80019e4:	b580      	push	{r7, lr}
 80019e6:	b08a      	sub	sp, #40	; 0x28
 80019e8:	af00      	add	r7, sp, #0
 80019ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ec:	f107 0314 	add.w	r3, r7, #20
 80019f0:	2200      	movs	r2, #0
 80019f2:	601a      	str	r2, [r3, #0]
 80019f4:	605a      	str	r2, [r3, #4]
 80019f6:	609a      	str	r2, [r3, #8]
 80019f8:	60da      	str	r2, [r3, #12]
 80019fa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4a19      	ldr	r2, [pc, #100]	; (8001a68 <HAL_I2C_MspInit+0x84>)
 8001a02:	4293      	cmp	r3, r2
 8001a04:	d12c      	bne.n	8001a60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001a06:	2300      	movs	r3, #0
 8001a08:	613b      	str	r3, [r7, #16]
 8001a0a:	4b18      	ldr	r3, [pc, #96]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a0e:	4a17      	ldr	r2, [pc, #92]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a10:	f043 0302 	orr.w	r3, r3, #2
 8001a14:	6313      	str	r3, [r2, #48]	; 0x30
 8001a16:	4b15      	ldr	r3, [pc, #84]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a1a:	f003 0302 	and.w	r3, r3, #2
 8001a1e:	613b      	str	r3, [r7, #16]
 8001a20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001a22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001a26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001a28:	2312      	movs	r3, #18
 8001a2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a2c:	2300      	movs	r3, #0
 8001a2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a30:	2303      	movs	r3, #3
 8001a32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001a34:	2304      	movs	r3, #4
 8001a36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a38:	f107 0314 	add.w	r3, r7, #20
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	480c      	ldr	r0, [pc, #48]	; (8001a70 <HAL_I2C_MspInit+0x8c>)
 8001a40:	f000 fb54 	bl	80020ec <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001a44:	2300      	movs	r3, #0
 8001a46:	60fb      	str	r3, [r7, #12]
 8001a48:	4b08      	ldr	r3, [pc, #32]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4c:	4a07      	ldr	r2, [pc, #28]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001a52:	6413      	str	r3, [r2, #64]	; 0x40
 8001a54:	4b05      	ldr	r3, [pc, #20]	; (8001a6c <HAL_I2C_MspInit+0x88>)
 8001a56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001a5c:	60fb      	str	r3, [r7, #12]
 8001a5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001a60:	bf00      	nop
 8001a62:	3728      	adds	r7, #40	; 0x28
 8001a64:	46bd      	mov	sp, r7
 8001a66:	bd80      	pop	{r7, pc}
 8001a68:	40005400 	.word	0x40005400
 8001a6c:	40023800 	.word	0x40023800
 8001a70:	40020400 	.word	0x40020400

08001a74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001a74:	b580      	push	{r7, lr}
 8001a76:	b08a      	sub	sp, #40	; 0x28
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001a7c:	f107 0314 	add.w	r3, r7, #20
 8001a80:	2200      	movs	r2, #0
 8001a82:	601a      	str	r2, [r3, #0]
 8001a84:	605a      	str	r2, [r3, #4]
 8001a86:	609a      	str	r2, [r3, #8]
 8001a88:	60da      	str	r2, [r3, #12]
 8001a8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001a8c:	687b      	ldr	r3, [r7, #4]
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4a28      	ldr	r2, [pc, #160]	; (8001b34 <HAL_SPI_MspInit+0xc0>)
 8001a92:	4293      	cmp	r3, r2
 8001a94:	d14a      	bne.n	8001b2c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a96:	2300      	movs	r3, #0
 8001a98:	613b      	str	r3, [r7, #16]
 8001a9a:	4b27      	ldr	r3, [pc, #156]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001a9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9e:	4a26      	ldr	r2, [pc, #152]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001aa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001aa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001aa6:	4b24      	ldr	r3, [pc, #144]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001aaa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aae:	613b      	str	r3, [r7, #16]
 8001ab0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	60fb      	str	r3, [r7, #12]
 8001ab6:	4b20      	ldr	r3, [pc, #128]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aba:	4a1f      	ldr	r2, [pc, #124]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001abc:	f043 0304 	orr.w	r3, r3, #4
 8001ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac2:	4b1d      	ldr	r3, [pc, #116]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac6:	f003 0304 	and.w	r3, r3, #4
 8001aca:	60fb      	str	r3, [r7, #12]
 8001acc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ace:	2300      	movs	r3, #0
 8001ad0:	60bb      	str	r3, [r7, #8]
 8001ad2:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ad6:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001ad8:	f043 0302 	orr.w	r3, r3, #2
 8001adc:	6313      	str	r3, [r2, #48]	; 0x30
 8001ade:	4b16      	ldr	r3, [pc, #88]	; (8001b38 <HAL_SPI_MspInit+0xc4>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ae2:	f003 0302 	and.w	r3, r3, #2
 8001ae6:	60bb      	str	r3, [r7, #8]
 8001ae8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001aea:	2308      	movs	r3, #8
 8001aec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001aee:	2302      	movs	r3, #2
 8001af0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001af2:	2300      	movs	r3, #0
 8001af4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001af6:	2303      	movs	r3, #3
 8001af8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001afa:	2305      	movs	r3, #5
 8001afc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001afe:	f107 0314 	add.w	r3, r7, #20
 8001b02:	4619      	mov	r1, r3
 8001b04:	480d      	ldr	r0, [pc, #52]	; (8001b3c <HAL_SPI_MspInit+0xc8>)
 8001b06:	f000 faf1 	bl	80020ec <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b0a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001b0e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b10:	2302      	movs	r3, #2
 8001b12:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b14:	2300      	movs	r3, #0
 8001b16:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b18:	2303      	movs	r3, #3
 8001b1a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b1c:	2305      	movs	r3, #5
 8001b1e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b20:	f107 0314 	add.w	r3, r7, #20
 8001b24:	4619      	mov	r1, r3
 8001b26:	4806      	ldr	r0, [pc, #24]	; (8001b40 <HAL_SPI_MspInit+0xcc>)
 8001b28:	f000 fae0 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001b2c:	bf00      	nop
 8001b2e:	3728      	adds	r7, #40	; 0x28
 8001b30:	46bd      	mov	sp, r7
 8001b32:	bd80      	pop	{r7, pc}
 8001b34:	40003800 	.word	0x40003800
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40020800 	.word	0x40020800
 8001b40:	40020400 	.word	0x40020400

08001b44 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	b084      	sub	sp, #16
 8001b48:	af00      	add	r7, sp, #0
 8001b4a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	681b      	ldr	r3, [r3, #0]
 8001b50:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001b54:	d10e      	bne.n	8001b74 <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b56:	2300      	movs	r3, #0
 8001b58:	60fb      	str	r3, [r7, #12]
 8001b5a:	4b16      	ldr	r3, [pc, #88]	; (8001bb4 <HAL_TIM_Base_MspInit+0x70>)
 8001b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b5e:	4a15      	ldr	r2, [pc, #84]	; (8001bb4 <HAL_TIM_Base_MspInit+0x70>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6413      	str	r3, [r2, #64]	; 0x40
 8001b66:	4b13      	ldr	r3, [pc, #76]	; (8001bb4 <HAL_TIM_Base_MspInit+0x70>)
 8001b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b6a:	f003 0301 	and.w	r3, r3, #1
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001b72:	e01a      	b.n	8001baa <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	681b      	ldr	r3, [r3, #0]
 8001b78:	4a0f      	ldr	r2, [pc, #60]	; (8001bb8 <HAL_TIM_Base_MspInit+0x74>)
 8001b7a:	4293      	cmp	r3, r2
 8001b7c:	d115      	bne.n	8001baa <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b0c      	ldr	r3, [pc, #48]	; (8001bb4 <HAL_TIM_Base_MspInit+0x70>)
 8001b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b86:	4a0b      	ldr	r2, [pc, #44]	; (8001bb4 <HAL_TIM_Base_MspInit+0x70>)
 8001b88:	f043 0308 	orr.w	r3, r3, #8
 8001b8c:	6413      	str	r3, [r2, #64]	; 0x40
 8001b8e:	4b09      	ldr	r3, [pc, #36]	; (8001bb4 <HAL_TIM_Base_MspInit+0x70>)
 8001b90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001b92:	f003 0308 	and.w	r3, r3, #8
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001b9a:	2200      	movs	r2, #0
 8001b9c:	2100      	movs	r1, #0
 8001b9e:	2032      	movs	r0, #50	; 0x32
 8001ba0:	f000 fa6d 	bl	800207e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001ba4:	2032      	movs	r0, #50	; 0x32
 8001ba6:	f000 fa86 	bl	80020b6 <HAL_NVIC_EnableIRQ>
}
 8001baa:	bf00      	nop
 8001bac:	3710      	adds	r7, #16
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bd80      	pop	{r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	40023800 	.word	0x40023800
 8001bb8:	40000c00 	.word	0x40000c00

08001bbc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bbc:	b580      	push	{r7, lr}
 8001bbe:	b088      	sub	sp, #32
 8001bc0:	af00      	add	r7, sp, #0
 8001bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc4:	f107 030c 	add.w	r3, r7, #12
 8001bc8:	2200      	movs	r2, #0
 8001bca:	601a      	str	r2, [r3, #0]
 8001bcc:	605a      	str	r2, [r3, #4]
 8001bce:	609a      	str	r2, [r3, #8]
 8001bd0:	60da      	str	r2, [r3, #12]
 8001bd2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001bdc:	d11e      	bne.n	8001c1c <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bde:	2300      	movs	r3, #0
 8001be0:	60bb      	str	r3, [r7, #8]
 8001be2:	4b10      	ldr	r3, [pc, #64]	; (8001c24 <HAL_TIM_MspPostInit+0x68>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	4a0f      	ldr	r2, [pc, #60]	; (8001c24 <HAL_TIM_MspPostInit+0x68>)
 8001be8:	f043 0302 	orr.w	r3, r3, #2
 8001bec:	6313      	str	r3, [r2, #48]	; 0x30
 8001bee:	4b0d      	ldr	r3, [pc, #52]	; (8001c24 <HAL_TIM_MspPostInit+0x68>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	f003 0302 	and.w	r3, r3, #2
 8001bf6:	60bb      	str	r3, [r7, #8]
 8001bf8:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001bfa:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001bfe:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c00:	2302      	movs	r3, #2
 8001c02:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c08:	2300      	movs	r3, #0
 8001c0a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001c0c:	2301      	movs	r3, #1
 8001c0e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c10:	f107 030c 	add.w	r3, r7, #12
 8001c14:	4619      	mov	r1, r3
 8001c16:	4804      	ldr	r0, [pc, #16]	; (8001c28 <HAL_TIM_MspPostInit+0x6c>)
 8001c18:	f000 fa68 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001c1c:	bf00      	nop
 8001c1e:	3720      	adds	r7, #32
 8001c20:	46bd      	mov	sp, r7
 8001c22:	bd80      	pop	{r7, pc}
 8001c24:	40023800 	.word	0x40023800
 8001c28:	40020400 	.word	0x40020400

08001c2c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c2c:	b580      	push	{r7, lr}
 8001c2e:	b08a      	sub	sp, #40	; 0x28
 8001c30:	af00      	add	r7, sp, #0
 8001c32:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c34:	f107 0314 	add.w	r3, r7, #20
 8001c38:	2200      	movs	r2, #0
 8001c3a:	601a      	str	r2, [r3, #0]
 8001c3c:	605a      	str	r2, [r3, #4]
 8001c3e:	609a      	str	r2, [r3, #8]
 8001c40:	60da      	str	r2, [r3, #12]
 8001c42:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a19      	ldr	r2, [pc, #100]	; (8001cb0 <HAL_UART_MspInit+0x84>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d12c      	bne.n	8001ca8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001c4e:	2300      	movs	r3, #0
 8001c50:	613b      	str	r3, [r7, #16]
 8001c52:	4b18      	ldr	r3, [pc, #96]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c56:	4a17      	ldr	r2, [pc, #92]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c58:	f043 0310 	orr.w	r3, r3, #16
 8001c5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c5e:	4b15      	ldr	r3, [pc, #84]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c62:	f003 0310 	and.w	r3, r3, #16
 8001c66:	613b      	str	r3, [r7, #16]
 8001c68:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	60fb      	str	r3, [r7, #12]
 8001c6e:	4b11      	ldr	r3, [pc, #68]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c72:	4a10      	ldr	r2, [pc, #64]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c74:	f043 0301 	orr.w	r3, r3, #1
 8001c78:	6313      	str	r3, [r2, #48]	; 0x30
 8001c7a:	4b0e      	ldr	r3, [pc, #56]	; (8001cb4 <HAL_UART_MspInit+0x88>)
 8001c7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001c7e:	f003 0301 	and.w	r3, r3, #1
 8001c82:	60fb      	str	r3, [r7, #12]
 8001c84:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8001c86:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001c8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c90:	2300      	movs	r3, #0
 8001c92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c94:	2303      	movs	r3, #3
 8001c96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001c98:	2307      	movs	r3, #7
 8001c9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c9c:	f107 0314 	add.w	r3, r7, #20
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4805      	ldr	r0, [pc, #20]	; (8001cb8 <HAL_UART_MspInit+0x8c>)
 8001ca4:	f000 fa22 	bl	80020ec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001ca8:	bf00      	nop
 8001caa:	3728      	adds	r7, #40	; 0x28
 8001cac:	46bd      	mov	sp, r7
 8001cae:	bd80      	pop	{r7, pc}
 8001cb0:	40011000 	.word	0x40011000
 8001cb4:	40023800 	.word	0x40023800
 8001cb8:	40020000 	.word	0x40020000

08001cbc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001cbc:	b480      	push	{r7}
 8001cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001cc0:	e7fe      	b.n	8001cc0 <NMI_Handler+0x4>

08001cc2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001cc2:	b480      	push	{r7}
 8001cc4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001cc6:	e7fe      	b.n	8001cc6 <HardFault_Handler+0x4>

08001cc8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ccc:	e7fe      	b.n	8001ccc <MemManage_Handler+0x4>

08001cce <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001cce:	b480      	push	{r7}
 8001cd0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001cd2:	e7fe      	b.n	8001cd2 <BusFault_Handler+0x4>

08001cd4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cd8:	e7fe      	b.n	8001cd8 <UsageFault_Handler+0x4>

08001cda <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cda:	b480      	push	{r7}
 8001cdc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cde:	bf00      	nop
 8001ce0:	46bd      	mov	sp, r7
 8001ce2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce6:	4770      	bx	lr

08001ce8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001ce8:	b480      	push	{r7}
 8001cea:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cec:	bf00      	nop
 8001cee:	46bd      	mov	sp, r7
 8001cf0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cf4:	4770      	bx	lr

08001cf6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001cf6:	b480      	push	{r7}
 8001cf8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cfa:	bf00      	nop
 8001cfc:	46bd      	mov	sp, r7
 8001cfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d02:	4770      	bx	lr

08001d04 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001d04:	b580      	push	{r7, lr}
 8001d06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001d08:	f000 f89a 	bl	8001e40 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001d0c:	bf00      	nop
 8001d0e:	bd80      	pop	{r7, pc}

08001d10 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8001d10:	b580      	push	{r7, lr}
 8001d12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8001d14:	4802      	ldr	r0, [pc, #8]	; (8001d20 <TIM5_IRQHandler+0x10>)
 8001d16:	f002 f8cf 	bl	8003eb8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001d1a:	bf00      	nop
 8001d1c:	bd80      	pop	{r7, pc}
 8001d1e:	bf00      	nop
 8001d20:	20001554 	.word	0x20001554

08001d24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001d24:	b480      	push	{r7}
 8001d26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001d28:	4b06      	ldr	r3, [pc, #24]	; (8001d44 <SystemInit+0x20>)
 8001d2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001d2e:	4a05      	ldr	r2, [pc, #20]	; (8001d44 <SystemInit+0x20>)
 8001d30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001d34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001d38:	bf00      	nop
 8001d3a:	46bd      	mov	sp, r7
 8001d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d40:	4770      	bx	lr
 8001d42:	bf00      	nop
 8001d44:	e000ed00 	.word	0xe000ed00

08001d48 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001d80 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001d4c:	480d      	ldr	r0, [pc, #52]	; (8001d84 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001d4e:	490e      	ldr	r1, [pc, #56]	; (8001d88 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001d50:	4a0e      	ldr	r2, [pc, #56]	; (8001d8c <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001d52:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001d54:	e002      	b.n	8001d5c <LoopCopyDataInit>

08001d56 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001d56:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001d58:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001d5a:	3304      	adds	r3, #4

08001d5c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001d5c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001d5e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001d60:	d3f9      	bcc.n	8001d56 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001d62:	4a0b      	ldr	r2, [pc, #44]	; (8001d90 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001d64:	4c0b      	ldr	r4, [pc, #44]	; (8001d94 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001d66:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001d68:	e001      	b.n	8001d6e <LoopFillZerobss>

08001d6a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001d6a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001d6c:	3204      	adds	r2, #4

08001d6e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001d6e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001d70:	d3fb      	bcc.n	8001d6a <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001d72:	f7ff ffd7 	bl	8001d24 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001d76:	f003 f969 	bl	800504c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001d7a:	f7fe fed9 	bl	8000b30 <main>
  bx  lr    
 8001d7e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001d80:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001d84:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001d88:	20001444 	.word	0x20001444
  ldr r2, =_sidata
 8001d8c:	080052e4 	.word	0x080052e4
  ldr r2, =_sbss
 8001d90:	20001444 	.word	0x20001444
  ldr r4, =_ebss
 8001d94:	200049b8 	.word	0x200049b8

08001d98 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001d98:	e7fe      	b.n	8001d98 <ADC_IRQHandler>
	...

08001d9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001da0:	4b0e      	ldr	r3, [pc, #56]	; (8001ddc <HAL_Init+0x40>)
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a0d      	ldr	r2, [pc, #52]	; (8001ddc <HAL_Init+0x40>)
 8001da6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001daa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001dac:	4b0b      	ldr	r3, [pc, #44]	; (8001ddc <HAL_Init+0x40>)
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	4a0a      	ldr	r2, [pc, #40]	; (8001ddc <HAL_Init+0x40>)
 8001db2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001db6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001db8:	4b08      	ldr	r3, [pc, #32]	; (8001ddc <HAL_Init+0x40>)
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a07      	ldr	r2, [pc, #28]	; (8001ddc <HAL_Init+0x40>)
 8001dbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001dc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001dc4:	2003      	movs	r0, #3
 8001dc6:	f000 f94f 	bl	8002068 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001dca:	2000      	movs	r0, #0
 8001dcc:	f000 f808 	bl	8001de0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001dd0:	f7ff fde0 	bl	8001994 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001dd4:	2300      	movs	r3, #0
}
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	bd80      	pop	{r7, pc}
 8001dda:	bf00      	nop
 8001ddc:	40023c00 	.word	0x40023c00

08001de0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001de0:	b580      	push	{r7, lr}
 8001de2:	b082      	sub	sp, #8
 8001de4:	af00      	add	r7, sp, #0
 8001de6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001de8:	4b12      	ldr	r3, [pc, #72]	; (8001e34 <HAL_InitTick+0x54>)
 8001dea:	681a      	ldr	r2, [r3, #0]
 8001dec:	4b12      	ldr	r3, [pc, #72]	; (8001e38 <HAL_InitTick+0x58>)
 8001dee:	781b      	ldrb	r3, [r3, #0]
 8001df0:	4619      	mov	r1, r3
 8001df2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8001df6:	fbb3 f3f1 	udiv	r3, r3, r1
 8001dfa:	fbb2 f3f3 	udiv	r3, r2, r3
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f000 f967 	bl	80020d2 <HAL_SYSTICK_Config>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d001      	beq.n	8001e0e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	e00e      	b.n	8001e2c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e0e:	687b      	ldr	r3, [r7, #4]
 8001e10:	2b0f      	cmp	r3, #15
 8001e12:	d80a      	bhi.n	8001e2a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e14:	2200      	movs	r2, #0
 8001e16:	6879      	ldr	r1, [r7, #4]
 8001e18:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001e1c:	f000 f92f 	bl	800207e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e20:	4a06      	ldr	r2, [pc, #24]	; (8001e3c <HAL_InitTick+0x5c>)
 8001e22:	687b      	ldr	r3, [r7, #4]
 8001e24:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e26:	2300      	movs	r3, #0
 8001e28:	e000      	b.n	8001e2c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e2a:	2301      	movs	r3, #1
}
 8001e2c:	4618      	mov	r0, r3
 8001e2e:	3708      	adds	r7, #8
 8001e30:	46bd      	mov	sp, r7
 8001e32:	bd80      	pop	{r7, pc}
 8001e34:	20001438 	.word	0x20001438
 8001e38:	20001440 	.word	0x20001440
 8001e3c:	2000143c 	.word	0x2000143c

08001e40 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e40:	b480      	push	{r7}
 8001e42:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e44:	4b06      	ldr	r3, [pc, #24]	; (8001e60 <HAL_IncTick+0x20>)
 8001e46:	781b      	ldrb	r3, [r3, #0]
 8001e48:	461a      	mov	r2, r3
 8001e4a:	4b06      	ldr	r3, [pc, #24]	; (8001e64 <HAL_IncTick+0x24>)
 8001e4c:	681b      	ldr	r3, [r3, #0]
 8001e4e:	4413      	add	r3, r2
 8001e50:	4a04      	ldr	r2, [pc, #16]	; (8001e64 <HAL_IncTick+0x24>)
 8001e52:	6013      	str	r3, [r2, #0]
}
 8001e54:	bf00      	nop
 8001e56:	46bd      	mov	sp, r7
 8001e58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e5c:	4770      	bx	lr
 8001e5e:	bf00      	nop
 8001e60:	20001440 	.word	0x20001440
 8001e64:	200049b4 	.word	0x200049b4

08001e68 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001e68:	b480      	push	{r7}
 8001e6a:	af00      	add	r7, sp, #0
  return uwTick;
 8001e6c:	4b03      	ldr	r3, [pc, #12]	; (8001e7c <HAL_GetTick+0x14>)
 8001e6e:	681b      	ldr	r3, [r3, #0]
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	46bd      	mov	sp, r7
 8001e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e78:	4770      	bx	lr
 8001e7a:	bf00      	nop
 8001e7c:	200049b4 	.word	0x200049b4

08001e80 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b084      	sub	sp, #16
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001e88:	f7ff ffee 	bl	8001e68 <HAL_GetTick>
 8001e8c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001e8e:	687b      	ldr	r3, [r7, #4]
 8001e90:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001e92:	68fb      	ldr	r3, [r7, #12]
 8001e94:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001e98:	d005      	beq.n	8001ea6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001e9a:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <HAL_Delay+0x44>)
 8001e9c:	781b      	ldrb	r3, [r3, #0]
 8001e9e:	461a      	mov	r2, r3
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	4413      	add	r3, r2
 8001ea4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001ea6:	bf00      	nop
 8001ea8:	f7ff ffde 	bl	8001e68 <HAL_GetTick>
 8001eac:	4602      	mov	r2, r0
 8001eae:	68bb      	ldr	r3, [r7, #8]
 8001eb0:	1ad3      	subs	r3, r2, r3
 8001eb2:	68fa      	ldr	r2, [r7, #12]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d8f7      	bhi.n	8001ea8 <HAL_Delay+0x28>
  {
  }
}
 8001eb8:	bf00      	nop
 8001eba:	bf00      	nop
 8001ebc:	3710      	adds	r7, #16
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	20001440 	.word	0x20001440

08001ec8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b480      	push	{r7}
 8001eca:	b085      	sub	sp, #20
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ed0:	687b      	ldr	r3, [r7, #4]
 8001ed2:	f003 0307 	and.w	r3, r3, #7
 8001ed6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ed8:	4b0c      	ldr	r3, [pc, #48]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001eda:	68db      	ldr	r3, [r3, #12]
 8001edc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ede:	68ba      	ldr	r2, [r7, #8]
 8001ee0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001ee8:	68fb      	ldr	r3, [r7, #12]
 8001eea:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001eec:	68bb      	ldr	r3, [r7, #8]
 8001eee:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ef0:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001ef4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001ef8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001efa:	4a04      	ldr	r2, [pc, #16]	; (8001f0c <__NVIC_SetPriorityGrouping+0x44>)
 8001efc:	68bb      	ldr	r3, [r7, #8]
 8001efe:	60d3      	str	r3, [r2, #12]
}
 8001f00:	bf00      	nop
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr
 8001f0c:	e000ed00 	.word	0xe000ed00

08001f10 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f10:	b480      	push	{r7}
 8001f12:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <__NVIC_GetPriorityGrouping+0x18>)
 8001f16:	68db      	ldr	r3, [r3, #12]
 8001f18:	0a1b      	lsrs	r3, r3, #8
 8001f1a:	f003 0307 	and.w	r3, r3, #7
}
 8001f1e:	4618      	mov	r0, r3
 8001f20:	46bd      	mov	sp, r7
 8001f22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f26:	4770      	bx	lr
 8001f28:	e000ed00 	.word	0xe000ed00

08001f2c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f2c:	b480      	push	{r7}
 8001f2e:	b083      	sub	sp, #12
 8001f30:	af00      	add	r7, sp, #0
 8001f32:	4603      	mov	r3, r0
 8001f34:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f36:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	db0b      	blt.n	8001f56 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f3e:	79fb      	ldrb	r3, [r7, #7]
 8001f40:	f003 021f 	and.w	r2, r3, #31
 8001f44:	4907      	ldr	r1, [pc, #28]	; (8001f64 <__NVIC_EnableIRQ+0x38>)
 8001f46:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f4a:	095b      	lsrs	r3, r3, #5
 8001f4c:	2001      	movs	r0, #1
 8001f4e:	fa00 f202 	lsl.w	r2, r0, r2
 8001f52:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f56:	bf00      	nop
 8001f58:	370c      	adds	r7, #12
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	e000e100 	.word	0xe000e100

08001f68 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b083      	sub	sp, #12
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	4603      	mov	r3, r0
 8001f70:	6039      	str	r1, [r7, #0]
 8001f72:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f74:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	db0a      	blt.n	8001f92 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f7c:	683b      	ldr	r3, [r7, #0]
 8001f7e:	b2da      	uxtb	r2, r3
 8001f80:	490c      	ldr	r1, [pc, #48]	; (8001fb4 <__NVIC_SetPriority+0x4c>)
 8001f82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f86:	0112      	lsls	r2, r2, #4
 8001f88:	b2d2      	uxtb	r2, r2
 8001f8a:	440b      	add	r3, r1
 8001f8c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f90:	e00a      	b.n	8001fa8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4908      	ldr	r1, [pc, #32]	; (8001fb8 <__NVIC_SetPriority+0x50>)
 8001f98:	79fb      	ldrb	r3, [r7, #7]
 8001f9a:	f003 030f 	and.w	r3, r3, #15
 8001f9e:	3b04      	subs	r3, #4
 8001fa0:	0112      	lsls	r2, r2, #4
 8001fa2:	b2d2      	uxtb	r2, r2
 8001fa4:	440b      	add	r3, r1
 8001fa6:	761a      	strb	r2, [r3, #24]
}
 8001fa8:	bf00      	nop
 8001faa:	370c      	adds	r7, #12
 8001fac:	46bd      	mov	sp, r7
 8001fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fb2:	4770      	bx	lr
 8001fb4:	e000e100 	.word	0xe000e100
 8001fb8:	e000ed00 	.word	0xe000ed00

08001fbc <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b089      	sub	sp, #36	; 0x24
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	60f8      	str	r0, [r7, #12]
 8001fc4:	60b9      	str	r1, [r7, #8]
 8001fc6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fc8:	68fb      	ldr	r3, [r7, #12]
 8001fca:	f003 0307 	and.w	r3, r3, #7
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fd0:	69fb      	ldr	r3, [r7, #28]
 8001fd2:	f1c3 0307 	rsb	r3, r3, #7
 8001fd6:	2b04      	cmp	r3, #4
 8001fd8:	bf28      	it	cs
 8001fda:	2304      	movcs	r3, #4
 8001fdc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fde:	69fb      	ldr	r3, [r7, #28]
 8001fe0:	3304      	adds	r3, #4
 8001fe2:	2b06      	cmp	r3, #6
 8001fe4:	d902      	bls.n	8001fec <NVIC_EncodePriority+0x30>
 8001fe6:	69fb      	ldr	r3, [r7, #28]
 8001fe8:	3b03      	subs	r3, #3
 8001fea:	e000      	b.n	8001fee <NVIC_EncodePriority+0x32>
 8001fec:	2300      	movs	r3, #0
 8001fee:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ff0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001ff4:	69bb      	ldr	r3, [r7, #24]
 8001ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8001ffa:	43da      	mvns	r2, r3
 8001ffc:	68bb      	ldr	r3, [r7, #8]
 8001ffe:	401a      	ands	r2, r3
 8002000:	697b      	ldr	r3, [r7, #20]
 8002002:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002004:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002008:	697b      	ldr	r3, [r7, #20]
 800200a:	fa01 f303 	lsl.w	r3, r1, r3
 800200e:	43d9      	mvns	r1, r3
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002014:	4313      	orrs	r3, r2
         );
}
 8002016:	4618      	mov	r0, r3
 8002018:	3724      	adds	r7, #36	; 0x24
 800201a:	46bd      	mov	sp, r7
 800201c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002020:	4770      	bx	lr
	...

08002024 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002024:	b580      	push	{r7, lr}
 8002026:	b082      	sub	sp, #8
 8002028:	af00      	add	r7, sp, #0
 800202a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	3b01      	subs	r3, #1
 8002030:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002034:	d301      	bcc.n	800203a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002036:	2301      	movs	r3, #1
 8002038:	e00f      	b.n	800205a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800203a:	4a0a      	ldr	r2, [pc, #40]	; (8002064 <SysTick_Config+0x40>)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	3b01      	subs	r3, #1
 8002040:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002042:	210f      	movs	r1, #15
 8002044:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002048:	f7ff ff8e 	bl	8001f68 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800204c:	4b05      	ldr	r3, [pc, #20]	; (8002064 <SysTick_Config+0x40>)
 800204e:	2200      	movs	r2, #0
 8002050:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002052:	4b04      	ldr	r3, [pc, #16]	; (8002064 <SysTick_Config+0x40>)
 8002054:	2207      	movs	r2, #7
 8002056:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002058:	2300      	movs	r3, #0
}
 800205a:	4618      	mov	r0, r3
 800205c:	3708      	adds	r7, #8
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	e000e010 	.word	0xe000e010

08002068 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002068:	b580      	push	{r7, lr}
 800206a:	b082      	sub	sp, #8
 800206c:	af00      	add	r7, sp, #0
 800206e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ff29 	bl	8001ec8 <__NVIC_SetPriorityGrouping>
}
 8002076:	bf00      	nop
 8002078:	3708      	adds	r7, #8
 800207a:	46bd      	mov	sp, r7
 800207c:	bd80      	pop	{r7, pc}

0800207e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800207e:	b580      	push	{r7, lr}
 8002080:	b086      	sub	sp, #24
 8002082:	af00      	add	r7, sp, #0
 8002084:	4603      	mov	r3, r0
 8002086:	60b9      	str	r1, [r7, #8]
 8002088:	607a      	str	r2, [r7, #4]
 800208a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002090:	f7ff ff3e 	bl	8001f10 <__NVIC_GetPriorityGrouping>
 8002094:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002096:	687a      	ldr	r2, [r7, #4]
 8002098:	68b9      	ldr	r1, [r7, #8]
 800209a:	6978      	ldr	r0, [r7, #20]
 800209c:	f7ff ff8e 	bl	8001fbc <NVIC_EncodePriority>
 80020a0:	4602      	mov	r2, r0
 80020a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80020a6:	4611      	mov	r1, r2
 80020a8:	4618      	mov	r0, r3
 80020aa:	f7ff ff5d 	bl	8001f68 <__NVIC_SetPriority>
}
 80020ae:	bf00      	nop
 80020b0:	3718      	adds	r7, #24
 80020b2:	46bd      	mov	sp, r7
 80020b4:	bd80      	pop	{r7, pc}

080020b6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020b6:	b580      	push	{r7, lr}
 80020b8:	b082      	sub	sp, #8
 80020ba:	af00      	add	r7, sp, #0
 80020bc:	4603      	mov	r3, r0
 80020be:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020c0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ff31 	bl	8001f2c <__NVIC_EnableIRQ>
}
 80020ca:	bf00      	nop
 80020cc:	3708      	adds	r7, #8
 80020ce:	46bd      	mov	sp, r7
 80020d0:	bd80      	pop	{r7, pc}

080020d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020d2:	b580      	push	{r7, lr}
 80020d4:	b082      	sub	sp, #8
 80020d6:	af00      	add	r7, sp, #0
 80020d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7ff ffa2 	bl	8002024 <SysTick_Config>
 80020e0:	4603      	mov	r3, r0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3708      	adds	r7, #8
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}
	...

080020ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020ec:	b480      	push	{r7}
 80020ee:	b089      	sub	sp, #36	; 0x24
 80020f0:	af00      	add	r7, sp, #0
 80020f2:	6078      	str	r0, [r7, #4]
 80020f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80020f6:	2300      	movs	r3, #0
 80020f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80020fa:	2300      	movs	r3, #0
 80020fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80020fe:	2300      	movs	r3, #0
 8002100:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002102:	2300      	movs	r3, #0
 8002104:	61fb      	str	r3, [r7, #28]
 8002106:	e159      	b.n	80023bc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002108:	2201      	movs	r2, #1
 800210a:	69fb      	ldr	r3, [r7, #28]
 800210c:	fa02 f303 	lsl.w	r3, r2, r3
 8002110:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002112:	683b      	ldr	r3, [r7, #0]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	697a      	ldr	r2, [r7, #20]
 8002118:	4013      	ands	r3, r2
 800211a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800211c:	693a      	ldr	r2, [r7, #16]
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	429a      	cmp	r2, r3
 8002122:	f040 8148 	bne.w	80023b6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	685b      	ldr	r3, [r3, #4]
 800212a:	f003 0303 	and.w	r3, r3, #3
 800212e:	2b01      	cmp	r3, #1
 8002130:	d005      	beq.n	800213e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002132:	683b      	ldr	r3, [r7, #0]
 8002134:	685b      	ldr	r3, [r3, #4]
 8002136:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800213a:	2b02      	cmp	r3, #2
 800213c:	d130      	bne.n	80021a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	689b      	ldr	r3, [r3, #8]
 8002142:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002144:	69fb      	ldr	r3, [r7, #28]
 8002146:	005b      	lsls	r3, r3, #1
 8002148:	2203      	movs	r2, #3
 800214a:	fa02 f303 	lsl.w	r3, r2, r3
 800214e:	43db      	mvns	r3, r3
 8002150:	69ba      	ldr	r2, [r7, #24]
 8002152:	4013      	ands	r3, r2
 8002154:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002156:	683b      	ldr	r3, [r7, #0]
 8002158:	68da      	ldr	r2, [r3, #12]
 800215a:	69fb      	ldr	r3, [r7, #28]
 800215c:	005b      	lsls	r3, r3, #1
 800215e:	fa02 f303 	lsl.w	r3, r2, r3
 8002162:	69ba      	ldr	r2, [r7, #24]
 8002164:	4313      	orrs	r3, r2
 8002166:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	69ba      	ldr	r2, [r7, #24]
 800216c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002174:	2201      	movs	r2, #1
 8002176:	69fb      	ldr	r3, [r7, #28]
 8002178:	fa02 f303 	lsl.w	r3, r2, r3
 800217c:	43db      	mvns	r3, r3
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4013      	ands	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002184:	683b      	ldr	r3, [r7, #0]
 8002186:	685b      	ldr	r3, [r3, #4]
 8002188:	091b      	lsrs	r3, r3, #4
 800218a:	f003 0201 	and.w	r2, r3, #1
 800218e:	69fb      	ldr	r3, [r7, #28]
 8002190:	fa02 f303 	lsl.w	r3, r2, r3
 8002194:	69ba      	ldr	r2, [r7, #24]
 8002196:	4313      	orrs	r3, r2
 8002198:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80021a0:	683b      	ldr	r3, [r7, #0]
 80021a2:	685b      	ldr	r3, [r3, #4]
 80021a4:	f003 0303 	and.w	r3, r3, #3
 80021a8:	2b03      	cmp	r3, #3
 80021aa:	d017      	beq.n	80021dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80021b2:	69fb      	ldr	r3, [r7, #28]
 80021b4:	005b      	lsls	r3, r3, #1
 80021b6:	2203      	movs	r2, #3
 80021b8:	fa02 f303 	lsl.w	r3, r2, r3
 80021bc:	43db      	mvns	r3, r3
 80021be:	69ba      	ldr	r2, [r7, #24]
 80021c0:	4013      	ands	r3, r2
 80021c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80021c4:	683b      	ldr	r3, [r7, #0]
 80021c6:	689a      	ldr	r2, [r3, #8]
 80021c8:	69fb      	ldr	r3, [r7, #28]
 80021ca:	005b      	lsls	r3, r3, #1
 80021cc:	fa02 f303 	lsl.w	r3, r2, r3
 80021d0:	69ba      	ldr	r2, [r7, #24]
 80021d2:	4313      	orrs	r3, r2
 80021d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80021dc:	683b      	ldr	r3, [r7, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0303 	and.w	r3, r3, #3
 80021e4:	2b02      	cmp	r3, #2
 80021e6:	d123      	bne.n	8002230 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80021e8:	69fb      	ldr	r3, [r7, #28]
 80021ea:	08da      	lsrs	r2, r3, #3
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	3208      	adds	r2, #8
 80021f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80021f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80021f6:	69fb      	ldr	r3, [r7, #28]
 80021f8:	f003 0307 	and.w	r3, r3, #7
 80021fc:	009b      	lsls	r3, r3, #2
 80021fe:	220f      	movs	r2, #15
 8002200:	fa02 f303 	lsl.w	r3, r2, r3
 8002204:	43db      	mvns	r3, r3
 8002206:	69ba      	ldr	r2, [r7, #24]
 8002208:	4013      	ands	r3, r2
 800220a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800220c:	683b      	ldr	r3, [r7, #0]
 800220e:	691a      	ldr	r2, [r3, #16]
 8002210:	69fb      	ldr	r3, [r7, #28]
 8002212:	f003 0307 	and.w	r3, r3, #7
 8002216:	009b      	lsls	r3, r3, #2
 8002218:	fa02 f303 	lsl.w	r3, r2, r3
 800221c:	69ba      	ldr	r2, [r7, #24]
 800221e:	4313      	orrs	r3, r2
 8002220:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002222:	69fb      	ldr	r3, [r7, #28]
 8002224:	08da      	lsrs	r2, r3, #3
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	3208      	adds	r2, #8
 800222a:	69b9      	ldr	r1, [r7, #24]
 800222c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002230:	687b      	ldr	r3, [r7, #4]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002236:	69fb      	ldr	r3, [r7, #28]
 8002238:	005b      	lsls	r3, r3, #1
 800223a:	2203      	movs	r2, #3
 800223c:	fa02 f303 	lsl.w	r3, r2, r3
 8002240:	43db      	mvns	r3, r3
 8002242:	69ba      	ldr	r2, [r7, #24]
 8002244:	4013      	ands	r3, r2
 8002246:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002248:	683b      	ldr	r3, [r7, #0]
 800224a:	685b      	ldr	r3, [r3, #4]
 800224c:	f003 0203 	and.w	r2, r3, #3
 8002250:	69fb      	ldr	r3, [r7, #28]
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	fa02 f303 	lsl.w	r3, r2, r3
 8002258:	69ba      	ldr	r2, [r7, #24]
 800225a:	4313      	orrs	r3, r2
 800225c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800225e:	687b      	ldr	r3, [r7, #4]
 8002260:	69ba      	ldr	r2, [r7, #24]
 8002262:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002264:	683b      	ldr	r3, [r7, #0]
 8002266:	685b      	ldr	r3, [r3, #4]
 8002268:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800226c:	2b00      	cmp	r3, #0
 800226e:	f000 80a2 	beq.w	80023b6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002272:	2300      	movs	r3, #0
 8002274:	60fb      	str	r3, [r7, #12]
 8002276:	4b57      	ldr	r3, [pc, #348]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 8002278:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800227a:	4a56      	ldr	r2, [pc, #344]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 800227c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002280:	6453      	str	r3, [r2, #68]	; 0x44
 8002282:	4b54      	ldr	r3, [pc, #336]	; (80023d4 <HAL_GPIO_Init+0x2e8>)
 8002284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002286:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800228a:	60fb      	str	r3, [r7, #12]
 800228c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800228e:	4a52      	ldr	r2, [pc, #328]	; (80023d8 <HAL_GPIO_Init+0x2ec>)
 8002290:	69fb      	ldr	r3, [r7, #28]
 8002292:	089b      	lsrs	r3, r3, #2
 8002294:	3302      	adds	r3, #2
 8002296:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800229a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800229c:	69fb      	ldr	r3, [r7, #28]
 800229e:	f003 0303 	and.w	r3, r3, #3
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	220f      	movs	r2, #15
 80022a6:	fa02 f303 	lsl.w	r3, r2, r3
 80022aa:	43db      	mvns	r3, r3
 80022ac:	69ba      	ldr	r2, [r7, #24]
 80022ae:	4013      	ands	r3, r2
 80022b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	4a49      	ldr	r2, [pc, #292]	; (80023dc <HAL_GPIO_Init+0x2f0>)
 80022b6:	4293      	cmp	r3, r2
 80022b8:	d019      	beq.n	80022ee <HAL_GPIO_Init+0x202>
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	4a48      	ldr	r2, [pc, #288]	; (80023e0 <HAL_GPIO_Init+0x2f4>)
 80022be:	4293      	cmp	r3, r2
 80022c0:	d013      	beq.n	80022ea <HAL_GPIO_Init+0x1fe>
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	4a47      	ldr	r2, [pc, #284]	; (80023e4 <HAL_GPIO_Init+0x2f8>)
 80022c6:	4293      	cmp	r3, r2
 80022c8:	d00d      	beq.n	80022e6 <HAL_GPIO_Init+0x1fa>
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	4a46      	ldr	r2, [pc, #280]	; (80023e8 <HAL_GPIO_Init+0x2fc>)
 80022ce:	4293      	cmp	r3, r2
 80022d0:	d007      	beq.n	80022e2 <HAL_GPIO_Init+0x1f6>
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	4a45      	ldr	r2, [pc, #276]	; (80023ec <HAL_GPIO_Init+0x300>)
 80022d6:	4293      	cmp	r3, r2
 80022d8:	d101      	bne.n	80022de <HAL_GPIO_Init+0x1f2>
 80022da:	2304      	movs	r3, #4
 80022dc:	e008      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022de:	2307      	movs	r3, #7
 80022e0:	e006      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022e2:	2303      	movs	r3, #3
 80022e4:	e004      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022e6:	2302      	movs	r3, #2
 80022e8:	e002      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022ea:	2301      	movs	r3, #1
 80022ec:	e000      	b.n	80022f0 <HAL_GPIO_Init+0x204>
 80022ee:	2300      	movs	r3, #0
 80022f0:	69fa      	ldr	r2, [r7, #28]
 80022f2:	f002 0203 	and.w	r2, r2, #3
 80022f6:	0092      	lsls	r2, r2, #2
 80022f8:	4093      	lsls	r3, r2
 80022fa:	69ba      	ldr	r2, [r7, #24]
 80022fc:	4313      	orrs	r3, r2
 80022fe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002300:	4935      	ldr	r1, [pc, #212]	; (80023d8 <HAL_GPIO_Init+0x2ec>)
 8002302:	69fb      	ldr	r3, [r7, #28]
 8002304:	089b      	lsrs	r3, r3, #2
 8002306:	3302      	adds	r3, #2
 8002308:	69ba      	ldr	r2, [r7, #24]
 800230a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800230e:	4b38      	ldr	r3, [pc, #224]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002310:	689b      	ldr	r3, [r3, #8]
 8002312:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002314:	693b      	ldr	r3, [r7, #16]
 8002316:	43db      	mvns	r3, r3
 8002318:	69ba      	ldr	r2, [r7, #24]
 800231a:	4013      	ands	r3, r2
 800231c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800231e:	683b      	ldr	r3, [r7, #0]
 8002320:	685b      	ldr	r3, [r3, #4]
 8002322:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002326:	2b00      	cmp	r3, #0
 8002328:	d003      	beq.n	8002332 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800232a:	69ba      	ldr	r2, [r7, #24]
 800232c:	693b      	ldr	r3, [r7, #16]
 800232e:	4313      	orrs	r3, r2
 8002330:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002332:	4a2f      	ldr	r2, [pc, #188]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002334:	69bb      	ldr	r3, [r7, #24]
 8002336:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002338:	4b2d      	ldr	r3, [pc, #180]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800233a:	68db      	ldr	r3, [r3, #12]
 800233c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800233e:	693b      	ldr	r3, [r7, #16]
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002350:	2b00      	cmp	r3, #0
 8002352:	d003      	beq.n	800235c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002354:	69ba      	ldr	r2, [r7, #24]
 8002356:	693b      	ldr	r3, [r7, #16]
 8002358:	4313      	orrs	r3, r2
 800235a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800235c:	4a24      	ldr	r2, [pc, #144]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800235e:	69bb      	ldr	r3, [r7, #24]
 8002360:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002362:	4b23      	ldr	r3, [pc, #140]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002364:	685b      	ldr	r3, [r3, #4]
 8002366:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	43db      	mvns	r3, r3
 800236c:	69ba      	ldr	r2, [r7, #24]
 800236e:	4013      	ands	r3, r2
 8002370:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002372:	683b      	ldr	r3, [r7, #0]
 8002374:	685b      	ldr	r3, [r3, #4]
 8002376:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800237a:	2b00      	cmp	r3, #0
 800237c:	d003      	beq.n	8002386 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800237e:	69ba      	ldr	r2, [r7, #24]
 8002380:	693b      	ldr	r3, [r7, #16]
 8002382:	4313      	orrs	r3, r2
 8002384:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002386:	4a1a      	ldr	r2, [pc, #104]	; (80023f0 <HAL_GPIO_Init+0x304>)
 8002388:	69bb      	ldr	r3, [r7, #24]
 800238a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800238c:	4b18      	ldr	r3, [pc, #96]	; (80023f0 <HAL_GPIO_Init+0x304>)
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002392:	693b      	ldr	r3, [r7, #16]
 8002394:	43db      	mvns	r3, r3
 8002396:	69ba      	ldr	r2, [r7, #24]
 8002398:	4013      	ands	r3, r2
 800239a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80023a8:	69ba      	ldr	r2, [r7, #24]
 80023aa:	693b      	ldr	r3, [r7, #16]
 80023ac:	4313      	orrs	r3, r2
 80023ae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80023b0:	4a0f      	ldr	r2, [pc, #60]	; (80023f0 <HAL_GPIO_Init+0x304>)
 80023b2:	69bb      	ldr	r3, [r7, #24]
 80023b4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80023b6:	69fb      	ldr	r3, [r7, #28]
 80023b8:	3301      	adds	r3, #1
 80023ba:	61fb      	str	r3, [r7, #28]
 80023bc:	69fb      	ldr	r3, [r7, #28]
 80023be:	2b0f      	cmp	r3, #15
 80023c0:	f67f aea2 	bls.w	8002108 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80023c4:	bf00      	nop
 80023c6:	bf00      	nop
 80023c8:	3724      	adds	r7, #36	; 0x24
 80023ca:	46bd      	mov	sp, r7
 80023cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d0:	4770      	bx	lr
 80023d2:	bf00      	nop
 80023d4:	40023800 	.word	0x40023800
 80023d8:	40013800 	.word	0x40013800
 80023dc:	40020000 	.word	0x40020000
 80023e0:	40020400 	.word	0x40020400
 80023e4:	40020800 	.word	0x40020800
 80023e8:	40020c00 	.word	0x40020c00
 80023ec:	40021000 	.word	0x40021000
 80023f0:	40013c00 	.word	0x40013c00

080023f4 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0
 80023fa:	6078      	str	r0, [r7, #4]
 80023fc:	460b      	mov	r3, r1
 80023fe:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002400:	687b      	ldr	r3, [r7, #4]
 8002402:	691a      	ldr	r2, [r3, #16]
 8002404:	887b      	ldrh	r3, [r7, #2]
 8002406:	4013      	ands	r3, r2
 8002408:	2b00      	cmp	r3, #0
 800240a:	d002      	beq.n	8002412 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800240c:	2301      	movs	r3, #1
 800240e:	73fb      	strb	r3, [r7, #15]
 8002410:	e001      	b.n	8002416 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002412:	2300      	movs	r3, #0
 8002414:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002416:	7bfb      	ldrb	r3, [r7, #15]
}
 8002418:	4618      	mov	r0, r3
 800241a:	3714      	adds	r7, #20
 800241c:	46bd      	mov	sp, r7
 800241e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002422:	4770      	bx	lr

08002424 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002424:	b480      	push	{r7}
 8002426:	b083      	sub	sp, #12
 8002428:	af00      	add	r7, sp, #0
 800242a:	6078      	str	r0, [r7, #4]
 800242c:	460b      	mov	r3, r1
 800242e:	807b      	strh	r3, [r7, #2]
 8002430:	4613      	mov	r3, r2
 8002432:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002434:	787b      	ldrb	r3, [r7, #1]
 8002436:	2b00      	cmp	r3, #0
 8002438:	d003      	beq.n	8002442 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800243a:	887a      	ldrh	r2, [r7, #2]
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002440:	e003      	b.n	800244a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002442:	887b      	ldrh	r3, [r7, #2]
 8002444:	041a      	lsls	r2, r3, #16
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	619a      	str	r2, [r3, #24]
}
 800244a:	bf00      	nop
 800244c:	370c      	adds	r7, #12
 800244e:	46bd      	mov	sp, r7
 8002450:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002454:	4770      	bx	lr
	...

08002458 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b084      	sub	sp, #16
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002460:	687b      	ldr	r3, [r7, #4]
 8002462:	2b00      	cmp	r3, #0
 8002464:	d101      	bne.n	800246a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e12b      	b.n	80026c2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002470:	b2db      	uxtb	r3, r3
 8002472:	2b00      	cmp	r3, #0
 8002474:	d106      	bne.n	8002484 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	2200      	movs	r2, #0
 800247a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800247e:	6878      	ldr	r0, [r7, #4]
 8002480:	f7ff fab0 	bl	80019e4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002484:	687b      	ldr	r3, [r7, #4]
 8002486:	2224      	movs	r2, #36	; 0x24
 8002488:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	681a      	ldr	r2, [r3, #0]
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	681b      	ldr	r3, [r3, #0]
 8002496:	f022 0201 	bic.w	r2, r2, #1
 800249a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	681b      	ldr	r3, [r3, #0]
 80024a0:	681a      	ldr	r2, [r3, #0]
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80024aa:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	681a      	ldr	r2, [r3, #0]
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80024ba:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80024bc:	f001 f888 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 80024c0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80024c2:	687b      	ldr	r3, [r7, #4]
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	4a81      	ldr	r2, [pc, #516]	; (80026cc <HAL_I2C_Init+0x274>)
 80024c8:	4293      	cmp	r3, r2
 80024ca:	d807      	bhi.n	80024dc <HAL_I2C_Init+0x84>
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	4a80      	ldr	r2, [pc, #512]	; (80026d0 <HAL_I2C_Init+0x278>)
 80024d0:	4293      	cmp	r3, r2
 80024d2:	bf94      	ite	ls
 80024d4:	2301      	movls	r3, #1
 80024d6:	2300      	movhi	r3, #0
 80024d8:	b2db      	uxtb	r3, r3
 80024da:	e006      	b.n	80024ea <HAL_I2C_Init+0x92>
 80024dc:	68fb      	ldr	r3, [r7, #12]
 80024de:	4a7d      	ldr	r2, [pc, #500]	; (80026d4 <HAL_I2C_Init+0x27c>)
 80024e0:	4293      	cmp	r3, r2
 80024e2:	bf94      	ite	ls
 80024e4:	2301      	movls	r3, #1
 80024e6:	2300      	movhi	r3, #0
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d001      	beq.n	80024f2 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80024ee:	2301      	movs	r3, #1
 80024f0:	e0e7      	b.n	80026c2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	4a78      	ldr	r2, [pc, #480]	; (80026d8 <HAL_I2C_Init+0x280>)
 80024f6:	fba2 2303 	umull	r2, r3, r2, r3
 80024fa:	0c9b      	lsrs	r3, r3, #18
 80024fc:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80024fe:	687b      	ldr	r3, [r7, #4]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	685b      	ldr	r3, [r3, #4]
 8002504:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	68ba      	ldr	r2, [r7, #8]
 800250e:	430a      	orrs	r2, r1
 8002510:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002512:	687b      	ldr	r3, [r7, #4]
 8002514:	681b      	ldr	r3, [r3, #0]
 8002516:	6a1b      	ldr	r3, [r3, #32]
 8002518:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	685b      	ldr	r3, [r3, #4]
 8002520:	4a6a      	ldr	r2, [pc, #424]	; (80026cc <HAL_I2C_Init+0x274>)
 8002522:	4293      	cmp	r3, r2
 8002524:	d802      	bhi.n	800252c <HAL_I2C_Init+0xd4>
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	3301      	adds	r3, #1
 800252a:	e009      	b.n	8002540 <HAL_I2C_Init+0xe8>
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002532:	fb02 f303 	mul.w	r3, r2, r3
 8002536:	4a69      	ldr	r2, [pc, #420]	; (80026dc <HAL_I2C_Init+0x284>)
 8002538:	fba2 2303 	umull	r2, r3, r2, r3
 800253c:	099b      	lsrs	r3, r3, #6
 800253e:	3301      	adds	r3, #1
 8002540:	687a      	ldr	r2, [r7, #4]
 8002542:	6812      	ldr	r2, [r2, #0]
 8002544:	430b      	orrs	r3, r1
 8002546:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	69db      	ldr	r3, [r3, #28]
 800254e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002552:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	685b      	ldr	r3, [r3, #4]
 800255a:	495c      	ldr	r1, [pc, #368]	; (80026cc <HAL_I2C_Init+0x274>)
 800255c:	428b      	cmp	r3, r1
 800255e:	d819      	bhi.n	8002594 <HAL_I2C_Init+0x13c>
 8002560:	68fb      	ldr	r3, [r7, #12]
 8002562:	1e59      	subs	r1, r3, #1
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	005b      	lsls	r3, r3, #1
 800256a:	fbb1 f3f3 	udiv	r3, r1, r3
 800256e:	1c59      	adds	r1, r3, #1
 8002570:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002574:	400b      	ands	r3, r1
 8002576:	2b00      	cmp	r3, #0
 8002578:	d00a      	beq.n	8002590 <HAL_I2C_Init+0x138>
 800257a:	68fb      	ldr	r3, [r7, #12]
 800257c:	1e59      	subs	r1, r3, #1
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	685b      	ldr	r3, [r3, #4]
 8002582:	005b      	lsls	r3, r3, #1
 8002584:	fbb1 f3f3 	udiv	r3, r1, r3
 8002588:	3301      	adds	r3, #1
 800258a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800258e:	e051      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002590:	2304      	movs	r3, #4
 8002592:	e04f      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	689b      	ldr	r3, [r3, #8]
 8002598:	2b00      	cmp	r3, #0
 800259a:	d111      	bne.n	80025c0 <HAL_I2C_Init+0x168>
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	1e58      	subs	r0, r3, #1
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	6859      	ldr	r1, [r3, #4]
 80025a4:	460b      	mov	r3, r1
 80025a6:	005b      	lsls	r3, r3, #1
 80025a8:	440b      	add	r3, r1
 80025aa:	fbb0 f3f3 	udiv	r3, r0, r3
 80025ae:	3301      	adds	r3, #1
 80025b0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025b4:	2b00      	cmp	r3, #0
 80025b6:	bf0c      	ite	eq
 80025b8:	2301      	moveq	r3, #1
 80025ba:	2300      	movne	r3, #0
 80025bc:	b2db      	uxtb	r3, r3
 80025be:	e012      	b.n	80025e6 <HAL_I2C_Init+0x18e>
 80025c0:	68fb      	ldr	r3, [r7, #12]
 80025c2:	1e58      	subs	r0, r3, #1
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	6859      	ldr	r1, [r3, #4]
 80025c8:	460b      	mov	r3, r1
 80025ca:	009b      	lsls	r3, r3, #2
 80025cc:	440b      	add	r3, r1
 80025ce:	0099      	lsls	r1, r3, #2
 80025d0:	440b      	add	r3, r1
 80025d2:	fbb0 f3f3 	udiv	r3, r0, r3
 80025d6:	3301      	adds	r3, #1
 80025d8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80025dc:	2b00      	cmp	r3, #0
 80025de:	bf0c      	ite	eq
 80025e0:	2301      	moveq	r3, #1
 80025e2:	2300      	movne	r3, #0
 80025e4:	b2db      	uxtb	r3, r3
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d001      	beq.n	80025ee <HAL_I2C_Init+0x196>
 80025ea:	2301      	movs	r3, #1
 80025ec:	e022      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 80025ee:	687b      	ldr	r3, [r7, #4]
 80025f0:	689b      	ldr	r3, [r3, #8]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d10e      	bne.n	8002614 <HAL_I2C_Init+0x1bc>
 80025f6:	68fb      	ldr	r3, [r7, #12]
 80025f8:	1e58      	subs	r0, r3, #1
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6859      	ldr	r1, [r3, #4]
 80025fe:	460b      	mov	r3, r1
 8002600:	005b      	lsls	r3, r3, #1
 8002602:	440b      	add	r3, r1
 8002604:	fbb0 f3f3 	udiv	r3, r0, r3
 8002608:	3301      	adds	r3, #1
 800260a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800260e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002612:	e00f      	b.n	8002634 <HAL_I2C_Init+0x1dc>
 8002614:	68fb      	ldr	r3, [r7, #12]
 8002616:	1e58      	subs	r0, r3, #1
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	6859      	ldr	r1, [r3, #4]
 800261c:	460b      	mov	r3, r1
 800261e:	009b      	lsls	r3, r3, #2
 8002620:	440b      	add	r3, r1
 8002622:	0099      	lsls	r1, r3, #2
 8002624:	440b      	add	r3, r1
 8002626:	fbb0 f3f3 	udiv	r3, r0, r3
 800262a:	3301      	adds	r3, #1
 800262c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002630:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002634:	6879      	ldr	r1, [r7, #4]
 8002636:	6809      	ldr	r1, [r1, #0]
 8002638:	4313      	orrs	r3, r2
 800263a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	681b      	ldr	r3, [r3, #0]
 8002642:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	69da      	ldr	r2, [r3, #28]
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	6a1b      	ldr	r3, [r3, #32]
 800264e:	431a      	orrs	r2, r3
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	430a      	orrs	r2, r1
 8002656:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	689b      	ldr	r3, [r3, #8]
 800265e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002662:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002666:	687a      	ldr	r2, [r7, #4]
 8002668:	6911      	ldr	r1, [r2, #16]
 800266a:	687a      	ldr	r2, [r7, #4]
 800266c:	68d2      	ldr	r2, [r2, #12]
 800266e:	4311      	orrs	r1, r2
 8002670:	687a      	ldr	r2, [r7, #4]
 8002672:	6812      	ldr	r2, [r2, #0]
 8002674:	430b      	orrs	r3, r1
 8002676:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	68db      	ldr	r3, [r3, #12]
 800267e:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	695a      	ldr	r2, [r3, #20]
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	699b      	ldr	r3, [r3, #24]
 800268a:	431a      	orrs	r2, r3
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	681b      	ldr	r3, [r3, #0]
 8002690:	430a      	orrs	r2, r1
 8002692:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	681a      	ldr	r2, [r3, #0]
 800269a:	687b      	ldr	r3, [r7, #4]
 800269c:	681b      	ldr	r3, [r3, #0]
 800269e:	f042 0201 	orr.w	r2, r2, #1
 80026a2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	2220      	movs	r2, #32
 80026ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	2200      	movs	r2, #0
 80026b6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2200      	movs	r2, #0
 80026bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80026c0:	2300      	movs	r3, #0
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	3710      	adds	r7, #16
 80026c6:	46bd      	mov	sp, r7
 80026c8:	bd80      	pop	{r7, pc}
 80026ca:	bf00      	nop
 80026cc:	000186a0 	.word	0x000186a0
 80026d0:	001e847f 	.word	0x001e847f
 80026d4:	003d08ff 	.word	0x003d08ff
 80026d8:	431bde83 	.word	0x431bde83
 80026dc:	10624dd3 	.word	0x10624dd3

080026e0 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b088      	sub	sp, #32
 80026e4:	af02      	add	r7, sp, #8
 80026e6:	60f8      	str	r0, [r7, #12]
 80026e8:	607a      	str	r2, [r7, #4]
 80026ea:	461a      	mov	r2, r3
 80026ec:	460b      	mov	r3, r1
 80026ee:	817b      	strh	r3, [r7, #10]
 80026f0:	4613      	mov	r3, r2
 80026f2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80026f4:	f7ff fbb8 	bl	8001e68 <HAL_GetTick>
 80026f8:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80026fa:	68fb      	ldr	r3, [r7, #12]
 80026fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002700:	b2db      	uxtb	r3, r3
 8002702:	2b20      	cmp	r3, #32
 8002704:	f040 80e0 	bne.w	80028c8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	9300      	str	r3, [sp, #0]
 800270c:	2319      	movs	r3, #25
 800270e:	2201      	movs	r2, #1
 8002710:	4970      	ldr	r1, [pc, #448]	; (80028d4 <HAL_I2C_Master_Transmit+0x1f4>)
 8002712:	68f8      	ldr	r0, [r7, #12]
 8002714:	f000 f964 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002718:	4603      	mov	r3, r0
 800271a:	2b00      	cmp	r3, #0
 800271c:	d001      	beq.n	8002722 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800271e:	2302      	movs	r3, #2
 8002720:	e0d3      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002728:	2b01      	cmp	r3, #1
 800272a:	d101      	bne.n	8002730 <HAL_I2C_Master_Transmit+0x50>
 800272c:	2302      	movs	r3, #2
 800272e:	e0cc      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	2201      	movs	r2, #1
 8002734:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 0301 	and.w	r3, r3, #1
 8002742:	2b01      	cmp	r3, #1
 8002744:	d007      	beq.n	8002756 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002746:	68fb      	ldr	r3, [r7, #12]
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	681a      	ldr	r2, [r3, #0]
 800274c:	68fb      	ldr	r3, [r7, #12]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f042 0201 	orr.w	r2, r2, #1
 8002754:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	681b      	ldr	r3, [r3, #0]
 800275a:	681a      	ldr	r2, [r3, #0]
 800275c:	68fb      	ldr	r3, [r7, #12]
 800275e:	681b      	ldr	r3, [r3, #0]
 8002760:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002764:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	2221      	movs	r2, #33	; 0x21
 800276a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	2210      	movs	r2, #16
 8002772:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	2200      	movs	r2, #0
 800277a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	687a      	ldr	r2, [r7, #4]
 8002780:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002782:	68fb      	ldr	r3, [r7, #12]
 8002784:	893a      	ldrh	r2, [r7, #8]
 8002786:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002788:	68fb      	ldr	r3, [r7, #12]
 800278a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800278c:	b29a      	uxth	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002792:	68fb      	ldr	r3, [r7, #12]
 8002794:	4a50      	ldr	r2, [pc, #320]	; (80028d8 <HAL_I2C_Master_Transmit+0x1f8>)
 8002796:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002798:	8979      	ldrh	r1, [r7, #10]
 800279a:	697b      	ldr	r3, [r7, #20]
 800279c:	6a3a      	ldr	r2, [r7, #32]
 800279e:	68f8      	ldr	r0, [r7, #12]
 80027a0:	f000 f89c 	bl	80028dc <I2C_MasterRequestWrite>
 80027a4:	4603      	mov	r3, r0
 80027a6:	2b00      	cmp	r3, #0
 80027a8:	d001      	beq.n	80027ae <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80027aa:	2301      	movs	r3, #1
 80027ac:	e08d      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80027ae:	2300      	movs	r3, #0
 80027b0:	613b      	str	r3, [r7, #16]
 80027b2:	68fb      	ldr	r3, [r7, #12]
 80027b4:	681b      	ldr	r3, [r3, #0]
 80027b6:	695b      	ldr	r3, [r3, #20]
 80027b8:	613b      	str	r3, [r7, #16]
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	681b      	ldr	r3, [r3, #0]
 80027be:	699b      	ldr	r3, [r3, #24]
 80027c0:	613b      	str	r3, [r7, #16]
 80027c2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80027c4:	e066      	b.n	8002894 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80027c6:	697a      	ldr	r2, [r7, #20]
 80027c8:	6a39      	ldr	r1, [r7, #32]
 80027ca:	68f8      	ldr	r0, [r7, #12]
 80027cc:	f000 f9de 	bl	8002b8c <I2C_WaitOnTXEFlagUntilTimeout>
 80027d0:	4603      	mov	r3, r0
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	d00d      	beq.n	80027f2 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80027d6:	68fb      	ldr	r3, [r7, #12]
 80027d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027da:	2b04      	cmp	r3, #4
 80027dc:	d107      	bne.n	80027ee <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80027de:	68fb      	ldr	r3, [r7, #12]
 80027e0:	681b      	ldr	r3, [r3, #0]
 80027e2:	681a      	ldr	r2, [r3, #0]
 80027e4:	68fb      	ldr	r3, [r7, #12]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80027ec:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80027ee:	2301      	movs	r3, #1
 80027f0:	e06b      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80027f2:	68fb      	ldr	r3, [r7, #12]
 80027f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027f6:	781a      	ldrb	r2, [r3, #0]
 80027f8:	68fb      	ldr	r3, [r7, #12]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80027fe:	68fb      	ldr	r3, [r7, #12]
 8002800:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002802:	1c5a      	adds	r2, r3, #1
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002808:	68fb      	ldr	r3, [r7, #12]
 800280a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800280c:	b29b      	uxth	r3, r3
 800280e:	3b01      	subs	r3, #1
 8002810:	b29a      	uxth	r2, r3
 8002812:	68fb      	ldr	r3, [r7, #12]
 8002814:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002816:	68fb      	ldr	r3, [r7, #12]
 8002818:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800281a:	3b01      	subs	r3, #1
 800281c:	b29a      	uxth	r2, r3
 800281e:	68fb      	ldr	r3, [r7, #12]
 8002820:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002822:	68fb      	ldr	r3, [r7, #12]
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	695b      	ldr	r3, [r3, #20]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b04      	cmp	r3, #4
 800282e:	d11b      	bne.n	8002868 <HAL_I2C_Master_Transmit+0x188>
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002834:	2b00      	cmp	r3, #0
 8002836:	d017      	beq.n	8002868 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002838:	68fb      	ldr	r3, [r7, #12]
 800283a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283c:	781a      	ldrb	r2, [r3, #0]
 800283e:	68fb      	ldr	r3, [r7, #12]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002848:	1c5a      	adds	r2, r3, #1
 800284a:	68fb      	ldr	r3, [r7, #12]
 800284c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800284e:	68fb      	ldr	r3, [r7, #12]
 8002850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002852:	b29b      	uxth	r3, r3
 8002854:	3b01      	subs	r3, #1
 8002856:	b29a      	uxth	r2, r3
 8002858:	68fb      	ldr	r3, [r7, #12]
 800285a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800285c:	68fb      	ldr	r3, [r7, #12]
 800285e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002860:	3b01      	subs	r3, #1
 8002862:	b29a      	uxth	r2, r3
 8002864:	68fb      	ldr	r3, [r7, #12]
 8002866:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002868:	697a      	ldr	r2, [r7, #20]
 800286a:	6a39      	ldr	r1, [r7, #32]
 800286c:	68f8      	ldr	r0, [r7, #12]
 800286e:	f000 f9ce 	bl	8002c0e <I2C_WaitOnBTFFlagUntilTimeout>
 8002872:	4603      	mov	r3, r0
 8002874:	2b00      	cmp	r3, #0
 8002876:	d00d      	beq.n	8002894 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800287c:	2b04      	cmp	r3, #4
 800287e:	d107      	bne.n	8002890 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	681a      	ldr	r2, [r3, #0]
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800288e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002890:	2301      	movs	r3, #1
 8002892:	e01a      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002894:	68fb      	ldr	r3, [r7, #12]
 8002896:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002898:	2b00      	cmp	r3, #0
 800289a:	d194      	bne.n	80027c6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800289c:	68fb      	ldr	r3, [r7, #12]
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	681a      	ldr	r2, [r3, #0]
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	681b      	ldr	r3, [r3, #0]
 80028a6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80028aa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80028ac:	68fb      	ldr	r3, [r7, #12]
 80028ae:	2220      	movs	r2, #32
 80028b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80028b4:	68fb      	ldr	r3, [r7, #12]
 80028b6:	2200      	movs	r2, #0
 80028b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80028bc:	68fb      	ldr	r3, [r7, #12]
 80028be:	2200      	movs	r2, #0
 80028c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80028c4:	2300      	movs	r3, #0
 80028c6:	e000      	b.n	80028ca <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80028c8:	2302      	movs	r3, #2
  }
}
 80028ca:	4618      	mov	r0, r3
 80028cc:	3718      	adds	r7, #24
 80028ce:	46bd      	mov	sp, r7
 80028d0:	bd80      	pop	{r7, pc}
 80028d2:	bf00      	nop
 80028d4:	00100002 	.word	0x00100002
 80028d8:	ffff0000 	.word	0xffff0000

080028dc <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80028dc:	b580      	push	{r7, lr}
 80028de:	b088      	sub	sp, #32
 80028e0:	af02      	add	r7, sp, #8
 80028e2:	60f8      	str	r0, [r7, #12]
 80028e4:	607a      	str	r2, [r7, #4]
 80028e6:	603b      	str	r3, [r7, #0]
 80028e8:	460b      	mov	r3, r1
 80028ea:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80028f0:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80028f2:	697b      	ldr	r3, [r7, #20]
 80028f4:	2b08      	cmp	r3, #8
 80028f6:	d006      	beq.n	8002906 <I2C_MasterRequestWrite+0x2a>
 80028f8:	697b      	ldr	r3, [r7, #20]
 80028fa:	2b01      	cmp	r3, #1
 80028fc:	d003      	beq.n	8002906 <I2C_MasterRequestWrite+0x2a>
 80028fe:	697b      	ldr	r3, [r7, #20]
 8002900:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002904:	d108      	bne.n	8002918 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002906:	68fb      	ldr	r3, [r7, #12]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	681a      	ldr	r2, [r3, #0]
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002914:	601a      	str	r2, [r3, #0]
 8002916:	e00b      	b.n	8002930 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291c:	2b12      	cmp	r3, #18
 800291e:	d107      	bne.n	8002930 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002920:	68fb      	ldr	r3, [r7, #12]
 8002922:	681b      	ldr	r3, [r3, #0]
 8002924:	681a      	ldr	r2, [r3, #0]
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800292e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002930:	683b      	ldr	r3, [r7, #0]
 8002932:	9300      	str	r3, [sp, #0]
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2200      	movs	r2, #0
 8002938:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800293c:	68f8      	ldr	r0, [r7, #12]
 800293e:	f000 f84f 	bl	80029e0 <I2C_WaitOnFlagUntilTimeout>
 8002942:	4603      	mov	r3, r0
 8002944:	2b00      	cmp	r3, #0
 8002946:	d00d      	beq.n	8002964 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	681b      	ldr	r3, [r3, #0]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002952:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002956:	d103      	bne.n	8002960 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002958:	68fb      	ldr	r3, [r7, #12]
 800295a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800295e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002960:	2303      	movs	r3, #3
 8002962:	e035      	b.n	80029d0 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002964:	68fb      	ldr	r3, [r7, #12]
 8002966:	691b      	ldr	r3, [r3, #16]
 8002968:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800296c:	d108      	bne.n	8002980 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800296e:	897b      	ldrh	r3, [r7, #10]
 8002970:	b2db      	uxtb	r3, r3
 8002972:	461a      	mov	r2, r3
 8002974:	68fb      	ldr	r3, [r7, #12]
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800297c:	611a      	str	r2, [r3, #16]
 800297e:	e01b      	b.n	80029b8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002980:	897b      	ldrh	r3, [r7, #10]
 8002982:	11db      	asrs	r3, r3, #7
 8002984:	b2db      	uxtb	r3, r3
 8002986:	f003 0306 	and.w	r3, r3, #6
 800298a:	b2db      	uxtb	r3, r3
 800298c:	f063 030f 	orn	r3, r3, #15
 8002990:	b2da      	uxtb	r2, r3
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002998:	683b      	ldr	r3, [r7, #0]
 800299a:	687a      	ldr	r2, [r7, #4]
 800299c:	490e      	ldr	r1, [pc, #56]	; (80029d8 <I2C_MasterRequestWrite+0xfc>)
 800299e:	68f8      	ldr	r0, [r7, #12]
 80029a0:	f000 f875 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029a4:	4603      	mov	r3, r0
 80029a6:	2b00      	cmp	r3, #0
 80029a8:	d001      	beq.n	80029ae <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80029aa:	2301      	movs	r3, #1
 80029ac:	e010      	b.n	80029d0 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80029ae:	897b      	ldrh	r3, [r7, #10]
 80029b0:	b2da      	uxtb	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80029b8:	683b      	ldr	r3, [r7, #0]
 80029ba:	687a      	ldr	r2, [r7, #4]
 80029bc:	4907      	ldr	r1, [pc, #28]	; (80029dc <I2C_MasterRequestWrite+0x100>)
 80029be:	68f8      	ldr	r0, [r7, #12]
 80029c0:	f000 f865 	bl	8002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80029c4:	4603      	mov	r3, r0
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d001      	beq.n	80029ce <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80029ca:	2301      	movs	r3, #1
 80029cc:	e000      	b.n	80029d0 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80029ce:	2300      	movs	r3, #0
}
 80029d0:	4618      	mov	r0, r3
 80029d2:	3718      	adds	r7, #24
 80029d4:	46bd      	mov	sp, r7
 80029d6:	bd80      	pop	{r7, pc}
 80029d8:	00010008 	.word	0x00010008
 80029dc:	00010002 	.word	0x00010002

080029e0 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80029e0:	b580      	push	{r7, lr}
 80029e2:	b084      	sub	sp, #16
 80029e4:	af00      	add	r7, sp, #0
 80029e6:	60f8      	str	r0, [r7, #12]
 80029e8:	60b9      	str	r1, [r7, #8]
 80029ea:	603b      	str	r3, [r7, #0]
 80029ec:	4613      	mov	r3, r2
 80029ee:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80029f0:	e025      	b.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80029f2:	683b      	ldr	r3, [r7, #0]
 80029f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029f8:	d021      	beq.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80029fa:	f7ff fa35 	bl	8001e68 <HAL_GetTick>
 80029fe:	4602      	mov	r2, r0
 8002a00:	69bb      	ldr	r3, [r7, #24]
 8002a02:	1ad3      	subs	r3, r2, r3
 8002a04:	683a      	ldr	r2, [r7, #0]
 8002a06:	429a      	cmp	r2, r3
 8002a08:	d302      	bcc.n	8002a10 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002a0a:	683b      	ldr	r3, [r7, #0]
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d116      	bne.n	8002a3e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002a10:	68fb      	ldr	r3, [r7, #12]
 8002a12:	2200      	movs	r2, #0
 8002a14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002a16:	68fb      	ldr	r3, [r7, #12]
 8002a18:	2220      	movs	r2, #32
 8002a1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002a1e:	68fb      	ldr	r3, [r7, #12]
 8002a20:	2200      	movs	r2, #0
 8002a22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2a:	f043 0220 	orr.w	r2, r3, #32
 8002a2e:	68fb      	ldr	r3, [r7, #12]
 8002a30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002a32:	68fb      	ldr	r3, [r7, #12]
 8002a34:	2200      	movs	r2, #0
 8002a36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002a3a:	2301      	movs	r3, #1
 8002a3c:	e023      	b.n	8002a86 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002a3e:	68bb      	ldr	r3, [r7, #8]
 8002a40:	0c1b      	lsrs	r3, r3, #16
 8002a42:	b2db      	uxtb	r3, r3
 8002a44:	2b01      	cmp	r3, #1
 8002a46:	d10d      	bne.n	8002a64 <I2C_WaitOnFlagUntilTimeout+0x84>
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	681b      	ldr	r3, [r3, #0]
 8002a4c:	695b      	ldr	r3, [r3, #20]
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	4013      	ands	r3, r2
 8002a54:	b29b      	uxth	r3, r3
 8002a56:	2b00      	cmp	r3, #0
 8002a58:	bf0c      	ite	eq
 8002a5a:	2301      	moveq	r3, #1
 8002a5c:	2300      	movne	r3, #0
 8002a5e:	b2db      	uxtb	r3, r3
 8002a60:	461a      	mov	r2, r3
 8002a62:	e00c      	b.n	8002a7e <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002a64:	68fb      	ldr	r3, [r7, #12]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	699b      	ldr	r3, [r3, #24]
 8002a6a:	43da      	mvns	r2, r3
 8002a6c:	68bb      	ldr	r3, [r7, #8]
 8002a6e:	4013      	ands	r3, r2
 8002a70:	b29b      	uxth	r3, r3
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	bf0c      	ite	eq
 8002a76:	2301      	moveq	r3, #1
 8002a78:	2300      	movne	r3, #0
 8002a7a:	b2db      	uxtb	r3, r3
 8002a7c:	461a      	mov	r2, r3
 8002a7e:	79fb      	ldrb	r3, [r7, #7]
 8002a80:	429a      	cmp	r2, r3
 8002a82:	d0b6      	beq.n	80029f2 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3710      	adds	r7, #16
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}

08002a8e <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002a8e:	b580      	push	{r7, lr}
 8002a90:	b084      	sub	sp, #16
 8002a92:	af00      	add	r7, sp, #0
 8002a94:	60f8      	str	r0, [r7, #12]
 8002a96:	60b9      	str	r1, [r7, #8]
 8002a98:	607a      	str	r2, [r7, #4]
 8002a9a:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002a9c:	e051      	b.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	681b      	ldr	r3, [r3, #0]
 8002aa2:	695b      	ldr	r3, [r3, #20]
 8002aa4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002aa8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002aac:	d123      	bne.n	8002af6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002aae:	68fb      	ldr	r3, [r7, #12]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	681a      	ldr	r2, [r3, #0]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002abc:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002abe:	68fb      	ldr	r3, [r7, #12]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002ac6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	2200      	movs	r2, #0
 8002acc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002ace:	68fb      	ldr	r3, [r7, #12]
 8002ad0:	2220      	movs	r2, #32
 8002ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	2200      	movs	r2, #0
 8002ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002ade:	68fb      	ldr	r3, [r7, #12]
 8002ae0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ae2:	f043 0204 	orr.w	r2, r3, #4
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002aea:	68fb      	ldr	r3, [r7, #12]
 8002aec:	2200      	movs	r2, #0
 8002aee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002af2:	2301      	movs	r3, #1
 8002af4:	e046      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002af6:	687b      	ldr	r3, [r7, #4]
 8002af8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002afc:	d021      	beq.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002afe:	f7ff f9b3 	bl	8001e68 <HAL_GetTick>
 8002b02:	4602      	mov	r2, r0
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	1ad3      	subs	r3, r2, r3
 8002b08:	687a      	ldr	r2, [r7, #4]
 8002b0a:	429a      	cmp	r2, r3
 8002b0c:	d302      	bcc.n	8002b14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d116      	bne.n	8002b42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	2200      	movs	r2, #0
 8002b18:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002b1a:	68fb      	ldr	r3, [r7, #12]
 8002b1c:	2220      	movs	r2, #32
 8002b1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	2200      	movs	r2, #0
 8002b26:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002b2a:	68fb      	ldr	r3, [r7, #12]
 8002b2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b2e:	f043 0220 	orr.w	r2, r3, #32
 8002b32:	68fb      	ldr	r3, [r7, #12]
 8002b34:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002b36:	68fb      	ldr	r3, [r7, #12]
 8002b38:	2200      	movs	r2, #0
 8002b3a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002b3e:	2301      	movs	r3, #1
 8002b40:	e020      	b.n	8002b84 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002b42:	68bb      	ldr	r3, [r7, #8]
 8002b44:	0c1b      	lsrs	r3, r3, #16
 8002b46:	b2db      	uxtb	r3, r3
 8002b48:	2b01      	cmp	r3, #1
 8002b4a:	d10c      	bne.n	8002b66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002b4c:	68fb      	ldr	r3, [r7, #12]
 8002b4e:	681b      	ldr	r3, [r3, #0]
 8002b50:	695b      	ldr	r3, [r3, #20]
 8002b52:	43da      	mvns	r2, r3
 8002b54:	68bb      	ldr	r3, [r7, #8]
 8002b56:	4013      	ands	r3, r2
 8002b58:	b29b      	uxth	r3, r3
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	bf14      	ite	ne
 8002b5e:	2301      	movne	r3, #1
 8002b60:	2300      	moveq	r3, #0
 8002b62:	b2db      	uxtb	r3, r3
 8002b64:	e00b      	b.n	8002b7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8002b66:	68fb      	ldr	r3, [r7, #12]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	43da      	mvns	r2, r3
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	4013      	ands	r3, r2
 8002b72:	b29b      	uxth	r3, r3
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	bf14      	ite	ne
 8002b78:	2301      	movne	r3, #1
 8002b7a:	2300      	moveq	r3, #0
 8002b7c:	b2db      	uxtb	r3, r3
 8002b7e:	2b00      	cmp	r3, #0
 8002b80:	d18d      	bne.n	8002a9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8002b82:	2300      	movs	r3, #0
}
 8002b84:	4618      	mov	r0, r3
 8002b86:	3710      	adds	r7, #16
 8002b88:	46bd      	mov	sp, r7
 8002b8a:	bd80      	pop	{r7, pc}

08002b8c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002b8c:	b580      	push	{r7, lr}
 8002b8e:	b084      	sub	sp, #16
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	60f8      	str	r0, [r7, #12]
 8002b94:	60b9      	str	r1, [r7, #8]
 8002b96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002b98:	e02d      	b.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002b9a:	68f8      	ldr	r0, [r7, #12]
 8002b9c:	f000 f878 	bl	8002c90 <I2C_IsAcknowledgeFailed>
 8002ba0:	4603      	mov	r3, r0
 8002ba2:	2b00      	cmp	r3, #0
 8002ba4:	d001      	beq.n	8002baa <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002ba6:	2301      	movs	r3, #1
 8002ba8:	e02d      	b.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002baa:	68bb      	ldr	r3, [r7, #8]
 8002bac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002bb0:	d021      	beq.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002bb2:	f7ff f959 	bl	8001e68 <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	68ba      	ldr	r2, [r7, #8]
 8002bbe:	429a      	cmp	r2, r3
 8002bc0:	d302      	bcc.n	8002bc8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8002bc2:	68bb      	ldr	r3, [r7, #8]
 8002bc4:	2b00      	cmp	r3, #0
 8002bc6:	d116      	bne.n	8002bf6 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002bc8:	68fb      	ldr	r3, [r7, #12]
 8002bca:	2200      	movs	r2, #0
 8002bcc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002bce:	68fb      	ldr	r3, [r7, #12]
 8002bd0:	2220      	movs	r2, #32
 8002bd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002be2:	f043 0220 	orr.w	r2, r3, #32
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002bea:	68fb      	ldr	r3, [r7, #12]
 8002bec:	2200      	movs	r2, #0
 8002bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002bf2:	2301      	movs	r3, #1
 8002bf4:	e007      	b.n	8002c06 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	695b      	ldr	r3, [r3, #20]
 8002bfc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c00:	2b80      	cmp	r3, #128	; 0x80
 8002c02:	d1ca      	bne.n	8002b9a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3710      	adds	r7, #16
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}

08002c0e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002c0e:	b580      	push	{r7, lr}
 8002c10:	b084      	sub	sp, #16
 8002c12:	af00      	add	r7, sp, #0
 8002c14:	60f8      	str	r0, [r7, #12]
 8002c16:	60b9      	str	r1, [r7, #8]
 8002c18:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c1a:	e02d      	b.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002c1c:	68f8      	ldr	r0, [r7, #12]
 8002c1e:	f000 f837 	bl	8002c90 <I2C_IsAcknowledgeFailed>
 8002c22:	4603      	mov	r3, r0
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d001      	beq.n	8002c2c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002c28:	2301      	movs	r3, #1
 8002c2a:	e02d      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002c2c:	68bb      	ldr	r3, [r7, #8]
 8002c2e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002c32:	d021      	beq.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002c34:	f7ff f918 	bl	8001e68 <HAL_GetTick>
 8002c38:	4602      	mov	r2, r0
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	1ad3      	subs	r3, r2, r3
 8002c3e:	68ba      	ldr	r2, [r7, #8]
 8002c40:	429a      	cmp	r2, r3
 8002c42:	d302      	bcc.n	8002c4a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8002c44:	68bb      	ldr	r3, [r7, #8]
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d116      	bne.n	8002c78 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	2200      	movs	r2, #0
 8002c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	2220      	movs	r2, #32
 8002c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002c58:	68fb      	ldr	r3, [r7, #12]
 8002c5a:	2200      	movs	r2, #0
 8002c5c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c64:	f043 0220 	orr.w	r2, r3, #32
 8002c68:	68fb      	ldr	r3, [r7, #12]
 8002c6a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	2200      	movs	r2, #0
 8002c70:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002c74:	2301      	movs	r3, #1
 8002c76:	e007      	b.n	8002c88 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695b      	ldr	r3, [r3, #20]
 8002c7e:	f003 0304 	and.w	r3, r3, #4
 8002c82:	2b04      	cmp	r3, #4
 8002c84:	d1ca      	bne.n	8002c1c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8002c86:	2300      	movs	r3, #0
}
 8002c88:	4618      	mov	r0, r3
 8002c8a:	3710      	adds	r7, #16
 8002c8c:	46bd      	mov	sp, r7
 8002c8e:	bd80      	pop	{r7, pc}

08002c90 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002c90:	b480      	push	{r7}
 8002c92:	b083      	sub	sp, #12
 8002c94:	af00      	add	r7, sp, #0
 8002c96:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	695b      	ldr	r3, [r3, #20]
 8002c9e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ca2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002ca6:	d11b      	bne.n	8002ce0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002cb0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	2200      	movs	r2, #0
 8002cb6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	2220      	movs	r2, #32
 8002cbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	2200      	movs	r2, #0
 8002cc4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ccc:	f043 0204 	orr.w	r2, r3, #4
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8002cdc:	2301      	movs	r3, #1
 8002cde:	e000      	b.n	8002ce2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8002ce0:	2300      	movs	r3, #0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	370c      	adds	r7, #12
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cec:	4770      	bx	lr
	...

08002cf0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002cf0:	b580      	push	{r7, lr}
 8002cf2:	b086      	sub	sp, #24
 8002cf4:	af00      	add	r7, sp, #0
 8002cf6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d101      	bne.n	8002d02 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
 8002d00:	e267      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0301 	and.w	r3, r3, #1
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d075      	beq.n	8002dfa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d0e:	4b88      	ldr	r3, [pc, #544]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d10:	689b      	ldr	r3, [r3, #8]
 8002d12:	f003 030c 	and.w	r3, r3, #12
 8002d16:	2b04      	cmp	r3, #4
 8002d18:	d00c      	beq.n	8002d34 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d1a:	4b85      	ldr	r3, [pc, #532]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d1c:	689b      	ldr	r3, [r3, #8]
 8002d1e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8002d22:	2b08      	cmp	r3, #8
 8002d24:	d112      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002d26:	4b82      	ldr	r3, [pc, #520]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002d2e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002d32:	d10b      	bne.n	8002d4c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002d34:	4b7e      	ldr	r3, [pc, #504]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d05b      	beq.n	8002df8 <HAL_RCC_OscConfig+0x108>
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	2b00      	cmp	r3, #0
 8002d46:	d157      	bne.n	8002df8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002d48:	2301      	movs	r3, #1
 8002d4a:	e242      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	685b      	ldr	r3, [r3, #4]
 8002d50:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002d54:	d106      	bne.n	8002d64 <HAL_RCC_OscConfig+0x74>
 8002d56:	4b76      	ldr	r3, [pc, #472]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4a75      	ldr	r2, [pc, #468]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d5c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d60:	6013      	str	r3, [r2, #0]
 8002d62:	e01d      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d64:	687b      	ldr	r3, [r7, #4]
 8002d66:	685b      	ldr	r3, [r3, #4]
 8002d68:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d6c:	d10c      	bne.n	8002d88 <HAL_RCC_OscConfig+0x98>
 8002d6e:	4b70      	ldr	r3, [pc, #448]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	4a6f      	ldr	r2, [pc, #444]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d74:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d78:	6013      	str	r3, [r2, #0]
 8002d7a:	4b6d      	ldr	r3, [pc, #436]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a6c      	ldr	r2, [pc, #432]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d80:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d84:	6013      	str	r3, [r2, #0]
 8002d86:	e00b      	b.n	8002da0 <HAL_RCC_OscConfig+0xb0>
 8002d88:	4b69      	ldr	r3, [pc, #420]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8a:	681b      	ldr	r3, [r3, #0]
 8002d8c:	4a68      	ldr	r2, [pc, #416]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d8e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d92:	6013      	str	r3, [r2, #0]
 8002d94:	4b66      	ldr	r3, [pc, #408]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d96:	681b      	ldr	r3, [r3, #0]
 8002d98:	4a65      	ldr	r2, [pc, #404]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002d9a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d9e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002da0:	687b      	ldr	r3, [r7, #4]
 8002da2:	685b      	ldr	r3, [r3, #4]
 8002da4:	2b00      	cmp	r3, #0
 8002da6:	d013      	beq.n	8002dd0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002da8:	f7ff f85e 	bl	8001e68 <HAL_GetTick>
 8002dac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dae:	e008      	b.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002db0:	f7ff f85a 	bl	8001e68 <HAL_GetTick>
 8002db4:	4602      	mov	r2, r0
 8002db6:	693b      	ldr	r3, [r7, #16]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	2b64      	cmp	r3, #100	; 0x64
 8002dbc:	d901      	bls.n	8002dc2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002dbe:	2303      	movs	r3, #3
 8002dc0:	e207      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002dc2:	4b5b      	ldr	r3, [pc, #364]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002dca:	2b00      	cmp	r3, #0
 8002dcc:	d0f0      	beq.n	8002db0 <HAL_RCC_OscConfig+0xc0>
 8002dce:	e014      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002dd0:	f7ff f84a 	bl	8001e68 <HAL_GetTick>
 8002dd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dd6:	e008      	b.n	8002dea <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002dd8:	f7ff f846 	bl	8001e68 <HAL_GetTick>
 8002ddc:	4602      	mov	r2, r0
 8002dde:	693b      	ldr	r3, [r7, #16]
 8002de0:	1ad3      	subs	r3, r2, r3
 8002de2:	2b64      	cmp	r3, #100	; 0x64
 8002de4:	d901      	bls.n	8002dea <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002de6:	2303      	movs	r3, #3
 8002de8:	e1f3      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002dea:	4b51      	ldr	r3, [pc, #324]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002dec:	681b      	ldr	r3, [r3, #0]
 8002dee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002df2:	2b00      	cmp	r3, #0
 8002df4:	d1f0      	bne.n	8002dd8 <HAL_RCC_OscConfig+0xe8>
 8002df6:	e000      	b.n	8002dfa <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002df8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	f003 0302 	and.w	r3, r3, #2
 8002e02:	2b00      	cmp	r3, #0
 8002e04:	d063      	beq.n	8002ece <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e06:	4b4a      	ldr	r3, [pc, #296]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e08:	689b      	ldr	r3, [r3, #8]
 8002e0a:	f003 030c 	and.w	r3, r3, #12
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d00b      	beq.n	8002e2a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e12:	4b47      	ldr	r3, [pc, #284]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e14:	689b      	ldr	r3, [r3, #8]
 8002e16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002e1a:	2b08      	cmp	r3, #8
 8002e1c:	d11c      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002e1e:	4b44      	ldr	r3, [pc, #272]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e20:	685b      	ldr	r3, [r3, #4]
 8002e22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d116      	bne.n	8002e58 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e2a:	4b41      	ldr	r3, [pc, #260]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e2c:	681b      	ldr	r3, [r3, #0]
 8002e2e:	f003 0302 	and.w	r3, r3, #2
 8002e32:	2b00      	cmp	r3, #0
 8002e34:	d005      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
 8002e36:	687b      	ldr	r3, [r7, #4]
 8002e38:	68db      	ldr	r3, [r3, #12]
 8002e3a:	2b01      	cmp	r3, #1
 8002e3c:	d001      	beq.n	8002e42 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002e3e:	2301      	movs	r3, #1
 8002e40:	e1c7      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e42:	4b3b      	ldr	r3, [pc, #236]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4a:	687b      	ldr	r3, [r7, #4]
 8002e4c:	691b      	ldr	r3, [r3, #16]
 8002e4e:	00db      	lsls	r3, r3, #3
 8002e50:	4937      	ldr	r1, [pc, #220]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e52:	4313      	orrs	r3, r2
 8002e54:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e56:	e03a      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	68db      	ldr	r3, [r3, #12]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	d020      	beq.n	8002ea2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e60:	4b34      	ldr	r3, [pc, #208]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002e62:	2201      	movs	r2, #1
 8002e64:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e66:	f7fe ffff 	bl	8001e68 <HAL_GetTick>
 8002e6a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e6c:	e008      	b.n	8002e80 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002e6e:	f7fe fffb 	bl	8001e68 <HAL_GetTick>
 8002e72:	4602      	mov	r2, r0
 8002e74:	693b      	ldr	r3, [r7, #16]
 8002e76:	1ad3      	subs	r3, r2, r3
 8002e78:	2b02      	cmp	r3, #2
 8002e7a:	d901      	bls.n	8002e80 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002e7c:	2303      	movs	r3, #3
 8002e7e:	e1a8      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e80:	4b2b      	ldr	r3, [pc, #172]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e82:	681b      	ldr	r3, [r3, #0]
 8002e84:	f003 0302 	and.w	r3, r3, #2
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d0f0      	beq.n	8002e6e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e8c:	4b28      	ldr	r3, [pc, #160]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	691b      	ldr	r3, [r3, #16]
 8002e98:	00db      	lsls	r3, r3, #3
 8002e9a:	4925      	ldr	r1, [pc, #148]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002e9c:	4313      	orrs	r3, r2
 8002e9e:	600b      	str	r3, [r1, #0]
 8002ea0:	e015      	b.n	8002ece <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002ea2:	4b24      	ldr	r3, [pc, #144]	; (8002f34 <HAL_RCC_OscConfig+0x244>)
 8002ea4:	2200      	movs	r2, #0
 8002ea6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ea8:	f7fe ffde 	bl	8001e68 <HAL_GetTick>
 8002eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002eae:	e008      	b.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002eb0:	f7fe ffda 	bl	8001e68 <HAL_GetTick>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	693b      	ldr	r3, [r7, #16]
 8002eb8:	1ad3      	subs	r3, r2, r3
 8002eba:	2b02      	cmp	r3, #2
 8002ebc:	d901      	bls.n	8002ec2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002ebe:	2303      	movs	r3, #3
 8002ec0:	e187      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ec2:	4b1b      	ldr	r3, [pc, #108]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002ec4:	681b      	ldr	r3, [r3, #0]
 8002ec6:	f003 0302 	and.w	r3, r3, #2
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d1f0      	bne.n	8002eb0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	f003 0308 	and.w	r3, r3, #8
 8002ed6:	2b00      	cmp	r3, #0
 8002ed8:	d036      	beq.n	8002f48 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8002eda:	687b      	ldr	r3, [r7, #4]
 8002edc:	695b      	ldr	r3, [r3, #20]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d016      	beq.n	8002f10 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ee2:	4b15      	ldr	r3, [pc, #84]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002ee4:	2201      	movs	r2, #1
 8002ee6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee8:	f7fe ffbe 	bl	8001e68 <HAL_GetTick>
 8002eec:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eee:	e008      	b.n	8002f02 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002ef0:	f7fe ffba 	bl	8001e68 <HAL_GetTick>
 8002ef4:	4602      	mov	r2, r0
 8002ef6:	693b      	ldr	r3, [r7, #16]
 8002ef8:	1ad3      	subs	r3, r2, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d901      	bls.n	8002f02 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002efe:	2303      	movs	r3, #3
 8002f00:	e167      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002f02:	4b0b      	ldr	r3, [pc, #44]	; (8002f30 <HAL_RCC_OscConfig+0x240>)
 8002f04:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f06:	f003 0302 	and.w	r3, r3, #2
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d0f0      	beq.n	8002ef0 <HAL_RCC_OscConfig+0x200>
 8002f0e:	e01b      	b.n	8002f48 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002f10:	4b09      	ldr	r3, [pc, #36]	; (8002f38 <HAL_RCC_OscConfig+0x248>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002f16:	f7fe ffa7 	bl	8001e68 <HAL_GetTick>
 8002f1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f1c:	e00e      	b.n	8002f3c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002f1e:	f7fe ffa3 	bl	8001e68 <HAL_GetTick>
 8002f22:	4602      	mov	r2, r0
 8002f24:	693b      	ldr	r3, [r7, #16]
 8002f26:	1ad3      	subs	r3, r2, r3
 8002f28:	2b02      	cmp	r3, #2
 8002f2a:	d907      	bls.n	8002f3c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002f2c:	2303      	movs	r3, #3
 8002f2e:	e150      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8002f30:	40023800 	.word	0x40023800
 8002f34:	42470000 	.word	0x42470000
 8002f38:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f3c:	4b88      	ldr	r3, [pc, #544]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f3e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f40:	f003 0302 	and.w	r3, r3, #2
 8002f44:	2b00      	cmp	r3, #0
 8002f46:	d1ea      	bne.n	8002f1e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f48:	687b      	ldr	r3, [r7, #4]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	f003 0304 	and.w	r3, r3, #4
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	f000 8097 	beq.w	8003084 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002f56:	2300      	movs	r3, #0
 8002f58:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f5a:	4b81      	ldr	r3, [pc, #516]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d10f      	bne.n	8002f86 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f66:	2300      	movs	r3, #0
 8002f68:	60bb      	str	r3, [r7, #8]
 8002f6a:	4b7d      	ldr	r3, [pc, #500]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	4a7c      	ldr	r2, [pc, #496]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f70:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f74:	6413      	str	r3, [r2, #64]	; 0x40
 8002f76:	4b7a      	ldr	r3, [pc, #488]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f7e:	60bb      	str	r3, [r7, #8]
 8002f80:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f82:	2301      	movs	r3, #1
 8002f84:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002f86:	4b77      	ldr	r3, [pc, #476]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f8e:	2b00      	cmp	r3, #0
 8002f90:	d118      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002f92:	4b74      	ldr	r3, [pc, #464]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f94:	681b      	ldr	r3, [r3, #0]
 8002f96:	4a73      	ldr	r2, [pc, #460]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002f98:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f9c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f9e:	f7fe ff63 	bl	8001e68 <HAL_GetTick>
 8002fa2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fa4:	e008      	b.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fa6:	f7fe ff5f 	bl	8001e68 <HAL_GetTick>
 8002faa:	4602      	mov	r2, r0
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	1ad3      	subs	r3, r2, r3
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d901      	bls.n	8002fb8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002fb4:	2303      	movs	r3, #3
 8002fb6:	e10c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fb8:	4b6a      	ldr	r3, [pc, #424]	; (8003164 <HAL_RCC_OscConfig+0x474>)
 8002fba:	681b      	ldr	r3, [r3, #0]
 8002fbc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d0f0      	beq.n	8002fa6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	689b      	ldr	r3, [r3, #8]
 8002fc8:	2b01      	cmp	r3, #1
 8002fca:	d106      	bne.n	8002fda <HAL_RCC_OscConfig+0x2ea>
 8002fcc:	4b64      	ldr	r3, [pc, #400]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a63      	ldr	r2, [pc, #396]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e01c      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	2b05      	cmp	r3, #5
 8002fe0:	d10c      	bne.n	8002ffc <HAL_RCC_OscConfig+0x30c>
 8002fe2:	4b5f      	ldr	r3, [pc, #380]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fe6:	4a5e      	ldr	r2, [pc, #376]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002fe8:	f043 0304 	orr.w	r3, r3, #4
 8002fec:	6713      	str	r3, [r2, #112]	; 0x70
 8002fee:	4b5c      	ldr	r3, [pc, #368]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ff2:	4a5b      	ldr	r2, [pc, #364]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ff4:	f043 0301 	orr.w	r3, r3, #1
 8002ff8:	6713      	str	r3, [r2, #112]	; 0x70
 8002ffa:	e00b      	b.n	8003014 <HAL_RCC_OscConfig+0x324>
 8002ffc:	4b58      	ldr	r3, [pc, #352]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8002ffe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003000:	4a57      	ldr	r2, [pc, #348]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003002:	f023 0301 	bic.w	r3, r3, #1
 8003006:	6713      	str	r3, [r2, #112]	; 0x70
 8003008:	4b55      	ldr	r3, [pc, #340]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800300c:	4a54      	ldr	r2, [pc, #336]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800300e:	f023 0304 	bic.w	r3, r3, #4
 8003012:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	689b      	ldr	r3, [r3, #8]
 8003018:	2b00      	cmp	r3, #0
 800301a:	d015      	beq.n	8003048 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800301c:	f7fe ff24 	bl	8001e68 <HAL_GetTick>
 8003020:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003022:	e00a      	b.n	800303a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003024:	f7fe ff20 	bl	8001e68 <HAL_GetTick>
 8003028:	4602      	mov	r2, r0
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	1ad3      	subs	r3, r2, r3
 800302e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003032:	4293      	cmp	r3, r2
 8003034:	d901      	bls.n	800303a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003036:	2303      	movs	r3, #3
 8003038:	e0cb      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800303a:	4b49      	ldr	r3, [pc, #292]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800303c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800303e:	f003 0302 	and.w	r3, r3, #2
 8003042:	2b00      	cmp	r3, #0
 8003044:	d0ee      	beq.n	8003024 <HAL_RCC_OscConfig+0x334>
 8003046:	e014      	b.n	8003072 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003048:	f7fe ff0e 	bl	8001e68 <HAL_GetTick>
 800304c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800304e:	e00a      	b.n	8003066 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003050:	f7fe ff0a 	bl	8001e68 <HAL_GetTick>
 8003054:	4602      	mov	r2, r0
 8003056:	693b      	ldr	r3, [r7, #16]
 8003058:	1ad3      	subs	r3, r2, r3
 800305a:	f241 3288 	movw	r2, #5000	; 0x1388
 800305e:	4293      	cmp	r3, r2
 8003060:	d901      	bls.n	8003066 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003062:	2303      	movs	r3, #3
 8003064:	e0b5      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003066:	4b3e      	ldr	r3, [pc, #248]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800306a:	f003 0302 	and.w	r3, r3, #2
 800306e:	2b00      	cmp	r3, #0
 8003070:	d1ee      	bne.n	8003050 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003072:	7dfb      	ldrb	r3, [r7, #23]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003078:	4b39      	ldr	r3, [pc, #228]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800307c:	4a38      	ldr	r2, [pc, #224]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800307e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003082:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	699b      	ldr	r3, [r3, #24]
 8003088:	2b00      	cmp	r3, #0
 800308a:	f000 80a1 	beq.w	80031d0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800308e:	4b34      	ldr	r3, [pc, #208]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003090:	689b      	ldr	r3, [r3, #8]
 8003092:	f003 030c 	and.w	r3, r3, #12
 8003096:	2b08      	cmp	r3, #8
 8003098:	d05c      	beq.n	8003154 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	699b      	ldr	r3, [r3, #24]
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d141      	bne.n	8003126 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80030a2:	4b31      	ldr	r3, [pc, #196]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030a4:	2200      	movs	r2, #0
 80030a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030a8:	f7fe fede 	bl	8001e68 <HAL_GetTick>
 80030ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030ae:	e008      	b.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80030b0:	f7fe feda 	bl	8001e68 <HAL_GetTick>
 80030b4:	4602      	mov	r2, r0
 80030b6:	693b      	ldr	r3, [r7, #16]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	2b02      	cmp	r3, #2
 80030bc:	d901      	bls.n	80030c2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80030be:	2303      	movs	r3, #3
 80030c0:	e087      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030c2:	4b27      	ldr	r3, [pc, #156]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d1f0      	bne.n	80030b0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	69da      	ldr	r2, [r3, #28]
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	6a1b      	ldr	r3, [r3, #32]
 80030d6:	431a      	orrs	r2, r3
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030dc:	019b      	lsls	r3, r3, #6
 80030de:	431a      	orrs	r2, r3
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030e4:	085b      	lsrs	r3, r3, #1
 80030e6:	3b01      	subs	r3, #1
 80030e8:	041b      	lsls	r3, r3, #16
 80030ea:	431a      	orrs	r2, r3
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030f0:	061b      	lsls	r3, r3, #24
 80030f2:	491b      	ldr	r1, [pc, #108]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 80030f4:	4313      	orrs	r3, r2
 80030f6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030f8:	4b1b      	ldr	r3, [pc, #108]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 80030fa:	2201      	movs	r2, #1
 80030fc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030fe:	f7fe feb3 	bl	8001e68 <HAL_GetTick>
 8003102:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003104:	e008      	b.n	8003118 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003106:	f7fe feaf 	bl	8001e68 <HAL_GetTick>
 800310a:	4602      	mov	r2, r0
 800310c:	693b      	ldr	r3, [r7, #16]
 800310e:	1ad3      	subs	r3, r2, r3
 8003110:	2b02      	cmp	r3, #2
 8003112:	d901      	bls.n	8003118 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003114:	2303      	movs	r3, #3
 8003116:	e05c      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003118:	4b11      	ldr	r3, [pc, #68]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003120:	2b00      	cmp	r3, #0
 8003122:	d0f0      	beq.n	8003106 <HAL_RCC_OscConfig+0x416>
 8003124:	e054      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003126:	4b10      	ldr	r3, [pc, #64]	; (8003168 <HAL_RCC_OscConfig+0x478>)
 8003128:	2200      	movs	r2, #0
 800312a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800312c:	f7fe fe9c 	bl	8001e68 <HAL_GetTick>
 8003130:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003132:	e008      	b.n	8003146 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003134:	f7fe fe98 	bl	8001e68 <HAL_GetTick>
 8003138:	4602      	mov	r2, r0
 800313a:	693b      	ldr	r3, [r7, #16]
 800313c:	1ad3      	subs	r3, r2, r3
 800313e:	2b02      	cmp	r3, #2
 8003140:	d901      	bls.n	8003146 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003142:	2303      	movs	r3, #3
 8003144:	e045      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003146:	4b06      	ldr	r3, [pc, #24]	; (8003160 <HAL_RCC_OscConfig+0x470>)
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800314e:	2b00      	cmp	r3, #0
 8003150:	d1f0      	bne.n	8003134 <HAL_RCC_OscConfig+0x444>
 8003152:	e03d      	b.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	2b01      	cmp	r3, #1
 800315a:	d107      	bne.n	800316c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800315c:	2301      	movs	r3, #1
 800315e:	e038      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
 8003160:	40023800 	.word	0x40023800
 8003164:	40007000 	.word	0x40007000
 8003168:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800316c:	4b1b      	ldr	r3, [pc, #108]	; (80031dc <HAL_RCC_OscConfig+0x4ec>)
 800316e:	685b      	ldr	r3, [r3, #4]
 8003170:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	699b      	ldr	r3, [r3, #24]
 8003176:	2b01      	cmp	r3, #1
 8003178:	d028      	beq.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800317a:	68fb      	ldr	r3, [r7, #12]
 800317c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003184:	429a      	cmp	r2, r3
 8003186:	d121      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003188:	68fb      	ldr	r3, [r7, #12]
 800318a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003192:	429a      	cmp	r2, r3
 8003194:	d11a      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800319c:	4013      	ands	r3, r2
 800319e:	687a      	ldr	r2, [r7, #4]
 80031a0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80031a2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80031a4:	4293      	cmp	r3, r2
 80031a6:	d111      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031b2:	085b      	lsrs	r3, r3, #1
 80031b4:	3b01      	subs	r3, #1
 80031b6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80031b8:	429a      	cmp	r2, r3
 80031ba:	d107      	bne.n	80031cc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031bc:	68fb      	ldr	r3, [r7, #12]
 80031be:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031c6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80031c8:	429a      	cmp	r2, r3
 80031ca:	d001      	beq.n	80031d0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80031cc:	2301      	movs	r3, #1
 80031ce:	e000      	b.n	80031d2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80031d0:	2300      	movs	r3, #0
}
 80031d2:	4618      	mov	r0, r3
 80031d4:	3718      	adds	r7, #24
 80031d6:	46bd      	mov	sp, r7
 80031d8:	bd80      	pop	{r7, pc}
 80031da:	bf00      	nop
 80031dc:	40023800 	.word	0x40023800

080031e0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031e0:	b580      	push	{r7, lr}
 80031e2:	b084      	sub	sp, #16
 80031e4:	af00      	add	r7, sp, #0
 80031e6:	6078      	str	r0, [r7, #4]
 80031e8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d101      	bne.n	80031f4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	e0cc      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80031f4:	4b68      	ldr	r3, [pc, #416]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f003 0307 	and.w	r3, r3, #7
 80031fc:	683a      	ldr	r2, [r7, #0]
 80031fe:	429a      	cmp	r2, r3
 8003200:	d90c      	bls.n	800321c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003202:	4b65      	ldr	r3, [pc, #404]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003204:	683a      	ldr	r2, [r7, #0]
 8003206:	b2d2      	uxtb	r2, r2
 8003208:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800320a:	4b63      	ldr	r3, [pc, #396]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f003 0307 	and.w	r3, r3, #7
 8003212:	683a      	ldr	r2, [r7, #0]
 8003214:	429a      	cmp	r2, r3
 8003216:	d001      	beq.n	800321c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003218:	2301      	movs	r3, #1
 800321a:	e0b8      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	681b      	ldr	r3, [r3, #0]
 8003220:	f003 0302 	and.w	r3, r3, #2
 8003224:	2b00      	cmp	r3, #0
 8003226:	d020      	beq.n	800326a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	f003 0304 	and.w	r3, r3, #4
 8003230:	2b00      	cmp	r3, #0
 8003232:	d005      	beq.n	8003240 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003234:	4b59      	ldr	r3, [pc, #356]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003236:	689b      	ldr	r3, [r3, #8]
 8003238:	4a58      	ldr	r2, [pc, #352]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800323a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800323e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	f003 0308 	and.w	r3, r3, #8
 8003248:	2b00      	cmp	r3, #0
 800324a:	d005      	beq.n	8003258 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800324c:	4b53      	ldr	r3, [pc, #332]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	4a52      	ldr	r2, [pc, #328]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003252:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003256:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003258:	4b50      	ldr	r3, [pc, #320]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800325a:	689b      	ldr	r3, [r3, #8]
 800325c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	689b      	ldr	r3, [r3, #8]
 8003264:	494d      	ldr	r1, [pc, #308]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003266:	4313      	orrs	r3, r2
 8003268:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d044      	beq.n	8003300 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	685b      	ldr	r3, [r3, #4]
 800327a:	2b01      	cmp	r3, #1
 800327c:	d107      	bne.n	800328e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327e:	4b47      	ldr	r3, [pc, #284]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003280:	681b      	ldr	r3, [r3, #0]
 8003282:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003286:	2b00      	cmp	r3, #0
 8003288:	d119      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800328a:	2301      	movs	r3, #1
 800328c:	e07f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	2b02      	cmp	r3, #2
 8003294:	d003      	beq.n	800329e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800329a:	2b03      	cmp	r3, #3
 800329c:	d107      	bne.n	80032ae <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800329e:	4b3f      	ldr	r3, [pc, #252]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032a0:	681b      	ldr	r3, [r3, #0]
 80032a2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80032a6:	2b00      	cmp	r3, #0
 80032a8:	d109      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032aa:	2301      	movs	r3, #1
 80032ac:	e06f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80032ae:	4b3b      	ldr	r3, [pc, #236]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	f003 0302 	and.w	r3, r3, #2
 80032b6:	2b00      	cmp	r3, #0
 80032b8:	d101      	bne.n	80032be <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80032ba:	2301      	movs	r3, #1
 80032bc:	e067      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032be:	4b37      	ldr	r3, [pc, #220]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032c0:	689b      	ldr	r3, [r3, #8]
 80032c2:	f023 0203 	bic.w	r2, r3, #3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	685b      	ldr	r3, [r3, #4]
 80032ca:	4934      	ldr	r1, [pc, #208]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032cc:	4313      	orrs	r3, r2
 80032ce:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80032d0:	f7fe fdca 	bl	8001e68 <HAL_GetTick>
 80032d4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	e00a      	b.n	80032ee <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032d8:	f7fe fdc6 	bl	8001e68 <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	68fb      	ldr	r3, [r7, #12]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	f241 3288 	movw	r2, #5000	; 0x1388
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d901      	bls.n	80032ee <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80032ea:	2303      	movs	r3, #3
 80032ec:	e04f      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032ee:	4b2b      	ldr	r3, [pc, #172]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 80032f0:	689b      	ldr	r3, [r3, #8]
 80032f2:	f003 020c 	and.w	r2, r3, #12
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	009b      	lsls	r3, r3, #2
 80032fc:	429a      	cmp	r2, r3
 80032fe:	d1eb      	bne.n	80032d8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	f003 0307 	and.w	r3, r3, #7
 8003308:	683a      	ldr	r2, [r7, #0]
 800330a:	429a      	cmp	r2, r3
 800330c:	d20c      	bcs.n	8003328 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800330e:	4b22      	ldr	r3, [pc, #136]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003310:	683a      	ldr	r2, [r7, #0]
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003316:	4b20      	ldr	r3, [pc, #128]	; (8003398 <HAL_RCC_ClockConfig+0x1b8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f003 0307 	and.w	r3, r3, #7
 800331e:	683a      	ldr	r2, [r7, #0]
 8003320:	429a      	cmp	r2, r3
 8003322:	d001      	beq.n	8003328 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003324:	2301      	movs	r3, #1
 8003326:	e032      	b.n	800338e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003328:	687b      	ldr	r3, [r7, #4]
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	f003 0304 	and.w	r3, r3, #4
 8003330:	2b00      	cmp	r3, #0
 8003332:	d008      	beq.n	8003346 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003334:	4b19      	ldr	r3, [pc, #100]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003336:	689b      	ldr	r3, [r3, #8]
 8003338:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68db      	ldr	r3, [r3, #12]
 8003340:	4916      	ldr	r1, [pc, #88]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003342:	4313      	orrs	r3, r2
 8003344:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0308 	and.w	r3, r3, #8
 800334e:	2b00      	cmp	r3, #0
 8003350:	d009      	beq.n	8003366 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003352:	4b12      	ldr	r3, [pc, #72]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003354:	689b      	ldr	r3, [r3, #8]
 8003356:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	691b      	ldr	r3, [r3, #16]
 800335e:	00db      	lsls	r3, r3, #3
 8003360:	490e      	ldr	r1, [pc, #56]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 8003362:	4313      	orrs	r3, r2
 8003364:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003366:	f000 f821 	bl	80033ac <HAL_RCC_GetSysClockFreq>
 800336a:	4602      	mov	r2, r0
 800336c:	4b0b      	ldr	r3, [pc, #44]	; (800339c <HAL_RCC_ClockConfig+0x1bc>)
 800336e:	689b      	ldr	r3, [r3, #8]
 8003370:	091b      	lsrs	r3, r3, #4
 8003372:	f003 030f 	and.w	r3, r3, #15
 8003376:	490a      	ldr	r1, [pc, #40]	; (80033a0 <HAL_RCC_ClockConfig+0x1c0>)
 8003378:	5ccb      	ldrb	r3, [r1, r3]
 800337a:	fa22 f303 	lsr.w	r3, r2, r3
 800337e:	4a09      	ldr	r2, [pc, #36]	; (80033a4 <HAL_RCC_ClockConfig+0x1c4>)
 8003380:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8003382:	4b09      	ldr	r3, [pc, #36]	; (80033a8 <HAL_RCC_ClockConfig+0x1c8>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fe fd2a 	bl	8001de0 <HAL_InitTick>

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3710      	adds	r7, #16
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
 8003396:	bf00      	nop
 8003398:	40023c00 	.word	0x40023c00
 800339c:	40023800 	.word	0x40023800
 80033a0:	08005294 	.word	0x08005294
 80033a4:	20001438 	.word	0x20001438
 80033a8:	2000143c 	.word	0x2000143c

080033ac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80033ac:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80033b0:	b094      	sub	sp, #80	; 0x50
 80033b2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80033b4:	2300      	movs	r3, #0
 80033b6:	647b      	str	r3, [r7, #68]	; 0x44
 80033b8:	2300      	movs	r3, #0
 80033ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80033bc:	2300      	movs	r3, #0
 80033be:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80033c0:	2300      	movs	r3, #0
 80033c2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033c4:	4b79      	ldr	r3, [pc, #484]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 030c 	and.w	r3, r3, #12
 80033cc:	2b08      	cmp	r3, #8
 80033ce:	d00d      	beq.n	80033ec <HAL_RCC_GetSysClockFreq+0x40>
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	f200 80e1 	bhi.w	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d002      	beq.n	80033e0 <HAL_RCC_GetSysClockFreq+0x34>
 80033da:	2b04      	cmp	r3, #4
 80033dc:	d003      	beq.n	80033e6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033de:	e0db      	b.n	8003598 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033e0:	4b73      	ldr	r3, [pc, #460]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 80033e2:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 80033e4:	e0db      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033e6:	4b73      	ldr	r3, [pc, #460]	; (80035b4 <HAL_RCC_GetSysClockFreq+0x208>)
 80033e8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80033ea:	e0d8      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033ec:	4b6f      	ldr	r3, [pc, #444]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033f4:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80033f6:	4b6d      	ldr	r3, [pc, #436]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033fe:	2b00      	cmp	r3, #0
 8003400:	d063      	beq.n	80034ca <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003402:	4b6a      	ldr	r3, [pc, #424]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 8003404:	685b      	ldr	r3, [r3, #4]
 8003406:	099b      	lsrs	r3, r3, #6
 8003408:	2200      	movs	r2, #0
 800340a:	63bb      	str	r3, [r7, #56]	; 0x38
 800340c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800340e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003410:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003414:	633b      	str	r3, [r7, #48]	; 0x30
 8003416:	2300      	movs	r3, #0
 8003418:	637b      	str	r3, [r7, #52]	; 0x34
 800341a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800341e:	4622      	mov	r2, r4
 8003420:	462b      	mov	r3, r5
 8003422:	f04f 0000 	mov.w	r0, #0
 8003426:	f04f 0100 	mov.w	r1, #0
 800342a:	0159      	lsls	r1, r3, #5
 800342c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003430:	0150      	lsls	r0, r2, #5
 8003432:	4602      	mov	r2, r0
 8003434:	460b      	mov	r3, r1
 8003436:	4621      	mov	r1, r4
 8003438:	1a51      	subs	r1, r2, r1
 800343a:	6139      	str	r1, [r7, #16]
 800343c:	4629      	mov	r1, r5
 800343e:	eb63 0301 	sbc.w	r3, r3, r1
 8003442:	617b      	str	r3, [r7, #20]
 8003444:	f04f 0200 	mov.w	r2, #0
 8003448:	f04f 0300 	mov.w	r3, #0
 800344c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003450:	4659      	mov	r1, fp
 8003452:	018b      	lsls	r3, r1, #6
 8003454:	4651      	mov	r1, sl
 8003456:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800345a:	4651      	mov	r1, sl
 800345c:	018a      	lsls	r2, r1, #6
 800345e:	4651      	mov	r1, sl
 8003460:	ebb2 0801 	subs.w	r8, r2, r1
 8003464:	4659      	mov	r1, fp
 8003466:	eb63 0901 	sbc.w	r9, r3, r1
 800346a:	f04f 0200 	mov.w	r2, #0
 800346e:	f04f 0300 	mov.w	r3, #0
 8003472:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003476:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800347a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800347e:	4690      	mov	r8, r2
 8003480:	4699      	mov	r9, r3
 8003482:	4623      	mov	r3, r4
 8003484:	eb18 0303 	adds.w	r3, r8, r3
 8003488:	60bb      	str	r3, [r7, #8]
 800348a:	462b      	mov	r3, r5
 800348c:	eb49 0303 	adc.w	r3, r9, r3
 8003490:	60fb      	str	r3, [r7, #12]
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800349e:	4629      	mov	r1, r5
 80034a0:	024b      	lsls	r3, r1, #9
 80034a2:	4621      	mov	r1, r4
 80034a4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80034a8:	4621      	mov	r1, r4
 80034aa:	024a      	lsls	r2, r1, #9
 80034ac:	4610      	mov	r0, r2
 80034ae:	4619      	mov	r1, r3
 80034b0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80034b2:	2200      	movs	r2, #0
 80034b4:	62bb      	str	r3, [r7, #40]	; 0x28
 80034b6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80034b8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80034bc:	f7fc fe92 	bl	80001e4 <__aeabi_uldivmod>
 80034c0:	4602      	mov	r2, r0
 80034c2:	460b      	mov	r3, r1
 80034c4:	4613      	mov	r3, r2
 80034c6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80034c8:	e058      	b.n	800357c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80034ca:	4b38      	ldr	r3, [pc, #224]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	099b      	lsrs	r3, r3, #6
 80034d0:	2200      	movs	r2, #0
 80034d2:	4618      	mov	r0, r3
 80034d4:	4611      	mov	r1, r2
 80034d6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80034da:	623b      	str	r3, [r7, #32]
 80034dc:	2300      	movs	r3, #0
 80034de:	627b      	str	r3, [r7, #36]	; 0x24
 80034e0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80034e4:	4642      	mov	r2, r8
 80034e6:	464b      	mov	r3, r9
 80034e8:	f04f 0000 	mov.w	r0, #0
 80034ec:	f04f 0100 	mov.w	r1, #0
 80034f0:	0159      	lsls	r1, r3, #5
 80034f2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80034f6:	0150      	lsls	r0, r2, #5
 80034f8:	4602      	mov	r2, r0
 80034fa:	460b      	mov	r3, r1
 80034fc:	4641      	mov	r1, r8
 80034fe:	ebb2 0a01 	subs.w	sl, r2, r1
 8003502:	4649      	mov	r1, r9
 8003504:	eb63 0b01 	sbc.w	fp, r3, r1
 8003508:	f04f 0200 	mov.w	r2, #0
 800350c:	f04f 0300 	mov.w	r3, #0
 8003510:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003514:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003518:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800351c:	ebb2 040a 	subs.w	r4, r2, sl
 8003520:	eb63 050b 	sbc.w	r5, r3, fp
 8003524:	f04f 0200 	mov.w	r2, #0
 8003528:	f04f 0300 	mov.w	r3, #0
 800352c:	00eb      	lsls	r3, r5, #3
 800352e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003532:	00e2      	lsls	r2, r4, #3
 8003534:	4614      	mov	r4, r2
 8003536:	461d      	mov	r5, r3
 8003538:	4643      	mov	r3, r8
 800353a:	18e3      	adds	r3, r4, r3
 800353c:	603b      	str	r3, [r7, #0]
 800353e:	464b      	mov	r3, r9
 8003540:	eb45 0303 	adc.w	r3, r5, r3
 8003544:	607b      	str	r3, [r7, #4]
 8003546:	f04f 0200 	mov.w	r2, #0
 800354a:	f04f 0300 	mov.w	r3, #0
 800354e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003552:	4629      	mov	r1, r5
 8003554:	028b      	lsls	r3, r1, #10
 8003556:	4621      	mov	r1, r4
 8003558:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800355c:	4621      	mov	r1, r4
 800355e:	028a      	lsls	r2, r1, #10
 8003560:	4610      	mov	r0, r2
 8003562:	4619      	mov	r1, r3
 8003564:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003566:	2200      	movs	r2, #0
 8003568:	61bb      	str	r3, [r7, #24]
 800356a:	61fa      	str	r2, [r7, #28]
 800356c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003570:	f7fc fe38 	bl	80001e4 <__aeabi_uldivmod>
 8003574:	4602      	mov	r2, r0
 8003576:	460b      	mov	r3, r1
 8003578:	4613      	mov	r3, r2
 800357a:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800357c:	4b0b      	ldr	r3, [pc, #44]	; (80035ac <HAL_RCC_GetSysClockFreq+0x200>)
 800357e:	685b      	ldr	r3, [r3, #4]
 8003580:	0c1b      	lsrs	r3, r3, #16
 8003582:	f003 0303 	and.w	r3, r3, #3
 8003586:	3301      	adds	r3, #1
 8003588:	005b      	lsls	r3, r3, #1
 800358a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 800358c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800358e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003590:	fbb2 f3f3 	udiv	r3, r2, r3
 8003594:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003596:	e002      	b.n	800359e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003598:	4b05      	ldr	r3, [pc, #20]	; (80035b0 <HAL_RCC_GetSysClockFreq+0x204>)
 800359a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800359c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800359e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80035a0:	4618      	mov	r0, r3
 80035a2:	3750      	adds	r7, #80	; 0x50
 80035a4:	46bd      	mov	sp, r7
 80035a6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80035aa:	bf00      	nop
 80035ac:	40023800 	.word	0x40023800
 80035b0:	00f42400 	.word	0x00f42400
 80035b4:	007a1200 	.word	0x007a1200

080035b8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80035bc:	4b03      	ldr	r3, [pc, #12]	; (80035cc <HAL_RCC_GetHCLKFreq+0x14>)
 80035be:	681b      	ldr	r3, [r3, #0]
}
 80035c0:	4618      	mov	r0, r3
 80035c2:	46bd      	mov	sp, r7
 80035c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035c8:	4770      	bx	lr
 80035ca:	bf00      	nop
 80035cc:	20001438 	.word	0x20001438

080035d0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80035d0:	b580      	push	{r7, lr}
 80035d2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80035d4:	f7ff fff0 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 80035d8:	4602      	mov	r2, r0
 80035da:	4b05      	ldr	r3, [pc, #20]	; (80035f0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80035dc:	689b      	ldr	r3, [r3, #8]
 80035de:	0a9b      	lsrs	r3, r3, #10
 80035e0:	f003 0307 	and.w	r3, r3, #7
 80035e4:	4903      	ldr	r1, [pc, #12]	; (80035f4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80035e6:	5ccb      	ldrb	r3, [r1, r3]
 80035e8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035ec:	4618      	mov	r0, r3
 80035ee:	bd80      	pop	{r7, pc}
 80035f0:	40023800 	.word	0x40023800
 80035f4:	080052a4 	.word	0x080052a4

080035f8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80035fc:	f7ff ffdc 	bl	80035b8 <HAL_RCC_GetHCLKFreq>
 8003600:	4602      	mov	r2, r0
 8003602:	4b05      	ldr	r3, [pc, #20]	; (8003618 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003604:	689b      	ldr	r3, [r3, #8]
 8003606:	0b5b      	lsrs	r3, r3, #13
 8003608:	f003 0307 	and.w	r3, r3, #7
 800360c:	4903      	ldr	r1, [pc, #12]	; (800361c <HAL_RCC_GetPCLK2Freq+0x24>)
 800360e:	5ccb      	ldrb	r3, [r1, r3]
 8003610:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003614:	4618      	mov	r0, r3
 8003616:	bd80      	pop	{r7, pc}
 8003618:	40023800 	.word	0x40023800
 800361c:	080052a4 	.word	0x080052a4

08003620 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003620:	b580      	push	{r7, lr}
 8003622:	b082      	sub	sp, #8
 8003624:	af00      	add	r7, sp, #0
 8003626:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	2b00      	cmp	r3, #0
 800362c:	d101      	bne.n	8003632 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800362e:	2301      	movs	r3, #1
 8003630:	e07b      	b.n	800372a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003636:	2b00      	cmp	r3, #0
 8003638:	d108      	bne.n	800364c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	685b      	ldr	r3, [r3, #4]
 800363e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003642:	d009      	beq.n	8003658 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	61da      	str	r2, [r3, #28]
 800364a:	e005      	b.n	8003658 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	2200      	movs	r2, #0
 8003656:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	2200      	movs	r2, #0
 800365c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800365e:	687b      	ldr	r3, [r7, #4]
 8003660:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003664:	b2db      	uxtb	r3, r3
 8003666:	2b00      	cmp	r3, #0
 8003668:	d106      	bne.n	8003678 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800366a:	687b      	ldr	r3, [r7, #4]
 800366c:	2200      	movs	r2, #0
 800366e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003672:	6878      	ldr	r0, [r7, #4]
 8003674:	f7fe f9fe 	bl	8001a74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	2202      	movs	r2, #2
 800367c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	681a      	ldr	r2, [r3, #0]
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	681b      	ldr	r3, [r3, #0]
 800368a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800368e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	685b      	ldr	r3, [r3, #4]
 8003694:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	689b      	ldr	r3, [r3, #8]
 800369c:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80036a0:	431a      	orrs	r2, r3
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80036aa:	431a      	orrs	r2, r3
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	691b      	ldr	r3, [r3, #16]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	431a      	orrs	r2, r3
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	695b      	ldr	r3, [r3, #20]
 80036ba:	f003 0301 	and.w	r3, r3, #1
 80036be:	431a      	orrs	r2, r3
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	699b      	ldr	r3, [r3, #24]
 80036c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80036c8:	431a      	orrs	r2, r3
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	69db      	ldr	r3, [r3, #28]
 80036ce:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80036d2:	431a      	orrs	r2, r3
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	6a1b      	ldr	r3, [r3, #32]
 80036d8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80036dc:	ea42 0103 	orr.w	r1, r2, r3
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80036e4:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	430a      	orrs	r2, r1
 80036ee:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	699b      	ldr	r3, [r3, #24]
 80036f4:	0c1b      	lsrs	r3, r3, #16
 80036f6:	f003 0104 	and.w	r1, r3, #4
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036fe:	f003 0210 	and.w	r2, r3, #16
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	430a      	orrs	r2, r1
 8003708:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	681b      	ldr	r3, [r3, #0]
 800370e:	69da      	ldr	r2, [r3, #28]
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003718:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	2200      	movs	r2, #0
 800371e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	2201      	movs	r2, #1
 8003724:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003728:	2300      	movs	r3, #0
}
 800372a:	4618      	mov	r0, r3
 800372c:	3708      	adds	r7, #8
 800372e:	46bd      	mov	sp, r7
 8003730:	bd80      	pop	{r7, pc}

08003732 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003732:	b580      	push	{r7, lr}
 8003734:	b088      	sub	sp, #32
 8003736:	af00      	add	r7, sp, #0
 8003738:	60f8      	str	r0, [r7, #12]
 800373a:	60b9      	str	r1, [r7, #8]
 800373c:	603b      	str	r3, [r7, #0]
 800373e:	4613      	mov	r3, r2
 8003740:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003742:	2300      	movs	r3, #0
 8003744:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003746:	68fb      	ldr	r3, [r7, #12]
 8003748:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800374c:	2b01      	cmp	r3, #1
 800374e:	d101      	bne.n	8003754 <HAL_SPI_Transmit+0x22>
 8003750:	2302      	movs	r3, #2
 8003752:	e126      	b.n	80039a2 <HAL_SPI_Transmit+0x270>
 8003754:	68fb      	ldr	r3, [r7, #12]
 8003756:	2201      	movs	r2, #1
 8003758:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800375c:	f7fe fb84 	bl	8001e68 <HAL_GetTick>
 8003760:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003762:	88fb      	ldrh	r3, [r7, #6]
 8003764:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003766:	68fb      	ldr	r3, [r7, #12]
 8003768:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800376c:	b2db      	uxtb	r3, r3
 800376e:	2b01      	cmp	r3, #1
 8003770:	d002      	beq.n	8003778 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003772:	2302      	movs	r3, #2
 8003774:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003776:	e10b      	b.n	8003990 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003778:	68bb      	ldr	r3, [r7, #8]
 800377a:	2b00      	cmp	r3, #0
 800377c:	d002      	beq.n	8003784 <HAL_SPI_Transmit+0x52>
 800377e:	88fb      	ldrh	r3, [r7, #6]
 8003780:	2b00      	cmp	r3, #0
 8003782:	d102      	bne.n	800378a <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003784:	2301      	movs	r3, #1
 8003786:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003788:	e102      	b.n	8003990 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800378a:	68fb      	ldr	r3, [r7, #12]
 800378c:	2203      	movs	r2, #3
 800378e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003792:	68fb      	ldr	r3, [r7, #12]
 8003794:	2200      	movs	r2, #0
 8003796:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003798:	68fb      	ldr	r3, [r7, #12]
 800379a:	68ba      	ldr	r2, [r7, #8]
 800379c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	88fa      	ldrh	r2, [r7, #6]
 80037a2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	88fa      	ldrh	r2, [r7, #6]
 80037a8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	2200      	movs	r2, #0
 80037ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	2200      	movs	r2, #0
 80037b4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2200      	movs	r2, #0
 80037ba:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	2200      	movs	r2, #0
 80037c6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80037d0:	d10f      	bne.n	80037f2 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80037d2:	68fb      	ldr	r3, [r7, #12]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	681a      	ldr	r2, [r3, #0]
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80037e0:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	681a      	ldr	r2, [r3, #0]
 80037e8:	68fb      	ldr	r3, [r7, #12]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037f0:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80037fc:	2b40      	cmp	r3, #64	; 0x40
 80037fe:	d007      	beq.n	8003810 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	681b      	ldr	r3, [r3, #0]
 8003804:	681a      	ldr	r2, [r3, #0]
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800380e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	68db      	ldr	r3, [r3, #12]
 8003814:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003818:	d14b      	bne.n	80038b2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	685b      	ldr	r3, [r3, #4]
 800381e:	2b00      	cmp	r3, #0
 8003820:	d002      	beq.n	8003828 <HAL_SPI_Transmit+0xf6>
 8003822:	8afb      	ldrh	r3, [r7, #22]
 8003824:	2b01      	cmp	r3, #1
 8003826:	d13e      	bne.n	80038a6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800382c:	881a      	ldrh	r2, [r3, #0]
 800382e:	68fb      	ldr	r3, [r7, #12]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003838:	1c9a      	adds	r2, r3, #2
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003842:	b29b      	uxth	r3, r3
 8003844:	3b01      	subs	r3, #1
 8003846:	b29a      	uxth	r2, r3
 8003848:	68fb      	ldr	r3, [r7, #12]
 800384a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800384c:	e02b      	b.n	80038a6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	689b      	ldr	r3, [r3, #8]
 8003854:	f003 0302 	and.w	r3, r3, #2
 8003858:	2b02      	cmp	r3, #2
 800385a:	d112      	bne.n	8003882 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003860:	881a      	ldrh	r2, [r3, #0]
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	681b      	ldr	r3, [r3, #0]
 8003866:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003868:	68fb      	ldr	r3, [r7, #12]
 800386a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386c:	1c9a      	adds	r2, r3, #2
 800386e:	68fb      	ldr	r3, [r7, #12]
 8003870:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003872:	68fb      	ldr	r3, [r7, #12]
 8003874:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003876:	b29b      	uxth	r3, r3
 8003878:	3b01      	subs	r3, #1
 800387a:	b29a      	uxth	r2, r3
 800387c:	68fb      	ldr	r3, [r7, #12]
 800387e:	86da      	strh	r2, [r3, #54]	; 0x36
 8003880:	e011      	b.n	80038a6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003882:	f7fe faf1 	bl	8001e68 <HAL_GetTick>
 8003886:	4602      	mov	r2, r0
 8003888:	69bb      	ldr	r3, [r7, #24]
 800388a:	1ad3      	subs	r3, r2, r3
 800388c:	683a      	ldr	r2, [r7, #0]
 800388e:	429a      	cmp	r2, r3
 8003890:	d803      	bhi.n	800389a <HAL_SPI_Transmit+0x168>
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003898:	d102      	bne.n	80038a0 <HAL_SPI_Transmit+0x16e>
 800389a:	683b      	ldr	r3, [r7, #0]
 800389c:	2b00      	cmp	r3, #0
 800389e:	d102      	bne.n	80038a6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80038a0:	2303      	movs	r3, #3
 80038a2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80038a4:	e074      	b.n	8003990 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	2b00      	cmp	r3, #0
 80038ae:	d1ce      	bne.n	800384e <HAL_SPI_Transmit+0x11c>
 80038b0:	e04c      	b.n	800394c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d002      	beq.n	80038c0 <HAL_SPI_Transmit+0x18e>
 80038ba:	8afb      	ldrh	r3, [r7, #22]
 80038bc:	2b01      	cmp	r3, #1
 80038be:	d140      	bne.n	8003942 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	330c      	adds	r3, #12
 80038ca:	7812      	ldrb	r2, [r2, #0]
 80038cc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	1c5a      	adds	r2, r3, #1
 80038d4:	68fb      	ldr	r3, [r7, #12]
 80038d6:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80038d8:	68fb      	ldr	r3, [r7, #12]
 80038da:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80038dc:	b29b      	uxth	r3, r3
 80038de:	3b01      	subs	r3, #1
 80038e0:	b29a      	uxth	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80038e6:	e02c      	b.n	8003942 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b02      	cmp	r3, #2
 80038f4:	d113      	bne.n	800391e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80038f6:	68fb      	ldr	r3, [r7, #12]
 80038f8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	681b      	ldr	r3, [r3, #0]
 80038fe:	330c      	adds	r3, #12
 8003900:	7812      	ldrb	r2, [r2, #0]
 8003902:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003904:	68fb      	ldr	r3, [r7, #12]
 8003906:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003908:	1c5a      	adds	r2, r3, #1
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003912:	b29b      	uxth	r3, r3
 8003914:	3b01      	subs	r3, #1
 8003916:	b29a      	uxth	r2, r3
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	86da      	strh	r2, [r3, #54]	; 0x36
 800391c:	e011      	b.n	8003942 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800391e:	f7fe faa3 	bl	8001e68 <HAL_GetTick>
 8003922:	4602      	mov	r2, r0
 8003924:	69bb      	ldr	r3, [r7, #24]
 8003926:	1ad3      	subs	r3, r2, r3
 8003928:	683a      	ldr	r2, [r7, #0]
 800392a:	429a      	cmp	r2, r3
 800392c:	d803      	bhi.n	8003936 <HAL_SPI_Transmit+0x204>
 800392e:	683b      	ldr	r3, [r7, #0]
 8003930:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003934:	d102      	bne.n	800393c <HAL_SPI_Transmit+0x20a>
 8003936:	683b      	ldr	r3, [r7, #0]
 8003938:	2b00      	cmp	r3, #0
 800393a:	d102      	bne.n	8003942 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800393c:	2303      	movs	r3, #3
 800393e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003940:	e026      	b.n	8003990 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003942:	68fb      	ldr	r3, [r7, #12]
 8003944:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003946:	b29b      	uxth	r3, r3
 8003948:	2b00      	cmp	r3, #0
 800394a:	d1cd      	bne.n	80038e8 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800394c:	69ba      	ldr	r2, [r7, #24]
 800394e:	6839      	ldr	r1, [r7, #0]
 8003950:	68f8      	ldr	r0, [r7, #12]
 8003952:	f000 f8b3 	bl	8003abc <SPI_EndRxTxTransaction>
 8003956:	4603      	mov	r3, r0
 8003958:	2b00      	cmp	r3, #0
 800395a:	d002      	beq.n	8003962 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	2220      	movs	r2, #32
 8003960:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	689b      	ldr	r3, [r3, #8]
 8003966:	2b00      	cmp	r3, #0
 8003968:	d10a      	bne.n	8003980 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	68db      	ldr	r3, [r3, #12]
 8003974:	613b      	str	r3, [r7, #16]
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	689b      	ldr	r3, [r3, #8]
 800397c:	613b      	str	r3, [r7, #16]
 800397e:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003984:	2b00      	cmp	r3, #0
 8003986:	d002      	beq.n	800398e <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	77fb      	strb	r3, [r7, #31]
 800398c:	e000      	b.n	8003990 <HAL_SPI_Transmit+0x25e>
  }

error:
 800398e:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	2201      	movs	r2, #1
 8003994:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	2200      	movs	r2, #0
 800399c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80039a0:	7ffb      	ldrb	r3, [r7, #31]
}
 80039a2:	4618      	mov	r0, r3
 80039a4:	3720      	adds	r7, #32
 80039a6:	46bd      	mov	sp, r7
 80039a8:	bd80      	pop	{r7, pc}
	...

080039ac <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80039ac:	b580      	push	{r7, lr}
 80039ae:	b088      	sub	sp, #32
 80039b0:	af00      	add	r7, sp, #0
 80039b2:	60f8      	str	r0, [r7, #12]
 80039b4:	60b9      	str	r1, [r7, #8]
 80039b6:	603b      	str	r3, [r7, #0]
 80039b8:	4613      	mov	r3, r2
 80039ba:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80039bc:	f7fe fa54 	bl	8001e68 <HAL_GetTick>
 80039c0:	4602      	mov	r2, r0
 80039c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80039c4:	1a9b      	subs	r3, r3, r2
 80039c6:	683a      	ldr	r2, [r7, #0]
 80039c8:	4413      	add	r3, r2
 80039ca:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80039cc:	f7fe fa4c 	bl	8001e68 <HAL_GetTick>
 80039d0:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80039d2:	4b39      	ldr	r3, [pc, #228]	; (8003ab8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80039d4:	681b      	ldr	r3, [r3, #0]
 80039d6:	015b      	lsls	r3, r3, #5
 80039d8:	0d1b      	lsrs	r3, r3, #20
 80039da:	69fa      	ldr	r2, [r7, #28]
 80039dc:	fb02 f303 	mul.w	r3, r2, r3
 80039e0:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039e2:	e054      	b.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80039e4:	683b      	ldr	r3, [r7, #0]
 80039e6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039ea:	d050      	beq.n	8003a8e <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80039ec:	f7fe fa3c 	bl	8001e68 <HAL_GetTick>
 80039f0:	4602      	mov	r2, r0
 80039f2:	69bb      	ldr	r3, [r7, #24]
 80039f4:	1ad3      	subs	r3, r2, r3
 80039f6:	69fa      	ldr	r2, [r7, #28]
 80039f8:	429a      	cmp	r2, r3
 80039fa:	d902      	bls.n	8003a02 <SPI_WaitFlagStateUntilTimeout+0x56>
 80039fc:	69fb      	ldr	r3, [r7, #28]
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d13d      	bne.n	8003a7e <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	685a      	ldr	r2, [r3, #4]
 8003a08:	68fb      	ldr	r3, [r7, #12]
 8003a0a:	681b      	ldr	r3, [r3, #0]
 8003a0c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003a10:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	685b      	ldr	r3, [r3, #4]
 8003a16:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a1a:	d111      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003a1c:	68fb      	ldr	r3, [r7, #12]
 8003a1e:	689b      	ldr	r3, [r3, #8]
 8003a20:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003a24:	d004      	beq.n	8003a30 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003a2e:	d107      	bne.n	8003a40 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	681b      	ldr	r3, [r3, #0]
 8003a34:	681a      	ldr	r2, [r3, #0]
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a3e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a44:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003a48:	d10f      	bne.n	8003a6a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003a4a:	68fb      	ldr	r3, [r7, #12]
 8003a4c:	681b      	ldr	r3, [r3, #0]
 8003a4e:	681a      	ldr	r2, [r3, #0]
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	681a      	ldr	r2, [r3, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003a68:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	2201      	movs	r2, #1
 8003a6e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	2200      	movs	r2, #0
 8003a76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003a7a:	2303      	movs	r3, #3
 8003a7c:	e017      	b.n	8003aae <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003a7e:	697b      	ldr	r3, [r7, #20]
 8003a80:	2b00      	cmp	r3, #0
 8003a82:	d101      	bne.n	8003a88 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003a84:	2300      	movs	r3, #0
 8003a86:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003a88:	697b      	ldr	r3, [r7, #20]
 8003a8a:	3b01      	subs	r3, #1
 8003a8c:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003a8e:	68fb      	ldr	r3, [r7, #12]
 8003a90:	681b      	ldr	r3, [r3, #0]
 8003a92:	689a      	ldr	r2, [r3, #8]
 8003a94:	68bb      	ldr	r3, [r7, #8]
 8003a96:	4013      	ands	r3, r2
 8003a98:	68ba      	ldr	r2, [r7, #8]
 8003a9a:	429a      	cmp	r2, r3
 8003a9c:	bf0c      	ite	eq
 8003a9e:	2301      	moveq	r3, #1
 8003aa0:	2300      	movne	r3, #0
 8003aa2:	b2db      	uxtb	r3, r3
 8003aa4:	461a      	mov	r2, r3
 8003aa6:	79fb      	ldrb	r3, [r7, #7]
 8003aa8:	429a      	cmp	r2, r3
 8003aaa:	d19b      	bne.n	80039e4 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003aac:	2300      	movs	r3, #0
}
 8003aae:	4618      	mov	r0, r3
 8003ab0:	3720      	adds	r7, #32
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bd80      	pop	{r7, pc}
 8003ab6:	bf00      	nop
 8003ab8:	20001438 	.word	0x20001438

08003abc <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003abc:	b580      	push	{r7, lr}
 8003abe:	b088      	sub	sp, #32
 8003ac0:	af02      	add	r7, sp, #8
 8003ac2:	60f8      	str	r0, [r7, #12]
 8003ac4:	60b9      	str	r1, [r7, #8]
 8003ac6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003ac8:	4b1b      	ldr	r3, [pc, #108]	; (8003b38 <SPI_EndRxTxTransaction+0x7c>)
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	4a1b      	ldr	r2, [pc, #108]	; (8003b3c <SPI_EndRxTxTransaction+0x80>)
 8003ace:	fba2 2303 	umull	r2, r3, r2, r3
 8003ad2:	0d5b      	lsrs	r3, r3, #21
 8003ad4:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8003ad8:	fb02 f303 	mul.w	r3, r2, r3
 8003adc:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	685b      	ldr	r3, [r3, #4]
 8003ae2:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003ae6:	d112      	bne.n	8003b0e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	9300      	str	r3, [sp, #0]
 8003aec:	68bb      	ldr	r3, [r7, #8]
 8003aee:	2200      	movs	r2, #0
 8003af0:	2180      	movs	r1, #128	; 0x80
 8003af2:	68f8      	ldr	r0, [r7, #12]
 8003af4:	f7ff ff5a 	bl	80039ac <SPI_WaitFlagStateUntilTimeout>
 8003af8:	4603      	mov	r3, r0
 8003afa:	2b00      	cmp	r3, #0
 8003afc:	d016      	beq.n	8003b2c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003afe:	68fb      	ldr	r3, [r7, #12]
 8003b00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003b02:	f043 0220 	orr.w	r2, r3, #32
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8003b0a:	2303      	movs	r3, #3
 8003b0c:	e00f      	b.n	8003b2e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003b0e:	697b      	ldr	r3, [r7, #20]
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	d00a      	beq.n	8003b2a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8003b14:	697b      	ldr	r3, [r7, #20]
 8003b16:	3b01      	subs	r3, #1
 8003b18:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b24:	2b80      	cmp	r3, #128	; 0x80
 8003b26:	d0f2      	beq.n	8003b0e <SPI_EndRxTxTransaction+0x52>
 8003b28:	e000      	b.n	8003b2c <SPI_EndRxTxTransaction+0x70>
        break;
 8003b2a:	bf00      	nop
  }

  return HAL_OK;
 8003b2c:	2300      	movs	r3, #0
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	20001438 	.word	0x20001438
 8003b3c:	165e9f81 	.word	0x165e9f81

08003b40 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b082      	sub	sp, #8
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d101      	bne.n	8003b52 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003b4e:	2301      	movs	r3, #1
 8003b50:	e041      	b.n	8003bd6 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b58:	b2db      	uxtb	r3, r3
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d106      	bne.n	8003b6c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2200      	movs	r2, #0
 8003b62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003b66:	6878      	ldr	r0, [r7, #4]
 8003b68:	f7fd ffec 	bl	8001b44 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	2202      	movs	r2, #2
 8003b70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	681a      	ldr	r2, [r3, #0]
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	3304      	adds	r3, #4
 8003b7c:	4619      	mov	r1, r3
 8003b7e:	4610      	mov	r0, r2
 8003b80:	f000 fc54 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	2201      	movs	r2, #1
 8003b88:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	2201      	movs	r2, #1
 8003b90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2201      	movs	r2, #1
 8003ba0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	2201      	movs	r2, #1
 8003ba8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2201      	movs	r2, #1
 8003bb0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2201      	movs	r2, #1
 8003bb8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	2201      	movs	r2, #1
 8003bc0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2201      	movs	r2, #1
 8003bc8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	2201      	movs	r2, #1
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bd4:	2300      	movs	r3, #0
}
 8003bd6:	4618      	mov	r0, r3
 8003bd8:	3708      	adds	r7, #8
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bd80      	pop	{r7, pc}
	...

08003be0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003be0:	b480      	push	{r7}
 8003be2:	b085      	sub	sp, #20
 8003be4:	af00      	add	r7, sp, #0
 8003be6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bee:	b2db      	uxtb	r3, r3
 8003bf0:	2b01      	cmp	r3, #1
 8003bf2:	d001      	beq.n	8003bf8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003bf4:	2301      	movs	r3, #1
 8003bf6:	e044      	b.n	8003c82 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2202      	movs	r2, #2
 8003bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	68da      	ldr	r2, [r3, #12]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	4a1e      	ldr	r2, [pc, #120]	; (8003c90 <HAL_TIM_Base_Start_IT+0xb0>)
 8003c16:	4293      	cmp	r3, r2
 8003c18:	d018      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x6c>
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c22:	d013      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x6c>
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	4a1a      	ldr	r2, [pc, #104]	; (8003c94 <HAL_TIM_Base_Start_IT+0xb4>)
 8003c2a:	4293      	cmp	r3, r2
 8003c2c:	d00e      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x6c>
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	681b      	ldr	r3, [r3, #0]
 8003c32:	4a19      	ldr	r2, [pc, #100]	; (8003c98 <HAL_TIM_Base_Start_IT+0xb8>)
 8003c34:	4293      	cmp	r3, r2
 8003c36:	d009      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x6c>
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	4a17      	ldr	r2, [pc, #92]	; (8003c9c <HAL_TIM_Base_Start_IT+0xbc>)
 8003c3e:	4293      	cmp	r3, r2
 8003c40:	d004      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x6c>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	4a16      	ldr	r2, [pc, #88]	; (8003ca0 <HAL_TIM_Base_Start_IT+0xc0>)
 8003c48:	4293      	cmp	r3, r2
 8003c4a:	d111      	bne.n	8003c70 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	689b      	ldr	r3, [r3, #8]
 8003c52:	f003 0307 	and.w	r3, r3, #7
 8003c56:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	2b06      	cmp	r3, #6
 8003c5c:	d010      	beq.n	8003c80 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c6e:	e007      	b.n	8003c80 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	681a      	ldr	r2, [r3, #0]
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f042 0201 	orr.w	r2, r2, #1
 8003c7e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c80:	2300      	movs	r3, #0
}
 8003c82:	4618      	mov	r0, r3
 8003c84:	3714      	adds	r7, #20
 8003c86:	46bd      	mov	sp, r7
 8003c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c8c:	4770      	bx	lr
 8003c8e:	bf00      	nop
 8003c90:	40010000 	.word	0x40010000
 8003c94:	40000400 	.word	0x40000400
 8003c98:	40000800 	.word	0x40000800
 8003c9c:	40000c00 	.word	0x40000c00
 8003ca0:	40014000 	.word	0x40014000

08003ca4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003ca4:	b580      	push	{r7, lr}
 8003ca6:	b082      	sub	sp, #8
 8003ca8:	af00      	add	r7, sp, #0
 8003caa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d101      	bne.n	8003cb6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e041      	b.n	8003d3a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003cbc:	b2db      	uxtb	r3, r3
 8003cbe:	2b00      	cmp	r3, #0
 8003cc0:	d106      	bne.n	8003cd0 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	2200      	movs	r2, #0
 8003cc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cca:	6878      	ldr	r0, [r7, #4]
 8003ccc:	f000 f839 	bl	8003d42 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2202      	movs	r2, #2
 8003cd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681a      	ldr	r2, [r3, #0]
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	3304      	adds	r3, #4
 8003ce0:	4619      	mov	r1, r3
 8003ce2:	4610      	mov	r0, r2
 8003ce4:	f000 fba2 	bl	800442c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	2201      	movs	r2, #1
 8003cec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	2201      	movs	r2, #1
 8003cf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	2201      	movs	r2, #1
 8003cfc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2201      	movs	r2, #1
 8003d04:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	2201      	movs	r2, #1
 8003d0c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	2201      	movs	r2, #1
 8003d14:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	2201      	movs	r2, #1
 8003d1c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d20:	687b      	ldr	r3, [r7, #4]
 8003d22:	2201      	movs	r2, #1
 8003d24:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2201      	movs	r2, #1
 8003d2c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	2201      	movs	r2, #1
 8003d34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d38:	2300      	movs	r3, #0
}
 8003d3a:	4618      	mov	r0, r3
 8003d3c:	3708      	adds	r7, #8
 8003d3e:	46bd      	mov	sp, r7
 8003d40:	bd80      	pop	{r7, pc}

08003d42 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d42:	b480      	push	{r7}
 8003d44:	b083      	sub	sp, #12
 8003d46:	af00      	add	r7, sp, #0
 8003d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d4a:	bf00      	nop
 8003d4c:	370c      	adds	r7, #12
 8003d4e:	46bd      	mov	sp, r7
 8003d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d54:	4770      	bx	lr
	...

08003d58 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d58:	b580      	push	{r7, lr}
 8003d5a:	b084      	sub	sp, #16
 8003d5c:	af00      	add	r7, sp, #0
 8003d5e:	6078      	str	r0, [r7, #4]
 8003d60:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d109      	bne.n	8003d7c <HAL_TIM_PWM_Start+0x24>
 8003d68:	687b      	ldr	r3, [r7, #4]
 8003d6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003d6e:	b2db      	uxtb	r3, r3
 8003d70:	2b01      	cmp	r3, #1
 8003d72:	bf14      	ite	ne
 8003d74:	2301      	movne	r3, #1
 8003d76:	2300      	moveq	r3, #0
 8003d78:	b2db      	uxtb	r3, r3
 8003d7a:	e022      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x6a>
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	2b04      	cmp	r3, #4
 8003d80:	d109      	bne.n	8003d96 <HAL_TIM_PWM_Start+0x3e>
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	2b01      	cmp	r3, #1
 8003d8c:	bf14      	ite	ne
 8003d8e:	2301      	movne	r3, #1
 8003d90:	2300      	moveq	r3, #0
 8003d92:	b2db      	uxtb	r3, r3
 8003d94:	e015      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x6a>
 8003d96:	683b      	ldr	r3, [r7, #0]
 8003d98:	2b08      	cmp	r3, #8
 8003d9a:	d109      	bne.n	8003db0 <HAL_TIM_PWM_Start+0x58>
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003da2:	b2db      	uxtb	r3, r3
 8003da4:	2b01      	cmp	r3, #1
 8003da6:	bf14      	ite	ne
 8003da8:	2301      	movne	r3, #1
 8003daa:	2300      	moveq	r3, #0
 8003dac:	b2db      	uxtb	r3, r3
 8003dae:	e008      	b.n	8003dc2 <HAL_TIM_PWM_Start+0x6a>
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003db6:	b2db      	uxtb	r3, r3
 8003db8:	2b01      	cmp	r3, #1
 8003dba:	bf14      	ite	ne
 8003dbc:	2301      	movne	r3, #1
 8003dbe:	2300      	moveq	r3, #0
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d001      	beq.n	8003dca <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003dc6:	2301      	movs	r3, #1
 8003dc8:	e068      	b.n	8003e9c <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dca:	683b      	ldr	r3, [r7, #0]
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d104      	bne.n	8003dda <HAL_TIM_PWM_Start+0x82>
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	2202      	movs	r2, #2
 8003dd4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dd8:	e013      	b.n	8003e02 <HAL_TIM_PWM_Start+0xaa>
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b04      	cmp	r3, #4
 8003dde:	d104      	bne.n	8003dea <HAL_TIM_PWM_Start+0x92>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	2202      	movs	r2, #2
 8003de4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003de8:	e00b      	b.n	8003e02 <HAL_TIM_PWM_Start+0xaa>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d104      	bne.n	8003dfa <HAL_TIM_PWM_Start+0xa2>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2202      	movs	r2, #2
 8003df4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003df8:	e003      	b.n	8003e02 <HAL_TIM_PWM_Start+0xaa>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	2202      	movs	r2, #2
 8003dfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	2201      	movs	r2, #1
 8003e08:	6839      	ldr	r1, [r7, #0]
 8003e0a:	4618      	mov	r0, r3
 8003e0c:	f000 fdb4 	bl	8004978 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	4a23      	ldr	r2, [pc, #140]	; (8003ea4 <HAL_TIM_PWM_Start+0x14c>)
 8003e16:	4293      	cmp	r3, r2
 8003e18:	d107      	bne.n	8003e2a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	681b      	ldr	r3, [r3, #0]
 8003e24:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e28:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	4a1d      	ldr	r2, [pc, #116]	; (8003ea4 <HAL_TIM_PWM_Start+0x14c>)
 8003e30:	4293      	cmp	r3, r2
 8003e32:	d018      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e3c:	d013      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4a19      	ldr	r2, [pc, #100]	; (8003ea8 <HAL_TIM_PWM_Start+0x150>)
 8003e44:	4293      	cmp	r3, r2
 8003e46:	d00e      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	4a17      	ldr	r2, [pc, #92]	; (8003eac <HAL_TIM_PWM_Start+0x154>)
 8003e4e:	4293      	cmp	r3, r2
 8003e50:	d009      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	4a16      	ldr	r2, [pc, #88]	; (8003eb0 <HAL_TIM_PWM_Start+0x158>)
 8003e58:	4293      	cmp	r3, r2
 8003e5a:	d004      	beq.n	8003e66 <HAL_TIM_PWM_Start+0x10e>
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	4a14      	ldr	r2, [pc, #80]	; (8003eb4 <HAL_TIM_PWM_Start+0x15c>)
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d111      	bne.n	8003e8a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	689b      	ldr	r3, [r3, #8]
 8003e6c:	f003 0307 	and.w	r3, r3, #7
 8003e70:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	2b06      	cmp	r3, #6
 8003e76:	d010      	beq.n	8003e9a <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	f042 0201 	orr.w	r2, r2, #1
 8003e86:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e88:	e007      	b.n	8003e9a <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	687b      	ldr	r3, [r7, #4]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	f042 0201 	orr.w	r2, r2, #1
 8003e98:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	3710      	adds	r7, #16
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	bd80      	pop	{r7, pc}
 8003ea4:	40010000 	.word	0x40010000
 8003ea8:	40000400 	.word	0x40000400
 8003eac:	40000800 	.word	0x40000800
 8003eb0:	40000c00 	.word	0x40000c00
 8003eb4:	40014000 	.word	0x40014000

08003eb8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b082      	sub	sp, #8
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	691b      	ldr	r3, [r3, #16]
 8003ec6:	f003 0302 	and.w	r3, r3, #2
 8003eca:	2b02      	cmp	r3, #2
 8003ecc:	d122      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	68db      	ldr	r3, [r3, #12]
 8003ed4:	f003 0302 	and.w	r3, r3, #2
 8003ed8:	2b02      	cmp	r3, #2
 8003eda:	d11b      	bne.n	8003f14 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f06f 0202 	mvn.w	r2, #2
 8003ee4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	699b      	ldr	r3, [r3, #24]
 8003ef2:	f003 0303 	and.w	r3, r3, #3
 8003ef6:	2b00      	cmp	r3, #0
 8003ef8:	d003      	beq.n	8003f02 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003efa:	6878      	ldr	r0, [r7, #4]
 8003efc:	f000 fa77 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8003f00:	e005      	b.n	8003f0e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f02:	6878      	ldr	r0, [r7, #4]
 8003f04:	f000 fa69 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f08:	6878      	ldr	r0, [r7, #4]
 8003f0a:	f000 fa7a 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	2200      	movs	r2, #0
 8003f12:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f14:	687b      	ldr	r3, [r7, #4]
 8003f16:	681b      	ldr	r3, [r3, #0]
 8003f18:	691b      	ldr	r3, [r3, #16]
 8003f1a:	f003 0304 	and.w	r3, r3, #4
 8003f1e:	2b04      	cmp	r3, #4
 8003f20:	d122      	bne.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	68db      	ldr	r3, [r3, #12]
 8003f28:	f003 0304 	and.w	r3, r3, #4
 8003f2c:	2b04      	cmp	r3, #4
 8003f2e:	d11b      	bne.n	8003f68 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f30:	687b      	ldr	r3, [r7, #4]
 8003f32:	681b      	ldr	r3, [r3, #0]
 8003f34:	f06f 0204 	mvn.w	r2, #4
 8003f38:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2202      	movs	r2, #2
 8003f3e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699b      	ldr	r3, [r3, #24]
 8003f46:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d003      	beq.n	8003f56 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f4e:	6878      	ldr	r0, [r7, #4]
 8003f50:	f000 fa4d 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8003f54:	e005      	b.n	8003f62 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa3f 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f000 fa50 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	2200      	movs	r2, #0
 8003f66:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	691b      	ldr	r3, [r3, #16]
 8003f6e:	f003 0308 	and.w	r3, r3, #8
 8003f72:	2b08      	cmp	r3, #8
 8003f74:	d122      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68db      	ldr	r3, [r3, #12]
 8003f7c:	f003 0308 	and.w	r3, r3, #8
 8003f80:	2b08      	cmp	r3, #8
 8003f82:	d11b      	bne.n	8003fbc <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	f06f 0208 	mvn.w	r2, #8
 8003f8c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2204      	movs	r2, #4
 8003f92:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	69db      	ldr	r3, [r3, #28]
 8003f9a:	f003 0303 	and.w	r3, r3, #3
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d003      	beq.n	8003faa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fa2:	6878      	ldr	r0, [r7, #4]
 8003fa4:	f000 fa23 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8003fa8:	e005      	b.n	8003fb6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa15 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb0:	6878      	ldr	r0, [r7, #4]
 8003fb2:	f000 fa26 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	2200      	movs	r2, #0
 8003fba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691b      	ldr	r3, [r3, #16]
 8003fc2:	f003 0310 	and.w	r3, r3, #16
 8003fc6:	2b10      	cmp	r3, #16
 8003fc8:	d122      	bne.n	8004010 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	68db      	ldr	r3, [r3, #12]
 8003fd0:	f003 0310 	and.w	r3, r3, #16
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d11b      	bne.n	8004010 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f06f 0210 	mvn.w	r2, #16
 8003fe0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2208      	movs	r2, #8
 8003fe6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	69db      	ldr	r3, [r3, #28]
 8003fee:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d003      	beq.n	8003ffe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f9f9 	bl	80043ee <HAL_TIM_IC_CaptureCallback>
 8003ffc:	e005      	b.n	800400a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 f9eb 	bl	80043da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004004:	6878      	ldr	r0, [r7, #4]
 8004006:	f000 f9fc 	bl	8004402 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800400a:	687b      	ldr	r3, [r7, #4]
 800400c:	2200      	movs	r2, #0
 800400e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	691b      	ldr	r3, [r3, #16]
 8004016:	f003 0301 	and.w	r3, r3, #1
 800401a:	2b01      	cmp	r3, #1
 800401c:	d10e      	bne.n	800403c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	68db      	ldr	r3, [r3, #12]
 8004024:	f003 0301 	and.w	r3, r3, #1
 8004028:	2b01      	cmp	r3, #1
 800402a:	d107      	bne.n	800403c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	f06f 0201 	mvn.w	r2, #1
 8004034:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004036:	6878      	ldr	r0, [r7, #4]
 8004038:	f7fd f81a 	bl	8001070 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	691b      	ldr	r3, [r3, #16]
 8004042:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004046:	2b80      	cmp	r3, #128	; 0x80
 8004048:	d10e      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	68db      	ldr	r3, [r3, #12]
 8004050:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004054:	2b80      	cmp	r3, #128	; 0x80
 8004056:	d107      	bne.n	8004068 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004060:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004062:	6878      	ldr	r0, [r7, #4]
 8004064:	f000 fd26 	bl	8004ab4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	691b      	ldr	r3, [r3, #16]
 800406e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004072:	2b40      	cmp	r3, #64	; 0x40
 8004074:	d10e      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004080:	2b40      	cmp	r3, #64	; 0x40
 8004082:	d107      	bne.n	8004094 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800408c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800408e:	6878      	ldr	r0, [r7, #4]
 8004090:	f000 f9c1 	bl	8004416 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0320 	and.w	r3, r3, #32
 800409e:	2b20      	cmp	r3, #32
 80040a0:	d10e      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0320 	and.w	r3, r3, #32
 80040ac:	2b20      	cmp	r3, #32
 80040ae:	d107      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0220 	mvn.w	r2, #32
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 fcf0 	bl	8004aa0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040c0:	bf00      	nop
 80040c2:	3708      	adds	r7, #8
 80040c4:	46bd      	mov	sp, r7
 80040c6:	bd80      	pop	{r7, pc}

080040c8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040c8:	b580      	push	{r7, lr}
 80040ca:	b086      	sub	sp, #24
 80040cc:	af00      	add	r7, sp, #0
 80040ce:	60f8      	str	r0, [r7, #12]
 80040d0:	60b9      	str	r1, [r7, #8]
 80040d2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040d4:	2300      	movs	r3, #0
 80040d6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040de:	2b01      	cmp	r3, #1
 80040e0:	d101      	bne.n	80040e6 <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040e2:	2302      	movs	r3, #2
 80040e4:	e0ae      	b.n	8004244 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	2201      	movs	r2, #1
 80040ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	2b0c      	cmp	r3, #12
 80040f2:	f200 809f 	bhi.w	8004234 <HAL_TIM_PWM_ConfigChannel+0x16c>
 80040f6:	a201      	add	r2, pc, #4	; (adr r2, 80040fc <HAL_TIM_PWM_ConfigChannel+0x34>)
 80040f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80040fc:	08004131 	.word	0x08004131
 8004100:	08004235 	.word	0x08004235
 8004104:	08004235 	.word	0x08004235
 8004108:	08004235 	.word	0x08004235
 800410c:	08004171 	.word	0x08004171
 8004110:	08004235 	.word	0x08004235
 8004114:	08004235 	.word	0x08004235
 8004118:	08004235 	.word	0x08004235
 800411c:	080041b3 	.word	0x080041b3
 8004120:	08004235 	.word	0x08004235
 8004124:	08004235 	.word	0x08004235
 8004128:	08004235 	.word	0x08004235
 800412c:	080041f3 	.word	0x080041f3
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	68b9      	ldr	r1, [r7, #8]
 8004136:	4618      	mov	r0, r3
 8004138:	f000 f9f8 	bl	800452c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	699a      	ldr	r2, [r3, #24]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	f042 0208 	orr.w	r2, r2, #8
 800414a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	699a      	ldr	r2, [r3, #24]
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	f022 0204 	bic.w	r2, r2, #4
 800415a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	6999      	ldr	r1, [r3, #24]
 8004162:	68bb      	ldr	r3, [r7, #8]
 8004164:	691a      	ldr	r2, [r3, #16]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	430a      	orrs	r2, r1
 800416c:	619a      	str	r2, [r3, #24]
      break;
 800416e:	e064      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	68b9      	ldr	r1, [r7, #8]
 8004176:	4618      	mov	r0, r3
 8004178:	f000 fa3e 	bl	80045f8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	699a      	ldr	r2, [r3, #24]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800418a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	699a      	ldr	r2, [r3, #24]
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	681b      	ldr	r3, [r3, #0]
 8004196:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800419a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	6999      	ldr	r1, [r3, #24]
 80041a2:	68bb      	ldr	r3, [r7, #8]
 80041a4:	691b      	ldr	r3, [r3, #16]
 80041a6:	021a      	lsls	r2, r3, #8
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	430a      	orrs	r2, r1
 80041ae:	619a      	str	r2, [r3, #24]
      break;
 80041b0:	e043      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041b2:	68fb      	ldr	r3, [r7, #12]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	68b9      	ldr	r1, [r7, #8]
 80041b8:	4618      	mov	r0, r3
 80041ba:	f000 fa89 	bl	80046d0 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041be:	68fb      	ldr	r3, [r7, #12]
 80041c0:	681b      	ldr	r3, [r3, #0]
 80041c2:	69da      	ldr	r2, [r3, #28]
 80041c4:	68fb      	ldr	r3, [r7, #12]
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	f042 0208 	orr.w	r2, r2, #8
 80041cc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	69da      	ldr	r2, [r3, #28]
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	f022 0204 	bic.w	r2, r2, #4
 80041dc:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	69d9      	ldr	r1, [r3, #28]
 80041e4:	68bb      	ldr	r3, [r7, #8]
 80041e6:	691a      	ldr	r2, [r3, #16]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	430a      	orrs	r2, r1
 80041ee:	61da      	str	r2, [r3, #28]
      break;
 80041f0:	e023      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	68b9      	ldr	r1, [r7, #8]
 80041f8:	4618      	mov	r0, r3
 80041fa:	f000 fad3 	bl	80047a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	69da      	ldr	r2, [r3, #28]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	69da      	ldr	r2, [r3, #28]
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	69d9      	ldr	r1, [r3, #28]
 8004224:	68bb      	ldr	r3, [r7, #8]
 8004226:	691b      	ldr	r3, [r3, #16]
 8004228:	021a      	lsls	r2, r3, #8
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	430a      	orrs	r2, r1
 8004230:	61da      	str	r2, [r3, #28]
      break;
 8004232:	e002      	b.n	800423a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004234:	2301      	movs	r3, #1
 8004236:	75fb      	strb	r3, [r7, #23]
      break;
 8004238:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	2200      	movs	r2, #0
 800423e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004242:	7dfb      	ldrb	r3, [r7, #23]
}
 8004244:	4618      	mov	r0, r3
 8004246:	3718      	adds	r7, #24
 8004248:	46bd      	mov	sp, r7
 800424a:	bd80      	pop	{r7, pc}

0800424c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800424c:	b580      	push	{r7, lr}
 800424e:	b084      	sub	sp, #16
 8004250:	af00      	add	r7, sp, #0
 8004252:	6078      	str	r0, [r7, #4]
 8004254:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004256:	2300      	movs	r3, #0
 8004258:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004260:	2b01      	cmp	r3, #1
 8004262:	d101      	bne.n	8004268 <HAL_TIM_ConfigClockSource+0x1c>
 8004264:	2302      	movs	r3, #2
 8004266:	e0b4      	b.n	80043d2 <HAL_TIM_ConfigClockSource+0x186>
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2202      	movs	r2, #2
 8004274:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	689b      	ldr	r3, [r3, #8]
 800427e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004286:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004288:	68bb      	ldr	r3, [r7, #8]
 800428a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800428e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	681b      	ldr	r3, [r3, #0]
 8004294:	68ba      	ldr	r2, [r7, #8]
 8004296:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004298:	683b      	ldr	r3, [r7, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a0:	d03e      	beq.n	8004320 <HAL_TIM_ConfigClockSource+0xd4>
 80042a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80042a6:	f200 8087 	bhi.w	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042aa:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042ae:	f000 8086 	beq.w	80043be <HAL_TIM_ConfigClockSource+0x172>
 80042b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80042b6:	d87f      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042b8:	2b70      	cmp	r3, #112	; 0x70
 80042ba:	d01a      	beq.n	80042f2 <HAL_TIM_ConfigClockSource+0xa6>
 80042bc:	2b70      	cmp	r3, #112	; 0x70
 80042be:	d87b      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042c0:	2b60      	cmp	r3, #96	; 0x60
 80042c2:	d050      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0x11a>
 80042c4:	2b60      	cmp	r3, #96	; 0x60
 80042c6:	d877      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042c8:	2b50      	cmp	r3, #80	; 0x50
 80042ca:	d03c      	beq.n	8004346 <HAL_TIM_ConfigClockSource+0xfa>
 80042cc:	2b50      	cmp	r3, #80	; 0x50
 80042ce:	d873      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d0:	2b40      	cmp	r3, #64	; 0x40
 80042d2:	d058      	beq.n	8004386 <HAL_TIM_ConfigClockSource+0x13a>
 80042d4:	2b40      	cmp	r3, #64	; 0x40
 80042d6:	d86f      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042d8:	2b30      	cmp	r3, #48	; 0x30
 80042da:	d064      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x15a>
 80042dc:	2b30      	cmp	r3, #48	; 0x30
 80042de:	d86b      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e0:	2b20      	cmp	r3, #32
 80042e2:	d060      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x15a>
 80042e4:	2b20      	cmp	r3, #32
 80042e6:	d867      	bhi.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d05c      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x15a>
 80042ec:	2b10      	cmp	r3, #16
 80042ee:	d05a      	beq.n	80043a6 <HAL_TIM_ConfigClockSource+0x15a>
 80042f0:	e062      	b.n	80043b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	6818      	ldr	r0, [r3, #0]
 80042f6:	683b      	ldr	r3, [r7, #0]
 80042f8:	6899      	ldr	r1, [r3, #8]
 80042fa:	683b      	ldr	r3, [r7, #0]
 80042fc:	685a      	ldr	r2, [r3, #4]
 80042fe:	683b      	ldr	r3, [r7, #0]
 8004300:	68db      	ldr	r3, [r3, #12]
 8004302:	f000 fb19 	bl	8004938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	689b      	ldr	r3, [r3, #8]
 800430c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800430e:	68bb      	ldr	r3, [r7, #8]
 8004310:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004314:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	681b      	ldr	r3, [r3, #0]
 800431a:	68ba      	ldr	r2, [r7, #8]
 800431c:	609a      	str	r2, [r3, #8]
      break;
 800431e:	e04f      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	6818      	ldr	r0, [r3, #0]
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	6899      	ldr	r1, [r3, #8]
 8004328:	683b      	ldr	r3, [r7, #0]
 800432a:	685a      	ldr	r2, [r3, #4]
 800432c:	683b      	ldr	r3, [r7, #0]
 800432e:	68db      	ldr	r3, [r3, #12]
 8004330:	f000 fb02 	bl	8004938 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	689a      	ldr	r2, [r3, #8]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	681b      	ldr	r3, [r3, #0]
 800433e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004342:	609a      	str	r2, [r3, #8]
      break;
 8004344:	e03c      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	6818      	ldr	r0, [r3, #0]
 800434a:	683b      	ldr	r3, [r7, #0]
 800434c:	6859      	ldr	r1, [r3, #4]
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	68db      	ldr	r3, [r3, #12]
 8004352:	461a      	mov	r2, r3
 8004354:	f000 fa76 	bl	8004844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	681b      	ldr	r3, [r3, #0]
 800435c:	2150      	movs	r1, #80	; 0x50
 800435e:	4618      	mov	r0, r3
 8004360:	f000 facf 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004364:	e02c      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6859      	ldr	r1, [r3, #4]
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	68db      	ldr	r3, [r3, #12]
 8004372:	461a      	mov	r2, r3
 8004374:	f000 fa95 	bl	80048a2 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	2160      	movs	r1, #96	; 0x60
 800437e:	4618      	mov	r0, r3
 8004380:	f000 fabf 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 8004384:	e01c      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004386:	687b      	ldr	r3, [r7, #4]
 8004388:	6818      	ldr	r0, [r3, #0]
 800438a:	683b      	ldr	r3, [r7, #0]
 800438c:	6859      	ldr	r1, [r3, #4]
 800438e:	683b      	ldr	r3, [r7, #0]
 8004390:	68db      	ldr	r3, [r3, #12]
 8004392:	461a      	mov	r2, r3
 8004394:	f000 fa56 	bl	8004844 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	2140      	movs	r1, #64	; 0x40
 800439e:	4618      	mov	r0, r3
 80043a0:	f000 faaf 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80043a4:	e00c      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	4619      	mov	r1, r3
 80043b0:	4610      	mov	r0, r2
 80043b2:	f000 faa6 	bl	8004902 <TIM_ITRx_SetConfig>
      break;
 80043b6:	e003      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043b8:	2301      	movs	r3, #1
 80043ba:	73fb      	strb	r3, [r7, #15]
      break;
 80043bc:	e000      	b.n	80043c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	2201      	movs	r2, #1
 80043c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	2200      	movs	r2, #0
 80043cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80043d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80043d2:	4618      	mov	r0, r3
 80043d4:	3710      	adds	r7, #16
 80043d6:	46bd      	mov	sp, r7
 80043d8:	bd80      	pop	{r7, pc}

080043da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043da:	b480      	push	{r7}
 80043dc:	b083      	sub	sp, #12
 80043de:	af00      	add	r7, sp, #0
 80043e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80043e2:	bf00      	nop
 80043e4:	370c      	adds	r7, #12
 80043e6:	46bd      	mov	sp, r7
 80043e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ec:	4770      	bx	lr

080043ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004400:	4770      	bx	lr

08004402 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004402:	b480      	push	{r7}
 8004404:	b083      	sub	sp, #12
 8004406:	af00      	add	r7, sp, #0
 8004408:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800440a:	bf00      	nop
 800440c:	370c      	adds	r7, #12
 800440e:	46bd      	mov	sp, r7
 8004410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004414:	4770      	bx	lr

08004416 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004416:	b480      	push	{r7}
 8004418:	b083      	sub	sp, #12
 800441a:	af00      	add	r7, sp, #0
 800441c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800441e:	bf00      	nop
 8004420:	370c      	adds	r7, #12
 8004422:	46bd      	mov	sp, r7
 8004424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004428:	4770      	bx	lr
	...

0800442c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800442c:	b480      	push	{r7}
 800442e:	b085      	sub	sp, #20
 8004430:	af00      	add	r7, sp, #0
 8004432:	6078      	str	r0, [r7, #4]
 8004434:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	4a34      	ldr	r2, [pc, #208]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 8004440:	4293      	cmp	r3, r2
 8004442:	d00f      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800444a:	d00b      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	4a31      	ldr	r2, [pc, #196]	; (8004514 <TIM_Base_SetConfig+0xe8>)
 8004450:	4293      	cmp	r3, r2
 8004452:	d007      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	4a30      	ldr	r2, [pc, #192]	; (8004518 <TIM_Base_SetConfig+0xec>)
 8004458:	4293      	cmp	r3, r2
 800445a:	d003      	beq.n	8004464 <TIM_Base_SetConfig+0x38>
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	4a2f      	ldr	r2, [pc, #188]	; (800451c <TIM_Base_SetConfig+0xf0>)
 8004460:	4293      	cmp	r3, r2
 8004462:	d108      	bne.n	8004476 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800446a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800446c:	683b      	ldr	r3, [r7, #0]
 800446e:	685b      	ldr	r3, [r3, #4]
 8004470:	68fa      	ldr	r2, [r7, #12]
 8004472:	4313      	orrs	r3, r2
 8004474:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	4a25      	ldr	r2, [pc, #148]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 800447a:	4293      	cmp	r3, r2
 800447c:	d01b      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004484:	d017      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	4a22      	ldr	r2, [pc, #136]	; (8004514 <TIM_Base_SetConfig+0xe8>)
 800448a:	4293      	cmp	r3, r2
 800448c:	d013      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	4a21      	ldr	r2, [pc, #132]	; (8004518 <TIM_Base_SetConfig+0xec>)
 8004492:	4293      	cmp	r3, r2
 8004494:	d00f      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	4a20      	ldr	r2, [pc, #128]	; (800451c <TIM_Base_SetConfig+0xf0>)
 800449a:	4293      	cmp	r3, r2
 800449c:	d00b      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	4a1f      	ldr	r2, [pc, #124]	; (8004520 <TIM_Base_SetConfig+0xf4>)
 80044a2:	4293      	cmp	r3, r2
 80044a4:	d007      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	4a1e      	ldr	r2, [pc, #120]	; (8004524 <TIM_Base_SetConfig+0xf8>)
 80044aa:	4293      	cmp	r3, r2
 80044ac:	d003      	beq.n	80044b6 <TIM_Base_SetConfig+0x8a>
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	4a1d      	ldr	r2, [pc, #116]	; (8004528 <TIM_Base_SetConfig+0xfc>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d108      	bne.n	80044c8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80044bc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044be:	683b      	ldr	r3, [r7, #0]
 80044c0:	68db      	ldr	r3, [r3, #12]
 80044c2:	68fa      	ldr	r2, [r7, #12]
 80044c4:	4313      	orrs	r3, r2
 80044c6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80044ce:	683b      	ldr	r3, [r7, #0]
 80044d0:	695b      	ldr	r3, [r3, #20]
 80044d2:	4313      	orrs	r3, r2
 80044d4:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	68fa      	ldr	r2, [r7, #12]
 80044da:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044dc:	683b      	ldr	r3, [r7, #0]
 80044de:	689a      	ldr	r2, [r3, #8]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044e4:	683b      	ldr	r3, [r7, #0]
 80044e6:	681a      	ldr	r2, [r3, #0]
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	4a08      	ldr	r2, [pc, #32]	; (8004510 <TIM_Base_SetConfig+0xe4>)
 80044f0:	4293      	cmp	r3, r2
 80044f2:	d103      	bne.n	80044fc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044f4:	683b      	ldr	r3, [r7, #0]
 80044f6:	691a      	ldr	r2, [r3, #16]
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	2201      	movs	r2, #1
 8004500:	615a      	str	r2, [r3, #20]
}
 8004502:	bf00      	nop
 8004504:	3714      	adds	r7, #20
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
 800450e:	bf00      	nop
 8004510:	40010000 	.word	0x40010000
 8004514:	40000400 	.word	0x40000400
 8004518:	40000800 	.word	0x40000800
 800451c:	40000c00 	.word	0x40000c00
 8004520:	40014000 	.word	0x40014000
 8004524:	40014400 	.word	0x40014400
 8004528:	40014800 	.word	0x40014800

0800452c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800452c:	b480      	push	{r7}
 800452e:	b087      	sub	sp, #28
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
 8004534:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	6a1b      	ldr	r3, [r3, #32]
 800453a:	f023 0201 	bic.w	r2, r3, #1
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	6a1b      	ldr	r3, [r3, #32]
 8004546:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	685b      	ldr	r3, [r3, #4]
 800454c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	699b      	ldr	r3, [r3, #24]
 8004552:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800455a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800455c:	68fb      	ldr	r3, [r7, #12]
 800455e:	f023 0303 	bic.w	r3, r3, #3
 8004562:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004564:	683b      	ldr	r3, [r7, #0]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68fa      	ldr	r2, [r7, #12]
 800456a:	4313      	orrs	r3, r2
 800456c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800456e:	697b      	ldr	r3, [r7, #20]
 8004570:	f023 0302 	bic.w	r3, r3, #2
 8004574:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004576:	683b      	ldr	r3, [r7, #0]
 8004578:	689b      	ldr	r3, [r3, #8]
 800457a:	697a      	ldr	r2, [r7, #20]
 800457c:	4313      	orrs	r3, r2
 800457e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	4a1c      	ldr	r2, [pc, #112]	; (80045f4 <TIM_OC1_SetConfig+0xc8>)
 8004584:	4293      	cmp	r3, r2
 8004586:	d10c      	bne.n	80045a2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004588:	697b      	ldr	r3, [r7, #20]
 800458a:	f023 0308 	bic.w	r3, r3, #8
 800458e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	68db      	ldr	r3, [r3, #12]
 8004594:	697a      	ldr	r2, [r7, #20]
 8004596:	4313      	orrs	r3, r2
 8004598:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800459a:	697b      	ldr	r3, [r7, #20]
 800459c:	f023 0304 	bic.w	r3, r3, #4
 80045a0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	4a13      	ldr	r2, [pc, #76]	; (80045f4 <TIM_OC1_SetConfig+0xc8>)
 80045a6:	4293      	cmp	r3, r2
 80045a8:	d111      	bne.n	80045ce <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045aa:	693b      	ldr	r3, [r7, #16]
 80045ac:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80045b0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045b2:	693b      	ldr	r3, [r7, #16]
 80045b4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80045b8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	695b      	ldr	r3, [r3, #20]
 80045be:	693a      	ldr	r2, [r7, #16]
 80045c0:	4313      	orrs	r3, r2
 80045c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045c4:	683b      	ldr	r3, [r7, #0]
 80045c6:	699b      	ldr	r3, [r3, #24]
 80045c8:	693a      	ldr	r2, [r7, #16]
 80045ca:	4313      	orrs	r3, r2
 80045cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	693a      	ldr	r2, [r7, #16]
 80045d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	68fa      	ldr	r2, [r7, #12]
 80045d8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045da:	683b      	ldr	r3, [r7, #0]
 80045dc:	685a      	ldr	r2, [r3, #4]
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	697a      	ldr	r2, [r7, #20]
 80045e6:	621a      	str	r2, [r3, #32]
}
 80045e8:	bf00      	nop
 80045ea:	371c      	adds	r7, #28
 80045ec:	46bd      	mov	sp, r7
 80045ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f2:	4770      	bx	lr
 80045f4:	40010000 	.word	0x40010000

080045f8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b087      	sub	sp, #28
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
 8004600:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	6a1b      	ldr	r3, [r3, #32]
 8004606:	f023 0210 	bic.w	r2, r3, #16
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	6a1b      	ldr	r3, [r3, #32]
 8004612:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	685b      	ldr	r3, [r3, #4]
 8004618:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	699b      	ldr	r3, [r3, #24]
 800461e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004626:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800462e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004630:	683b      	ldr	r3, [r7, #0]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	021b      	lsls	r3, r3, #8
 8004636:	68fa      	ldr	r2, [r7, #12]
 8004638:	4313      	orrs	r3, r2
 800463a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800463c:	697b      	ldr	r3, [r7, #20]
 800463e:	f023 0320 	bic.w	r3, r3, #32
 8004642:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004644:	683b      	ldr	r3, [r7, #0]
 8004646:	689b      	ldr	r3, [r3, #8]
 8004648:	011b      	lsls	r3, r3, #4
 800464a:	697a      	ldr	r2, [r7, #20]
 800464c:	4313      	orrs	r3, r2
 800464e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	4a1e      	ldr	r2, [pc, #120]	; (80046cc <TIM_OC2_SetConfig+0xd4>)
 8004654:	4293      	cmp	r3, r2
 8004656:	d10d      	bne.n	8004674 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004658:	697b      	ldr	r3, [r7, #20]
 800465a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800465e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004660:	683b      	ldr	r3, [r7, #0]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	011b      	lsls	r3, r3, #4
 8004666:	697a      	ldr	r2, [r7, #20]
 8004668:	4313      	orrs	r3, r2
 800466a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004672:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	4a15      	ldr	r2, [pc, #84]	; (80046cc <TIM_OC2_SetConfig+0xd4>)
 8004678:	4293      	cmp	r3, r2
 800467a:	d113      	bne.n	80046a4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800467c:	693b      	ldr	r3, [r7, #16]
 800467e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004682:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004684:	693b      	ldr	r3, [r7, #16]
 8004686:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800468a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800468c:	683b      	ldr	r3, [r7, #0]
 800468e:	695b      	ldr	r3, [r3, #20]
 8004690:	009b      	lsls	r3, r3, #2
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	009b      	lsls	r3, r3, #2
 800469e:	693a      	ldr	r2, [r7, #16]
 80046a0:	4313      	orrs	r3, r2
 80046a2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	693a      	ldr	r2, [r7, #16]
 80046a8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046aa:	687b      	ldr	r3, [r7, #4]
 80046ac:	68fa      	ldr	r2, [r7, #12]
 80046ae:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046b0:	683b      	ldr	r3, [r7, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	697a      	ldr	r2, [r7, #20]
 80046bc:	621a      	str	r2, [r3, #32]
}
 80046be:	bf00      	nop
 80046c0:	371c      	adds	r7, #28
 80046c2:	46bd      	mov	sp, r7
 80046c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c8:	4770      	bx	lr
 80046ca:	bf00      	nop
 80046cc:	40010000 	.word	0x40010000

080046d0 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	69db      	ldr	r3, [r3, #28]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f023 0303 	bic.w	r3, r3, #3
 8004706:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	68fa      	ldr	r2, [r7, #12]
 800470e:	4313      	orrs	r3, r2
 8004710:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004712:	697b      	ldr	r3, [r7, #20]
 8004714:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004718:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800471a:	683b      	ldr	r3, [r7, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	021b      	lsls	r3, r3, #8
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a1d      	ldr	r2, [pc, #116]	; (80047a0 <TIM_OC3_SetConfig+0xd0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d10d      	bne.n	800474a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800472e:	697b      	ldr	r3, [r7, #20]
 8004730:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004734:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004736:	683b      	ldr	r3, [r7, #0]
 8004738:	68db      	ldr	r3, [r3, #12]
 800473a:	021b      	lsls	r3, r3, #8
 800473c:	697a      	ldr	r2, [r7, #20]
 800473e:	4313      	orrs	r3, r2
 8004740:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004742:	697b      	ldr	r3, [r7, #20]
 8004744:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004748:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a14      	ldr	r2, [pc, #80]	; (80047a0 <TIM_OC3_SetConfig+0xd0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d113      	bne.n	800477a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004752:	693b      	ldr	r3, [r7, #16]
 8004754:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004758:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800475a:	693b      	ldr	r3, [r7, #16]
 800475c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004760:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	695b      	ldr	r3, [r3, #20]
 8004766:	011b      	lsls	r3, r3, #4
 8004768:	693a      	ldr	r2, [r7, #16]
 800476a:	4313      	orrs	r3, r2
 800476c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800476e:	683b      	ldr	r3, [r7, #0]
 8004770:	699b      	ldr	r3, [r3, #24]
 8004772:	011b      	lsls	r3, r3, #4
 8004774:	693a      	ldr	r2, [r7, #16]
 8004776:	4313      	orrs	r3, r2
 8004778:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	693a      	ldr	r2, [r7, #16]
 800477e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004780:	687b      	ldr	r3, [r7, #4]
 8004782:	68fa      	ldr	r2, [r7, #12]
 8004784:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	685a      	ldr	r2, [r3, #4]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	697a      	ldr	r2, [r7, #20]
 8004792:	621a      	str	r2, [r3, #32]
}
 8004794:	bf00      	nop
 8004796:	371c      	adds	r7, #28
 8004798:	46bd      	mov	sp, r7
 800479a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479e:	4770      	bx	lr
 80047a0:	40010000 	.word	0x40010000

080047a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b087      	sub	sp, #28
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	6a1b      	ldr	r3, [r3, #32]
 80047b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	6a1b      	ldr	r3, [r3, #32]
 80047be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	69db      	ldr	r3, [r3, #28]
 80047ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80047d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047dc:	683b      	ldr	r3, [r7, #0]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	021b      	lsls	r3, r3, #8
 80047e2:	68fa      	ldr	r2, [r7, #12]
 80047e4:	4313      	orrs	r3, r2
 80047e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047e8:	693b      	ldr	r3, [r7, #16]
 80047ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80047ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047f0:	683b      	ldr	r3, [r7, #0]
 80047f2:	689b      	ldr	r3, [r3, #8]
 80047f4:	031b      	lsls	r3, r3, #12
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	4313      	orrs	r3, r2
 80047fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	4a10      	ldr	r2, [pc, #64]	; (8004840 <TIM_OC4_SetConfig+0x9c>)
 8004800:	4293      	cmp	r3, r2
 8004802:	d109      	bne.n	8004818 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004804:	697b      	ldr	r3, [r7, #20]
 8004806:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800480a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800480c:	683b      	ldr	r3, [r7, #0]
 800480e:	695b      	ldr	r3, [r3, #20]
 8004810:	019b      	lsls	r3, r3, #6
 8004812:	697a      	ldr	r2, [r7, #20]
 8004814:	4313      	orrs	r3, r2
 8004816:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	697a      	ldr	r2, [r7, #20]
 800481c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	68fa      	ldr	r2, [r7, #12]
 8004822:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004824:	683b      	ldr	r3, [r7, #0]
 8004826:	685a      	ldr	r2, [r3, #4]
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	693a      	ldr	r2, [r7, #16]
 8004830:	621a      	str	r2, [r3, #32]
}
 8004832:	bf00      	nop
 8004834:	371c      	adds	r7, #28
 8004836:	46bd      	mov	sp, r7
 8004838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483c:	4770      	bx	lr
 800483e:	bf00      	nop
 8004840:	40010000 	.word	0x40010000

08004844 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004844:	b480      	push	{r7}
 8004846:	b087      	sub	sp, #28
 8004848:	af00      	add	r7, sp, #0
 800484a:	60f8      	str	r0, [r7, #12]
 800484c:	60b9      	str	r1, [r7, #8]
 800484e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	6a1b      	ldr	r3, [r3, #32]
 8004854:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	6a1b      	ldr	r3, [r3, #32]
 800485a:	f023 0201 	bic.w	r2, r3, #1
 800485e:	68fb      	ldr	r3, [r7, #12]
 8004860:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	699b      	ldr	r3, [r3, #24]
 8004866:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004868:	693b      	ldr	r3, [r7, #16]
 800486a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800486e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004870:	687b      	ldr	r3, [r7, #4]
 8004872:	011b      	lsls	r3, r3, #4
 8004874:	693a      	ldr	r2, [r7, #16]
 8004876:	4313      	orrs	r3, r2
 8004878:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800487a:	697b      	ldr	r3, [r7, #20]
 800487c:	f023 030a 	bic.w	r3, r3, #10
 8004880:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004882:	697a      	ldr	r2, [r7, #20]
 8004884:	68bb      	ldr	r3, [r7, #8]
 8004886:	4313      	orrs	r3, r2
 8004888:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	693a      	ldr	r2, [r7, #16]
 800488e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	697a      	ldr	r2, [r7, #20]
 8004894:	621a      	str	r2, [r3, #32]
}
 8004896:	bf00      	nop
 8004898:	371c      	adds	r7, #28
 800489a:	46bd      	mov	sp, r7
 800489c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a0:	4770      	bx	lr

080048a2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048a2:	b480      	push	{r7}
 80048a4:	b087      	sub	sp, #28
 80048a6:	af00      	add	r7, sp, #0
 80048a8:	60f8      	str	r0, [r7, #12]
 80048aa:	60b9      	str	r1, [r7, #8]
 80048ac:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ae:	68fb      	ldr	r3, [r7, #12]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f023 0210 	bic.w	r2, r3, #16
 80048b6:	68fb      	ldr	r3, [r7, #12]
 80048b8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	699b      	ldr	r3, [r3, #24]
 80048be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	6a1b      	ldr	r3, [r3, #32]
 80048c4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048c6:	697b      	ldr	r3, [r7, #20]
 80048c8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80048cc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	031b      	lsls	r3, r3, #12
 80048d2:	697a      	ldr	r2, [r7, #20]
 80048d4:	4313      	orrs	r3, r2
 80048d6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048d8:	693b      	ldr	r3, [r7, #16]
 80048da:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80048de:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048e0:	68bb      	ldr	r3, [r7, #8]
 80048e2:	011b      	lsls	r3, r3, #4
 80048e4:	693a      	ldr	r2, [r7, #16]
 80048e6:	4313      	orrs	r3, r2
 80048e8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	697a      	ldr	r2, [r7, #20]
 80048ee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	693a      	ldr	r2, [r7, #16]
 80048f4:	621a      	str	r2, [r3, #32]
}
 80048f6:	bf00      	nop
 80048f8:	371c      	adds	r7, #28
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr

08004902 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004902:	b480      	push	{r7}
 8004904:	b085      	sub	sp, #20
 8004906:	af00      	add	r7, sp, #0
 8004908:	6078      	str	r0, [r7, #4]
 800490a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800490c:	687b      	ldr	r3, [r7, #4]
 800490e:	689b      	ldr	r3, [r3, #8]
 8004910:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004912:	68fb      	ldr	r3, [r7, #12]
 8004914:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004918:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800491a:	683a      	ldr	r2, [r7, #0]
 800491c:	68fb      	ldr	r3, [r7, #12]
 800491e:	4313      	orrs	r3, r2
 8004920:	f043 0307 	orr.w	r3, r3, #7
 8004924:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	609a      	str	r2, [r3, #8]
}
 800492c:	bf00      	nop
 800492e:	3714      	adds	r7, #20
 8004930:	46bd      	mov	sp, r7
 8004932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004936:	4770      	bx	lr

08004938 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004938:	b480      	push	{r7}
 800493a:	b087      	sub	sp, #28
 800493c:	af00      	add	r7, sp, #0
 800493e:	60f8      	str	r0, [r7, #12]
 8004940:	60b9      	str	r1, [r7, #8]
 8004942:	607a      	str	r2, [r7, #4]
 8004944:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	689b      	ldr	r3, [r3, #8]
 800494a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800494c:	697b      	ldr	r3, [r7, #20]
 800494e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004952:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004954:	683b      	ldr	r3, [r7, #0]
 8004956:	021a      	lsls	r2, r3, #8
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	431a      	orrs	r2, r3
 800495c:	68bb      	ldr	r3, [r7, #8]
 800495e:	4313      	orrs	r3, r2
 8004960:	697a      	ldr	r2, [r7, #20]
 8004962:	4313      	orrs	r3, r2
 8004964:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004966:	68fb      	ldr	r3, [r7, #12]
 8004968:	697a      	ldr	r2, [r7, #20]
 800496a:	609a      	str	r2, [r3, #8]
}
 800496c:	bf00      	nop
 800496e:	371c      	adds	r7, #28
 8004970:	46bd      	mov	sp, r7
 8004972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004976:	4770      	bx	lr

08004978 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004978:	b480      	push	{r7}
 800497a:	b087      	sub	sp, #28
 800497c:	af00      	add	r7, sp, #0
 800497e:	60f8      	str	r0, [r7, #12]
 8004980:	60b9      	str	r1, [r7, #8]
 8004982:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004984:	68bb      	ldr	r3, [r7, #8]
 8004986:	f003 031f 	and.w	r3, r3, #31
 800498a:	2201      	movs	r2, #1
 800498c:	fa02 f303 	lsl.w	r3, r2, r3
 8004990:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6a1a      	ldr	r2, [r3, #32]
 8004996:	697b      	ldr	r3, [r7, #20]
 8004998:	43db      	mvns	r3, r3
 800499a:	401a      	ands	r2, r3
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	6a1a      	ldr	r2, [r3, #32]
 80049a4:	68bb      	ldr	r3, [r7, #8]
 80049a6:	f003 031f 	and.w	r3, r3, #31
 80049aa:	6879      	ldr	r1, [r7, #4]
 80049ac:	fa01 f303 	lsl.w	r3, r1, r3
 80049b0:	431a      	orrs	r2, r3
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	621a      	str	r2, [r3, #32]
}
 80049b6:	bf00      	nop
 80049b8:	371c      	adds	r7, #28
 80049ba:	46bd      	mov	sp, r7
 80049bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049c0:	4770      	bx	lr
	...

080049c4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049c4:	b480      	push	{r7}
 80049c6:	b085      	sub	sp, #20
 80049c8:	af00      	add	r7, sp, #0
 80049ca:	6078      	str	r0, [r7, #4]
 80049cc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80049d4:	2b01      	cmp	r3, #1
 80049d6:	d101      	bne.n	80049dc <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049d8:	2302      	movs	r3, #2
 80049da:	e050      	b.n	8004a7e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2202      	movs	r2, #2
 80049e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	689b      	ldr	r3, [r3, #8]
 80049fa:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a02:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a04:	683b      	ldr	r3, [r7, #0]
 8004a06:	681b      	ldr	r3, [r3, #0]
 8004a08:	68fa      	ldr	r2, [r7, #12]
 8004a0a:	4313      	orrs	r3, r2
 8004a0c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	68fa      	ldr	r2, [r7, #12]
 8004a14:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	4a1c      	ldr	r2, [pc, #112]	; (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004a1c:	4293      	cmp	r3, r2
 8004a1e:	d018      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a28:	d013      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a18      	ldr	r2, [pc, #96]	; (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00e      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	4a16      	ldr	r2, [pc, #88]	; (8004a94 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004a3a:	4293      	cmp	r3, r2
 8004a3c:	d009      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a15      	ldr	r2, [pc, #84]	; (8004a98 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a13      	ldr	r2, [pc, #76]	; (8004a9c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10c      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a88:	4770      	bx	lr
 8004a8a:	bf00      	nop
 8004a8c:	40010000 	.word	0x40010000
 8004a90:	40000400 	.word	0x40000400
 8004a94:	40000800 	.word	0x40000800
 8004a98:	40000c00 	.word	0x40000c00
 8004a9c:	40014000 	.word	0x40014000

08004aa0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aa0:	b480      	push	{r7}
 8004aa2:	b083      	sub	sp, #12
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004aa8:	bf00      	nop
 8004aaa:	370c      	adds	r7, #12
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004abc:	bf00      	nop
 8004abe:	370c      	adds	r7, #12
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac6:	4770      	bx	lr

08004ac8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b082      	sub	sp, #8
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e03f      	b.n	8004b5a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fd f89c 	bl	8001c2c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2224      	movs	r2, #36	; 0x24
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	68da      	ldr	r2, [r3, #12]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004b0a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004b0c:	6878      	ldr	r0, [r7, #4]
 8004b0e:	f000 f829 	bl	8004b64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	691a      	ldr	r2, [r3, #16]
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004b20:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	695a      	ldr	r2, [r3, #20]
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	681b      	ldr	r3, [r3, #0]
 8004b2c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004b30:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	68da      	ldr	r2, [r3, #12]
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004b40:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2200      	movs	r2, #0
 8004b46:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2220      	movs	r2, #32
 8004b4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2220      	movs	r2, #32
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3708      	adds	r7, #8
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
	...

08004b64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004b64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004b68:	b0c0      	sub	sp, #256	; 0x100
 8004b6a:	af00      	add	r7, sp, #0
 8004b6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004b70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	691b      	ldr	r3, [r3, #16]
 8004b78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004b7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b80:	68d9      	ldr	r1, [r3, #12]
 8004b82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b86:	681a      	ldr	r2, [r3, #0]
 8004b88:	ea40 0301 	orr.w	r3, r0, r1
 8004b8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004b8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b92:	689a      	ldr	r2, [r3, #8]
 8004b94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b98:	691b      	ldr	r3, [r3, #16]
 8004b9a:	431a      	orrs	r2, r3
 8004b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba0:	695b      	ldr	r3, [r3, #20]
 8004ba2:	431a      	orrs	r2, r3
 8004ba4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004ba8:	69db      	ldr	r3, [r3, #28]
 8004baa:	4313      	orrs	r3, r2
 8004bac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004bb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	68db      	ldr	r3, [r3, #12]
 8004bb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8004bbc:	f021 010c 	bic.w	r1, r1, #12
 8004bc0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bc4:	681a      	ldr	r2, [r3, #0]
 8004bc6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8004bca:	430b      	orrs	r3, r1
 8004bcc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004bce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	695b      	ldr	r3, [r3, #20]
 8004bd6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8004bda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bde:	6999      	ldr	r1, [r3, #24]
 8004be0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004be4:	681a      	ldr	r2, [r3, #0]
 8004be6:	ea40 0301 	orr.w	r3, r0, r1
 8004bea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004bec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bf0:	681a      	ldr	r2, [r3, #0]
 8004bf2:	4b8f      	ldr	r3, [pc, #572]	; (8004e30 <UART_SetConfig+0x2cc>)
 8004bf4:	429a      	cmp	r2, r3
 8004bf6:	d005      	beq.n	8004c04 <UART_SetConfig+0xa0>
 8004bf8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004bfc:	681a      	ldr	r2, [r3, #0]
 8004bfe:	4b8d      	ldr	r3, [pc, #564]	; (8004e34 <UART_SetConfig+0x2d0>)
 8004c00:	429a      	cmp	r2, r3
 8004c02:	d104      	bne.n	8004c0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004c04:	f7fe fcf8 	bl	80035f8 <HAL_RCC_GetPCLK2Freq>
 8004c08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8004c0c:	e003      	b.n	8004c16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004c0e:	f7fe fcdf 	bl	80035d0 <HAL_RCC_GetPCLK1Freq>
 8004c12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004c16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c1a:	69db      	ldr	r3, [r3, #28]
 8004c1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004c20:	f040 810c 	bne.w	8004e3c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004c24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004c28:	2200      	movs	r2, #0
 8004c2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004c2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8004c32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8004c36:	4622      	mov	r2, r4
 8004c38:	462b      	mov	r3, r5
 8004c3a:	1891      	adds	r1, r2, r2
 8004c3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8004c3e:	415b      	adcs	r3, r3
 8004c40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004c42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c46:	4621      	mov	r1, r4
 8004c48:	eb12 0801 	adds.w	r8, r2, r1
 8004c4c:	4629      	mov	r1, r5
 8004c4e:	eb43 0901 	adc.w	r9, r3, r1
 8004c52:	f04f 0200 	mov.w	r2, #0
 8004c56:	f04f 0300 	mov.w	r3, #0
 8004c5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004c5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004c62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004c66:	4690      	mov	r8, r2
 8004c68:	4699      	mov	r9, r3
 8004c6a:	4623      	mov	r3, r4
 8004c6c:	eb18 0303 	adds.w	r3, r8, r3
 8004c70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004c74:	462b      	mov	r3, r5
 8004c76:	eb49 0303 	adc.w	r3, r9, r3
 8004c7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004c7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004c82:	685b      	ldr	r3, [r3, #4]
 8004c84:	2200      	movs	r2, #0
 8004c86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004c8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004c8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004c92:	460b      	mov	r3, r1
 8004c94:	18db      	adds	r3, r3, r3
 8004c96:	653b      	str	r3, [r7, #80]	; 0x50
 8004c98:	4613      	mov	r3, r2
 8004c9a:	eb42 0303 	adc.w	r3, r2, r3
 8004c9e:	657b      	str	r3, [r7, #84]	; 0x54
 8004ca0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004ca4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004ca8:	f7fb fa9c 	bl	80001e4 <__aeabi_uldivmod>
 8004cac:	4602      	mov	r2, r0
 8004cae:	460b      	mov	r3, r1
 8004cb0:	4b61      	ldr	r3, [pc, #388]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004cb2:	fba3 2302 	umull	r2, r3, r3, r2
 8004cb6:	095b      	lsrs	r3, r3, #5
 8004cb8:	011c      	lsls	r4, r3, #4
 8004cba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004cc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8004cc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8004ccc:	4642      	mov	r2, r8
 8004cce:	464b      	mov	r3, r9
 8004cd0:	1891      	adds	r1, r2, r2
 8004cd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8004cd4:	415b      	adcs	r3, r3
 8004cd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004cd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004cdc:	4641      	mov	r1, r8
 8004cde:	eb12 0a01 	adds.w	sl, r2, r1
 8004ce2:	4649      	mov	r1, r9
 8004ce4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ce8:	f04f 0200 	mov.w	r2, #0
 8004cec:	f04f 0300 	mov.w	r3, #0
 8004cf0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004cf4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004cf8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004cfc:	4692      	mov	sl, r2
 8004cfe:	469b      	mov	fp, r3
 8004d00:	4643      	mov	r3, r8
 8004d02:	eb1a 0303 	adds.w	r3, sl, r3
 8004d06:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8004d0a:	464b      	mov	r3, r9
 8004d0c:	eb4b 0303 	adc.w	r3, fp, r3
 8004d10:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004d14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004d18:	685b      	ldr	r3, [r3, #4]
 8004d1a:	2200      	movs	r2, #0
 8004d1c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004d20:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8004d24:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004d28:	460b      	mov	r3, r1
 8004d2a:	18db      	adds	r3, r3, r3
 8004d2c:	643b      	str	r3, [r7, #64]	; 0x40
 8004d2e:	4613      	mov	r3, r2
 8004d30:	eb42 0303 	adc.w	r3, r2, r3
 8004d34:	647b      	str	r3, [r7, #68]	; 0x44
 8004d36:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004d3a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004d3e:	f7fb fa51 	bl	80001e4 <__aeabi_uldivmod>
 8004d42:	4602      	mov	r2, r0
 8004d44:	460b      	mov	r3, r1
 8004d46:	4611      	mov	r1, r2
 8004d48:	4b3b      	ldr	r3, [pc, #236]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004d4a:	fba3 2301 	umull	r2, r3, r3, r1
 8004d4e:	095b      	lsrs	r3, r3, #5
 8004d50:	2264      	movs	r2, #100	; 0x64
 8004d52:	fb02 f303 	mul.w	r3, r2, r3
 8004d56:	1acb      	subs	r3, r1, r3
 8004d58:	00db      	lsls	r3, r3, #3
 8004d5a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004d5e:	4b36      	ldr	r3, [pc, #216]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004d60:	fba3 2302 	umull	r2, r3, r3, r2
 8004d64:	095b      	lsrs	r3, r3, #5
 8004d66:	005b      	lsls	r3, r3, #1
 8004d68:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004d6c:	441c      	add	r4, r3
 8004d6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004d72:	2200      	movs	r2, #0
 8004d74:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004d78:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004d7c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004d80:	4642      	mov	r2, r8
 8004d82:	464b      	mov	r3, r9
 8004d84:	1891      	adds	r1, r2, r2
 8004d86:	63b9      	str	r1, [r7, #56]	; 0x38
 8004d88:	415b      	adcs	r3, r3
 8004d8a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004d8c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004d90:	4641      	mov	r1, r8
 8004d92:	1851      	adds	r1, r2, r1
 8004d94:	6339      	str	r1, [r7, #48]	; 0x30
 8004d96:	4649      	mov	r1, r9
 8004d98:	414b      	adcs	r3, r1
 8004d9a:	637b      	str	r3, [r7, #52]	; 0x34
 8004d9c:	f04f 0200 	mov.w	r2, #0
 8004da0:	f04f 0300 	mov.w	r3, #0
 8004da4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004da8:	4659      	mov	r1, fp
 8004daa:	00cb      	lsls	r3, r1, #3
 8004dac:	4651      	mov	r1, sl
 8004dae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004db2:	4651      	mov	r1, sl
 8004db4:	00ca      	lsls	r2, r1, #3
 8004db6:	4610      	mov	r0, r2
 8004db8:	4619      	mov	r1, r3
 8004dba:	4603      	mov	r3, r0
 8004dbc:	4642      	mov	r2, r8
 8004dbe:	189b      	adds	r3, r3, r2
 8004dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004dc4:	464b      	mov	r3, r9
 8004dc6:	460a      	mov	r2, r1
 8004dc8:	eb42 0303 	adc.w	r3, r2, r3
 8004dcc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004dd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004dd4:	685b      	ldr	r3, [r3, #4]
 8004dd6:	2200      	movs	r2, #0
 8004dd8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004ddc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8004de0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004de4:	460b      	mov	r3, r1
 8004de6:	18db      	adds	r3, r3, r3
 8004de8:	62bb      	str	r3, [r7, #40]	; 0x28
 8004dea:	4613      	mov	r3, r2
 8004dec:	eb42 0303 	adc.w	r3, r2, r3
 8004df0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004df2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004df6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004dfa:	f7fb f9f3 	bl	80001e4 <__aeabi_uldivmod>
 8004dfe:	4602      	mov	r2, r0
 8004e00:	460b      	mov	r3, r1
 8004e02:	4b0d      	ldr	r3, [pc, #52]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004e04:	fba3 1302 	umull	r1, r3, r3, r2
 8004e08:	095b      	lsrs	r3, r3, #5
 8004e0a:	2164      	movs	r1, #100	; 0x64
 8004e0c:	fb01 f303 	mul.w	r3, r1, r3
 8004e10:	1ad3      	subs	r3, r2, r3
 8004e12:	00db      	lsls	r3, r3, #3
 8004e14:	3332      	adds	r3, #50	; 0x32
 8004e16:	4a08      	ldr	r2, [pc, #32]	; (8004e38 <UART_SetConfig+0x2d4>)
 8004e18:	fba2 2303 	umull	r2, r3, r2, r3
 8004e1c:	095b      	lsrs	r3, r3, #5
 8004e1e:	f003 0207 	and.w	r2, r3, #7
 8004e22:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e26:	681b      	ldr	r3, [r3, #0]
 8004e28:	4422      	add	r2, r4
 8004e2a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004e2c:	e105      	b.n	800503a <UART_SetConfig+0x4d6>
 8004e2e:	bf00      	nop
 8004e30:	40011000 	.word	0x40011000
 8004e34:	40011400 	.word	0x40011400
 8004e38:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004e3c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004e40:	2200      	movs	r2, #0
 8004e42:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e46:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004e4a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004e4e:	4642      	mov	r2, r8
 8004e50:	464b      	mov	r3, r9
 8004e52:	1891      	adds	r1, r2, r2
 8004e54:	6239      	str	r1, [r7, #32]
 8004e56:	415b      	adcs	r3, r3
 8004e58:	627b      	str	r3, [r7, #36]	; 0x24
 8004e5a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004e5e:	4641      	mov	r1, r8
 8004e60:	1854      	adds	r4, r2, r1
 8004e62:	4649      	mov	r1, r9
 8004e64:	eb43 0501 	adc.w	r5, r3, r1
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	00eb      	lsls	r3, r5, #3
 8004e72:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004e76:	00e2      	lsls	r2, r4, #3
 8004e78:	4614      	mov	r4, r2
 8004e7a:	461d      	mov	r5, r3
 8004e7c:	4643      	mov	r3, r8
 8004e7e:	18e3      	adds	r3, r4, r3
 8004e80:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004e84:	464b      	mov	r3, r9
 8004e86:	eb45 0303 	adc.w	r3, r5, r3
 8004e8a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004e92:	685b      	ldr	r3, [r3, #4]
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004e9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004e9e:	f04f 0200 	mov.w	r2, #0
 8004ea2:	f04f 0300 	mov.w	r3, #0
 8004ea6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004eaa:	4629      	mov	r1, r5
 8004eac:	008b      	lsls	r3, r1, #2
 8004eae:	4621      	mov	r1, r4
 8004eb0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004eb4:	4621      	mov	r1, r4
 8004eb6:	008a      	lsls	r2, r1, #2
 8004eb8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004ebc:	f7fb f992 	bl	80001e4 <__aeabi_uldivmod>
 8004ec0:	4602      	mov	r2, r0
 8004ec2:	460b      	mov	r3, r1
 8004ec4:	4b60      	ldr	r3, [pc, #384]	; (8005048 <UART_SetConfig+0x4e4>)
 8004ec6:	fba3 2302 	umull	r2, r3, r3, r2
 8004eca:	095b      	lsrs	r3, r3, #5
 8004ecc:	011c      	lsls	r4, r3, #4
 8004ece:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004ed2:	2200      	movs	r2, #0
 8004ed4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8004ed8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8004edc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8004ee0:	4642      	mov	r2, r8
 8004ee2:	464b      	mov	r3, r9
 8004ee4:	1891      	adds	r1, r2, r2
 8004ee6:	61b9      	str	r1, [r7, #24]
 8004ee8:	415b      	adcs	r3, r3
 8004eea:	61fb      	str	r3, [r7, #28]
 8004eec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004ef0:	4641      	mov	r1, r8
 8004ef2:	1851      	adds	r1, r2, r1
 8004ef4:	6139      	str	r1, [r7, #16]
 8004ef6:	4649      	mov	r1, r9
 8004ef8:	414b      	adcs	r3, r1
 8004efa:	617b      	str	r3, [r7, #20]
 8004efc:	f04f 0200 	mov.w	r2, #0
 8004f00:	f04f 0300 	mov.w	r3, #0
 8004f04:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004f08:	4659      	mov	r1, fp
 8004f0a:	00cb      	lsls	r3, r1, #3
 8004f0c:	4651      	mov	r1, sl
 8004f0e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f12:	4651      	mov	r1, sl
 8004f14:	00ca      	lsls	r2, r1, #3
 8004f16:	4610      	mov	r0, r2
 8004f18:	4619      	mov	r1, r3
 8004f1a:	4603      	mov	r3, r0
 8004f1c:	4642      	mov	r2, r8
 8004f1e:	189b      	adds	r3, r3, r2
 8004f20:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004f24:	464b      	mov	r3, r9
 8004f26:	460a      	mov	r2, r1
 8004f28:	eb42 0303 	adc.w	r3, r2, r3
 8004f2c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004f30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2200      	movs	r2, #0
 8004f38:	67bb      	str	r3, [r7, #120]	; 0x78
 8004f3a:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004f3c:	f04f 0200 	mov.w	r2, #0
 8004f40:	f04f 0300 	mov.w	r3, #0
 8004f44:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004f48:	4649      	mov	r1, r9
 8004f4a:	008b      	lsls	r3, r1, #2
 8004f4c:	4641      	mov	r1, r8
 8004f4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f52:	4641      	mov	r1, r8
 8004f54:	008a      	lsls	r2, r1, #2
 8004f56:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004f5a:	f7fb f943 	bl	80001e4 <__aeabi_uldivmod>
 8004f5e:	4602      	mov	r2, r0
 8004f60:	460b      	mov	r3, r1
 8004f62:	4b39      	ldr	r3, [pc, #228]	; (8005048 <UART_SetConfig+0x4e4>)
 8004f64:	fba3 1302 	umull	r1, r3, r3, r2
 8004f68:	095b      	lsrs	r3, r3, #5
 8004f6a:	2164      	movs	r1, #100	; 0x64
 8004f6c:	fb01 f303 	mul.w	r3, r1, r3
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	011b      	lsls	r3, r3, #4
 8004f74:	3332      	adds	r3, #50	; 0x32
 8004f76:	4a34      	ldr	r2, [pc, #208]	; (8005048 <UART_SetConfig+0x4e4>)
 8004f78:	fba2 2303 	umull	r2, r3, r2, r3
 8004f7c:	095b      	lsrs	r3, r3, #5
 8004f7e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004f82:	441c      	add	r4, r3
 8004f84:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004f88:	2200      	movs	r2, #0
 8004f8a:	673b      	str	r3, [r7, #112]	; 0x70
 8004f8c:	677a      	str	r2, [r7, #116]	; 0x74
 8004f8e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004f92:	4642      	mov	r2, r8
 8004f94:	464b      	mov	r3, r9
 8004f96:	1891      	adds	r1, r2, r2
 8004f98:	60b9      	str	r1, [r7, #8]
 8004f9a:	415b      	adcs	r3, r3
 8004f9c:	60fb      	str	r3, [r7, #12]
 8004f9e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004fa2:	4641      	mov	r1, r8
 8004fa4:	1851      	adds	r1, r2, r1
 8004fa6:	6039      	str	r1, [r7, #0]
 8004fa8:	4649      	mov	r1, r9
 8004faa:	414b      	adcs	r3, r1
 8004fac:	607b      	str	r3, [r7, #4]
 8004fae:	f04f 0200 	mov.w	r2, #0
 8004fb2:	f04f 0300 	mov.w	r3, #0
 8004fb6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004fba:	4659      	mov	r1, fp
 8004fbc:	00cb      	lsls	r3, r1, #3
 8004fbe:	4651      	mov	r1, sl
 8004fc0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fc4:	4651      	mov	r1, sl
 8004fc6:	00ca      	lsls	r2, r1, #3
 8004fc8:	4610      	mov	r0, r2
 8004fca:	4619      	mov	r1, r3
 8004fcc:	4603      	mov	r3, r0
 8004fce:	4642      	mov	r2, r8
 8004fd0:	189b      	adds	r3, r3, r2
 8004fd2:	66bb      	str	r3, [r7, #104]	; 0x68
 8004fd4:	464b      	mov	r3, r9
 8004fd6:	460a      	mov	r2, r1
 8004fd8:	eb42 0303 	adc.w	r3, r2, r3
 8004fdc:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004fde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004fe2:	685b      	ldr	r3, [r3, #4]
 8004fe4:	2200      	movs	r2, #0
 8004fe6:	663b      	str	r3, [r7, #96]	; 0x60
 8004fe8:	667a      	str	r2, [r7, #100]	; 0x64
 8004fea:	f04f 0200 	mov.w	r2, #0
 8004fee:	f04f 0300 	mov.w	r3, #0
 8004ff2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ff6:	4649      	mov	r1, r9
 8004ff8:	008b      	lsls	r3, r1, #2
 8004ffa:	4641      	mov	r1, r8
 8004ffc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005000:	4641      	mov	r1, r8
 8005002:	008a      	lsls	r2, r1, #2
 8005004:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005008:	f7fb f8ec 	bl	80001e4 <__aeabi_uldivmod>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	4b0d      	ldr	r3, [pc, #52]	; (8005048 <UART_SetConfig+0x4e4>)
 8005012:	fba3 1302 	umull	r1, r3, r3, r2
 8005016:	095b      	lsrs	r3, r3, #5
 8005018:	2164      	movs	r1, #100	; 0x64
 800501a:	fb01 f303 	mul.w	r3, r1, r3
 800501e:	1ad3      	subs	r3, r2, r3
 8005020:	011b      	lsls	r3, r3, #4
 8005022:	3332      	adds	r3, #50	; 0x32
 8005024:	4a08      	ldr	r2, [pc, #32]	; (8005048 <UART_SetConfig+0x4e4>)
 8005026:	fba2 2303 	umull	r2, r3, r2, r3
 800502a:	095b      	lsrs	r3, r3, #5
 800502c:	f003 020f 	and.w	r2, r3, #15
 8005030:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	4422      	add	r2, r4
 8005038:	609a      	str	r2, [r3, #8]
}
 800503a:	bf00      	nop
 800503c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005040:	46bd      	mov	sp, r7
 8005042:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005046:	bf00      	nop
 8005048:	51eb851f 	.word	0x51eb851f

0800504c <__libc_init_array>:
 800504c:	b570      	push	{r4, r5, r6, lr}
 800504e:	4d0d      	ldr	r5, [pc, #52]	; (8005084 <__libc_init_array+0x38>)
 8005050:	4c0d      	ldr	r4, [pc, #52]	; (8005088 <__libc_init_array+0x3c>)
 8005052:	1b64      	subs	r4, r4, r5
 8005054:	10a4      	asrs	r4, r4, #2
 8005056:	2600      	movs	r6, #0
 8005058:	42a6      	cmp	r6, r4
 800505a:	d109      	bne.n	8005070 <__libc_init_array+0x24>
 800505c:	4d0b      	ldr	r5, [pc, #44]	; (800508c <__libc_init_array+0x40>)
 800505e:	4c0c      	ldr	r4, [pc, #48]	; (8005090 <__libc_init_array+0x44>)
 8005060:	f000 f8a6 	bl	80051b0 <_init>
 8005064:	1b64      	subs	r4, r4, r5
 8005066:	10a4      	asrs	r4, r4, #2
 8005068:	2600      	movs	r6, #0
 800506a:	42a6      	cmp	r6, r4
 800506c:	d105      	bne.n	800507a <__libc_init_array+0x2e>
 800506e:	bd70      	pop	{r4, r5, r6, pc}
 8005070:	f855 3b04 	ldr.w	r3, [r5], #4
 8005074:	4798      	blx	r3
 8005076:	3601      	adds	r6, #1
 8005078:	e7ee      	b.n	8005058 <__libc_init_array+0xc>
 800507a:	f855 3b04 	ldr.w	r3, [r5], #4
 800507e:	4798      	blx	r3
 8005080:	3601      	adds	r6, #1
 8005082:	e7f2      	b.n	800506a <__libc_init_array+0x1e>
 8005084:	080052dc 	.word	0x080052dc
 8005088:	080052dc 	.word	0x080052dc
 800508c:	080052dc 	.word	0x080052dc
 8005090:	080052e0 	.word	0x080052e0

08005094 <__itoa>:
 8005094:	1e93      	subs	r3, r2, #2
 8005096:	2b22      	cmp	r3, #34	; 0x22
 8005098:	b510      	push	{r4, lr}
 800509a:	460c      	mov	r4, r1
 800509c:	d904      	bls.n	80050a8 <__itoa+0x14>
 800509e:	2300      	movs	r3, #0
 80050a0:	700b      	strb	r3, [r1, #0]
 80050a2:	461c      	mov	r4, r3
 80050a4:	4620      	mov	r0, r4
 80050a6:	bd10      	pop	{r4, pc}
 80050a8:	2a0a      	cmp	r2, #10
 80050aa:	d109      	bne.n	80050c0 <__itoa+0x2c>
 80050ac:	2800      	cmp	r0, #0
 80050ae:	da07      	bge.n	80050c0 <__itoa+0x2c>
 80050b0:	232d      	movs	r3, #45	; 0x2d
 80050b2:	700b      	strb	r3, [r1, #0]
 80050b4:	4240      	negs	r0, r0
 80050b6:	2101      	movs	r1, #1
 80050b8:	4421      	add	r1, r4
 80050ba:	f000 f837 	bl	800512c <__utoa>
 80050be:	e7f1      	b.n	80050a4 <__itoa+0x10>
 80050c0:	2100      	movs	r1, #0
 80050c2:	e7f9      	b.n	80050b8 <__itoa+0x24>

080050c4 <itoa>:
 80050c4:	f7ff bfe6 	b.w	8005094 <__itoa>

080050c8 <memset>:
 80050c8:	4402      	add	r2, r0
 80050ca:	4603      	mov	r3, r0
 80050cc:	4293      	cmp	r3, r2
 80050ce:	d100      	bne.n	80050d2 <memset+0xa>
 80050d0:	4770      	bx	lr
 80050d2:	f803 1b01 	strb.w	r1, [r3], #1
 80050d6:	e7f9      	b.n	80050cc <memset+0x4>

080050d8 <strcat>:
 80050d8:	b510      	push	{r4, lr}
 80050da:	4602      	mov	r2, r0
 80050dc:	7814      	ldrb	r4, [r2, #0]
 80050de:	4613      	mov	r3, r2
 80050e0:	3201      	adds	r2, #1
 80050e2:	2c00      	cmp	r4, #0
 80050e4:	d1fa      	bne.n	80050dc <strcat+0x4>
 80050e6:	3b01      	subs	r3, #1
 80050e8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050ec:	f803 2f01 	strb.w	r2, [r3, #1]!
 80050f0:	2a00      	cmp	r2, #0
 80050f2:	d1f9      	bne.n	80050e8 <strcat+0x10>
 80050f4:	bd10      	pop	{r4, pc}

080050f6 <strcpy>:
 80050f6:	4603      	mov	r3, r0
 80050f8:	f811 2b01 	ldrb.w	r2, [r1], #1
 80050fc:	f803 2b01 	strb.w	r2, [r3], #1
 8005100:	2a00      	cmp	r2, #0
 8005102:	d1f9      	bne.n	80050f8 <strcpy+0x2>
 8005104:	4770      	bx	lr

08005106 <strncat>:
 8005106:	b530      	push	{r4, r5, lr}
 8005108:	4604      	mov	r4, r0
 800510a:	7825      	ldrb	r5, [r4, #0]
 800510c:	4623      	mov	r3, r4
 800510e:	3401      	adds	r4, #1
 8005110:	2d00      	cmp	r5, #0
 8005112:	d1fa      	bne.n	800510a <strncat+0x4>
 8005114:	3a01      	subs	r2, #1
 8005116:	d304      	bcc.n	8005122 <strncat+0x1c>
 8005118:	f811 4b01 	ldrb.w	r4, [r1], #1
 800511c:	f803 4b01 	strb.w	r4, [r3], #1
 8005120:	b904      	cbnz	r4, 8005124 <strncat+0x1e>
 8005122:	bd30      	pop	{r4, r5, pc}
 8005124:	2a00      	cmp	r2, #0
 8005126:	d1f5      	bne.n	8005114 <strncat+0xe>
 8005128:	701a      	strb	r2, [r3, #0]
 800512a:	e7f3      	b.n	8005114 <strncat+0xe>

0800512c <__utoa>:
 800512c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800512e:	4c1f      	ldr	r4, [pc, #124]	; (80051ac <__utoa+0x80>)
 8005130:	b08b      	sub	sp, #44	; 0x2c
 8005132:	4605      	mov	r5, r0
 8005134:	460b      	mov	r3, r1
 8005136:	466e      	mov	r6, sp
 8005138:	f104 0c20 	add.w	ip, r4, #32
 800513c:	6820      	ldr	r0, [r4, #0]
 800513e:	6861      	ldr	r1, [r4, #4]
 8005140:	4637      	mov	r7, r6
 8005142:	c703      	stmia	r7!, {r0, r1}
 8005144:	3408      	adds	r4, #8
 8005146:	4564      	cmp	r4, ip
 8005148:	463e      	mov	r6, r7
 800514a:	d1f7      	bne.n	800513c <__utoa+0x10>
 800514c:	7921      	ldrb	r1, [r4, #4]
 800514e:	7139      	strb	r1, [r7, #4]
 8005150:	1e91      	subs	r1, r2, #2
 8005152:	6820      	ldr	r0, [r4, #0]
 8005154:	6038      	str	r0, [r7, #0]
 8005156:	2922      	cmp	r1, #34	; 0x22
 8005158:	f04f 0100 	mov.w	r1, #0
 800515c:	d904      	bls.n	8005168 <__utoa+0x3c>
 800515e:	7019      	strb	r1, [r3, #0]
 8005160:	460b      	mov	r3, r1
 8005162:	4618      	mov	r0, r3
 8005164:	b00b      	add	sp, #44	; 0x2c
 8005166:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005168:	1e58      	subs	r0, r3, #1
 800516a:	4684      	mov	ip, r0
 800516c:	fbb5 f7f2 	udiv	r7, r5, r2
 8005170:	fb02 5617 	mls	r6, r2, r7, r5
 8005174:	3628      	adds	r6, #40	; 0x28
 8005176:	446e      	add	r6, sp
 8005178:	460c      	mov	r4, r1
 800517a:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800517e:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8005182:	462e      	mov	r6, r5
 8005184:	42b2      	cmp	r2, r6
 8005186:	f101 0101 	add.w	r1, r1, #1
 800518a:	463d      	mov	r5, r7
 800518c:	d9ee      	bls.n	800516c <__utoa+0x40>
 800518e:	2200      	movs	r2, #0
 8005190:	545a      	strb	r2, [r3, r1]
 8005192:	1919      	adds	r1, r3, r4
 8005194:	1aa5      	subs	r5, r4, r2
 8005196:	42aa      	cmp	r2, r5
 8005198:	dae3      	bge.n	8005162 <__utoa+0x36>
 800519a:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800519e:	780e      	ldrb	r6, [r1, #0]
 80051a0:	7006      	strb	r6, [r0, #0]
 80051a2:	3201      	adds	r2, #1
 80051a4:	f801 5901 	strb.w	r5, [r1], #-1
 80051a8:	e7f4      	b.n	8005194 <__utoa+0x68>
 80051aa:	bf00      	nop
 80051ac:	080052ac 	.word	0x080052ac

080051b0 <_init>:
 80051b0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051b2:	bf00      	nop
 80051b4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051b6:	bc08      	pop	{r3}
 80051b8:	469e      	mov	lr, r3
 80051ba:	4770      	bx	lr

080051bc <_fini>:
 80051bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80051be:	bf00      	nop
 80051c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80051c2:	bc08      	pop	{r3}
 80051c4:	469e      	mov	lr, r3
 80051c6:	4770      	bx	lr
