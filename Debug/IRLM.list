
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec0  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  08006054  08006054  00016054  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006104  08006104  0002144c  2**0
                  CONTENTS
  4 .ARM          00000008  08006104  08006104  00016104  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800610c  0800610c  0002144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800610c  0800610c  0001610c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006110  08006110  00016110  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000144c  20000000  08006114  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005b80  2000144c  08007560  0002144c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20006fcc  08007560  00026fcc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002144c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00014365  00000000  00000000  0002147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002817  00000000  00000000  000357e1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001210  00000000  00000000  00037ff8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001160  00000000  00000000  00039208  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175fa  00000000  00000000  0003a368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000155c3  00000000  00000000  00051962  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00091078  00000000  00000000  00066f25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f7f9d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004e28  00000000  00000000  000f7ff0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000144c 	.word	0x2000144c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	0800603c 	.word	0x0800603c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001450 	.word	0x20001450
 80001d0:	0800603c 	.word	0x0800603c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <disable_button_EEPROM_writes>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

void disable_button_EEPROM_writes(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 80004ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004f2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 2, HAL_MAX_DELAY);
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	21a0      	movs	r1, #160	; 0xa0
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <disable_button_EEPROM_writes+0x28>)
 8000502:	f002 fba1 	bl	8002c48 <HAL_I2C_Master_Transmit>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20001468 	.word	0x20001468

08000514 <initialize_buttons>:

// Initialize Buttons
void initialize_buttons(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	disable_button_EEPROM_writes();
 8000518:	f7ff ffe6 	bl	80004e8 <disable_button_EEPROM_writes>
	enable_all_buttons();
 800051c:	f000 f89a 	bl	8000654 <enable_all_buttons>
	update_buttons();
 8000520:	f000 f8ae 	bl	8000680 <update_buttons>
	HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f001 ff5f 	bl	80023e8 <HAL_Delay>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <enable_button>:

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01e      	beq.n	800057e <enable_button+0x4e>
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b09      	cmp	r3, #9
 8000544:	d107      	bne.n	8000556 <enable_button+0x26>
		io_ctrl_2 &= ~(0b1);
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <enable_button+0x5c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <enable_button+0x5c>)
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e014      	b.n	8000580 <enable_button+0x50>
	} else if (button <= 8) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d811      	bhi.n	8000580 <enable_button+0x50>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	3b01      	subs	r3, #1
 8000560:	2201      	movs	r2, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	b25b      	sxtb	r3, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	b25a      	sxtb	r2, r3
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <enable_button+0x60>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4013      	ands	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <enable_button+0x60>)
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e000      	b.n	8000580 <enable_button+0x50>
	if (!button) return;
 800057e:	bf00      	nop
	}
}
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000001 	.word	0x20000001
 8000590:	20000000 	.word	0x20000000

08000594 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d01c      	beq.n	80005de <disable_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	d107      	bne.n	80005ba <disable_button+0x26>
		io_ctrl_2 |= 0b1;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <disable_button+0x58>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <disable_button+0x58>)
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e012      	b.n	80005e0 <disable_button+0x4c>
	} else if (button <= 8) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d80f      	bhi.n	80005e0 <disable_button+0x4c>
		io_ctrl_1 |= 0b1 << (button - 1);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <disable_button+0x5c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <disable_button+0x5c>)
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e000      	b.n	80005e0 <disable_button+0x4c>
	if (!button) return;
 80005de:	bf00      	nop
	}
}
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000001 	.word	0x20000001
 80005f0:	20000000 	.word	0x20000000

080005f4 <toggle_button>:

// Toggle a button (1 indexed, left-to-right, top-to-bottom)
void toggle_button(uint8_t button) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d01c      	beq.n	800063e <toggle_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b09      	cmp	r3, #9
 8000608:	d107      	bne.n	800061a <toggle_button+0x26>
		io_ctrl_2 ^= 0b1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <toggle_button+0x58>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <toggle_button+0x58>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e012      	b.n	8000640 <toggle_button+0x4c>
	} else if (button <= 8) {
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d80f      	bhi.n	8000640 <toggle_button+0x4c>
		io_ctrl_1 ^= 0b1 << (button - 1);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b01      	subs	r3, #1
 8000624:	2201      	movs	r2, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <toggle_button+0x5c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4053      	eors	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <toggle_button+0x5c>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e000      	b.n	8000640 <toggle_button+0x4c>
	if (!button) return;
 800063e:	bf00      	nop
	}
}
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000001 	.word	0x20000001
 8000650:	20000000 	.word	0x20000000

08000654 <enable_all_buttons>:

// Enable all of the buttons
void enable_all_buttons(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 800065a:	2301      	movs	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e006      	b.n	800066e <enable_all_buttons+0x1a>
		enable_button(i);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff64 	bl	8000530 <enable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b09      	cmp	r3, #9
 8000672:	d9f5      	bls.n	8000660 <enable_all_buttons+0xc>
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <update_buttons>:
		toggle_button(i);
	}
}

// Write the updated button configuration to the remote
void update_buttons(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 8000686:	23f2      	movs	r3, #242	; 0xf2
 8000688:	713b      	strb	r3, [r7, #4]
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <update_buttons+0x30>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	717b      	strb	r3, [r7, #5]
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <update_buttons+0x34>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 8000696:	1d3a      	adds	r2, r7, #4
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2303      	movs	r3, #3
 80006a0:	21a0      	movs	r1, #160	; 0xa0
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <update_buttons+0x38>)
 80006a4:	f002 fad0 	bl	8002c48 <HAL_I2C_Master_Transmit>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000001 	.word	0x20000001
 80006b8:	20001468 	.word	0x20001468

080006bc <poll_buttons>:

// Poll buttons, returns the first pressed button
// or zero if no button is pressed
uint8_t poll_buttons(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	C1_HIGH();
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	483c      	ldr	r0, [pc, #240]	; (80007b8 <poll_buttons+0xfc>)
 80006c6:	f002 f961 	bl	800298c <HAL_GPIO_WritePin>
	C2_HIGH();
 80006ca:	2201      	movs	r2, #1
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	483a      	ldr	r0, [pc, #232]	; (80007b8 <poll_buttons+0xfc>)
 80006d0:	f002 f95c 	bl	800298c <HAL_GPIO_WritePin>
	C0_LOW();
 80006d4:	2200      	movs	r2, #0
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4838      	ldr	r0, [pc, #224]	; (80007bc <poll_buttons+0x100>)
 80006da:	f002 f957 	bl	800298c <HAL_GPIO_WritePin>
	if (!R0_READ()) return 1;
 80006de:	2108      	movs	r1, #8
 80006e0:	4836      	ldr	r0, [pc, #216]	; (80007bc <poll_buttons+0x100>)
 80006e2:	f002 f93b 	bl	800295c <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <poll_buttons+0x34>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e061      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R1_READ()) return 4;
 80006f0:	2120      	movs	r1, #32
 80006f2:	4832      	ldr	r0, [pc, #200]	; (80007bc <poll_buttons+0x100>)
 80006f4:	f002 f932 	bl	800295c <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <poll_buttons+0x46>
 80006fe:	2304      	movs	r3, #4
 8000700:	e058      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R2_READ()) return 7;
 8000702:	2110      	movs	r1, #16
 8000704:	482d      	ldr	r0, [pc, #180]	; (80007bc <poll_buttons+0x100>)
 8000706:	f002 f929 	bl	800295c <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <poll_buttons+0x58>
 8000710:	2307      	movs	r3, #7
 8000712:	e04f      	b.n	80007b4 <poll_buttons+0xf8>
	C0_HIGH();
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4828      	ldr	r0, [pc, #160]	; (80007bc <poll_buttons+0x100>)
 800071a:	f002 f937 	bl	800298c <HAL_GPIO_WritePin>

	C1_LOW();
 800071e:	2200      	movs	r2, #0
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	4825      	ldr	r0, [pc, #148]	; (80007b8 <poll_buttons+0xfc>)
 8000724:	f002 f932 	bl	800298c <HAL_GPIO_WritePin>
	if (!R0_READ()) return 2;
 8000728:	2108      	movs	r1, #8
 800072a:	4824      	ldr	r0, [pc, #144]	; (80007bc <poll_buttons+0x100>)
 800072c:	f002 f916 	bl	800295c <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d101      	bne.n	800073a <poll_buttons+0x7e>
 8000736:	2302      	movs	r3, #2
 8000738:	e03c      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R1_READ()) return 5;
 800073a:	2120      	movs	r1, #32
 800073c:	481f      	ldr	r0, [pc, #124]	; (80007bc <poll_buttons+0x100>)
 800073e:	f002 f90d 	bl	800295c <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <poll_buttons+0x90>
 8000748:	2305      	movs	r3, #5
 800074a:	e033      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R2_READ()) return 8;
 800074c:	2110      	movs	r1, #16
 800074e:	481b      	ldr	r0, [pc, #108]	; (80007bc <poll_buttons+0x100>)
 8000750:	f002 f904 	bl	800295c <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <poll_buttons+0xa2>
 800075a:	2308      	movs	r3, #8
 800075c:	e02a      	b.n	80007b4 <poll_buttons+0xf8>
	C1_HIGH();
 800075e:	2201      	movs	r2, #1
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	4815      	ldr	r0, [pc, #84]	; (80007b8 <poll_buttons+0xfc>)
 8000764:	f002 f912 	bl	800298c <HAL_GPIO_WritePin>

	C2_LOW();
 8000768:	2200      	movs	r2, #0
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <poll_buttons+0xfc>)
 800076e:	f002 f90d 	bl	800298c <HAL_GPIO_WritePin>
	if (!R0_READ()) return 3;
 8000772:	2108      	movs	r1, #8
 8000774:	4811      	ldr	r0, [pc, #68]	; (80007bc <poll_buttons+0x100>)
 8000776:	f002 f8f1 	bl	800295c <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <poll_buttons+0xc8>
 8000780:	2303      	movs	r3, #3
 8000782:	e017      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R1_READ()) return 6;
 8000784:	2120      	movs	r1, #32
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <poll_buttons+0x100>)
 8000788:	f002 f8e8 	bl	800295c <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <poll_buttons+0xda>
 8000792:	2306      	movs	r3, #6
 8000794:	e00e      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R2_READ()) return 9;
 8000796:	2110      	movs	r1, #16
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <poll_buttons+0x100>)
 800079a:	f002 f8df 	bl	800295c <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <poll_buttons+0xec>
 80007a4:	2309      	movs	r3, #9
 80007a6:	e005      	b.n	80007b4 <poll_buttons+0xf8>
	C2_HIGH();
 80007a8:	2201      	movs	r2, #1
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <poll_buttons+0xfc>)
 80007ae:	f002 f8ed 	bl	800298c <HAL_GPIO_WritePin>

	return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020400 	.word	0x40020400

080007c0 <init_default_controller>:

extern UART_HandleTypeDef huart1;
extern Controller controller;
extern unsigned char UART1_rxBuffer[8192];

void init_default_controller() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
//	controller.devices[1].num_touch_commands = 4;
//

	char device_number[3];
	char cmd_number[3];
	for (uint8_t i = 0; i < 18; ++i) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	73fb      	strb	r3, [r7, #15]
 80007ca:	e06d      	b.n	80008a8 <init_default_controller+0xe8>
		strcpy(controller.devices[i].name, "Example ");
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	4413      	add	r3, r2
 80007d8:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 80007dc:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <init_default_controller+0xf8>)
 80007de:	4413      	add	r3, r2
 80007e0:	3304      	adds	r3, #4
 80007e2:	4936      	ldr	r1, [pc, #216]	; (80008bc <init_default_controller+0xfc>)
 80007e4:	461a      	mov	r2, r3
 80007e6:	460b      	mov	r3, r1
 80007e8:	cb03      	ldmia	r3!, {r0, r1}
 80007ea:	6010      	str	r0, [r2, #0]
 80007ec:	6051      	str	r1, [r2, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	7213      	strb	r3, [r2, #8]
		itoa(i + 1, device_number, 10);
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	3301      	adds	r3, #1
 80007f6:	f107 0108 	add.w	r1, r7, #8
 80007fa:	220a      	movs	r2, #10
 80007fc:	4618      	mov	r0, r3
 80007fe:	f005 fbb9 	bl	8005f74 <itoa>
		strcat(controller.devices[i].name, device_number);
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	4413      	add	r3, r2
 800080e:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <init_default_controller+0xf8>)
 8000814:	4413      	add	r3, r2
 8000816:	3304      	adds	r3, #4
 8000818:	f107 0208 	add.w	r2, r7, #8
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f005 fbb2 	bl	8005f88 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 8000824:	2300      	movs	r3, #0
 8000826:	73bb      	strb	r3, [r7, #14]
 8000828:	e038      	b.n	800089c <init_default_controller+0xdc>
			strcpy(controller.devices[i].commands[j].desc, "Command ");
 800082a:	7bf9      	ldrb	r1, [r7, #15]
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	461a      	mov	r2, r3
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	441a      	add	r2, r3
 8000834:	00d3      	lsls	r3, r2, #3
 8000836:	441a      	add	r2, r3
 8000838:	460b      	mov	r3, r1
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	440b      	add	r3, r1
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	440b      	add	r3, r1
 8000842:	4413      	add	r3, r2
 8000844:	3310      	adds	r3, #16
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <init_default_controller+0xf8>)
 8000848:	4413      	add	r3, r2
 800084a:	3301      	adds	r3, #1
 800084c:	491c      	ldr	r1, [pc, #112]	; (80008c0 <init_default_controller+0x100>)
 800084e:	461a      	mov	r2, r3
 8000850:	460b      	mov	r3, r1
 8000852:	cb03      	ldmia	r3!, {r0, r1}
 8000854:	6010      	str	r0, [r2, #0]
 8000856:	6051      	str	r1, [r2, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	7213      	strb	r3, [r2, #8]
			itoa(j + 1, cmd_number, 10);
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	3301      	adds	r3, #1
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	220a      	movs	r2, #10
 8000864:	4618      	mov	r0, r3
 8000866:	f005 fb85 	bl	8005f74 <itoa>
			strcat(controller.devices[i].commands[j].desc, cmd_number);
 800086a:	7bf9      	ldrb	r1, [r7, #15]
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	461a      	mov	r2, r3
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	441a      	add	r2, r3
 8000874:	00d3      	lsls	r3, r2, #3
 8000876:	441a      	add	r2, r3
 8000878:	460b      	mov	r3, r1
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	440b      	add	r3, r1
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	440b      	add	r3, r1
 8000882:	4413      	add	r3, r2
 8000884:	3310      	adds	r3, #16
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <init_default_controller+0xf8>)
 8000888:	4413      	add	r3, r2
 800088a:	3301      	adds	r3, #1
 800088c:	1d3a      	adds	r2, r7, #4
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f005 fb79 	bl	8005f88 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	3301      	adds	r3, #1
 800089a:	73bb      	strb	r3, [r7, #14]
 800089c:	7bbb      	ldrb	r3, [r7, #14]
 800089e:	2b17      	cmp	r3, #23
 80008a0:	d9c3      	bls.n	800082a <init_default_controller+0x6a>
	for (uint8_t i = 0; i < 18; ++i) {
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b11      	cmp	r3, #17
 80008ac:	d98e      	bls.n	80007cc <init_default_controller+0xc>
		}
	}
}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	200016c4 	.word	0x200016c4
 80008bc:	0800605c 	.word	0x0800605c
 80008c0:	08006068 	.word	0x08006068

080008c4 <init_xbee_communication>:

void init_xbee_communication() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	4903      	ldr	r1, [pc, #12]	; (80008d8 <init_xbee_communication+0x14>)
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <init_xbee_communication+0x18>)
 80008ce:	f005 f832 	bl	8005936 <HAL_UART_Receive_IT>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20004cd8 	.word	0x20004cd8
 80008dc:	2000167c 	.word	0x2000167c

080008e0 <Toggle>:
#include "main.h"
#include "stm32f4xx_hal.h"
#define dataL 66
extern uint16_t data[];
extern TIM_HandleTypeDef htim3;
void Toggle(int on){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if(!on){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d104      	bne.n	80008f8 <Toggle+0x18>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80008ee:	2104      	movs	r1, #4
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <Toggle+0x28>)
 80008f2:	f003 fcdb 	bl	80042ac <HAL_TIM_PWM_Start>
	}
	else{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	}
}
 80008f6:	e003      	b.n	8000900 <Toggle+0x20>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80008f8:	2104      	movs	r1, #4
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <Toggle+0x28>)
 80008fc:	f003 fd86 	bl	800440c <HAL_TIM_PWM_Stop>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200015a4 	.word	0x200015a4

0800090c <Delay>:
void Delay(uint16_t delay){
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]

	if(delay == 0)
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d01c      	beq.n	8000956 <Delay+0x4a>
			return;
	TIM1->SR = 0;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <Delay+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
	TIM1->ARR = delay;
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <Delay+0x58>)
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CNT = 0;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <Delay+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CR1 |= 1; //enables timer 1
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <Delay+0x58>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <Delay+0x58>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6013      	str	r3, [r2, #0]
	while(!(TIM1->SR & TIM_SR_UIF));
 800093a:	bf00      	nop
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <Delay+0x58>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f9      	beq.n	800093c <Delay+0x30>
	TIM1->CR1 &= ~(1); //disables timer 1
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <Delay+0x58>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a05      	ldr	r2, [pc, #20]	; (8000964 <Delay+0x58>)
 800094e:	f023 0301 	bic.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	e000      	b.n	8000958 <Delay+0x4c>
			return;
 8000956:	bf00      	nop
}
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40010000 	.word	0x40010000

08000968 <Transmit>:
void Transmit(){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	int on = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
	for(size_t i = 0; i<dataL;++i){
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	e010      	b.n	800099a <Transmit+0x32>
		Toggle(on);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ffb1 	bl	80008e0 <Toggle>
		on^=1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	607b      	str	r3, [r7, #4]
		Delay(data[i]);
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <Transmit+0x48>)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffbc 	bl	800090c <Delay>
	for(size_t i = 0; i<dataL;++i){
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b41      	cmp	r3, #65	; 0x41
 800099e:	d9eb      	bls.n	8000978 <Transmit+0x10>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <Transmit+0x4c>)
 80009a4:	f003 fd32 	bl	800440c <HAL_TIM_PWM_Stop>

}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20006cd8 	.word	0x20006cd8
 80009b4:	200015a4 	.word	0x200015a4

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b082      	sub	sp, #8
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f001 fca1 	bl	8002304 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f873 	bl	8000aac <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 fb4b 	bl	8001060 <MX_GPIO_Init>
  MX_SPI2_Init();
 80009ca:	f000 f909 	bl	8000be0 <MX_SPI2_Init>
  MX_TIM2_Init();
 80009ce:	f000 f98f 	bl	8000cf0 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80009d2:	f000 fb1b 	bl	800100c <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80009d6:	f000 f8d5 	bl	8000b84 <MX_I2C1_Init>
  MX_TIM5_Init();
 80009da:	f000 fac9 	bl	8000f70 <MX_TIM5_Init>
  MX_TIM1_Init();
 80009de:	f000 f935 	bl	8000c4c <MX_TIM1_Init>
  MX_TIM3_Init();
 80009e2:	f000 f9f5 	bl	8000dd0 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009e6:	f000 fa69 	bl	8000ebc <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  init_default_controller(&controller);
 80009ea:	4829      	ldr	r0, [pc, #164]	; (8000a90 <main+0xd8>)
 80009ec:	f7ff fee8 	bl	80007c0 <init_default_controller>
  init_displays();
 80009f0:	f000 fee8 	bl	80017c4 <init_displays>
  HAL_TIM_Base_Start_IT(&htim5);
 80009f4:	4827      	ldr	r0, [pc, #156]	; (8000a94 <main+0xdc>)
 80009f6:	f003 fba7 	bl	8004148 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80009fa:	2108      	movs	r1, #8
 80009fc:	4826      	ldr	r0, [pc, #152]	; (8000a98 <main+0xe0>)
 80009fe:	f003 fc55 	bl	80042ac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a02:	2104      	movs	r1, #4
 8000a04:	4825      	ldr	r0, [pc, #148]	; (8000a9c <main+0xe4>)
 8000a06:	f003 fc51 	bl	80042ac <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //Starts timer 2
 8000a0a:	2100      	movs	r1, #0
 8000a0c:	4822      	ldr	r0, [pc, #136]	; (8000a98 <main+0xe0>)
 8000a0e:	f003 fdbb 	bl	8004588 <HAL_TIM_IC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,50);
 8000a12:	4b23      	ldr	r3, [pc, #140]	; (8000aa0 <main+0xe8>)
 8000a14:	681b      	ldr	r3, [r3, #0]
 8000a16:	2232      	movs	r2, #50	; 0x32
 8000a18:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 200); // Adjust LED Brightness
 8000a1a:	4b20      	ldr	r3, [pc, #128]	; (8000a9c <main+0xe4>)
 8000a1c:	681b      	ldr	r3, [r3, #0]
 8000a1e:	22c8      	movs	r2, #200	; 0xc8
 8000a20:	639a      	str	r2, [r3, #56]	; 0x38
  initialize_buttons();
 8000a22:	f7ff fd77 	bl	8000514 <initialize_buttons>
  //update_buttons();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  display_menu(main_menu, 1, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2101      	movs	r1, #1
 8000a2a:	2000      	movs	r0, #0
 8000a2c:	f000 fc4e 	bl	80012cc <display_menu>
  uint8_t pressed_button = 0;
 8000a30:	2300      	movs	r3, #0
 8000a32:	70fb      	strb	r3, [r7, #3]
  while (1)
  {
	  if (button) {
 8000a34:	4b1b      	ldr	r3, [pc, #108]	; (8000aa4 <main+0xec>)
 8000a36:	781b      	ldrb	r3, [r3, #0]
 8000a38:	2b00      	cmp	r3, #0
 8000a3a:	d00b      	beq.n	8000a54 <main+0x9c>
		  pressed_button = button;
 8000a3c:	4b19      	ldr	r3, [pc, #100]	; (8000aa4 <main+0xec>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	70fb      	strb	r3, [r7, #3]
		  while(button);
 8000a42:	bf00      	nop
 8000a44:	4b17      	ldr	r3, [pc, #92]	; (8000aa4 <main+0xec>)
 8000a46:	781b      	ldrb	r3, [r3, #0]
 8000a48:	2b00      	cmp	r3, #0
 8000a4a:	d1fb      	bne.n	8000a44 <main+0x8c>
		  button_pressed(pressed_button);
 8000a4c:	78fb      	ldrb	r3, [r7, #3]
 8000a4e:	4618      	mov	r0, r3
 8000a50:	f000 fd42 	bl	80014d8 <button_pressed>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8000a54:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a58:	4813      	ldr	r0, [pc, #76]	; (8000aa8 <main+0xf0>)
 8000a5a:	f001 ff7f 	bl	800295c <HAL_GPIO_ReadPin>
 8000a5e:	4603      	mov	r3, r0
 8000a60:	2b00      	cmp	r3, #0
 8000a62:	d1e7      	bne.n	8000a34 <main+0x7c>
		  while(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13));
 8000a64:	bf00      	nop
 8000a66:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a6a:	480f      	ldr	r0, [pc, #60]	; (8000aa8 <main+0xf0>)
 8000a6c:	f001 ff76 	bl	800295c <HAL_GPIO_ReadPin>
 8000a70:	4603      	mov	r3, r0
 8000a72:	2b00      	cmp	r3, #0
 8000a74:	d0f7      	beq.n	8000a66 <main+0xae>
		  for(int i =0; i<2;++i)
 8000a76:	2300      	movs	r3, #0
 8000a78:	607b      	str	r3, [r7, #4]
 8000a7a:	e004      	b.n	8000a86 <main+0xce>
			  Transmit();
 8000a7c:	f7ff ff74 	bl	8000968 <Transmit>
		  for(int i =0; i<2;++i)
 8000a80:	687b      	ldr	r3, [r7, #4]
 8000a82:	3301      	adds	r3, #1
 8000a84:	607b      	str	r3, [r7, #4]
 8000a86:	687b      	ldr	r3, [r7, #4]
 8000a88:	2b01      	cmp	r3, #1
 8000a8a:	ddf7      	ble.n	8000a7c <main+0xc4>
	  if (button) {
 8000a8c:	e7d2      	b.n	8000a34 <main+0x7c>
 8000a8e:	bf00      	nop
 8000a90:	200016c4 	.word	0x200016c4
 8000a94:	20001634 	.word	0x20001634
 8000a98:	2000155c 	.word	0x2000155c
 8000a9c:	200015ec 	.word	0x200015ec
 8000aa0:	200015a4 	.word	0x200015a4
 8000aa4:	200016c1 	.word	0x200016c1
 8000aa8:	40020800 	.word	0x40020800

08000aac <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b094      	sub	sp, #80	; 0x50
 8000ab0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000ab2:	f107 0320 	add.w	r3, r7, #32
 8000ab6:	2230      	movs	r2, #48	; 0x30
 8000ab8:	2100      	movs	r1, #0
 8000aba:	4618      	mov	r0, r3
 8000abc:	f005 fa5c 	bl	8005f78 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000ac0:	f107 030c 	add.w	r3, r7, #12
 8000ac4:	2200      	movs	r2, #0
 8000ac6:	601a      	str	r2, [r3, #0]
 8000ac8:	605a      	str	r2, [r3, #4]
 8000aca:	609a      	str	r2, [r3, #8]
 8000acc:	60da      	str	r2, [r3, #12]
 8000ace:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000ad0:	2300      	movs	r3, #0
 8000ad2:	60bb      	str	r3, [r7, #8]
 8000ad4:	4b29      	ldr	r3, [pc, #164]	; (8000b7c <SystemClock_Config+0xd0>)
 8000ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ad8:	4a28      	ldr	r2, [pc, #160]	; (8000b7c <SystemClock_Config+0xd0>)
 8000ada:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000ade:	6413      	str	r3, [r2, #64]	; 0x40
 8000ae0:	4b26      	ldr	r3, [pc, #152]	; (8000b7c <SystemClock_Config+0xd0>)
 8000ae2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ae4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000ae8:	60bb      	str	r3, [r7, #8]
 8000aea:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000aec:	2300      	movs	r3, #0
 8000aee:	607b      	str	r3, [r7, #4]
 8000af0:	4b23      	ldr	r3, [pc, #140]	; (8000b80 <SystemClock_Config+0xd4>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000af8:	4a21      	ldr	r2, [pc, #132]	; (8000b80 <SystemClock_Config+0xd4>)
 8000afa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000afe:	6013      	str	r3, [r2, #0]
 8000b00:	4b1f      	ldr	r3, [pc, #124]	; (8000b80 <SystemClock_Config+0xd4>)
 8000b02:	681b      	ldr	r3, [r3, #0]
 8000b04:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b08:	607b      	str	r3, [r7, #4]
 8000b0a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b0c:	2302      	movs	r3, #2
 8000b0e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b10:	2301      	movs	r3, #1
 8000b12:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b14:	2310      	movs	r3, #16
 8000b16:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b18:	2302      	movs	r3, #2
 8000b1a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b1c:	2300      	movs	r3, #0
 8000b1e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b20:	2310      	movs	r3, #16
 8000b22:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b24:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b28:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b2a:	2304      	movs	r3, #4
 8000b2c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b2e:	2307      	movs	r3, #7
 8000b30:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b32:	f107 0320 	add.w	r3, r7, #32
 8000b36:	4618      	mov	r0, r3
 8000b38:	f002 fb8e 	bl	8003258 <HAL_RCC_OscConfig>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b42:	f000 fbbd 	bl	80012c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b46:	230f      	movs	r3, #15
 8000b48:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b4a:	2302      	movs	r3, #2
 8000b4c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b4e:	2300      	movs	r3, #0
 8000b50:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b52:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b56:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b58:	2300      	movs	r3, #0
 8000b5a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b5c:	f107 030c 	add.w	r3, r7, #12
 8000b60:	2102      	movs	r1, #2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f002 fdf0 	bl	8003748 <HAL_RCC_ClockConfig>
 8000b68:	4603      	mov	r3, r0
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d001      	beq.n	8000b72 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000b6e:	f000 fba7 	bl	80012c0 <Error_Handler>
  }
}
 8000b72:	bf00      	nop
 8000b74:	3750      	adds	r7, #80	; 0x50
 8000b76:	46bd      	mov	sp, r7
 8000b78:	bd80      	pop	{r7, pc}
 8000b7a:	bf00      	nop
 8000b7c:	40023800 	.word	0x40023800
 8000b80:	40007000 	.word	0x40007000

08000b84 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000b84:	b580      	push	{r7, lr}
 8000b86:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000b88:	4b12      	ldr	r3, [pc, #72]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b8a:	4a13      	ldr	r2, [pc, #76]	; (8000bd8 <MX_I2C1_Init+0x54>)
 8000b8c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000b8e:	4b11      	ldr	r3, [pc, #68]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b90:	4a12      	ldr	r2, [pc, #72]	; (8000bdc <MX_I2C1_Init+0x58>)
 8000b92:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000b94:	4b0f      	ldr	r3, [pc, #60]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b96:	2200      	movs	r2, #0
 8000b98:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000b9a:	4b0e      	ldr	r3, [pc, #56]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000b9c:	2200      	movs	r2, #0
 8000b9e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000ba0:	4b0c      	ldr	r3, [pc, #48]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000ba2:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ba6:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ba8:	4b0a      	ldr	r3, [pc, #40]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000baa:	2200      	movs	r2, #0
 8000bac:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000bae:	4b09      	ldr	r3, [pc, #36]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bb0:	2200      	movs	r2, #0
 8000bb2:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000bb4:	4b07      	ldr	r3, [pc, #28]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bb6:	2200      	movs	r2, #0
 8000bb8:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000bba:	4b06      	ldr	r3, [pc, #24]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bbc:	2200      	movs	r2, #0
 8000bbe:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000bc0:	4804      	ldr	r0, [pc, #16]	; (8000bd4 <MX_I2C1_Init+0x50>)
 8000bc2:	f001 fefd 	bl	80029c0 <HAL_I2C_Init>
 8000bc6:	4603      	mov	r3, r0
 8000bc8:	2b00      	cmp	r3, #0
 8000bca:	d001      	beq.n	8000bd0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000bcc:	f000 fb78 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000bd0:	bf00      	nop
 8000bd2:	bd80      	pop	{r7, pc}
 8000bd4:	20001468 	.word	0x20001468
 8000bd8:	40005400 	.word	0x40005400
 8000bdc:	000186a0 	.word	0x000186a0

08000be0 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000be0:	b580      	push	{r7, lr}
 8000be2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000be4:	4b17      	ldr	r3, [pc, #92]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000be6:	4a18      	ldr	r2, [pc, #96]	; (8000c48 <MX_SPI2_Init+0x68>)
 8000be8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000bea:	4b16      	ldr	r3, [pc, #88]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000bec:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000bf0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000bf2:	4b14      	ldr	r3, [pc, #80]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000bf8:	4b12      	ldr	r3, [pc, #72]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000bfa:	2200      	movs	r2, #0
 8000bfc:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000bfe:	4b11      	ldr	r3, [pc, #68]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c04:	4b0f      	ldr	r3, [pc, #60]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c06:	2200      	movs	r2, #0
 8000c08:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000c0a:	4b0e      	ldr	r3, [pc, #56]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c0c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000c10:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000c12:	4b0c      	ldr	r3, [pc, #48]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c14:	2230      	movs	r2, #48	; 0x30
 8000c16:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c18:	4b0a      	ldr	r3, [pc, #40]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c1a:	2200      	movs	r2, #0
 8000c1c:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c1e:	4b09      	ldr	r3, [pc, #36]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c24:	4b07      	ldr	r3, [pc, #28]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000c2a:	4b06      	ldr	r3, [pc, #24]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c2c:	220a      	movs	r2, #10
 8000c2e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000c30:	4804      	ldr	r0, [pc, #16]	; (8000c44 <MX_SPI2_Init+0x64>)
 8000c32:	f002 ffa9 	bl	8003b88 <HAL_SPI_Init>
 8000c36:	4603      	mov	r3, r0
 8000c38:	2b00      	cmp	r3, #0
 8000c3a:	d001      	beq.n	8000c40 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000c3c:	f000 fb40 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000c40:	bf00      	nop
 8000c42:	bd80      	pop	{r7, pc}
 8000c44:	200014bc 	.word	0x200014bc
 8000c48:	40003800 	.word	0x40003800

08000c4c <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000c4c:	b580      	push	{r7, lr}
 8000c4e:	b086      	sub	sp, #24
 8000c50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000c52:	f107 0308 	add.w	r3, r7, #8
 8000c56:	2200      	movs	r2, #0
 8000c58:	601a      	str	r2, [r3, #0]
 8000c5a:	605a      	str	r2, [r3, #4]
 8000c5c:	609a      	str	r2, [r3, #8]
 8000c5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000c60:	463b      	mov	r3, r7
 8000c62:	2200      	movs	r2, #0
 8000c64:	601a      	str	r2, [r3, #0]
 8000c66:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000c68:	4b1f      	ldr	r3, [pc, #124]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c6a:	4a20      	ldr	r2, [pc, #128]	; (8000cec <MX_TIM1_Init+0xa0>)
 8000c6c:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1869;
 8000c6e:	4b1e      	ldr	r3, [pc, #120]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c70:	f240 724d 	movw	r2, #1869	; 0x74d
 8000c74:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000c76:	4b1c      	ldr	r3, [pc, #112]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c78:	2200      	movs	r2, #0
 8000c7a:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000c7c:	4b1a      	ldr	r3, [pc, #104]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c7e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000c82:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000c84:	4b18      	ldr	r3, [pc, #96]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c86:	2200      	movs	r2, #0
 8000c88:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000c8a:	4b17      	ldr	r3, [pc, #92]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c8c:	2200      	movs	r2, #0
 8000c8e:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000c90:	4b15      	ldr	r3, [pc, #84]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c92:	2200      	movs	r2, #0
 8000c94:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000c96:	4814      	ldr	r0, [pc, #80]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000c98:	f003 fa06 	bl	80040a8 <HAL_TIM_Base_Init>
 8000c9c:	4603      	mov	r3, r0
 8000c9e:	2b00      	cmp	r3, #0
 8000ca0:	d001      	beq.n	8000ca6 <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000ca2:	f000 fb0d 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ca6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000caa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000cac:	f107 0308 	add.w	r3, r7, #8
 8000cb0:	4619      	mov	r1, r3
 8000cb2:	480d      	ldr	r0, [pc, #52]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000cb4:	f004 f896 	bl	8004de4 <HAL_TIM_ConfigClockSource>
 8000cb8:	4603      	mov	r3, r0
 8000cba:	2b00      	cmp	r3, #0
 8000cbc:	d001      	beq.n	8000cc2 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000cbe:	f000 faff 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000cca:	463b      	mov	r3, r7
 8000ccc:	4619      	mov	r1, r3
 8000cce:	4806      	ldr	r0, [pc, #24]	; (8000ce8 <MX_TIM1_Init+0x9c>)
 8000cd0:	f004 fd62 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8000cd4:	4603      	mov	r3, r0
 8000cd6:	2b00      	cmp	r3, #0
 8000cd8:	d001      	beq.n	8000cde <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000cda:	f000 faf1 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000cde:	bf00      	nop
 8000ce0:	3718      	adds	r7, #24
 8000ce2:	46bd      	mov	sp, r7
 8000ce4:	bd80      	pop	{r7, pc}
 8000ce6:	bf00      	nop
 8000ce8:	20001514 	.word	0x20001514
 8000cec:	40010000 	.word	0x40010000

08000cf0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000cf0:	b580      	push	{r7, lr}
 8000cf2:	b08a      	sub	sp, #40	; 0x28
 8000cf4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000cf6:	f107 0318 	add.w	r3, r7, #24
 8000cfa:	2200      	movs	r2, #0
 8000cfc:	601a      	str	r2, [r3, #0]
 8000cfe:	605a      	str	r2, [r3, #4]
 8000d00:	609a      	str	r2, [r3, #8]
 8000d02:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d04:	f107 0310 	add.w	r3, r7, #16
 8000d08:	2200      	movs	r2, #0
 8000d0a:	601a      	str	r2, [r3, #0]
 8000d0c:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000d0e:	463b      	mov	r3, r7
 8000d10:	2200      	movs	r2, #0
 8000d12:	601a      	str	r2, [r3, #0]
 8000d14:	605a      	str	r2, [r3, #4]
 8000d16:	609a      	str	r2, [r3, #8]
 8000d18:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000d1a:	4b2c      	ldr	r3, [pc, #176]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d1c:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000d20:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1869;
 8000d22:	4b2a      	ldr	r3, [pc, #168]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d24:	f240 724d 	movw	r2, #1869	; 0x74d
 8000d28:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d2a:	4b28      	ldr	r3, [pc, #160]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d2c:	2200      	movs	r2, #0
 8000d2e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000d30:	4b26      	ldr	r3, [pc, #152]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d32:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000d36:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d38:	4b24      	ldr	r3, [pc, #144]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d3e:	4b23      	ldr	r3, [pc, #140]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000d44:	4821      	ldr	r0, [pc, #132]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d46:	f003 f9af 	bl	80040a8 <HAL_TIM_Base_Init>
 8000d4a:	4603      	mov	r3, r0
 8000d4c:	2b00      	cmp	r3, #0
 8000d4e:	d001      	beq.n	8000d54 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000d50:	f000 fab6 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d54:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d58:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d5a:	f107 0318 	add.w	r3, r7, #24
 8000d5e:	4619      	mov	r1, r3
 8000d60:	481a      	ldr	r0, [pc, #104]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d62:	f004 f83f 	bl	8004de4 <HAL_TIM_ConfigClockSource>
 8000d66:	4603      	mov	r3, r0
 8000d68:	2b00      	cmp	r3, #0
 8000d6a:	d001      	beq.n	8000d70 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000d6c:	f000 faa8 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000d70:	4816      	ldr	r0, [pc, #88]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d72:	f003 fbaf 	bl	80044d4 <HAL_TIM_IC_Init>
 8000d76:	4603      	mov	r3, r0
 8000d78:	2b00      	cmp	r3, #0
 8000d7a:	d001      	beq.n	8000d80 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000d7c:	f000 faa0 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d80:	2300      	movs	r3, #0
 8000d82:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d84:	2300      	movs	r3, #0
 8000d86:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d88:	f107 0310 	add.w	r3, r7, #16
 8000d8c:	4619      	mov	r1, r3
 8000d8e:	480f      	ldr	r0, [pc, #60]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000d90:	f004 fd02 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8000d94:	4603      	mov	r3, r0
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d001      	beq.n	8000d9e <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000d9a:	f000 fa91 	bl	80012c0 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000d9e:	230a      	movs	r3, #10
 8000da0:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000da2:	2301      	movs	r3, #1
 8000da4:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000da6:	2300      	movs	r3, #0
 8000da8:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000daa:	2300      	movs	r3, #0
 8000dac:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	2200      	movs	r2, #0
 8000db2:	4619      	mov	r1, r3
 8000db4:	4805      	ldr	r0, [pc, #20]	; (8000dcc <MX_TIM2_Init+0xdc>)
 8000db6:	f003 feb7 	bl	8004b28 <HAL_TIM_IC_ConfigChannel>
 8000dba:	4603      	mov	r3, r0
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d001      	beq.n	8000dc4 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000dc0:	f000 fa7e 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000dc4:	bf00      	nop
 8000dc6:	3728      	adds	r7, #40	; 0x28
 8000dc8:	46bd      	mov	sp, r7
 8000dca:	bd80      	pop	{r7, pc}
 8000dcc:	2000155c 	.word	0x2000155c

08000dd0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000dd0:	b580      	push	{r7, lr}
 8000dd2:	b08e      	sub	sp, #56	; 0x38
 8000dd4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000dda:	2200      	movs	r2, #0
 8000ddc:	601a      	str	r2, [r3, #0]
 8000dde:	605a      	str	r2, [r3, #4]
 8000de0:	609a      	str	r2, [r3, #8]
 8000de2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de4:	f107 0320 	add.w	r3, r7, #32
 8000de8:	2200      	movs	r2, #0
 8000dea:	601a      	str	r2, [r3, #0]
 8000dec:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000dee:	1d3b      	adds	r3, r7, #4
 8000df0:	2200      	movs	r2, #0
 8000df2:	601a      	str	r2, [r3, #0]
 8000df4:	605a      	str	r2, [r3, #4]
 8000df6:	609a      	str	r2, [r3, #8]
 8000df8:	60da      	str	r2, [r3, #12]
 8000dfa:	611a      	str	r2, [r3, #16]
 8000dfc:	615a      	str	r2, [r3, #20]
 8000dfe:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000e00:	4b2c      	ldr	r3, [pc, #176]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e02:	4a2d      	ldr	r2, [pc, #180]	; (8000eb8 <MX_TIM3_Init+0xe8>)
 8000e04:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21;
 8000e06:	4b2b      	ldr	r3, [pc, #172]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e08:	2215      	movs	r2, #21
 8000e0a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0c:	4b29      	ldr	r3, [pc, #164]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000e12:	4b28      	ldr	r3, [pc, #160]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e14:	2264      	movs	r2, #100	; 0x64
 8000e16:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e18:	4b26      	ldr	r3, [pc, #152]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e1e:	4b25      	ldr	r3, [pc, #148]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e20:	2200      	movs	r2, #0
 8000e22:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000e24:	4823      	ldr	r0, [pc, #140]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e26:	f003 f93f 	bl	80040a8 <HAL_TIM_Base_Init>
 8000e2a:	4603      	mov	r3, r0
 8000e2c:	2b00      	cmp	r3, #0
 8000e2e:	d001      	beq.n	8000e34 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000e30:	f000 fa46 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e34:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e38:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000e3a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000e3e:	4619      	mov	r1, r3
 8000e40:	481c      	ldr	r0, [pc, #112]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e42:	f003 ffcf 	bl	8004de4 <HAL_TIM_ConfigClockSource>
 8000e46:	4603      	mov	r3, r0
 8000e48:	2b00      	cmp	r3, #0
 8000e4a:	d001      	beq.n	8000e50 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e4c:	f000 fa38 	bl	80012c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e50:	4818      	ldr	r0, [pc, #96]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e52:	f003 f9db 	bl	800420c <HAL_TIM_PWM_Init>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e5c:	f000 fa30 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e60:	2300      	movs	r3, #0
 8000e62:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e64:	2300      	movs	r3, #0
 8000e66:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e68:	f107 0320 	add.w	r3, r7, #32
 8000e6c:	4619      	mov	r1, r3
 8000e6e:	4811      	ldr	r0, [pc, #68]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e70:	f004 fc92 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8000e74:	4603      	mov	r3, r0
 8000e76:	2b00      	cmp	r3, #0
 8000e78:	d001      	beq.n	8000e7e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e7a:	f000 fa21 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e7e:	2360      	movs	r3, #96	; 0x60
 8000e80:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000e82:	2300      	movs	r3, #0
 8000e84:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000e86:	2300      	movs	r3, #0
 8000e88:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000e8e:	1d3b      	adds	r3, r7, #4
 8000e90:	2204      	movs	r2, #4
 8000e92:	4619      	mov	r1, r3
 8000e94:	4807      	ldr	r0, [pc, #28]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000e96:	f003 fee3 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 8000e9a:	4603      	mov	r3, r0
 8000e9c:	2b00      	cmp	r3, #0
 8000e9e:	d001      	beq.n	8000ea4 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ea0:	f000 fa0e 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ea4:	4803      	ldr	r0, [pc, #12]	; (8000eb4 <MX_TIM3_Init+0xe4>)
 8000ea6:	f001 f8d1 	bl	800204c <HAL_TIM_MspPostInit>

}
 8000eaa:	bf00      	nop
 8000eac:	3738      	adds	r7, #56	; 0x38
 8000eae:	46bd      	mov	sp, r7
 8000eb0:	bd80      	pop	{r7, pc}
 8000eb2:	bf00      	nop
 8000eb4:	200015a4 	.word	0x200015a4
 8000eb8:	40000400 	.word	0x40000400

08000ebc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b08a      	sub	sp, #40	; 0x28
 8000ec0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec2:	f107 0320 	add.w	r3, r7, #32
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	601a      	str	r2, [r3, #0]
 8000eca:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ecc:	1d3b      	adds	r3, r7, #4
 8000ece:	2200      	movs	r2, #0
 8000ed0:	601a      	str	r2, [r3, #0]
 8000ed2:	605a      	str	r2, [r3, #4]
 8000ed4:	609a      	str	r2, [r3, #8]
 8000ed6:	60da      	str	r2, [r3, #12]
 8000ed8:	611a      	str	r2, [r3, #16]
 8000eda:	615a      	str	r2, [r3, #20]
 8000edc:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000ede:	4b22      	ldr	r3, [pc, #136]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000ee0:	4a22      	ldr	r2, [pc, #136]	; (8000f6c <MX_TIM4_Init+0xb0>)
 8000ee2:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 1023;
 8000ee4:	4b20      	ldr	r3, [pc, #128]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000ee6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000eea:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000eec:	4b1e      	ldr	r3, [pc, #120]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000eee:	2200      	movs	r2, #0
 8000ef0:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000ef2:	4b1d      	ldr	r3, [pc, #116]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000ef4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ef8:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efa:	4b1b      	ldr	r3, [pc, #108]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f00:	4b19      	ldr	r3, [pc, #100]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000f06:	4818      	ldr	r0, [pc, #96]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000f08:	f003 f980 	bl	800420c <HAL_TIM_PWM_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000f12:	f000 f9d5 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f16:	2300      	movs	r3, #0
 8000f18:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8000f1e:	f107 0320 	add.w	r3, r7, #32
 8000f22:	4619      	mov	r1, r3
 8000f24:	4810      	ldr	r0, [pc, #64]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000f26:	f004 fc37 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8000f30:	f000 f9c6 	bl	80012c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000f34:	2370      	movs	r3, #112	; 0x70
 8000f36:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f38:	2300      	movs	r3, #0
 8000f3a:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f3c:	2300      	movs	r3, #0
 8000f3e:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f40:	2300      	movs	r3, #0
 8000f42:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f44:	1d3b      	adds	r3, r7, #4
 8000f46:	2204      	movs	r2, #4
 8000f48:	4619      	mov	r1, r3
 8000f4a:	4807      	ldr	r0, [pc, #28]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000f4c:	f003 fe88 	bl	8004c60 <HAL_TIM_PWM_ConfigChannel>
 8000f50:	4603      	mov	r3, r0
 8000f52:	2b00      	cmp	r3, #0
 8000f54:	d001      	beq.n	8000f5a <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 8000f56:	f000 f9b3 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000f5a:	4803      	ldr	r0, [pc, #12]	; (8000f68 <MX_TIM4_Init+0xac>)
 8000f5c:	f001 f876 	bl	800204c <HAL_TIM_MspPostInit>

}
 8000f60:	bf00      	nop
 8000f62:	3728      	adds	r7, #40	; 0x28
 8000f64:	46bd      	mov	sp, r7
 8000f66:	bd80      	pop	{r7, pc}
 8000f68:	200015ec 	.word	0x200015ec
 8000f6c:	40000800 	.word	0x40000800

08000f70 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000f70:	b580      	push	{r7, lr}
 8000f72:	b086      	sub	sp, #24
 8000f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f76:	f107 0308 	add.w	r3, r7, #8
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	601a      	str	r2, [r3, #0]
 8000f7e:	605a      	str	r2, [r3, #4]
 8000f80:	609a      	str	r2, [r3, #8]
 8000f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f84:	463b      	mov	r3, r7
 8000f86:	2200      	movs	r2, #0
 8000f88:	601a      	str	r2, [r3, #0]
 8000f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000f8c:	4b1d      	ldr	r3, [pc, #116]	; (8001004 <MX_TIM5_Init+0x94>)
 8000f8e:	4a1e      	ldr	r2, [pc, #120]	; (8001008 <MX_TIM5_Init+0x98>)
 8000f90:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000f92:	4b1c      	ldr	r3, [pc, #112]	; (8001004 <MX_TIM5_Init+0x94>)
 8000f94:	2253      	movs	r2, #83	; 0x53
 8000f96:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f98:	4b1a      	ldr	r3, [pc, #104]	; (8001004 <MX_TIM5_Init+0x94>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49999;
 8000f9e:	4b19      	ldr	r3, [pc, #100]	; (8001004 <MX_TIM5_Init+0x94>)
 8000fa0:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000fa4:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fa6:	4b17      	ldr	r3, [pc, #92]	; (8001004 <MX_TIM5_Init+0x94>)
 8000fa8:	2200      	movs	r2, #0
 8000faa:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000fac:	4b15      	ldr	r3, [pc, #84]	; (8001004 <MX_TIM5_Init+0x94>)
 8000fae:	2280      	movs	r2, #128	; 0x80
 8000fb0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000fb2:	4814      	ldr	r0, [pc, #80]	; (8001004 <MX_TIM5_Init+0x94>)
 8000fb4:	f003 f878 	bl	80040a8 <HAL_TIM_Base_Init>
 8000fb8:	4603      	mov	r3, r0
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d001      	beq.n	8000fc2 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000fbe:	f000 f97f 	bl	80012c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fc2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000fc6:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000fc8:	f107 0308 	add.w	r3, r7, #8
 8000fcc:	4619      	mov	r1, r3
 8000fce:	480d      	ldr	r0, [pc, #52]	; (8001004 <MX_TIM5_Init+0x94>)
 8000fd0:	f003 ff08 	bl	8004de4 <HAL_TIM_ConfigClockSource>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d001      	beq.n	8000fde <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000fda:	f000 f971 	bl	80012c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000fe6:	463b      	mov	r3, r7
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4806      	ldr	r0, [pc, #24]	; (8001004 <MX_TIM5_Init+0x94>)
 8000fec:	f004 fbd4 	bl	8005798 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000ff6:	f000 f963 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000ffa:	bf00      	nop
 8000ffc:	3718      	adds	r7, #24
 8000ffe:	46bd      	mov	sp, r7
 8001000:	bd80      	pop	{r7, pc}
 8001002:	bf00      	nop
 8001004:	20001634 	.word	0x20001634
 8001008:	40000c00 	.word	0x40000c00

0800100c <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001010:	4b11      	ldr	r3, [pc, #68]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 8001012:	4a12      	ldr	r2, [pc, #72]	; (800105c <MX_USART1_UART_Init+0x50>)
 8001014:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8001016:	4b10      	ldr	r3, [pc, #64]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 8001018:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800101c:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800101e:	4b0e      	ldr	r3, [pc, #56]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 8001020:	2200      	movs	r2, #0
 8001022:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001024:	4b0c      	ldr	r3, [pc, #48]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 8001026:	2200      	movs	r2, #0
 8001028:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800102a:	4b0b      	ldr	r3, [pc, #44]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 800102c:	2200      	movs	r2, #0
 800102e:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001030:	4b09      	ldr	r3, [pc, #36]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 8001032:	220c      	movs	r2, #12
 8001034:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001036:	4b08      	ldr	r3, [pc, #32]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 8001038:	2200      	movs	r2, #0
 800103a:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800103c:	4b06      	ldr	r3, [pc, #24]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 800103e:	2200      	movs	r2, #0
 8001040:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001042:	4805      	ldr	r0, [pc, #20]	; (8001058 <MX_USART1_UART_Init+0x4c>)
 8001044:	f004 fc2a 	bl	800589c <HAL_UART_Init>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 800104e:	f000 f937 	bl	80012c0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001052:	bf00      	nop
 8001054:	bd80      	pop	{r7, pc}
 8001056:	bf00      	nop
 8001058:	2000167c 	.word	0x2000167c
 800105c:	40011000 	.word	0x40011000

08001060 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	b088      	sub	sp, #32
 8001064:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001066:	f107 030c 	add.w	r3, r7, #12
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]
 8001070:	609a      	str	r2, [r3, #8]
 8001072:	60da      	str	r2, [r3, #12]
 8001074:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001076:	2300      	movs	r3, #0
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	4b44      	ldr	r3, [pc, #272]	; (800118c <MX_GPIO_Init+0x12c>)
 800107c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800107e:	4a43      	ldr	r2, [pc, #268]	; (800118c <MX_GPIO_Init+0x12c>)
 8001080:	f043 0304 	orr.w	r3, r3, #4
 8001084:	6313      	str	r3, [r2, #48]	; 0x30
 8001086:	4b41      	ldr	r3, [pc, #260]	; (800118c <MX_GPIO_Init+0x12c>)
 8001088:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800108a:	f003 0304 	and.w	r3, r3, #4
 800108e:	60bb      	str	r3, [r7, #8]
 8001090:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001092:	2300      	movs	r3, #0
 8001094:	607b      	str	r3, [r7, #4]
 8001096:	4b3d      	ldr	r3, [pc, #244]	; (800118c <MX_GPIO_Init+0x12c>)
 8001098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800109a:	4a3c      	ldr	r2, [pc, #240]	; (800118c <MX_GPIO_Init+0x12c>)
 800109c:	f043 0301 	orr.w	r3, r3, #1
 80010a0:	6313      	str	r3, [r2, #48]	; 0x30
 80010a2:	4b3a      	ldr	r3, [pc, #232]	; (800118c <MX_GPIO_Init+0x12c>)
 80010a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010a6:	f003 0301 	and.w	r3, r3, #1
 80010aa:	607b      	str	r3, [r7, #4]
 80010ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80010ae:	2300      	movs	r3, #0
 80010b0:	603b      	str	r3, [r7, #0]
 80010b2:	4b36      	ldr	r3, [pc, #216]	; (800118c <MX_GPIO_Init+0x12c>)
 80010b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010b6:	4a35      	ldr	r2, [pc, #212]	; (800118c <MX_GPIO_Init+0x12c>)
 80010b8:	f043 0302 	orr.w	r3, r3, #2
 80010bc:	6313      	str	r3, [r2, #48]	; 0x30
 80010be:	4b33      	ldr	r3, [pc, #204]	; (800118c <MX_GPIO_Init+0x12c>)
 80010c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010c2:	f003 0302 	and.w	r3, r3, #2
 80010c6:	603b      	str	r3, [r7, #0]
 80010c8:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80010ca:	2200      	movs	r2, #0
 80010cc:	21f3      	movs	r1, #243	; 0xf3
 80010ce:	4830      	ldr	r0, [pc, #192]	; (8001190 <MX_GPIO_Init+0x130>)
 80010d0:	f001 fc5c 	bl	800298c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80010d4:	2200      	movs	r2, #0
 80010d6:	2140      	movs	r1, #64	; 0x40
 80010d8:	482e      	ldr	r0, [pc, #184]	; (8001194 <MX_GPIO_Init+0x134>)
 80010da:	f001 fc57 	bl	800298c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80010de:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80010e2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80010e4:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80010e8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010ea:	2300      	movs	r3, #0
 80010ec:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80010ee:	f107 030c 	add.w	r3, r7, #12
 80010f2:	4619      	mov	r1, r3
 80010f4:	4828      	ldr	r0, [pc, #160]	; (8001198 <MX_GPIO_Init+0x138>)
 80010f6:	f001 faad 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 80010fa:	23f3      	movs	r3, #243	; 0xf3
 80010fc:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fe:	2301      	movs	r3, #1
 8001100:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001102:	2300      	movs	r3, #0
 8001104:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001106:	2300      	movs	r3, #0
 8001108:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800110a:	f107 030c 	add.w	r3, r7, #12
 800110e:	4619      	mov	r1, r3
 8001110:	481f      	ldr	r0, [pc, #124]	; (8001190 <MX_GPIO_Init+0x130>)
 8001112:	f001 fa9f 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001116:	230c      	movs	r3, #12
 8001118:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800111a:	2302      	movs	r3, #2
 800111c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111e:	2300      	movs	r3, #0
 8001120:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001122:	2303      	movs	r3, #3
 8001124:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001126:	2307      	movs	r3, #7
 8001128:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800112a:	f107 030c 	add.w	r3, r7, #12
 800112e:	4619      	mov	r1, r3
 8001130:	4817      	ldr	r0, [pc, #92]	; (8001190 <MX_GPIO_Init+0x130>)
 8001132:	f001 fa8f 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8001136:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800113a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800113c:	2300      	movs	r3, #0
 800113e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001140:	2300      	movs	r3, #0
 8001142:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001144:	f107 030c 	add.w	r3, r7, #12
 8001148:	4619      	mov	r1, r3
 800114a:	4813      	ldr	r0, [pc, #76]	; (8001198 <MX_GPIO_Init+0x138>)
 800114c:	f001 fa82 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001150:	2338      	movs	r3, #56	; 0x38
 8001152:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001158:	2301      	movs	r3, #1
 800115a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800115c:	f107 030c 	add.w	r3, r7, #12
 8001160:	4619      	mov	r1, r3
 8001162:	480c      	ldr	r0, [pc, #48]	; (8001194 <MX_GPIO_Init+0x134>)
 8001164:	f001 fa76 	bl	8002654 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001168:	2340      	movs	r3, #64	; 0x40
 800116a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001178:	f107 030c 	add.w	r3, r7, #12
 800117c:	4619      	mov	r1, r3
 800117e:	4805      	ldr	r0, [pc, #20]	; (8001194 <MX_GPIO_Init+0x134>)
 8001180:	f001 fa68 	bl	8002654 <HAL_GPIO_Init>

}
 8001184:	bf00      	nop
 8001186:	3720      	adds	r7, #32
 8001188:	46bd      	mov	sp, r7
 800118a:	bd80      	pop	{r7, pc}
 800118c:	40023800 	.word	0x40023800
 8001190:	40020000 	.word	0x40020000
 8001194:	40020400 	.word	0x40020400
 8001198:	40020800 	.word	0x40020800

0800119c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b082      	sub	sp, #8
 80011a0:	af00      	add	r7, sp, #0
 80011a2:	6078      	str	r0, [r7, #4]
	// 50ms Poll Button Timer
	if (htim == &htim5 )
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	4a40      	ldr	r2, [pc, #256]	; (80012a8 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 80011a8:	4293      	cmp	r3, r2
 80011aa:	d179      	bne.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x104>
		// Count the number of times the interrupt fires for flashing
		static uint8_t i = 0;
		// Set high if the button has been released, low while pressed
		static uint8_t released = 1;

		button = poll_buttons();
 80011ac:	f7ff fa86 	bl	80006bc <poll_buttons>
 80011b0:	4603      	mov	r3, r0
 80011b2:	461a      	mov	r2, r3
 80011b4:	4b3d      	ldr	r3, [pc, #244]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011b6:	701a      	strb	r2, [r3, #0]
		// If a new button is pressed
		if (button && released) {
 80011b8:	4b3c      	ldr	r3, [pc, #240]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011ba:	781b      	ldrb	r3, [r3, #0]
 80011bc:	2b00      	cmp	r3, #0
 80011be:	d01b      	beq.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x5c>
 80011c0:	4b3b      	ldr	r3, [pc, #236]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80011c2:	781b      	ldrb	r3, [r3, #0]
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d017      	beq.n	80011f8 <HAL_TIM_PeriodElapsedCallback+0x5c>
			// Turn on Button Light
			if (current_menu != settings_menu) enable_all_buttons();
 80011c8:	4b3a      	ldr	r3, [pc, #232]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80011ca:	781b      	ldrb	r3, [r3, #0]
 80011cc:	2b01      	cmp	r3, #1
 80011ce:	d001      	beq.n	80011d4 <HAL_TIM_PeriodElapsedCallback+0x38>
 80011d0:	f7ff fa40 	bl	8000654 <enable_all_buttons>
			disable_button(button);
 80011d4:	4b35      	ldr	r3, [pc, #212]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011d6:	781b      	ldrb	r3, [r3, #0]
 80011d8:	4618      	mov	r0, r3
 80011da:	f7ff f9db 	bl	8000594 <disable_button>
			// Invert display
			update_buttons();
 80011de:	f7ff fa4f 	bl	8000680 <update_buttons>

			last_pressed = button;
 80011e2:	4b32      	ldr	r3, [pc, #200]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011e4:	781a      	ldrb	r2, [r3, #0]
 80011e6:	4b34      	ldr	r3, [pc, #208]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80011e8:	701a      	strb	r2, [r3, #0]
			released = 0;
 80011ea:	4b31      	ldr	r3, [pc, #196]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80011ec:	2200      	movs	r2, #0
 80011ee:	701a      	strb	r2, [r3, #0]
			i = 0; // Reset counter
 80011f0:	4b32      	ldr	r3, [pc, #200]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 80011f2:	2200      	movs	r2, #0
 80011f4:	701a      	strb	r2, [r3, #0]
				// clear the last pressed button and stop flashing
				last_pressed = 0;
			}
		}
	}
}
 80011f6:	e053      	b.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x104>
		} else if (!button && last_pressed) {
 80011f8:	4b2c      	ldr	r3, [pc, #176]	; (80012ac <HAL_TIM_PeriodElapsedCallback+0x110>)
 80011fa:	781b      	ldrb	r3, [r3, #0]
 80011fc:	2b00      	cmp	r3, #0
 80011fe:	d14f      	bne.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001200:	4b2d      	ldr	r3, [pc, #180]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001202:	781b      	ldrb	r3, [r3, #0]
 8001204:	2b00      	cmp	r3, #0
 8001206:	d04b      	beq.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x104>
			released = 1;
 8001208:	4b29      	ldr	r3, [pc, #164]	; (80012b0 <HAL_TIM_PeriodElapsedCallback+0x114>)
 800120a:	2201      	movs	r2, #1
 800120c:	701a      	strb	r2, [r3, #0]
			++i;
 800120e:	4b2b      	ldr	r3, [pc, #172]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001210:	781b      	ldrb	r3, [r3, #0]
 8001212:	3301      	adds	r3, #1
 8001214:	b2da      	uxtb	r2, r3
 8001216:	4b29      	ldr	r3, [pc, #164]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001218:	701a      	strb	r2, [r3, #0]
			if (!(i % 4)) {
 800121a:	4b28      	ldr	r3, [pc, #160]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 800121c:	781b      	ldrb	r3, [r3, #0]
 800121e:	f003 0303 	and.w	r3, r3, #3
 8001222:	b2db      	uxtb	r3, r3
 8001224:	2b00      	cmp	r3, #0
 8001226:	d117      	bne.n	8001258 <HAL_TIM_PeriodElapsedCallback+0xbc>
				if ((current_menu != settings_menu) || (last_pressed == 1 || last_pressed == 2 || last_pressed == 9))
 8001228:	4b22      	ldr	r3, [pc, #136]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800122a:	781b      	ldrb	r3, [r3, #0]
 800122c:	2b01      	cmp	r3, #1
 800122e:	d10b      	bne.n	8001248 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001230:	4b21      	ldr	r3, [pc, #132]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001232:	781b      	ldrb	r3, [r3, #0]
 8001234:	2b01      	cmp	r3, #1
 8001236:	d007      	beq.n	8001248 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001238:	4b1f      	ldr	r3, [pc, #124]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800123a:	781b      	ldrb	r3, [r3, #0]
 800123c:	2b02      	cmp	r3, #2
 800123e:	d003      	beq.n	8001248 <HAL_TIM_PeriodElapsedCallback+0xac>
 8001240:	4b1d      	ldr	r3, [pc, #116]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001242:	781b      	ldrb	r3, [r3, #0]
 8001244:	2b09      	cmp	r3, #9
 8001246:	d104      	bne.n	8001252 <HAL_TIM_PeriodElapsedCallback+0xb6>
					toggle_button(last_pressed);
 8001248:	4b1b      	ldr	r3, [pc, #108]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800124a:	781b      	ldrb	r3, [r3, #0]
 800124c:	4618      	mov	r0, r3
 800124e:	f7ff f9d1 	bl	80005f4 <toggle_button>
				update_buttons();
 8001252:	f7ff fa15 	bl	8000680 <update_buttons>
}
 8001256:	e023      	b.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x104>
			else if (i > BUTTON_FLASH_DURATION / 50) {
 8001258:	4b18      	ldr	r3, [pc, #96]	; (80012bc <HAL_TIM_PeriodElapsedCallback+0x120>)
 800125a:	781b      	ldrb	r3, [r3, #0]
 800125c:	2b0c      	cmp	r3, #12
 800125e:	d91f      	bls.n	80012a0 <HAL_TIM_PeriodElapsedCallback+0x104>
				if (current_menu != settings_menu || last_pressed == 1 || last_pressed == 2 || last_pressed == 9)
 8001260:	4b14      	ldr	r3, [pc, #80]	; (80012b4 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001262:	781b      	ldrb	r3, [r3, #0]
 8001264:	2b01      	cmp	r3, #1
 8001266:	d10b      	bne.n	8001280 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8001268:	4b13      	ldr	r3, [pc, #76]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800126a:	781b      	ldrb	r3, [r3, #0]
 800126c:	2b01      	cmp	r3, #1
 800126e:	d007      	beq.n	8001280 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8001270:	4b11      	ldr	r3, [pc, #68]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001272:	781b      	ldrb	r3, [r3, #0]
 8001274:	2b02      	cmp	r3, #2
 8001276:	d003      	beq.n	8001280 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8001278:	4b0f      	ldr	r3, [pc, #60]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800127a:	781b      	ldrb	r3, [r3, #0]
 800127c:	2b09      	cmp	r3, #9
 800127e:	d105      	bne.n	800128c <HAL_TIM_PeriodElapsedCallback+0xf0>
					enable_button(last_pressed);
 8001280:	4b0d      	ldr	r3, [pc, #52]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001282:	781b      	ldrb	r3, [r3, #0]
 8001284:	4618      	mov	r0, r3
 8001286:	f7ff f953 	bl	8000530 <enable_button>
 800128a:	e004      	b.n	8001296 <HAL_TIM_PeriodElapsedCallback+0xfa>
				else disable_button(last_pressed);
 800128c:	4b0a      	ldr	r3, [pc, #40]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	4618      	mov	r0, r3
 8001292:	f7ff f97f 	bl	8000594 <disable_button>
				update_buttons();
 8001296:	f7ff f9f3 	bl	8000680 <update_buttons>
				last_pressed = 0;
 800129a:	4b07      	ldr	r3, [pc, #28]	; (80012b8 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800129c:	2200      	movs	r2, #0
 800129e:	701a      	strb	r2, [r3, #0]
}
 80012a0:	bf00      	nop
 80012a2:	3708      	adds	r7, #8
 80012a4:	46bd      	mov	sp, r7
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	20001634 	.word	0x20001634
 80012ac:	200016c1 	.word	0x200016c1
 80012b0:	20000008 	.word	0x20000008
 80012b4:	200016c0 	.word	0x200016c0
 80012b8:	20006d5c 	.word	0x20006d5c
 80012bc:	20006d5d 	.word	0x20006d5d

080012c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80012c0:	b480      	push	{r7}
 80012c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80012c4:	b672      	cpsid	i
}
 80012c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80012c8:	e7fe      	b.n	80012c8 <Error_Handler+0x8>
	...

080012cc <display_menu>:
extern Controller controller;

// Store Menu Commands
static char menu_commands[9][11];

void display_menu(Menu menu, uint8_t page, uint8_t device) {
 80012cc:	b590      	push	{r4, r7, lr}
 80012ce:	b085      	sub	sp, #20
 80012d0:	af00      	add	r7, sp, #0
 80012d2:	4603      	mov	r3, r0
 80012d4:	71fb      	strb	r3, [r7, #7]
 80012d6:	460b      	mov	r3, r1
 80012d8:	71bb      	strb	r3, [r7, #6]
 80012da:	4613      	mov	r3, r2
 80012dc:	717b      	strb	r3, [r7, #5]
	if (!page) return;
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	f000 80d7 	beq.w	8001494 <display_menu+0x1c8>
	current_menu = menu;
 80012e6:	4a6e      	ldr	r2, [pc, #440]	; (80014a0 <display_menu+0x1d4>)
 80012e8:	79fb      	ldrb	r3, [r7, #7]
 80012ea:	7013      	strb	r3, [r2, #0]
	current_page = page;
 80012ec:	4a6d      	ldr	r2, [pc, #436]	; (80014a4 <display_menu+0x1d8>)
 80012ee:	79bb      	ldrb	r3, [r7, #6]
 80012f0:	7013      	strb	r3, [r2, #0]
	switch(menu) {
 80012f2:	79fb      	ldrb	r3, [r7, #7]
 80012f4:	2b02      	cmp	r3, #2
 80012f6:	d06e      	beq.n	80013d6 <display_menu+0x10a>
 80012f8:	2b02      	cmp	r3, #2
 80012fa:	f300 80ae 	bgt.w	800145a <display_menu+0x18e>
 80012fe:	2b00      	cmp	r3, #0
 8001300:	d002      	beq.n	8001308 <display_menu+0x3c>
 8001302:	2b01      	cmp	r3, #1
 8001304:	d03f      	beq.n	8001386 <display_menu+0xba>
 8001306:	e0a8      	b.n	800145a <display_menu+0x18e>
	case main_menu:
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001308:	79bb      	ldrb	r3, [r7, #6]
 800130a:	2b03      	cmp	r3, #3
 800130c:	f200 80c4 	bhi.w	8001498 <display_menu+0x1cc>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 8001310:	2300      	movs	r3, #0
 8001312:	73fb      	strb	r3, [r7, #15]
 8001314:	e020      	b.n	8001358 <display_menu+0x8c>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 8001316:	7bfa      	ldrb	r2, [r7, #15]
 8001318:	4613      	mov	r3, r2
 800131a:	009b      	lsls	r3, r3, #2
 800131c:	4413      	add	r3, r2
 800131e:	005b      	lsls	r3, r3, #1
 8001320:	4413      	add	r3, r2
 8001322:	4a61      	ldr	r2, [pc, #388]	; (80014a8 <display_menu+0x1dc>)
 8001324:	1898      	adds	r0, r3, r2
 8001326:	7bf9      	ldrb	r1, [r7, #15]
 8001328:	4b5e      	ldr	r3, [pc, #376]	; (80014a4 <display_menu+0x1d8>)
 800132a:	781b      	ldrb	r3, [r3, #0]
 800132c:	1e5a      	subs	r2, r3, #1
 800132e:	4613      	mov	r3, r2
 8001330:	005b      	lsls	r3, r3, #1
 8001332:	4413      	add	r3, r2
 8001334:	005b      	lsls	r3, r3, #1
 8001336:	18ca      	adds	r2, r1, r3
 8001338:	4613      	mov	r3, r2
 800133a:	005b      	lsls	r3, r3, #1
 800133c:	4413      	add	r3, r2
 800133e:	021b      	lsls	r3, r3, #8
 8001340:	4413      	add	r3, r2
 8001342:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8001346:	4a59      	ldr	r2, [pc, #356]	; (80014ac <display_menu+0x1e0>)
 8001348:	4413      	add	r3, r2
 800134a:	3304      	adds	r3, #4
 800134c:	4619      	mov	r1, r3
 800134e:	f004 fe2a 	bl	8005fa6 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001352:	7bfb      	ldrb	r3, [r7, #15]
 8001354:	3301      	adds	r3, #1
 8001356:	73fb      	strb	r3, [r7, #15]
 8001358:	7bfb      	ldrb	r3, [r7, #15]
 800135a:	2b05      	cmp	r3, #5
 800135c:	d9db      	bls.n	8001316 <display_menu+0x4a>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 800135e:	4a54      	ldr	r2, [pc, #336]	; (80014b0 <display_menu+0x1e4>)
 8001360:	4b54      	ldr	r3, [pc, #336]	; (80014b4 <display_menu+0x1e8>)
 8001362:	cb03      	ldmia	r3!, {r0, r1}
 8001364:	6010      	str	r0, [r2, #0]
 8001366:	6051      	str	r1, [r2, #4]
 8001368:	881b      	ldrh	r3, [r3, #0]
 800136a:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Settings");
 800136c:	4a52      	ldr	r2, [pc, #328]	; (80014b8 <display_menu+0x1ec>)
 800136e:	4b53      	ldr	r3, [pc, #332]	; (80014bc <display_menu+0x1f0>)
 8001370:	cb03      	ldmia	r3!, {r0, r1}
 8001372:	6010      	str	r0, [r2, #0]
 8001374:	6051      	str	r1, [r2, #4]
 8001376:	781b      	ldrb	r3, [r3, #0]
 8001378:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 800137a:	4b51      	ldr	r3, [pc, #324]	; (80014c0 <display_menu+0x1f4>)
 800137c:	4a51      	ldr	r2, [pc, #324]	; (80014c4 <display_menu+0x1f8>)
 800137e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001380:	c303      	stmia	r3!, {r0, r1}
 8001382:	801a      	strh	r2, [r3, #0]
		break;
 8001384:	e069      	b.n	800145a <display_menu+0x18e>
	case settings_menu:
		strcpy(menu_commands[0], "PC Connect");
 8001386:	4b48      	ldr	r3, [pc, #288]	; (80014a8 <display_menu+0x1dc>)
 8001388:	4a4f      	ldr	r2, [pc, #316]	; (80014c8 <display_menu+0x1fc>)
 800138a:	ca07      	ldmia	r2, {r0, r1, r2}
 800138c:	c303      	stmia	r3!, {r0, r1}
 800138e:	801a      	strh	r2, [r3, #0]
 8001390:	3302      	adds	r3, #2
 8001392:	0c12      	lsrs	r2, r2, #16
 8001394:	701a      	strb	r2, [r3, #0]
		strcpy(menu_commands[1], "Learn Cmd");
 8001396:	4a4d      	ldr	r2, [pc, #308]	; (80014cc <display_menu+0x200>)
 8001398:	4b4d      	ldr	r3, [pc, #308]	; (80014d0 <display_menu+0x204>)
 800139a:	cb03      	ldmia	r3!, {r0, r1}
 800139c:	6010      	str	r0, [r2, #0]
 800139e:	6051      	str	r1, [r2, #4]
 80013a0:	881b      	ldrh	r3, [r3, #0]
 80013a2:	8113      	strh	r3, [r2, #8]
		for (uint8_t i = 2; i <= 7; ++i) {
 80013a4:	2302      	movs	r3, #2
 80013a6:	73bb      	strb	r3, [r7, #14]
 80013a8:	e00c      	b.n	80013c4 <display_menu+0xf8>
			menu_commands[i][0] = '\0';
 80013aa:	7bba      	ldrb	r2, [r7, #14]
 80013ac:	493e      	ldr	r1, [pc, #248]	; (80014a8 <display_menu+0x1dc>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	4413      	add	r3, r2
 80013b4:	005b      	lsls	r3, r3, #1
 80013b6:	4413      	add	r3, r2
 80013b8:	440b      	add	r3, r1
 80013ba:	2200      	movs	r2, #0
 80013bc:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 2; i <= 7; ++i) {
 80013be:	7bbb      	ldrb	r3, [r7, #14]
 80013c0:	3301      	adds	r3, #1
 80013c2:	73bb      	strb	r3, [r7, #14]
 80013c4:	7bbb      	ldrb	r3, [r7, #14]
 80013c6:	2b07      	cmp	r3, #7
 80013c8:	d9ef      	bls.n	80013aa <display_menu+0xde>
		}
		strcpy(menu_commands[8], "Main Menu");
 80013ca:	4b3d      	ldr	r3, [pc, #244]	; (80014c0 <display_menu+0x1f4>)
 80013cc:	4a41      	ldr	r2, [pc, #260]	; (80014d4 <display_menu+0x208>)
 80013ce:	ca07      	ldmia	r2, {r0, r1, r2}
 80013d0:	c303      	stmia	r3!, {r0, r1}
 80013d2:	801a      	strh	r2, [r3, #0]
		break;
 80013d4:	e041      	b.n	800145a <display_menu+0x18e>
	case device_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 80013d6:	2300      	movs	r3, #0
 80013d8:	737b      	strb	r3, [r7, #13]
 80013da:	e027      	b.n	800142c <display_menu+0x160>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 80013dc:	7b7a      	ldrb	r2, [r7, #13]
 80013de:	4613      	mov	r3, r2
 80013e0:	009b      	lsls	r3, r3, #2
 80013e2:	4413      	add	r3, r2
 80013e4:	005b      	lsls	r3, r3, #1
 80013e6:	4413      	add	r3, r2
 80013e8:	4a2f      	ldr	r2, [pc, #188]	; (80014a8 <display_menu+0x1dc>)
 80013ea:	189c      	adds	r4, r3, r2
 80013ec:	7979      	ldrb	r1, [r7, #5]
 80013ee:	7b78      	ldrb	r0, [r7, #13]
 80013f0:	4b2c      	ldr	r3, [pc, #176]	; (80014a4 <display_menu+0x1d8>)
 80013f2:	781b      	ldrb	r3, [r3, #0]
 80013f4:	1e5a      	subs	r2, r3, #1
 80013f6:	4613      	mov	r3, r2
 80013f8:	005b      	lsls	r3, r3, #1
 80013fa:	4413      	add	r3, r2
 80013fc:	005b      	lsls	r3, r3, #1
 80013fe:	4403      	add	r3, r0
 8001400:	461a      	mov	r2, r3
 8001402:	0052      	lsls	r2, r2, #1
 8001404:	441a      	add	r2, r3
 8001406:	00d3      	lsls	r3, r2, #3
 8001408:	441a      	add	r2, r3
 800140a:	460b      	mov	r3, r1
 800140c:	005b      	lsls	r3, r3, #1
 800140e:	440b      	add	r3, r1
 8001410:	021b      	lsls	r3, r3, #8
 8001412:	440b      	add	r3, r1
 8001414:	4413      	add	r3, r2
 8001416:	3310      	adds	r3, #16
 8001418:	4a24      	ldr	r2, [pc, #144]	; (80014ac <display_menu+0x1e0>)
 800141a:	4413      	add	r3, r2
 800141c:	3301      	adds	r3, #1
 800141e:	4619      	mov	r1, r3
 8001420:	4620      	mov	r0, r4
 8001422:	f004 fdc0 	bl	8005fa6 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001426:	7b7b      	ldrb	r3, [r7, #13]
 8001428:	3301      	adds	r3, #1
 800142a:	737b      	strb	r3, [r7, #13]
 800142c:	7b7b      	ldrb	r3, [r7, #13]
 800142e:	2b05      	cmp	r3, #5
 8001430:	d9d4      	bls.n	80013dc <display_menu+0x110>
		}
		strcpy(menu_commands[6], "Prev Page");
 8001432:	4a1f      	ldr	r2, [pc, #124]	; (80014b0 <display_menu+0x1e4>)
 8001434:	4b1f      	ldr	r3, [pc, #124]	; (80014b4 <display_menu+0x1e8>)
 8001436:	cb03      	ldmia	r3!, {r0, r1}
 8001438:	6010      	str	r0, [r2, #0]
 800143a:	6051      	str	r1, [r2, #4]
 800143c:	881b      	ldrh	r3, [r3, #0]
 800143e:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Main Menu");
 8001440:	4a1d      	ldr	r2, [pc, #116]	; (80014b8 <display_menu+0x1ec>)
 8001442:	4b24      	ldr	r3, [pc, #144]	; (80014d4 <display_menu+0x208>)
 8001444:	cb03      	ldmia	r3!, {r0, r1}
 8001446:	6010      	str	r0, [r2, #0]
 8001448:	6051      	str	r1, [r2, #4]
 800144a:	881b      	ldrh	r3, [r3, #0]
 800144c:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 800144e:	4b1c      	ldr	r3, [pc, #112]	; (80014c0 <display_menu+0x1f4>)
 8001450:	4a1c      	ldr	r2, [pc, #112]	; (80014c4 <display_menu+0x1f8>)
 8001452:	ca07      	ldmia	r2, {r0, r1, r2}
 8001454:	c303      	stmia	r3!, {r0, r1}
 8001456:	801a      	strh	r2, [r3, #0]
		break;
 8001458:	bf00      	nop
	}
	for (uint8_t i = 1; i <= 9; ++i) {
 800145a:	2301      	movs	r3, #1
 800145c:	733b      	strb	r3, [r7, #12]
 800145e:	e015      	b.n	800148c <display_menu+0x1c0>
		erase_buffer();
 8001460:	f000 fb1e 	bl	8001aa0 <erase_buffer>
		draw_string(menu_commands[i-1], white);
 8001464:	7b3b      	ldrb	r3, [r7, #12]
 8001466:	1e5a      	subs	r2, r3, #1
 8001468:	4613      	mov	r3, r2
 800146a:	009b      	lsls	r3, r3, #2
 800146c:	4413      	add	r3, r2
 800146e:	005b      	lsls	r3, r3, #1
 8001470:	4413      	add	r3, r2
 8001472:	4a0d      	ldr	r2, [pc, #52]	; (80014a8 <display_menu+0x1dc>)
 8001474:	4413      	add	r3, r2
 8001476:	2101      	movs	r1, #1
 8001478:	4618      	mov	r0, r3
 800147a:	f000 fc16 	bl	8001caa <draw_string>
		update_display(i);
 800147e:	7b3b      	ldrb	r3, [r7, #12]
 8001480:	4618      	mov	r0, r3
 8001482:	f000 fa19 	bl	80018b8 <update_display>
	for (uint8_t i = 1; i <= 9; ++i) {
 8001486:	7b3b      	ldrb	r3, [r7, #12]
 8001488:	3301      	adds	r3, #1
 800148a:	733b      	strb	r3, [r7, #12]
 800148c:	7b3b      	ldrb	r3, [r7, #12]
 800148e:	2b09      	cmp	r3, #9
 8001490:	d9e6      	bls.n	8001460 <display_menu+0x194>
 8001492:	e002      	b.n	800149a <display_menu+0x1ce>
	if (!page) return;
 8001494:	bf00      	nop
 8001496:	e000      	b.n	800149a <display_menu+0x1ce>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001498:	bf00      	nop
	}
}
 800149a:	3714      	adds	r7, #20
 800149c:	46bd      	mov	sp, r7
 800149e:	bd90      	pop	{r4, r7, pc}
 80014a0:	200016c0 	.word	0x200016c0
 80014a4:	20006d5e 	.word	0x20006d5e
 80014a8:	20006d60 	.word	0x20006d60
 80014ac:	200016c4 	.word	0x200016c4
 80014b0:	20006da2 	.word	0x20006da2
 80014b4:	0800607c 	.word	0x0800607c
 80014b8:	20006dad 	.word	0x20006dad
 80014bc:	08006088 	.word	0x08006088
 80014c0:	20006db8 	.word	0x20006db8
 80014c4:	08006094 	.word	0x08006094
 80014c8:	080060a0 	.word	0x080060a0
 80014cc:	20006d6b 	.word	0x20006d6b
 80014d0:	080060ac 	.word	0x080060ac
 80014d4:	080060b8 	.word	0x080060b8

080014d8 <button_pressed>:

void button_pressed(uint8_t button) {
 80014d8:	b580      	push	{r7, lr}
 80014da:	b084      	sub	sp, #16
 80014dc:	af00      	add	r7, sp, #0
 80014de:	4603      	mov	r3, r0
 80014e0:	71fb      	strb	r3, [r7, #7]
	static uint8_t in_device_menu = 0;
	if (!button || button > 9) return;
 80014e2:	79fb      	ldrb	r3, [r7, #7]
 80014e4:	2b00      	cmp	r3, #0
 80014e6:	f000 80d7 	beq.w	8001698 <button_pressed+0x1c0>
 80014ea:	79fb      	ldrb	r3, [r7, #7]
 80014ec:	2b09      	cmp	r3, #9
 80014ee:	f200 80d3 	bhi.w	8001698 <button_pressed+0x1c0>

	switch(current_menu) {
 80014f2:	4b6c      	ldr	r3, [pc, #432]	; (80016a4 <button_pressed+0x1cc>)
 80014f4:	781b      	ldrb	r3, [r3, #0]
 80014f6:	2b02      	cmp	r3, #2
 80014f8:	d075      	beq.n	80015e6 <button_pressed+0x10e>
 80014fa:	2b02      	cmp	r3, #2
 80014fc:	f300 80ce 	bgt.w	800169c <button_pressed+0x1c4>
 8001500:	2b00      	cmp	r3, #0
 8001502:	d002      	beq.n	800150a <button_pressed+0x32>
 8001504:	2b01      	cmp	r3, #1
 8001506:	d055      	beq.n	80015b4 <button_pressed+0xdc>
			break;
		}
		in_device_menu = 1;
		break;
	default:
		break;
 8001508:	e0c8      	b.n	800169c <button_pressed+0x1c4>
		switch(button) {
 800150a:	79fb      	ldrb	r3, [r7, #7]
 800150c:	2b09      	cmp	r3, #9
 800150e:	d02b      	beq.n	8001568 <button_pressed+0x90>
 8001510:	2b09      	cmp	r3, #9
 8001512:	dc39      	bgt.n	8001588 <button_pressed+0xb0>
 8001514:	2b07      	cmp	r3, #7
 8001516:	d002      	beq.n	800151e <button_pressed+0x46>
 8001518:	2b08      	cmp	r3, #8
 800151a:	d010      	beq.n	800153e <button_pressed+0x66>
 800151c:	e034      	b.n	8001588 <button_pressed+0xb0>
			display_menu(main_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 800151e:	4b62      	ldr	r3, [pc, #392]	; (80016a8 <button_pressed+0x1d0>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b01      	cmp	r3, #1
 8001524:	d004      	beq.n	8001530 <button_pressed+0x58>
 8001526:	4b60      	ldr	r3, [pc, #384]	; (80016a8 <button_pressed+0x1d0>)
 8001528:	781b      	ldrb	r3, [r3, #0]
 800152a:	3b01      	subs	r3, #1
 800152c:	b2db      	uxtb	r3, r3
 800152e:	e000      	b.n	8001532 <button_pressed+0x5a>
 8001530:	2303      	movs	r3, #3
 8001532:	2200      	movs	r2, #0
 8001534:	4619      	mov	r1, r3
 8001536:	2000      	movs	r0, #0
 8001538:	f7ff fec8 	bl	80012cc <display_menu>
			break;
 800153c:	e036      	b.n	80015ac <button_pressed+0xd4>
			display_menu(settings_menu, 1, 0);
 800153e:	2200      	movs	r2, #0
 8001540:	2101      	movs	r1, #1
 8001542:	2001      	movs	r0, #1
 8001544:	f7ff fec2 	bl	80012cc <display_menu>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001548:	2303      	movs	r3, #3
 800154a:	73fb      	strb	r3, [r7, #15]
 800154c:	e006      	b.n	800155c <button_pressed+0x84>
				disable_button(i);
 800154e:	7bfb      	ldrb	r3, [r7, #15]
 8001550:	4618      	mov	r0, r3
 8001552:	f7ff f81f 	bl	8000594 <disable_button>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001556:	7bfb      	ldrb	r3, [r7, #15]
 8001558:	3301      	adds	r3, #1
 800155a:	73fb      	strb	r3, [r7, #15]
 800155c:	7bfb      	ldrb	r3, [r7, #15]
 800155e:	2b08      	cmp	r3, #8
 8001560:	d9f5      	bls.n	800154e <button_pressed+0x76>
			update_buttons();
 8001562:	f7ff f88d 	bl	8000680 <update_buttons>
			break;
 8001566:	e021      	b.n	80015ac <button_pressed+0xd4>
			display_menu(main_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 8001568:	4b4f      	ldr	r3, [pc, #316]	; (80016a8 <button_pressed+0x1d0>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	2b03      	cmp	r3, #3
 800156e:	d004      	beq.n	800157a <button_pressed+0xa2>
 8001570:	4b4d      	ldr	r3, [pc, #308]	; (80016a8 <button_pressed+0x1d0>)
 8001572:	781b      	ldrb	r3, [r3, #0]
 8001574:	3301      	adds	r3, #1
 8001576:	b2db      	uxtb	r3, r3
 8001578:	e000      	b.n	800157c <button_pressed+0xa4>
 800157a:	2301      	movs	r3, #1
 800157c:	2200      	movs	r2, #0
 800157e:	4619      	mov	r1, r3
 8001580:	2000      	movs	r0, #0
 8001582:	f7ff fea3 	bl	80012cc <display_menu>
			break;
 8001586:	e011      	b.n	80015ac <button_pressed+0xd4>
			display_menu(device_menu, 1, button + (6 * (current_page - 1)));
 8001588:	4b47      	ldr	r3, [pc, #284]	; (80016a8 <button_pressed+0x1d0>)
 800158a:	781b      	ldrb	r3, [r3, #0]
 800158c:	461a      	mov	r2, r3
 800158e:	0052      	lsls	r2, r2, #1
 8001590:	4413      	add	r3, r2
 8001592:	005b      	lsls	r3, r3, #1
 8001594:	b2da      	uxtb	r2, r3
 8001596:	79fb      	ldrb	r3, [r7, #7]
 8001598:	4413      	add	r3, r2
 800159a:	b2db      	uxtb	r3, r3
 800159c:	3b06      	subs	r3, #6
 800159e:	b2db      	uxtb	r3, r3
 80015a0:	461a      	mov	r2, r3
 80015a2:	2101      	movs	r1, #1
 80015a4:	2002      	movs	r0, #2
 80015a6:	f7ff fe91 	bl	80012cc <display_menu>
			break;
 80015aa:	bf00      	nop
		in_device_menu = 0;
 80015ac:	4b3f      	ldr	r3, [pc, #252]	; (80016ac <button_pressed+0x1d4>)
 80015ae:	2200      	movs	r2, #0
 80015b0:	701a      	strb	r2, [r3, #0]
		break;
 80015b2:	e074      	b.n	800169e <button_pressed+0x1c6>
		switch(button) {
 80015b4:	79fb      	ldrb	r3, [r7, #7]
 80015b6:	2b09      	cmp	r3, #9
 80015b8:	d008      	beq.n	80015cc <button_pressed+0xf4>
 80015ba:	2b09      	cmp	r3, #9
 80015bc:	dc0e      	bgt.n	80015dc <button_pressed+0x104>
 80015be:	2b01      	cmp	r3, #1
 80015c0:	d001      	beq.n	80015c6 <button_pressed+0xee>
 80015c2:	2b02      	cmp	r3, #2
			break;
 80015c4:	e00b      	b.n	80015de <button_pressed+0x106>
			init_xbee_communication();
 80015c6:	f7ff f97d 	bl	80008c4 <init_xbee_communication>
			break;
 80015ca:	e008      	b.n	80015de <button_pressed+0x106>
			display_menu(main_menu, 1, 0);
 80015cc:	2200      	movs	r2, #0
 80015ce:	2101      	movs	r1, #1
 80015d0:	2000      	movs	r0, #0
 80015d2:	f7ff fe7b 	bl	80012cc <display_menu>
			enable_all_buttons();
 80015d6:	f7ff f83d 	bl	8000654 <enable_all_buttons>
			break;
 80015da:	e000      	b.n	80015de <button_pressed+0x106>
			break;
 80015dc:	bf00      	nop
		in_device_menu = 0;
 80015de:	4b33      	ldr	r3, [pc, #204]	; (80016ac <button_pressed+0x1d4>)
 80015e0:	2200      	movs	r2, #0
 80015e2:	701a      	strb	r2, [r3, #0]
		break;
 80015e4:	e05b      	b.n	800169e <button_pressed+0x1c6>
		switch(button) {
 80015e6:	79fb      	ldrb	r3, [r7, #7]
 80015e8:	2b09      	cmp	r3, #9
 80015ea:	d02e      	beq.n	800164a <button_pressed+0x172>
 80015ec:	2b09      	cmp	r3, #9
 80015ee:	dc4e      	bgt.n	800168e <button_pressed+0x1b6>
 80015f0:	2b07      	cmp	r3, #7
 80015f2:	d002      	beq.n	80015fa <button_pressed+0x122>
 80015f4:	2b08      	cmp	r3, #8
 80015f6:	d022      	beq.n	800163e <button_pressed+0x166>
			break;
 80015f8:	e049      	b.n	800168e <button_pressed+0x1b6>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 80015fa:	4b2b      	ldr	r3, [pc, #172]	; (80016a8 <button_pressed+0x1d0>)
 80015fc:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80015fe:	2b01      	cmp	r3, #1
 8001600:	d004      	beq.n	800160c <button_pressed+0x134>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8001602:	4b29      	ldr	r3, [pc, #164]	; (80016a8 <button_pressed+0x1d0>)
 8001604:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001606:	3b01      	subs	r3, #1
 8001608:	b2d9      	uxtb	r1, r3
 800160a:	e000      	b.n	800160e <button_pressed+0x136>
 800160c:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 800160e:	4b27      	ldr	r3, [pc, #156]	; (80016ac <button_pressed+0x1d4>)
 8001610:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001612:	2b00      	cmp	r3, #0
 8001614:	d10c      	bne.n	8001630 <button_pressed+0x158>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001616:	4b24      	ldr	r3, [pc, #144]	; (80016a8 <button_pressed+0x1d0>)
 8001618:	781b      	ldrb	r3, [r3, #0]
 800161a:	461a      	mov	r2, r3
 800161c:	0052      	lsls	r2, r2, #1
 800161e:	4413      	add	r3, r2
 8001620:	005b      	lsls	r3, r3, #1
 8001622:	b2da      	uxtb	r2, r3
 8001624:	79fb      	ldrb	r3, [r7, #7]
 8001626:	4413      	add	r3, r2
 8001628:	b2db      	uxtb	r3, r3
			display_menu(
 800162a:	3b06      	subs	r3, #6
 800162c:	b2db      	uxtb	r3, r3
 800162e:	e001      	b.n	8001634 <button_pressed+0x15c>
 8001630:	4b1d      	ldr	r3, [pc, #116]	; (80016a8 <button_pressed+0x1d0>)
 8001632:	781b      	ldrb	r3, [r3, #0]
 8001634:	461a      	mov	r2, r3
 8001636:	2002      	movs	r0, #2
 8001638:	f7ff fe48 	bl	80012cc <display_menu>
			break;
 800163c:	e028      	b.n	8001690 <button_pressed+0x1b8>
			display_menu(main_menu, 1, 0);
 800163e:	2200      	movs	r2, #0
 8001640:	2101      	movs	r1, #1
 8001642:	2000      	movs	r0, #0
 8001644:	f7ff fe42 	bl	80012cc <display_menu>
			break;
 8001648:	e022      	b.n	8001690 <button_pressed+0x1b8>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 800164a:	4b17      	ldr	r3, [pc, #92]	; (80016a8 <button_pressed+0x1d0>)
 800164c:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 800164e:	2b04      	cmp	r3, #4
 8001650:	d004      	beq.n	800165c <button_pressed+0x184>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001652:	4b15      	ldr	r3, [pc, #84]	; (80016a8 <button_pressed+0x1d0>)
 8001654:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001656:	3301      	adds	r3, #1
 8001658:	b2d9      	uxtb	r1, r3
 800165a:	e000      	b.n	800165e <button_pressed+0x186>
 800165c:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 800165e:	4b13      	ldr	r3, [pc, #76]	; (80016ac <button_pressed+0x1d4>)
 8001660:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001662:	2b00      	cmp	r3, #0
 8001664:	d10c      	bne.n	8001680 <button_pressed+0x1a8>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001666:	4b10      	ldr	r3, [pc, #64]	; (80016a8 <button_pressed+0x1d0>)
 8001668:	781b      	ldrb	r3, [r3, #0]
 800166a:	461a      	mov	r2, r3
 800166c:	0052      	lsls	r2, r2, #1
 800166e:	4413      	add	r3, r2
 8001670:	005b      	lsls	r3, r3, #1
 8001672:	b2da      	uxtb	r2, r3
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	4413      	add	r3, r2
 8001678:	b2db      	uxtb	r3, r3
			display_menu(
 800167a:	3b06      	subs	r3, #6
 800167c:	b2db      	uxtb	r3, r3
 800167e:	e001      	b.n	8001684 <button_pressed+0x1ac>
 8001680:	4b09      	ldr	r3, [pc, #36]	; (80016a8 <button_pressed+0x1d0>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	461a      	mov	r2, r3
 8001686:	2002      	movs	r0, #2
 8001688:	f7ff fe20 	bl	80012cc <display_menu>
			break;
 800168c:	e000      	b.n	8001690 <button_pressed+0x1b8>
			break;
 800168e:	bf00      	nop
		in_device_menu = 1;
 8001690:	4b06      	ldr	r3, [pc, #24]	; (80016ac <button_pressed+0x1d4>)
 8001692:	2201      	movs	r2, #1
 8001694:	701a      	strb	r2, [r3, #0]
		break;
 8001696:	e002      	b.n	800169e <button_pressed+0x1c6>
	if (!button || button > 9) return;
 8001698:	bf00      	nop
 800169a:	e000      	b.n	800169e <button_pressed+0x1c6>
		break;
 800169c:	bf00      	nop
	}
}
 800169e:	3710      	adds	r7, #16
 80016a0:	46bd      	mov	sp, r7
 80016a2:	bd80      	pop	{r7, pc}
 80016a4:	200016c0 	.word	0x200016c0
 80016a8:	20006d5e 	.word	0x20006d5e
 80016ac:	20006dc3 	.word	0x20006dc3

080016b0 <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b084      	sub	sp, #16
 80016b4:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 80016b6:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80016ba:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 80016bc:	1d3a      	adds	r2, r7, #4
 80016be:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016c2:	9300      	str	r3, [sp, #0]
 80016c4:	2302      	movs	r3, #2
 80016c6:	21a2      	movs	r1, #162	; 0xa2
 80016c8:	4803      	ldr	r0, [pc, #12]	; (80016d8 <disable_OLED_EEPROM_writes+0x28>)
 80016ca:	f001 fabd 	bl	8002c48 <HAL_I2C_Master_Transmit>
}
 80016ce:	bf00      	nop
 80016d0:	3708      	adds	r7, #8
 80016d2:	46bd      	mov	sp, r7
 80016d4:	bd80      	pop	{r7, pc}
 80016d6:	bf00      	nop
 80016d8:	20001468 	.word	0x20001468

080016dc <drop_all_CS>:

void drop_all_CS(void) {
 80016dc:	b580      	push	{r7, lr}
 80016de:	b082      	sub	sp, #8
 80016e0:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 80016e2:	4b0a      	ldr	r3, [pc, #40]	; (800170c <drop_all_CS+0x30>)
 80016e4:	2200      	movs	r2, #0
 80016e6:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 80016e8:	4b08      	ldr	r3, [pc, #32]	; (800170c <drop_all_CS+0x30>)
 80016ea:	2200      	movs	r2, #0
 80016ec:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 80016ee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80016f2:	9300      	str	r3, [sp, #0]
 80016f4:	2303      	movs	r3, #3
 80016f6:	4a05      	ldr	r2, [pc, #20]	; (800170c <drop_all_CS+0x30>)
 80016f8:	21a2      	movs	r1, #162	; 0xa2
 80016fa:	4805      	ldr	r0, [pc, #20]	; (8001710 <drop_all_CS+0x34>)
 80016fc:	f001 faa4 	bl	8002c48 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001700:	2001      	movs	r0, #1
 8001702:	f000 fe71 	bl	80023e8 <HAL_Delay>
}
 8001706:	bf00      	nop
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	20001418 	.word	0x20001418
 8001710:	20001468 	.word	0x20001468

08001714 <raise_all_CS>:

void raise_all_CS(void) {
 8001714:	b580      	push	{r7, lr}
 8001716:	b082      	sub	sp, #8
 8001718:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 800171a:	4b09      	ldr	r3, [pc, #36]	; (8001740 <raise_all_CS+0x2c>)
 800171c:	22ff      	movs	r2, #255	; 0xff
 800171e:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8001720:	4b07      	ldr	r3, [pc, #28]	; (8001740 <raise_all_CS+0x2c>)
 8001722:	2201      	movs	r2, #1
 8001724:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8001726:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800172a:	9300      	str	r3, [sp, #0]
 800172c:	2303      	movs	r3, #3
 800172e:	4a04      	ldr	r2, [pc, #16]	; (8001740 <raise_all_CS+0x2c>)
 8001730:	21a2      	movs	r1, #162	; 0xa2
 8001732:	4804      	ldr	r0, [pc, #16]	; (8001744 <raise_all_CS+0x30>)
 8001734:	f001 fa88 	bl	8002c48 <HAL_I2C_Master_Transmit>
}
 8001738:	bf00      	nop
 800173a:	46bd      	mov	sp, r7
 800173c:	bd80      	pop	{r7, pc}
 800173e:	bf00      	nop
 8001740:	20001418 	.word	0x20001418
 8001744:	20001468 	.word	0x20001468

08001748 <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b084      	sub	sp, #16
 800174c:	af02      	add	r7, sp, #8
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 8001752:	4b1a      	ldr	r3, [pc, #104]	; (80017bc <drop_CS+0x74>)
 8001754:	22ff      	movs	r2, #255	; 0xff
 8001756:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8001758:	4b18      	ldr	r3, [pc, #96]	; (80017bc <drop_CS+0x74>)
 800175a:	2201      	movs	r2, #1
 800175c:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 800175e:	79fb      	ldrb	r3, [r7, #7]
 8001760:	2b09      	cmp	r3, #9
 8001762:	d107      	bne.n	8001774 <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 8001764:	4b15      	ldr	r3, [pc, #84]	; (80017bc <drop_CS+0x74>)
 8001766:	789b      	ldrb	r3, [r3, #2]
 8001768:	f023 0301 	bic.w	r3, r3, #1
 800176c:	b2da      	uxtb	r2, r3
 800176e:	4b13      	ldr	r3, [pc, #76]	; (80017bc <drop_CS+0x74>)
 8001770:	709a      	strb	r2, [r3, #2]
 8001772:	e012      	b.n	800179a <drop_CS+0x52>
	} else if (display <= 8) {
 8001774:	79fb      	ldrb	r3, [r7, #7]
 8001776:	2b08      	cmp	r3, #8
 8001778:	d80f      	bhi.n	800179a <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 800177a:	4b10      	ldr	r3, [pc, #64]	; (80017bc <drop_CS+0x74>)
 800177c:	785b      	ldrb	r3, [r3, #1]
 800177e:	b25a      	sxtb	r2, r3
 8001780:	79fb      	ldrb	r3, [r7, #7]
 8001782:	3b01      	subs	r3, #1
 8001784:	2101      	movs	r1, #1
 8001786:	fa01 f303 	lsl.w	r3, r1, r3
 800178a:	b25b      	sxtb	r3, r3
 800178c:	43db      	mvns	r3, r3
 800178e:	b25b      	sxtb	r3, r3
 8001790:	4013      	ands	r3, r2
 8001792:	b25b      	sxtb	r3, r3
 8001794:	b2da      	uxtb	r2, r3
 8001796:	4b09      	ldr	r3, [pc, #36]	; (80017bc <drop_CS+0x74>)
 8001798:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 800179a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800179e:	9300      	str	r3, [sp, #0]
 80017a0:	2303      	movs	r3, #3
 80017a2:	4a06      	ldr	r2, [pc, #24]	; (80017bc <drop_CS+0x74>)
 80017a4:	21a2      	movs	r1, #162	; 0xa2
 80017a6:	4806      	ldr	r0, [pc, #24]	; (80017c0 <drop_CS+0x78>)
 80017a8:	f001 fa4e 	bl	8002c48 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80017ac:	2001      	movs	r0, #1
 80017ae:	f000 fe1b 	bl	80023e8 <HAL_Delay>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	20001418 	.word	0x20001418
 80017c0:	20001468 	.word	0x20001468

080017c4 <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 80017ca:	4b37      	ldr	r3, [pc, #220]	; (80018a8 <init_displays+0xe4>)
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	4a36      	ldr	r2, [pc, #216]	; (80018a8 <init_displays+0xe4>)
 80017d0:	f023 0301 	bic.w	r3, r3, #1
 80017d4:	6013      	str	r3, [r2, #0]
	disable_OLED_EEPROM_writes();
 80017d6:	f7ff ff6b 	bl	80016b0 <disable_OLED_EEPROM_writes>
	raise_all_CS();
 80017da:	f7ff ff9b 	bl	8001714 <raise_all_CS>
	DC_HIGH();
 80017de:	2201      	movs	r2, #1
 80017e0:	2101      	movs	r1, #1
 80017e2:	4832      	ldr	r0, [pc, #200]	; (80018ac <init_displays+0xe8>)
 80017e4:	f001 f8d2 	bl	800298c <HAL_GPIO_WritePin>
	RST_HIGH();
 80017e8:	2201      	movs	r2, #1
 80017ea:	2102      	movs	r1, #2
 80017ec:	482f      	ldr	r0, [pc, #188]	; (80018ac <init_displays+0xe8>)
 80017ee:	f001 f8cd 	bl	800298c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80017f2:	200a      	movs	r0, #10
 80017f4:	f000 fdf8 	bl	80023e8 <HAL_Delay>
	RST_LOW();
 80017f8:	2200      	movs	r2, #0
 80017fa:	2102      	movs	r1, #2
 80017fc:	482b      	ldr	r0, [pc, #172]	; (80018ac <init_displays+0xe8>)
 80017fe:	f001 f8c5 	bl	800298c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 8001802:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001806:	2201      	movs	r2, #1
 8001808:	4929      	ldr	r1, [pc, #164]	; (80018b0 <init_displays+0xec>)
 800180a:	482a      	ldr	r0, [pc, #168]	; (80018b4 <init_displays+0xf0>)
 800180c:	f002 fa45 	bl	8003c9a <HAL_SPI_Transmit>
	HAL_Delay(10);
 8001810:	200a      	movs	r0, #10
 8001812:	f000 fde9 	bl	80023e8 <HAL_Delay>
	RST_HIGH();
 8001816:	2201      	movs	r2, #1
 8001818:	2102      	movs	r1, #2
 800181a:	4824      	ldr	r0, [pc, #144]	; (80018ac <init_displays+0xe8>)
 800181c:	f001 f8b6 	bl	800298c <HAL_GPIO_WritePin>

	DC_LOW();
 8001820:	2200      	movs	r2, #0
 8001822:	2101      	movs	r1, #1
 8001824:	4821      	ldr	r0, [pc, #132]	; (80018ac <init_displays+0xe8>)
 8001826:	f001 f8b1 	bl	800298c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800182a:	2001      	movs	r0, #1
 800182c:	f000 fddc 	bl	80023e8 <HAL_Delay>

	drop_all_CS();
 8001830:	f7ff ff54 	bl	80016dc <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001834:	2300      	movs	r3, #0
 8001836:	71fb      	strb	r3, [r7, #7]
 8001838:	e002      	b.n	8001840 <init_displays+0x7c>
 800183a:	79fb      	ldrb	r3, [r7, #7]
 800183c:	3301      	adds	r3, #1
 800183e:	71fb      	strb	r3, [r7, #7]
 8001840:	79fb      	ldrb	r3, [r7, #7]
 8001842:	2b4f      	cmp	r3, #79	; 0x4f
 8001844:	d9f9      	bls.n	800183a <init_displays+0x76>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8001846:	2300      	movs	r3, #0
 8001848:	80bb      	strh	r3, [r7, #4]
 800184a:	e014      	b.n	8001876 <init_displays+0xb2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 800184c:	88bb      	ldrh	r3, [r7, #4]
 800184e:	4a18      	ldr	r2, [pc, #96]	; (80018b0 <init_displays+0xec>)
 8001850:	1899      	adds	r1, r3, r2
 8001852:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001856:	2201      	movs	r2, #1
 8001858:	4816      	ldr	r0, [pc, #88]	; (80018b4 <init_displays+0xf0>)
 800185a:	f002 fa1e 	bl	8003c9a <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 800185e:	2300      	movs	r3, #0
 8001860:	70fb      	strb	r3, [r7, #3]
 8001862:	e002      	b.n	800186a <init_displays+0xa6>
 8001864:	78fb      	ldrb	r3, [r7, #3]
 8001866:	3301      	adds	r3, #1
 8001868:	70fb      	strb	r3, [r7, #3]
 800186a:	78fb      	ldrb	r3, [r7, #3]
 800186c:	2b09      	cmp	r3, #9
 800186e:	d9f9      	bls.n	8001864 <init_displays+0xa0>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8001870:	88bb      	ldrh	r3, [r7, #4]
 8001872:	3301      	adds	r3, #1
 8001874:	80bb      	strh	r3, [r7, #4]
 8001876:	88bb      	ldrh	r3, [r7, #4]
 8001878:	2b19      	cmp	r3, #25
 800187a:	d9e7      	bls.n	800184c <init_displays+0x88>
	}

	raise_all_CS();
 800187c:	f7ff ff4a 	bl	8001714 <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 8001880:	2201      	movs	r2, #1
 8001882:	2101      	movs	r1, #1
 8001884:	4809      	ldr	r0, [pc, #36]	; (80018ac <init_displays+0xe8>)
 8001886:	f001 f881 	bl	800298c <HAL_GPIO_WritePin>
	START_BUTTON_POLL();
 800188a:	4b07      	ldr	r3, [pc, #28]	; (80018a8 <init_displays+0xe4>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	4a06      	ldr	r2, [pc, #24]	; (80018a8 <init_displays+0xe4>)
 8001890:	f043 0301 	orr.w	r3, r3, #1
 8001894:	6013      	str	r3, [r2, #0]
	erase_buffer();
 8001896:	f000 f903 	bl	8001aa0 <erase_buffer>
	update_all_displays();
 800189a:	f000 f889 	bl	80019b0 <update_all_displays>
}
 800189e:	bf00      	nop
 80018a0:	3708      	adds	r7, #8
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	40000c00 	.word	0x40000c00
 80018ac:	40020000 	.word	0x40020000
 80018b0:	2000141c 	.word	0x2000141c
 80018b4:	200014bc 	.word	0x200014bc

080018b8 <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b086      	sub	sp, #24
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
	STOP_BUTTON_POLL();
 80018c2:	4b36      	ldr	r3, [pc, #216]	; (800199c <update_display+0xe4>)
 80018c4:	681b      	ldr	r3, [r3, #0]
 80018c6:	4a35      	ldr	r2, [pc, #212]	; (800199c <update_display+0xe4>)
 80018c8:	f023 0301 	bic.w	r3, r3, #1
 80018cc:	6013      	str	r3, [r2, #0]
	DC_LOW();
 80018ce:	2200      	movs	r2, #0
 80018d0:	2101      	movs	r1, #1
 80018d2:	4833      	ldr	r0, [pc, #204]	; (80019a0 <update_display+0xe8>)
 80018d4:	f001 f85a 	bl	800298c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80018d8:	2001      	movs	r0, #1
 80018da:	f000 fd85 	bl	80023e8 <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	4618      	mov	r0, r3
 80018e2:	f7ff ff31 	bl	8001748 <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 80018e6:	2300      	movs	r3, #0
 80018e8:	75fb      	strb	r3, [r7, #23]
 80018ea:	e002      	b.n	80018f2 <update_display+0x3a>
 80018ec:	7dfb      	ldrb	r3, [r7, #23]
 80018ee:	3301      	adds	r3, #1
 80018f0:	75fb      	strb	r3, [r7, #23]
 80018f2:	7dfb      	ldrb	r3, [r7, #23]
 80018f4:	2b4f      	cmp	r3, #79	; 0x4f
 80018f6:	d9f9      	bls.n	80018ec <update_display+0x34>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 80018f8:	2300      	movs	r3, #0
 80018fa:	82bb      	strh	r3, [r7, #20]
 80018fc:	e014      	b.n	8001928 <update_display+0x70>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 80018fe:	8abb      	ldrh	r3, [r7, #20]
 8001900:	4a28      	ldr	r2, [pc, #160]	; (80019a4 <update_display+0xec>)
 8001902:	1899      	adds	r1, r3, r2
 8001904:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001908:	2201      	movs	r2, #1
 800190a:	4827      	ldr	r0, [pc, #156]	; (80019a8 <update_display+0xf0>)
 800190c:	f002 f9c5 	bl	8003c9a <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001910:	2300      	movs	r3, #0
 8001912:	74fb      	strb	r3, [r7, #19]
 8001914:	e002      	b.n	800191c <update_display+0x64>
 8001916:	7cfb      	ldrb	r3, [r7, #19]
 8001918:	3301      	adds	r3, #1
 800191a:	74fb      	strb	r3, [r7, #19]
 800191c:	7cfb      	ldrb	r3, [r7, #19]
 800191e:	2b09      	cmp	r3, #9
 8001920:	d9f9      	bls.n	8001916 <update_display+0x5e>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001922:	8abb      	ldrh	r3, [r7, #20]
 8001924:	3301      	adds	r3, #1
 8001926:	82bb      	strh	r3, [r7, #20]
 8001928:	8abb      	ldrh	r3, [r7, #20]
 800192a:	2b05      	cmp	r3, #5
 800192c:	d9e7      	bls.n	80018fe <update_display+0x46>
	}

	DC_HIGH();
 800192e:	2201      	movs	r2, #1
 8001930:	2101      	movs	r1, #1
 8001932:	481b      	ldr	r0, [pc, #108]	; (80019a0 <update_display+0xe8>)
 8001934:	f001 f82a 	bl	800298c <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001938:	2300      	movs	r3, #0
 800193a:	74bb      	strb	r3, [r7, #18]
 800193c:	e002      	b.n	8001944 <update_display+0x8c>
 800193e:	7cbb      	ldrb	r3, [r7, #18]
 8001940:	3301      	adds	r3, #1
 8001942:	74bb      	strb	r3, [r7, #18]
 8001944:	7cbb      	ldrb	r3, [r7, #18]
 8001946:	2b4f      	cmp	r3, #79	; 0x4f
 8001948:	d9f9      	bls.n	800193e <update_display+0x86>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 800194a:	2300      	movs	r3, #0
 800194c:	823b      	strh	r3, [r7, #16]
 800194e:	e014      	b.n	800197a <update_display+0xc2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8001950:	8a3b      	ldrh	r3, [r7, #16]
 8001952:	4a16      	ldr	r2, [pc, #88]	; (80019ac <update_display+0xf4>)
 8001954:	1899      	adds	r1, r3, r2
 8001956:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800195a:	2201      	movs	r2, #1
 800195c:	4812      	ldr	r0, [pc, #72]	; (80019a8 <update_display+0xf0>)
 800195e:	f002 f99c 	bl	8003c9a <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8001962:	2300      	movs	r3, #0
 8001964:	73fb      	strb	r3, [r7, #15]
 8001966:	e002      	b.n	800196e <update_display+0xb6>
 8001968:	7bfb      	ldrb	r3, [r7, #15]
 800196a:	3301      	adds	r3, #1
 800196c:	73fb      	strb	r3, [r7, #15]
 800196e:	7bfb      	ldrb	r3, [r7, #15]
 8001970:	2b09      	cmp	r3, #9
 8001972:	d9f9      	bls.n	8001968 <update_display+0xb0>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001974:	8a3b      	ldrh	r3, [r7, #16]
 8001976:	3301      	adds	r3, #1
 8001978:	823b      	strh	r3, [r7, #16]
 800197a:	8a3b      	ldrh	r3, [r7, #16]
 800197c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001980:	d3e6      	bcc.n	8001950 <update_display+0x98>
	}

	raise_all_CS();
 8001982:	f7ff fec7 	bl	8001714 <raise_all_CS>
	START_BUTTON_POLL();
 8001986:	4b05      	ldr	r3, [pc, #20]	; (800199c <update_display+0xe4>)
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4a04      	ldr	r2, [pc, #16]	; (800199c <update_display+0xe4>)
 800198c:	f043 0301 	orr.w	r3, r3, #1
 8001990:	6013      	str	r3, [r2, #0]
}
 8001992:	bf00      	nop
 8001994:	3718      	adds	r7, #24
 8001996:	46bd      	mov	sp, r7
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	40000c00 	.word	0x40000c00
 80019a0:	40020000 	.word	0x40020000
 80019a4:	20001438 	.word	0x20001438
 80019a8:	200014bc 	.word	0x200014bc
 80019ac:	20006dc4 	.word	0x20006dc4

080019b0 <update_all_displays>:

void update_all_displays() {
 80019b0:	b580      	push	{r7, lr}
 80019b2:	b084      	sub	sp, #16
 80019b4:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 80019b6:	4b35      	ldr	r3, [pc, #212]	; (8001a8c <update_all_displays+0xdc>)
 80019b8:	681b      	ldr	r3, [r3, #0]
 80019ba:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <update_all_displays+0xdc>)
 80019bc:	f023 0301 	bic.w	r3, r3, #1
 80019c0:	6013      	str	r3, [r2, #0]
	DC_LOW();
 80019c2:	2200      	movs	r2, #0
 80019c4:	2101      	movs	r1, #1
 80019c6:	4832      	ldr	r0, [pc, #200]	; (8001a90 <update_all_displays+0xe0>)
 80019c8:	f000 ffe0 	bl	800298c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019cc:	2001      	movs	r0, #1
 80019ce:	f000 fd0b 	bl	80023e8 <HAL_Delay>
	drop_all_CS();
 80019d2:	f7ff fe83 	bl	80016dc <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 80019d6:	2300      	movs	r3, #0
 80019d8:	73fb      	strb	r3, [r7, #15]
 80019da:	e002      	b.n	80019e2 <update_all_displays+0x32>
 80019dc:	7bfb      	ldrb	r3, [r7, #15]
 80019de:	3301      	adds	r3, #1
 80019e0:	73fb      	strb	r3, [r7, #15]
 80019e2:	7bfb      	ldrb	r3, [r7, #15]
 80019e4:	2b4f      	cmp	r3, #79	; 0x4f
 80019e6:	d9f9      	bls.n	80019dc <update_all_displays+0x2c>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 80019e8:	2300      	movs	r3, #0
 80019ea:	81bb      	strh	r3, [r7, #12]
 80019ec:	e014      	b.n	8001a18 <update_all_displays+0x68>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 80019ee:	89bb      	ldrh	r3, [r7, #12]
 80019f0:	4a28      	ldr	r2, [pc, #160]	; (8001a94 <update_all_displays+0xe4>)
 80019f2:	1899      	adds	r1, r3, r2
 80019f4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019f8:	2201      	movs	r2, #1
 80019fa:	4827      	ldr	r0, [pc, #156]	; (8001a98 <update_all_displays+0xe8>)
 80019fc:	f002 f94d 	bl	8003c9a <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001a00:	2300      	movs	r3, #0
 8001a02:	72fb      	strb	r3, [r7, #11]
 8001a04:	e002      	b.n	8001a0c <update_all_displays+0x5c>
 8001a06:	7afb      	ldrb	r3, [r7, #11]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	72fb      	strb	r3, [r7, #11]
 8001a0c:	7afb      	ldrb	r3, [r7, #11]
 8001a0e:	2b09      	cmp	r3, #9
 8001a10:	d9f9      	bls.n	8001a06 <update_all_displays+0x56>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001a12:	89bb      	ldrh	r3, [r7, #12]
 8001a14:	3301      	adds	r3, #1
 8001a16:	81bb      	strh	r3, [r7, #12]
 8001a18:	89bb      	ldrh	r3, [r7, #12]
 8001a1a:	2b05      	cmp	r3, #5
 8001a1c:	d9e7      	bls.n	80019ee <update_all_displays+0x3e>
	}

	DC_HIGH();
 8001a1e:	2201      	movs	r2, #1
 8001a20:	2101      	movs	r1, #1
 8001a22:	481b      	ldr	r0, [pc, #108]	; (8001a90 <update_all_displays+0xe0>)
 8001a24:	f000 ffb2 	bl	800298c <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001a28:	2300      	movs	r3, #0
 8001a2a:	72bb      	strb	r3, [r7, #10]
 8001a2c:	e002      	b.n	8001a34 <update_all_displays+0x84>
 8001a2e:	7abb      	ldrb	r3, [r7, #10]
 8001a30:	3301      	adds	r3, #1
 8001a32:	72bb      	strb	r3, [r7, #10]
 8001a34:	7abb      	ldrb	r3, [r7, #10]
 8001a36:	2b4f      	cmp	r3, #79	; 0x4f
 8001a38:	d9f9      	bls.n	8001a2e <update_all_displays+0x7e>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001a3a:	2300      	movs	r3, #0
 8001a3c:	813b      	strh	r3, [r7, #8]
 8001a3e:	e014      	b.n	8001a6a <update_all_displays+0xba>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8001a40:	893b      	ldrh	r3, [r7, #8]
 8001a42:	4a16      	ldr	r2, [pc, #88]	; (8001a9c <update_all_displays+0xec>)
 8001a44:	1899      	adds	r1, r3, r2
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a4a:	2201      	movs	r2, #1
 8001a4c:	4812      	ldr	r0, [pc, #72]	; (8001a98 <update_all_displays+0xe8>)
 8001a4e:	f002 f924 	bl	8003c9a <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8001a52:	2300      	movs	r3, #0
 8001a54:	71fb      	strb	r3, [r7, #7]
 8001a56:	e002      	b.n	8001a5e <update_all_displays+0xae>
 8001a58:	79fb      	ldrb	r3, [r7, #7]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	71fb      	strb	r3, [r7, #7]
 8001a5e:	79fb      	ldrb	r3, [r7, #7]
 8001a60:	2b09      	cmp	r3, #9
 8001a62:	d9f9      	bls.n	8001a58 <update_all_displays+0xa8>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001a64:	893b      	ldrh	r3, [r7, #8]
 8001a66:	3301      	adds	r3, #1
 8001a68:	813b      	strh	r3, [r7, #8]
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a70:	d3e6      	bcc.n	8001a40 <update_all_displays+0x90>
	}
	raise_all_CS();
 8001a72:	f7ff fe4f 	bl	8001714 <raise_all_CS>
	START_BUTTON_POLL();
 8001a76:	4b05      	ldr	r3, [pc, #20]	; (8001a8c <update_all_displays+0xdc>)
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	4a04      	ldr	r2, [pc, #16]	; (8001a8c <update_all_displays+0xdc>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6013      	str	r3, [r2, #0]
}
 8001a82:	bf00      	nop
 8001a84:	3710      	adds	r7, #16
 8001a86:	46bd      	mov	sp, r7
 8001a88:	bd80      	pop	{r7, pc}
 8001a8a:	bf00      	nop
 8001a8c:	40000c00 	.word	0x40000c00
 8001a90:	40020000 	.word	0x40020000
 8001a94:	20001438 	.word	0x20001438
 8001a98:	200014bc 	.word	0x200014bc
 8001a9c:	20006dc4 	.word	0x20006dc4

08001aa0 <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 8001aa0:	b480      	push	{r7}
 8001aa2:	b083      	sub	sp, #12
 8001aa4:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	80fb      	strh	r3, [r7, #6]
 8001aaa:	e006      	b.n	8001aba <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 8001aac:	88fb      	ldrh	r3, [r7, #6]
 8001aae:	4a08      	ldr	r2, [pc, #32]	; (8001ad0 <erase_buffer+0x30>)
 8001ab0:	2100      	movs	r1, #0
 8001ab2:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001ab4:	88fb      	ldrh	r3, [r7, #6]
 8001ab6:	3301      	adds	r3, #1
 8001ab8:	80fb      	strh	r3, [r7, #6]
 8001aba:	88fb      	ldrh	r3, [r7, #6]
 8001abc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ac0:	d3f4      	bcc.n	8001aac <erase_buffer+0xc>
	}
}
 8001ac2:	bf00      	nop
 8001ac4:	bf00      	nop
 8001ac6:	370c      	adds	r7, #12
 8001ac8:	46bd      	mov	sp, r7
 8001aca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ace:	4770      	bx	lr
 8001ad0:	20006dc4 	.word	0x20006dc4

08001ad4 <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 8001ad4:	b480      	push	{r7}
 8001ad6:	b083      	sub	sp, #12
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	4603      	mov	r3, r0
 8001adc:	71fb      	strb	r3, [r7, #7]
 8001ade:	460b      	mov	r3, r1
 8001ae0:	71bb      	strb	r3, [r7, #6]
 8001ae2:	4613      	mov	r3, r2
 8001ae4:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8001ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001aea:	2b00      	cmp	r3, #0
 8001aec:	db3d      	blt.n	8001b6a <draw_pixel+0x96>
 8001aee:	79bb      	ldrb	r3, [r7, #6]
 8001af0:	2b1f      	cmp	r3, #31
 8001af2:	d83a      	bhi.n	8001b6a <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 8001af4:	797b      	ldrb	r3, [r7, #5]
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d01a      	beq.n	8001b30 <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 8001afa:	79fa      	ldrb	r2, [r7, #7]
 8001afc:	79bb      	ldrb	r3, [r7, #6]
 8001afe:	08db      	lsrs	r3, r3, #3
 8001b00:	b2d8      	uxtb	r0, r3
 8001b02:	4603      	mov	r3, r0
 8001b04:	01db      	lsls	r3, r3, #7
 8001b06:	4413      	add	r3, r2
 8001b08:	4a1b      	ldr	r2, [pc, #108]	; (8001b78 <draw_pixel+0xa4>)
 8001b0a:	5cd3      	ldrb	r3, [r2, r3]
 8001b0c:	b25a      	sxtb	r2, r3
 8001b0e:	79bb      	ldrb	r3, [r7, #6]
 8001b10:	f003 0307 	and.w	r3, r3, #7
 8001b14:	2101      	movs	r1, #1
 8001b16:	fa01 f303 	lsl.w	r3, r1, r3
 8001b1a:	b25b      	sxtb	r3, r3
 8001b1c:	4313      	orrs	r3, r2
 8001b1e:	b259      	sxtb	r1, r3
 8001b20:	79fa      	ldrb	r2, [r7, #7]
 8001b22:	4603      	mov	r3, r0
 8001b24:	01db      	lsls	r3, r3, #7
 8001b26:	4413      	add	r3, r2
 8001b28:	b2c9      	uxtb	r1, r1
 8001b2a:	4a13      	ldr	r2, [pc, #76]	; (8001b78 <draw_pixel+0xa4>)
 8001b2c:	54d1      	strb	r1, [r2, r3]
 8001b2e:	e01d      	b.n	8001b6c <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 8001b30:	79fa      	ldrb	r2, [r7, #7]
 8001b32:	79bb      	ldrb	r3, [r7, #6]
 8001b34:	08db      	lsrs	r3, r3, #3
 8001b36:	b2d8      	uxtb	r0, r3
 8001b38:	4603      	mov	r3, r0
 8001b3a:	01db      	lsls	r3, r3, #7
 8001b3c:	4413      	add	r3, r2
 8001b3e:	4a0e      	ldr	r2, [pc, #56]	; (8001b78 <draw_pixel+0xa4>)
 8001b40:	5cd3      	ldrb	r3, [r2, r3]
 8001b42:	b25a      	sxtb	r2, r3
 8001b44:	79bb      	ldrb	r3, [r7, #6]
 8001b46:	f003 0307 	and.w	r3, r3, #7
 8001b4a:	2101      	movs	r1, #1
 8001b4c:	fa01 f303 	lsl.w	r3, r1, r3
 8001b50:	b25b      	sxtb	r3, r3
 8001b52:	43db      	mvns	r3, r3
 8001b54:	b25b      	sxtb	r3, r3
 8001b56:	4013      	ands	r3, r2
 8001b58:	b259      	sxtb	r1, r3
 8001b5a:	79fa      	ldrb	r2, [r7, #7]
 8001b5c:	4603      	mov	r3, r0
 8001b5e:	01db      	lsls	r3, r3, #7
 8001b60:	4413      	add	r3, r2
 8001b62:	b2c9      	uxtb	r1, r1
 8001b64:	4a04      	ldr	r2, [pc, #16]	; (8001b78 <draw_pixel+0xa4>)
 8001b66:	54d1      	strb	r1, [r2, r3]
 8001b68:	e000      	b.n	8001b6c <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8001b6a:	bf00      	nop
	}
}
 8001b6c:	370c      	adds	r7, #12
 8001b6e:	46bd      	mov	sp, r7
 8001b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b74:	4770      	bx	lr
 8001b76:	bf00      	nop
 8001b78:	20006dc4 	.word	0x20006dc4

08001b7c <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 8001b7c:	b590      	push	{r4, r7, lr}
 8001b7e:	b085      	sub	sp, #20
 8001b80:	af02      	add	r7, sp, #8
 8001b82:	4604      	mov	r4, r0
 8001b84:	4608      	mov	r0, r1
 8001b86:	4611      	mov	r1, r2
 8001b88:	461a      	mov	r2, r3
 8001b8a:	4623      	mov	r3, r4
 8001b8c:	71fb      	strb	r3, [r7, #7]
 8001b8e:	4603      	mov	r3, r0
 8001b90:	71bb      	strb	r3, [r7, #6]
 8001b92:	460b      	mov	r3, r1
 8001b94:	717b      	strb	r3, [r7, #5]
 8001b96:	4613      	mov	r3, r2
 8001b98:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 8001b9a:	79fb      	ldrb	r3, [r7, #7]
 8001b9c:	2b1f      	cmp	r3, #31
 8001b9e:	d913      	bls.n	8001bc8 <draw_char+0x4c>
 8001ba0:	79fb      	ldrb	r3, [r7, #7]
 8001ba2:	2b7e      	cmp	r3, #126	; 0x7e
 8001ba4:	d810      	bhi.n	8001bc8 <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 8001ba6:	79fb      	ldrb	r3, [r7, #7]
 8001ba8:	3b20      	subs	r3, #32
 8001baa:	2236      	movs	r2, #54	; 0x36
 8001bac:	fb02 f303 	mul.w	r3, r2, r3
 8001bb0:	4a07      	ldr	r2, [pc, #28]	; (8001bd0 <draw_char+0x54>)
 8001bb2:	1898      	adds	r0, r3, r2
 8001bb4:	797a      	ldrb	r2, [r7, #5]
 8001bb6:	79b9      	ldrb	r1, [r7, #6]
 8001bb8:	793b      	ldrb	r3, [r7, #4]
 8001bba:	9301      	str	r3, [sp, #4]
 8001bbc:	231b      	movs	r3, #27
 8001bbe:	9300      	str	r3, [sp, #0]
 8001bc0:	230c      	movs	r3, #12
 8001bc2:	f000 f807 	bl	8001bd4 <draw_bmp>
 8001bc6:	e000      	b.n	8001bca <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 8001bc8:	bf00      	nop
}
 8001bca:	370c      	adds	r7, #12
 8001bcc:	46bd      	mov	sp, r7
 8001bce:	bd90      	pop	{r4, r7, pc}
 8001bd0:	2000000c 	.word	0x2000000c

08001bd4 <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 8001bd4:	b580      	push	{r7, lr}
 8001bd6:	b084      	sub	sp, #16
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	4608      	mov	r0, r1
 8001bde:	4611      	mov	r1, r2
 8001be0:	461a      	mov	r2, r3
 8001be2:	4603      	mov	r3, r0
 8001be4:	70fb      	strb	r3, [r7, #3]
 8001be6:	460b      	mov	r3, r1
 8001be8:	70bb      	strb	r3, [r7, #2]
 8001bea:	4613      	mov	r3, r2
 8001bec:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 8001bee:	787b      	ldrb	r3, [r7, #1]
 8001bf0:	3307      	adds	r3, #7
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	da00      	bge.n	8001bf8 <draw_bmp+0x24>
 8001bf6:	3307      	adds	r3, #7
 8001bf8:	10db      	asrs	r3, r3, #3
 8001bfa:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 8001bfc:	2300      	movs	r3, #0
 8001bfe:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 8001c00:	2300      	movs	r3, #0
 8001c02:	81bb      	strh	r3, [r7, #12]
 8001c04:	e047      	b.n	8001c96 <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 8001c06:	2300      	movs	r3, #0
 8001c08:	817b      	strh	r3, [r7, #10]
 8001c0a:	e036      	b.n	8001c7a <draw_bmp+0xa6>
			if (i & 7)
 8001c0c:	897b      	ldrh	r3, [r7, #10]
 8001c0e:	f003 0307 	and.w	r3, r3, #7
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d003      	beq.n	8001c1e <draw_bmp+0x4a>
				b <<= 1;
 8001c16:	7bfb      	ldrb	r3, [r7, #15]
 8001c18:	005b      	lsls	r3, r3, #1
 8001c1a:	73fb      	strb	r3, [r7, #15]
 8001c1c:	e012      	b.n	8001c44 <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 8001c1e:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c22:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c26:	fb03 f202 	mul.w	r2, r3, r2
 8001c2a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	da00      	bge.n	8001c34 <draw_bmp+0x60>
 8001c32:	3307      	adds	r3, #7
 8001c34:	10db      	asrs	r3, r3, #3
 8001c36:	b21b      	sxth	r3, r3
 8001c38:	4413      	add	r3, r2
 8001c3a:	461a      	mov	r2, r3
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	4413      	add	r3, r2
 8001c40:	781b      	ldrb	r3, [r3, #0]
 8001c42:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 8001c44:	897b      	ldrh	r3, [r7, #10]
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	78fb      	ldrb	r3, [r7, #3]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2d8      	uxtb	r0, r3
 8001c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	db06      	blt.n	8001c64 <draw_bmp+0x90>
 8001c56:	7f3b      	ldrb	r3, [r7, #28]
 8001c58:	2b00      	cmp	r3, #0
 8001c5a:	bf0c      	ite	eq
 8001c5c:	2301      	moveq	r3, #1
 8001c5e:	2300      	movne	r3, #0
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	e000      	b.n	8001c66 <draw_bmp+0x92>
 8001c64:	7f3b      	ldrb	r3, [r7, #28]
 8001c66:	78b9      	ldrb	r1, [r7, #2]
 8001c68:	461a      	mov	r2, r3
 8001c6a:	f7ff ff33 	bl	8001ad4 <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 8001c6e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001c72:	b29b      	uxth	r3, r3
 8001c74:	3301      	adds	r3, #1
 8001c76:	b29b      	uxth	r3, r3
 8001c78:	817b      	strh	r3, [r7, #10]
 8001c7a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001c7e:	787b      	ldrb	r3, [r7, #1]
 8001c80:	429a      	cmp	r2, r3
 8001c82:	dbc3      	blt.n	8001c0c <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 8001c84:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001c88:	b29b      	uxth	r3, r3
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b29b      	uxth	r3, r3
 8001c8e:	81bb      	strh	r3, [r7, #12]
 8001c90:	78bb      	ldrb	r3, [r7, #2]
 8001c92:	3301      	adds	r3, #1
 8001c94:	70bb      	strb	r3, [r7, #2]
 8001c96:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001c9a:	7e3b      	ldrb	r3, [r7, #24]
 8001c9c:	429a      	cmp	r2, r3
 8001c9e:	dbb2      	blt.n	8001c06 <draw_bmp+0x32>
		}
	}
}
 8001ca0:	bf00      	nop
 8001ca2:	bf00      	nop
 8001ca4:	3710      	adds	r7, #16
 8001ca6:	46bd      	mov	sp, r7
 8001ca8:	bd80      	pop	{r7, pc}

08001caa <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 8001caa:	b580      	push	{r7, lr}
 8001cac:	b084      	sub	sp, #16
 8001cae:	af00      	add	r7, sp, #0
 8001cb0:	6078      	str	r0, [r7, #4]
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 8001cb6:	6878      	ldr	r0, [r7, #4]
 8001cb8:	f7fe fa8c 	bl	80001d4 <strlen>
 8001cbc:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d02c      	beq.n	8001d1e <draw_string+0x74>
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	2b0a      	cmp	r3, #10
 8001cc8:	d829      	bhi.n	8001d1e <draw_string+0x74>

    uint8_t x = DISPLAY_WIDTH/2;
 8001cca:	2340      	movs	r3, #64	; 0x40
 8001ccc:	72fb      	strb	r3, [r7, #11]
    if (len%2) {
 8001cce:	68fb      	ldr	r3, [r7, #12]
 8001cd0:	f003 0301 	and.w	r3, r3, #1
 8001cd4:	2b00      	cmp	r3, #0
 8001cd6:	d005      	beq.n	8001ce4 <draw_string+0x3a>
        x -= FONT_WIDTH/2;
 8001cd8:	7afb      	ldrb	r3, [r7, #11]
 8001cda:	3b06      	subs	r3, #6
 8001cdc:	72fb      	strb	r3, [r7, #11]
        len -= 1;
 8001cde:	68fb      	ldr	r3, [r7, #12]
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 8001ce4:	68fa      	ldr	r2, [r7, #12]
 8001ce6:	4613      	mov	r3, r2
 8001ce8:	005b      	lsls	r3, r3, #1
 8001cea:	4413      	add	r3, r2
 8001cec:	009b      	lsls	r3, r3, #2
 8001cee:	085b      	lsrs	r3, r3, #1
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	7afa      	ldrb	r2, [r7, #11]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	72fb      	strb	r3, [r7, #11]

    while(*str) {
 8001cf8:	e00c      	b.n	8001d14 <draw_string+0x6a>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	7818      	ldrb	r0, [r3, #0]
 8001cfe:	78fb      	ldrb	r3, [r7, #3]
 8001d00:	7af9      	ldrb	r1, [r7, #11]
 8001d02:	2203      	movs	r2, #3
 8001d04:	f7ff ff3a 	bl	8001b7c <draw_char>
        x += FONT_WIDTH;
 8001d08:	7afb      	ldrb	r3, [r7, #11]
 8001d0a:	330c      	adds	r3, #12
 8001d0c:	72fb      	strb	r3, [r7, #11]
        ++str;
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3301      	adds	r3, #1
 8001d12:	607b      	str	r3, [r7, #4]
    while(*str) {
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	781b      	ldrb	r3, [r3, #0]
 8001d18:	2b00      	cmp	r3, #0
 8001d1a:	d1ee      	bne.n	8001cfa <draw_string+0x50>
 8001d1c:	e000      	b.n	8001d20 <draw_string+0x76>
    if (len <= 0 || len > 10) return;
 8001d1e:	bf00      	nop
    }
}
 8001d20:	3710      	adds	r7, #16
 8001d22:	46bd      	mov	sp, r7
 8001d24:	bd80      	pop	{r7, pc}
	...

08001d28 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b082      	sub	sp, #8
 8001d2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d2e:	2300      	movs	r3, #0
 8001d30:	607b      	str	r3, [r7, #4]
 8001d32:	4b10      	ldr	r3, [pc, #64]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d36:	4a0f      	ldr	r2, [pc, #60]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d38:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d3c:	6453      	str	r3, [r2, #68]	; 0x44
 8001d3e:	4b0d      	ldr	r3, [pc, #52]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d42:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d46:	607b      	str	r3, [r7, #4]
 8001d48:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001d4a:	2300      	movs	r3, #0
 8001d4c:	603b      	str	r3, [r7, #0]
 8001d4e:	4b09      	ldr	r3, [pc, #36]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d52:	4a08      	ldr	r2, [pc, #32]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d54:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d58:	6413      	str	r3, [r2, #64]	; 0x40
 8001d5a:	4b06      	ldr	r3, [pc, #24]	; (8001d74 <HAL_MspInit+0x4c>)
 8001d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001d5e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d62:	603b      	str	r3, [r7, #0]
 8001d64:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001d66:	2007      	movs	r0, #7
 8001d68:	f000 fc32 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d6c:	bf00      	nop
 8001d6e:	3708      	adds	r7, #8
 8001d70:	46bd      	mov	sp, r7
 8001d72:	bd80      	pop	{r7, pc}
 8001d74:	40023800 	.word	0x40023800

08001d78 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001d78:	b580      	push	{r7, lr}
 8001d7a:	b08a      	sub	sp, #40	; 0x28
 8001d7c:	af00      	add	r7, sp, #0
 8001d7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d80:	f107 0314 	add.w	r3, r7, #20
 8001d84:	2200      	movs	r2, #0
 8001d86:	601a      	str	r2, [r3, #0]
 8001d88:	605a      	str	r2, [r3, #4]
 8001d8a:	609a      	str	r2, [r3, #8]
 8001d8c:	60da      	str	r2, [r3, #12]
 8001d8e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	681b      	ldr	r3, [r3, #0]
 8001d94:	4a19      	ldr	r2, [pc, #100]	; (8001dfc <HAL_I2C_MspInit+0x84>)
 8001d96:	4293      	cmp	r3, r2
 8001d98:	d12c      	bne.n	8001df4 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001d9a:	2300      	movs	r3, #0
 8001d9c:	613b      	str	r3, [r7, #16]
 8001d9e:	4b18      	ldr	r3, [pc, #96]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001da0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001da2:	4a17      	ldr	r2, [pc, #92]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001da4:	f043 0302 	orr.w	r3, r3, #2
 8001da8:	6313      	str	r3, [r2, #48]	; 0x30
 8001daa:	4b15      	ldr	r3, [pc, #84]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dae:	f003 0302 	and.w	r3, r3, #2
 8001db2:	613b      	str	r3, [r7, #16]
 8001db4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001db6:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001dba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001dbc:	2312      	movs	r3, #18
 8001dbe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001dc0:	2300      	movs	r3, #0
 8001dc2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001dc4:	2303      	movs	r3, #3
 8001dc6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001dc8:	2304      	movs	r3, #4
 8001dca:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dcc:	f107 0314 	add.w	r3, r7, #20
 8001dd0:	4619      	mov	r1, r3
 8001dd2:	480c      	ldr	r0, [pc, #48]	; (8001e04 <HAL_I2C_MspInit+0x8c>)
 8001dd4:	f000 fc3e 	bl	8002654 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001dd8:	2300      	movs	r3, #0
 8001dda:	60fb      	str	r3, [r7, #12]
 8001ddc:	4b08      	ldr	r3, [pc, #32]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001de0:	4a07      	ldr	r2, [pc, #28]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001de2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001de6:	6413      	str	r3, [r2, #64]	; 0x40
 8001de8:	4b05      	ldr	r3, [pc, #20]	; (8001e00 <HAL_I2C_MspInit+0x88>)
 8001dea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001dec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001df0:	60fb      	str	r3, [r7, #12]
 8001df2:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001df4:	bf00      	nop
 8001df6:	3728      	adds	r7, #40	; 0x28
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}
 8001dfc:	40005400 	.word	0x40005400
 8001e00:	40023800 	.word	0x40023800
 8001e04:	40020400 	.word	0x40020400

08001e08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b08a      	sub	sp, #40	; 0x28
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e10:	f107 0314 	add.w	r3, r7, #20
 8001e14:	2200      	movs	r2, #0
 8001e16:	601a      	str	r2, [r3, #0]
 8001e18:	605a      	str	r2, [r3, #4]
 8001e1a:	609a      	str	r2, [r3, #8]
 8001e1c:	60da      	str	r2, [r3, #12]
 8001e1e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	681b      	ldr	r3, [r3, #0]
 8001e24:	4a28      	ldr	r2, [pc, #160]	; (8001ec8 <HAL_SPI_MspInit+0xc0>)
 8001e26:	4293      	cmp	r3, r2
 8001e28:	d14a      	bne.n	8001ec0 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001e2a:	2300      	movs	r3, #0
 8001e2c:	613b      	str	r3, [r7, #16]
 8001e2e:	4b27      	ldr	r3, [pc, #156]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e32:	4a26      	ldr	r2, [pc, #152]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e34:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e38:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3a:	4b24      	ldr	r3, [pc, #144]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e42:	613b      	str	r3, [r7, #16]
 8001e44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001e46:	2300      	movs	r3, #0
 8001e48:	60fb      	str	r3, [r7, #12]
 8001e4a:	4b20      	ldr	r3, [pc, #128]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e4e:	4a1f      	ldr	r2, [pc, #124]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e50:	f043 0304 	orr.w	r3, r3, #4
 8001e54:	6313      	str	r3, [r2, #48]	; 0x30
 8001e56:	4b1d      	ldr	r3, [pc, #116]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e5a:	f003 0304 	and.w	r3, r3, #4
 8001e5e:	60fb      	str	r3, [r7, #12]
 8001e60:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001e62:	2300      	movs	r3, #0
 8001e64:	60bb      	str	r3, [r7, #8]
 8001e66:	4b19      	ldr	r3, [pc, #100]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e6a:	4a18      	ldr	r2, [pc, #96]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e6c:	f043 0302 	orr.w	r3, r3, #2
 8001e70:	6313      	str	r3, [r2, #48]	; 0x30
 8001e72:	4b16      	ldr	r3, [pc, #88]	; (8001ecc <HAL_SPI_MspInit+0xc4>)
 8001e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001e76:	f003 0302 	and.w	r3, r3, #2
 8001e7a:	60bb      	str	r3, [r7, #8]
 8001e7c:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001e7e:	2308      	movs	r3, #8
 8001e80:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001e82:	2302      	movs	r3, #2
 8001e84:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e86:	2300      	movs	r3, #0
 8001e88:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001e8a:	2303      	movs	r3, #3
 8001e8c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001e8e:	2305      	movs	r3, #5
 8001e90:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001e92:	f107 0314 	add.w	r3, r7, #20
 8001e96:	4619      	mov	r1, r3
 8001e98:	480d      	ldr	r0, [pc, #52]	; (8001ed0 <HAL_SPI_MspInit+0xc8>)
 8001e9a:	f000 fbdb 	bl	8002654 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001e9e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001ea2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ea4:	2302      	movs	r3, #2
 8001ea6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ea8:	2300      	movs	r3, #0
 8001eaa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001eac:	2303      	movs	r3, #3
 8001eae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001eb0:	2305      	movs	r3, #5
 8001eb2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001eb4:	f107 0314 	add.w	r3, r7, #20
 8001eb8:	4619      	mov	r1, r3
 8001eba:	4806      	ldr	r0, [pc, #24]	; (8001ed4 <HAL_SPI_MspInit+0xcc>)
 8001ebc:	f000 fbca 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001ec0:	bf00      	nop
 8001ec2:	3728      	adds	r7, #40	; 0x28
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	bd80      	pop	{r7, pc}
 8001ec8:	40003800 	.word	0x40003800
 8001ecc:	40023800 	.word	0x40023800
 8001ed0:	40020800 	.word	0x40020800
 8001ed4:	40020400 	.word	0x40020400

08001ed8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001ed8:	b580      	push	{r7, lr}
 8001eda:	b08c      	sub	sp, #48	; 0x30
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ee0:	f107 031c 	add.w	r3, r7, #28
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	601a      	str	r2, [r3, #0]
 8001ee8:	605a      	str	r2, [r3, #4]
 8001eea:	609a      	str	r2, [r3, #8]
 8001eec:	60da      	str	r2, [r3, #12]
 8001eee:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	4a3f      	ldr	r2, [pc, #252]	; (8001ff4 <HAL_TIM_Base_MspInit+0x11c>)
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	d10e      	bne.n	8001f18 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8001efa:	2300      	movs	r3, #0
 8001efc:	61bb      	str	r3, [r7, #24]
 8001efe:	4b3e      	ldr	r3, [pc, #248]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f00:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f02:	4a3d      	ldr	r2, [pc, #244]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f04:	f043 0301 	orr.w	r3, r3, #1
 8001f08:	6453      	str	r3, [r2, #68]	; 0x44
 8001f0a:	4b3b      	ldr	r3, [pc, #236]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001f0e:	f003 0301 	and.w	r3, r3, #1
 8001f12:	61bb      	str	r3, [r7, #24]
 8001f14:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8001f16:	e069      	b.n	8001fec <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8001f18:	687b      	ldr	r3, [r7, #4]
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8001f20:	d135      	bne.n	8001f8e <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001f22:	2300      	movs	r3, #0
 8001f24:	617b      	str	r3, [r7, #20]
 8001f26:	4b34      	ldr	r3, [pc, #208]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f2a:	4a33      	ldr	r2, [pc, #204]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f2c:	f043 0301 	orr.w	r3, r3, #1
 8001f30:	6413      	str	r3, [r2, #64]	; 0x40
 8001f32:	4b31      	ldr	r3, [pc, #196]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f36:	f003 0301 	and.w	r3, r3, #1
 8001f3a:	617b      	str	r3, [r7, #20]
 8001f3c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f3e:	2300      	movs	r3, #0
 8001f40:	613b      	str	r3, [r7, #16]
 8001f42:	4b2d      	ldr	r3, [pc, #180]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f46:	4a2c      	ldr	r2, [pc, #176]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f48:	f043 0301 	orr.w	r3, r3, #1
 8001f4c:	6313      	str	r3, [r2, #48]	; 0x30
 8001f4e:	4b2a      	ldr	r3, [pc, #168]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f52:	f003 0301 	and.w	r3, r3, #1
 8001f56:	613b      	str	r3, [r7, #16]
 8001f58:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8001f5a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001f5e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001f60:	2302      	movs	r3, #2
 8001f62:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f64:	2300      	movs	r3, #0
 8001f66:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001f68:	2300      	movs	r3, #0
 8001f6a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8001f6c:	2301      	movs	r3, #1
 8001f6e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001f70:	f107 031c 	add.w	r3, r7, #28
 8001f74:	4619      	mov	r1, r3
 8001f76:	4821      	ldr	r0, [pc, #132]	; (8001ffc <HAL_TIM_Base_MspInit+0x124>)
 8001f78:	f000 fb6c 	bl	8002654 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	2100      	movs	r1, #0
 8001f80:	201c      	movs	r0, #28
 8001f82:	f000 fb30 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001f86:	201c      	movs	r0, #28
 8001f88:	f000 fb49 	bl	800261e <HAL_NVIC_EnableIRQ>
}
 8001f8c:	e02e      	b.n	8001fec <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	681b      	ldr	r3, [r3, #0]
 8001f92:	4a1b      	ldr	r2, [pc, #108]	; (8002000 <HAL_TIM_Base_MspInit+0x128>)
 8001f94:	4293      	cmp	r3, r2
 8001f96:	d10e      	bne.n	8001fb6 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001f98:	2300      	movs	r3, #0
 8001f9a:	60fb      	str	r3, [r7, #12]
 8001f9c:	4b16      	ldr	r3, [pc, #88]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001f9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fa0:	4a15      	ldr	r2, [pc, #84]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001fa2:	f043 0302 	orr.w	r3, r3, #2
 8001fa6:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa8:	4b13      	ldr	r3, [pc, #76]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001faa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	60fb      	str	r3, [r7, #12]
 8001fb2:	68fb      	ldr	r3, [r7, #12]
}
 8001fb4:	e01a      	b.n	8001fec <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	4a12      	ldr	r2, [pc, #72]	; (8002004 <HAL_TIM_Base_MspInit+0x12c>)
 8001fbc:	4293      	cmp	r3, r2
 8001fbe:	d115      	bne.n	8001fec <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	60bb      	str	r3, [r7, #8]
 8001fc4:	4b0c      	ldr	r3, [pc, #48]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001fc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fc8:	4a0b      	ldr	r2, [pc, #44]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001fca:	f043 0308 	orr.w	r3, r3, #8
 8001fce:	6413      	str	r3, [r2, #64]	; 0x40
 8001fd0:	4b09      	ldr	r3, [pc, #36]	; (8001ff8 <HAL_TIM_Base_MspInit+0x120>)
 8001fd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001fd4:	f003 0308 	and.w	r3, r3, #8
 8001fd8:	60bb      	str	r3, [r7, #8]
 8001fda:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001fdc:	2200      	movs	r2, #0
 8001fde:	2100      	movs	r1, #0
 8001fe0:	2032      	movs	r0, #50	; 0x32
 8001fe2:	f000 fb00 	bl	80025e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8001fe6:	2032      	movs	r0, #50	; 0x32
 8001fe8:	f000 fb19 	bl	800261e <HAL_NVIC_EnableIRQ>
}
 8001fec:	bf00      	nop
 8001fee:	3730      	adds	r7, #48	; 0x30
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	40010000 	.word	0x40010000
 8001ff8:	40023800 	.word	0x40023800
 8001ffc:	40020000 	.word	0x40020000
 8002000:	40000400 	.word	0x40000400
 8002004:	40000c00 	.word	0x40000c00

08002008 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002008:	b480      	push	{r7}
 800200a:	b085      	sub	sp, #20
 800200c:	af00      	add	r7, sp, #0
 800200e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002010:	687b      	ldr	r3, [r7, #4]
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a0b      	ldr	r2, [pc, #44]	; (8002044 <HAL_TIM_PWM_MspInit+0x3c>)
 8002016:	4293      	cmp	r3, r2
 8002018:	d10d      	bne.n	8002036 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800201a:	2300      	movs	r3, #0
 800201c:	60fb      	str	r3, [r7, #12]
 800201e:	4b0a      	ldr	r3, [pc, #40]	; (8002048 <HAL_TIM_PWM_MspInit+0x40>)
 8002020:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002022:	4a09      	ldr	r2, [pc, #36]	; (8002048 <HAL_TIM_PWM_MspInit+0x40>)
 8002024:	f043 0304 	orr.w	r3, r3, #4
 8002028:	6413      	str	r3, [r2, #64]	; 0x40
 800202a:	4b07      	ldr	r3, [pc, #28]	; (8002048 <HAL_TIM_PWM_MspInit+0x40>)
 800202c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800202e:	f003 0304 	and.w	r3, r3, #4
 8002032:	60fb      	str	r3, [r7, #12]
 8002034:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002036:	bf00      	nop
 8002038:	3714      	adds	r7, #20
 800203a:	46bd      	mov	sp, r7
 800203c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002040:	4770      	bx	lr
 8002042:	bf00      	nop
 8002044:	40000800 	.word	0x40000800
 8002048:	40023800 	.word	0x40023800

0800204c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800204c:	b580      	push	{r7, lr}
 800204e:	b08a      	sub	sp, #40	; 0x28
 8002050:	af00      	add	r7, sp, #0
 8002052:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002054:	f107 0314 	add.w	r3, r7, #20
 8002058:	2200      	movs	r2, #0
 800205a:	601a      	str	r2, [r3, #0]
 800205c:	605a      	str	r2, [r3, #4]
 800205e:	609a      	str	r2, [r3, #8]
 8002060:	60da      	str	r2, [r3, #12]
 8002062:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	4a24      	ldr	r2, [pc, #144]	; (80020fc <HAL_TIM_MspPostInit+0xb0>)
 800206a:	4293      	cmp	r3, r2
 800206c:	d11e      	bne.n	80020ac <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800206e:	2300      	movs	r3, #0
 8002070:	613b      	str	r3, [r7, #16]
 8002072:	4b23      	ldr	r3, [pc, #140]	; (8002100 <HAL_TIM_MspPostInit+0xb4>)
 8002074:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002076:	4a22      	ldr	r2, [pc, #136]	; (8002100 <HAL_TIM_MspPostInit+0xb4>)
 8002078:	f043 0304 	orr.w	r3, r3, #4
 800207c:	6313      	str	r3, [r2, #48]	; 0x30
 800207e:	4b20      	ldr	r3, [pc, #128]	; (8002100 <HAL_TIM_MspPostInit+0xb4>)
 8002080:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002082:	f003 0304 	and.w	r3, r3, #4
 8002086:	613b      	str	r3, [r7, #16]
 8002088:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800208a:	2380      	movs	r3, #128	; 0x80
 800208c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800208e:	2302      	movs	r3, #2
 8002090:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002092:	2300      	movs	r3, #0
 8002094:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002096:	2300      	movs	r3, #0
 8002098:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800209a:	2302      	movs	r3, #2
 800209c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800209e:	f107 0314 	add.w	r3, r7, #20
 80020a2:	4619      	mov	r1, r3
 80020a4:	4817      	ldr	r0, [pc, #92]	; (8002104 <HAL_TIM_MspPostInit+0xb8>)
 80020a6:	f000 fad5 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80020aa:	e022      	b.n	80020f2 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a15      	ldr	r2, [pc, #84]	; (8002108 <HAL_TIM_MspPostInit+0xbc>)
 80020b2:	4293      	cmp	r3, r2
 80020b4:	d11d      	bne.n	80020f2 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b6:	2300      	movs	r3, #0
 80020b8:	60fb      	str	r3, [r7, #12]
 80020ba:	4b11      	ldr	r3, [pc, #68]	; (8002100 <HAL_TIM_MspPostInit+0xb4>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	4a10      	ldr	r2, [pc, #64]	; (8002100 <HAL_TIM_MspPostInit+0xb4>)
 80020c0:	f043 0302 	orr.w	r3, r3, #2
 80020c4:	6313      	str	r3, [r2, #48]	; 0x30
 80020c6:	4b0e      	ldr	r3, [pc, #56]	; (8002100 <HAL_TIM_MspPostInit+0xb4>)
 80020c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020ca:	f003 0302 	and.w	r3, r3, #2
 80020ce:	60fb      	str	r3, [r7, #12]
 80020d0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80020d2:	2380      	movs	r3, #128	; 0x80
 80020d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020d6:	2302      	movs	r3, #2
 80020d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020da:	2300      	movs	r3, #0
 80020dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020de:	2300      	movs	r3, #0
 80020e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 80020e2:	2302      	movs	r3, #2
 80020e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80020e6:	f107 0314 	add.w	r3, r7, #20
 80020ea:	4619      	mov	r1, r3
 80020ec:	4807      	ldr	r0, [pc, #28]	; (800210c <HAL_TIM_MspPostInit+0xc0>)
 80020ee:	f000 fab1 	bl	8002654 <HAL_GPIO_Init>
}
 80020f2:	bf00      	nop
 80020f4:	3728      	adds	r7, #40	; 0x28
 80020f6:	46bd      	mov	sp, r7
 80020f8:	bd80      	pop	{r7, pc}
 80020fa:	bf00      	nop
 80020fc:	40000400 	.word	0x40000400
 8002100:	40023800 	.word	0x40023800
 8002104:	40020800 	.word	0x40020800
 8002108:	40000800 	.word	0x40000800
 800210c:	40020400 	.word	0x40020400

08002110 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002110:	b580      	push	{r7, lr}
 8002112:	b08a      	sub	sp, #40	; 0x28
 8002114:	af00      	add	r7, sp, #0
 8002116:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002118:	f107 0314 	add.w	r3, r7, #20
 800211c:	2200      	movs	r2, #0
 800211e:	601a      	str	r2, [r3, #0]
 8002120:	605a      	str	r2, [r3, #4]
 8002122:	609a      	str	r2, [r3, #8]
 8002124:	60da      	str	r2, [r3, #12]
 8002126:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	4a19      	ldr	r2, [pc, #100]	; (8002194 <HAL_UART_MspInit+0x84>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d12c      	bne.n	800218c <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002132:	2300      	movs	r3, #0
 8002134:	613b      	str	r3, [r7, #16]
 8002136:	4b18      	ldr	r3, [pc, #96]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002138:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800213a:	4a17      	ldr	r2, [pc, #92]	; (8002198 <HAL_UART_MspInit+0x88>)
 800213c:	f043 0310 	orr.w	r3, r3, #16
 8002140:	6453      	str	r3, [r2, #68]	; 0x44
 8002142:	4b15      	ldr	r3, [pc, #84]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002144:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002146:	f003 0310 	and.w	r3, r3, #16
 800214a:	613b      	str	r3, [r7, #16]
 800214c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800214e:	2300      	movs	r3, #0
 8002150:	60fb      	str	r3, [r7, #12]
 8002152:	4b11      	ldr	r3, [pc, #68]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002156:	4a10      	ldr	r2, [pc, #64]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002158:	f043 0301 	orr.w	r3, r3, #1
 800215c:	6313      	str	r3, [r2, #48]	; 0x30
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <HAL_UART_MspInit+0x88>)
 8002160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002162:	f003 0301 	and.w	r3, r3, #1
 8002166:	60fb      	str	r3, [r7, #12]
 8002168:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800216a:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 800216e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002170:	2302      	movs	r3, #2
 8002172:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002174:	2300      	movs	r3, #0
 8002176:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002178:	2303      	movs	r3, #3
 800217a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 800217c:	2307      	movs	r3, #7
 800217e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002180:	f107 0314 	add.w	r3, r7, #20
 8002184:	4619      	mov	r1, r3
 8002186:	4805      	ldr	r0, [pc, #20]	; (800219c <HAL_UART_MspInit+0x8c>)
 8002188:	f000 fa64 	bl	8002654 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 800218c:	bf00      	nop
 800218e:	3728      	adds	r7, #40	; 0x28
 8002190:	46bd      	mov	sp, r7
 8002192:	bd80      	pop	{r7, pc}
 8002194:	40011000 	.word	0x40011000
 8002198:	40023800 	.word	0x40023800
 800219c:	40020000 	.word	0x40020000

080021a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80021a0:	b480      	push	{r7}
 80021a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80021a4:	e7fe      	b.n	80021a4 <NMI_Handler+0x4>

080021a6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80021a6:	b480      	push	{r7}
 80021a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80021aa:	e7fe      	b.n	80021aa <HardFault_Handler+0x4>

080021ac <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80021ac:	b480      	push	{r7}
 80021ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80021b0:	e7fe      	b.n	80021b0 <MemManage_Handler+0x4>

080021b2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80021b2:	b480      	push	{r7}
 80021b4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80021b6:	e7fe      	b.n	80021b6 <BusFault_Handler+0x4>

080021b8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80021bc:	e7fe      	b.n	80021bc <UsageFault_Handler+0x4>

080021be <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80021be:	b480      	push	{r7}
 80021c0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	46bd      	mov	sp, r7
 80021c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ca:	4770      	bx	lr

080021cc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80021cc:	b480      	push	{r7}
 80021ce:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80021d0:	bf00      	nop
 80021d2:	46bd      	mov	sp, r7
 80021d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021d8:	4770      	bx	lr

080021da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80021da:	b480      	push	{r7}
 80021dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80021de:	bf00      	nop
 80021e0:	46bd      	mov	sp, r7
 80021e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021e6:	4770      	bx	lr

080021e8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80021e8:	b580      	push	{r7, lr}
 80021ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80021ec:	f000 f8dc 	bl	80023a8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80021f0:	bf00      	nop
 80021f2:	bd80      	pop	{r7, pc}

080021f4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 80021f8:	481a      	ldr	r0, [pc, #104]	; (8002264 <TIM2_IRQHandler+0x70>)
 80021fa:	f002 fb8d 	bl	8004918 <HAL_TIM_IRQHandler>
	if(firsttime){
 80021fe:	4b1a      	ldr	r3, [pc, #104]	; (8002268 <TIM2_IRQHandler+0x74>)
 8002200:	781b      	ldrb	r3, [r3, #0]
 8002202:	2b00      	cmp	r3, #0
 8002204:	d00d      	beq.n	8002222 <TIM2_IRQHandler+0x2e>
		firsttime =0;
 8002206:	4b18      	ldr	r3, [pc, #96]	; (8002268 <TIM2_IRQHandler+0x74>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = 0;
 800220c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002210:	2200      	movs	r2, #0
 8002212:	625a      	str	r2, [r3, #36]	; 0x24
		index = 0;
 8002214:	4b15      	ldr	r3, [pc, #84]	; (800226c <TIM2_IRQHandler+0x78>)
 8002216:	2200      	movs	r2, #0
 8002218:	601a      	str	r2, [r3, #0]
		HAL_TIM_IRQHandler(&htim2);
 800221a:	4812      	ldr	r0, [pc, #72]	; (8002264 <TIM2_IRQHandler+0x70>)
 800221c:	f002 fb7c 	bl	8004918 <HAL_TIM_IRQHandler>
		return;
 8002220:	e01e      	b.n	8002260 <TIM2_IRQHandler+0x6c>
	}
	data[index] = TIM2->CNT;
 8002222:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002226:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002228:	4b10      	ldr	r3, [pc, #64]	; (800226c <TIM2_IRQHandler+0x78>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	b291      	uxth	r1, r2
 800222e:	4a10      	ldr	r2, [pc, #64]	; (8002270 <TIM2_IRQHandler+0x7c>)
 8002230:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TIM2->CNT =0;
 8002234:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002238:	2200      	movs	r2, #0
 800223a:	625a      	str	r2, [r3, #36]	; 0x24
	index++;
 800223c:	4b0b      	ldr	r3, [pc, #44]	; (800226c <TIM2_IRQHandler+0x78>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	3301      	adds	r3, #1
 8002242:	4a0a      	ldr	r2, [pc, #40]	; (800226c <TIM2_IRQHandler+0x78>)
 8002244:	6013      	str	r3, [r2, #0]
	if(index == dataLen){
 8002246:	4b09      	ldr	r3, [pc, #36]	; (800226c <TIM2_IRQHandler+0x78>)
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	4b0a      	ldr	r3, [pc, #40]	; (8002274 <TIM2_IRQHandler+0x80>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d103      	bne.n	800225a <TIM2_IRQHandler+0x66>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);		//Transmit();
 8002252:	2100      	movs	r1, #0
 8002254:	4803      	ldr	r0, [pc, #12]	; (8002264 <TIM2_IRQHandler+0x70>)
 8002256:	f002 fab1 	bl	80047bc <HAL_TIM_IC_Stop_IT>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800225a:	4802      	ldr	r0, [pc, #8]	; (8002264 <TIM2_IRQHandler+0x70>)
 800225c:	f002 fb5c 	bl	8004918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002260:	bd80      	pop	{r7, pc}
 8002262:	bf00      	nop
 8002264:	2000155c 	.word	0x2000155c
 8002268:	2000143e 	.word	0x2000143e
 800226c:	20006fc4 	.word	0x20006fc4
 8002270:	20006cd8 	.word	0x20006cd8
 8002274:	20000004 	.word	0x20000004

08002278 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002278:	b580      	push	{r7, lr}
 800227a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 800227c:	4802      	ldr	r0, [pc, #8]	; (8002288 <TIM5_IRQHandler+0x10>)
 800227e:	f002 fb4b 	bl	8004918 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002282:	bf00      	nop
 8002284:	bd80      	pop	{r7, pc}
 8002286:	bf00      	nop
 8002288:	20001634 	.word	0x20001634

0800228c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800228c:	b480      	push	{r7}
 800228e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002290:	4b06      	ldr	r3, [pc, #24]	; (80022ac <SystemInit+0x20>)
 8002292:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002296:	4a05      	ldr	r2, [pc, #20]	; (80022ac <SystemInit+0x20>)
 8002298:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800229c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80022a0:	bf00      	nop
 80022a2:	46bd      	mov	sp, r7
 80022a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022a8:	4770      	bx	lr
 80022aa:	bf00      	nop
 80022ac:	e000ed00 	.word	0xe000ed00

080022b0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 80022b0:	f8df d034 	ldr.w	sp, [pc, #52]	; 80022e8 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80022b4:	480d      	ldr	r0, [pc, #52]	; (80022ec <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80022b6:	490e      	ldr	r1, [pc, #56]	; (80022f0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80022b8:	4a0e      	ldr	r2, [pc, #56]	; (80022f4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80022ba:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80022bc:	e002      	b.n	80022c4 <LoopCopyDataInit>

080022be <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80022be:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80022c0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80022c2:	3304      	adds	r3, #4

080022c4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80022c4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80022c6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80022c8:	d3f9      	bcc.n	80022be <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80022ca:	4a0b      	ldr	r2, [pc, #44]	; (80022f8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80022cc:	4c0b      	ldr	r4, [pc, #44]	; (80022fc <LoopFillZerobss+0x26>)
  movs r3, #0
 80022ce:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022d0:	e001      	b.n	80022d6 <LoopFillZerobss>

080022d2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022d2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022d4:	3204      	adds	r2, #4

080022d6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022d6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022d8:	d3fb      	bcc.n	80022d2 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 80022da:	f7ff ffd7 	bl	800228c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80022de:	f003 fe0d 	bl	8005efc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80022e2:	f7fe fb69 	bl	80009b8 <main>
  bx  lr    
 80022e6:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80022e8:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 80022ec:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022f0:	2000144c 	.word	0x2000144c
  ldr r2, =_sidata
 80022f4:	08006114 	.word	0x08006114
  ldr r2, =_sbss
 80022f8:	2000144c 	.word	0x2000144c
  ldr r4, =_ebss
 80022fc:	20006fcc 	.word	0x20006fcc

08002300 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002300:	e7fe      	b.n	8002300 <ADC_IRQHandler>
	...

08002304 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002304:	b580      	push	{r7, lr}
 8002306:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002308:	4b0e      	ldr	r3, [pc, #56]	; (8002344 <HAL_Init+0x40>)
 800230a:	681b      	ldr	r3, [r3, #0]
 800230c:	4a0d      	ldr	r2, [pc, #52]	; (8002344 <HAL_Init+0x40>)
 800230e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002312:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002314:	4b0b      	ldr	r3, [pc, #44]	; (8002344 <HAL_Init+0x40>)
 8002316:	681b      	ldr	r3, [r3, #0]
 8002318:	4a0a      	ldr	r2, [pc, #40]	; (8002344 <HAL_Init+0x40>)
 800231a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800231e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002320:	4b08      	ldr	r3, [pc, #32]	; (8002344 <HAL_Init+0x40>)
 8002322:	681b      	ldr	r3, [r3, #0]
 8002324:	4a07      	ldr	r2, [pc, #28]	; (8002344 <HAL_Init+0x40>)
 8002326:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800232a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800232c:	2003      	movs	r0, #3
 800232e:	f000 f94f 	bl	80025d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002332:	2000      	movs	r0, #0
 8002334:	f000 f808 	bl	8002348 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002338:	f7ff fcf6 	bl	8001d28 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800233c:	2300      	movs	r3, #0
}
 800233e:	4618      	mov	r0, r3
 8002340:	bd80      	pop	{r7, pc}
 8002342:	bf00      	nop
 8002344:	40023c00 	.word	0x40023c00

08002348 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002348:	b580      	push	{r7, lr}
 800234a:	b082      	sub	sp, #8
 800234c:	af00      	add	r7, sp, #0
 800234e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002350:	4b12      	ldr	r3, [pc, #72]	; (800239c <HAL_InitTick+0x54>)
 8002352:	681a      	ldr	r2, [r3, #0]
 8002354:	4b12      	ldr	r3, [pc, #72]	; (80023a0 <HAL_InitTick+0x58>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	4619      	mov	r1, r3
 800235a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800235e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002362:	fbb2 f3f3 	udiv	r3, r2, r3
 8002366:	4618      	mov	r0, r3
 8002368:	f000 f967 	bl	800263a <HAL_SYSTICK_Config>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d001      	beq.n	8002376 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002372:	2301      	movs	r3, #1
 8002374:	e00e      	b.n	8002394 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002376:	687b      	ldr	r3, [r7, #4]
 8002378:	2b0f      	cmp	r3, #15
 800237a:	d80a      	bhi.n	8002392 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800237c:	2200      	movs	r2, #0
 800237e:	6879      	ldr	r1, [r7, #4]
 8002380:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002384:	f000 f92f 	bl	80025e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002388:	4a06      	ldr	r2, [pc, #24]	; (80023a4 <HAL_InitTick+0x5c>)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800238e:	2300      	movs	r3, #0
 8002390:	e000      	b.n	8002394 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002392:	2301      	movs	r3, #1
}
 8002394:	4618      	mov	r0, r3
 8002396:	3708      	adds	r7, #8
 8002398:	46bd      	mov	sp, r7
 800239a:	bd80      	pop	{r7, pc}
 800239c:	20001440 	.word	0x20001440
 80023a0:	20001448 	.word	0x20001448
 80023a4:	20001444 	.word	0x20001444

080023a8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80023a8:	b480      	push	{r7}
 80023aa:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80023ac:	4b06      	ldr	r3, [pc, #24]	; (80023c8 <HAL_IncTick+0x20>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	461a      	mov	r2, r3
 80023b2:	4b06      	ldr	r3, [pc, #24]	; (80023cc <HAL_IncTick+0x24>)
 80023b4:	681b      	ldr	r3, [r3, #0]
 80023b6:	4413      	add	r3, r2
 80023b8:	4a04      	ldr	r2, [pc, #16]	; (80023cc <HAL_IncTick+0x24>)
 80023ba:	6013      	str	r3, [r2, #0]
}
 80023bc:	bf00      	nop
 80023be:	46bd      	mov	sp, r7
 80023c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c4:	4770      	bx	lr
 80023c6:	bf00      	nop
 80023c8:	20001448 	.word	0x20001448
 80023cc:	20006fc8 	.word	0x20006fc8

080023d0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80023d0:	b480      	push	{r7}
 80023d2:	af00      	add	r7, sp, #0
  return uwTick;
 80023d4:	4b03      	ldr	r3, [pc, #12]	; (80023e4 <HAL_GetTick+0x14>)
 80023d6:	681b      	ldr	r3, [r3, #0]
}
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20006fc8 	.word	0x20006fc8

080023e8 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80023e8:	b580      	push	{r7, lr}
 80023ea:	b084      	sub	sp, #16
 80023ec:	af00      	add	r7, sp, #0
 80023ee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80023f0:	f7ff ffee 	bl	80023d0 <HAL_GetTick>
 80023f4:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023fa:	68fb      	ldr	r3, [r7, #12]
 80023fc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002400:	d005      	beq.n	800240e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002402:	4b0a      	ldr	r3, [pc, #40]	; (800242c <HAL_Delay+0x44>)
 8002404:	781b      	ldrb	r3, [r3, #0]
 8002406:	461a      	mov	r2, r3
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	4413      	add	r3, r2
 800240c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800240e:	bf00      	nop
 8002410:	f7ff ffde 	bl	80023d0 <HAL_GetTick>
 8002414:	4602      	mov	r2, r0
 8002416:	68bb      	ldr	r3, [r7, #8]
 8002418:	1ad3      	subs	r3, r2, r3
 800241a:	68fa      	ldr	r2, [r7, #12]
 800241c:	429a      	cmp	r2, r3
 800241e:	d8f7      	bhi.n	8002410 <HAL_Delay+0x28>
  {
  }
}
 8002420:	bf00      	nop
 8002422:	bf00      	nop
 8002424:	3710      	adds	r7, #16
 8002426:	46bd      	mov	sp, r7
 8002428:	bd80      	pop	{r7, pc}
 800242a:	bf00      	nop
 800242c:	20001448 	.word	0x20001448

08002430 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	f003 0307 	and.w	r3, r3, #7
 800243e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002440:	4b0c      	ldr	r3, [pc, #48]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002442:	68db      	ldr	r3, [r3, #12]
 8002444:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002446:	68ba      	ldr	r2, [r7, #8]
 8002448:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800244c:	4013      	ands	r3, r2
 800244e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002450:	68fb      	ldr	r3, [r7, #12]
 8002452:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002454:	68bb      	ldr	r3, [r7, #8]
 8002456:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002458:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800245c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002460:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002462:	4a04      	ldr	r2, [pc, #16]	; (8002474 <__NVIC_SetPriorityGrouping+0x44>)
 8002464:	68bb      	ldr	r3, [r7, #8]
 8002466:	60d3      	str	r3, [r2, #12]
}
 8002468:	bf00      	nop
 800246a:	3714      	adds	r7, #20
 800246c:	46bd      	mov	sp, r7
 800246e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002472:	4770      	bx	lr
 8002474:	e000ed00 	.word	0xe000ed00

08002478 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002478:	b480      	push	{r7}
 800247a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800247c:	4b04      	ldr	r3, [pc, #16]	; (8002490 <__NVIC_GetPriorityGrouping+0x18>)
 800247e:	68db      	ldr	r3, [r3, #12]
 8002480:	0a1b      	lsrs	r3, r3, #8
 8002482:	f003 0307 	and.w	r3, r3, #7
}
 8002486:	4618      	mov	r0, r3
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	e000ed00 	.word	0xe000ed00

08002494 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800249e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024a2:	2b00      	cmp	r3, #0
 80024a4:	db0b      	blt.n	80024be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80024a6:	79fb      	ldrb	r3, [r7, #7]
 80024a8:	f003 021f 	and.w	r2, r3, #31
 80024ac:	4907      	ldr	r1, [pc, #28]	; (80024cc <__NVIC_EnableIRQ+0x38>)
 80024ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024b2:	095b      	lsrs	r3, r3, #5
 80024b4:	2001      	movs	r0, #1
 80024b6:	fa00 f202 	lsl.w	r2, r0, r2
 80024ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80024be:	bf00      	nop
 80024c0:	370c      	adds	r7, #12
 80024c2:	46bd      	mov	sp, r7
 80024c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024c8:	4770      	bx	lr
 80024ca:	bf00      	nop
 80024cc:	e000e100 	.word	0xe000e100

080024d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80024d0:	b480      	push	{r7}
 80024d2:	b083      	sub	sp, #12
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	4603      	mov	r3, r0
 80024d8:	6039      	str	r1, [r7, #0]
 80024da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80024dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024e0:	2b00      	cmp	r3, #0
 80024e2:	db0a      	blt.n	80024fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024e4:	683b      	ldr	r3, [r7, #0]
 80024e6:	b2da      	uxtb	r2, r3
 80024e8:	490c      	ldr	r1, [pc, #48]	; (800251c <__NVIC_SetPriority+0x4c>)
 80024ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024ee:	0112      	lsls	r2, r2, #4
 80024f0:	b2d2      	uxtb	r2, r2
 80024f2:	440b      	add	r3, r1
 80024f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80024f8:	e00a      	b.n	8002510 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80024fa:	683b      	ldr	r3, [r7, #0]
 80024fc:	b2da      	uxtb	r2, r3
 80024fe:	4908      	ldr	r1, [pc, #32]	; (8002520 <__NVIC_SetPriority+0x50>)
 8002500:	79fb      	ldrb	r3, [r7, #7]
 8002502:	f003 030f 	and.w	r3, r3, #15
 8002506:	3b04      	subs	r3, #4
 8002508:	0112      	lsls	r2, r2, #4
 800250a:	b2d2      	uxtb	r2, r2
 800250c:	440b      	add	r3, r1
 800250e:	761a      	strb	r2, [r3, #24]
}
 8002510:	bf00      	nop
 8002512:	370c      	adds	r7, #12
 8002514:	46bd      	mov	sp, r7
 8002516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800251a:	4770      	bx	lr
 800251c:	e000e100 	.word	0xe000e100
 8002520:	e000ed00 	.word	0xe000ed00

08002524 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002524:	b480      	push	{r7}
 8002526:	b089      	sub	sp, #36	; 0x24
 8002528:	af00      	add	r7, sp, #0
 800252a:	60f8      	str	r0, [r7, #12]
 800252c:	60b9      	str	r1, [r7, #8]
 800252e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	f003 0307 	and.w	r3, r3, #7
 8002536:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002538:	69fb      	ldr	r3, [r7, #28]
 800253a:	f1c3 0307 	rsb	r3, r3, #7
 800253e:	2b04      	cmp	r3, #4
 8002540:	bf28      	it	cs
 8002542:	2304      	movcs	r3, #4
 8002544:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002546:	69fb      	ldr	r3, [r7, #28]
 8002548:	3304      	adds	r3, #4
 800254a:	2b06      	cmp	r3, #6
 800254c:	d902      	bls.n	8002554 <NVIC_EncodePriority+0x30>
 800254e:	69fb      	ldr	r3, [r7, #28]
 8002550:	3b03      	subs	r3, #3
 8002552:	e000      	b.n	8002556 <NVIC_EncodePriority+0x32>
 8002554:	2300      	movs	r3, #0
 8002556:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002558:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800255c:	69bb      	ldr	r3, [r7, #24]
 800255e:	fa02 f303 	lsl.w	r3, r2, r3
 8002562:	43da      	mvns	r2, r3
 8002564:	68bb      	ldr	r3, [r7, #8]
 8002566:	401a      	ands	r2, r3
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800256c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002570:	697b      	ldr	r3, [r7, #20]
 8002572:	fa01 f303 	lsl.w	r3, r1, r3
 8002576:	43d9      	mvns	r1, r3
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800257c:	4313      	orrs	r3, r2
         );
}
 800257e:	4618      	mov	r0, r3
 8002580:	3724      	adds	r7, #36	; 0x24
 8002582:	46bd      	mov	sp, r7
 8002584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002588:	4770      	bx	lr
	...

0800258c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800258c:	b580      	push	{r7, lr}
 800258e:	b082      	sub	sp, #8
 8002590:	af00      	add	r7, sp, #0
 8002592:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	3b01      	subs	r3, #1
 8002598:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800259c:	d301      	bcc.n	80025a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800259e:	2301      	movs	r3, #1
 80025a0:	e00f      	b.n	80025c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80025a2:	4a0a      	ldr	r2, [pc, #40]	; (80025cc <SysTick_Config+0x40>)
 80025a4:	687b      	ldr	r3, [r7, #4]
 80025a6:	3b01      	subs	r3, #1
 80025a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80025aa:	210f      	movs	r1, #15
 80025ac:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80025b0:	f7ff ff8e 	bl	80024d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80025b4:	4b05      	ldr	r3, [pc, #20]	; (80025cc <SysTick_Config+0x40>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80025ba:	4b04      	ldr	r3, [pc, #16]	; (80025cc <SysTick_Config+0x40>)
 80025bc:	2207      	movs	r2, #7
 80025be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80025c0:	2300      	movs	r3, #0
}
 80025c2:	4618      	mov	r0, r3
 80025c4:	3708      	adds	r7, #8
 80025c6:	46bd      	mov	sp, r7
 80025c8:	bd80      	pop	{r7, pc}
 80025ca:	bf00      	nop
 80025cc:	e000e010 	.word	0xe000e010

080025d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80025d0:	b580      	push	{r7, lr}
 80025d2:	b082      	sub	sp, #8
 80025d4:	af00      	add	r7, sp, #0
 80025d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80025d8:	6878      	ldr	r0, [r7, #4]
 80025da:	f7ff ff29 	bl	8002430 <__NVIC_SetPriorityGrouping>
}
 80025de:	bf00      	nop
 80025e0:	3708      	adds	r7, #8
 80025e2:	46bd      	mov	sp, r7
 80025e4:	bd80      	pop	{r7, pc}

080025e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80025e6:	b580      	push	{r7, lr}
 80025e8:	b086      	sub	sp, #24
 80025ea:	af00      	add	r7, sp, #0
 80025ec:	4603      	mov	r3, r0
 80025ee:	60b9      	str	r1, [r7, #8]
 80025f0:	607a      	str	r2, [r7, #4]
 80025f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80025f4:	2300      	movs	r3, #0
 80025f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80025f8:	f7ff ff3e 	bl	8002478 <__NVIC_GetPriorityGrouping>
 80025fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80025fe:	687a      	ldr	r2, [r7, #4]
 8002600:	68b9      	ldr	r1, [r7, #8]
 8002602:	6978      	ldr	r0, [r7, #20]
 8002604:	f7ff ff8e 	bl	8002524 <NVIC_EncodePriority>
 8002608:	4602      	mov	r2, r0
 800260a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800260e:	4611      	mov	r1, r2
 8002610:	4618      	mov	r0, r3
 8002612:	f7ff ff5d 	bl	80024d0 <__NVIC_SetPriority>
}
 8002616:	bf00      	nop
 8002618:	3718      	adds	r7, #24
 800261a:	46bd      	mov	sp, r7
 800261c:	bd80      	pop	{r7, pc}

0800261e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800261e:	b580      	push	{r7, lr}
 8002620:	b082      	sub	sp, #8
 8002622:	af00      	add	r7, sp, #0
 8002624:	4603      	mov	r3, r0
 8002626:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002628:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262c:	4618      	mov	r0, r3
 800262e:	f7ff ff31 	bl	8002494 <__NVIC_EnableIRQ>
}
 8002632:	bf00      	nop
 8002634:	3708      	adds	r7, #8
 8002636:	46bd      	mov	sp, r7
 8002638:	bd80      	pop	{r7, pc}

0800263a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800263a:	b580      	push	{r7, lr}
 800263c:	b082      	sub	sp, #8
 800263e:	af00      	add	r7, sp, #0
 8002640:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002642:	6878      	ldr	r0, [r7, #4]
 8002644:	f7ff ffa2 	bl	800258c <SysTick_Config>
 8002648:	4603      	mov	r3, r0
}
 800264a:	4618      	mov	r0, r3
 800264c:	3708      	adds	r7, #8
 800264e:	46bd      	mov	sp, r7
 8002650:	bd80      	pop	{r7, pc}
	...

08002654 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002654:	b480      	push	{r7}
 8002656:	b089      	sub	sp, #36	; 0x24
 8002658:	af00      	add	r7, sp, #0
 800265a:	6078      	str	r0, [r7, #4]
 800265c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800265e:	2300      	movs	r3, #0
 8002660:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002662:	2300      	movs	r3, #0
 8002664:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002666:	2300      	movs	r3, #0
 8002668:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800266a:	2300      	movs	r3, #0
 800266c:	61fb      	str	r3, [r7, #28]
 800266e:	e159      	b.n	8002924 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002670:	2201      	movs	r2, #1
 8002672:	69fb      	ldr	r3, [r7, #28]
 8002674:	fa02 f303 	lsl.w	r3, r2, r3
 8002678:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	697a      	ldr	r2, [r7, #20]
 8002680:	4013      	ands	r3, r2
 8002682:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002684:	693a      	ldr	r2, [r7, #16]
 8002686:	697b      	ldr	r3, [r7, #20]
 8002688:	429a      	cmp	r2, r3
 800268a:	f040 8148 	bne.w	800291e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
 8002692:	f003 0303 	and.w	r3, r3, #3
 8002696:	2b01      	cmp	r3, #1
 8002698:	d005      	beq.n	80026a6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d130      	bne.n	8002708 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	689b      	ldr	r3, [r3, #8]
 80026aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80026ac:	69fb      	ldr	r3, [r7, #28]
 80026ae:	005b      	lsls	r3, r3, #1
 80026b0:	2203      	movs	r2, #3
 80026b2:	fa02 f303 	lsl.w	r3, r2, r3
 80026b6:	43db      	mvns	r3, r3
 80026b8:	69ba      	ldr	r2, [r7, #24]
 80026ba:	4013      	ands	r3, r2
 80026bc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80026be:	683b      	ldr	r3, [r7, #0]
 80026c0:	68da      	ldr	r2, [r3, #12]
 80026c2:	69fb      	ldr	r3, [r7, #28]
 80026c4:	005b      	lsls	r3, r3, #1
 80026c6:	fa02 f303 	lsl.w	r3, r2, r3
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	4313      	orrs	r3, r2
 80026ce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026d0:	687b      	ldr	r3, [r7, #4]
 80026d2:	69ba      	ldr	r2, [r7, #24]
 80026d4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	685b      	ldr	r3, [r3, #4]
 80026da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026dc:	2201      	movs	r2, #1
 80026de:	69fb      	ldr	r3, [r7, #28]
 80026e0:	fa02 f303 	lsl.w	r3, r2, r3
 80026e4:	43db      	mvns	r3, r3
 80026e6:	69ba      	ldr	r2, [r7, #24]
 80026e8:	4013      	ands	r3, r2
 80026ea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80026ec:	683b      	ldr	r3, [r7, #0]
 80026ee:	685b      	ldr	r3, [r3, #4]
 80026f0:	091b      	lsrs	r3, r3, #4
 80026f2:	f003 0201 	and.w	r2, r3, #1
 80026f6:	69fb      	ldr	r3, [r7, #28]
 80026f8:	fa02 f303 	lsl.w	r3, r2, r3
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	4313      	orrs	r3, r2
 8002700:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	69ba      	ldr	r2, [r7, #24]
 8002706:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002708:	683b      	ldr	r3, [r7, #0]
 800270a:	685b      	ldr	r3, [r3, #4]
 800270c:	f003 0303 	and.w	r3, r3, #3
 8002710:	2b03      	cmp	r3, #3
 8002712:	d017      	beq.n	8002744 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	68db      	ldr	r3, [r3, #12]
 8002718:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800271a:	69fb      	ldr	r3, [r7, #28]
 800271c:	005b      	lsls	r3, r3, #1
 800271e:	2203      	movs	r2, #3
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	43db      	mvns	r3, r3
 8002726:	69ba      	ldr	r2, [r7, #24]
 8002728:	4013      	ands	r3, r2
 800272a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800272c:	683b      	ldr	r3, [r7, #0]
 800272e:	689a      	ldr	r2, [r3, #8]
 8002730:	69fb      	ldr	r3, [r7, #28]
 8002732:	005b      	lsls	r3, r3, #1
 8002734:	fa02 f303 	lsl.w	r3, r2, r3
 8002738:	69ba      	ldr	r2, [r7, #24]
 800273a:	4313      	orrs	r3, r2
 800273c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800273e:	687b      	ldr	r3, [r7, #4]
 8002740:	69ba      	ldr	r2, [r7, #24]
 8002742:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002744:	683b      	ldr	r3, [r7, #0]
 8002746:	685b      	ldr	r3, [r3, #4]
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	2b02      	cmp	r3, #2
 800274e:	d123      	bne.n	8002798 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002750:	69fb      	ldr	r3, [r7, #28]
 8002752:	08da      	lsrs	r2, r3, #3
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	3208      	adds	r2, #8
 8002758:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800275c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800275e:	69fb      	ldr	r3, [r7, #28]
 8002760:	f003 0307 	and.w	r3, r3, #7
 8002764:	009b      	lsls	r3, r3, #2
 8002766:	220f      	movs	r2, #15
 8002768:	fa02 f303 	lsl.w	r3, r2, r3
 800276c:	43db      	mvns	r3, r3
 800276e:	69ba      	ldr	r2, [r7, #24]
 8002770:	4013      	ands	r3, r2
 8002772:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002774:	683b      	ldr	r3, [r7, #0]
 8002776:	691a      	ldr	r2, [r3, #16]
 8002778:	69fb      	ldr	r3, [r7, #28]
 800277a:	f003 0307 	and.w	r3, r3, #7
 800277e:	009b      	lsls	r3, r3, #2
 8002780:	fa02 f303 	lsl.w	r3, r2, r3
 8002784:	69ba      	ldr	r2, [r7, #24]
 8002786:	4313      	orrs	r3, r2
 8002788:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800278a:	69fb      	ldr	r3, [r7, #28]
 800278c:	08da      	lsrs	r2, r3, #3
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	3208      	adds	r2, #8
 8002792:	69b9      	ldr	r1, [r7, #24]
 8002794:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800279e:	69fb      	ldr	r3, [r7, #28]
 80027a0:	005b      	lsls	r3, r3, #1
 80027a2:	2203      	movs	r2, #3
 80027a4:	fa02 f303 	lsl.w	r3, r2, r3
 80027a8:	43db      	mvns	r3, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4013      	ands	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80027b0:	683b      	ldr	r3, [r7, #0]
 80027b2:	685b      	ldr	r3, [r3, #4]
 80027b4:	f003 0203 	and.w	r2, r3, #3
 80027b8:	69fb      	ldr	r3, [r7, #28]
 80027ba:	005b      	lsls	r3, r3, #1
 80027bc:	fa02 f303 	lsl.w	r3, r2, r3
 80027c0:	69ba      	ldr	r2, [r7, #24]
 80027c2:	4313      	orrs	r3, r2
 80027c4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	69ba      	ldr	r2, [r7, #24]
 80027ca:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80027d4:	2b00      	cmp	r3, #0
 80027d6:	f000 80a2 	beq.w	800291e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027da:	2300      	movs	r3, #0
 80027dc:	60fb      	str	r3, [r7, #12]
 80027de:	4b57      	ldr	r3, [pc, #348]	; (800293c <HAL_GPIO_Init+0x2e8>)
 80027e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027e2:	4a56      	ldr	r2, [pc, #344]	; (800293c <HAL_GPIO_Init+0x2e8>)
 80027e4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027e8:	6453      	str	r3, [r2, #68]	; 0x44
 80027ea:	4b54      	ldr	r3, [pc, #336]	; (800293c <HAL_GPIO_Init+0x2e8>)
 80027ec:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ee:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027f2:	60fb      	str	r3, [r7, #12]
 80027f4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80027f6:	4a52      	ldr	r2, [pc, #328]	; (8002940 <HAL_GPIO_Init+0x2ec>)
 80027f8:	69fb      	ldr	r3, [r7, #28]
 80027fa:	089b      	lsrs	r3, r3, #2
 80027fc:	3302      	adds	r3, #2
 80027fe:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002802:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002804:	69fb      	ldr	r3, [r7, #28]
 8002806:	f003 0303 	and.w	r3, r3, #3
 800280a:	009b      	lsls	r3, r3, #2
 800280c:	220f      	movs	r2, #15
 800280e:	fa02 f303 	lsl.w	r3, r2, r3
 8002812:	43db      	mvns	r3, r3
 8002814:	69ba      	ldr	r2, [r7, #24]
 8002816:	4013      	ands	r3, r2
 8002818:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a49      	ldr	r2, [pc, #292]	; (8002944 <HAL_GPIO_Init+0x2f0>)
 800281e:	4293      	cmp	r3, r2
 8002820:	d019      	beq.n	8002856 <HAL_GPIO_Init+0x202>
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	4a48      	ldr	r2, [pc, #288]	; (8002948 <HAL_GPIO_Init+0x2f4>)
 8002826:	4293      	cmp	r3, r2
 8002828:	d013      	beq.n	8002852 <HAL_GPIO_Init+0x1fe>
 800282a:	687b      	ldr	r3, [r7, #4]
 800282c:	4a47      	ldr	r2, [pc, #284]	; (800294c <HAL_GPIO_Init+0x2f8>)
 800282e:	4293      	cmp	r3, r2
 8002830:	d00d      	beq.n	800284e <HAL_GPIO_Init+0x1fa>
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	4a46      	ldr	r2, [pc, #280]	; (8002950 <HAL_GPIO_Init+0x2fc>)
 8002836:	4293      	cmp	r3, r2
 8002838:	d007      	beq.n	800284a <HAL_GPIO_Init+0x1f6>
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	4a45      	ldr	r2, [pc, #276]	; (8002954 <HAL_GPIO_Init+0x300>)
 800283e:	4293      	cmp	r3, r2
 8002840:	d101      	bne.n	8002846 <HAL_GPIO_Init+0x1f2>
 8002842:	2304      	movs	r3, #4
 8002844:	e008      	b.n	8002858 <HAL_GPIO_Init+0x204>
 8002846:	2307      	movs	r3, #7
 8002848:	e006      	b.n	8002858 <HAL_GPIO_Init+0x204>
 800284a:	2303      	movs	r3, #3
 800284c:	e004      	b.n	8002858 <HAL_GPIO_Init+0x204>
 800284e:	2302      	movs	r3, #2
 8002850:	e002      	b.n	8002858 <HAL_GPIO_Init+0x204>
 8002852:	2301      	movs	r3, #1
 8002854:	e000      	b.n	8002858 <HAL_GPIO_Init+0x204>
 8002856:	2300      	movs	r3, #0
 8002858:	69fa      	ldr	r2, [r7, #28]
 800285a:	f002 0203 	and.w	r2, r2, #3
 800285e:	0092      	lsls	r2, r2, #2
 8002860:	4093      	lsls	r3, r2
 8002862:	69ba      	ldr	r2, [r7, #24]
 8002864:	4313      	orrs	r3, r2
 8002866:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002868:	4935      	ldr	r1, [pc, #212]	; (8002940 <HAL_GPIO_Init+0x2ec>)
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	089b      	lsrs	r3, r3, #2
 800286e:	3302      	adds	r3, #2
 8002870:	69ba      	ldr	r2, [r7, #24]
 8002872:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002876:	4b38      	ldr	r3, [pc, #224]	; (8002958 <HAL_GPIO_Init+0x304>)
 8002878:	689b      	ldr	r3, [r3, #8]
 800287a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800287c:	693b      	ldr	r3, [r7, #16]
 800287e:	43db      	mvns	r3, r3
 8002880:	69ba      	ldr	r2, [r7, #24]
 8002882:	4013      	ands	r3, r2
 8002884:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002886:	683b      	ldr	r3, [r7, #0]
 8002888:	685b      	ldr	r3, [r3, #4]
 800288a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800288e:	2b00      	cmp	r3, #0
 8002890:	d003      	beq.n	800289a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002892:	69ba      	ldr	r2, [r7, #24]
 8002894:	693b      	ldr	r3, [r7, #16]
 8002896:	4313      	orrs	r3, r2
 8002898:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800289a:	4a2f      	ldr	r2, [pc, #188]	; (8002958 <HAL_GPIO_Init+0x304>)
 800289c:	69bb      	ldr	r3, [r7, #24]
 800289e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80028a0:	4b2d      	ldr	r3, [pc, #180]	; (8002958 <HAL_GPIO_Init+0x304>)
 80028a2:	68db      	ldr	r3, [r3, #12]
 80028a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a6:	693b      	ldr	r3, [r7, #16]
 80028a8:	43db      	mvns	r3, r3
 80028aa:	69ba      	ldr	r2, [r7, #24]
 80028ac:	4013      	ands	r3, r2
 80028ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80028b8:	2b00      	cmp	r3, #0
 80028ba:	d003      	beq.n	80028c4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80028bc:	69ba      	ldr	r2, [r7, #24]
 80028be:	693b      	ldr	r3, [r7, #16]
 80028c0:	4313      	orrs	r3, r2
 80028c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80028c4:	4a24      	ldr	r2, [pc, #144]	; (8002958 <HAL_GPIO_Init+0x304>)
 80028c6:	69bb      	ldr	r3, [r7, #24]
 80028c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80028ca:	4b23      	ldr	r3, [pc, #140]	; (8002958 <HAL_GPIO_Init+0x304>)
 80028cc:	685b      	ldr	r3, [r3, #4]
 80028ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028d0:	693b      	ldr	r3, [r7, #16]
 80028d2:	43db      	mvns	r3, r3
 80028d4:	69ba      	ldr	r2, [r7, #24]
 80028d6:	4013      	ands	r3, r2
 80028d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80028da:	683b      	ldr	r3, [r7, #0]
 80028dc:	685b      	ldr	r3, [r3, #4]
 80028de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d003      	beq.n	80028ee <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80028e6:	69ba      	ldr	r2, [r7, #24]
 80028e8:	693b      	ldr	r3, [r7, #16]
 80028ea:	4313      	orrs	r3, r2
 80028ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ee:	4a1a      	ldr	r2, [pc, #104]	; (8002958 <HAL_GPIO_Init+0x304>)
 80028f0:	69bb      	ldr	r3, [r7, #24]
 80028f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80028f4:	4b18      	ldr	r3, [pc, #96]	; (8002958 <HAL_GPIO_Init+0x304>)
 80028f6:	681b      	ldr	r3, [r3, #0]
 80028f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028fa:	693b      	ldr	r3, [r7, #16]
 80028fc:	43db      	mvns	r3, r3
 80028fe:	69ba      	ldr	r2, [r7, #24]
 8002900:	4013      	ands	r3, r2
 8002902:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002904:	683b      	ldr	r3, [r7, #0]
 8002906:	685b      	ldr	r3, [r3, #4]
 8002908:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800290c:	2b00      	cmp	r3, #0
 800290e:	d003      	beq.n	8002918 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002910:	69ba      	ldr	r2, [r7, #24]
 8002912:	693b      	ldr	r3, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002918:	4a0f      	ldr	r2, [pc, #60]	; (8002958 <HAL_GPIO_Init+0x304>)
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800291e:	69fb      	ldr	r3, [r7, #28]
 8002920:	3301      	adds	r3, #1
 8002922:	61fb      	str	r3, [r7, #28]
 8002924:	69fb      	ldr	r3, [r7, #28]
 8002926:	2b0f      	cmp	r3, #15
 8002928:	f67f aea2 	bls.w	8002670 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800292c:	bf00      	nop
 800292e:	bf00      	nop
 8002930:	3724      	adds	r7, #36	; 0x24
 8002932:	46bd      	mov	sp, r7
 8002934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002938:	4770      	bx	lr
 800293a:	bf00      	nop
 800293c:	40023800 	.word	0x40023800
 8002940:	40013800 	.word	0x40013800
 8002944:	40020000 	.word	0x40020000
 8002948:	40020400 	.word	0x40020400
 800294c:	40020800 	.word	0x40020800
 8002950:	40020c00 	.word	0x40020c00
 8002954:	40021000 	.word	0x40021000
 8002958:	40013c00 	.word	0x40013c00

0800295c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
 8002964:	460b      	mov	r3, r1
 8002966:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	691a      	ldr	r2, [r3, #16]
 800296c:	887b      	ldrh	r3, [r7, #2]
 800296e:	4013      	ands	r3, r2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d002      	beq.n	800297a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002974:	2301      	movs	r3, #1
 8002976:	73fb      	strb	r3, [r7, #15]
 8002978:	e001      	b.n	800297e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800297a:	2300      	movs	r3, #0
 800297c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800297e:	7bfb      	ldrb	r3, [r7, #15]
}
 8002980:	4618      	mov	r0, r3
 8002982:	3714      	adds	r7, #20
 8002984:	46bd      	mov	sp, r7
 8002986:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298a:	4770      	bx	lr

0800298c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800298c:	b480      	push	{r7}
 800298e:	b083      	sub	sp, #12
 8002990:	af00      	add	r7, sp, #0
 8002992:	6078      	str	r0, [r7, #4]
 8002994:	460b      	mov	r3, r1
 8002996:	807b      	strh	r3, [r7, #2]
 8002998:	4613      	mov	r3, r2
 800299a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800299c:	787b      	ldrb	r3, [r7, #1]
 800299e:	2b00      	cmp	r3, #0
 80029a0:	d003      	beq.n	80029aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029a2:	887a      	ldrh	r2, [r7, #2]
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80029a8:	e003      	b.n	80029b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80029aa:	887b      	ldrh	r3, [r7, #2]
 80029ac:	041a      	lsls	r2, r3, #16
 80029ae:	687b      	ldr	r3, [r7, #4]
 80029b0:	619a      	str	r2, [r3, #24]
}
 80029b2:	bf00      	nop
 80029b4:	370c      	adds	r7, #12
 80029b6:	46bd      	mov	sp, r7
 80029b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029bc:	4770      	bx	lr
	...

080029c0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80029c0:	b580      	push	{r7, lr}
 80029c2:	b084      	sub	sp, #16
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	2b00      	cmp	r3, #0
 80029cc:	d101      	bne.n	80029d2 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80029ce:	2301      	movs	r3, #1
 80029d0:	e12b      	b.n	8002c2a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80029d8:	b2db      	uxtb	r3, r3
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d106      	bne.n	80029ec <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80029de:	687b      	ldr	r3, [r7, #4]
 80029e0:	2200      	movs	r2, #0
 80029e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80029e6:	6878      	ldr	r0, [r7, #4]
 80029e8:	f7ff f9c6 	bl	8001d78 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	2224      	movs	r2, #36	; 0x24
 80029f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	681a      	ldr	r2, [r3, #0]
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	681b      	ldr	r3, [r3, #0]
 80029fe:	f022 0201 	bic.w	r2, r2, #1
 8002a02:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002a04:	687b      	ldr	r3, [r7, #4]
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	681a      	ldr	r2, [r3, #0]
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8002a12:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8002a22:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002a24:	f001 f888 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8002a28:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4a81      	ldr	r2, [pc, #516]	; (8002c34 <HAL_I2C_Init+0x274>)
 8002a30:	4293      	cmp	r3, r2
 8002a32:	d807      	bhi.n	8002a44 <HAL_I2C_Init+0x84>
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	4a80      	ldr	r2, [pc, #512]	; (8002c38 <HAL_I2C_Init+0x278>)
 8002a38:	4293      	cmp	r3, r2
 8002a3a:	bf94      	ite	ls
 8002a3c:	2301      	movls	r3, #1
 8002a3e:	2300      	movhi	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	e006      	b.n	8002a52 <HAL_I2C_Init+0x92>
 8002a44:	68fb      	ldr	r3, [r7, #12]
 8002a46:	4a7d      	ldr	r2, [pc, #500]	; (8002c3c <HAL_I2C_Init+0x27c>)
 8002a48:	4293      	cmp	r3, r2
 8002a4a:	bf94      	ite	ls
 8002a4c:	2301      	movls	r3, #1
 8002a4e:	2300      	movhi	r3, #0
 8002a50:	b2db      	uxtb	r3, r3
 8002a52:	2b00      	cmp	r3, #0
 8002a54:	d001      	beq.n	8002a5a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0e7      	b.n	8002c2a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	4a78      	ldr	r2, [pc, #480]	; (8002c40 <HAL_I2C_Init+0x280>)
 8002a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002a62:	0c9b      	lsrs	r3, r3, #18
 8002a64:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	685b      	ldr	r3, [r3, #4]
 8002a6c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	681b      	ldr	r3, [r3, #0]
 8002a74:	68ba      	ldr	r2, [r7, #8]
 8002a76:	430a      	orrs	r2, r1
 8002a78:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	6a1b      	ldr	r3, [r3, #32]
 8002a80:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	685b      	ldr	r3, [r3, #4]
 8002a88:	4a6a      	ldr	r2, [pc, #424]	; (8002c34 <HAL_I2C_Init+0x274>)
 8002a8a:	4293      	cmp	r3, r2
 8002a8c:	d802      	bhi.n	8002a94 <HAL_I2C_Init+0xd4>
 8002a8e:	68bb      	ldr	r3, [r7, #8]
 8002a90:	3301      	adds	r3, #1
 8002a92:	e009      	b.n	8002aa8 <HAL_I2C_Init+0xe8>
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8002a9a:	fb02 f303 	mul.w	r3, r2, r3
 8002a9e:	4a69      	ldr	r2, [pc, #420]	; (8002c44 <HAL_I2C_Init+0x284>)
 8002aa0:	fba2 2303 	umull	r2, r3, r2, r3
 8002aa4:	099b      	lsrs	r3, r3, #6
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6812      	ldr	r2, [r2, #0]
 8002aac:	430b      	orrs	r3, r1
 8002aae:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	681b      	ldr	r3, [r3, #0]
 8002ab4:	69db      	ldr	r3, [r3, #28]
 8002ab6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8002aba:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	495c      	ldr	r1, [pc, #368]	; (8002c34 <HAL_I2C_Init+0x274>)
 8002ac4:	428b      	cmp	r3, r1
 8002ac6:	d819      	bhi.n	8002afc <HAL_I2C_Init+0x13c>
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	1e59      	subs	r1, r3, #1
 8002acc:	687b      	ldr	r3, [r7, #4]
 8002ace:	685b      	ldr	r3, [r3, #4]
 8002ad0:	005b      	lsls	r3, r3, #1
 8002ad2:	fbb1 f3f3 	udiv	r3, r1, r3
 8002ad6:	1c59      	adds	r1, r3, #1
 8002ad8:	f640 73fc 	movw	r3, #4092	; 0xffc
 8002adc:	400b      	ands	r3, r1
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00a      	beq.n	8002af8 <HAL_I2C_Init+0x138>
 8002ae2:	68fb      	ldr	r3, [r7, #12]
 8002ae4:	1e59      	subs	r1, r3, #1
 8002ae6:	687b      	ldr	r3, [r7, #4]
 8002ae8:	685b      	ldr	r3, [r3, #4]
 8002aea:	005b      	lsls	r3, r3, #1
 8002aec:	fbb1 f3f3 	udiv	r3, r1, r3
 8002af0:	3301      	adds	r3, #1
 8002af2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002af6:	e051      	b.n	8002b9c <HAL_I2C_Init+0x1dc>
 8002af8:	2304      	movs	r3, #4
 8002afa:	e04f      	b.n	8002b9c <HAL_I2C_Init+0x1dc>
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d111      	bne.n	8002b28 <HAL_I2C_Init+0x168>
 8002b04:	68fb      	ldr	r3, [r7, #12]
 8002b06:	1e58      	subs	r0, r3, #1
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	6859      	ldr	r1, [r3, #4]
 8002b0c:	460b      	mov	r3, r1
 8002b0e:	005b      	lsls	r3, r3, #1
 8002b10:	440b      	add	r3, r1
 8002b12:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b16:	3301      	adds	r3, #1
 8002b18:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	bf0c      	ite	eq
 8002b20:	2301      	moveq	r3, #1
 8002b22:	2300      	movne	r3, #0
 8002b24:	b2db      	uxtb	r3, r3
 8002b26:	e012      	b.n	8002b4e <HAL_I2C_Init+0x18e>
 8002b28:	68fb      	ldr	r3, [r7, #12]
 8002b2a:	1e58      	subs	r0, r3, #1
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	6859      	ldr	r1, [r3, #4]
 8002b30:	460b      	mov	r3, r1
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	0099      	lsls	r1, r3, #2
 8002b38:	440b      	add	r3, r1
 8002b3a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b3e:	3301      	adds	r3, #1
 8002b40:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b44:	2b00      	cmp	r3, #0
 8002b46:	bf0c      	ite	eq
 8002b48:	2301      	moveq	r3, #1
 8002b4a:	2300      	movne	r3, #0
 8002b4c:	b2db      	uxtb	r3, r3
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d001      	beq.n	8002b56 <HAL_I2C_Init+0x196>
 8002b52:	2301      	movs	r3, #1
 8002b54:	e022      	b.n	8002b9c <HAL_I2C_Init+0x1dc>
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	689b      	ldr	r3, [r3, #8]
 8002b5a:	2b00      	cmp	r3, #0
 8002b5c:	d10e      	bne.n	8002b7c <HAL_I2C_Init+0x1bc>
 8002b5e:	68fb      	ldr	r3, [r7, #12]
 8002b60:	1e58      	subs	r0, r3, #1
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	6859      	ldr	r1, [r3, #4]
 8002b66:	460b      	mov	r3, r1
 8002b68:	005b      	lsls	r3, r3, #1
 8002b6a:	440b      	add	r3, r1
 8002b6c:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b70:	3301      	adds	r3, #1
 8002b72:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b76:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002b7a:	e00f      	b.n	8002b9c <HAL_I2C_Init+0x1dc>
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	1e58      	subs	r0, r3, #1
 8002b80:	687b      	ldr	r3, [r7, #4]
 8002b82:	6859      	ldr	r1, [r3, #4]
 8002b84:	460b      	mov	r3, r1
 8002b86:	009b      	lsls	r3, r3, #2
 8002b88:	440b      	add	r3, r1
 8002b8a:	0099      	lsls	r1, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002b92:	3301      	adds	r3, #1
 8002b94:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002b98:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	6809      	ldr	r1, [r1, #0]
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	69da      	ldr	r2, [r3, #28]
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	6a1b      	ldr	r3, [r3, #32]
 8002bb6:	431a      	orrs	r2, r3
 8002bb8:	687b      	ldr	r3, [r7, #4]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	430a      	orrs	r2, r1
 8002bbe:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	689b      	ldr	r3, [r3, #8]
 8002bc6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002bca:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002bce:	687a      	ldr	r2, [r7, #4]
 8002bd0:	6911      	ldr	r1, [r2, #16]
 8002bd2:	687a      	ldr	r2, [r7, #4]
 8002bd4:	68d2      	ldr	r2, [r2, #12]
 8002bd6:	4311      	orrs	r1, r2
 8002bd8:	687a      	ldr	r2, [r7, #4]
 8002bda:	6812      	ldr	r2, [r2, #0]
 8002bdc:	430b      	orrs	r3, r1
 8002bde:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	68db      	ldr	r3, [r3, #12]
 8002be6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002bea:	687b      	ldr	r3, [r7, #4]
 8002bec:	695a      	ldr	r2, [r3, #20]
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	699b      	ldr	r3, [r3, #24]
 8002bf2:	431a      	orrs	r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	430a      	orrs	r2, r1
 8002bfa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	681a      	ldr	r2, [r3, #0]
 8002c02:	687b      	ldr	r3, [r7, #4]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	f042 0201 	orr.w	r2, r2, #1
 8002c0a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	2220      	movs	r2, #32
 8002c16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002c28:	2300      	movs	r3, #0
}
 8002c2a:	4618      	mov	r0, r3
 8002c2c:	3710      	adds	r7, #16
 8002c2e:	46bd      	mov	sp, r7
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	000186a0 	.word	0x000186a0
 8002c38:	001e847f 	.word	0x001e847f
 8002c3c:	003d08ff 	.word	0x003d08ff
 8002c40:	431bde83 	.word	0x431bde83
 8002c44:	10624dd3 	.word	0x10624dd3

08002c48 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b088      	sub	sp, #32
 8002c4c:	af02      	add	r7, sp, #8
 8002c4e:	60f8      	str	r0, [r7, #12]
 8002c50:	607a      	str	r2, [r7, #4]
 8002c52:	461a      	mov	r2, r3
 8002c54:	460b      	mov	r3, r1
 8002c56:	817b      	strh	r3, [r7, #10]
 8002c58:	4613      	mov	r3, r2
 8002c5a:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002c5c:	f7ff fbb8 	bl	80023d0 <HAL_GetTick>
 8002c60:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002c68:	b2db      	uxtb	r3, r3
 8002c6a:	2b20      	cmp	r3, #32
 8002c6c:	f040 80e0 	bne.w	8002e30 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002c70:	697b      	ldr	r3, [r7, #20]
 8002c72:	9300      	str	r3, [sp, #0]
 8002c74:	2319      	movs	r3, #25
 8002c76:	2201      	movs	r2, #1
 8002c78:	4970      	ldr	r1, [pc, #448]	; (8002e3c <HAL_I2C_Master_Transmit+0x1f4>)
 8002c7a:	68f8      	ldr	r0, [r7, #12]
 8002c7c:	f000 f964 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002c80:	4603      	mov	r3, r0
 8002c82:	2b00      	cmp	r3, #0
 8002c84:	d001      	beq.n	8002c8a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002c86:	2302      	movs	r3, #2
 8002c88:	e0d3      	b.n	8002e32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002c8a:	68fb      	ldr	r3, [r7, #12]
 8002c8c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002c90:	2b01      	cmp	r3, #1
 8002c92:	d101      	bne.n	8002c98 <HAL_I2C_Master_Transmit+0x50>
 8002c94:	2302      	movs	r3, #2
 8002c96:	e0cc      	b.n	8002e32 <HAL_I2C_Master_Transmit+0x1ea>
 8002c98:	68fb      	ldr	r3, [r7, #12]
 8002c9a:	2201      	movs	r2, #1
 8002c9c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	f003 0301 	and.w	r3, r3, #1
 8002caa:	2b01      	cmp	r3, #1
 8002cac:	d007      	beq.n	8002cbe <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002cae:	68fb      	ldr	r3, [r7, #12]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	681a      	ldr	r2, [r3, #0]
 8002cb4:	68fb      	ldr	r3, [r7, #12]
 8002cb6:	681b      	ldr	r3, [r3, #0]
 8002cb8:	f042 0201 	orr.w	r2, r2, #1
 8002cbc:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	681a      	ldr	r2, [r3, #0]
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002ccc:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	2221      	movs	r2, #33	; 0x21
 8002cd2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002cd6:	68fb      	ldr	r3, [r7, #12]
 8002cd8:	2210      	movs	r2, #16
 8002cda:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	2200      	movs	r2, #0
 8002ce2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	687a      	ldr	r2, [r7, #4]
 8002ce8:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	893a      	ldrh	r2, [r7, #8]
 8002cee:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cf4:	b29a      	uxth	r2, r3
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	4a50      	ldr	r2, [pc, #320]	; (8002e40 <HAL_I2C_Master_Transmit+0x1f8>)
 8002cfe:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002d00:	8979      	ldrh	r1, [r7, #10]
 8002d02:	697b      	ldr	r3, [r7, #20]
 8002d04:	6a3a      	ldr	r2, [r7, #32]
 8002d06:	68f8      	ldr	r0, [r7, #12]
 8002d08:	f000 f89c 	bl	8002e44 <I2C_MasterRequestWrite>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d001      	beq.n	8002d16 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e08d      	b.n	8002e32 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002d16:	2300      	movs	r3, #0
 8002d18:	613b      	str	r3, [r7, #16]
 8002d1a:	68fb      	ldr	r3, [r7, #12]
 8002d1c:	681b      	ldr	r3, [r3, #0]
 8002d1e:	695b      	ldr	r3, [r3, #20]
 8002d20:	613b      	str	r3, [r7, #16]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	699b      	ldr	r3, [r3, #24]
 8002d28:	613b      	str	r3, [r7, #16]
 8002d2a:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002d2c:	e066      	b.n	8002dfc <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002d2e:	697a      	ldr	r2, [r7, #20]
 8002d30:	6a39      	ldr	r1, [r7, #32]
 8002d32:	68f8      	ldr	r0, [r7, #12]
 8002d34:	f000 f9de 	bl	80030f4 <I2C_WaitOnTXEFlagUntilTimeout>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d00d      	beq.n	8002d5a <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002d3e:	68fb      	ldr	r3, [r7, #12]
 8002d40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d42:	2b04      	cmp	r3, #4
 8002d44:	d107      	bne.n	8002d56 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	681a      	ldr	r2, [r3, #0]
 8002d4c:	68fb      	ldr	r3, [r7, #12]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d54:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d56:	2301      	movs	r3, #1
 8002d58:	e06b      	b.n	8002e32 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d5e:	781a      	ldrb	r2, [r3, #0]
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002d66:	68fb      	ldr	r3, [r7, #12]
 8002d68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002d6a:	1c5a      	adds	r2, r3, #1
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002d74:	b29b      	uxth	r3, r3
 8002d76:	3b01      	subs	r3, #1
 8002d78:	b29a      	uxth	r2, r3
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002d7e:	68fb      	ldr	r3, [r7, #12]
 8002d80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d82:	3b01      	subs	r3, #1
 8002d84:	b29a      	uxth	r2, r3
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002d8a:	68fb      	ldr	r3, [r7, #12]
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	695b      	ldr	r3, [r3, #20]
 8002d90:	f003 0304 	and.w	r3, r3, #4
 8002d94:	2b04      	cmp	r3, #4
 8002d96:	d11b      	bne.n	8002dd0 <HAL_I2C_Master_Transmit+0x188>
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d017      	beq.n	8002dd0 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002da4:	781a      	ldrb	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002db0:	1c5a      	adds	r2, r3, #1
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002dba:	b29b      	uxth	r3, r3
 8002dbc:	3b01      	subs	r3, #1
 8002dbe:	b29a      	uxth	r2, r3
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002dc4:	68fb      	ldr	r3, [r7, #12]
 8002dc6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002dc8:	3b01      	subs	r3, #1
 8002dca:	b29a      	uxth	r2, r3
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002dd0:	697a      	ldr	r2, [r7, #20]
 8002dd2:	6a39      	ldr	r1, [r7, #32]
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f000 f9ce 	bl	8003176 <I2C_WaitOnBTFFlagUntilTimeout>
 8002dda:	4603      	mov	r3, r0
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d00d      	beq.n	8002dfc <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002de4:	2b04      	cmp	r3, #4
 8002de6:	d107      	bne.n	8002df8 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	681a      	ldr	r2, [r3, #0]
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	681b      	ldr	r3, [r3, #0]
 8002df2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002df6:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002df8:	2301      	movs	r3, #1
 8002dfa:	e01a      	b.n	8002e32 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d194      	bne.n	8002d2e <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002e04:	68fb      	ldr	r3, [r7, #12]
 8002e06:	681b      	ldr	r3, [r3, #0]
 8002e08:	681a      	ldr	r2, [r3, #0]
 8002e0a:	68fb      	ldr	r3, [r7, #12]
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002e12:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002e14:	68fb      	ldr	r3, [r7, #12]
 8002e16:	2220      	movs	r2, #32
 8002e18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	2200      	movs	r2, #0
 8002e20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2200      	movs	r2, #0
 8002e28:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002e2c:	2300      	movs	r3, #0
 8002e2e:	e000      	b.n	8002e32 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002e30:	2302      	movs	r3, #2
  }
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3718      	adds	r7, #24
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bd80      	pop	{r7, pc}
 8002e3a:	bf00      	nop
 8002e3c:	00100002 	.word	0x00100002
 8002e40:	ffff0000 	.word	0xffff0000

08002e44 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002e44:	b580      	push	{r7, lr}
 8002e46:	b088      	sub	sp, #32
 8002e48:	af02      	add	r7, sp, #8
 8002e4a:	60f8      	str	r0, [r7, #12]
 8002e4c:	607a      	str	r2, [r7, #4]
 8002e4e:	603b      	str	r3, [r7, #0]
 8002e50:	460b      	mov	r3, r1
 8002e52:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002e54:	68fb      	ldr	r3, [r7, #12]
 8002e56:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002e58:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002e5a:	697b      	ldr	r3, [r7, #20]
 8002e5c:	2b08      	cmp	r3, #8
 8002e5e:	d006      	beq.n	8002e6e <I2C_MasterRequestWrite+0x2a>
 8002e60:	697b      	ldr	r3, [r7, #20]
 8002e62:	2b01      	cmp	r3, #1
 8002e64:	d003      	beq.n	8002e6e <I2C_MasterRequestWrite+0x2a>
 8002e66:	697b      	ldr	r3, [r7, #20]
 8002e68:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002e6c:	d108      	bne.n	8002e80 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	681a      	ldr	r2, [r3, #0]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e7c:	601a      	str	r2, [r3, #0]
 8002e7e:	e00b      	b.n	8002e98 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002e80:	68fb      	ldr	r3, [r7, #12]
 8002e82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e84:	2b12      	cmp	r3, #18
 8002e86:	d107      	bne.n	8002e98 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002e88:	68fb      	ldr	r3, [r7, #12]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	681a      	ldr	r2, [r3, #0]
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002e96:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	9300      	str	r3, [sp, #0]
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2200      	movs	r2, #0
 8002ea0:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002ea4:	68f8      	ldr	r0, [r7, #12]
 8002ea6:	f000 f84f 	bl	8002f48 <I2C_WaitOnFlagUntilTimeout>
 8002eaa:	4603      	mov	r3, r0
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d00d      	beq.n	8002ecc <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002eb0:	68fb      	ldr	r3, [r7, #12]
 8002eb2:	681b      	ldr	r3, [r3, #0]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002eba:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ebe:	d103      	bne.n	8002ec8 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002ec0:	68fb      	ldr	r3, [r7, #12]
 8002ec2:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002ec6:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002ec8:	2303      	movs	r3, #3
 8002eca:	e035      	b.n	8002f38 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002ecc:	68fb      	ldr	r3, [r7, #12]
 8002ece:	691b      	ldr	r3, [r3, #16]
 8002ed0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002ed4:	d108      	bne.n	8002ee8 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002ed6:	897b      	ldrh	r3, [r7, #10]
 8002ed8:	b2db      	uxtb	r3, r3
 8002eda:	461a      	mov	r2, r3
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002ee4:	611a      	str	r2, [r3, #16]
 8002ee6:	e01b      	b.n	8002f20 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002ee8:	897b      	ldrh	r3, [r7, #10]
 8002eea:	11db      	asrs	r3, r3, #7
 8002eec:	b2db      	uxtb	r3, r3
 8002eee:	f003 0306 	and.w	r3, r3, #6
 8002ef2:	b2db      	uxtb	r3, r3
 8002ef4:	f063 030f 	orn	r3, r3, #15
 8002ef8:	b2da      	uxtb	r2, r3
 8002efa:	68fb      	ldr	r3, [r7, #12]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002f00:	683b      	ldr	r3, [r7, #0]
 8002f02:	687a      	ldr	r2, [r7, #4]
 8002f04:	490e      	ldr	r1, [pc, #56]	; (8002f40 <I2C_MasterRequestWrite+0xfc>)
 8002f06:	68f8      	ldr	r0, [r7, #12]
 8002f08:	f000 f875 	bl	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f0c:	4603      	mov	r3, r0
 8002f0e:	2b00      	cmp	r3, #0
 8002f10:	d001      	beq.n	8002f16 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002f12:	2301      	movs	r3, #1
 8002f14:	e010      	b.n	8002f38 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002f16:	897b      	ldrh	r3, [r7, #10]
 8002f18:	b2da      	uxtb	r2, r3
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	4907      	ldr	r1, [pc, #28]	; (8002f44 <I2C_MasterRequestWrite+0x100>)
 8002f26:	68f8      	ldr	r0, [r7, #12]
 8002f28:	f000 f865 	bl	8002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002f2c:	4603      	mov	r3, r0
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d001      	beq.n	8002f36 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002f32:	2301      	movs	r3, #1
 8002f34:	e000      	b.n	8002f38 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002f36:	2300      	movs	r3, #0
}
 8002f38:	4618      	mov	r0, r3
 8002f3a:	3718      	adds	r7, #24
 8002f3c:	46bd      	mov	sp, r7
 8002f3e:	bd80      	pop	{r7, pc}
 8002f40:	00010008 	.word	0x00010008
 8002f44:	00010002 	.word	0x00010002

08002f48 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002f48:	b580      	push	{r7, lr}
 8002f4a:	b084      	sub	sp, #16
 8002f4c:	af00      	add	r7, sp, #0
 8002f4e:	60f8      	str	r0, [r7, #12]
 8002f50:	60b9      	str	r1, [r7, #8]
 8002f52:	603b      	str	r3, [r7, #0]
 8002f54:	4613      	mov	r3, r2
 8002f56:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f58:	e025      	b.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002f5a:	683b      	ldr	r3, [r7, #0]
 8002f5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f60:	d021      	beq.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002f62:	f7ff fa35 	bl	80023d0 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	69bb      	ldr	r3, [r7, #24]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	683a      	ldr	r2, [r7, #0]
 8002f6e:	429a      	cmp	r2, r3
 8002f70:	d302      	bcc.n	8002f78 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	2b00      	cmp	r3, #0
 8002f76:	d116      	bne.n	8002fa6 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	2200      	movs	r2, #0
 8002f7c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	2220      	movs	r2, #32
 8002f82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	2200      	movs	r2, #0
 8002f8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f92:	f043 0220 	orr.w	r2, r3, #32
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002fa2:	2301      	movs	r3, #1
 8002fa4:	e023      	b.n	8002fee <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002fa6:	68bb      	ldr	r3, [r7, #8]
 8002fa8:	0c1b      	lsrs	r3, r3, #16
 8002faa:	b2db      	uxtb	r3, r3
 8002fac:	2b01      	cmp	r3, #1
 8002fae:	d10d      	bne.n	8002fcc <I2C_WaitOnFlagUntilTimeout+0x84>
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	695b      	ldr	r3, [r3, #20]
 8002fb6:	43da      	mvns	r2, r3
 8002fb8:	68bb      	ldr	r3, [r7, #8]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	b29b      	uxth	r3, r3
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	bf0c      	ite	eq
 8002fc2:	2301      	moveq	r3, #1
 8002fc4:	2300      	movne	r3, #0
 8002fc6:	b2db      	uxtb	r3, r3
 8002fc8:	461a      	mov	r2, r3
 8002fca:	e00c      	b.n	8002fe6 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8002fcc:	68fb      	ldr	r3, [r7, #12]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	699b      	ldr	r3, [r3, #24]
 8002fd2:	43da      	mvns	r2, r3
 8002fd4:	68bb      	ldr	r3, [r7, #8]
 8002fd6:	4013      	ands	r3, r2
 8002fd8:	b29b      	uxth	r3, r3
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	bf0c      	ite	eq
 8002fde:	2301      	moveq	r3, #1
 8002fe0:	2300      	movne	r3, #0
 8002fe2:	b2db      	uxtb	r3, r3
 8002fe4:	461a      	mov	r2, r3
 8002fe6:	79fb      	ldrb	r3, [r7, #7]
 8002fe8:	429a      	cmp	r2, r3
 8002fea:	d0b6      	beq.n	8002f5a <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8002fec:	2300      	movs	r3, #0
}
 8002fee:	4618      	mov	r0, r3
 8002ff0:	3710      	adds	r7, #16
 8002ff2:	46bd      	mov	sp, r7
 8002ff4:	bd80      	pop	{r7, pc}

08002ff6 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002ff6:	b580      	push	{r7, lr}
 8002ff8:	b084      	sub	sp, #16
 8002ffa:	af00      	add	r7, sp, #0
 8002ffc:	60f8      	str	r0, [r7, #12]
 8002ffe:	60b9      	str	r1, [r7, #8]
 8003000:	607a      	str	r2, [r7, #4]
 8003002:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003004:	e051      	b.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003006:	68fb      	ldr	r3, [r7, #12]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	695b      	ldr	r3, [r3, #20]
 800300c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003010:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003014:	d123      	bne.n	800305e <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003024:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	681b      	ldr	r3, [r3, #0]
 800302a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800302e:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	2200      	movs	r2, #0
 8003034:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	2220      	movs	r2, #32
 800303a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800303e:	68fb      	ldr	r3, [r7, #12]
 8003040:	2200      	movs	r2, #0
 8003042:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800304a:	f043 0204 	orr.w	r2, r3, #4
 800304e:	68fb      	ldr	r3, [r7, #12]
 8003050:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	2200      	movs	r2, #0
 8003056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e046      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003064:	d021      	beq.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003066:	f7ff f9b3 	bl	80023d0 <HAL_GetTick>
 800306a:	4602      	mov	r2, r0
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	1ad3      	subs	r3, r2, r3
 8003070:	687a      	ldr	r2, [r7, #4]
 8003072:	429a      	cmp	r2, r3
 8003074:	d302      	bcc.n	800307c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	2b00      	cmp	r3, #0
 800307a:	d116      	bne.n	80030aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800307c:	68fb      	ldr	r3, [r7, #12]
 800307e:	2200      	movs	r2, #0
 8003080:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003082:	68fb      	ldr	r3, [r7, #12]
 8003084:	2220      	movs	r2, #32
 8003086:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	2200      	movs	r2, #0
 800308e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003096:	f043 0220 	orr.w	r2, r3, #32
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800309e:	68fb      	ldr	r3, [r7, #12]
 80030a0:	2200      	movs	r2, #0
 80030a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80030a6:	2301      	movs	r3, #1
 80030a8:	e020      	b.n	80030ec <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80030aa:	68bb      	ldr	r3, [r7, #8]
 80030ac:	0c1b      	lsrs	r3, r3, #16
 80030ae:	b2db      	uxtb	r3, r3
 80030b0:	2b01      	cmp	r3, #1
 80030b2:	d10c      	bne.n	80030ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80030b4:	68fb      	ldr	r3, [r7, #12]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	695b      	ldr	r3, [r3, #20]
 80030ba:	43da      	mvns	r2, r3
 80030bc:	68bb      	ldr	r3, [r7, #8]
 80030be:	4013      	ands	r3, r2
 80030c0:	b29b      	uxth	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	bf14      	ite	ne
 80030c6:	2301      	movne	r3, #1
 80030c8:	2300      	moveq	r3, #0
 80030ca:	b2db      	uxtb	r3, r3
 80030cc:	e00b      	b.n	80030e6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	681b      	ldr	r3, [r3, #0]
 80030d2:	699b      	ldr	r3, [r3, #24]
 80030d4:	43da      	mvns	r2, r3
 80030d6:	68bb      	ldr	r3, [r7, #8]
 80030d8:	4013      	ands	r3, r2
 80030da:	b29b      	uxth	r3, r3
 80030dc:	2b00      	cmp	r3, #0
 80030de:	bf14      	ite	ne
 80030e0:	2301      	movne	r3, #1
 80030e2:	2300      	moveq	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d18d      	bne.n	8003006 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3710      	adds	r7, #16
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}

080030f4 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80030f4:	b580      	push	{r7, lr}
 80030f6:	b084      	sub	sp, #16
 80030f8:	af00      	add	r7, sp, #0
 80030fa:	60f8      	str	r0, [r7, #12]
 80030fc:	60b9      	str	r1, [r7, #8]
 80030fe:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003100:	e02d      	b.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003102:	68f8      	ldr	r0, [r7, #12]
 8003104:	f000 f878 	bl	80031f8 <I2C_IsAcknowledgeFailed>
 8003108:	4603      	mov	r3, r0
 800310a:	2b00      	cmp	r3, #0
 800310c:	d001      	beq.n	8003112 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800310e:	2301      	movs	r3, #1
 8003110:	e02d      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003112:	68bb      	ldr	r3, [r7, #8]
 8003114:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003118:	d021      	beq.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800311a:	f7ff f959 	bl	80023d0 <HAL_GetTick>
 800311e:	4602      	mov	r2, r0
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	1ad3      	subs	r3, r2, r3
 8003124:	68ba      	ldr	r2, [r7, #8]
 8003126:	429a      	cmp	r2, r3
 8003128:	d302      	bcc.n	8003130 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 800312a:	68bb      	ldr	r3, [r7, #8]
 800312c:	2b00      	cmp	r3, #0
 800312e:	d116      	bne.n	800315e <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003130:	68fb      	ldr	r3, [r7, #12]
 8003132:	2200      	movs	r2, #0
 8003134:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003136:	68fb      	ldr	r3, [r7, #12]
 8003138:	2220      	movs	r2, #32
 800313a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800313e:	68fb      	ldr	r3, [r7, #12]
 8003140:	2200      	movs	r2, #0
 8003142:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003146:	68fb      	ldr	r3, [r7, #12]
 8003148:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800314a:	f043 0220 	orr.w	r2, r3, #32
 800314e:	68fb      	ldr	r3, [r7, #12]
 8003150:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800315a:	2301      	movs	r3, #1
 800315c:	e007      	b.n	800316e <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	695b      	ldr	r3, [r3, #20]
 8003164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003168:	2b80      	cmp	r3, #128	; 0x80
 800316a:	d1ca      	bne.n	8003102 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800316c:	2300      	movs	r3, #0
}
 800316e:	4618      	mov	r0, r3
 8003170:	3710      	adds	r7, #16
 8003172:	46bd      	mov	sp, r7
 8003174:	bd80      	pop	{r7, pc}

08003176 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003176:	b580      	push	{r7, lr}
 8003178:	b084      	sub	sp, #16
 800317a:	af00      	add	r7, sp, #0
 800317c:	60f8      	str	r0, [r7, #12]
 800317e:	60b9      	str	r1, [r7, #8]
 8003180:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003182:	e02d      	b.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003184:	68f8      	ldr	r0, [r7, #12]
 8003186:	f000 f837 	bl	80031f8 <I2C_IsAcknowledgeFailed>
 800318a:	4603      	mov	r3, r0
 800318c:	2b00      	cmp	r3, #0
 800318e:	d001      	beq.n	8003194 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003190:	2301      	movs	r3, #1
 8003192:	e02d      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003194:	68bb      	ldr	r3, [r7, #8]
 8003196:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800319a:	d021      	beq.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800319c:	f7ff f918 	bl	80023d0 <HAL_GetTick>
 80031a0:	4602      	mov	r2, r0
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	1ad3      	subs	r3, r2, r3
 80031a6:	68ba      	ldr	r2, [r7, #8]
 80031a8:	429a      	cmp	r2, r3
 80031aa:	d302      	bcc.n	80031b2 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d116      	bne.n	80031e0 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	2200      	movs	r2, #0
 80031b6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80031b8:	68fb      	ldr	r3, [r7, #12]
 80031ba:	2220      	movs	r2, #32
 80031bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031c0:	68fb      	ldr	r3, [r7, #12]
 80031c2:	2200      	movs	r2, #0
 80031c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80031c8:	68fb      	ldr	r3, [r7, #12]
 80031ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031cc:	f043 0220 	orr.w	r2, r3, #32
 80031d0:	68fb      	ldr	r3, [r7, #12]
 80031d2:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	2200      	movs	r2, #0
 80031d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80031dc:	2301      	movs	r3, #1
 80031de:	e007      	b.n	80031f0 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	695b      	ldr	r3, [r3, #20]
 80031e6:	f003 0304 	and.w	r3, r3, #4
 80031ea:	2b04      	cmp	r3, #4
 80031ec:	d1ca      	bne.n	8003184 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80031ee:	2300      	movs	r3, #0
}
 80031f0:	4618      	mov	r0, r3
 80031f2:	3710      	adds	r7, #16
 80031f4:	46bd      	mov	sp, r7
 80031f6:	bd80      	pop	{r7, pc}

080031f8 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031f8:	b480      	push	{r7}
 80031fa:	b083      	sub	sp, #12
 80031fc:	af00      	add	r7, sp, #0
 80031fe:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	695b      	ldr	r3, [r3, #20]
 8003206:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800320a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800320e:	d11b      	bne.n	8003248 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	681b      	ldr	r3, [r3, #0]
 8003214:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003218:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	2200      	movs	r2, #0
 800321e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	2220      	movs	r2, #32
 8003224:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	2200      	movs	r2, #0
 800322c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003234:	f043 0204 	orr.w	r2, r3, #4
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2200      	movs	r2, #0
 8003240:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003244:	2301      	movs	r3, #1
 8003246:	e000      	b.n	800324a <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003248:	2300      	movs	r3, #0
}
 800324a:	4618      	mov	r0, r3
 800324c:	370c      	adds	r7, #12
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
	...

08003258 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003258:	b580      	push	{r7, lr}
 800325a:	b086      	sub	sp, #24
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d101      	bne.n	800326a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003266:	2301      	movs	r3, #1
 8003268:	e267      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	681b      	ldr	r3, [r3, #0]
 800326e:	f003 0301 	and.w	r3, r3, #1
 8003272:	2b00      	cmp	r3, #0
 8003274:	d075      	beq.n	8003362 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003276:	4b88      	ldr	r3, [pc, #544]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	f003 030c 	and.w	r3, r3, #12
 800327e:	2b04      	cmp	r3, #4
 8003280:	d00c      	beq.n	800329c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003282:	4b85      	ldr	r3, [pc, #532]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003284:	689b      	ldr	r3, [r3, #8]
 8003286:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800328a:	2b08      	cmp	r3, #8
 800328c:	d112      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800328e:	4b82      	ldr	r3, [pc, #520]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003296:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800329a:	d10b      	bne.n	80032b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800329c:	4b7e      	ldr	r3, [pc, #504]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800329e:	681b      	ldr	r3, [r3, #0]
 80032a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032a4:	2b00      	cmp	r3, #0
 80032a6:	d05b      	beq.n	8003360 <HAL_RCC_OscConfig+0x108>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d157      	bne.n	8003360 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80032b0:	2301      	movs	r3, #1
 80032b2:	e242      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	685b      	ldr	r3, [r3, #4]
 80032b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80032bc:	d106      	bne.n	80032cc <HAL_RCC_OscConfig+0x74>
 80032be:	4b76      	ldr	r3, [pc, #472]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a75      	ldr	r2, [pc, #468]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e01d      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032d4:	d10c      	bne.n	80032f0 <HAL_RCC_OscConfig+0x98>
 80032d6:	4b70      	ldr	r3, [pc, #448]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4a6f      	ldr	r2, [pc, #444]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032e0:	6013      	str	r3, [r2, #0]
 80032e2:	4b6d      	ldr	r3, [pc, #436]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	4a6c      	ldr	r2, [pc, #432]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032ec:	6013      	str	r3, [r2, #0]
 80032ee:	e00b      	b.n	8003308 <HAL_RCC_OscConfig+0xb0>
 80032f0:	4b69      	ldr	r3, [pc, #420]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4a68      	ldr	r2, [pc, #416]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032fa:	6013      	str	r3, [r2, #0]
 80032fc:	4b66      	ldr	r3, [pc, #408]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	4a65      	ldr	r2, [pc, #404]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003302:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003306:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	2b00      	cmp	r3, #0
 800330e:	d013      	beq.n	8003338 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003310:	f7ff f85e 	bl	80023d0 <HAL_GetTick>
 8003314:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003316:	e008      	b.n	800332a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003318:	f7ff f85a 	bl	80023d0 <HAL_GetTick>
 800331c:	4602      	mov	r2, r0
 800331e:	693b      	ldr	r3, [r7, #16]
 8003320:	1ad3      	subs	r3, r2, r3
 8003322:	2b64      	cmp	r3, #100	; 0x64
 8003324:	d901      	bls.n	800332a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003326:	2303      	movs	r3, #3
 8003328:	e207      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800332a:	4b5b      	ldr	r3, [pc, #364]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003332:	2b00      	cmp	r3, #0
 8003334:	d0f0      	beq.n	8003318 <HAL_RCC_OscConfig+0xc0>
 8003336:	e014      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003338:	f7ff f84a 	bl	80023d0 <HAL_GetTick>
 800333c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800333e:	e008      	b.n	8003352 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003340:	f7ff f846 	bl	80023d0 <HAL_GetTick>
 8003344:	4602      	mov	r2, r0
 8003346:	693b      	ldr	r3, [r7, #16]
 8003348:	1ad3      	subs	r3, r2, r3
 800334a:	2b64      	cmp	r3, #100	; 0x64
 800334c:	d901      	bls.n	8003352 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800334e:	2303      	movs	r3, #3
 8003350:	e1f3      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003352:	4b51      	ldr	r3, [pc, #324]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800335a:	2b00      	cmp	r3, #0
 800335c:	d1f0      	bne.n	8003340 <HAL_RCC_OscConfig+0xe8>
 800335e:	e000      	b.n	8003362 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003360:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f003 0302 	and.w	r3, r3, #2
 800336a:	2b00      	cmp	r3, #0
 800336c:	d063      	beq.n	8003436 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800336e:	4b4a      	ldr	r3, [pc, #296]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003370:	689b      	ldr	r3, [r3, #8]
 8003372:	f003 030c 	and.w	r3, r3, #12
 8003376:	2b00      	cmp	r3, #0
 8003378:	d00b      	beq.n	8003392 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800337a:	4b47      	ldr	r3, [pc, #284]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800337c:	689b      	ldr	r3, [r3, #8]
 800337e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003382:	2b08      	cmp	r3, #8
 8003384:	d11c      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003386:	4b44      	ldr	r3, [pc, #272]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800338e:	2b00      	cmp	r3, #0
 8003390:	d116      	bne.n	80033c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003392:	4b41      	ldr	r3, [pc, #260]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	f003 0302 	and.w	r3, r3, #2
 800339a:	2b00      	cmp	r3, #0
 800339c:	d005      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b01      	cmp	r3, #1
 80033a4:	d001      	beq.n	80033aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80033a6:	2301      	movs	r3, #1
 80033a8:	e1c7      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033aa:	4b3b      	ldr	r3, [pc, #236]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ac:	681b      	ldr	r3, [r3, #0]
 80033ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	691b      	ldr	r3, [r3, #16]
 80033b6:	00db      	lsls	r3, r3, #3
 80033b8:	4937      	ldr	r1, [pc, #220]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ba:	4313      	orrs	r3, r2
 80033bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80033be:	e03a      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	68db      	ldr	r3, [r3, #12]
 80033c4:	2b00      	cmp	r3, #0
 80033c6:	d020      	beq.n	800340a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033c8:	4b34      	ldr	r3, [pc, #208]	; (800349c <HAL_RCC_OscConfig+0x244>)
 80033ca:	2201      	movs	r2, #1
 80033cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033ce:	f7fe ffff 	bl	80023d0 <HAL_GetTick>
 80033d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033d4:	e008      	b.n	80033e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80033d6:	f7fe fffb 	bl	80023d0 <HAL_GetTick>
 80033da:	4602      	mov	r2, r0
 80033dc:	693b      	ldr	r3, [r7, #16]
 80033de:	1ad3      	subs	r3, r2, r3
 80033e0:	2b02      	cmp	r3, #2
 80033e2:	d901      	bls.n	80033e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80033e4:	2303      	movs	r3, #3
 80033e6:	e1a8      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033e8:	4b2b      	ldr	r3, [pc, #172]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	f003 0302 	and.w	r3, r3, #2
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d0f0      	beq.n	80033d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033f4:	4b28      	ldr	r3, [pc, #160]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	691b      	ldr	r3, [r3, #16]
 8003400:	00db      	lsls	r3, r3, #3
 8003402:	4925      	ldr	r1, [pc, #148]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 8003404:	4313      	orrs	r3, r2
 8003406:	600b      	str	r3, [r1, #0]
 8003408:	e015      	b.n	8003436 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800340a:	4b24      	ldr	r3, [pc, #144]	; (800349c <HAL_RCC_OscConfig+0x244>)
 800340c:	2200      	movs	r2, #0
 800340e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003410:	f7fe ffde 	bl	80023d0 <HAL_GetTick>
 8003414:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003416:	e008      	b.n	800342a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003418:	f7fe ffda 	bl	80023d0 <HAL_GetTick>
 800341c:	4602      	mov	r2, r0
 800341e:	693b      	ldr	r3, [r7, #16]
 8003420:	1ad3      	subs	r3, r2, r3
 8003422:	2b02      	cmp	r3, #2
 8003424:	d901      	bls.n	800342a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003426:	2303      	movs	r3, #3
 8003428:	e187      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800342a:	4b1b      	ldr	r3, [pc, #108]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f003 0302 	and.w	r3, r3, #2
 8003432:	2b00      	cmp	r3, #0
 8003434:	d1f0      	bne.n	8003418 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f003 0308 	and.w	r3, r3, #8
 800343e:	2b00      	cmp	r3, #0
 8003440:	d036      	beq.n	80034b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	695b      	ldr	r3, [r3, #20]
 8003446:	2b00      	cmp	r3, #0
 8003448:	d016      	beq.n	8003478 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800344a:	4b15      	ldr	r3, [pc, #84]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800344c:	2201      	movs	r2, #1
 800344e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003450:	f7fe ffbe 	bl	80023d0 <HAL_GetTick>
 8003454:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003456:	e008      	b.n	800346a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003458:	f7fe ffba 	bl	80023d0 <HAL_GetTick>
 800345c:	4602      	mov	r2, r0
 800345e:	693b      	ldr	r3, [r7, #16]
 8003460:	1ad3      	subs	r3, r2, r3
 8003462:	2b02      	cmp	r3, #2
 8003464:	d901      	bls.n	800346a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003466:	2303      	movs	r3, #3
 8003468:	e167      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800346a:	4b0b      	ldr	r3, [pc, #44]	; (8003498 <HAL_RCC_OscConfig+0x240>)
 800346c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800346e:	f003 0302 	and.w	r3, r3, #2
 8003472:	2b00      	cmp	r3, #0
 8003474:	d0f0      	beq.n	8003458 <HAL_RCC_OscConfig+0x200>
 8003476:	e01b      	b.n	80034b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003478:	4b09      	ldr	r3, [pc, #36]	; (80034a0 <HAL_RCC_OscConfig+0x248>)
 800347a:	2200      	movs	r2, #0
 800347c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800347e:	f7fe ffa7 	bl	80023d0 <HAL_GetTick>
 8003482:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003484:	e00e      	b.n	80034a4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003486:	f7fe ffa3 	bl	80023d0 <HAL_GetTick>
 800348a:	4602      	mov	r2, r0
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	1ad3      	subs	r3, r2, r3
 8003490:	2b02      	cmp	r3, #2
 8003492:	d907      	bls.n	80034a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003494:	2303      	movs	r3, #3
 8003496:	e150      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 8003498:	40023800 	.word	0x40023800
 800349c:	42470000 	.word	0x42470000
 80034a0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80034a4:	4b88      	ldr	r3, [pc, #544]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034a6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80034a8:	f003 0302 	and.w	r3, r3, #2
 80034ac:	2b00      	cmp	r3, #0
 80034ae:	d1ea      	bne.n	8003486 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	f003 0304 	and.w	r3, r3, #4
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	f000 8097 	beq.w	80035ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034be:	2300      	movs	r3, #0
 80034c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034c2:	4b81      	ldr	r3, [pc, #516]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ca:	2b00      	cmp	r3, #0
 80034cc:	d10f      	bne.n	80034ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034ce:	2300      	movs	r3, #0
 80034d0:	60bb      	str	r3, [r7, #8]
 80034d2:	4b7d      	ldr	r3, [pc, #500]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034d6:	4a7c      	ldr	r2, [pc, #496]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034d8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034dc:	6413      	str	r3, [r2, #64]	; 0x40
 80034de:	4b7a      	ldr	r3, [pc, #488]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80034e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80034e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034e6:	60bb      	str	r3, [r7, #8]
 80034e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ea:	2301      	movs	r3, #1
 80034ec:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ee:	4b77      	ldr	r3, [pc, #476]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d118      	bne.n	800352c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034fa:	4b74      	ldr	r3, [pc, #464]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	4a73      	ldr	r2, [pc, #460]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003500:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003504:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003506:	f7fe ff63 	bl	80023d0 <HAL_GetTick>
 800350a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800350c:	e008      	b.n	8003520 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800350e:	f7fe ff5f 	bl	80023d0 <HAL_GetTick>
 8003512:	4602      	mov	r2, r0
 8003514:	693b      	ldr	r3, [r7, #16]
 8003516:	1ad3      	subs	r3, r2, r3
 8003518:	2b02      	cmp	r3, #2
 800351a:	d901      	bls.n	8003520 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800351c:	2303      	movs	r3, #3
 800351e:	e10c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003520:	4b6a      	ldr	r3, [pc, #424]	; (80036cc <HAL_RCC_OscConfig+0x474>)
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003528:	2b00      	cmp	r3, #0
 800352a:	d0f0      	beq.n	800350e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800352c:	687b      	ldr	r3, [r7, #4]
 800352e:	689b      	ldr	r3, [r3, #8]
 8003530:	2b01      	cmp	r3, #1
 8003532:	d106      	bne.n	8003542 <HAL_RCC_OscConfig+0x2ea>
 8003534:	4b64      	ldr	r3, [pc, #400]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003536:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003538:	4a63      	ldr	r2, [pc, #396]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800353a:	f043 0301 	orr.w	r3, r3, #1
 800353e:	6713      	str	r3, [r2, #112]	; 0x70
 8003540:	e01c      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	689b      	ldr	r3, [r3, #8]
 8003546:	2b05      	cmp	r3, #5
 8003548:	d10c      	bne.n	8003564 <HAL_RCC_OscConfig+0x30c>
 800354a:	4b5f      	ldr	r3, [pc, #380]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800354c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800354e:	4a5e      	ldr	r2, [pc, #376]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003550:	f043 0304 	orr.w	r3, r3, #4
 8003554:	6713      	str	r3, [r2, #112]	; 0x70
 8003556:	4b5c      	ldr	r3, [pc, #368]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003558:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800355a:	4a5b      	ldr	r2, [pc, #364]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800355c:	f043 0301 	orr.w	r3, r3, #1
 8003560:	6713      	str	r3, [r2, #112]	; 0x70
 8003562:	e00b      	b.n	800357c <HAL_RCC_OscConfig+0x324>
 8003564:	4b58      	ldr	r3, [pc, #352]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003566:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003568:	4a57      	ldr	r2, [pc, #348]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800356a:	f023 0301 	bic.w	r3, r3, #1
 800356e:	6713      	str	r3, [r2, #112]	; 0x70
 8003570:	4b55      	ldr	r3, [pc, #340]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003572:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003574:	4a54      	ldr	r2, [pc, #336]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003576:	f023 0304 	bic.w	r3, r3, #4
 800357a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	689b      	ldr	r3, [r3, #8]
 8003580:	2b00      	cmp	r3, #0
 8003582:	d015      	beq.n	80035b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003584:	f7fe ff24 	bl	80023d0 <HAL_GetTick>
 8003588:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358a:	e00a      	b.n	80035a2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800358c:	f7fe ff20 	bl	80023d0 <HAL_GetTick>
 8003590:	4602      	mov	r2, r0
 8003592:	693b      	ldr	r3, [r7, #16]
 8003594:	1ad3      	subs	r3, r2, r3
 8003596:	f241 3288 	movw	r2, #5000	; 0x1388
 800359a:	4293      	cmp	r3, r2
 800359c:	d901      	bls.n	80035a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800359e:	2303      	movs	r3, #3
 80035a0:	e0cb      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a2:	4b49      	ldr	r3, [pc, #292]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035a6:	f003 0302 	and.w	r3, r3, #2
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d0ee      	beq.n	800358c <HAL_RCC_OscConfig+0x334>
 80035ae:	e014      	b.n	80035da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b0:	f7fe ff0e 	bl	80023d0 <HAL_GetTick>
 80035b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b6:	e00a      	b.n	80035ce <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80035b8:	f7fe ff0a 	bl	80023d0 <HAL_GetTick>
 80035bc:	4602      	mov	r2, r0
 80035be:	693b      	ldr	r3, [r7, #16]
 80035c0:	1ad3      	subs	r3, r2, r3
 80035c2:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c6:	4293      	cmp	r3, r2
 80035c8:	d901      	bls.n	80035ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e0b5      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035ce:	4b3e      	ldr	r3, [pc, #248]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80035d2:	f003 0302 	and.w	r3, r3, #2
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d1ee      	bne.n	80035b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80035da:	7dfb      	ldrb	r3, [r7, #23]
 80035dc:	2b01      	cmp	r3, #1
 80035de:	d105      	bne.n	80035ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e0:	4b39      	ldr	r3, [pc, #228]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035e4:	4a38      	ldr	r2, [pc, #224]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035e6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ea:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	2b00      	cmp	r3, #0
 80035f2:	f000 80a1 	beq.w	8003738 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80035f6:	4b34      	ldr	r3, [pc, #208]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80035f8:	689b      	ldr	r3, [r3, #8]
 80035fa:	f003 030c 	and.w	r3, r3, #12
 80035fe:	2b08      	cmp	r3, #8
 8003600:	d05c      	beq.n	80036bc <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	699b      	ldr	r3, [r3, #24]
 8003606:	2b02      	cmp	r3, #2
 8003608:	d141      	bne.n	800368e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360a:	4b31      	ldr	r3, [pc, #196]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003610:	f7fe fede 	bl	80023d0 <HAL_GetTick>
 8003614:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003616:	e008      	b.n	800362a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003618:	f7fe feda 	bl	80023d0 <HAL_GetTick>
 800361c:	4602      	mov	r2, r0
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	1ad3      	subs	r3, r2, r3
 8003622:	2b02      	cmp	r3, #2
 8003624:	d901      	bls.n	800362a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003626:	2303      	movs	r3, #3
 8003628:	e087      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800362a:	4b27      	ldr	r3, [pc, #156]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003632:	2b00      	cmp	r3, #0
 8003634:	d1f0      	bne.n	8003618 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	69da      	ldr	r2, [r3, #28]
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	6a1b      	ldr	r3, [r3, #32]
 800363e:	431a      	orrs	r2, r3
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003644:	019b      	lsls	r3, r3, #6
 8003646:	431a      	orrs	r2, r3
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800364c:	085b      	lsrs	r3, r3, #1
 800364e:	3b01      	subs	r3, #1
 8003650:	041b      	lsls	r3, r3, #16
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003658:	061b      	lsls	r3, r3, #24
 800365a:	491b      	ldr	r1, [pc, #108]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 800365c:	4313      	orrs	r3, r2
 800365e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003660:	4b1b      	ldr	r3, [pc, #108]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003662:	2201      	movs	r2, #1
 8003664:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003666:	f7fe feb3 	bl	80023d0 <HAL_GetTick>
 800366a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800366c:	e008      	b.n	8003680 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800366e:	f7fe feaf 	bl	80023d0 <HAL_GetTick>
 8003672:	4602      	mov	r2, r0
 8003674:	693b      	ldr	r3, [r7, #16]
 8003676:	1ad3      	subs	r3, r2, r3
 8003678:	2b02      	cmp	r3, #2
 800367a:	d901      	bls.n	8003680 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800367c:	2303      	movs	r3, #3
 800367e:	e05c      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003680:	4b11      	ldr	r3, [pc, #68]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003688:	2b00      	cmp	r3, #0
 800368a:	d0f0      	beq.n	800366e <HAL_RCC_OscConfig+0x416>
 800368c:	e054      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800368e:	4b10      	ldr	r3, [pc, #64]	; (80036d0 <HAL_RCC_OscConfig+0x478>)
 8003690:	2200      	movs	r2, #0
 8003692:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003694:	f7fe fe9c 	bl	80023d0 <HAL_GetTick>
 8003698:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800369a:	e008      	b.n	80036ae <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800369c:	f7fe fe98 	bl	80023d0 <HAL_GetTick>
 80036a0:	4602      	mov	r2, r0
 80036a2:	693b      	ldr	r3, [r7, #16]
 80036a4:	1ad3      	subs	r3, r2, r3
 80036a6:	2b02      	cmp	r3, #2
 80036a8:	d901      	bls.n	80036ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80036aa:	2303      	movs	r3, #3
 80036ac:	e045      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80036ae:	4b06      	ldr	r3, [pc, #24]	; (80036c8 <HAL_RCC_OscConfig+0x470>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036b6:	2b00      	cmp	r3, #0
 80036b8:	d1f0      	bne.n	800369c <HAL_RCC_OscConfig+0x444>
 80036ba:	e03d      	b.n	8003738 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	699b      	ldr	r3, [r3, #24]
 80036c0:	2b01      	cmp	r3, #1
 80036c2:	d107      	bne.n	80036d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80036c4:	2301      	movs	r3, #1
 80036c6:	e038      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
 80036c8:	40023800 	.word	0x40023800
 80036cc:	40007000 	.word	0x40007000
 80036d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80036d4:	4b1b      	ldr	r3, [pc, #108]	; (8003744 <HAL_RCC_OscConfig+0x4ec>)
 80036d6:	685b      	ldr	r3, [r3, #4]
 80036d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	699b      	ldr	r3, [r3, #24]
 80036de:	2b01      	cmp	r3, #1
 80036e0:	d028      	beq.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80036ec:	429a      	cmp	r2, r3
 80036ee:	d121      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fa:	429a      	cmp	r2, r3
 80036fc:	d11a      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80036fe:	68fa      	ldr	r2, [r7, #12]
 8003700:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003704:	4013      	ands	r3, r2
 8003706:	687a      	ldr	r2, [r7, #4]
 8003708:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800370a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800370c:	4293      	cmp	r3, r2
 800370e:	d111      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800371a:	085b      	lsrs	r3, r3, #1
 800371c:	3b01      	subs	r3, #1
 800371e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003720:	429a      	cmp	r2, r3
 8003722:	d107      	bne.n	8003734 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003724:	68fb      	ldr	r3, [r7, #12]
 8003726:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800372e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003730:	429a      	cmp	r2, r3
 8003732:	d001      	beq.n	8003738 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003734:	2301      	movs	r3, #1
 8003736:	e000      	b.n	800373a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003738:	2300      	movs	r3, #0
}
 800373a:	4618      	mov	r0, r3
 800373c:	3718      	adds	r7, #24
 800373e:	46bd      	mov	sp, r7
 8003740:	bd80      	pop	{r7, pc}
 8003742:	bf00      	nop
 8003744:	40023800 	.word	0x40023800

08003748 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b084      	sub	sp, #16
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	2b00      	cmp	r3, #0
 8003756:	d101      	bne.n	800375c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003758:	2301      	movs	r3, #1
 800375a:	e0cc      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800375e:	681b      	ldr	r3, [r3, #0]
 8003760:	f003 0307 	and.w	r3, r3, #7
 8003764:	683a      	ldr	r2, [r7, #0]
 8003766:	429a      	cmp	r2, r3
 8003768:	d90c      	bls.n	8003784 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800376a:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800376c:	683a      	ldr	r2, [r7, #0]
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003772:	4b63      	ldr	r3, [pc, #396]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0307 	and.w	r3, r3, #7
 800377a:	683a      	ldr	r2, [r7, #0]
 800377c:	429a      	cmp	r2, r3
 800377e:	d001      	beq.n	8003784 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e0b8      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	f003 0302 	and.w	r3, r3, #2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d020      	beq.n	80037d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f003 0304 	and.w	r3, r3, #4
 8003798:	2b00      	cmp	r3, #0
 800379a:	d005      	beq.n	80037a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800379c:	4b59      	ldr	r3, [pc, #356]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	4a58      	ldr	r2, [pc, #352]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037a2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80037a6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	f003 0308 	and.w	r3, r3, #8
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	d005      	beq.n	80037c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80037b4:	4b53      	ldr	r3, [pc, #332]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037b6:	689b      	ldr	r3, [r3, #8]
 80037b8:	4a52      	ldr	r2, [pc, #328]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ba:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80037be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80037c0:	4b50      	ldr	r3, [pc, #320]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037c2:	689b      	ldr	r3, [r3, #8]
 80037c4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	689b      	ldr	r3, [r3, #8]
 80037cc:	494d      	ldr	r1, [pc, #308]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037ce:	4313      	orrs	r3, r2
 80037d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 0301 	and.w	r3, r3, #1
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d044      	beq.n	8003868 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	685b      	ldr	r3, [r3, #4]
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d107      	bne.n	80037f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037e6:	4b47      	ldr	r3, [pc, #284]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037ee:	2b00      	cmp	r3, #0
 80037f0:	d119      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037f2:	2301      	movs	r3, #1
 80037f4:	e07f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d003      	beq.n	8003806 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003802:	2b03      	cmp	r3, #3
 8003804:	d107      	bne.n	8003816 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003806:	4b3f      	ldr	r3, [pc, #252]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800380e:	2b00      	cmp	r3, #0
 8003810:	d109      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e06f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003816:	4b3b      	ldr	r3, [pc, #236]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	f003 0302 	and.w	r3, r3, #2
 800381e:	2b00      	cmp	r3, #0
 8003820:	d101      	bne.n	8003826 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e067      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003826:	4b37      	ldr	r3, [pc, #220]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f023 0203 	bic.w	r2, r3, #3
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	685b      	ldr	r3, [r3, #4]
 8003832:	4934      	ldr	r1, [pc, #208]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003834:	4313      	orrs	r3, r2
 8003836:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003838:	f7fe fdca 	bl	80023d0 <HAL_GetTick>
 800383c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800383e:	e00a      	b.n	8003856 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003840:	f7fe fdc6 	bl	80023d0 <HAL_GetTick>
 8003844:	4602      	mov	r2, r0
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	1ad3      	subs	r3, r2, r3
 800384a:	f241 3288 	movw	r2, #5000	; 0x1388
 800384e:	4293      	cmp	r3, r2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e04f      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003856:	4b2b      	ldr	r3, [pc, #172]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 8003858:	689b      	ldr	r3, [r3, #8]
 800385a:	f003 020c 	and.w	r2, r3, #12
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	429a      	cmp	r2, r3
 8003866:	d1eb      	bne.n	8003840 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003868:	4b25      	ldr	r3, [pc, #148]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f003 0307 	and.w	r3, r3, #7
 8003870:	683a      	ldr	r2, [r7, #0]
 8003872:	429a      	cmp	r2, r3
 8003874:	d20c      	bcs.n	8003890 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003878:	683a      	ldr	r2, [r7, #0]
 800387a:	b2d2      	uxtb	r2, r2
 800387c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800387e:	4b20      	ldr	r3, [pc, #128]	; (8003900 <HAL_RCC_ClockConfig+0x1b8>)
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f003 0307 	and.w	r3, r3, #7
 8003886:	683a      	ldr	r2, [r7, #0]
 8003888:	429a      	cmp	r2, r3
 800388a:	d001      	beq.n	8003890 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800388c:	2301      	movs	r3, #1
 800388e:	e032      	b.n	80038f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f003 0304 	and.w	r3, r3, #4
 8003898:	2b00      	cmp	r3, #0
 800389a:	d008      	beq.n	80038ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800389c:	4b19      	ldr	r3, [pc, #100]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	68db      	ldr	r3, [r3, #12]
 80038a8:	4916      	ldr	r1, [pc, #88]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0308 	and.w	r3, r3, #8
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d009      	beq.n	80038ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80038ba:	4b12      	ldr	r3, [pc, #72]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038bc:	689b      	ldr	r3, [r3, #8]
 80038be:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80038c2:	687b      	ldr	r3, [r7, #4]
 80038c4:	691b      	ldr	r3, [r3, #16]
 80038c6:	00db      	lsls	r3, r3, #3
 80038c8:	490e      	ldr	r1, [pc, #56]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038ca:	4313      	orrs	r3, r2
 80038cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80038ce:	f000 f821 	bl	8003914 <HAL_RCC_GetSysClockFreq>
 80038d2:	4602      	mov	r2, r0
 80038d4:	4b0b      	ldr	r3, [pc, #44]	; (8003904 <HAL_RCC_ClockConfig+0x1bc>)
 80038d6:	689b      	ldr	r3, [r3, #8]
 80038d8:	091b      	lsrs	r3, r3, #4
 80038da:	f003 030f 	and.w	r3, r3, #15
 80038de:	490a      	ldr	r1, [pc, #40]	; (8003908 <HAL_RCC_ClockConfig+0x1c0>)
 80038e0:	5ccb      	ldrb	r3, [r1, r3]
 80038e2:	fa22 f303 	lsr.w	r3, r2, r3
 80038e6:	4a09      	ldr	r2, [pc, #36]	; (800390c <HAL_RCC_ClockConfig+0x1c4>)
 80038e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80038ea:	4b09      	ldr	r3, [pc, #36]	; (8003910 <HAL_RCC_ClockConfig+0x1c8>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4618      	mov	r0, r3
 80038f0:	f7fe fd2a 	bl	8002348 <HAL_InitTick>

  return HAL_OK;
 80038f4:	2300      	movs	r3, #0
}
 80038f6:	4618      	mov	r0, r3
 80038f8:	3710      	adds	r7, #16
 80038fa:	46bd      	mov	sp, r7
 80038fc:	bd80      	pop	{r7, pc}
 80038fe:	bf00      	nop
 8003900:	40023c00 	.word	0x40023c00
 8003904:	40023800 	.word	0x40023800
 8003908:	080060c4 	.word	0x080060c4
 800390c:	20001440 	.word	0x20001440
 8003910:	20001444 	.word	0x20001444

08003914 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003914:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003918:	b094      	sub	sp, #80	; 0x50
 800391a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800391c:	2300      	movs	r3, #0
 800391e:	647b      	str	r3, [r7, #68]	; 0x44
 8003920:	2300      	movs	r3, #0
 8003922:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003924:	2300      	movs	r3, #0
 8003926:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8003928:	2300      	movs	r3, #0
 800392a:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800392c:	4b79      	ldr	r3, [pc, #484]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800392e:	689b      	ldr	r3, [r3, #8]
 8003930:	f003 030c 	and.w	r3, r3, #12
 8003934:	2b08      	cmp	r3, #8
 8003936:	d00d      	beq.n	8003954 <HAL_RCC_GetSysClockFreq+0x40>
 8003938:	2b08      	cmp	r3, #8
 800393a:	f200 80e1 	bhi.w	8003b00 <HAL_RCC_GetSysClockFreq+0x1ec>
 800393e:	2b00      	cmp	r3, #0
 8003940:	d002      	beq.n	8003948 <HAL_RCC_GetSysClockFreq+0x34>
 8003942:	2b04      	cmp	r3, #4
 8003944:	d003      	beq.n	800394e <HAL_RCC_GetSysClockFreq+0x3a>
 8003946:	e0db      	b.n	8003b00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003948:	4b73      	ldr	r3, [pc, #460]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x204>)
 800394a:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 800394c:	e0db      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800394e:	4b73      	ldr	r3, [pc, #460]	; (8003b1c <HAL_RCC_GetSysClockFreq+0x208>)
 8003950:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003952:	e0d8      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003954:	4b6f      	ldr	r3, [pc, #444]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003956:	685b      	ldr	r3, [r3, #4]
 8003958:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800395c:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800395e:	4b6d      	ldr	r3, [pc, #436]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003966:	2b00      	cmp	r3, #0
 8003968:	d063      	beq.n	8003a32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800396a:	4b6a      	ldr	r3, [pc, #424]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 800396c:	685b      	ldr	r3, [r3, #4]
 800396e:	099b      	lsrs	r3, r3, #6
 8003970:	2200      	movs	r2, #0
 8003972:	63bb      	str	r3, [r7, #56]	; 0x38
 8003974:	63fa      	str	r2, [r7, #60]	; 0x3c
 8003976:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003978:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800397c:	633b      	str	r3, [r7, #48]	; 0x30
 800397e:	2300      	movs	r3, #0
 8003980:	637b      	str	r3, [r7, #52]	; 0x34
 8003982:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8003986:	4622      	mov	r2, r4
 8003988:	462b      	mov	r3, r5
 800398a:	f04f 0000 	mov.w	r0, #0
 800398e:	f04f 0100 	mov.w	r1, #0
 8003992:	0159      	lsls	r1, r3, #5
 8003994:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003998:	0150      	lsls	r0, r2, #5
 800399a:	4602      	mov	r2, r0
 800399c:	460b      	mov	r3, r1
 800399e:	4621      	mov	r1, r4
 80039a0:	1a51      	subs	r1, r2, r1
 80039a2:	6139      	str	r1, [r7, #16]
 80039a4:	4629      	mov	r1, r5
 80039a6:	eb63 0301 	sbc.w	r3, r3, r1
 80039aa:	617b      	str	r3, [r7, #20]
 80039ac:	f04f 0200 	mov.w	r2, #0
 80039b0:	f04f 0300 	mov.w	r3, #0
 80039b4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80039b8:	4659      	mov	r1, fp
 80039ba:	018b      	lsls	r3, r1, #6
 80039bc:	4651      	mov	r1, sl
 80039be:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80039c2:	4651      	mov	r1, sl
 80039c4:	018a      	lsls	r2, r1, #6
 80039c6:	4651      	mov	r1, sl
 80039c8:	ebb2 0801 	subs.w	r8, r2, r1
 80039cc:	4659      	mov	r1, fp
 80039ce:	eb63 0901 	sbc.w	r9, r3, r1
 80039d2:	f04f 0200 	mov.w	r2, #0
 80039d6:	f04f 0300 	mov.w	r3, #0
 80039da:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80039de:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80039e2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80039e6:	4690      	mov	r8, r2
 80039e8:	4699      	mov	r9, r3
 80039ea:	4623      	mov	r3, r4
 80039ec:	eb18 0303 	adds.w	r3, r8, r3
 80039f0:	60bb      	str	r3, [r7, #8]
 80039f2:	462b      	mov	r3, r5
 80039f4:	eb49 0303 	adc.w	r3, r9, r3
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	f04f 0200 	mov.w	r2, #0
 80039fe:	f04f 0300 	mov.w	r3, #0
 8003a02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003a06:	4629      	mov	r1, r5
 8003a08:	024b      	lsls	r3, r1, #9
 8003a0a:	4621      	mov	r1, r4
 8003a0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003a10:	4621      	mov	r1, r4
 8003a12:	024a      	lsls	r2, r1, #9
 8003a14:	4610      	mov	r0, r2
 8003a16:	4619      	mov	r1, r3
 8003a18:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003a1a:	2200      	movs	r2, #0
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8003a1e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8003a20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8003a24:	f7fc fbde 	bl	80001e4 <__aeabi_uldivmod>
 8003a28:	4602      	mov	r2, r0
 8003a2a:	460b      	mov	r3, r1
 8003a2c:	4613      	mov	r3, r2
 8003a2e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8003a30:	e058      	b.n	8003ae4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003a32:	4b38      	ldr	r3, [pc, #224]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003a34:	685b      	ldr	r3, [r3, #4]
 8003a36:	099b      	lsrs	r3, r3, #6
 8003a38:	2200      	movs	r2, #0
 8003a3a:	4618      	mov	r0, r3
 8003a3c:	4611      	mov	r1, r2
 8003a3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003a42:	623b      	str	r3, [r7, #32]
 8003a44:	2300      	movs	r3, #0
 8003a46:	627b      	str	r3, [r7, #36]	; 0x24
 8003a48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003a4c:	4642      	mov	r2, r8
 8003a4e:	464b      	mov	r3, r9
 8003a50:	f04f 0000 	mov.w	r0, #0
 8003a54:	f04f 0100 	mov.w	r1, #0
 8003a58:	0159      	lsls	r1, r3, #5
 8003a5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003a5e:	0150      	lsls	r0, r2, #5
 8003a60:	4602      	mov	r2, r0
 8003a62:	460b      	mov	r3, r1
 8003a64:	4641      	mov	r1, r8
 8003a66:	ebb2 0a01 	subs.w	sl, r2, r1
 8003a6a:	4649      	mov	r1, r9
 8003a6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003a70:	f04f 0200 	mov.w	r2, #0
 8003a74:	f04f 0300 	mov.w	r3, #0
 8003a78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003a7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003a80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003a84:	ebb2 040a 	subs.w	r4, r2, sl
 8003a88:	eb63 050b 	sbc.w	r5, r3, fp
 8003a8c:	f04f 0200 	mov.w	r2, #0
 8003a90:	f04f 0300 	mov.w	r3, #0
 8003a94:	00eb      	lsls	r3, r5, #3
 8003a96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003a9a:	00e2      	lsls	r2, r4, #3
 8003a9c:	4614      	mov	r4, r2
 8003a9e:	461d      	mov	r5, r3
 8003aa0:	4643      	mov	r3, r8
 8003aa2:	18e3      	adds	r3, r4, r3
 8003aa4:	603b      	str	r3, [r7, #0]
 8003aa6:	464b      	mov	r3, r9
 8003aa8:	eb45 0303 	adc.w	r3, r5, r3
 8003aac:	607b      	str	r3, [r7, #4]
 8003aae:	f04f 0200 	mov.w	r2, #0
 8003ab2:	f04f 0300 	mov.w	r3, #0
 8003ab6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003aba:	4629      	mov	r1, r5
 8003abc:	028b      	lsls	r3, r1, #10
 8003abe:	4621      	mov	r1, r4
 8003ac0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003ac4:	4621      	mov	r1, r4
 8003ac6:	028a      	lsls	r2, r1, #10
 8003ac8:	4610      	mov	r0, r2
 8003aca:	4619      	mov	r1, r3
 8003acc:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8003ace:	2200      	movs	r2, #0
 8003ad0:	61bb      	str	r3, [r7, #24]
 8003ad2:	61fa      	str	r2, [r7, #28]
 8003ad4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003ad8:	f7fc fb84 	bl	80001e4 <__aeabi_uldivmod>
 8003adc:	4602      	mov	r2, r0
 8003ade:	460b      	mov	r3, r1
 8003ae0:	4613      	mov	r3, r2
 8003ae2:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003ae4:	4b0b      	ldr	r3, [pc, #44]	; (8003b14 <HAL_RCC_GetSysClockFreq+0x200>)
 8003ae6:	685b      	ldr	r3, [r3, #4]
 8003ae8:	0c1b      	lsrs	r3, r3, #16
 8003aea:	f003 0303 	and.w	r3, r3, #3
 8003aee:	3301      	adds	r3, #1
 8003af0:	005b      	lsls	r3, r3, #1
 8003af2:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003af4:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003af6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003af8:	fbb2 f3f3 	udiv	r3, r2, r3
 8003afc:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003afe:	e002      	b.n	8003b06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003b00:	4b05      	ldr	r3, [pc, #20]	; (8003b18 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b02:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003b04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003b06:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3750      	adds	r7, #80	; 0x50
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	00f42400 	.word	0x00f42400
 8003b1c:	007a1200 	.word	0x007a1200

08003b20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003b20:	b480      	push	{r7}
 8003b22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003b24:	4b03      	ldr	r3, [pc, #12]	; (8003b34 <HAL_RCC_GetHCLKFreq+0x14>)
 8003b26:	681b      	ldr	r3, [r3, #0]
}
 8003b28:	4618      	mov	r0, r3
 8003b2a:	46bd      	mov	sp, r7
 8003b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b30:	4770      	bx	lr
 8003b32:	bf00      	nop
 8003b34:	20001440 	.word	0x20001440

08003b38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003b3c:	f7ff fff0 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b40:	4602      	mov	r2, r0
 8003b42:	4b05      	ldr	r3, [pc, #20]	; (8003b58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003b44:	689b      	ldr	r3, [r3, #8]
 8003b46:	0a9b      	lsrs	r3, r3, #10
 8003b48:	f003 0307 	and.w	r3, r3, #7
 8003b4c:	4903      	ldr	r1, [pc, #12]	; (8003b5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8003b4e:	5ccb      	ldrb	r3, [r1, r3]
 8003b50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b54:	4618      	mov	r0, r3
 8003b56:	bd80      	pop	{r7, pc}
 8003b58:	40023800 	.word	0x40023800
 8003b5c:	080060d4 	.word	0x080060d4

08003b60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003b60:	b580      	push	{r7, lr}
 8003b62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8003b64:	f7ff ffdc 	bl	8003b20 <HAL_RCC_GetHCLKFreq>
 8003b68:	4602      	mov	r2, r0
 8003b6a:	4b05      	ldr	r3, [pc, #20]	; (8003b80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003b6c:	689b      	ldr	r3, [r3, #8]
 8003b6e:	0b5b      	lsrs	r3, r3, #13
 8003b70:	f003 0307 	and.w	r3, r3, #7
 8003b74:	4903      	ldr	r1, [pc, #12]	; (8003b84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003b76:	5ccb      	ldrb	r3, [r1, r3]
 8003b78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003b7c:	4618      	mov	r0, r3
 8003b7e:	bd80      	pop	{r7, pc}
 8003b80:	40023800 	.word	0x40023800
 8003b84:	080060d4 	.word	0x080060d4

08003b88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	b082      	sub	sp, #8
 8003b8c:	af00      	add	r7, sp, #0
 8003b8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	2b00      	cmp	r3, #0
 8003b94:	d101      	bne.n	8003b9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003b96:	2301      	movs	r3, #1
 8003b98:	e07b      	b.n	8003c92 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d108      	bne.n	8003bb4 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	685b      	ldr	r3, [r3, #4]
 8003ba6:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003baa:	d009      	beq.n	8003bc0 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	2200      	movs	r2, #0
 8003bb0:	61da      	str	r2, [r3, #28]
 8003bb2:	e005      	b.n	8003bc0 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	2200      	movs	r2, #0
 8003bb8:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	2200      	movs	r2, #0
 8003bbe:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003bcc:	b2db      	uxtb	r3, r3
 8003bce:	2b00      	cmp	r3, #0
 8003bd0:	d106      	bne.n	8003be0 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003bda:	6878      	ldr	r0, [r7, #4]
 8003bdc:	f7fe f914 	bl	8001e08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2202      	movs	r2, #2
 8003be4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	681a      	ldr	r2, [r3, #0]
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bf6:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	689b      	ldr	r3, [r3, #8]
 8003c04:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003c08:	431a      	orrs	r2, r3
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	68db      	ldr	r3, [r3, #12]
 8003c0e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003c12:	431a      	orrs	r2, r3
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	691b      	ldr	r3, [r3, #16]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	431a      	orrs	r2, r3
 8003c1e:	687b      	ldr	r3, [r7, #4]
 8003c20:	695b      	ldr	r3, [r3, #20]
 8003c22:	f003 0301 	and.w	r3, r3, #1
 8003c26:	431a      	orrs	r2, r3
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	699b      	ldr	r3, [r3, #24]
 8003c2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003c30:	431a      	orrs	r2, r3
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	69db      	ldr	r3, [r3, #28]
 8003c36:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003c3a:	431a      	orrs	r2, r3
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	6a1b      	ldr	r3, [r3, #32]
 8003c40:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003c44:	ea42 0103 	orr.w	r1, r2, r3
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003c4c:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	430a      	orrs	r2, r1
 8003c56:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	699b      	ldr	r3, [r3, #24]
 8003c5c:	0c1b      	lsrs	r3, r3, #16
 8003c5e:	f003 0104 	and.w	r1, r3, #4
 8003c62:	687b      	ldr	r3, [r7, #4]
 8003c64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c66:	f003 0210 	and.w	r2, r3, #16
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	430a      	orrs	r2, r1
 8003c70:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	69da      	ldr	r2, [r3, #28]
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003c80:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	2200      	movs	r2, #0
 8003c86:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c9a:	b580      	push	{r7, lr}
 8003c9c:	b088      	sub	sp, #32
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	60f8      	str	r0, [r7, #12]
 8003ca2:	60b9      	str	r1, [r7, #8]
 8003ca4:	603b      	str	r3, [r7, #0]
 8003ca6:	4613      	mov	r3, r2
 8003ca8:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003caa:	2300      	movs	r3, #0
 8003cac:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003cae:	68fb      	ldr	r3, [r7, #12]
 8003cb0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003cb4:	2b01      	cmp	r3, #1
 8003cb6:	d101      	bne.n	8003cbc <HAL_SPI_Transmit+0x22>
 8003cb8:	2302      	movs	r3, #2
 8003cba:	e126      	b.n	8003f0a <HAL_SPI_Transmit+0x270>
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003cc4:	f7fe fb84 	bl	80023d0 <HAL_GetTick>
 8003cc8:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003cca:	88fb      	ldrh	r3, [r7, #6]
 8003ccc:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003cd4:	b2db      	uxtb	r3, r3
 8003cd6:	2b01      	cmp	r3, #1
 8003cd8:	d002      	beq.n	8003ce0 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003cda:	2302      	movs	r3, #2
 8003cdc:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cde:	e10b      	b.n	8003ef8 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003ce0:	68bb      	ldr	r3, [r7, #8]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d002      	beq.n	8003cec <HAL_SPI_Transmit+0x52>
 8003ce6:	88fb      	ldrh	r3, [r7, #6]
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d102      	bne.n	8003cf2 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003cec:	2301      	movs	r3, #1
 8003cee:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003cf0:	e102      	b.n	8003ef8 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003cf2:	68fb      	ldr	r3, [r7, #12]
 8003cf4:	2203      	movs	r2, #3
 8003cf6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003d00:	68fb      	ldr	r3, [r7, #12]
 8003d02:	68ba      	ldr	r2, [r7, #8]
 8003d04:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	88fa      	ldrh	r2, [r7, #6]
 8003d0a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	88fa      	ldrh	r2, [r7, #6]
 8003d10:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	2200      	movs	r2, #0
 8003d16:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	2200      	movs	r2, #0
 8003d1c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2200      	movs	r2, #0
 8003d22:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	2200      	movs	r2, #0
 8003d28:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	2200      	movs	r2, #0
 8003d2e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	689b      	ldr	r3, [r3, #8]
 8003d34:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003d38:	d10f      	bne.n	8003d5a <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	681a      	ldr	r2, [r3, #0]
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	681b      	ldr	r3, [r3, #0]
 8003d44:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003d48:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	681b      	ldr	r3, [r3, #0]
 8003d4e:	681a      	ldr	r2, [r3, #0]
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003d58:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003d5a:	68fb      	ldr	r3, [r7, #12]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003d64:	2b40      	cmp	r3, #64	; 0x40
 8003d66:	d007      	beq.n	8003d78 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	681a      	ldr	r2, [r3, #0]
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	681b      	ldr	r3, [r3, #0]
 8003d72:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003d76:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003d78:	68fb      	ldr	r3, [r7, #12]
 8003d7a:	68db      	ldr	r3, [r3, #12]
 8003d7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003d80:	d14b      	bne.n	8003e1a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	685b      	ldr	r3, [r3, #4]
 8003d86:	2b00      	cmp	r3, #0
 8003d88:	d002      	beq.n	8003d90 <HAL_SPI_Transmit+0xf6>
 8003d8a:	8afb      	ldrh	r3, [r7, #22]
 8003d8c:	2b01      	cmp	r3, #1
 8003d8e:	d13e      	bne.n	8003e0e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d94:	881a      	ldrh	r2, [r3, #0]
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	68fb      	ldr	r3, [r7, #12]
 8003da4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	3b01      	subs	r3, #1
 8003dae:	b29a      	uxth	r2, r3
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003db4:	e02b      	b.n	8003e0e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	689b      	ldr	r3, [r3, #8]
 8003dbc:	f003 0302 	and.w	r3, r3, #2
 8003dc0:	2b02      	cmp	r3, #2
 8003dc2:	d112      	bne.n	8003dea <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dc8:	881a      	ldrh	r2, [r3, #0]
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003dd4:	1c9a      	adds	r2, r3, #2
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003dde:	b29b      	uxth	r3, r3
 8003de0:	3b01      	subs	r3, #1
 8003de2:	b29a      	uxth	r2, r3
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	86da      	strh	r2, [r3, #54]	; 0x36
 8003de8:	e011      	b.n	8003e0e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003dea:	f7fe faf1 	bl	80023d0 <HAL_GetTick>
 8003dee:	4602      	mov	r2, r0
 8003df0:	69bb      	ldr	r3, [r7, #24]
 8003df2:	1ad3      	subs	r3, r2, r3
 8003df4:	683a      	ldr	r2, [r7, #0]
 8003df6:	429a      	cmp	r2, r3
 8003df8:	d803      	bhi.n	8003e02 <HAL_SPI_Transmit+0x168>
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e00:	d102      	bne.n	8003e08 <HAL_SPI_Transmit+0x16e>
 8003e02:	683b      	ldr	r3, [r7, #0]
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d102      	bne.n	8003e0e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003e08:	2303      	movs	r3, #3
 8003e0a:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003e0c:	e074      	b.n	8003ef8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e12:	b29b      	uxth	r3, r3
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d1ce      	bne.n	8003db6 <HAL_SPI_Transmit+0x11c>
 8003e18:	e04c      	b.n	8003eb4 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	685b      	ldr	r3, [r3, #4]
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d002      	beq.n	8003e28 <HAL_SPI_Transmit+0x18e>
 8003e22:	8afb      	ldrh	r3, [r7, #22]
 8003e24:	2b01      	cmp	r3, #1
 8003e26:	d140      	bne.n	8003eaa <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	330c      	adds	r3, #12
 8003e32:	7812      	ldrb	r2, [r2, #0]
 8003e34:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e3a:	1c5a      	adds	r2, r3, #1
 8003e3c:	68fb      	ldr	r3, [r7, #12]
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e44:	b29b      	uxth	r3, r3
 8003e46:	3b01      	subs	r3, #1
 8003e48:	b29a      	uxth	r2, r3
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003e4e:	e02c      	b.n	8003eaa <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	689b      	ldr	r3, [r3, #8]
 8003e56:	f003 0302 	and.w	r3, r3, #2
 8003e5a:	2b02      	cmp	r3, #2
 8003e5c:	d113      	bne.n	8003e86 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	330c      	adds	r3, #12
 8003e68:	7812      	ldrb	r2, [r2, #0]
 8003e6a:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e70:	1c5a      	adds	r2, r3, #1
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	86da      	strh	r2, [r3, #54]	; 0x36
 8003e84:	e011      	b.n	8003eaa <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003e86:	f7fe faa3 	bl	80023d0 <HAL_GetTick>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	69bb      	ldr	r3, [r7, #24]
 8003e8e:	1ad3      	subs	r3, r2, r3
 8003e90:	683a      	ldr	r2, [r7, #0]
 8003e92:	429a      	cmp	r2, r3
 8003e94:	d803      	bhi.n	8003e9e <HAL_SPI_Transmit+0x204>
 8003e96:	683b      	ldr	r3, [r7, #0]
 8003e98:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e9c:	d102      	bne.n	8003ea4 <HAL_SPI_Transmit+0x20a>
 8003e9e:	683b      	ldr	r3, [r7, #0]
 8003ea0:	2b00      	cmp	r3, #0
 8003ea2:	d102      	bne.n	8003eaa <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003ea4:	2303      	movs	r3, #3
 8003ea6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003ea8:	e026      	b.n	8003ef8 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003eae:	b29b      	uxth	r3, r3
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d1cd      	bne.n	8003e50 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003eb4:	69ba      	ldr	r2, [r7, #24]
 8003eb6:	6839      	ldr	r1, [r7, #0]
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f000 f8b3 	bl	8004024 <SPI_EndRxTxTransaction>
 8003ebe:	4603      	mov	r3, r0
 8003ec0:	2b00      	cmp	r3, #0
 8003ec2:	d002      	beq.n	8003eca <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	2220      	movs	r2, #32
 8003ec8:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	689b      	ldr	r3, [r3, #8]
 8003ece:	2b00      	cmp	r3, #0
 8003ed0:	d10a      	bne.n	8003ee8 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003ed2:	2300      	movs	r3, #0
 8003ed4:	613b      	str	r3, [r7, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	68db      	ldr	r3, [r3, #12]
 8003edc:	613b      	str	r3, [r7, #16]
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	613b      	str	r3, [r7, #16]
 8003ee6:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003eec:	2b00      	cmp	r3, #0
 8003eee:	d002      	beq.n	8003ef6 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003ef0:	2301      	movs	r3, #1
 8003ef2:	77fb      	strb	r3, [r7, #31]
 8003ef4:	e000      	b.n	8003ef8 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003ef6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2201      	movs	r2, #1
 8003efc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	2200      	movs	r2, #0
 8003f04:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003f08:	7ffb      	ldrb	r3, [r7, #31]
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3720      	adds	r7, #32
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	bd80      	pop	{r7, pc}
	...

08003f14 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b088      	sub	sp, #32
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	60f8      	str	r0, [r7, #12]
 8003f1c:	60b9      	str	r1, [r7, #8]
 8003f1e:	603b      	str	r3, [r7, #0]
 8003f20:	4613      	mov	r3, r2
 8003f22:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003f24:	f7fe fa54 	bl	80023d0 <HAL_GetTick>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003f2c:	1a9b      	subs	r3, r3, r2
 8003f2e:	683a      	ldr	r2, [r7, #0]
 8003f30:	4413      	add	r3, r2
 8003f32:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003f34:	f7fe fa4c 	bl	80023d0 <HAL_GetTick>
 8003f38:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003f3a:	4b39      	ldr	r3, [pc, #228]	; (8004020 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	015b      	lsls	r3, r3, #5
 8003f40:	0d1b      	lsrs	r3, r3, #20
 8003f42:	69fa      	ldr	r2, [r7, #28]
 8003f44:	fb02 f303 	mul.w	r3, r2, r3
 8003f48:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003f4a:	e054      	b.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f52:	d050      	beq.n	8003ff6 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003f54:	f7fe fa3c 	bl	80023d0 <HAL_GetTick>
 8003f58:	4602      	mov	r2, r0
 8003f5a:	69bb      	ldr	r3, [r7, #24]
 8003f5c:	1ad3      	subs	r3, r2, r3
 8003f5e:	69fa      	ldr	r2, [r7, #28]
 8003f60:	429a      	cmp	r2, r3
 8003f62:	d902      	bls.n	8003f6a <SPI_WaitFlagStateUntilTimeout+0x56>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	2b00      	cmp	r3, #0
 8003f68:	d13d      	bne.n	8003fe6 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	681b      	ldr	r3, [r3, #0]
 8003f6e:	685a      	ldr	r2, [r3, #4]
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8003f78:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	685b      	ldr	r3, [r3, #4]
 8003f7e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003f82:	d111      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	689b      	ldr	r3, [r3, #8]
 8003f88:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003f8c:	d004      	beq.n	8003f98 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	689b      	ldr	r3, [r3, #8]
 8003f92:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f96:	d107      	bne.n	8003fa8 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	681a      	ldr	r2, [r3, #0]
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	681b      	ldr	r3, [r3, #0]
 8003fa2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003fa6:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fac:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fb0:	d10f      	bne.n	8003fd2 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	681a      	ldr	r2, [r3, #0]
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003fc0:	601a      	str	r2, [r3, #0]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	681a      	ldr	r2, [r3, #0]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003fd0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003fe2:	2303      	movs	r3, #3
 8003fe4:	e017      	b.n	8004016 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003fe6:	697b      	ldr	r3, [r7, #20]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d101      	bne.n	8003ff0 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8003fec:	2300      	movs	r3, #0
 8003fee:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003ff0:	697b      	ldr	r3, [r7, #20]
 8003ff2:	3b01      	subs	r3, #1
 8003ff4:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	689a      	ldr	r2, [r3, #8]
 8003ffc:	68bb      	ldr	r3, [r7, #8]
 8003ffe:	4013      	ands	r3, r2
 8004000:	68ba      	ldr	r2, [r7, #8]
 8004002:	429a      	cmp	r2, r3
 8004004:	bf0c      	ite	eq
 8004006:	2301      	moveq	r3, #1
 8004008:	2300      	movne	r3, #0
 800400a:	b2db      	uxtb	r3, r3
 800400c:	461a      	mov	r2, r3
 800400e:	79fb      	ldrb	r3, [r7, #7]
 8004010:	429a      	cmp	r2, r3
 8004012:	d19b      	bne.n	8003f4c <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004014:	2300      	movs	r3, #0
}
 8004016:	4618      	mov	r0, r3
 8004018:	3720      	adds	r7, #32
 800401a:	46bd      	mov	sp, r7
 800401c:	bd80      	pop	{r7, pc}
 800401e:	bf00      	nop
 8004020:	20001440 	.word	0x20001440

08004024 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004024:	b580      	push	{r7, lr}
 8004026:	b088      	sub	sp, #32
 8004028:	af02      	add	r7, sp, #8
 800402a:	60f8      	str	r0, [r7, #12]
 800402c:	60b9      	str	r1, [r7, #8]
 800402e:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004030:	4b1b      	ldr	r3, [pc, #108]	; (80040a0 <SPI_EndRxTxTransaction+0x7c>)
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	4a1b      	ldr	r2, [pc, #108]	; (80040a4 <SPI_EndRxTxTransaction+0x80>)
 8004036:	fba2 2303 	umull	r2, r3, r2, r3
 800403a:	0d5b      	lsrs	r3, r3, #21
 800403c:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004040:	fb02 f303 	mul.w	r3, r2, r3
 8004044:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004046:	68fb      	ldr	r3, [r7, #12]
 8004048:	685b      	ldr	r3, [r3, #4]
 800404a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800404e:	d112      	bne.n	8004076 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	9300      	str	r3, [sp, #0]
 8004054:	68bb      	ldr	r3, [r7, #8]
 8004056:	2200      	movs	r2, #0
 8004058:	2180      	movs	r1, #128	; 0x80
 800405a:	68f8      	ldr	r0, [r7, #12]
 800405c:	f7ff ff5a 	bl	8003f14 <SPI_WaitFlagStateUntilTimeout>
 8004060:	4603      	mov	r3, r0
 8004062:	2b00      	cmp	r3, #0
 8004064:	d016      	beq.n	8004094 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800406a:	f043 0220 	orr.w	r2, r3, #32
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e00f      	b.n	8004096 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004076:	697b      	ldr	r3, [r7, #20]
 8004078:	2b00      	cmp	r3, #0
 800407a:	d00a      	beq.n	8004092 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800407c:	697b      	ldr	r3, [r7, #20]
 800407e:	3b01      	subs	r3, #1
 8004080:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	689b      	ldr	r3, [r3, #8]
 8004088:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800408c:	2b80      	cmp	r3, #128	; 0x80
 800408e:	d0f2      	beq.n	8004076 <SPI_EndRxTxTransaction+0x52>
 8004090:	e000      	b.n	8004094 <SPI_EndRxTxTransaction+0x70>
        break;
 8004092:	bf00      	nop
  }

  return HAL_OK;
 8004094:	2300      	movs	r3, #0
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	20001440 	.word	0x20001440
 80040a4:	165e9f81 	.word	0x165e9f81

080040a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
 80040ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	2b00      	cmp	r3, #0
 80040b4:	d101      	bne.n	80040ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	e041      	b.n	800413e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c0:	b2db      	uxtb	r3, r3
 80040c2:	2b00      	cmp	r3, #0
 80040c4:	d106      	bne.n	80040d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2200      	movs	r2, #0
 80040ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f7fd ff02 	bl	8001ed8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	2202      	movs	r2, #2
 80040d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	3304      	adds	r3, #4
 80040e4:	4619      	mov	r1, r3
 80040e6:	4610      	mov	r0, r2
 80040e8:	f000 ff6c 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	2201      	movs	r2, #1
 80040f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	2201      	movs	r2, #1
 80040f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	2201      	movs	r2, #1
 8004100:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004114:	687b      	ldr	r3, [r7, #4]
 8004116:	2201      	movs	r2, #1
 8004118:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2201      	movs	r2, #1
 8004120:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	2201      	movs	r2, #1
 8004128:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	2201      	movs	r2, #1
 8004130:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2201      	movs	r2, #1
 8004138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800413c:	2300      	movs	r3, #0
}
 800413e:	4618      	mov	r0, r3
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
	...

08004148 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004148:	b480      	push	{r7}
 800414a:	b085      	sub	sp, #20
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004156:	b2db      	uxtb	r3, r3
 8004158:	2b01      	cmp	r3, #1
 800415a:	d001      	beq.n	8004160 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800415c:	2301      	movs	r3, #1
 800415e:	e044      	b.n	80041ea <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2202      	movs	r2, #2
 8004164:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f042 0201 	orr.w	r2, r2, #1
 8004176:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	4a1e      	ldr	r2, [pc, #120]	; (80041f8 <HAL_TIM_Base_Start_IT+0xb0>)
 800417e:	4293      	cmp	r3, r2
 8004180:	d018      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x6c>
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800418a:	d013      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x6c>
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4a1a      	ldr	r2, [pc, #104]	; (80041fc <HAL_TIM_Base_Start_IT+0xb4>)
 8004192:	4293      	cmp	r3, r2
 8004194:	d00e      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x6c>
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	4a19      	ldr	r2, [pc, #100]	; (8004200 <HAL_TIM_Base_Start_IT+0xb8>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d009      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x6c>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	4a17      	ldr	r2, [pc, #92]	; (8004204 <HAL_TIM_Base_Start_IT+0xbc>)
 80041a6:	4293      	cmp	r3, r2
 80041a8:	d004      	beq.n	80041b4 <HAL_TIM_Base_Start_IT+0x6c>
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	4a16      	ldr	r2, [pc, #88]	; (8004208 <HAL_TIM_Base_Start_IT+0xc0>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d111      	bne.n	80041d8 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	689b      	ldr	r3, [r3, #8]
 80041ba:	f003 0307 	and.w	r3, r3, #7
 80041be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	2b06      	cmp	r3, #6
 80041c4:	d010      	beq.n	80041e8 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 80041c6:	687b      	ldr	r3, [r7, #4]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	681a      	ldr	r2, [r3, #0]
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	f042 0201 	orr.w	r2, r2, #1
 80041d4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80041d6:	e007      	b.n	80041e8 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80041e8:	2300      	movs	r3, #0
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	3714      	adds	r7, #20
 80041ee:	46bd      	mov	sp, r7
 80041f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f4:	4770      	bx	lr
 80041f6:	bf00      	nop
 80041f8:	40010000 	.word	0x40010000
 80041fc:	40000400 	.word	0x40000400
 8004200:	40000800 	.word	0x40000800
 8004204:	40000c00 	.word	0x40000c00
 8004208:	40014000 	.word	0x40014000

0800420c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800420c:	b580      	push	{r7, lr}
 800420e:	b082      	sub	sp, #8
 8004210:	af00      	add	r7, sp, #0
 8004212:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	2b00      	cmp	r3, #0
 8004218:	d101      	bne.n	800421e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e041      	b.n	80042a2 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004224:	b2db      	uxtb	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d106      	bne.n	8004238 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	2200      	movs	r2, #0
 800422e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004232:	6878      	ldr	r0, [r7, #4]
 8004234:	f7fd fee8 	bl	8002008 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	2202      	movs	r2, #2
 800423c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	3304      	adds	r3, #4
 8004248:	4619      	mov	r1, r3
 800424a:	4610      	mov	r0, r2
 800424c:	f000 feba 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	2201      	movs	r2, #1
 8004254:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	2201      	movs	r2, #1
 800425c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	2201      	movs	r2, #1
 8004264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	2201      	movs	r2, #1
 800426c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	2201      	movs	r2, #1
 8004274:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	2201      	movs	r2, #1
 800427c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	2201      	movs	r2, #1
 8004284:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	2201      	movs	r2, #1
 800428c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	2201      	movs	r2, #1
 8004294:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2201      	movs	r2, #1
 800429c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80042a0:	2300      	movs	r3, #0
}
 80042a2:	4618      	mov	r0, r3
 80042a4:	3708      	adds	r7, #8
 80042a6:	46bd      	mov	sp, r7
 80042a8:	bd80      	pop	{r7, pc}
	...

080042ac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80042ac:	b580      	push	{r7, lr}
 80042ae:	b084      	sub	sp, #16
 80042b0:	af00      	add	r7, sp, #0
 80042b2:	6078      	str	r0, [r7, #4]
 80042b4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80042b6:	683b      	ldr	r3, [r7, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d109      	bne.n	80042d0 <HAL_TIM_PWM_Start+0x24>
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80042c2:	b2db      	uxtb	r3, r3
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	bf14      	ite	ne
 80042c8:	2301      	movne	r3, #1
 80042ca:	2300      	moveq	r3, #0
 80042cc:	b2db      	uxtb	r3, r3
 80042ce:	e022      	b.n	8004316 <HAL_TIM_PWM_Start+0x6a>
 80042d0:	683b      	ldr	r3, [r7, #0]
 80042d2:	2b04      	cmp	r3, #4
 80042d4:	d109      	bne.n	80042ea <HAL_TIM_PWM_Start+0x3e>
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80042dc:	b2db      	uxtb	r3, r3
 80042de:	2b01      	cmp	r3, #1
 80042e0:	bf14      	ite	ne
 80042e2:	2301      	movne	r3, #1
 80042e4:	2300      	moveq	r3, #0
 80042e6:	b2db      	uxtb	r3, r3
 80042e8:	e015      	b.n	8004316 <HAL_TIM_PWM_Start+0x6a>
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	2b08      	cmp	r3, #8
 80042ee:	d109      	bne.n	8004304 <HAL_TIM_PWM_Start+0x58>
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80042f6:	b2db      	uxtb	r3, r3
 80042f8:	2b01      	cmp	r3, #1
 80042fa:	bf14      	ite	ne
 80042fc:	2301      	movne	r3, #1
 80042fe:	2300      	moveq	r3, #0
 8004300:	b2db      	uxtb	r3, r3
 8004302:	e008      	b.n	8004316 <HAL_TIM_PWM_Start+0x6a>
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800430a:	b2db      	uxtb	r3, r3
 800430c:	2b01      	cmp	r3, #1
 800430e:	bf14      	ite	ne
 8004310:	2301      	movne	r3, #1
 8004312:	2300      	moveq	r3, #0
 8004314:	b2db      	uxtb	r3, r3
 8004316:	2b00      	cmp	r3, #0
 8004318:	d001      	beq.n	800431e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 800431a:	2301      	movs	r3, #1
 800431c:	e068      	b.n	80043f0 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	2b00      	cmp	r3, #0
 8004322:	d104      	bne.n	800432e <HAL_TIM_PWM_Start+0x82>
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	2202      	movs	r2, #2
 8004328:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800432c:	e013      	b.n	8004356 <HAL_TIM_PWM_Start+0xaa>
 800432e:	683b      	ldr	r3, [r7, #0]
 8004330:	2b04      	cmp	r3, #4
 8004332:	d104      	bne.n	800433e <HAL_TIM_PWM_Start+0x92>
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2202      	movs	r2, #2
 8004338:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800433c:	e00b      	b.n	8004356 <HAL_TIM_PWM_Start+0xaa>
 800433e:	683b      	ldr	r3, [r7, #0]
 8004340:	2b08      	cmp	r3, #8
 8004342:	d104      	bne.n	800434e <HAL_TIM_PWM_Start+0xa2>
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	2202      	movs	r2, #2
 8004348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800434c:	e003      	b.n	8004356 <HAL_TIM_PWM_Start+0xaa>
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	2202      	movs	r2, #2
 8004352:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	2201      	movs	r2, #1
 800435c:	6839      	ldr	r1, [r7, #0]
 800435e:	4618      	mov	r0, r3
 8004360:	f001 f9f4 	bl	800574c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	4a23      	ldr	r2, [pc, #140]	; (80043f8 <HAL_TIM_PWM_Start+0x14c>)
 800436a:	4293      	cmp	r3, r2
 800436c:	d107      	bne.n	800437e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004374:	687b      	ldr	r3, [r7, #4]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800437c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	4a1d      	ldr	r2, [pc, #116]	; (80043f8 <HAL_TIM_PWM_Start+0x14c>)
 8004384:	4293      	cmp	r3, r2
 8004386:	d018      	beq.n	80043ba <HAL_TIM_PWM_Start+0x10e>
 8004388:	687b      	ldr	r3, [r7, #4]
 800438a:	681b      	ldr	r3, [r3, #0]
 800438c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004390:	d013      	beq.n	80043ba <HAL_TIM_PWM_Start+0x10e>
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	4a19      	ldr	r2, [pc, #100]	; (80043fc <HAL_TIM_PWM_Start+0x150>)
 8004398:	4293      	cmp	r3, r2
 800439a:	d00e      	beq.n	80043ba <HAL_TIM_PWM_Start+0x10e>
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	4a17      	ldr	r2, [pc, #92]	; (8004400 <HAL_TIM_PWM_Start+0x154>)
 80043a2:	4293      	cmp	r3, r2
 80043a4:	d009      	beq.n	80043ba <HAL_TIM_PWM_Start+0x10e>
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	4a16      	ldr	r2, [pc, #88]	; (8004404 <HAL_TIM_PWM_Start+0x158>)
 80043ac:	4293      	cmp	r3, r2
 80043ae:	d004      	beq.n	80043ba <HAL_TIM_PWM_Start+0x10e>
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a14      	ldr	r2, [pc, #80]	; (8004408 <HAL_TIM_PWM_Start+0x15c>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d111      	bne.n	80043de <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689b      	ldr	r3, [r3, #8]
 80043c0:	f003 0307 	and.w	r3, r3, #7
 80043c4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	2b06      	cmp	r3, #6
 80043ca:	d010      	beq.n	80043ee <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	681a      	ldr	r2, [r3, #0]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f042 0201 	orr.w	r2, r2, #1
 80043da:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80043dc:	e007      	b.n	80043ee <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f042 0201 	orr.w	r2, r2, #1
 80043ec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80043ee:	2300      	movs	r3, #0
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	3710      	adds	r7, #16
 80043f4:	46bd      	mov	sp, r7
 80043f6:	bd80      	pop	{r7, pc}
 80043f8:	40010000 	.word	0x40010000
 80043fc:	40000400 	.word	0x40000400
 8004400:	40000800 	.word	0x40000800
 8004404:	40000c00 	.word	0x40000c00
 8004408:	40014000 	.word	0x40014000

0800440c <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800440c:	b580      	push	{r7, lr}
 800440e:	b082      	sub	sp, #8
 8004410:	af00      	add	r7, sp, #0
 8004412:	6078      	str	r0, [r7, #4]
 8004414:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	2200      	movs	r2, #0
 800441c:	6839      	ldr	r1, [r7, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f001 f994 	bl	800574c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	4a29      	ldr	r2, [pc, #164]	; (80044d0 <HAL_TIM_PWM_Stop+0xc4>)
 800442a:	4293      	cmp	r3, r2
 800442c:	d117      	bne.n	800445e <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	6a1a      	ldr	r2, [r3, #32]
 8004434:	f241 1311 	movw	r3, #4369	; 0x1111
 8004438:	4013      	ands	r3, r2
 800443a:	2b00      	cmp	r3, #0
 800443c:	d10f      	bne.n	800445e <HAL_TIM_PWM_Stop+0x52>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	6a1a      	ldr	r2, [r3, #32]
 8004444:	f240 4344 	movw	r3, #1092	; 0x444
 8004448:	4013      	ands	r3, r2
 800444a:	2b00      	cmp	r3, #0
 800444c:	d107      	bne.n	800445e <HAL_TIM_PWM_Stop+0x52>
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800445c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800445e:	687b      	ldr	r3, [r7, #4]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	6a1a      	ldr	r2, [r3, #32]
 8004464:	f241 1311 	movw	r3, #4369	; 0x1111
 8004468:	4013      	ands	r3, r2
 800446a:	2b00      	cmp	r3, #0
 800446c:	d10f      	bne.n	800448e <HAL_TIM_PWM_Stop+0x82>
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	6a1a      	ldr	r2, [r3, #32]
 8004474:	f240 4344 	movw	r3, #1092	; 0x444
 8004478:	4013      	ands	r3, r2
 800447a:	2b00      	cmp	r3, #0
 800447c:	d107      	bne.n	800448e <HAL_TIM_PWM_Stop+0x82>
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f022 0201 	bic.w	r2, r2, #1
 800448c:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800448e:	683b      	ldr	r3, [r7, #0]
 8004490:	2b00      	cmp	r3, #0
 8004492:	d104      	bne.n	800449e <HAL_TIM_PWM_Stop+0x92>
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2201      	movs	r2, #1
 8004498:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800449c:	e013      	b.n	80044c6 <HAL_TIM_PWM_Stop+0xba>
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	2b04      	cmp	r3, #4
 80044a2:	d104      	bne.n	80044ae <HAL_TIM_PWM_Stop+0xa2>
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	2201      	movs	r2, #1
 80044a8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80044ac:	e00b      	b.n	80044c6 <HAL_TIM_PWM_Stop+0xba>
 80044ae:	683b      	ldr	r3, [r7, #0]
 80044b0:	2b08      	cmp	r3, #8
 80044b2:	d104      	bne.n	80044be <HAL_TIM_PWM_Stop+0xb2>
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	2201      	movs	r2, #1
 80044b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80044bc:	e003      	b.n	80044c6 <HAL_TIM_PWM_Stop+0xba>
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	2201      	movs	r2, #1
 80044c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 80044c6:	2300      	movs	r3, #0
}
 80044c8:	4618      	mov	r0, r3
 80044ca:	3708      	adds	r7, #8
 80044cc:	46bd      	mov	sp, r7
 80044ce:	bd80      	pop	{r7, pc}
 80044d0:	40010000 	.word	0x40010000

080044d4 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	b082      	sub	sp, #8
 80044d8:	af00      	add	r7, sp, #0
 80044da:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d101      	bne.n	80044e6 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80044e2:	2301      	movs	r3, #1
 80044e4:	e041      	b.n	800456a <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80044ec:	b2db      	uxtb	r3, r3
 80044ee:	2b00      	cmp	r3, #0
 80044f0:	d106      	bne.n	8004500 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2200      	movs	r2, #0
 80044f6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80044fa:	6878      	ldr	r0, [r7, #4]
 80044fc:	f000 f839 	bl	8004572 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	2202      	movs	r2, #2
 8004504:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681a      	ldr	r2, [r3, #0]
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	3304      	adds	r3, #4
 8004510:	4619      	mov	r1, r3
 8004512:	4610      	mov	r0, r2
 8004514:	f000 fd56 	bl	8004fc4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	2201      	movs	r2, #1
 800451c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	2201      	movs	r2, #1
 8004524:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	2201      	movs	r2, #1
 800452c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	2201      	movs	r2, #1
 8004534:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	2201      	movs	r2, #1
 8004544:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2201      	movs	r2, #1
 800454c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	2201      	movs	r2, #1
 800455c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	2201      	movs	r2, #1
 8004564:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004568:	2300      	movs	r3, #0
}
 800456a:	4618      	mov	r0, r3
 800456c:	3708      	adds	r7, #8
 800456e:	46bd      	mov	sp, r7
 8004570:	bd80      	pop	{r7, pc}

08004572 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004572:	b480      	push	{r7}
 8004574:	b083      	sub	sp, #12
 8004576:	af00      	add	r7, sp, #0
 8004578:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
	...

08004588 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004588:	b580      	push	{r7, lr}
 800458a:	b084      	sub	sp, #16
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
 8004590:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004592:	2300      	movs	r3, #0
 8004594:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004596:	683b      	ldr	r3, [r7, #0]
 8004598:	2b00      	cmp	r3, #0
 800459a:	d104      	bne.n	80045a6 <HAL_TIM_IC_Start_IT+0x1e>
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	e013      	b.n	80045ce <HAL_TIM_IC_Start_IT+0x46>
 80045a6:	683b      	ldr	r3, [r7, #0]
 80045a8:	2b04      	cmp	r3, #4
 80045aa:	d104      	bne.n	80045b6 <HAL_TIM_IC_Start_IT+0x2e>
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80045b2:	b2db      	uxtb	r3, r3
 80045b4:	e00b      	b.n	80045ce <HAL_TIM_IC_Start_IT+0x46>
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	2b08      	cmp	r3, #8
 80045ba:	d104      	bne.n	80045c6 <HAL_TIM_IC_Start_IT+0x3e>
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80045c2:	b2db      	uxtb	r3, r3
 80045c4:	e003      	b.n	80045ce <HAL_TIM_IC_Start_IT+0x46>
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80045cc:	b2db      	uxtb	r3, r3
 80045ce:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d104      	bne.n	80045e0 <HAL_TIM_IC_Start_IT+0x58>
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80045dc:	b2db      	uxtb	r3, r3
 80045de:	e013      	b.n	8004608 <HAL_TIM_IC_Start_IT+0x80>
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	2b04      	cmp	r3, #4
 80045e4:	d104      	bne.n	80045f0 <HAL_TIM_IC_Start_IT+0x68>
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80045ec:	b2db      	uxtb	r3, r3
 80045ee:	e00b      	b.n	8004608 <HAL_TIM_IC_Start_IT+0x80>
 80045f0:	683b      	ldr	r3, [r7, #0]
 80045f2:	2b08      	cmp	r3, #8
 80045f4:	d104      	bne.n	8004600 <HAL_TIM_IC_Start_IT+0x78>
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80045fc:	b2db      	uxtb	r3, r3
 80045fe:	e003      	b.n	8004608 <HAL_TIM_IC_Start_IT+0x80>
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004606:	b2db      	uxtb	r3, r3
 8004608:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 800460a:	7bbb      	ldrb	r3, [r7, #14]
 800460c:	2b01      	cmp	r3, #1
 800460e:	d102      	bne.n	8004616 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004610:	7b7b      	ldrb	r3, [r7, #13]
 8004612:	2b01      	cmp	r3, #1
 8004614:	d001      	beq.n	800461a <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004616:	2301      	movs	r3, #1
 8004618:	e0c2      	b.n	80047a0 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	2b00      	cmp	r3, #0
 800461e:	d104      	bne.n	800462a <HAL_TIM_IC_Start_IT+0xa2>
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	2202      	movs	r2, #2
 8004624:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004628:	e013      	b.n	8004652 <HAL_TIM_IC_Start_IT+0xca>
 800462a:	683b      	ldr	r3, [r7, #0]
 800462c:	2b04      	cmp	r3, #4
 800462e:	d104      	bne.n	800463a <HAL_TIM_IC_Start_IT+0xb2>
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2202      	movs	r2, #2
 8004634:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004638:	e00b      	b.n	8004652 <HAL_TIM_IC_Start_IT+0xca>
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	2b08      	cmp	r3, #8
 800463e:	d104      	bne.n	800464a <HAL_TIM_IC_Start_IT+0xc2>
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	2202      	movs	r2, #2
 8004644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004648:	e003      	b.n	8004652 <HAL_TIM_IC_Start_IT+0xca>
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	2202      	movs	r2, #2
 800464e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004652:	683b      	ldr	r3, [r7, #0]
 8004654:	2b00      	cmp	r3, #0
 8004656:	d104      	bne.n	8004662 <HAL_TIM_IC_Start_IT+0xda>
 8004658:	687b      	ldr	r3, [r7, #4]
 800465a:	2202      	movs	r2, #2
 800465c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004660:	e013      	b.n	800468a <HAL_TIM_IC_Start_IT+0x102>
 8004662:	683b      	ldr	r3, [r7, #0]
 8004664:	2b04      	cmp	r3, #4
 8004666:	d104      	bne.n	8004672 <HAL_TIM_IC_Start_IT+0xea>
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	2202      	movs	r2, #2
 800466c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004670:	e00b      	b.n	800468a <HAL_TIM_IC_Start_IT+0x102>
 8004672:	683b      	ldr	r3, [r7, #0]
 8004674:	2b08      	cmp	r3, #8
 8004676:	d104      	bne.n	8004682 <HAL_TIM_IC_Start_IT+0xfa>
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2202      	movs	r2, #2
 800467c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004680:	e003      	b.n	800468a <HAL_TIM_IC_Start_IT+0x102>
 8004682:	687b      	ldr	r3, [r7, #4]
 8004684:	2202      	movs	r2, #2
 8004686:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 800468a:	683b      	ldr	r3, [r7, #0]
 800468c:	2b0c      	cmp	r3, #12
 800468e:	d841      	bhi.n	8004714 <HAL_TIM_IC_Start_IT+0x18c>
 8004690:	a201      	add	r2, pc, #4	; (adr r2, 8004698 <HAL_TIM_IC_Start_IT+0x110>)
 8004692:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004696:	bf00      	nop
 8004698:	080046cd 	.word	0x080046cd
 800469c:	08004715 	.word	0x08004715
 80046a0:	08004715 	.word	0x08004715
 80046a4:	08004715 	.word	0x08004715
 80046a8:	080046df 	.word	0x080046df
 80046ac:	08004715 	.word	0x08004715
 80046b0:	08004715 	.word	0x08004715
 80046b4:	08004715 	.word	0x08004715
 80046b8:	080046f1 	.word	0x080046f1
 80046bc:	08004715 	.word	0x08004715
 80046c0:	08004715 	.word	0x08004715
 80046c4:	08004715 	.word	0x08004715
 80046c8:	08004703 	.word	0x08004703
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	681b      	ldr	r3, [r3, #0]
 80046d0:	68da      	ldr	r2, [r3, #12]
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	681b      	ldr	r3, [r3, #0]
 80046d6:	f042 0202 	orr.w	r2, r2, #2
 80046da:	60da      	str	r2, [r3, #12]
      break;
 80046dc:	e01d      	b.n	800471a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	68da      	ldr	r2, [r3, #12]
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	f042 0204 	orr.w	r2, r2, #4
 80046ec:	60da      	str	r2, [r3, #12]
      break;
 80046ee:	e014      	b.n	800471a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	68da      	ldr	r2, [r3, #12]
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	681b      	ldr	r3, [r3, #0]
 80046fa:	f042 0208 	orr.w	r2, r2, #8
 80046fe:	60da      	str	r2, [r3, #12]
      break;
 8004700:	e00b      	b.n	800471a <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	681b      	ldr	r3, [r3, #0]
 8004706:	68da      	ldr	r2, [r3, #12]
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f042 0210 	orr.w	r2, r2, #16
 8004710:	60da      	str	r2, [r3, #12]
      break;
 8004712:	e002      	b.n	800471a <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004714:	2301      	movs	r3, #1
 8004716:	73fb      	strb	r3, [r7, #15]
      break;
 8004718:	bf00      	nop
  }

  if (status == HAL_OK)
 800471a:	7bfb      	ldrb	r3, [r7, #15]
 800471c:	2b00      	cmp	r3, #0
 800471e:	d13e      	bne.n	800479e <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	681b      	ldr	r3, [r3, #0]
 8004724:	2201      	movs	r2, #1
 8004726:	6839      	ldr	r1, [r7, #0]
 8004728:	4618      	mov	r0, r3
 800472a:	f001 f80f 	bl	800574c <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	4a1d      	ldr	r2, [pc, #116]	; (80047a8 <HAL_TIM_IC_Start_IT+0x220>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d018      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x1e2>
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004740:	d013      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x1e2>
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	4a19      	ldr	r2, [pc, #100]	; (80047ac <HAL_TIM_IC_Start_IT+0x224>)
 8004748:	4293      	cmp	r3, r2
 800474a:	d00e      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x1e2>
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	4a17      	ldr	r2, [pc, #92]	; (80047b0 <HAL_TIM_IC_Start_IT+0x228>)
 8004752:	4293      	cmp	r3, r2
 8004754:	d009      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x1e2>
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	4a16      	ldr	r2, [pc, #88]	; (80047b4 <HAL_TIM_IC_Start_IT+0x22c>)
 800475c:	4293      	cmp	r3, r2
 800475e:	d004      	beq.n	800476a <HAL_TIM_IC_Start_IT+0x1e2>
 8004760:	687b      	ldr	r3, [r7, #4]
 8004762:	681b      	ldr	r3, [r3, #0]
 8004764:	4a14      	ldr	r2, [pc, #80]	; (80047b8 <HAL_TIM_IC_Start_IT+0x230>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d111      	bne.n	800478e <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	681b      	ldr	r3, [r3, #0]
 800476e:	689b      	ldr	r3, [r3, #8]
 8004770:	f003 0307 	and.w	r3, r3, #7
 8004774:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004776:	68bb      	ldr	r3, [r7, #8]
 8004778:	2b06      	cmp	r3, #6
 800477a:	d010      	beq.n	800479e <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 800477c:	687b      	ldr	r3, [r7, #4]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	681a      	ldr	r2, [r3, #0]
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	f042 0201 	orr.w	r2, r2, #1
 800478a:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800478c:	e007      	b.n	800479e <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	681b      	ldr	r3, [r3, #0]
 8004792:	681a      	ldr	r2, [r3, #0]
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	681b      	ldr	r3, [r3, #0]
 8004798:	f042 0201 	orr.w	r2, r2, #1
 800479c:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800479e:	7bfb      	ldrb	r3, [r7, #15]
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}
 80047a8:	40010000 	.word	0x40010000
 80047ac:	40000400 	.word	0x40000400
 80047b0:	40000800 	.word	0x40000800
 80047b4:	40000c00 	.word	0x40000c00
 80047b8:	40014000 	.word	0x40014000

080047bc <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80047bc:	b580      	push	{r7, lr}
 80047be:	b084      	sub	sp, #16
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80047c6:	2300      	movs	r3, #0
 80047c8:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	2b0c      	cmp	r3, #12
 80047ce:	d841      	bhi.n	8004854 <HAL_TIM_IC_Stop_IT+0x98>
 80047d0:	a201      	add	r2, pc, #4	; (adr r2, 80047d8 <HAL_TIM_IC_Stop_IT+0x1c>)
 80047d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80047d6:	bf00      	nop
 80047d8:	0800480d 	.word	0x0800480d
 80047dc:	08004855 	.word	0x08004855
 80047e0:	08004855 	.word	0x08004855
 80047e4:	08004855 	.word	0x08004855
 80047e8:	0800481f 	.word	0x0800481f
 80047ec:	08004855 	.word	0x08004855
 80047f0:	08004855 	.word	0x08004855
 80047f4:	08004855 	.word	0x08004855
 80047f8:	08004831 	.word	0x08004831
 80047fc:	08004855 	.word	0x08004855
 8004800:	08004855 	.word	0x08004855
 8004804:	08004855 	.word	0x08004855
 8004808:	08004843 	.word	0x08004843
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	68da      	ldr	r2, [r3, #12]
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	f022 0202 	bic.w	r2, r2, #2
 800481a:	60da      	str	r2, [r3, #12]
      break;
 800481c:	e01d      	b.n	800485a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	681b      	ldr	r3, [r3, #0]
 8004822:	68da      	ldr	r2, [r3, #12]
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	f022 0204 	bic.w	r2, r2, #4
 800482c:	60da      	str	r2, [r3, #12]
      break;
 800482e:	e014      	b.n	800485a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	681b      	ldr	r3, [r3, #0]
 8004834:	68da      	ldr	r2, [r3, #12]
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	681b      	ldr	r3, [r3, #0]
 800483a:	f022 0208 	bic.w	r2, r2, #8
 800483e:	60da      	str	r2, [r3, #12]
      break;
 8004840:	e00b      	b.n	800485a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	681b      	ldr	r3, [r3, #0]
 8004846:	68da      	ldr	r2, [r3, #12]
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	f022 0210 	bic.w	r2, r2, #16
 8004850:	60da      	str	r2, [r3, #12]
      break;
 8004852:	e002      	b.n	800485a <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8004854:	2301      	movs	r3, #1
 8004856:	73fb      	strb	r3, [r7, #15]
      break;
 8004858:	bf00      	nop
  }

  if (status == HAL_OK)
 800485a:	7bfb      	ldrb	r3, [r7, #15]
 800485c:	2b00      	cmp	r3, #0
 800485e:	d156      	bne.n	800490e <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004860:	687b      	ldr	r3, [r7, #4]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	2200      	movs	r2, #0
 8004866:	6839      	ldr	r1, [r7, #0]
 8004868:	4618      	mov	r0, r3
 800486a:	f000 ff6f 	bl	800574c <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	681b      	ldr	r3, [r3, #0]
 8004872:	6a1a      	ldr	r2, [r3, #32]
 8004874:	f241 1311 	movw	r3, #4369	; 0x1111
 8004878:	4013      	ands	r3, r2
 800487a:	2b00      	cmp	r3, #0
 800487c:	d10f      	bne.n	800489e <HAL_TIM_IC_Stop_IT+0xe2>
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	6a1a      	ldr	r2, [r3, #32]
 8004884:	f240 4344 	movw	r3, #1092	; 0x444
 8004888:	4013      	ands	r3, r2
 800488a:	2b00      	cmp	r3, #0
 800488c:	d107      	bne.n	800489e <HAL_TIM_IC_Stop_IT+0xe2>
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d104      	bne.n	80048ae <HAL_TIM_IC_Stop_IT+0xf2>
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	2201      	movs	r2, #1
 80048a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80048ac:	e013      	b.n	80048d6 <HAL_TIM_IC_Stop_IT+0x11a>
 80048ae:	683b      	ldr	r3, [r7, #0]
 80048b0:	2b04      	cmp	r3, #4
 80048b2:	d104      	bne.n	80048be <HAL_TIM_IC_Stop_IT+0x102>
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2201      	movs	r2, #1
 80048b8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80048bc:	e00b      	b.n	80048d6 <HAL_TIM_IC_Stop_IT+0x11a>
 80048be:	683b      	ldr	r3, [r7, #0]
 80048c0:	2b08      	cmp	r3, #8
 80048c2:	d104      	bne.n	80048ce <HAL_TIM_IC_Stop_IT+0x112>
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	2201      	movs	r2, #1
 80048c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80048cc:	e003      	b.n	80048d6 <HAL_TIM_IC_Stop_IT+0x11a>
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	2201      	movs	r2, #1
 80048d2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80048d6:	683b      	ldr	r3, [r7, #0]
 80048d8:	2b00      	cmp	r3, #0
 80048da:	d104      	bne.n	80048e6 <HAL_TIM_IC_Stop_IT+0x12a>
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	2201      	movs	r2, #1
 80048e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80048e4:	e013      	b.n	800490e <HAL_TIM_IC_Stop_IT+0x152>
 80048e6:	683b      	ldr	r3, [r7, #0]
 80048e8:	2b04      	cmp	r3, #4
 80048ea:	d104      	bne.n	80048f6 <HAL_TIM_IC_Stop_IT+0x13a>
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2201      	movs	r2, #1
 80048f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80048f4:	e00b      	b.n	800490e <HAL_TIM_IC_Stop_IT+0x152>
 80048f6:	683b      	ldr	r3, [r7, #0]
 80048f8:	2b08      	cmp	r3, #8
 80048fa:	d104      	bne.n	8004906 <HAL_TIM_IC_Stop_IT+0x14a>
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	2201      	movs	r2, #1
 8004900:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004904:	e003      	b.n	800490e <HAL_TIM_IC_Stop_IT+0x152>
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	2201      	movs	r2, #1
 800490a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 800490e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004910:	4618      	mov	r0, r3
 8004912:	3710      	adds	r7, #16
 8004914:	46bd      	mov	sp, r7
 8004916:	bd80      	pop	{r7, pc}

08004918 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8004918:	b580      	push	{r7, lr}
 800491a:	b082      	sub	sp, #8
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	691b      	ldr	r3, [r3, #16]
 8004926:	f003 0302 	and.w	r3, r3, #2
 800492a:	2b02      	cmp	r3, #2
 800492c:	d122      	bne.n	8004974 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	681b      	ldr	r3, [r3, #0]
 8004932:	68db      	ldr	r3, [r3, #12]
 8004934:	f003 0302 	and.w	r3, r3, #2
 8004938:	2b02      	cmp	r3, #2
 800493a:	d11b      	bne.n	8004974 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	681b      	ldr	r3, [r3, #0]
 8004940:	f06f 0202 	mvn.w	r2, #2
 8004944:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	2201      	movs	r2, #1
 800494a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	699b      	ldr	r3, [r3, #24]
 8004952:	f003 0303 	and.w	r3, r3, #3
 8004956:	2b00      	cmp	r3, #0
 8004958:	d003      	beq.n	8004962 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800495a:	6878      	ldr	r0, [r7, #4]
 800495c:	f000 fb13 	bl	8004f86 <HAL_TIM_IC_CaptureCallback>
 8004960:	e005      	b.n	800496e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f000 fb05 	bl	8004f72 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004968:	6878      	ldr	r0, [r7, #4]
 800496a:	f000 fb16 	bl	8004f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	2200      	movs	r2, #0
 8004972:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	681b      	ldr	r3, [r3, #0]
 8004978:	691b      	ldr	r3, [r3, #16]
 800497a:	f003 0304 	and.w	r3, r3, #4
 800497e:	2b04      	cmp	r3, #4
 8004980:	d122      	bne.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	68db      	ldr	r3, [r3, #12]
 8004988:	f003 0304 	and.w	r3, r3, #4
 800498c:	2b04      	cmp	r3, #4
 800498e:	d11b      	bne.n	80049c8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	f06f 0204 	mvn.w	r2, #4
 8004998:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	2202      	movs	r2, #2
 800499e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	699b      	ldr	r3, [r3, #24]
 80049a6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d003      	beq.n	80049b6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80049ae:	6878      	ldr	r0, [r7, #4]
 80049b0:	f000 fae9 	bl	8004f86 <HAL_TIM_IC_CaptureCallback>
 80049b4:	e005      	b.n	80049c2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80049b6:	6878      	ldr	r0, [r7, #4]
 80049b8:	f000 fadb 	bl	8004f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80049bc:	6878      	ldr	r0, [r7, #4]
 80049be:	f000 faec 	bl	8004f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2200      	movs	r2, #0
 80049c6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	691b      	ldr	r3, [r3, #16]
 80049ce:	f003 0308 	and.w	r3, r3, #8
 80049d2:	2b08      	cmp	r3, #8
 80049d4:	d122      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	68db      	ldr	r3, [r3, #12]
 80049dc:	f003 0308 	and.w	r3, r3, #8
 80049e0:	2b08      	cmp	r3, #8
 80049e2:	d11b      	bne.n	8004a1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	681b      	ldr	r3, [r3, #0]
 80049e8:	f06f 0208 	mvn.w	r2, #8
 80049ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	2204      	movs	r2, #4
 80049f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	69db      	ldr	r3, [r3, #28]
 80049fa:	f003 0303 	and.w	r3, r3, #3
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d003      	beq.n	8004a0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a02:	6878      	ldr	r0, [r7, #4]
 8004a04:	f000 fabf 	bl	8004f86 <HAL_TIM_IC_CaptureCallback>
 8004a08:	e005      	b.n	8004a16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a0a:	6878      	ldr	r0, [r7, #4]
 8004a0c:	f000 fab1 	bl	8004f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a10:	6878      	ldr	r0, [r7, #4]
 8004a12:	f000 fac2 	bl	8004f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	2200      	movs	r2, #0
 8004a1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691b      	ldr	r3, [r3, #16]
 8004a22:	f003 0310 	and.w	r3, r3, #16
 8004a26:	2b10      	cmp	r3, #16
 8004a28:	d122      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	68db      	ldr	r3, [r3, #12]
 8004a30:	f003 0310 	and.w	r3, r3, #16
 8004a34:	2b10      	cmp	r3, #16
 8004a36:	d11b      	bne.n	8004a70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	681b      	ldr	r3, [r3, #0]
 8004a3c:	f06f 0210 	mvn.w	r2, #16
 8004a40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	2208      	movs	r2, #8
 8004a46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	69db      	ldr	r3, [r3, #28]
 8004a4e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a52:	2b00      	cmp	r3, #0
 8004a54:	d003      	beq.n	8004a5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004a56:	6878      	ldr	r0, [r7, #4]
 8004a58:	f000 fa95 	bl	8004f86 <HAL_TIM_IC_CaptureCallback>
 8004a5c:	e005      	b.n	8004a6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004a5e:	6878      	ldr	r0, [r7, #4]
 8004a60:	f000 fa87 	bl	8004f72 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004a64:	6878      	ldr	r0, [r7, #4]
 8004a66:	f000 fa98 	bl	8004f9a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	681b      	ldr	r3, [r3, #0]
 8004a74:	691b      	ldr	r3, [r3, #16]
 8004a76:	f003 0301 	and.w	r3, r3, #1
 8004a7a:	2b01      	cmp	r3, #1
 8004a7c:	d10e      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	68db      	ldr	r3, [r3, #12]
 8004a84:	f003 0301 	and.w	r3, r3, #1
 8004a88:	2b01      	cmp	r3, #1
 8004a8a:	d107      	bne.n	8004a9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f06f 0201 	mvn.w	r2, #1
 8004a94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004a96:	6878      	ldr	r0, [r7, #4]
 8004a98:	f7fc fb80 	bl	800119c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	681b      	ldr	r3, [r3, #0]
 8004aa0:	691b      	ldr	r3, [r3, #16]
 8004aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004aa6:	2b80      	cmp	r3, #128	; 0x80
 8004aa8:	d10e      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	681b      	ldr	r3, [r3, #0]
 8004aae:	68db      	ldr	r3, [r3, #12]
 8004ab0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ab4:	2b80      	cmp	r3, #128	; 0x80
 8004ab6:	d107      	bne.n	8004ac8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	681b      	ldr	r3, [r3, #0]
 8004abc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8004ac0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fee0 	bl	8005888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	681b      	ldr	r3, [r3, #0]
 8004acc:	691b      	ldr	r3, [r3, #16]
 8004ace:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ad2:	2b40      	cmp	r3, #64	; 0x40
 8004ad4:	d10e      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	68db      	ldr	r3, [r3, #12]
 8004adc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae0:	2b40      	cmp	r3, #64	; 0x40
 8004ae2:	d107      	bne.n	8004af4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004aec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f000 fa5d 	bl	8004fae <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	681b      	ldr	r3, [r3, #0]
 8004af8:	691b      	ldr	r3, [r3, #16]
 8004afa:	f003 0320 	and.w	r3, r3, #32
 8004afe:	2b20      	cmp	r3, #32
 8004b00:	d10e      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	68db      	ldr	r3, [r3, #12]
 8004b08:	f003 0320 	and.w	r3, r3, #32
 8004b0c:	2b20      	cmp	r3, #32
 8004b0e:	d107      	bne.n	8004b20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f06f 0220 	mvn.w	r2, #32
 8004b18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004b1a:	6878      	ldr	r0, [r7, #4]
 8004b1c:	f000 feaa 	bl	8005874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004b20:	bf00      	nop
 8004b22:	3708      	adds	r7, #8
 8004b24:	46bd      	mov	sp, r7
 8004b26:	bd80      	pop	{r7, pc}

08004b28 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8004b28:	b580      	push	{r7, lr}
 8004b2a:	b086      	sub	sp, #24
 8004b2c:	af00      	add	r7, sp, #0
 8004b2e:	60f8      	str	r0, [r7, #12]
 8004b30:	60b9      	str	r1, [r7, #8]
 8004b32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004b34:	2300      	movs	r3, #0
 8004b36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d101      	bne.n	8004b46 <HAL_TIM_IC_ConfigChannel+0x1e>
 8004b42:	2302      	movs	r3, #2
 8004b44:	e088      	b.n	8004c58 <HAL_TIM_IC_ConfigChannel+0x130>
 8004b46:	68fb      	ldr	r3, [r7, #12]
 8004b48:	2201      	movs	r2, #1
 8004b4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d11b      	bne.n	8004b8c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	6818      	ldr	r0, [r3, #0]
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	6819      	ldr	r1, [r3, #0]
 8004b5c:	68bb      	ldr	r3, [r7, #8]
 8004b5e:	685a      	ldr	r2, [r3, #4]
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	68db      	ldr	r3, [r3, #12]
 8004b64:	f000 fc3a 	bl	80053dc <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8004b68:	68fb      	ldr	r3, [r7, #12]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	699a      	ldr	r2, [r3, #24]
 8004b6e:	68fb      	ldr	r3, [r7, #12]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f022 020c 	bic.w	r2, r2, #12
 8004b76:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8004b78:	68fb      	ldr	r3, [r7, #12]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	6999      	ldr	r1, [r3, #24]
 8004b7e:	68bb      	ldr	r3, [r7, #8]
 8004b80:	689a      	ldr	r2, [r3, #8]
 8004b82:	68fb      	ldr	r3, [r7, #12]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	430a      	orrs	r2, r1
 8004b88:	619a      	str	r2, [r3, #24]
 8004b8a:	e060      	b.n	8004c4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2b04      	cmp	r3, #4
 8004b90:	d11c      	bne.n	8004bcc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	6818      	ldr	r0, [r3, #0]
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	6819      	ldr	r1, [r3, #0]
 8004b9a:	68bb      	ldr	r3, [r7, #8]
 8004b9c:	685a      	ldr	r2, [r3, #4]
 8004b9e:	68bb      	ldr	r3, [r7, #8]
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f000 fcb2 	bl	800550a <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8004ba6:	68fb      	ldr	r3, [r7, #12]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	699a      	ldr	r2, [r3, #24]
 8004bac:	68fb      	ldr	r3, [r7, #12]
 8004bae:	681b      	ldr	r3, [r3, #0]
 8004bb0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004bb4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8004bb6:	68fb      	ldr	r3, [r7, #12]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	6999      	ldr	r1, [r3, #24]
 8004bbc:	68bb      	ldr	r3, [r7, #8]
 8004bbe:	689b      	ldr	r3, [r3, #8]
 8004bc0:	021a      	lsls	r2, r3, #8
 8004bc2:	68fb      	ldr	r3, [r7, #12]
 8004bc4:	681b      	ldr	r3, [r3, #0]
 8004bc6:	430a      	orrs	r2, r1
 8004bc8:	619a      	str	r2, [r3, #24]
 8004bca:	e040      	b.n	8004c4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	2b08      	cmp	r3, #8
 8004bd0:	d11b      	bne.n	8004c0a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6818      	ldr	r0, [r3, #0]
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	6819      	ldr	r1, [r3, #0]
 8004bda:	68bb      	ldr	r3, [r7, #8]
 8004bdc:	685a      	ldr	r2, [r3, #4]
 8004bde:	68bb      	ldr	r3, [r7, #8]
 8004be0:	68db      	ldr	r3, [r3, #12]
 8004be2:	f000 fcff 	bl	80055e4 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	681b      	ldr	r3, [r3, #0]
 8004bea:	69da      	ldr	r2, [r3, #28]
 8004bec:	68fb      	ldr	r3, [r7, #12]
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	f022 020c 	bic.w	r2, r2, #12
 8004bf4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8004bf6:	68fb      	ldr	r3, [r7, #12]
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	69d9      	ldr	r1, [r3, #28]
 8004bfc:	68bb      	ldr	r3, [r7, #8]
 8004bfe:	689a      	ldr	r2, [r3, #8]
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	430a      	orrs	r2, r1
 8004c06:	61da      	str	r2, [r3, #28]
 8004c08:	e021      	b.n	8004c4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	2b0c      	cmp	r3, #12
 8004c0e:	d11c      	bne.n	8004c4a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	6818      	ldr	r0, [r3, #0]
 8004c14:	68bb      	ldr	r3, [r7, #8]
 8004c16:	6819      	ldr	r1, [r3, #0]
 8004c18:	68bb      	ldr	r3, [r7, #8]
 8004c1a:	685a      	ldr	r2, [r3, #4]
 8004c1c:	68bb      	ldr	r3, [r7, #8]
 8004c1e:	68db      	ldr	r3, [r3, #12]
 8004c20:	f000 fd1c 	bl	800565c <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	69da      	ldr	r2, [r3, #28]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8004c32:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	69d9      	ldr	r1, [r3, #28]
 8004c3a:	68bb      	ldr	r3, [r7, #8]
 8004c3c:	689b      	ldr	r3, [r3, #8]
 8004c3e:	021a      	lsls	r2, r3, #8
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	681b      	ldr	r3, [r3, #0]
 8004c44:	430a      	orrs	r2, r1
 8004c46:	61da      	str	r2, [r3, #28]
 8004c48:	e001      	b.n	8004c4e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8004c4a:	2301      	movs	r3, #1
 8004c4c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8004c4e:	68fb      	ldr	r3, [r7, #12]
 8004c50:	2200      	movs	r2, #0
 8004c52:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004c56:	7dfb      	ldrb	r3, [r7, #23]
}
 8004c58:	4618      	mov	r0, r3
 8004c5a:	3718      	adds	r7, #24
 8004c5c:	46bd      	mov	sp, r7
 8004c5e:	bd80      	pop	{r7, pc}

08004c60 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004c60:	b580      	push	{r7, lr}
 8004c62:	b086      	sub	sp, #24
 8004c64:	af00      	add	r7, sp, #0
 8004c66:	60f8      	str	r0, [r7, #12]
 8004c68:	60b9      	str	r1, [r7, #8]
 8004c6a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004c6c:	2300      	movs	r3, #0
 8004c6e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c76:	2b01      	cmp	r3, #1
 8004c78:	d101      	bne.n	8004c7e <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004c7a:	2302      	movs	r3, #2
 8004c7c:	e0ae      	b.n	8004ddc <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004c7e:	68fb      	ldr	r3, [r7, #12]
 8004c80:	2201      	movs	r2, #1
 8004c82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	2b0c      	cmp	r3, #12
 8004c8a:	f200 809f 	bhi.w	8004dcc <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004c8e:	a201      	add	r2, pc, #4	; (adr r2, 8004c94 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004c90:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c94:	08004cc9 	.word	0x08004cc9
 8004c98:	08004dcd 	.word	0x08004dcd
 8004c9c:	08004dcd 	.word	0x08004dcd
 8004ca0:	08004dcd 	.word	0x08004dcd
 8004ca4:	08004d09 	.word	0x08004d09
 8004ca8:	08004dcd 	.word	0x08004dcd
 8004cac:	08004dcd 	.word	0x08004dcd
 8004cb0:	08004dcd 	.word	0x08004dcd
 8004cb4:	08004d4b 	.word	0x08004d4b
 8004cb8:	08004dcd 	.word	0x08004dcd
 8004cbc:	08004dcd 	.word	0x08004dcd
 8004cc0:	08004dcd 	.word	0x08004dcd
 8004cc4:	08004d8b 	.word	0x08004d8b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68b9      	ldr	r1, [r7, #8]
 8004cce:	4618      	mov	r0, r3
 8004cd0:	f000 f9f8 	bl	80050c4 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	699a      	ldr	r2, [r3, #24]
 8004cda:	68fb      	ldr	r3, [r7, #12]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0208 	orr.w	r2, r2, #8
 8004ce2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004ce4:	68fb      	ldr	r3, [r7, #12]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	699a      	ldr	r2, [r3, #24]
 8004cea:	68fb      	ldr	r3, [r7, #12]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f022 0204 	bic.w	r2, r2, #4
 8004cf2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004cf4:	68fb      	ldr	r3, [r7, #12]
 8004cf6:	681b      	ldr	r3, [r3, #0]
 8004cf8:	6999      	ldr	r1, [r3, #24]
 8004cfa:	68bb      	ldr	r3, [r7, #8]
 8004cfc:	691a      	ldr	r2, [r3, #16]
 8004cfe:	68fb      	ldr	r3, [r7, #12]
 8004d00:	681b      	ldr	r3, [r3, #0]
 8004d02:	430a      	orrs	r2, r1
 8004d04:	619a      	str	r2, [r3, #24]
      break;
 8004d06:	e064      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004d08:	68fb      	ldr	r3, [r7, #12]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	68b9      	ldr	r1, [r7, #8]
 8004d0e:	4618      	mov	r0, r3
 8004d10:	f000 fa3e 	bl	8005190 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004d14:	68fb      	ldr	r3, [r7, #12]
 8004d16:	681b      	ldr	r3, [r3, #0]
 8004d18:	699a      	ldr	r2, [r3, #24]
 8004d1a:	68fb      	ldr	r3, [r7, #12]
 8004d1c:	681b      	ldr	r3, [r3, #0]
 8004d1e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004d22:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004d24:	68fb      	ldr	r3, [r7, #12]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	699a      	ldr	r2, [r3, #24]
 8004d2a:	68fb      	ldr	r3, [r7, #12]
 8004d2c:	681b      	ldr	r3, [r3, #0]
 8004d2e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d32:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	6999      	ldr	r1, [r3, #24]
 8004d3a:	68bb      	ldr	r3, [r7, #8]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	021a      	lsls	r2, r3, #8
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	430a      	orrs	r2, r1
 8004d46:	619a      	str	r2, [r3, #24]
      break;
 8004d48:	e043      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	68b9      	ldr	r1, [r7, #8]
 8004d50:	4618      	mov	r0, r3
 8004d52:	f000 fa89 	bl	8005268 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004d56:	68fb      	ldr	r3, [r7, #12]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	69da      	ldr	r2, [r3, #28]
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	f042 0208 	orr.w	r2, r2, #8
 8004d64:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004d66:	68fb      	ldr	r3, [r7, #12]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	69da      	ldr	r2, [r3, #28]
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f022 0204 	bic.w	r2, r2, #4
 8004d74:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	69d9      	ldr	r1, [r3, #28]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	691a      	ldr	r2, [r3, #16]
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	430a      	orrs	r2, r1
 8004d86:	61da      	str	r2, [r3, #28]
      break;
 8004d88:	e023      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004d8a:	68fb      	ldr	r3, [r7, #12]
 8004d8c:	681b      	ldr	r3, [r3, #0]
 8004d8e:	68b9      	ldr	r1, [r7, #8]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f000 fad3 	bl	800533c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	69da      	ldr	r2, [r3, #28]
 8004d9c:	68fb      	ldr	r3, [r7, #12]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004da4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	69da      	ldr	r2, [r3, #28]
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004db4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	681b      	ldr	r3, [r3, #0]
 8004dba:	69d9      	ldr	r1, [r3, #28]
 8004dbc:	68bb      	ldr	r3, [r7, #8]
 8004dbe:	691b      	ldr	r3, [r3, #16]
 8004dc0:	021a      	lsls	r2, r3, #8
 8004dc2:	68fb      	ldr	r3, [r7, #12]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	430a      	orrs	r2, r1
 8004dc8:	61da      	str	r2, [r3, #28]
      break;
 8004dca:	e002      	b.n	8004dd2 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004dcc:	2301      	movs	r3, #1
 8004dce:	75fb      	strb	r3, [r7, #23]
      break;
 8004dd0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004dd2:	68fb      	ldr	r3, [r7, #12]
 8004dd4:	2200      	movs	r2, #0
 8004dd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004dda:	7dfb      	ldrb	r3, [r7, #23]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3718      	adds	r7, #24
 8004de0:	46bd      	mov	sp, r7
 8004de2:	bd80      	pop	{r7, pc}

08004de4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004de4:	b580      	push	{r7, lr}
 8004de6:	b084      	sub	sp, #16
 8004de8:	af00      	add	r7, sp, #0
 8004dea:	6078      	str	r0, [r7, #4]
 8004dec:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004dee:	2300      	movs	r3, #0
 8004df0:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004df8:	2b01      	cmp	r3, #1
 8004dfa:	d101      	bne.n	8004e00 <HAL_TIM_ConfigClockSource+0x1c>
 8004dfc:	2302      	movs	r3, #2
 8004dfe:	e0b4      	b.n	8004f6a <HAL_TIM_ConfigClockSource+0x186>
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2202      	movs	r2, #2
 8004e0c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	689b      	ldr	r3, [r3, #8]
 8004e16:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004e18:	68bb      	ldr	r3, [r7, #8]
 8004e1a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8004e1e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004e20:	68bb      	ldr	r3, [r7, #8]
 8004e22:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004e26:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	681b      	ldr	r3, [r3, #0]
 8004e2c:	68ba      	ldr	r2, [r7, #8]
 8004e2e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8004e30:	683b      	ldr	r3, [r7, #0]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e38:	d03e      	beq.n	8004eb8 <HAL_TIM_ConfigClockSource+0xd4>
 8004e3a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004e3e:	f200 8087 	bhi.w	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
 8004e42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e46:	f000 8086 	beq.w	8004f56 <HAL_TIM_ConfigClockSource+0x172>
 8004e4a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e4e:	d87f      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
 8004e50:	2b70      	cmp	r3, #112	; 0x70
 8004e52:	d01a      	beq.n	8004e8a <HAL_TIM_ConfigClockSource+0xa6>
 8004e54:	2b70      	cmp	r3, #112	; 0x70
 8004e56:	d87b      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
 8004e58:	2b60      	cmp	r3, #96	; 0x60
 8004e5a:	d050      	beq.n	8004efe <HAL_TIM_ConfigClockSource+0x11a>
 8004e5c:	2b60      	cmp	r3, #96	; 0x60
 8004e5e:	d877      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
 8004e60:	2b50      	cmp	r3, #80	; 0x50
 8004e62:	d03c      	beq.n	8004ede <HAL_TIM_ConfigClockSource+0xfa>
 8004e64:	2b50      	cmp	r3, #80	; 0x50
 8004e66:	d873      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
 8004e68:	2b40      	cmp	r3, #64	; 0x40
 8004e6a:	d058      	beq.n	8004f1e <HAL_TIM_ConfigClockSource+0x13a>
 8004e6c:	2b40      	cmp	r3, #64	; 0x40
 8004e6e:	d86f      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
 8004e70:	2b30      	cmp	r3, #48	; 0x30
 8004e72:	d064      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x15a>
 8004e74:	2b30      	cmp	r3, #48	; 0x30
 8004e76:	d86b      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
 8004e78:	2b20      	cmp	r3, #32
 8004e7a:	d060      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x15a>
 8004e7c:	2b20      	cmp	r3, #32
 8004e7e:	d867      	bhi.n	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
 8004e80:	2b00      	cmp	r3, #0
 8004e82:	d05c      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x15a>
 8004e84:	2b10      	cmp	r3, #16
 8004e86:	d05a      	beq.n	8004f3e <HAL_TIM_ConfigClockSource+0x15a>
 8004e88:	e062      	b.n	8004f50 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004e8a:	687b      	ldr	r3, [r7, #4]
 8004e8c:	6818      	ldr	r0, [r3, #0]
 8004e8e:	683b      	ldr	r3, [r7, #0]
 8004e90:	6899      	ldr	r1, [r3, #8]
 8004e92:	683b      	ldr	r3, [r7, #0]
 8004e94:	685a      	ldr	r2, [r3, #4]
 8004e96:	683b      	ldr	r3, [r7, #0]
 8004e98:	68db      	ldr	r3, [r3, #12]
 8004e9a:	f000 fc37 	bl	800570c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	689b      	ldr	r3, [r3, #8]
 8004ea4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004ea6:	68bb      	ldr	r3, [r7, #8]
 8004ea8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004eac:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	68ba      	ldr	r2, [r7, #8]
 8004eb4:	609a      	str	r2, [r3, #8]
      break;
 8004eb6:	e04f      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	6818      	ldr	r0, [r3, #0]
 8004ebc:	683b      	ldr	r3, [r7, #0]
 8004ebe:	6899      	ldr	r1, [r3, #8]
 8004ec0:	683b      	ldr	r3, [r7, #0]
 8004ec2:	685a      	ldr	r2, [r3, #4]
 8004ec4:	683b      	ldr	r3, [r7, #0]
 8004ec6:	68db      	ldr	r3, [r3, #12]
 8004ec8:	f000 fc20 	bl	800570c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004ecc:	687b      	ldr	r3, [r7, #4]
 8004ece:	681b      	ldr	r3, [r3, #0]
 8004ed0:	689a      	ldr	r2, [r3, #8]
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004eda:	609a      	str	r2, [r3, #8]
      break;
 8004edc:	e03c      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	6818      	ldr	r0, [r3, #0]
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	6859      	ldr	r1, [r3, #4]
 8004ee6:	683b      	ldr	r3, [r7, #0]
 8004ee8:	68db      	ldr	r3, [r3, #12]
 8004eea:	461a      	mov	r2, r3
 8004eec:	f000 fade 	bl	80054ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	2150      	movs	r1, #80	; 0x50
 8004ef6:	4618      	mov	r0, r3
 8004ef8:	f000 fbed 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004efc:	e02c      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	6818      	ldr	r0, [r3, #0]
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	6859      	ldr	r1, [r3, #4]
 8004f06:	683b      	ldr	r3, [r7, #0]
 8004f08:	68db      	ldr	r3, [r3, #12]
 8004f0a:	461a      	mov	r2, r3
 8004f0c:	f000 fb3a 	bl	8005584 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	2160      	movs	r1, #96	; 0x60
 8004f16:	4618      	mov	r0, r3
 8004f18:	f000 fbdd 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004f1c:	e01c      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	6818      	ldr	r0, [r3, #0]
 8004f22:	683b      	ldr	r3, [r7, #0]
 8004f24:	6859      	ldr	r1, [r3, #4]
 8004f26:	683b      	ldr	r3, [r7, #0]
 8004f28:	68db      	ldr	r3, [r3, #12]
 8004f2a:	461a      	mov	r2, r3
 8004f2c:	f000 fabe 	bl	80054ac <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	681b      	ldr	r3, [r3, #0]
 8004f34:	2140      	movs	r1, #64	; 0x40
 8004f36:	4618      	mov	r0, r3
 8004f38:	f000 fbcd 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004f3c:	e00c      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681a      	ldr	r2, [r3, #0]
 8004f42:	683b      	ldr	r3, [r7, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	4619      	mov	r1, r3
 8004f48:	4610      	mov	r0, r2
 8004f4a:	f000 fbc4 	bl	80056d6 <TIM_ITRx_SetConfig>
      break;
 8004f4e:	e003      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004f50:	2301      	movs	r3, #1
 8004f52:	73fb      	strb	r3, [r7, #15]
      break;
 8004f54:	e000      	b.n	8004f58 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004f56:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	2200      	movs	r2, #0
 8004f64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004f68:	7bfb      	ldrb	r3, [r7, #15]
}
 8004f6a:	4618      	mov	r0, r3
 8004f6c:	3710      	adds	r7, #16
 8004f6e:	46bd      	mov	sp, r7
 8004f70:	bd80      	pop	{r7, pc}

08004f72 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004f72:	b480      	push	{r7}
 8004f74:	b083      	sub	sp, #12
 8004f76:	af00      	add	r7, sp, #0
 8004f78:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004f7a:	bf00      	nop
 8004f7c:	370c      	adds	r7, #12
 8004f7e:	46bd      	mov	sp, r7
 8004f80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f84:	4770      	bx	lr

08004f86 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004f86:	b480      	push	{r7}
 8004f88:	b083      	sub	sp, #12
 8004f8a:	af00      	add	r7, sp, #0
 8004f8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004f8e:	bf00      	nop
 8004f90:	370c      	adds	r7, #12
 8004f92:	46bd      	mov	sp, r7
 8004f94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f98:	4770      	bx	lr

08004f9a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004f9a:	b480      	push	{r7}
 8004f9c:	b083      	sub	sp, #12
 8004f9e:	af00      	add	r7, sp, #0
 8004fa0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004fa2:	bf00      	nop
 8004fa4:	370c      	adds	r7, #12
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fac:	4770      	bx	lr

08004fae <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004fae:	b480      	push	{r7}
 8004fb0:	b083      	sub	sp, #12
 8004fb2:	af00      	add	r7, sp, #0
 8004fb4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004fb6:	bf00      	nop
 8004fb8:	370c      	adds	r7, #12
 8004fba:	46bd      	mov	sp, r7
 8004fbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc0:	4770      	bx	lr
	...

08004fc4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8004fc4:	b480      	push	{r7}
 8004fc6:	b085      	sub	sp, #20
 8004fc8:	af00      	add	r7, sp, #0
 8004fca:	6078      	str	r0, [r7, #4]
 8004fcc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004fce:	687b      	ldr	r3, [r7, #4]
 8004fd0:	681b      	ldr	r3, [r3, #0]
 8004fd2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	4a34      	ldr	r2, [pc, #208]	; (80050a8 <TIM_Base_SetConfig+0xe4>)
 8004fd8:	4293      	cmp	r3, r2
 8004fda:	d00f      	beq.n	8004ffc <TIM_Base_SetConfig+0x38>
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004fe2:	d00b      	beq.n	8004ffc <TIM_Base_SetConfig+0x38>
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	4a31      	ldr	r2, [pc, #196]	; (80050ac <TIM_Base_SetConfig+0xe8>)
 8004fe8:	4293      	cmp	r3, r2
 8004fea:	d007      	beq.n	8004ffc <TIM_Base_SetConfig+0x38>
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	4a30      	ldr	r2, [pc, #192]	; (80050b0 <TIM_Base_SetConfig+0xec>)
 8004ff0:	4293      	cmp	r3, r2
 8004ff2:	d003      	beq.n	8004ffc <TIM_Base_SetConfig+0x38>
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	4a2f      	ldr	r2, [pc, #188]	; (80050b4 <TIM_Base_SetConfig+0xf0>)
 8004ff8:	4293      	cmp	r3, r2
 8004ffa:	d108      	bne.n	800500e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005002:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	685b      	ldr	r3, [r3, #4]
 8005008:	68fa      	ldr	r2, [r7, #12]
 800500a:	4313      	orrs	r3, r2
 800500c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a25      	ldr	r2, [pc, #148]	; (80050a8 <TIM_Base_SetConfig+0xe4>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d01b      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800501c:	d017      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a22      	ldr	r2, [pc, #136]	; (80050ac <TIM_Base_SetConfig+0xe8>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d013      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a21      	ldr	r2, [pc, #132]	; (80050b0 <TIM_Base_SetConfig+0xec>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d00f      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a20      	ldr	r2, [pc, #128]	; (80050b4 <TIM_Base_SetConfig+0xf0>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d00b      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 8005036:	687b      	ldr	r3, [r7, #4]
 8005038:	4a1f      	ldr	r2, [pc, #124]	; (80050b8 <TIM_Base_SetConfig+0xf4>)
 800503a:	4293      	cmp	r3, r2
 800503c:	d007      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	4a1e      	ldr	r2, [pc, #120]	; (80050bc <TIM_Base_SetConfig+0xf8>)
 8005042:	4293      	cmp	r3, r2
 8005044:	d003      	beq.n	800504e <TIM_Base_SetConfig+0x8a>
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	4a1d      	ldr	r2, [pc, #116]	; (80050c0 <TIM_Base_SetConfig+0xfc>)
 800504a:	4293      	cmp	r3, r2
 800504c:	d108      	bne.n	8005060 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800504e:	68fb      	ldr	r3, [r7, #12]
 8005050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005054:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005056:	683b      	ldr	r3, [r7, #0]
 8005058:	68db      	ldr	r3, [r3, #12]
 800505a:	68fa      	ldr	r2, [r7, #12]
 800505c:	4313      	orrs	r3, r2
 800505e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005060:	68fb      	ldr	r3, [r7, #12]
 8005062:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005066:	683b      	ldr	r3, [r7, #0]
 8005068:	695b      	ldr	r3, [r3, #20]
 800506a:	4313      	orrs	r3, r2
 800506c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	68fa      	ldr	r2, [r7, #12]
 8005072:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005074:	683b      	ldr	r3, [r7, #0]
 8005076:	689a      	ldr	r2, [r3, #8]
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800507c:	683b      	ldr	r3, [r7, #0]
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	4a08      	ldr	r2, [pc, #32]	; (80050a8 <TIM_Base_SetConfig+0xe4>)
 8005088:	4293      	cmp	r3, r2
 800508a:	d103      	bne.n	8005094 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	691a      	ldr	r2, [r3, #16]
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005094:	687b      	ldr	r3, [r7, #4]
 8005096:	2201      	movs	r2, #1
 8005098:	615a      	str	r2, [r3, #20]
}
 800509a:	bf00      	nop
 800509c:	3714      	adds	r7, #20
 800509e:	46bd      	mov	sp, r7
 80050a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a4:	4770      	bx	lr
 80050a6:	bf00      	nop
 80050a8:	40010000 	.word	0x40010000
 80050ac:	40000400 	.word	0x40000400
 80050b0:	40000800 	.word	0x40000800
 80050b4:	40000c00 	.word	0x40000c00
 80050b8:	40014000 	.word	0x40014000
 80050bc:	40014400 	.word	0x40014400
 80050c0:	40014800 	.word	0x40014800

080050c4 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80050c4:	b480      	push	{r7}
 80050c6:	b087      	sub	sp, #28
 80050c8:	af00      	add	r7, sp, #0
 80050ca:	6078      	str	r0, [r7, #4]
 80050cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6a1b      	ldr	r3, [r3, #32]
 80050d2:	f023 0201 	bic.w	r2, r3, #1
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	6a1b      	ldr	r3, [r3, #32]
 80050de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	685b      	ldr	r3, [r3, #4]
 80050e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	699b      	ldr	r3, [r3, #24]
 80050ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80050ec:	68fb      	ldr	r3, [r7, #12]
 80050ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80050f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80050f4:	68fb      	ldr	r3, [r7, #12]
 80050f6:	f023 0303 	bic.w	r3, r3, #3
 80050fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80050fc:	683b      	ldr	r3, [r7, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	68fa      	ldr	r2, [r7, #12]
 8005102:	4313      	orrs	r3, r2
 8005104:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005106:	697b      	ldr	r3, [r7, #20]
 8005108:	f023 0302 	bic.w	r3, r3, #2
 800510c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800510e:	683b      	ldr	r3, [r7, #0]
 8005110:	689b      	ldr	r3, [r3, #8]
 8005112:	697a      	ldr	r2, [r7, #20]
 8005114:	4313      	orrs	r3, r2
 8005116:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	4a1c      	ldr	r2, [pc, #112]	; (800518c <TIM_OC1_SetConfig+0xc8>)
 800511c:	4293      	cmp	r3, r2
 800511e:	d10c      	bne.n	800513a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005120:	697b      	ldr	r3, [r7, #20]
 8005122:	f023 0308 	bic.w	r3, r3, #8
 8005126:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005128:	683b      	ldr	r3, [r7, #0]
 800512a:	68db      	ldr	r3, [r3, #12]
 800512c:	697a      	ldr	r2, [r7, #20]
 800512e:	4313      	orrs	r3, r2
 8005130:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005132:	697b      	ldr	r3, [r7, #20]
 8005134:	f023 0304 	bic.w	r3, r3, #4
 8005138:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	4a13      	ldr	r2, [pc, #76]	; (800518c <TIM_OC1_SetConfig+0xc8>)
 800513e:	4293      	cmp	r3, r2
 8005140:	d111      	bne.n	8005166 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005142:	693b      	ldr	r3, [r7, #16]
 8005144:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005148:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800514a:	693b      	ldr	r3, [r7, #16]
 800514c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005150:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005152:	683b      	ldr	r3, [r7, #0]
 8005154:	695b      	ldr	r3, [r3, #20]
 8005156:	693a      	ldr	r2, [r7, #16]
 8005158:	4313      	orrs	r3, r2
 800515a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800515c:	683b      	ldr	r3, [r7, #0]
 800515e:	699b      	ldr	r3, [r3, #24]
 8005160:	693a      	ldr	r2, [r7, #16]
 8005162:	4313      	orrs	r3, r2
 8005164:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	693a      	ldr	r2, [r7, #16]
 800516a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	68fa      	ldr	r2, [r7, #12]
 8005170:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005172:	683b      	ldr	r3, [r7, #0]
 8005174:	685a      	ldr	r2, [r3, #4]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800517a:	687b      	ldr	r3, [r7, #4]
 800517c:	697a      	ldr	r2, [r7, #20]
 800517e:	621a      	str	r2, [r3, #32]
}
 8005180:	bf00      	nop
 8005182:	371c      	adds	r7, #28
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr
 800518c:	40010000 	.word	0x40010000

08005190 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005190:	b480      	push	{r7}
 8005192:	b087      	sub	sp, #28
 8005194:	af00      	add	r7, sp, #0
 8005196:	6078      	str	r0, [r7, #4]
 8005198:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	6a1b      	ldr	r3, [r3, #32]
 800519e:	f023 0210 	bic.w	r2, r3, #16
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	6a1b      	ldr	r3, [r3, #32]
 80051aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	685b      	ldr	r3, [r3, #4]
 80051b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80051b2:	687b      	ldr	r3, [r7, #4]
 80051b4:	699b      	ldr	r3, [r3, #24]
 80051b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80051b8:	68fb      	ldr	r3, [r7, #12]
 80051ba:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80051be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80051c0:	68fb      	ldr	r3, [r7, #12]
 80051c2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80051c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80051c8:	683b      	ldr	r3, [r7, #0]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	021b      	lsls	r3, r3, #8
 80051ce:	68fa      	ldr	r2, [r7, #12]
 80051d0:	4313      	orrs	r3, r2
 80051d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80051d4:	697b      	ldr	r3, [r7, #20]
 80051d6:	f023 0320 	bic.w	r3, r3, #32
 80051da:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80051dc:	683b      	ldr	r3, [r7, #0]
 80051de:	689b      	ldr	r3, [r3, #8]
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	697a      	ldr	r2, [r7, #20]
 80051e4:	4313      	orrs	r3, r2
 80051e6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	4a1e      	ldr	r2, [pc, #120]	; (8005264 <TIM_OC2_SetConfig+0xd4>)
 80051ec:	4293      	cmp	r3, r2
 80051ee:	d10d      	bne.n	800520c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80051f0:	697b      	ldr	r3, [r7, #20]
 80051f2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80051f6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80051f8:	683b      	ldr	r3, [r7, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	011b      	lsls	r3, r3, #4
 80051fe:	697a      	ldr	r2, [r7, #20]
 8005200:	4313      	orrs	r3, r2
 8005202:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005204:	697b      	ldr	r3, [r7, #20]
 8005206:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800520a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800520c:	687b      	ldr	r3, [r7, #4]
 800520e:	4a15      	ldr	r2, [pc, #84]	; (8005264 <TIM_OC2_SetConfig+0xd4>)
 8005210:	4293      	cmp	r3, r2
 8005212:	d113      	bne.n	800523c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005214:	693b      	ldr	r3, [r7, #16]
 8005216:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800521a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800521c:	693b      	ldr	r3, [r7, #16]
 800521e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005222:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005224:	683b      	ldr	r3, [r7, #0]
 8005226:	695b      	ldr	r3, [r3, #20]
 8005228:	009b      	lsls	r3, r3, #2
 800522a:	693a      	ldr	r2, [r7, #16]
 800522c:	4313      	orrs	r3, r2
 800522e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005230:	683b      	ldr	r3, [r7, #0]
 8005232:	699b      	ldr	r3, [r3, #24]
 8005234:	009b      	lsls	r3, r3, #2
 8005236:	693a      	ldr	r2, [r7, #16]
 8005238:	4313      	orrs	r3, r2
 800523a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	693a      	ldr	r2, [r7, #16]
 8005240:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005242:	687b      	ldr	r3, [r7, #4]
 8005244:	68fa      	ldr	r2, [r7, #12]
 8005246:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005248:	683b      	ldr	r3, [r7, #0]
 800524a:	685a      	ldr	r2, [r3, #4]
 800524c:	687b      	ldr	r3, [r7, #4]
 800524e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	697a      	ldr	r2, [r7, #20]
 8005254:	621a      	str	r2, [r3, #32]
}
 8005256:	bf00      	nop
 8005258:	371c      	adds	r7, #28
 800525a:	46bd      	mov	sp, r7
 800525c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005260:	4770      	bx	lr
 8005262:	bf00      	nop
 8005264:	40010000 	.word	0x40010000

08005268 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005268:	b480      	push	{r7}
 800526a:	b087      	sub	sp, #28
 800526c:	af00      	add	r7, sp, #0
 800526e:	6078      	str	r0, [r7, #4]
 8005270:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	6a1b      	ldr	r3, [r3, #32]
 8005276:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800527e:	687b      	ldr	r3, [r7, #4]
 8005280:	6a1b      	ldr	r3, [r3, #32]
 8005282:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	685b      	ldr	r3, [r3, #4]
 8005288:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	69db      	ldr	r3, [r3, #28]
 800528e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005290:	68fb      	ldr	r3, [r7, #12]
 8005292:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005296:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005298:	68fb      	ldr	r3, [r7, #12]
 800529a:	f023 0303 	bic.w	r3, r3, #3
 800529e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80052a0:	683b      	ldr	r3, [r7, #0]
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	68fa      	ldr	r2, [r7, #12]
 80052a6:	4313      	orrs	r3, r2
 80052a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80052aa:	697b      	ldr	r3, [r7, #20]
 80052ac:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80052b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80052b2:	683b      	ldr	r3, [r7, #0]
 80052b4:	689b      	ldr	r3, [r3, #8]
 80052b6:	021b      	lsls	r3, r3, #8
 80052b8:	697a      	ldr	r2, [r7, #20]
 80052ba:	4313      	orrs	r3, r2
 80052bc:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	4a1d      	ldr	r2, [pc, #116]	; (8005338 <TIM_OC3_SetConfig+0xd0>)
 80052c2:	4293      	cmp	r3, r2
 80052c4:	d10d      	bne.n	80052e2 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80052c6:	697b      	ldr	r3, [r7, #20]
 80052c8:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80052cc:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80052ce:	683b      	ldr	r3, [r7, #0]
 80052d0:	68db      	ldr	r3, [r3, #12]
 80052d2:	021b      	lsls	r3, r3, #8
 80052d4:	697a      	ldr	r2, [r7, #20]
 80052d6:	4313      	orrs	r3, r2
 80052d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80052da:	697b      	ldr	r3, [r7, #20]
 80052dc:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80052e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80052e2:	687b      	ldr	r3, [r7, #4]
 80052e4:	4a14      	ldr	r2, [pc, #80]	; (8005338 <TIM_OC3_SetConfig+0xd0>)
 80052e6:	4293      	cmp	r3, r2
 80052e8:	d113      	bne.n	8005312 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80052ea:	693b      	ldr	r3, [r7, #16]
 80052ec:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80052f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80052f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80052fa:	683b      	ldr	r3, [r7, #0]
 80052fc:	695b      	ldr	r3, [r3, #20]
 80052fe:	011b      	lsls	r3, r3, #4
 8005300:	693a      	ldr	r2, [r7, #16]
 8005302:	4313      	orrs	r3, r2
 8005304:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005306:	683b      	ldr	r3, [r7, #0]
 8005308:	699b      	ldr	r3, [r3, #24]
 800530a:	011b      	lsls	r3, r3, #4
 800530c:	693a      	ldr	r2, [r7, #16]
 800530e:	4313      	orrs	r3, r2
 8005310:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005312:	687b      	ldr	r3, [r7, #4]
 8005314:	693a      	ldr	r2, [r7, #16]
 8005316:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	68fa      	ldr	r2, [r7, #12]
 800531c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800531e:	683b      	ldr	r3, [r7, #0]
 8005320:	685a      	ldr	r2, [r3, #4]
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	697a      	ldr	r2, [r7, #20]
 800532a:	621a      	str	r2, [r3, #32]
}
 800532c:	bf00      	nop
 800532e:	371c      	adds	r7, #28
 8005330:	46bd      	mov	sp, r7
 8005332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005336:	4770      	bx	lr
 8005338:	40010000 	.word	0x40010000

0800533c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800533c:	b480      	push	{r7}
 800533e:	b087      	sub	sp, #28
 8005340:	af00      	add	r7, sp, #0
 8005342:	6078      	str	r0, [r7, #4]
 8005344:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
 800534a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800534e:	687b      	ldr	r3, [r7, #4]
 8005350:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a1b      	ldr	r3, [r3, #32]
 8005356:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	685b      	ldr	r3, [r3, #4]
 800535c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	69db      	ldr	r3, [r3, #28]
 8005362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005364:	68fb      	ldr	r3, [r7, #12]
 8005366:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800536a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800536c:	68fb      	ldr	r3, [r7, #12]
 800536e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005372:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005374:	683b      	ldr	r3, [r7, #0]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	021b      	lsls	r3, r3, #8
 800537a:	68fa      	ldr	r2, [r7, #12]
 800537c:	4313      	orrs	r3, r2
 800537e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005380:	693b      	ldr	r3, [r7, #16]
 8005382:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005386:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005388:	683b      	ldr	r3, [r7, #0]
 800538a:	689b      	ldr	r3, [r3, #8]
 800538c:	031b      	lsls	r3, r3, #12
 800538e:	693a      	ldr	r2, [r7, #16]
 8005390:	4313      	orrs	r3, r2
 8005392:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	4a10      	ldr	r2, [pc, #64]	; (80053d8 <TIM_OC4_SetConfig+0x9c>)
 8005398:	4293      	cmp	r3, r2
 800539a:	d109      	bne.n	80053b0 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800539c:	697b      	ldr	r3, [r7, #20]
 800539e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80053a2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80053a4:	683b      	ldr	r3, [r7, #0]
 80053a6:	695b      	ldr	r3, [r3, #20]
 80053a8:	019b      	lsls	r3, r3, #6
 80053aa:	697a      	ldr	r2, [r7, #20]
 80053ac:	4313      	orrs	r3, r2
 80053ae:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	697a      	ldr	r2, [r7, #20]
 80053b4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	68fa      	ldr	r2, [r7, #12]
 80053ba:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80053bc:	683b      	ldr	r3, [r7, #0]
 80053be:	685a      	ldr	r2, [r3, #4]
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	693a      	ldr	r2, [r7, #16]
 80053c8:	621a      	str	r2, [r3, #32]
}
 80053ca:	bf00      	nop
 80053cc:	371c      	adds	r7, #28
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr
 80053d6:	bf00      	nop
 80053d8:	40010000 	.word	0x40010000

080053dc <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80053dc:	b480      	push	{r7}
 80053de:	b087      	sub	sp, #28
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	60f8      	str	r0, [r7, #12]
 80053e4:	60b9      	str	r1, [r7, #8]
 80053e6:	607a      	str	r2, [r7, #4]
 80053e8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80053ea:	68fb      	ldr	r3, [r7, #12]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
 80053ee:	f023 0201 	bic.w	r2, r3, #1
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	699b      	ldr	r3, [r3, #24]
 80053fa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	6a1b      	ldr	r3, [r3, #32]
 8005400:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	4a24      	ldr	r2, [pc, #144]	; (8005498 <TIM_TI1_SetConfig+0xbc>)
 8005406:	4293      	cmp	r3, r2
 8005408:	d013      	beq.n	8005432 <TIM_TI1_SetConfig+0x56>
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005410:	d00f      	beq.n	8005432 <TIM_TI1_SetConfig+0x56>
 8005412:	68fb      	ldr	r3, [r7, #12]
 8005414:	4a21      	ldr	r2, [pc, #132]	; (800549c <TIM_TI1_SetConfig+0xc0>)
 8005416:	4293      	cmp	r3, r2
 8005418:	d00b      	beq.n	8005432 <TIM_TI1_SetConfig+0x56>
 800541a:	68fb      	ldr	r3, [r7, #12]
 800541c:	4a20      	ldr	r2, [pc, #128]	; (80054a0 <TIM_TI1_SetConfig+0xc4>)
 800541e:	4293      	cmp	r3, r2
 8005420:	d007      	beq.n	8005432 <TIM_TI1_SetConfig+0x56>
 8005422:	68fb      	ldr	r3, [r7, #12]
 8005424:	4a1f      	ldr	r2, [pc, #124]	; (80054a4 <TIM_TI1_SetConfig+0xc8>)
 8005426:	4293      	cmp	r3, r2
 8005428:	d003      	beq.n	8005432 <TIM_TI1_SetConfig+0x56>
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	4a1e      	ldr	r2, [pc, #120]	; (80054a8 <TIM_TI1_SetConfig+0xcc>)
 800542e:	4293      	cmp	r3, r2
 8005430:	d101      	bne.n	8005436 <TIM_TI1_SetConfig+0x5a>
 8005432:	2301      	movs	r3, #1
 8005434:	e000      	b.n	8005438 <TIM_TI1_SetConfig+0x5c>
 8005436:	2300      	movs	r3, #0
 8005438:	2b00      	cmp	r3, #0
 800543a:	d008      	beq.n	800544e <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 800543c:	697b      	ldr	r3, [r7, #20]
 800543e:	f023 0303 	bic.w	r3, r3, #3
 8005442:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005444:	697a      	ldr	r2, [r7, #20]
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	4313      	orrs	r3, r2
 800544a:	617b      	str	r3, [r7, #20]
 800544c:	e003      	b.n	8005456 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800544e:	697b      	ldr	r3, [r7, #20]
 8005450:	f043 0301 	orr.w	r3, r3, #1
 8005454:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005456:	697b      	ldr	r3, [r7, #20]
 8005458:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800545c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800545e:	683b      	ldr	r3, [r7, #0]
 8005460:	011b      	lsls	r3, r3, #4
 8005462:	b2db      	uxtb	r3, r3
 8005464:	697a      	ldr	r2, [r7, #20]
 8005466:	4313      	orrs	r3, r2
 8005468:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800546a:	693b      	ldr	r3, [r7, #16]
 800546c:	f023 030a 	bic.w	r3, r3, #10
 8005470:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005472:	68bb      	ldr	r3, [r7, #8]
 8005474:	f003 030a 	and.w	r3, r3, #10
 8005478:	693a      	ldr	r2, [r7, #16]
 800547a:	4313      	orrs	r3, r2
 800547c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	697a      	ldr	r2, [r7, #20]
 8005482:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005484:	68fb      	ldr	r3, [r7, #12]
 8005486:	693a      	ldr	r2, [r7, #16]
 8005488:	621a      	str	r2, [r3, #32]
}
 800548a:	bf00      	nop
 800548c:	371c      	adds	r7, #28
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr
 8005496:	bf00      	nop
 8005498:	40010000 	.word	0x40010000
 800549c:	40000400 	.word	0x40000400
 80054a0:	40000800 	.word	0x40000800
 80054a4:	40000c00 	.word	0x40000c00
 80054a8:	40014000 	.word	0x40014000

080054ac <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80054ac:	b480      	push	{r7}
 80054ae:	b087      	sub	sp, #28
 80054b0:	af00      	add	r7, sp, #0
 80054b2:	60f8      	str	r0, [r7, #12]
 80054b4:	60b9      	str	r1, [r7, #8]
 80054b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80054b8:	68fb      	ldr	r3, [r7, #12]
 80054ba:	6a1b      	ldr	r3, [r3, #32]
 80054bc:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	6a1b      	ldr	r3, [r3, #32]
 80054c2:	f023 0201 	bic.w	r2, r3, #1
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80054ca:	68fb      	ldr	r3, [r7, #12]
 80054cc:	699b      	ldr	r3, [r3, #24]
 80054ce:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80054d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	011b      	lsls	r3, r3, #4
 80054dc:	693a      	ldr	r2, [r7, #16]
 80054de:	4313      	orrs	r3, r2
 80054e0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80054e2:	697b      	ldr	r3, [r7, #20]
 80054e4:	f023 030a 	bic.w	r3, r3, #10
 80054e8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80054ea:	697a      	ldr	r2, [r7, #20]
 80054ec:	68bb      	ldr	r3, [r7, #8]
 80054ee:	4313      	orrs	r3, r2
 80054f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	693a      	ldr	r2, [r7, #16]
 80054f6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80054f8:	68fb      	ldr	r3, [r7, #12]
 80054fa:	697a      	ldr	r2, [r7, #20]
 80054fc:	621a      	str	r2, [r3, #32]
}
 80054fe:	bf00      	nop
 8005500:	371c      	adds	r7, #28
 8005502:	46bd      	mov	sp, r7
 8005504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005508:	4770      	bx	lr

0800550a <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800550a:	b480      	push	{r7}
 800550c:	b087      	sub	sp, #28
 800550e:	af00      	add	r7, sp, #0
 8005510:	60f8      	str	r0, [r7, #12]
 8005512:	60b9      	str	r1, [r7, #8]
 8005514:	607a      	str	r2, [r7, #4]
 8005516:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	6a1b      	ldr	r3, [r3, #32]
 800551c:	f023 0210 	bic.w	r2, r3, #16
 8005520:	68fb      	ldr	r3, [r7, #12]
 8005522:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005524:	68fb      	ldr	r3, [r7, #12]
 8005526:	699b      	ldr	r3, [r3, #24]
 8005528:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800552a:	68fb      	ldr	r3, [r7, #12]
 800552c:	6a1b      	ldr	r3, [r3, #32]
 800552e:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005530:	697b      	ldr	r3, [r7, #20]
 8005532:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005536:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	021b      	lsls	r3, r3, #8
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	4313      	orrs	r3, r2
 8005540:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005542:	697b      	ldr	r3, [r7, #20]
 8005544:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005548:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800554a:	683b      	ldr	r3, [r7, #0]
 800554c:	031b      	lsls	r3, r3, #12
 800554e:	b29b      	uxth	r3, r3
 8005550:	697a      	ldr	r2, [r7, #20]
 8005552:	4313      	orrs	r3, r2
 8005554:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005556:	693b      	ldr	r3, [r7, #16]
 8005558:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800555c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800555e:	68bb      	ldr	r3, [r7, #8]
 8005560:	011b      	lsls	r3, r3, #4
 8005562:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005566:	693a      	ldr	r2, [r7, #16]
 8005568:	4313      	orrs	r3, r2
 800556a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800556c:	68fb      	ldr	r3, [r7, #12]
 800556e:	697a      	ldr	r2, [r7, #20]
 8005570:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005572:	68fb      	ldr	r3, [r7, #12]
 8005574:	693a      	ldr	r2, [r7, #16]
 8005576:	621a      	str	r2, [r3, #32]
}
 8005578:	bf00      	nop
 800557a:	371c      	adds	r7, #28
 800557c:	46bd      	mov	sp, r7
 800557e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005582:	4770      	bx	lr

08005584 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	6a1b      	ldr	r3, [r3, #32]
 8005594:	f023 0210 	bic.w	r2, r3, #16
 8005598:	68fb      	ldr	r3, [r7, #12]
 800559a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	699b      	ldr	r3, [r3, #24]
 80055a0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	6a1b      	ldr	r3, [r3, #32]
 80055a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80055a8:	697b      	ldr	r3, [r7, #20]
 80055aa:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80055ae:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80055b0:	687b      	ldr	r3, [r7, #4]
 80055b2:	031b      	lsls	r3, r3, #12
 80055b4:	697a      	ldr	r2, [r7, #20]
 80055b6:	4313      	orrs	r3, r2
 80055b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80055c0:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	011b      	lsls	r3, r3, #4
 80055c6:	693a      	ldr	r2, [r7, #16]
 80055c8:	4313      	orrs	r3, r2
 80055ca:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80055cc:	68fb      	ldr	r3, [r7, #12]
 80055ce:	697a      	ldr	r2, [r7, #20]
 80055d0:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80055d2:	68fb      	ldr	r3, [r7, #12]
 80055d4:	693a      	ldr	r2, [r7, #16]
 80055d6:	621a      	str	r2, [r3, #32]
}
 80055d8:	bf00      	nop
 80055da:	371c      	adds	r7, #28
 80055dc:	46bd      	mov	sp, r7
 80055de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e2:	4770      	bx	lr

080055e4 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80055e4:	b480      	push	{r7}
 80055e6:	b087      	sub	sp, #28
 80055e8:	af00      	add	r7, sp, #0
 80055ea:	60f8      	str	r0, [r7, #12]
 80055ec:	60b9      	str	r1, [r7, #8]
 80055ee:	607a      	str	r2, [r7, #4]
 80055f0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
 80055f6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80055fa:	68fb      	ldr	r3, [r7, #12]
 80055fc:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	69db      	ldr	r3, [r3, #28]
 8005602:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	6a1b      	ldr	r3, [r3, #32]
 8005608:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800560a:	697b      	ldr	r3, [r7, #20]
 800560c:	f023 0303 	bic.w	r3, r3, #3
 8005610:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005612:	697a      	ldr	r2, [r7, #20]
 8005614:	687b      	ldr	r3, [r7, #4]
 8005616:	4313      	orrs	r3, r2
 8005618:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800561a:	697b      	ldr	r3, [r7, #20]
 800561c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005620:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005622:	683b      	ldr	r3, [r7, #0]
 8005624:	011b      	lsls	r3, r3, #4
 8005626:	b2db      	uxtb	r3, r3
 8005628:	697a      	ldr	r2, [r7, #20]
 800562a:	4313      	orrs	r3, r2
 800562c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800562e:	693b      	ldr	r3, [r7, #16]
 8005630:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005634:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005636:	68bb      	ldr	r3, [r7, #8]
 8005638:	021b      	lsls	r3, r3, #8
 800563a:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800563e:	693a      	ldr	r2, [r7, #16]
 8005640:	4313      	orrs	r3, r2
 8005642:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	697a      	ldr	r2, [r7, #20]
 8005648:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800564a:	68fb      	ldr	r3, [r7, #12]
 800564c:	693a      	ldr	r2, [r7, #16]
 800564e:	621a      	str	r2, [r3, #32]
}
 8005650:	bf00      	nop
 8005652:	371c      	adds	r7, #28
 8005654:	46bd      	mov	sp, r7
 8005656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800565a:	4770      	bx	lr

0800565c <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800565c:	b480      	push	{r7}
 800565e:	b087      	sub	sp, #28
 8005660:	af00      	add	r7, sp, #0
 8005662:	60f8      	str	r0, [r7, #12]
 8005664:	60b9      	str	r1, [r7, #8]
 8005666:	607a      	str	r2, [r7, #4]
 8005668:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800566a:	68fb      	ldr	r3, [r7, #12]
 800566c:	6a1b      	ldr	r3, [r3, #32]
 800566e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005672:	68fb      	ldr	r3, [r7, #12]
 8005674:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005676:	68fb      	ldr	r3, [r7, #12]
 8005678:	69db      	ldr	r3, [r3, #28]
 800567a:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800567c:	68fb      	ldr	r3, [r7, #12]
 800567e:	6a1b      	ldr	r3, [r3, #32]
 8005680:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005682:	697b      	ldr	r3, [r7, #20]
 8005684:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005688:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	021b      	lsls	r3, r3, #8
 800568e:	697a      	ldr	r2, [r7, #20]
 8005690:	4313      	orrs	r3, r2
 8005692:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005694:	697b      	ldr	r3, [r7, #20]
 8005696:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800569a:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 800569c:	683b      	ldr	r3, [r7, #0]
 800569e:	031b      	lsls	r3, r3, #12
 80056a0:	b29b      	uxth	r3, r3
 80056a2:	697a      	ldr	r2, [r7, #20]
 80056a4:	4313      	orrs	r3, r2
 80056a6:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80056a8:	693b      	ldr	r3, [r7, #16]
 80056aa:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80056ae:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80056b0:	68bb      	ldr	r3, [r7, #8]
 80056b2:	031b      	lsls	r3, r3, #12
 80056b4:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80056b8:	693a      	ldr	r2, [r7, #16]
 80056ba:	4313      	orrs	r3, r2
 80056bc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	697a      	ldr	r2, [r7, #20]
 80056c2:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80056c4:	68fb      	ldr	r3, [r7, #12]
 80056c6:	693a      	ldr	r2, [r7, #16]
 80056c8:	621a      	str	r2, [r3, #32]
}
 80056ca:	bf00      	nop
 80056cc:	371c      	adds	r7, #28
 80056ce:	46bd      	mov	sp, r7
 80056d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056d4:	4770      	bx	lr

080056d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80056d6:	b480      	push	{r7}
 80056d8:	b085      	sub	sp, #20
 80056da:	af00      	add	r7, sp, #0
 80056dc:	6078      	str	r0, [r7, #4]
 80056de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	689b      	ldr	r3, [r3, #8]
 80056e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80056ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80056ee:	683a      	ldr	r2, [r7, #0]
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	4313      	orrs	r3, r2
 80056f4:	f043 0307 	orr.w	r3, r3, #7
 80056f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	68fa      	ldr	r2, [r7, #12]
 80056fe:	609a      	str	r2, [r3, #8]
}
 8005700:	bf00      	nop
 8005702:	3714      	adds	r7, #20
 8005704:	46bd      	mov	sp, r7
 8005706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800570a:	4770      	bx	lr

0800570c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800570c:	b480      	push	{r7}
 800570e:	b087      	sub	sp, #28
 8005710:	af00      	add	r7, sp, #0
 8005712:	60f8      	str	r0, [r7, #12]
 8005714:	60b9      	str	r1, [r7, #8]
 8005716:	607a      	str	r2, [r7, #4]
 8005718:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	689b      	ldr	r3, [r3, #8]
 800571e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005720:	697b      	ldr	r3, [r7, #20]
 8005722:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005726:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005728:	683b      	ldr	r3, [r7, #0]
 800572a:	021a      	lsls	r2, r3, #8
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	431a      	orrs	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	4313      	orrs	r3, r2
 8005734:	697a      	ldr	r2, [r7, #20]
 8005736:	4313      	orrs	r3, r2
 8005738:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	609a      	str	r2, [r3, #8]
}
 8005740:	bf00      	nop
 8005742:	371c      	adds	r7, #28
 8005744:	46bd      	mov	sp, r7
 8005746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800574a:	4770      	bx	lr

0800574c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800574c:	b480      	push	{r7}
 800574e:	b087      	sub	sp, #28
 8005750:	af00      	add	r7, sp, #0
 8005752:	60f8      	str	r0, [r7, #12]
 8005754:	60b9      	str	r1, [r7, #8]
 8005756:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8005758:	68bb      	ldr	r3, [r7, #8]
 800575a:	f003 031f 	and.w	r3, r3, #31
 800575e:	2201      	movs	r2, #1
 8005760:	fa02 f303 	lsl.w	r3, r2, r3
 8005764:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8005766:	68fb      	ldr	r3, [r7, #12]
 8005768:	6a1a      	ldr	r2, [r3, #32]
 800576a:	697b      	ldr	r3, [r7, #20]
 800576c:	43db      	mvns	r3, r3
 800576e:	401a      	ands	r2, r3
 8005770:	68fb      	ldr	r3, [r7, #12]
 8005772:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	6a1a      	ldr	r2, [r3, #32]
 8005778:	68bb      	ldr	r3, [r7, #8]
 800577a:	f003 031f 	and.w	r3, r3, #31
 800577e:	6879      	ldr	r1, [r7, #4]
 8005780:	fa01 f303 	lsl.w	r3, r1, r3
 8005784:	431a      	orrs	r2, r3
 8005786:	68fb      	ldr	r3, [r7, #12]
 8005788:	621a      	str	r2, [r3, #32]
}
 800578a:	bf00      	nop
 800578c:	371c      	adds	r7, #28
 800578e:	46bd      	mov	sp, r7
 8005790:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005794:	4770      	bx	lr
	...

08005798 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8005798:	b480      	push	{r7}
 800579a:	b085      	sub	sp, #20
 800579c:	af00      	add	r7, sp, #0
 800579e:	6078      	str	r0, [r7, #4]
 80057a0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80057a2:	687b      	ldr	r3, [r7, #4]
 80057a4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d101      	bne.n	80057b0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80057ac:	2302      	movs	r3, #2
 80057ae:	e050      	b.n	8005852 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	2201      	movs	r2, #1
 80057b4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	2202      	movs	r2, #2
 80057bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80057c0:	687b      	ldr	r3, [r7, #4]
 80057c2:	681b      	ldr	r3, [r3, #0]
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	689b      	ldr	r3, [r3, #8]
 80057ce:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80057d0:	68fb      	ldr	r3, [r7, #12]
 80057d2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80057d6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80057d8:	683b      	ldr	r3, [r7, #0]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	68fa      	ldr	r2, [r7, #12]
 80057de:	4313      	orrs	r3, r2
 80057e0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	68fa      	ldr	r2, [r7, #12]
 80057e8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	681b      	ldr	r3, [r3, #0]
 80057ee:	4a1c      	ldr	r2, [pc, #112]	; (8005860 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80057f0:	4293      	cmp	r3, r2
 80057f2:	d018      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80057fc:	d013      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	4a18      	ldr	r2, [pc, #96]	; (8005864 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8005804:	4293      	cmp	r3, r2
 8005806:	d00e      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a16      	ldr	r2, [pc, #88]	; (8005868 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d009      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	4a15      	ldr	r2, [pc, #84]	; (800586c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8005818:	4293      	cmp	r3, r2
 800581a:	d004      	beq.n	8005826 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	4a13      	ldr	r2, [pc, #76]	; (8005870 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8005822:	4293      	cmp	r3, r2
 8005824:	d10c      	bne.n	8005840 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8005826:	68bb      	ldr	r3, [r7, #8]
 8005828:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800582c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800582e:	683b      	ldr	r3, [r7, #0]
 8005830:	685b      	ldr	r3, [r3, #4]
 8005832:	68ba      	ldr	r2, [r7, #8]
 8005834:	4313      	orrs	r3, r2
 8005836:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	68ba      	ldr	r2, [r7, #8]
 800583e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2201      	movs	r2, #1
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	2200      	movs	r2, #0
 800584c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005850:	2300      	movs	r3, #0
}
 8005852:	4618      	mov	r0, r3
 8005854:	3714      	adds	r7, #20
 8005856:	46bd      	mov	sp, r7
 8005858:	f85d 7b04 	ldr.w	r7, [sp], #4
 800585c:	4770      	bx	lr
 800585e:	bf00      	nop
 8005860:	40010000 	.word	0x40010000
 8005864:	40000400 	.word	0x40000400
 8005868:	40000800 	.word	0x40000800
 800586c:	40000c00 	.word	0x40000c00
 8005870:	40014000 	.word	0x40014000

08005874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8005874:	b480      	push	{r7}
 8005876:	b083      	sub	sp, #12
 8005878:	af00      	add	r7, sp, #0
 800587a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800587c:	bf00      	nop
 800587e:	370c      	adds	r7, #12
 8005880:	46bd      	mov	sp, r7
 8005882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005886:	4770      	bx	lr

08005888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8005888:	b480      	push	{r7}
 800588a:	b083      	sub	sp, #12
 800588c:	af00      	add	r7, sp, #0
 800588e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8005890:	bf00      	nop
 8005892:	370c      	adds	r7, #12
 8005894:	46bd      	mov	sp, r7
 8005896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589a:	4770      	bx	lr

0800589c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800589c:	b580      	push	{r7, lr}
 800589e:	b082      	sub	sp, #8
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d101      	bne.n	80058ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80058aa:	2301      	movs	r3, #1
 80058ac:	e03f      	b.n	800592e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058b4:	b2db      	uxtb	r3, r3
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d106      	bne.n	80058c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80058ba:	687b      	ldr	r3, [r7, #4]
 80058bc:	2200      	movs	r2, #0
 80058be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80058c2:	6878      	ldr	r0, [r7, #4]
 80058c4:	f7fc fc24 	bl	8002110 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	2224      	movs	r2, #36	; 0x24
 80058cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	68da      	ldr	r2, [r3, #12]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80058e0:	6878      	ldr	r0, [r7, #4]
 80058e2:	f000 f897 	bl	8005a14 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	691a      	ldr	r2, [r3, #16]
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80058f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	695a      	ldr	r2, [r3, #20]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	68da      	ldr	r2, [r3, #12]
 800590c:	687b      	ldr	r3, [r7, #4]
 800590e:	681b      	ldr	r3, [r3, #0]
 8005910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8005914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	2200      	movs	r2, #0
 800591a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	2220      	movs	r2, #32
 8005920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	2220      	movs	r2, #32
 8005928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800592c:	2300      	movs	r3, #0
}
 800592e:	4618      	mov	r0, r3
 8005930:	3708      	adds	r7, #8
 8005932:	46bd      	mov	sp, r7
 8005934:	bd80      	pop	{r7, pc}

08005936 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b084      	sub	sp, #16
 800593a:	af00      	add	r7, sp, #0
 800593c:	60f8      	str	r0, [r7, #12]
 800593e:	60b9      	str	r1, [r7, #8]
 8005940:	4613      	mov	r3, r2
 8005942:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800594a:	b2db      	uxtb	r3, r3
 800594c:	2b20      	cmp	r3, #32
 800594e:	d11d      	bne.n	800598c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8005950:	68bb      	ldr	r3, [r7, #8]
 8005952:	2b00      	cmp	r3, #0
 8005954:	d002      	beq.n	800595c <HAL_UART_Receive_IT+0x26>
 8005956:	88fb      	ldrh	r3, [r7, #6]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d101      	bne.n	8005960 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800595c:	2301      	movs	r3, #1
 800595e:	e016      	b.n	800598e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8005960:	68fb      	ldr	r3, [r7, #12]
 8005962:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005966:	2b01      	cmp	r3, #1
 8005968:	d101      	bne.n	800596e <HAL_UART_Receive_IT+0x38>
 800596a:	2302      	movs	r3, #2
 800596c:	e00f      	b.n	800598e <HAL_UART_Receive_IT+0x58>
 800596e:	68fb      	ldr	r3, [r7, #12]
 8005970:	2201      	movs	r2, #1
 8005972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005976:	68fb      	ldr	r3, [r7, #12]
 8005978:	2200      	movs	r2, #0
 800597a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800597c:	88fb      	ldrh	r3, [r7, #6]
 800597e:	461a      	mov	r2, r3
 8005980:	68b9      	ldr	r1, [r7, #8]
 8005982:	68f8      	ldr	r0, [r7, #12]
 8005984:	f000 f807 	bl	8005996 <UART_Start_Receive_IT>
 8005988:	4603      	mov	r3, r0
 800598a:	e000      	b.n	800598e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800598c:	2302      	movs	r3, #2
  }
}
 800598e:	4618      	mov	r0, r3
 8005990:	3710      	adds	r7, #16
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}

08005996 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005996:	b480      	push	{r7}
 8005998:	b085      	sub	sp, #20
 800599a:	af00      	add	r7, sp, #0
 800599c:	60f8      	str	r0, [r7, #12]
 800599e:	60b9      	str	r1, [r7, #8]
 80059a0:	4613      	mov	r3, r2
 80059a2:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	88fa      	ldrh	r2, [r7, #6]
 80059ae:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	88fa      	ldrh	r2, [r7, #6]
 80059b4:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80059b6:	68fb      	ldr	r3, [r7, #12]
 80059b8:	2200      	movs	r2, #0
 80059ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2222      	movs	r2, #34	; 0x22
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	2200      	movs	r2, #0
 80059c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	691b      	ldr	r3, [r3, #16]
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d007      	beq.n	80059e4 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80059d4:	68fb      	ldr	r3, [r7, #12]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	68da      	ldr	r2, [r3, #12]
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	681b      	ldr	r3, [r3, #0]
 80059de:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80059e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	681b      	ldr	r3, [r3, #0]
 80059e8:	695a      	ldr	r2, [r3, #20]
 80059ea:	68fb      	ldr	r3, [r7, #12]
 80059ec:	681b      	ldr	r3, [r3, #0]
 80059ee:	f042 0201 	orr.w	r2, r2, #1
 80059f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	681b      	ldr	r3, [r3, #0]
 80059f8:	68da      	ldr	r2, [r3, #12]
 80059fa:	68fb      	ldr	r3, [r7, #12]
 80059fc:	681b      	ldr	r3, [r3, #0]
 80059fe:	f042 0220 	orr.w	r2, r2, #32
 8005a02:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005a04:	2300      	movs	r3, #0
}
 8005a06:	4618      	mov	r0, r3
 8005a08:	3714      	adds	r7, #20
 8005a0a:	46bd      	mov	sp, r7
 8005a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a10:	4770      	bx	lr
	...

08005a14 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005a18:	b0c0      	sub	sp, #256	; 0x100
 8005a1a:	af00      	add	r7, sp, #0
 8005a1c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a24:	681b      	ldr	r3, [r3, #0]
 8005a26:	691b      	ldr	r3, [r3, #16]
 8005a28:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8005a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a30:	68d9      	ldr	r1, [r3, #12]
 8005a32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a36:	681a      	ldr	r2, [r3, #0]
 8005a38:	ea40 0301 	orr.w	r3, r0, r1
 8005a3c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a42:	689a      	ldr	r2, [r3, #8]
 8005a44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	431a      	orrs	r2, r3
 8005a4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a50:	695b      	ldr	r3, [r3, #20]
 8005a52:	431a      	orrs	r2, r3
 8005a54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a58:	69db      	ldr	r3, [r3, #28]
 8005a5a:	4313      	orrs	r3, r2
 8005a5c:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a64:	681b      	ldr	r3, [r3, #0]
 8005a66:	68db      	ldr	r3, [r3, #12]
 8005a68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8005a6c:	f021 010c 	bic.w	r1, r1, #12
 8005a70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a74:	681a      	ldr	r2, [r3, #0]
 8005a76:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8005a7a:	430b      	orrs	r3, r1
 8005a7c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005a7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	695b      	ldr	r3, [r3, #20]
 8005a86:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8005a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a8e:	6999      	ldr	r1, [r3, #24]
 8005a90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005a94:	681a      	ldr	r2, [r3, #0]
 8005a96:	ea40 0301 	orr.w	r3, r0, r1
 8005a9a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aa0:	681a      	ldr	r2, [r3, #0]
 8005aa2:	4b8f      	ldr	r3, [pc, #572]	; (8005ce0 <UART_SetConfig+0x2cc>)
 8005aa4:	429a      	cmp	r2, r3
 8005aa6:	d005      	beq.n	8005ab4 <UART_SetConfig+0xa0>
 8005aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aac:	681a      	ldr	r2, [r3, #0]
 8005aae:	4b8d      	ldr	r3, [pc, #564]	; (8005ce4 <UART_SetConfig+0x2d0>)
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d104      	bne.n	8005abe <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005ab4:	f7fe f854 	bl	8003b60 <HAL_RCC_GetPCLK2Freq>
 8005ab8:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8005abc:	e003      	b.n	8005ac6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005abe:	f7fe f83b 	bl	8003b38 <HAL_RCC_GetPCLK1Freq>
 8005ac2:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005aca:	69db      	ldr	r3, [r3, #28]
 8005acc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005ad0:	f040 810c 	bne.w	8005cec <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005ad4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005ad8:	2200      	movs	r2, #0
 8005ada:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8005ade:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8005ae2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8005ae6:	4622      	mov	r2, r4
 8005ae8:	462b      	mov	r3, r5
 8005aea:	1891      	adds	r1, r2, r2
 8005aec:	65b9      	str	r1, [r7, #88]	; 0x58
 8005aee:	415b      	adcs	r3, r3
 8005af0:	65fb      	str	r3, [r7, #92]	; 0x5c
 8005af2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8005af6:	4621      	mov	r1, r4
 8005af8:	eb12 0801 	adds.w	r8, r2, r1
 8005afc:	4629      	mov	r1, r5
 8005afe:	eb43 0901 	adc.w	r9, r3, r1
 8005b02:	f04f 0200 	mov.w	r2, #0
 8005b06:	f04f 0300 	mov.w	r3, #0
 8005b0a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005b0e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005b12:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005b16:	4690      	mov	r8, r2
 8005b18:	4699      	mov	r9, r3
 8005b1a:	4623      	mov	r3, r4
 8005b1c:	eb18 0303 	adds.w	r3, r8, r3
 8005b20:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8005b24:	462b      	mov	r3, r5
 8005b26:	eb49 0303 	adc.w	r3, r9, r3
 8005b2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8005b2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005b32:	685b      	ldr	r3, [r3, #4]
 8005b34:	2200      	movs	r2, #0
 8005b36:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8005b3a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8005b3e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8005b42:	460b      	mov	r3, r1
 8005b44:	18db      	adds	r3, r3, r3
 8005b46:	653b      	str	r3, [r7, #80]	; 0x50
 8005b48:	4613      	mov	r3, r2
 8005b4a:	eb42 0303 	adc.w	r3, r2, r3
 8005b4e:	657b      	str	r3, [r7, #84]	; 0x54
 8005b50:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8005b54:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8005b58:	f7fa fb44 	bl	80001e4 <__aeabi_uldivmod>
 8005b5c:	4602      	mov	r2, r0
 8005b5e:	460b      	mov	r3, r1
 8005b60:	4b61      	ldr	r3, [pc, #388]	; (8005ce8 <UART_SetConfig+0x2d4>)
 8005b62:	fba3 2302 	umull	r2, r3, r3, r2
 8005b66:	095b      	lsrs	r3, r3, #5
 8005b68:	011c      	lsls	r4, r3, #4
 8005b6a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005b6e:	2200      	movs	r2, #0
 8005b70:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8005b74:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8005b78:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8005b7c:	4642      	mov	r2, r8
 8005b7e:	464b      	mov	r3, r9
 8005b80:	1891      	adds	r1, r2, r2
 8005b82:	64b9      	str	r1, [r7, #72]	; 0x48
 8005b84:	415b      	adcs	r3, r3
 8005b86:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005b88:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8005b8c:	4641      	mov	r1, r8
 8005b8e:	eb12 0a01 	adds.w	sl, r2, r1
 8005b92:	4649      	mov	r1, r9
 8005b94:	eb43 0b01 	adc.w	fp, r3, r1
 8005b98:	f04f 0200 	mov.w	r2, #0
 8005b9c:	f04f 0300 	mov.w	r3, #0
 8005ba0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005ba4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005ba8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005bac:	4692      	mov	sl, r2
 8005bae:	469b      	mov	fp, r3
 8005bb0:	4643      	mov	r3, r8
 8005bb2:	eb1a 0303 	adds.w	r3, sl, r3
 8005bb6:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8005bba:	464b      	mov	r3, r9
 8005bbc:	eb4b 0303 	adc.w	r3, fp, r3
 8005bc0:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8005bc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005bc8:	685b      	ldr	r3, [r3, #4]
 8005bca:	2200      	movs	r2, #0
 8005bcc:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8005bd0:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8005bd4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8005bd8:	460b      	mov	r3, r1
 8005bda:	18db      	adds	r3, r3, r3
 8005bdc:	643b      	str	r3, [r7, #64]	; 0x40
 8005bde:	4613      	mov	r3, r2
 8005be0:	eb42 0303 	adc.w	r3, r2, r3
 8005be4:	647b      	str	r3, [r7, #68]	; 0x44
 8005be6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8005bea:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8005bee:	f7fa faf9 	bl	80001e4 <__aeabi_uldivmod>
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	4611      	mov	r1, r2
 8005bf8:	4b3b      	ldr	r3, [pc, #236]	; (8005ce8 <UART_SetConfig+0x2d4>)
 8005bfa:	fba3 2301 	umull	r2, r3, r3, r1
 8005bfe:	095b      	lsrs	r3, r3, #5
 8005c00:	2264      	movs	r2, #100	; 0x64
 8005c02:	fb02 f303 	mul.w	r3, r2, r3
 8005c06:	1acb      	subs	r3, r1, r3
 8005c08:	00db      	lsls	r3, r3, #3
 8005c0a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8005c0e:	4b36      	ldr	r3, [pc, #216]	; (8005ce8 <UART_SetConfig+0x2d4>)
 8005c10:	fba3 2302 	umull	r2, r3, r3, r2
 8005c14:	095b      	lsrs	r3, r3, #5
 8005c16:	005b      	lsls	r3, r3, #1
 8005c18:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8005c1c:	441c      	add	r4, r3
 8005c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005c22:	2200      	movs	r2, #0
 8005c24:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8005c28:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8005c2c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8005c30:	4642      	mov	r2, r8
 8005c32:	464b      	mov	r3, r9
 8005c34:	1891      	adds	r1, r2, r2
 8005c36:	63b9      	str	r1, [r7, #56]	; 0x38
 8005c38:	415b      	adcs	r3, r3
 8005c3a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c3c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005c40:	4641      	mov	r1, r8
 8005c42:	1851      	adds	r1, r2, r1
 8005c44:	6339      	str	r1, [r7, #48]	; 0x30
 8005c46:	4649      	mov	r1, r9
 8005c48:	414b      	adcs	r3, r1
 8005c4a:	637b      	str	r3, [r7, #52]	; 0x34
 8005c4c:	f04f 0200 	mov.w	r2, #0
 8005c50:	f04f 0300 	mov.w	r3, #0
 8005c54:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8005c58:	4659      	mov	r1, fp
 8005c5a:	00cb      	lsls	r3, r1, #3
 8005c5c:	4651      	mov	r1, sl
 8005c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005c62:	4651      	mov	r1, sl
 8005c64:	00ca      	lsls	r2, r1, #3
 8005c66:	4610      	mov	r0, r2
 8005c68:	4619      	mov	r1, r3
 8005c6a:	4603      	mov	r3, r0
 8005c6c:	4642      	mov	r2, r8
 8005c6e:	189b      	adds	r3, r3, r2
 8005c70:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8005c74:	464b      	mov	r3, r9
 8005c76:	460a      	mov	r2, r1
 8005c78:	eb42 0303 	adc.w	r3, r2, r3
 8005c7c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8005c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005c84:	685b      	ldr	r3, [r3, #4]
 8005c86:	2200      	movs	r2, #0
 8005c88:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8005c8c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8005c90:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8005c94:	460b      	mov	r3, r1
 8005c96:	18db      	adds	r3, r3, r3
 8005c98:	62bb      	str	r3, [r7, #40]	; 0x28
 8005c9a:	4613      	mov	r3, r2
 8005c9c:	eb42 0303 	adc.w	r3, r2, r3
 8005ca0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005ca2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8005ca6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8005caa:	f7fa fa9b 	bl	80001e4 <__aeabi_uldivmod>
 8005cae:	4602      	mov	r2, r0
 8005cb0:	460b      	mov	r3, r1
 8005cb2:	4b0d      	ldr	r3, [pc, #52]	; (8005ce8 <UART_SetConfig+0x2d4>)
 8005cb4:	fba3 1302 	umull	r1, r3, r3, r2
 8005cb8:	095b      	lsrs	r3, r3, #5
 8005cba:	2164      	movs	r1, #100	; 0x64
 8005cbc:	fb01 f303 	mul.w	r3, r1, r3
 8005cc0:	1ad3      	subs	r3, r2, r3
 8005cc2:	00db      	lsls	r3, r3, #3
 8005cc4:	3332      	adds	r3, #50	; 0x32
 8005cc6:	4a08      	ldr	r2, [pc, #32]	; (8005ce8 <UART_SetConfig+0x2d4>)
 8005cc8:	fba2 2303 	umull	r2, r3, r2, r3
 8005ccc:	095b      	lsrs	r3, r3, #5
 8005cce:	f003 0207 	and.w	r2, r3, #7
 8005cd2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4422      	add	r2, r4
 8005cda:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005cdc:	e105      	b.n	8005eea <UART_SetConfig+0x4d6>
 8005cde:	bf00      	nop
 8005ce0:	40011000 	.word	0x40011000
 8005ce4:	40011400 	.word	0x40011400
 8005ce8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005cec:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005cf0:	2200      	movs	r2, #0
 8005cf2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8005cf6:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8005cfa:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8005cfe:	4642      	mov	r2, r8
 8005d00:	464b      	mov	r3, r9
 8005d02:	1891      	adds	r1, r2, r2
 8005d04:	6239      	str	r1, [r7, #32]
 8005d06:	415b      	adcs	r3, r3
 8005d08:	627b      	str	r3, [r7, #36]	; 0x24
 8005d0a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005d0e:	4641      	mov	r1, r8
 8005d10:	1854      	adds	r4, r2, r1
 8005d12:	4649      	mov	r1, r9
 8005d14:	eb43 0501 	adc.w	r5, r3, r1
 8005d18:	f04f 0200 	mov.w	r2, #0
 8005d1c:	f04f 0300 	mov.w	r3, #0
 8005d20:	00eb      	lsls	r3, r5, #3
 8005d22:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005d26:	00e2      	lsls	r2, r4, #3
 8005d28:	4614      	mov	r4, r2
 8005d2a:	461d      	mov	r5, r3
 8005d2c:	4643      	mov	r3, r8
 8005d2e:	18e3      	adds	r3, r4, r3
 8005d30:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8005d34:	464b      	mov	r3, r9
 8005d36:	eb45 0303 	adc.w	r3, r5, r3
 8005d3a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8005d3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005d42:	685b      	ldr	r3, [r3, #4]
 8005d44:	2200      	movs	r2, #0
 8005d46:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8005d4a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8005d4e:	f04f 0200 	mov.w	r2, #0
 8005d52:	f04f 0300 	mov.w	r3, #0
 8005d56:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8005d5a:	4629      	mov	r1, r5
 8005d5c:	008b      	lsls	r3, r1, #2
 8005d5e:	4621      	mov	r1, r4
 8005d60:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005d64:	4621      	mov	r1, r4
 8005d66:	008a      	lsls	r2, r1, #2
 8005d68:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8005d6c:	f7fa fa3a 	bl	80001e4 <__aeabi_uldivmod>
 8005d70:	4602      	mov	r2, r0
 8005d72:	460b      	mov	r3, r1
 8005d74:	4b60      	ldr	r3, [pc, #384]	; (8005ef8 <UART_SetConfig+0x4e4>)
 8005d76:	fba3 2302 	umull	r2, r3, r3, r2
 8005d7a:	095b      	lsrs	r3, r3, #5
 8005d7c:	011c      	lsls	r4, r3, #4
 8005d7e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005d82:	2200      	movs	r2, #0
 8005d84:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8005d88:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8005d8c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8005d90:	4642      	mov	r2, r8
 8005d92:	464b      	mov	r3, r9
 8005d94:	1891      	adds	r1, r2, r2
 8005d96:	61b9      	str	r1, [r7, #24]
 8005d98:	415b      	adcs	r3, r3
 8005d9a:	61fb      	str	r3, [r7, #28]
 8005d9c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005da0:	4641      	mov	r1, r8
 8005da2:	1851      	adds	r1, r2, r1
 8005da4:	6139      	str	r1, [r7, #16]
 8005da6:	4649      	mov	r1, r9
 8005da8:	414b      	adcs	r3, r1
 8005daa:	617b      	str	r3, [r7, #20]
 8005dac:	f04f 0200 	mov.w	r2, #0
 8005db0:	f04f 0300 	mov.w	r3, #0
 8005db4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005db8:	4659      	mov	r1, fp
 8005dba:	00cb      	lsls	r3, r1, #3
 8005dbc:	4651      	mov	r1, sl
 8005dbe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005dc2:	4651      	mov	r1, sl
 8005dc4:	00ca      	lsls	r2, r1, #3
 8005dc6:	4610      	mov	r0, r2
 8005dc8:	4619      	mov	r1, r3
 8005dca:	4603      	mov	r3, r0
 8005dcc:	4642      	mov	r2, r8
 8005dce:	189b      	adds	r3, r3, r2
 8005dd0:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005dd4:	464b      	mov	r3, r9
 8005dd6:	460a      	mov	r2, r1
 8005dd8:	eb42 0303 	adc.w	r3, r2, r3
 8005ddc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8005de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005de4:	685b      	ldr	r3, [r3, #4]
 8005de6:	2200      	movs	r2, #0
 8005de8:	67bb      	str	r3, [r7, #120]	; 0x78
 8005dea:	67fa      	str	r2, [r7, #124]	; 0x7c
 8005dec:	f04f 0200 	mov.w	r2, #0
 8005df0:	f04f 0300 	mov.w	r3, #0
 8005df4:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8005df8:	4649      	mov	r1, r9
 8005dfa:	008b      	lsls	r3, r1, #2
 8005dfc:	4641      	mov	r1, r8
 8005dfe:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005e02:	4641      	mov	r1, r8
 8005e04:	008a      	lsls	r2, r1, #2
 8005e06:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8005e0a:	f7fa f9eb 	bl	80001e4 <__aeabi_uldivmod>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4b39      	ldr	r3, [pc, #228]	; (8005ef8 <UART_SetConfig+0x4e4>)
 8005e14:	fba3 1302 	umull	r1, r3, r3, r2
 8005e18:	095b      	lsrs	r3, r3, #5
 8005e1a:	2164      	movs	r1, #100	; 0x64
 8005e1c:	fb01 f303 	mul.w	r3, r1, r3
 8005e20:	1ad3      	subs	r3, r2, r3
 8005e22:	011b      	lsls	r3, r3, #4
 8005e24:	3332      	adds	r3, #50	; 0x32
 8005e26:	4a34      	ldr	r2, [pc, #208]	; (8005ef8 <UART_SetConfig+0x4e4>)
 8005e28:	fba2 2303 	umull	r2, r3, r2, r3
 8005e2c:	095b      	lsrs	r3, r3, #5
 8005e2e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8005e32:	441c      	add	r4, r3
 8005e34:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8005e38:	2200      	movs	r2, #0
 8005e3a:	673b      	str	r3, [r7, #112]	; 0x70
 8005e3c:	677a      	str	r2, [r7, #116]	; 0x74
 8005e3e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8005e42:	4642      	mov	r2, r8
 8005e44:	464b      	mov	r3, r9
 8005e46:	1891      	adds	r1, r2, r2
 8005e48:	60b9      	str	r1, [r7, #8]
 8005e4a:	415b      	adcs	r3, r3
 8005e4c:	60fb      	str	r3, [r7, #12]
 8005e4e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005e52:	4641      	mov	r1, r8
 8005e54:	1851      	adds	r1, r2, r1
 8005e56:	6039      	str	r1, [r7, #0]
 8005e58:	4649      	mov	r1, r9
 8005e5a:	414b      	adcs	r3, r1
 8005e5c:	607b      	str	r3, [r7, #4]
 8005e5e:	f04f 0200 	mov.w	r2, #0
 8005e62:	f04f 0300 	mov.w	r3, #0
 8005e66:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005e6a:	4659      	mov	r1, fp
 8005e6c:	00cb      	lsls	r3, r1, #3
 8005e6e:	4651      	mov	r1, sl
 8005e70:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005e74:	4651      	mov	r1, sl
 8005e76:	00ca      	lsls	r2, r1, #3
 8005e78:	4610      	mov	r0, r2
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	4603      	mov	r3, r0
 8005e7e:	4642      	mov	r2, r8
 8005e80:	189b      	adds	r3, r3, r2
 8005e82:	66bb      	str	r3, [r7, #104]	; 0x68
 8005e84:	464b      	mov	r3, r9
 8005e86:	460a      	mov	r2, r1
 8005e88:	eb42 0303 	adc.w	r3, r2, r3
 8005e8c:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005e92:	685b      	ldr	r3, [r3, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	663b      	str	r3, [r7, #96]	; 0x60
 8005e98:	667a      	str	r2, [r7, #100]	; 0x64
 8005e9a:	f04f 0200 	mov.w	r2, #0
 8005e9e:	f04f 0300 	mov.w	r3, #0
 8005ea2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8005ea6:	4649      	mov	r1, r9
 8005ea8:	008b      	lsls	r3, r1, #2
 8005eaa:	4641      	mov	r1, r8
 8005eac:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005eb0:	4641      	mov	r1, r8
 8005eb2:	008a      	lsls	r2, r1, #2
 8005eb4:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8005eb8:	f7fa f994 	bl	80001e4 <__aeabi_uldivmod>
 8005ebc:	4602      	mov	r2, r0
 8005ebe:	460b      	mov	r3, r1
 8005ec0:	4b0d      	ldr	r3, [pc, #52]	; (8005ef8 <UART_SetConfig+0x4e4>)
 8005ec2:	fba3 1302 	umull	r1, r3, r3, r2
 8005ec6:	095b      	lsrs	r3, r3, #5
 8005ec8:	2164      	movs	r1, #100	; 0x64
 8005eca:	fb01 f303 	mul.w	r3, r1, r3
 8005ece:	1ad3      	subs	r3, r2, r3
 8005ed0:	011b      	lsls	r3, r3, #4
 8005ed2:	3332      	adds	r3, #50	; 0x32
 8005ed4:	4a08      	ldr	r2, [pc, #32]	; (8005ef8 <UART_SetConfig+0x4e4>)
 8005ed6:	fba2 2303 	umull	r2, r3, r2, r3
 8005eda:	095b      	lsrs	r3, r3, #5
 8005edc:	f003 020f 	and.w	r2, r3, #15
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	4422      	add	r2, r4
 8005ee8:	609a      	str	r2, [r3, #8]
}
 8005eea:	bf00      	nop
 8005eec:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8005ef0:	46bd      	mov	sp, r7
 8005ef2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005ef6:	bf00      	nop
 8005ef8:	51eb851f 	.word	0x51eb851f

08005efc <__libc_init_array>:
 8005efc:	b570      	push	{r4, r5, r6, lr}
 8005efe:	4d0d      	ldr	r5, [pc, #52]	; (8005f34 <__libc_init_array+0x38>)
 8005f00:	4c0d      	ldr	r4, [pc, #52]	; (8005f38 <__libc_init_array+0x3c>)
 8005f02:	1b64      	subs	r4, r4, r5
 8005f04:	10a4      	asrs	r4, r4, #2
 8005f06:	2600      	movs	r6, #0
 8005f08:	42a6      	cmp	r6, r4
 8005f0a:	d109      	bne.n	8005f20 <__libc_init_array+0x24>
 8005f0c:	4d0b      	ldr	r5, [pc, #44]	; (8005f3c <__libc_init_array+0x40>)
 8005f0e:	4c0c      	ldr	r4, [pc, #48]	; (8005f40 <__libc_init_array+0x44>)
 8005f10:	f000 f894 	bl	800603c <_init>
 8005f14:	1b64      	subs	r4, r4, r5
 8005f16:	10a4      	asrs	r4, r4, #2
 8005f18:	2600      	movs	r6, #0
 8005f1a:	42a6      	cmp	r6, r4
 8005f1c:	d105      	bne.n	8005f2a <__libc_init_array+0x2e>
 8005f1e:	bd70      	pop	{r4, r5, r6, pc}
 8005f20:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f24:	4798      	blx	r3
 8005f26:	3601      	adds	r6, #1
 8005f28:	e7ee      	b.n	8005f08 <__libc_init_array+0xc>
 8005f2a:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f2e:	4798      	blx	r3
 8005f30:	3601      	adds	r6, #1
 8005f32:	e7f2      	b.n	8005f1a <__libc_init_array+0x1e>
 8005f34:	0800610c 	.word	0x0800610c
 8005f38:	0800610c 	.word	0x0800610c
 8005f3c:	0800610c 	.word	0x0800610c
 8005f40:	08006110 	.word	0x08006110

08005f44 <__itoa>:
 8005f44:	1e93      	subs	r3, r2, #2
 8005f46:	2b22      	cmp	r3, #34	; 0x22
 8005f48:	b510      	push	{r4, lr}
 8005f4a:	460c      	mov	r4, r1
 8005f4c:	d904      	bls.n	8005f58 <__itoa+0x14>
 8005f4e:	2300      	movs	r3, #0
 8005f50:	700b      	strb	r3, [r1, #0]
 8005f52:	461c      	mov	r4, r3
 8005f54:	4620      	mov	r0, r4
 8005f56:	bd10      	pop	{r4, pc}
 8005f58:	2a0a      	cmp	r2, #10
 8005f5a:	d109      	bne.n	8005f70 <__itoa+0x2c>
 8005f5c:	2800      	cmp	r0, #0
 8005f5e:	da07      	bge.n	8005f70 <__itoa+0x2c>
 8005f60:	232d      	movs	r3, #45	; 0x2d
 8005f62:	700b      	strb	r3, [r1, #0]
 8005f64:	4240      	negs	r0, r0
 8005f66:	2101      	movs	r1, #1
 8005f68:	4421      	add	r1, r4
 8005f6a:	f000 f825 	bl	8005fb8 <__utoa>
 8005f6e:	e7f1      	b.n	8005f54 <__itoa+0x10>
 8005f70:	2100      	movs	r1, #0
 8005f72:	e7f9      	b.n	8005f68 <__itoa+0x24>

08005f74 <itoa>:
 8005f74:	f7ff bfe6 	b.w	8005f44 <__itoa>

08005f78 <memset>:
 8005f78:	4402      	add	r2, r0
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	4293      	cmp	r3, r2
 8005f7e:	d100      	bne.n	8005f82 <memset+0xa>
 8005f80:	4770      	bx	lr
 8005f82:	f803 1b01 	strb.w	r1, [r3], #1
 8005f86:	e7f9      	b.n	8005f7c <memset+0x4>

08005f88 <strcat>:
 8005f88:	b510      	push	{r4, lr}
 8005f8a:	4602      	mov	r2, r0
 8005f8c:	7814      	ldrb	r4, [r2, #0]
 8005f8e:	4613      	mov	r3, r2
 8005f90:	3201      	adds	r2, #1
 8005f92:	2c00      	cmp	r4, #0
 8005f94:	d1fa      	bne.n	8005f8c <strcat+0x4>
 8005f96:	3b01      	subs	r3, #1
 8005f98:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005f9c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8005fa0:	2a00      	cmp	r2, #0
 8005fa2:	d1f9      	bne.n	8005f98 <strcat+0x10>
 8005fa4:	bd10      	pop	{r4, pc}

08005fa6 <strcpy>:
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	f811 2b01 	ldrb.w	r2, [r1], #1
 8005fac:	f803 2b01 	strb.w	r2, [r3], #1
 8005fb0:	2a00      	cmp	r2, #0
 8005fb2:	d1f9      	bne.n	8005fa8 <strcpy+0x2>
 8005fb4:	4770      	bx	lr
	...

08005fb8 <__utoa>:
 8005fb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005fba:	4c1f      	ldr	r4, [pc, #124]	; (8006038 <__utoa+0x80>)
 8005fbc:	b08b      	sub	sp, #44	; 0x2c
 8005fbe:	4605      	mov	r5, r0
 8005fc0:	460b      	mov	r3, r1
 8005fc2:	466e      	mov	r6, sp
 8005fc4:	f104 0c20 	add.w	ip, r4, #32
 8005fc8:	6820      	ldr	r0, [r4, #0]
 8005fca:	6861      	ldr	r1, [r4, #4]
 8005fcc:	4637      	mov	r7, r6
 8005fce:	c703      	stmia	r7!, {r0, r1}
 8005fd0:	3408      	adds	r4, #8
 8005fd2:	4564      	cmp	r4, ip
 8005fd4:	463e      	mov	r6, r7
 8005fd6:	d1f7      	bne.n	8005fc8 <__utoa+0x10>
 8005fd8:	7921      	ldrb	r1, [r4, #4]
 8005fda:	7139      	strb	r1, [r7, #4]
 8005fdc:	1e91      	subs	r1, r2, #2
 8005fde:	6820      	ldr	r0, [r4, #0]
 8005fe0:	6038      	str	r0, [r7, #0]
 8005fe2:	2922      	cmp	r1, #34	; 0x22
 8005fe4:	f04f 0100 	mov.w	r1, #0
 8005fe8:	d904      	bls.n	8005ff4 <__utoa+0x3c>
 8005fea:	7019      	strb	r1, [r3, #0]
 8005fec:	460b      	mov	r3, r1
 8005fee:	4618      	mov	r0, r3
 8005ff0:	b00b      	add	sp, #44	; 0x2c
 8005ff2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ff4:	1e58      	subs	r0, r3, #1
 8005ff6:	4684      	mov	ip, r0
 8005ff8:	fbb5 f7f2 	udiv	r7, r5, r2
 8005ffc:	fb02 5617 	mls	r6, r2, r7, r5
 8006000:	3628      	adds	r6, #40	; 0x28
 8006002:	446e      	add	r6, sp
 8006004:	460c      	mov	r4, r1
 8006006:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 800600a:	f80c 6f01 	strb.w	r6, [ip, #1]!
 800600e:	462e      	mov	r6, r5
 8006010:	42b2      	cmp	r2, r6
 8006012:	f101 0101 	add.w	r1, r1, #1
 8006016:	463d      	mov	r5, r7
 8006018:	d9ee      	bls.n	8005ff8 <__utoa+0x40>
 800601a:	2200      	movs	r2, #0
 800601c:	545a      	strb	r2, [r3, r1]
 800601e:	1919      	adds	r1, r3, r4
 8006020:	1aa5      	subs	r5, r4, r2
 8006022:	42aa      	cmp	r2, r5
 8006024:	dae3      	bge.n	8005fee <__utoa+0x36>
 8006026:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 800602a:	780e      	ldrb	r6, [r1, #0]
 800602c:	7006      	strb	r6, [r0, #0]
 800602e:	3201      	adds	r2, #1
 8006030:	f801 5901 	strb.w	r5, [r1], #-1
 8006034:	e7f4      	b.n	8006020 <__utoa+0x68>
 8006036:	bf00      	nop
 8006038:	080060dc 	.word	0x080060dc

0800603c <_init>:
 800603c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603e:	bf00      	nop
 8006040:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006042:	bc08      	pop	{r3}
 8006044:	469e      	mov	lr, r3
 8006046:	4770      	bx	lr

08006048 <_fini>:
 8006048:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800604a:	bf00      	nop
 800604c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800604e:	bc08      	pop	{r3}
 8006050:	469e      	mov	lr, r3
 8006052:	4770      	bx	lr
