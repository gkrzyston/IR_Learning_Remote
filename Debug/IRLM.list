
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006788  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000b0  0800691c  0800691c  0001691c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080069cc  080069cc  0002144c  2**0
                  CONTENTS
  4 .ARM          00000008  080069cc  080069cc  000169cc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080069d4  080069d4  0002144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080069d4  080069d4  000169d4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080069d8  080069d8  000169d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000144c  20000000  080069dc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00005bc8  2000144c  08007e28  0002144c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20007014  08007e28  00027014  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002144c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015762  00000000  00000000  0002147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002a1d  00000000  00000000  00036bde  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001310  00000000  00000000  00039600  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001250  00000000  00000000  0003a910  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a9d  00000000  00000000  0003bb60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016d38  00000000  00000000  000545fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ccad  00000000  00000000  0006b335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00107fe2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005290  00000000  00000000  00108034  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000144c 	.word	0x2000144c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006904 	.word	0x08006904

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001450 	.word	0x20001450
 80001d0:	08006904 	.word	0x08006904

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <disable_button_EEPROM_writes>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

void disable_button_EEPROM_writes(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 80004ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004f2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 2, HAL_MAX_DELAY);
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	21a0      	movs	r1, #160	; 0xa0
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <disable_button_EEPROM_writes+0x28>)
 8000502:	f003 f805 	bl	8003510 <HAL_I2C_Master_Transmit>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200014b0 	.word	0x200014b0

08000514 <initialize_buttons>:

// Initialize Buttons
void initialize_buttons(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	disable_button_EEPROM_writes();
 8000518:	f7ff ffe6 	bl	80004e8 <disable_button_EEPROM_writes>
	enable_all_buttons();
 800051c:	f000 f89a 	bl	8000654 <enable_all_buttons>
	update_buttons();
 8000520:	f000 f8ae 	bl	8000680 <update_buttons>
	HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f002 f815 	bl	8002554 <HAL_Delay>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <enable_button>:

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01e      	beq.n	800057e <enable_button+0x4e>
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b09      	cmp	r3, #9
 8000544:	d107      	bne.n	8000556 <enable_button+0x26>
		io_ctrl_2 &= ~(0b1);
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <enable_button+0x5c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <enable_button+0x5c>)
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e014      	b.n	8000580 <enable_button+0x50>
	} else if (button <= 8) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d811      	bhi.n	8000580 <enable_button+0x50>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	3b01      	subs	r3, #1
 8000560:	2201      	movs	r2, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	b25b      	sxtb	r3, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	b25a      	sxtb	r2, r3
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <enable_button+0x60>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4013      	ands	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <enable_button+0x60>)
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e000      	b.n	8000580 <enable_button+0x50>
	if (!button) return;
 800057e:	bf00      	nop
	}
}
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000001 	.word	0x20000001
 8000590:	20000000 	.word	0x20000000

08000594 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d01c      	beq.n	80005de <disable_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	d107      	bne.n	80005ba <disable_button+0x26>
		io_ctrl_2 |= 0b1;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <disable_button+0x58>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <disable_button+0x58>)
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e012      	b.n	80005e0 <disable_button+0x4c>
	} else if (button <= 8) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d80f      	bhi.n	80005e0 <disable_button+0x4c>
		io_ctrl_1 |= 0b1 << (button - 1);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <disable_button+0x5c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <disable_button+0x5c>)
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e000      	b.n	80005e0 <disable_button+0x4c>
	if (!button) return;
 80005de:	bf00      	nop
	}
}
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000001 	.word	0x20000001
 80005f0:	20000000 	.word	0x20000000

080005f4 <toggle_button>:

// Toggle a button (1 indexed, left-to-right, top-to-bottom)
void toggle_button(uint8_t button) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d01c      	beq.n	800063e <toggle_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b09      	cmp	r3, #9
 8000608:	d107      	bne.n	800061a <toggle_button+0x26>
		io_ctrl_2 ^= 0b1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <toggle_button+0x58>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <toggle_button+0x58>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e012      	b.n	8000640 <toggle_button+0x4c>
	} else if (button <= 8) {
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d80f      	bhi.n	8000640 <toggle_button+0x4c>
		io_ctrl_1 ^= 0b1 << (button - 1);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b01      	subs	r3, #1
 8000624:	2201      	movs	r2, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <toggle_button+0x5c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4053      	eors	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <toggle_button+0x5c>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e000      	b.n	8000640 <toggle_button+0x4c>
	if (!button) return;
 800063e:	bf00      	nop
	}
}
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000001 	.word	0x20000001
 8000650:	20000000 	.word	0x20000000

08000654 <enable_all_buttons>:

// Enable all of the buttons
void enable_all_buttons(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 800065a:	2301      	movs	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e006      	b.n	800066e <enable_all_buttons+0x1a>
		enable_button(i);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff64 	bl	8000530 <enable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b09      	cmp	r3, #9
 8000672:	d9f5      	bls.n	8000660 <enable_all_buttons+0xc>
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}
	...

08000680 <update_buttons>:
		toggle_button(i);
	}
}

// Write the updated button configuration to the remote
void update_buttons(void) {
 8000680:	b580      	push	{r7, lr}
 8000682:	b084      	sub	sp, #16
 8000684:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 8000686:	23f2      	movs	r3, #242	; 0xf2
 8000688:	713b      	strb	r3, [r7, #4]
 800068a:	4b09      	ldr	r3, [pc, #36]	; (80006b0 <update_buttons+0x30>)
 800068c:	781b      	ldrb	r3, [r3, #0]
 800068e:	717b      	strb	r3, [r7, #5]
 8000690:	4b08      	ldr	r3, [pc, #32]	; (80006b4 <update_buttons+0x34>)
 8000692:	781b      	ldrb	r3, [r3, #0]
 8000694:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 8000696:	1d3a      	adds	r2, r7, #4
 8000698:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800069c:	9300      	str	r3, [sp, #0]
 800069e:	2303      	movs	r3, #3
 80006a0:	21a0      	movs	r1, #160	; 0xa0
 80006a2:	4805      	ldr	r0, [pc, #20]	; (80006b8 <update_buttons+0x38>)
 80006a4:	f002 ff34 	bl	8003510 <HAL_I2C_Master_Transmit>
}
 80006a8:	bf00      	nop
 80006aa:	3708      	adds	r7, #8
 80006ac:	46bd      	mov	sp, r7
 80006ae:	bd80      	pop	{r7, pc}
 80006b0:	20000000 	.word	0x20000000
 80006b4:	20000001 	.word	0x20000001
 80006b8:	200014b0 	.word	0x200014b0

080006bc <poll_buttons>:

// Poll buttons, returns the first pressed button
// or zero if no button is pressed
uint8_t poll_buttons(void) {
 80006bc:	b580      	push	{r7, lr}
 80006be:	af00      	add	r7, sp, #0
	C1_HIGH();
 80006c0:	2201      	movs	r2, #1
 80006c2:	2180      	movs	r1, #128	; 0x80
 80006c4:	483c      	ldr	r0, [pc, #240]	; (80007b8 <poll_buttons+0xfc>)
 80006c6:	f002 fdc5 	bl	8003254 <HAL_GPIO_WritePin>
	C2_HIGH();
 80006ca:	2201      	movs	r2, #1
 80006cc:	2140      	movs	r1, #64	; 0x40
 80006ce:	483a      	ldr	r0, [pc, #232]	; (80007b8 <poll_buttons+0xfc>)
 80006d0:	f002 fdc0 	bl	8003254 <HAL_GPIO_WritePin>
	C0_LOW();
 80006d4:	2200      	movs	r2, #0
 80006d6:	2140      	movs	r1, #64	; 0x40
 80006d8:	4838      	ldr	r0, [pc, #224]	; (80007bc <poll_buttons+0x100>)
 80006da:	f002 fdbb 	bl	8003254 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 1;
 80006de:	2108      	movs	r1, #8
 80006e0:	4836      	ldr	r0, [pc, #216]	; (80007bc <poll_buttons+0x100>)
 80006e2:	f002 fd9f 	bl	8003224 <HAL_GPIO_ReadPin>
 80006e6:	4603      	mov	r3, r0
 80006e8:	2b00      	cmp	r3, #0
 80006ea:	d101      	bne.n	80006f0 <poll_buttons+0x34>
 80006ec:	2301      	movs	r3, #1
 80006ee:	e061      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R1_READ()) return 4;
 80006f0:	2120      	movs	r1, #32
 80006f2:	4832      	ldr	r0, [pc, #200]	; (80007bc <poll_buttons+0x100>)
 80006f4:	f002 fd96 	bl	8003224 <HAL_GPIO_ReadPin>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d101      	bne.n	8000702 <poll_buttons+0x46>
 80006fe:	2304      	movs	r3, #4
 8000700:	e058      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R2_READ()) return 7;
 8000702:	2110      	movs	r1, #16
 8000704:	482d      	ldr	r0, [pc, #180]	; (80007bc <poll_buttons+0x100>)
 8000706:	f002 fd8d 	bl	8003224 <HAL_GPIO_ReadPin>
 800070a:	4603      	mov	r3, r0
 800070c:	2b00      	cmp	r3, #0
 800070e:	d101      	bne.n	8000714 <poll_buttons+0x58>
 8000710:	2307      	movs	r3, #7
 8000712:	e04f      	b.n	80007b4 <poll_buttons+0xf8>
	C0_HIGH();
 8000714:	2201      	movs	r2, #1
 8000716:	2140      	movs	r1, #64	; 0x40
 8000718:	4828      	ldr	r0, [pc, #160]	; (80007bc <poll_buttons+0x100>)
 800071a:	f002 fd9b 	bl	8003254 <HAL_GPIO_WritePin>

	C1_LOW();
 800071e:	2200      	movs	r2, #0
 8000720:	2180      	movs	r1, #128	; 0x80
 8000722:	4825      	ldr	r0, [pc, #148]	; (80007b8 <poll_buttons+0xfc>)
 8000724:	f002 fd96 	bl	8003254 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 2;
 8000728:	2108      	movs	r1, #8
 800072a:	4824      	ldr	r0, [pc, #144]	; (80007bc <poll_buttons+0x100>)
 800072c:	f002 fd7a 	bl	8003224 <HAL_GPIO_ReadPin>
 8000730:	4603      	mov	r3, r0
 8000732:	2b00      	cmp	r3, #0
 8000734:	d101      	bne.n	800073a <poll_buttons+0x7e>
 8000736:	2302      	movs	r3, #2
 8000738:	e03c      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R1_READ()) return 5;
 800073a:	2120      	movs	r1, #32
 800073c:	481f      	ldr	r0, [pc, #124]	; (80007bc <poll_buttons+0x100>)
 800073e:	f002 fd71 	bl	8003224 <HAL_GPIO_ReadPin>
 8000742:	4603      	mov	r3, r0
 8000744:	2b00      	cmp	r3, #0
 8000746:	d101      	bne.n	800074c <poll_buttons+0x90>
 8000748:	2305      	movs	r3, #5
 800074a:	e033      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R2_READ()) return 8;
 800074c:	2110      	movs	r1, #16
 800074e:	481b      	ldr	r0, [pc, #108]	; (80007bc <poll_buttons+0x100>)
 8000750:	f002 fd68 	bl	8003224 <HAL_GPIO_ReadPin>
 8000754:	4603      	mov	r3, r0
 8000756:	2b00      	cmp	r3, #0
 8000758:	d101      	bne.n	800075e <poll_buttons+0xa2>
 800075a:	2308      	movs	r3, #8
 800075c:	e02a      	b.n	80007b4 <poll_buttons+0xf8>
	C1_HIGH();
 800075e:	2201      	movs	r2, #1
 8000760:	2180      	movs	r1, #128	; 0x80
 8000762:	4815      	ldr	r0, [pc, #84]	; (80007b8 <poll_buttons+0xfc>)
 8000764:	f002 fd76 	bl	8003254 <HAL_GPIO_WritePin>

	C2_LOW();
 8000768:	2200      	movs	r2, #0
 800076a:	2140      	movs	r1, #64	; 0x40
 800076c:	4812      	ldr	r0, [pc, #72]	; (80007b8 <poll_buttons+0xfc>)
 800076e:	f002 fd71 	bl	8003254 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 3;
 8000772:	2108      	movs	r1, #8
 8000774:	4811      	ldr	r0, [pc, #68]	; (80007bc <poll_buttons+0x100>)
 8000776:	f002 fd55 	bl	8003224 <HAL_GPIO_ReadPin>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d101      	bne.n	8000784 <poll_buttons+0xc8>
 8000780:	2303      	movs	r3, #3
 8000782:	e017      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R1_READ()) return 6;
 8000784:	2120      	movs	r1, #32
 8000786:	480d      	ldr	r0, [pc, #52]	; (80007bc <poll_buttons+0x100>)
 8000788:	f002 fd4c 	bl	8003224 <HAL_GPIO_ReadPin>
 800078c:	4603      	mov	r3, r0
 800078e:	2b00      	cmp	r3, #0
 8000790:	d101      	bne.n	8000796 <poll_buttons+0xda>
 8000792:	2306      	movs	r3, #6
 8000794:	e00e      	b.n	80007b4 <poll_buttons+0xf8>
	if (!R2_READ()) return 9;
 8000796:	2110      	movs	r1, #16
 8000798:	4808      	ldr	r0, [pc, #32]	; (80007bc <poll_buttons+0x100>)
 800079a:	f002 fd43 	bl	8003224 <HAL_GPIO_ReadPin>
 800079e:	4603      	mov	r3, r0
 80007a0:	2b00      	cmp	r3, #0
 80007a2:	d101      	bne.n	80007a8 <poll_buttons+0xec>
 80007a4:	2309      	movs	r3, #9
 80007a6:	e005      	b.n	80007b4 <poll_buttons+0xf8>
	C2_HIGH();
 80007a8:	2201      	movs	r2, #1
 80007aa:	2140      	movs	r1, #64	; 0x40
 80007ac:	4802      	ldr	r0, [pc, #8]	; (80007b8 <poll_buttons+0xfc>)
 80007ae:	f002 fd51 	bl	8003254 <HAL_GPIO_WritePin>

	return 0;
 80007b2:	2300      	movs	r3, #0
}
 80007b4:	4618      	mov	r0, r3
 80007b6:	bd80      	pop	{r7, pc}
 80007b8:	40020000 	.word	0x40020000
 80007bc:	40020400 	.word	0x40020400

080007c0 <init_default_controller>:

extern UART_HandleTypeDef huart1;
extern Controller controller;
extern unsigned char UART1_rxBuffer[8192];

void init_default_controller() {
 80007c0:	b580      	push	{r7, lr}
 80007c2:	b084      	sub	sp, #16
 80007c4:	af00      	add	r7, sp, #0
//	controller.devices[1].num_touch_commands = 4;
//

	char device_number[3];
	char cmd_number[3];
	for (uint8_t i = 0; i < 18; ++i) {
 80007c6:	2300      	movs	r3, #0
 80007c8:	73fb      	strb	r3, [r7, #15]
 80007ca:	e06d      	b.n	80008a8 <init_default_controller+0xe8>
		strcpy(controller.devices[i].name, "Example ");
 80007cc:	7bfa      	ldrb	r2, [r7, #15]
 80007ce:	4613      	mov	r3, r2
 80007d0:	005b      	lsls	r3, r3, #1
 80007d2:	4413      	add	r3, r2
 80007d4:	021b      	lsls	r3, r3, #8
 80007d6:	4413      	add	r3, r2
 80007d8:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 80007dc:	4a36      	ldr	r2, [pc, #216]	; (80008b8 <init_default_controller+0xf8>)
 80007de:	4413      	add	r3, r2
 80007e0:	3304      	adds	r3, #4
 80007e2:	4936      	ldr	r1, [pc, #216]	; (80008bc <init_default_controller+0xfc>)
 80007e4:	461a      	mov	r2, r3
 80007e6:	460b      	mov	r3, r1
 80007e8:	cb03      	ldmia	r3!, {r0, r1}
 80007ea:	6010      	str	r0, [r2, #0]
 80007ec:	6051      	str	r1, [r2, #4]
 80007ee:	781b      	ldrb	r3, [r3, #0]
 80007f0:	7213      	strb	r3, [r2, #8]
		itoa(i + 1, device_number, 10);
 80007f2:	7bfb      	ldrb	r3, [r7, #15]
 80007f4:	3301      	adds	r3, #1
 80007f6:	f107 0108 	add.w	r1, r7, #8
 80007fa:	220a      	movs	r2, #10
 80007fc:	4618      	mov	r0, r3
 80007fe:	f006 f81d 	bl	800683c <itoa>
		strcat(controller.devices[i].name, device_number);
 8000802:	7bfa      	ldrb	r2, [r7, #15]
 8000804:	4613      	mov	r3, r2
 8000806:	005b      	lsls	r3, r3, #1
 8000808:	4413      	add	r3, r2
 800080a:	021b      	lsls	r3, r3, #8
 800080c:	4413      	add	r3, r2
 800080e:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <init_default_controller+0xf8>)
 8000814:	4413      	add	r3, r2
 8000816:	3304      	adds	r3, #4
 8000818:	f107 0208 	add.w	r2, r7, #8
 800081c:	4611      	mov	r1, r2
 800081e:	4618      	mov	r0, r3
 8000820:	f006 f816 	bl	8006850 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 8000824:	2300      	movs	r3, #0
 8000826:	73bb      	strb	r3, [r7, #14]
 8000828:	e038      	b.n	800089c <init_default_controller+0xdc>
			strcpy(controller.devices[i].commands[j].desc, "Command ");
 800082a:	7bf9      	ldrb	r1, [r7, #15]
 800082c:	7bbb      	ldrb	r3, [r7, #14]
 800082e:	461a      	mov	r2, r3
 8000830:	0052      	lsls	r2, r2, #1
 8000832:	441a      	add	r2, r3
 8000834:	00d3      	lsls	r3, r2, #3
 8000836:	441a      	add	r2, r3
 8000838:	460b      	mov	r3, r1
 800083a:	005b      	lsls	r3, r3, #1
 800083c:	440b      	add	r3, r1
 800083e:	021b      	lsls	r3, r3, #8
 8000840:	440b      	add	r3, r1
 8000842:	4413      	add	r3, r2
 8000844:	3310      	adds	r3, #16
 8000846:	4a1c      	ldr	r2, [pc, #112]	; (80008b8 <init_default_controller+0xf8>)
 8000848:	4413      	add	r3, r2
 800084a:	3301      	adds	r3, #1
 800084c:	491c      	ldr	r1, [pc, #112]	; (80008c0 <init_default_controller+0x100>)
 800084e:	461a      	mov	r2, r3
 8000850:	460b      	mov	r3, r1
 8000852:	cb03      	ldmia	r3!, {r0, r1}
 8000854:	6010      	str	r0, [r2, #0]
 8000856:	6051      	str	r1, [r2, #4]
 8000858:	781b      	ldrb	r3, [r3, #0]
 800085a:	7213      	strb	r3, [r2, #8]
			itoa(j + 1, cmd_number, 10);
 800085c:	7bbb      	ldrb	r3, [r7, #14]
 800085e:	3301      	adds	r3, #1
 8000860:	1d39      	adds	r1, r7, #4
 8000862:	220a      	movs	r2, #10
 8000864:	4618      	mov	r0, r3
 8000866:	f005 ffe9 	bl	800683c <itoa>
			strcat(controller.devices[i].commands[j].desc, cmd_number);
 800086a:	7bf9      	ldrb	r1, [r7, #15]
 800086c:	7bbb      	ldrb	r3, [r7, #14]
 800086e:	461a      	mov	r2, r3
 8000870:	0052      	lsls	r2, r2, #1
 8000872:	441a      	add	r2, r3
 8000874:	00d3      	lsls	r3, r2, #3
 8000876:	441a      	add	r2, r3
 8000878:	460b      	mov	r3, r1
 800087a:	005b      	lsls	r3, r3, #1
 800087c:	440b      	add	r3, r1
 800087e:	021b      	lsls	r3, r3, #8
 8000880:	440b      	add	r3, r1
 8000882:	4413      	add	r3, r2
 8000884:	3310      	adds	r3, #16
 8000886:	4a0c      	ldr	r2, [pc, #48]	; (80008b8 <init_default_controller+0xf8>)
 8000888:	4413      	add	r3, r2
 800088a:	3301      	adds	r3, #1
 800088c:	1d3a      	adds	r2, r7, #4
 800088e:	4611      	mov	r1, r2
 8000890:	4618      	mov	r0, r3
 8000892:	f005 ffdd 	bl	8006850 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 8000896:	7bbb      	ldrb	r3, [r7, #14]
 8000898:	3301      	adds	r3, #1
 800089a:	73bb      	strb	r3, [r7, #14]
 800089c:	7bbb      	ldrb	r3, [r7, #14]
 800089e:	2b17      	cmp	r3, #23
 80008a0:	d9c3      	bls.n	800082a <init_default_controller+0x6a>
	for (uint8_t i = 0; i < 18; ++i) {
 80008a2:	7bfb      	ldrb	r3, [r7, #15]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73fb      	strb	r3, [r7, #15]
 80008a8:	7bfb      	ldrb	r3, [r7, #15]
 80008aa:	2b11      	cmp	r3, #17
 80008ac:	d98e      	bls.n	80007cc <init_default_controller+0xc>
		}
	}
}
 80008ae:	bf00      	nop
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	2000170c 	.word	0x2000170c
 80008bc:	08006924 	.word	0x08006924
 80008c0:	08006930 	.word	0x08006930

080008c4 <init_xbee_communication>:

void init_xbee_communication() {
 80008c4:	b580      	push	{r7, lr}
 80008c6:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 80008c8:	2201      	movs	r2, #1
 80008ca:	4903      	ldr	r1, [pc, #12]	; (80008d8 <init_xbee_communication+0x14>)
 80008cc:	4803      	ldr	r0, [pc, #12]	; (80008dc <init_xbee_communication+0x18>)
 80008ce:	f005 fc96 	bl	80061fe <HAL_UART_Receive_IT>
}
 80008d2:	bf00      	nop
 80008d4:	bd80      	pop	{r7, pc}
 80008d6:	bf00      	nop
 80008d8:	20004d20 	.word	0x20004d20
 80008dc:	200016c4 	.word	0x200016c4

080008e0 <Toggle>:
#include "main.h"
#include "stm32f4xx_hal.h"
#define dataL 66
extern uint16_t data[];
extern TIM_HandleTypeDef htim3;
void Toggle(int on){
 80008e0:	b580      	push	{r7, lr}
 80008e2:	b082      	sub	sp, #8
 80008e4:	af00      	add	r7, sp, #0
 80008e6:	6078      	str	r0, [r7, #4]
	if(!on){
 80008e8:	687b      	ldr	r3, [r7, #4]
 80008ea:	2b00      	cmp	r3, #0
 80008ec:	d104      	bne.n	80008f8 <Toggle+0x18>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 80008ee:	2104      	movs	r1, #4
 80008f0:	4805      	ldr	r0, [pc, #20]	; (8000908 <Toggle+0x28>)
 80008f2:	f004 f93f 	bl	8004b74 <HAL_TIM_PWM_Start>
	}
	else{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	}
}
 80008f6:	e003      	b.n	8000900 <Toggle+0x20>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80008f8:	2104      	movs	r1, #4
 80008fa:	4803      	ldr	r0, [pc, #12]	; (8000908 <Toggle+0x28>)
 80008fc:	f004 f9ea 	bl	8004cd4 <HAL_TIM_PWM_Stop>
}
 8000900:	bf00      	nop
 8000902:	3708      	adds	r7, #8
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	200015ec 	.word	0x200015ec

0800090c <Delay>:
void Delay(uint16_t delay){
 800090c:	b480      	push	{r7}
 800090e:	b083      	sub	sp, #12
 8000910:	af00      	add	r7, sp, #0
 8000912:	4603      	mov	r3, r0
 8000914:	80fb      	strh	r3, [r7, #6]

	if(delay == 0)
 8000916:	88fb      	ldrh	r3, [r7, #6]
 8000918:	2b00      	cmp	r3, #0
 800091a:	d01c      	beq.n	8000956 <Delay+0x4a>
			return;
	TIM1->SR = 0;
 800091c:	4b11      	ldr	r3, [pc, #68]	; (8000964 <Delay+0x58>)
 800091e:	2200      	movs	r2, #0
 8000920:	611a      	str	r2, [r3, #16]
	TIM1->ARR = delay;
 8000922:	4a10      	ldr	r2, [pc, #64]	; (8000964 <Delay+0x58>)
 8000924:	88fb      	ldrh	r3, [r7, #6]
 8000926:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CNT = 0;
 8000928:	4b0e      	ldr	r3, [pc, #56]	; (8000964 <Delay+0x58>)
 800092a:	2200      	movs	r2, #0
 800092c:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CR1 |= 1; //enables timer 1
 800092e:	4b0d      	ldr	r3, [pc, #52]	; (8000964 <Delay+0x58>)
 8000930:	681b      	ldr	r3, [r3, #0]
 8000932:	4a0c      	ldr	r2, [pc, #48]	; (8000964 <Delay+0x58>)
 8000934:	f043 0301 	orr.w	r3, r3, #1
 8000938:	6013      	str	r3, [r2, #0]
	while(!(TIM1->SR & TIM_SR_UIF));
 800093a:	bf00      	nop
 800093c:	4b09      	ldr	r3, [pc, #36]	; (8000964 <Delay+0x58>)
 800093e:	691b      	ldr	r3, [r3, #16]
 8000940:	f003 0301 	and.w	r3, r3, #1
 8000944:	2b00      	cmp	r3, #0
 8000946:	d0f9      	beq.n	800093c <Delay+0x30>
	TIM1->CR1 &= ~(1); //disables timer 1
 8000948:	4b06      	ldr	r3, [pc, #24]	; (8000964 <Delay+0x58>)
 800094a:	681b      	ldr	r3, [r3, #0]
 800094c:	4a05      	ldr	r2, [pc, #20]	; (8000964 <Delay+0x58>)
 800094e:	f023 0301 	bic.w	r3, r3, #1
 8000952:	6013      	str	r3, [r2, #0]
 8000954:	e000      	b.n	8000958 <Delay+0x4c>
			return;
 8000956:	bf00      	nop
}
 8000958:	370c      	adds	r7, #12
 800095a:	46bd      	mov	sp, r7
 800095c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000960:	4770      	bx	lr
 8000962:	bf00      	nop
 8000964:	40010000 	.word	0x40010000

08000968 <Transmit>:
void Transmit(){
 8000968:	b580      	push	{r7, lr}
 800096a:	b082      	sub	sp, #8
 800096c:	af00      	add	r7, sp, #0
	int on = 0;
 800096e:	2300      	movs	r3, #0
 8000970:	607b      	str	r3, [r7, #4]
	for(size_t i = 0; i<dataL;++i){
 8000972:	2300      	movs	r3, #0
 8000974:	603b      	str	r3, [r7, #0]
 8000976:	e010      	b.n	800099a <Transmit+0x32>
		Toggle(on);
 8000978:	6878      	ldr	r0, [r7, #4]
 800097a:	f7ff ffb1 	bl	80008e0 <Toggle>
		on^=1;
 800097e:	687b      	ldr	r3, [r7, #4]
 8000980:	f083 0301 	eor.w	r3, r3, #1
 8000984:	607b      	str	r3, [r7, #4]
		Delay(data[i]);
 8000986:	4a0a      	ldr	r2, [pc, #40]	; (80009b0 <Transmit+0x48>)
 8000988:	683b      	ldr	r3, [r7, #0]
 800098a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800098e:	4618      	mov	r0, r3
 8000990:	f7ff ffbc 	bl	800090c <Delay>
	for(size_t i = 0; i<dataL;++i){
 8000994:	683b      	ldr	r3, [r7, #0]
 8000996:	3301      	adds	r3, #1
 8000998:	603b      	str	r3, [r7, #0]
 800099a:	683b      	ldr	r3, [r7, #0]
 800099c:	2b41      	cmp	r3, #65	; 0x41
 800099e:	d9eb      	bls.n	8000978 <Transmit+0x10>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_1);
 80009a0:	2100      	movs	r1, #0
 80009a2:	4804      	ldr	r0, [pc, #16]	; (80009b4 <Transmit+0x4c>)
 80009a4:	f004 f996 	bl	8004cd4 <HAL_TIM_PWM_Stop>

}
 80009a8:	bf00      	nop
 80009aa:	3708      	adds	r7, #8
 80009ac:	46bd      	mov	sp, r7
 80009ae:	bd80      	pop	{r7, pc}
 80009b0:	20006d20 	.word	0x20006d20
 80009b4:	200015ec 	.word	0x200015ec

080009b8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80009b8:	b580      	push	{r7, lr}
 80009ba:	b084      	sub	sp, #16
 80009bc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80009be:	f001 fd57 	bl	8002470 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80009c2:	f000 f893 	bl	8000aec <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80009c6:	f000 fbbd 	bl	8001144 <MX_GPIO_Init>
  MX_SPI2_Init();
 80009ca:	f000 f97b 	bl	8000cc4 <MX_SPI2_Init>
  MX_TIM2_Init();
 80009ce:	f000 fa01 	bl	8000dd4 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 80009d2:	f000 fb8d 	bl	80010f0 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 80009d6:	f000 f947 	bl	8000c68 <MX_I2C1_Init>
  MX_TIM5_Init();
 80009da:	f000 fb3b 	bl	8001054 <MX_TIM5_Init>
  MX_TIM1_Init();
 80009de:	f000 f9a7 	bl	8000d30 <MX_TIM1_Init>
  MX_TIM3_Init();
 80009e2:	f000 fa67 	bl	8000eb4 <MX_TIM3_Init>
  MX_TIM4_Init();
 80009e6:	f000 fadb 	bl	8000fa0 <MX_TIM4_Init>
  MX_ADC1_Init();
 80009ea:	f000 f8eb 	bl	8000bc4 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  init_default_controller(&controller);
 80009ee:	4837      	ldr	r0, [pc, #220]	; (8000acc <main+0x114>)
 80009f0:	f7ff fee6 	bl	80007c0 <init_default_controller>
  init_displays();
 80009f4:	f000 ff58 	bl	80018a8 <init_displays>
  HAL_TIM_Base_Start_IT(&htim5);
 80009f8:	4835      	ldr	r0, [pc, #212]	; (8000ad0 <main+0x118>)
 80009fa:	f004 f809 	bl	8004a10 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 80009fe:	2108      	movs	r1, #8
 8000a00:	4834      	ldr	r0, [pc, #208]	; (8000ad4 <main+0x11c>)
 8000a02:	f004 f8b7 	bl	8004b74 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a06:	2104      	movs	r1, #4
 8000a08:	4833      	ldr	r0, [pc, #204]	; (8000ad8 <main+0x120>)
 8000a0a:	f004 f8b3 	bl	8004b74 <HAL_TIM_PWM_Start>
  HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //Starts timer 2
 8000a0e:	2100      	movs	r1, #0
 8000a10:	4830      	ldr	r0, [pc, #192]	; (8000ad4 <main+0x11c>)
 8000a12:	f004 fa1d 	bl	8004e50 <HAL_TIM_IC_Start_IT>
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,50);
 8000a16:	4b31      	ldr	r3, [pc, #196]	; (8000adc <main+0x124>)
 8000a18:	681b      	ldr	r3, [r3, #0]
 8000a1a:	2232      	movs	r2, #50	; 0x32
 8000a1c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 999); // Adjust LED Brightness
 8000a1e:	4b2e      	ldr	r3, [pc, #184]	; (8000ad8 <main+0x120>)
 8000a20:	681b      	ldr	r3, [r3, #0]
 8000a22:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a26:	639a      	str	r2, [r3, #56]	; 0x38
  initialize_buttons();
 8000a28:	f7ff fd74 	bl	8000514 <initialize_buttons>
  //update_buttons();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  display_menu(main_menu, 1, 0);
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	2101      	movs	r1, #1
 8000a30:	2000      	movs	r0, #0
 8000a32:	f000 fcbd 	bl	80013b0 <display_menu>
  uint8_t pressed_button = 0;
 8000a36:	2300      	movs	r3, #0
 8000a38:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
	  if (button) {
 8000a3a:	4b29      	ldr	r3, [pc, #164]	; (8000ae0 <main+0x128>)
 8000a3c:	781b      	ldrb	r3, [r3, #0]
 8000a3e:	2b00      	cmp	r3, #0
 8000a40:	d00b      	beq.n	8000a5a <main+0xa2>
		  pressed_button = button;
 8000a42:	4b27      	ldr	r3, [pc, #156]	; (8000ae0 <main+0x128>)
 8000a44:	781b      	ldrb	r3, [r3, #0]
 8000a46:	72fb      	strb	r3, [r7, #11]
		  while(button);
 8000a48:	bf00      	nop
 8000a4a:	4b25      	ldr	r3, [pc, #148]	; (8000ae0 <main+0x128>)
 8000a4c:	781b      	ldrb	r3, [r3, #0]
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d1fb      	bne.n	8000a4a <main+0x92>
		  button_pressed(pressed_button);
 8000a52:	7afb      	ldrb	r3, [r7, #11]
 8000a54:	4618      	mov	r0, r3
 8000a56:	f000 fdb1 	bl	80015bc <button_pressed>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8000a5a:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a5e:	4821      	ldr	r0, [pc, #132]	; (8000ae4 <main+0x12c>)
 8000a60:	f002 fbe0 	bl	8003224 <HAL_GPIO_ReadPin>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d113      	bne.n	8000a92 <main+0xda>
		  while(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13));
 8000a6a:	bf00      	nop
 8000a6c:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000a70:	481c      	ldr	r0, [pc, #112]	; (8000ae4 <main+0x12c>)
 8000a72:	f002 fbd7 	bl	8003224 <HAL_GPIO_ReadPin>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d0f7      	beq.n	8000a6c <main+0xb4>
		  for(int i =0; i<2;++i)
 8000a7c:	2300      	movs	r3, #0
 8000a7e:	60fb      	str	r3, [r7, #12]
 8000a80:	e004      	b.n	8000a8c <main+0xd4>
			  Transmit();
 8000a82:	f7ff ff71 	bl	8000968 <Transmit>
		  for(int i =0; i<2;++i)
 8000a86:	68fb      	ldr	r3, [r7, #12]
 8000a88:	3301      	adds	r3, #1
 8000a8a:	60fb      	str	r3, [r7, #12]
 8000a8c:	68fb      	ldr	r3, [r7, #12]
 8000a8e:	2b01      	cmp	r3, #1
 8000a90:	ddf7      	ble.n	8000a82 <main+0xca>
	  }
	  //ADC testing code
	  uint32_t ADC_VAL;
	  HAL_ADC_Start(&hadc1);//start conversion
 8000a92:	4815      	ldr	r0, [pc, #84]	; (8000ae8 <main+0x130>)
 8000a94:	f001 fdc6 	bl	8002624 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);//wait for conversion to finish
 8000a98:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000a9c:	4812      	ldr	r0, [pc, #72]	; (8000ae8 <main+0x130>)
 8000a9e:	f001 fe75 	bl	800278c <HAL_ADC_PollForConversion>
	  ADC_VAL = HAL_ADC_GetValue(&hadc1);//retrieve value
 8000aa2:	4811      	ldr	r0, [pc, #68]	; (8000ae8 <main+0x130>)
 8000aa4:	f001 fefd 	bl	80028a2 <HAL_ADC_GetValue>
 8000aa8:	6078      	str	r0, [r7, #4]

	  /*if(ADC_VAL < 500){
		  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 200); // Adjust LED Brightness
	  }*/
	  if(ADC_VAL > 1900){
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	f240 726c 	movw	r2, #1900	; 0x76c
 8000ab0:	4293      	cmp	r3, r2
 8000ab2:	d905      	bls.n	8000ac0 <main+0x108>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1999); // Adjust LED Brightness
 8000ab4:	4b08      	ldr	r3, [pc, #32]	; (8000ad8 <main+0x120>)
 8000ab6:	681b      	ldr	r3, [r3, #0]
 8000ab8:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000abc:	639a      	str	r2, [r3, #56]	; 0x38
 8000abe:	e7bc      	b.n	8000a3a <main+0x82>
	  }
	  else{
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, ADC_VAL+20); // Adjust LED Brightness
 8000ac0:	4b05      	ldr	r3, [pc, #20]	; (8000ad8 <main+0x120>)
 8000ac2:	681b      	ldr	r3, [r3, #0]
 8000ac4:	687a      	ldr	r2, [r7, #4]
 8000ac6:	3214      	adds	r2, #20
 8000ac8:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8000aca:	e7b6      	b.n	8000a3a <main+0x82>
 8000acc:	2000170c 	.word	0x2000170c
 8000ad0:	2000167c 	.word	0x2000167c
 8000ad4:	200015a4 	.word	0x200015a4
 8000ad8:	20001634 	.word	0x20001634
 8000adc:	200015ec 	.word	0x200015ec
 8000ae0:	20001709 	.word	0x20001709
 8000ae4:	40020800 	.word	0x40020800
 8000ae8:	20001468 	.word	0x20001468

08000aec <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000aec:	b580      	push	{r7, lr}
 8000aee:	b094      	sub	sp, #80	; 0x50
 8000af0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000af2:	f107 0320 	add.w	r3, r7, #32
 8000af6:	2230      	movs	r2, #48	; 0x30
 8000af8:	2100      	movs	r1, #0
 8000afa:	4618      	mov	r0, r3
 8000afc:	f005 fea0 	bl	8006840 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b00:	f107 030c 	add.w	r3, r7, #12
 8000b04:	2200      	movs	r2, #0
 8000b06:	601a      	str	r2, [r3, #0]
 8000b08:	605a      	str	r2, [r3, #4]
 8000b0a:	609a      	str	r2, [r3, #8]
 8000b0c:	60da      	str	r2, [r3, #12]
 8000b0e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b10:	2300      	movs	r3, #0
 8000b12:	60bb      	str	r3, [r7, #8]
 8000b14:	4b29      	ldr	r3, [pc, #164]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b18:	4a28      	ldr	r2, [pc, #160]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b1a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b1e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b20:	4b26      	ldr	r3, [pc, #152]	; (8000bbc <SystemClock_Config+0xd0>)
 8000b22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b24:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b28:	60bb      	str	r3, [r7, #8]
 8000b2a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	607b      	str	r3, [r7, #4]
 8000b30:	4b23      	ldr	r3, [pc, #140]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000b38:	4a21      	ldr	r2, [pc, #132]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b3a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000b3e:	6013      	str	r3, [r2, #0]
 8000b40:	4b1f      	ldr	r3, [pc, #124]	; (8000bc0 <SystemClock_Config+0xd4>)
 8000b42:	681b      	ldr	r3, [r3, #0]
 8000b44:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000b48:	607b      	str	r3, [r7, #4]
 8000b4a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000b4c:	2302      	movs	r3, #2
 8000b4e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000b50:	2301      	movs	r3, #1
 8000b52:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000b54:	2310      	movs	r3, #16
 8000b56:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000b5c:	2300      	movs	r3, #0
 8000b5e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000b60:	2310      	movs	r3, #16
 8000b62:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000b64:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000b68:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000b6a:	2304      	movs	r3, #4
 8000b6c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000b6e:	2307      	movs	r3, #7
 8000b70:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000b72:	f107 0320 	add.w	r3, r7, #32
 8000b76:	4618      	mov	r0, r3
 8000b78:	f002 ffd2 	bl	8003b20 <HAL_RCC_OscConfig>
 8000b7c:	4603      	mov	r3, r0
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	d001      	beq.n	8000b86 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000b82:	f000 fc0f 	bl	80013a4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000b86:	230f      	movs	r3, #15
 8000b88:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000b8a:	2302      	movs	r3, #2
 8000b8c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000b8e:	2300      	movs	r3, #0
 8000b90:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000b92:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000b96:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000b9c:	f107 030c 	add.w	r3, r7, #12
 8000ba0:	2102      	movs	r1, #2
 8000ba2:	4618      	mov	r0, r3
 8000ba4:	f003 fa34 	bl	8004010 <HAL_RCC_ClockConfig>
 8000ba8:	4603      	mov	r3, r0
 8000baa:	2b00      	cmp	r3, #0
 8000bac:	d001      	beq.n	8000bb2 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000bae:	f000 fbf9 	bl	80013a4 <Error_Handler>
  }
}
 8000bb2:	bf00      	nop
 8000bb4:	3750      	adds	r7, #80	; 0x50
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	40023800 	.word	0x40023800
 8000bc0:	40007000 	.word	0x40007000

08000bc4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b084      	sub	sp, #16
 8000bc8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000bca:	463b      	mov	r3, r7
 8000bcc:	2200      	movs	r2, #0
 8000bce:	601a      	str	r2, [r3, #0]
 8000bd0:	605a      	str	r2, [r3, #4]
 8000bd2:	609a      	str	r2, [r3, #8]
 8000bd4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000bd6:	4b21      	ldr	r3, [pc, #132]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000bd8:	4a21      	ldr	r2, [pc, #132]	; (8000c60 <MX_ADC1_Init+0x9c>)
 8000bda:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000bde:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000be2:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000be4:	4b1d      	ldr	r3, [pc, #116]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000be6:	2200      	movs	r2, #0
 8000be8:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000bea:	4b1c      	ldr	r3, [pc, #112]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000bec:	2200      	movs	r2, #0
 8000bee:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000bf0:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000bf2:	2200      	movs	r2, #0
 8000bf4:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000bf6:	4b19      	ldr	r3, [pc, #100]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000bf8:	2200      	movs	r2, #0
 8000bfa:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000bfe:	4b17      	ldr	r3, [pc, #92]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000c00:	2200      	movs	r2, #0
 8000c02:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c04:	4b15      	ldr	r3, [pc, #84]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000c06:	4a17      	ldr	r2, [pc, #92]	; (8000c64 <MX_ADC1_Init+0xa0>)
 8000c08:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c0a:	4b14      	ldr	r3, [pc, #80]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000c0c:	2200      	movs	r2, #0
 8000c0e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c10:	4b12      	ldr	r3, [pc, #72]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000c12:	2201      	movs	r2, #1
 8000c14:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c16:	4b11      	ldr	r3, [pc, #68]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000c18:	2200      	movs	r2, #0
 8000c1a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c1e:	4b0f      	ldr	r3, [pc, #60]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000c20:	2201      	movs	r2, #1
 8000c22:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c24:	480d      	ldr	r0, [pc, #52]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000c26:	f001 fcb9 	bl	800259c <HAL_ADC_Init>
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	2b00      	cmp	r3, #0
 8000c2e:	d001      	beq.n	8000c34 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000c30:	f000 fbb8 	bl	80013a4 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000c34:	2304      	movs	r3, #4
 8000c36:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000c38:	2301      	movs	r3, #1
 8000c3a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000c3c:	2302      	movs	r3, #2
 8000c3e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000c40:	463b      	mov	r3, r7
 8000c42:	4619      	mov	r1, r3
 8000c44:	4805      	ldr	r0, [pc, #20]	; (8000c5c <MX_ADC1_Init+0x98>)
 8000c46:	f001 fe39 	bl	80028bc <HAL_ADC_ConfigChannel>
 8000c4a:	4603      	mov	r3, r0
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d001      	beq.n	8000c54 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000c50:	f000 fba8 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000c54:	bf00      	nop
 8000c56:	3710      	adds	r7, #16
 8000c58:	46bd      	mov	sp, r7
 8000c5a:	bd80      	pop	{r7, pc}
 8000c5c:	20001468 	.word	0x20001468
 8000c60:	40012000 	.word	0x40012000
 8000c64:	0f000001 	.word	0x0f000001

08000c68 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000c6c:	4b12      	ldr	r3, [pc, #72]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c6e:	4a13      	ldr	r2, [pc, #76]	; (8000cbc <MX_I2C1_Init+0x54>)
 8000c70:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000c72:	4b11      	ldr	r3, [pc, #68]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c74:	4a12      	ldr	r2, [pc, #72]	; (8000cc0 <MX_I2C1_Init+0x58>)
 8000c76:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000c78:	4b0f      	ldr	r3, [pc, #60]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000c7e:	4b0e      	ldr	r3, [pc, #56]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c80:	2200      	movs	r2, #0
 8000c82:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000c84:	4b0c      	ldr	r3, [pc, #48]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c86:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000c8a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000c8c:	4b0a      	ldr	r3, [pc, #40]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000c92:	4b09      	ldr	r3, [pc, #36]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c94:	2200      	movs	r2, #0
 8000c96:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000c98:	4b07      	ldr	r3, [pc, #28]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000c9a:	2200      	movs	r2, #0
 8000c9c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000c9e:	4b06      	ldr	r3, [pc, #24]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000ca4:	4804      	ldr	r0, [pc, #16]	; (8000cb8 <MX_I2C1_Init+0x50>)
 8000ca6:	f002 faef 	bl	8003288 <HAL_I2C_Init>
 8000caa:	4603      	mov	r3, r0
 8000cac:	2b00      	cmp	r3, #0
 8000cae:	d001      	beq.n	8000cb4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000cb0:	f000 fb78 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000cb4:	bf00      	nop
 8000cb6:	bd80      	pop	{r7, pc}
 8000cb8:	200014b0 	.word	0x200014b0
 8000cbc:	40005400 	.word	0x40005400
 8000cc0:	000186a0 	.word	0x000186a0

08000cc4 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000cc4:	b580      	push	{r7, lr}
 8000cc6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000cc8:	4b17      	ldr	r3, [pc, #92]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cca:	4a18      	ldr	r2, [pc, #96]	; (8000d2c <MX_SPI2_Init+0x68>)
 8000ccc:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000cce:	4b16      	ldr	r3, [pc, #88]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cd0:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000cd4:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000cd6:	4b14      	ldr	r3, [pc, #80]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cd8:	2200      	movs	r2, #0
 8000cda:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cde:	2200      	movs	r2, #0
 8000ce0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000ce4:	2200      	movs	r2, #0
 8000ce6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cf0:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000cf4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000cf6:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cf8:	2230      	movs	r2, #48	; 0x30
 8000cfa:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000d10:	220a      	movs	r2, #10
 8000d12:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_SPI2_Init+0x64>)
 8000d16:	f003 fb9b 	bl	8004450 <HAL_SPI_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d20:	f000 fb40 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	20001504 	.word	0x20001504
 8000d2c:	40003800 	.word	0x40003800

08000d30 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000d30:	b580      	push	{r7, lr}
 8000d32:	b086      	sub	sp, #24
 8000d34:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d36:	f107 0308 	add.w	r3, r7, #8
 8000d3a:	2200      	movs	r2, #0
 8000d3c:	601a      	str	r2, [r3, #0]
 8000d3e:	605a      	str	r2, [r3, #4]
 8000d40:	609a      	str	r2, [r3, #8]
 8000d42:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000d44:	463b      	mov	r3, r7
 8000d46:	2200      	movs	r2, #0
 8000d48:	601a      	str	r2, [r3, #0]
 8000d4a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000d4c:	4b1f      	ldr	r3, [pc, #124]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d4e:	4a20      	ldr	r2, [pc, #128]	; (8000dd0 <MX_TIM1_Init+0xa0>)
 8000d50:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1869;
 8000d52:	4b1e      	ldr	r3, [pc, #120]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d54:	f240 724d 	movw	r2, #1869	; 0x74d
 8000d58:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000d5a:	4b1c      	ldr	r3, [pc, #112]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000d60:	4b1a      	ldr	r3, [pc, #104]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d62:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000d66:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000d68:	4b18      	ldr	r3, [pc, #96]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000d6e:	4b17      	ldr	r3, [pc, #92]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d70:	2200      	movs	r2, #0
 8000d72:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d74:	4b15      	ldr	r3, [pc, #84]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d76:	2200      	movs	r2, #0
 8000d78:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000d7a:	4814      	ldr	r0, [pc, #80]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d7c:	f003 fdf8 	bl	8004970 <HAL_TIM_Base_Init>
 8000d80:	4603      	mov	r3, r0
 8000d82:	2b00      	cmp	r3, #0
 8000d84:	d001      	beq.n	8000d8a <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000d86:	f000 fb0d 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d8a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000d8e:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000d90:	f107 0308 	add.w	r3, r7, #8
 8000d94:	4619      	mov	r1, r3
 8000d96:	480d      	ldr	r0, [pc, #52]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000d98:	f004 fc88 	bl	80056ac <HAL_TIM_ConfigClockSource>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000da2:	f000 faff 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000da6:	2300      	movs	r3, #0
 8000da8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000daa:	2300      	movs	r3, #0
 8000dac:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000dae:	463b      	mov	r3, r7
 8000db0:	4619      	mov	r1, r3
 8000db2:	4806      	ldr	r0, [pc, #24]	; (8000dcc <MX_TIM1_Init+0x9c>)
 8000db4:	f005 f954 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8000db8:	4603      	mov	r3, r0
 8000dba:	2b00      	cmp	r3, #0
 8000dbc:	d001      	beq.n	8000dc2 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000dbe:	f000 faf1 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000dc2:	bf00      	nop
 8000dc4:	3718      	adds	r7, #24
 8000dc6:	46bd      	mov	sp, r7
 8000dc8:	bd80      	pop	{r7, pc}
 8000dca:	bf00      	nop
 8000dcc:	2000155c 	.word	0x2000155c
 8000dd0:	40010000 	.word	0x40010000

08000dd4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000dd4:	b580      	push	{r7, lr}
 8000dd6:	b08a      	sub	sp, #40	; 0x28
 8000dd8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000dda:	f107 0318 	add.w	r3, r7, #24
 8000dde:	2200      	movs	r2, #0
 8000de0:	601a      	str	r2, [r3, #0]
 8000de2:	605a      	str	r2, [r3, #4]
 8000de4:	609a      	str	r2, [r3, #8]
 8000de6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000de8:	f107 0310 	add.w	r3, r7, #16
 8000dec:	2200      	movs	r2, #0
 8000dee:	601a      	str	r2, [r3, #0]
 8000df0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000df2:	463b      	mov	r3, r7
 8000df4:	2200      	movs	r2, #0
 8000df6:	601a      	str	r2, [r3, #0]
 8000df8:	605a      	str	r2, [r3, #4]
 8000dfa:	609a      	str	r2, [r3, #8]
 8000dfc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000dfe:	4b2c      	ldr	r3, [pc, #176]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e00:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e04:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1869;
 8000e06:	4b2a      	ldr	r3, [pc, #168]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e08:	f240 724d 	movw	r2, #1869	; 0x74d
 8000e0c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e0e:	4b28      	ldr	r3, [pc, #160]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e10:	2200      	movs	r2, #0
 8000e12:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000e14:	4b26      	ldr	r3, [pc, #152]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e16:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e1a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e1c:	4b24      	ldr	r3, [pc, #144]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e1e:	2200      	movs	r2, #0
 8000e20:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e22:	4b23      	ldr	r3, [pc, #140]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e24:	2200      	movs	r2, #0
 8000e26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e28:	4821      	ldr	r0, [pc, #132]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e2a:	f003 fda1 	bl	8004970 <HAL_TIM_Base_Init>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d001      	beq.n	8000e38 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000e34:	f000 fab6 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000e38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000e3c:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000e3e:	f107 0318 	add.w	r3, r7, #24
 8000e42:	4619      	mov	r1, r3
 8000e44:	481a      	ldr	r0, [pc, #104]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e46:	f004 fc31 	bl	80056ac <HAL_TIM_ConfigClockSource>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000e50:	f000 faa8 	bl	80013a4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000e54:	4816      	ldr	r0, [pc, #88]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e56:	f003 ffa1 	bl	8004d9c <HAL_TIM_IC_Init>
 8000e5a:	4603      	mov	r3, r0
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	d001      	beq.n	8000e64 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000e60:	f000 faa0 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e64:	2300      	movs	r3, #0
 8000e66:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000e6c:	f107 0310 	add.w	r3, r7, #16
 8000e70:	4619      	mov	r1, r3
 8000e72:	480f      	ldr	r0, [pc, #60]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e74:	f005 f8f4 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000e7e:	f000 fa91 	bl	80013a4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000e82:	230a      	movs	r3, #10
 8000e84:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000e86:	2301      	movs	r3, #1
 8000e88:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000e92:	463b      	mov	r3, r7
 8000e94:	2200      	movs	r2, #0
 8000e96:	4619      	mov	r1, r3
 8000e98:	4805      	ldr	r0, [pc, #20]	; (8000eb0 <MX_TIM2_Init+0xdc>)
 8000e9a:	f004 faa9 	bl	80053f0 <HAL_TIM_IC_ConfigChannel>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000ea4:	f000 fa7e 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000ea8:	bf00      	nop
 8000eaa:	3728      	adds	r7, #40	; 0x28
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	200015a4 	.word	0x200015a4

08000eb4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b08e      	sub	sp, #56	; 0x38
 8000eb8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000eba:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ebe:	2200      	movs	r2, #0
 8000ec0:	601a      	str	r2, [r3, #0]
 8000ec2:	605a      	str	r2, [r3, #4]
 8000ec4:	609a      	str	r2, [r3, #8]
 8000ec6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ec8:	f107 0320 	add.w	r3, r7, #32
 8000ecc:	2200      	movs	r2, #0
 8000ece:	601a      	str	r2, [r3, #0]
 8000ed0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000ed2:	1d3b      	adds	r3, r7, #4
 8000ed4:	2200      	movs	r2, #0
 8000ed6:	601a      	str	r2, [r3, #0]
 8000ed8:	605a      	str	r2, [r3, #4]
 8000eda:	609a      	str	r2, [r3, #8]
 8000edc:	60da      	str	r2, [r3, #12]
 8000ede:	611a      	str	r2, [r3, #16]
 8000ee0:	615a      	str	r2, [r3, #20]
 8000ee2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000ee4:	4b2c      	ldr	r3, [pc, #176]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000ee6:	4a2d      	ldr	r2, [pc, #180]	; (8000f9c <MX_TIM3_Init+0xe8>)
 8000ee8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21;
 8000eea:	4b2b      	ldr	r3, [pc, #172]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000eec:	2215      	movs	r2, #21
 8000eee:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ef0:	4b29      	ldr	r3, [pc, #164]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000ef2:	2200      	movs	r2, #0
 8000ef4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000ef6:	4b28      	ldr	r3, [pc, #160]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000ef8:	2264      	movs	r2, #100	; 0x64
 8000efa:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000efc:	4b26      	ldr	r3, [pc, #152]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000efe:	2200      	movs	r2, #0
 8000f00:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f02:	4b25      	ldr	r3, [pc, #148]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000f04:	2200      	movs	r2, #0
 8000f06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f08:	4823      	ldr	r0, [pc, #140]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000f0a:	f003 fd31 	bl	8004970 <HAL_TIM_Base_Init>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000f14:	f000 fa46 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f18:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f1c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f1e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f22:	4619      	mov	r1, r3
 8000f24:	481c      	ldr	r0, [pc, #112]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000f26:	f004 fbc1 	bl	80056ac <HAL_TIM_ConfigClockSource>
 8000f2a:	4603      	mov	r3, r0
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d001      	beq.n	8000f34 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000f30:	f000 fa38 	bl	80013a4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000f34:	4818      	ldr	r0, [pc, #96]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000f36:	f003 fdcd 	bl	8004ad4 <HAL_TIM_PWM_Init>
 8000f3a:	4603      	mov	r3, r0
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d001      	beq.n	8000f44 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000f40:	f000 fa30 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f44:	2300      	movs	r3, #0
 8000f46:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f48:	2300      	movs	r3, #0
 8000f4a:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000f4c:	f107 0320 	add.w	r3, r7, #32
 8000f50:	4619      	mov	r1, r3
 8000f52:	4811      	ldr	r0, [pc, #68]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000f54:	f005 f884 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 8000f58:	4603      	mov	r3, r0
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d001      	beq.n	8000f62 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000f5e:	f000 fa21 	bl	80013a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f62:	2360      	movs	r3, #96	; 0x60
 8000f64:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f66:	2300      	movs	r3, #0
 8000f68:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f6a:	2300      	movs	r3, #0
 8000f6c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f6e:	2300      	movs	r3, #0
 8000f70:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000f72:	1d3b      	adds	r3, r7, #4
 8000f74:	2204      	movs	r2, #4
 8000f76:	4619      	mov	r1, r3
 8000f78:	4807      	ldr	r0, [pc, #28]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000f7a:	f004 fad5 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000f84:	f000 fa0e 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000f88:	4803      	ldr	r0, [pc, #12]	; (8000f98 <MX_TIM3_Init+0xe4>)
 8000f8a:	f001 f915 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8000f8e:	bf00      	nop
 8000f90:	3738      	adds	r7, #56	; 0x38
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	200015ec 	.word	0x200015ec
 8000f9c:	40000400 	.word	0x40000400

08000fa0 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000fa0:	b580      	push	{r7, lr}
 8000fa2:	b08a      	sub	sp, #40	; 0x28
 8000fa4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000fa6:	f107 0320 	add.w	r3, r7, #32
 8000faa:	2200      	movs	r2, #0
 8000fac:	601a      	str	r2, [r3, #0]
 8000fae:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000fb0:	1d3b      	adds	r3, r7, #4
 8000fb2:	2200      	movs	r2, #0
 8000fb4:	601a      	str	r2, [r3, #0]
 8000fb6:	605a      	str	r2, [r3, #4]
 8000fb8:	609a      	str	r2, [r3, #8]
 8000fba:	60da      	str	r2, [r3, #12]
 8000fbc:	611a      	str	r2, [r3, #16]
 8000fbe:	615a      	str	r2, [r3, #20]
 8000fc0:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000fc2:	4b22      	ldr	r3, [pc, #136]	; (800104c <MX_TIM4_Init+0xac>)
 8000fc4:	4a22      	ldr	r2, [pc, #136]	; (8001050 <MX_TIM4_Init+0xb0>)
 8000fc6:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 511;
 8000fc8:	4b20      	ldr	r3, [pc, #128]	; (800104c <MX_TIM4_Init+0xac>)
 8000fca:	f240 12ff 	movw	r2, #511	; 0x1ff
 8000fce:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000fd0:	4b1e      	ldr	r3, [pc, #120]	; (800104c <MX_TIM4_Init+0xac>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 999;
 8000fd6:	4b1d      	ldr	r3, [pc, #116]	; (800104c <MX_TIM4_Init+0xac>)
 8000fd8:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000fdc:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000fde:	4b1b      	ldr	r3, [pc, #108]	; (800104c <MX_TIM4_Init+0xac>)
 8000fe0:	2200      	movs	r2, #0
 8000fe2:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000fe4:	4b19      	ldr	r3, [pc, #100]	; (800104c <MX_TIM4_Init+0xac>)
 8000fe6:	2200      	movs	r2, #0
 8000fe8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 8000fea:	4818      	ldr	r0, [pc, #96]	; (800104c <MX_TIM4_Init+0xac>)
 8000fec:	f003 fd72 	bl	8004ad4 <HAL_TIM_PWM_Init>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8000ff6:	f000 f9d5 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ffe:	2300      	movs	r3, #0
 8001000:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001002:	f107 0320 	add.w	r3, r7, #32
 8001006:	4619      	mov	r1, r3
 8001008:	4810      	ldr	r0, [pc, #64]	; (800104c <MX_TIM4_Init+0xac>)
 800100a:	f005 f829 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d001      	beq.n	8001018 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001014:	f000 f9c6 	bl	80013a4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001018:	2370      	movs	r3, #112	; 0x70
 800101a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800101c:	2300      	movs	r3, #0
 800101e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001020:	2300      	movs	r3, #0
 8001022:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001024:	2300      	movs	r3, #0
 8001026:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001028:	1d3b      	adds	r3, r7, #4
 800102a:	2204      	movs	r2, #4
 800102c:	4619      	mov	r1, r3
 800102e:	4807      	ldr	r0, [pc, #28]	; (800104c <MX_TIM4_Init+0xac>)
 8001030:	f004 fa7a 	bl	8005528 <HAL_TIM_PWM_ConfigChannel>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d001      	beq.n	800103e <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 800103a:	f000 f9b3 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 800103e:	4803      	ldr	r0, [pc, #12]	; (800104c <MX_TIM4_Init+0xac>)
 8001040:	f001 f8ba 	bl	80021b8 <HAL_TIM_MspPostInit>

}
 8001044:	bf00      	nop
 8001046:	3728      	adds	r7, #40	; 0x28
 8001048:	46bd      	mov	sp, r7
 800104a:	bd80      	pop	{r7, pc}
 800104c:	20001634 	.word	0x20001634
 8001050:	40000800 	.word	0x40000800

08001054 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b086      	sub	sp, #24
 8001058:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800105a:	f107 0308 	add.w	r3, r7, #8
 800105e:	2200      	movs	r2, #0
 8001060:	601a      	str	r2, [r3, #0]
 8001062:	605a      	str	r2, [r3, #4]
 8001064:	609a      	str	r2, [r3, #8]
 8001066:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001068:	463b      	mov	r3, r7
 800106a:	2200      	movs	r2, #0
 800106c:	601a      	str	r2, [r3, #0]
 800106e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8001070:	4b1d      	ldr	r3, [pc, #116]	; (80010e8 <MX_TIM5_Init+0x94>)
 8001072:	4a1e      	ldr	r2, [pc, #120]	; (80010ec <MX_TIM5_Init+0x98>)
 8001074:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8001076:	4b1c      	ldr	r3, [pc, #112]	; (80010e8 <MX_TIM5_Init+0x94>)
 8001078:	2253      	movs	r2, #83	; 0x53
 800107a:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 800107c:	4b1a      	ldr	r3, [pc, #104]	; (80010e8 <MX_TIM5_Init+0x94>)
 800107e:	2200      	movs	r2, #0
 8001080:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49999;
 8001082:	4b19      	ldr	r3, [pc, #100]	; (80010e8 <MX_TIM5_Init+0x94>)
 8001084:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8001088:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800108a:	4b17      	ldr	r3, [pc, #92]	; (80010e8 <MX_TIM5_Init+0x94>)
 800108c:	2200      	movs	r2, #0
 800108e:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001090:	4b15      	ldr	r3, [pc, #84]	; (80010e8 <MX_TIM5_Init+0x94>)
 8001092:	2280      	movs	r2, #128	; 0x80
 8001094:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001096:	4814      	ldr	r0, [pc, #80]	; (80010e8 <MX_TIM5_Init+0x94>)
 8001098:	f003 fc6a 	bl	8004970 <HAL_TIM_Base_Init>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d001      	beq.n	80010a6 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 80010a2:	f000 f97f 	bl	80013a4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80010a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80010aa:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 80010ac:	f107 0308 	add.w	r3, r7, #8
 80010b0:	4619      	mov	r1, r3
 80010b2:	480d      	ldr	r0, [pc, #52]	; (80010e8 <MX_TIM5_Init+0x94>)
 80010b4:	f004 fafa 	bl	80056ac <HAL_TIM_ConfigClockSource>
 80010b8:	4603      	mov	r3, r0
 80010ba:	2b00      	cmp	r3, #0
 80010bc:	d001      	beq.n	80010c2 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 80010be:	f000 f971 	bl	80013a4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80010c2:	2300      	movs	r3, #0
 80010c4:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80010c6:	2300      	movs	r3, #0
 80010c8:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80010ca:	463b      	mov	r3, r7
 80010cc:	4619      	mov	r1, r3
 80010ce:	4806      	ldr	r0, [pc, #24]	; (80010e8 <MX_TIM5_Init+0x94>)
 80010d0:	f004 ffc6 	bl	8006060 <HAL_TIMEx_MasterConfigSynchronization>
 80010d4:	4603      	mov	r3, r0
 80010d6:	2b00      	cmp	r3, #0
 80010d8:	d001      	beq.n	80010de <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 80010da:	f000 f963 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80010de:	bf00      	nop
 80010e0:	3718      	adds	r7, #24
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bd80      	pop	{r7, pc}
 80010e6:	bf00      	nop
 80010e8:	2000167c 	.word	0x2000167c
 80010ec:	40000c00 	.word	0x40000c00

080010f0 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80010f4:	4b11      	ldr	r3, [pc, #68]	; (800113c <MX_USART1_UART_Init+0x4c>)
 80010f6:	4a12      	ldr	r2, [pc, #72]	; (8001140 <MX_USART1_UART_Init+0x50>)
 80010f8:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 80010fa:	4b10      	ldr	r3, [pc, #64]	; (800113c <MX_USART1_UART_Init+0x4c>)
 80010fc:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001100:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001102:	4b0e      	ldr	r3, [pc, #56]	; (800113c <MX_USART1_UART_Init+0x4c>)
 8001104:	2200      	movs	r2, #0
 8001106:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001108:	4b0c      	ldr	r3, [pc, #48]	; (800113c <MX_USART1_UART_Init+0x4c>)
 800110a:	2200      	movs	r2, #0
 800110c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800110e:	4b0b      	ldr	r3, [pc, #44]	; (800113c <MX_USART1_UART_Init+0x4c>)
 8001110:	2200      	movs	r2, #0
 8001112:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001114:	4b09      	ldr	r3, [pc, #36]	; (800113c <MX_USART1_UART_Init+0x4c>)
 8001116:	220c      	movs	r2, #12
 8001118:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800111a:	4b08      	ldr	r3, [pc, #32]	; (800113c <MX_USART1_UART_Init+0x4c>)
 800111c:	2200      	movs	r2, #0
 800111e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001120:	4b06      	ldr	r3, [pc, #24]	; (800113c <MX_USART1_UART_Init+0x4c>)
 8001122:	2200      	movs	r2, #0
 8001124:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001126:	4805      	ldr	r0, [pc, #20]	; (800113c <MX_USART1_UART_Init+0x4c>)
 8001128:	f005 f81c 	bl	8006164 <HAL_UART_Init>
 800112c:	4603      	mov	r3, r0
 800112e:	2b00      	cmp	r3, #0
 8001130:	d001      	beq.n	8001136 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8001132:	f000 f937 	bl	80013a4 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8001136:	bf00      	nop
 8001138:	bd80      	pop	{r7, pc}
 800113a:	bf00      	nop
 800113c:	200016c4 	.word	0x200016c4
 8001140:	40011000 	.word	0x40011000

08001144 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001144:	b580      	push	{r7, lr}
 8001146:	b088      	sub	sp, #32
 8001148:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800114a:	f107 030c 	add.w	r3, r7, #12
 800114e:	2200      	movs	r2, #0
 8001150:	601a      	str	r2, [r3, #0]
 8001152:	605a      	str	r2, [r3, #4]
 8001154:	609a      	str	r2, [r3, #8]
 8001156:	60da      	str	r2, [r3, #12]
 8001158:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800115a:	2300      	movs	r3, #0
 800115c:	60bb      	str	r3, [r7, #8]
 800115e:	4b44      	ldr	r3, [pc, #272]	; (8001270 <MX_GPIO_Init+0x12c>)
 8001160:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001162:	4a43      	ldr	r2, [pc, #268]	; (8001270 <MX_GPIO_Init+0x12c>)
 8001164:	f043 0304 	orr.w	r3, r3, #4
 8001168:	6313      	str	r3, [r2, #48]	; 0x30
 800116a:	4b41      	ldr	r3, [pc, #260]	; (8001270 <MX_GPIO_Init+0x12c>)
 800116c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800116e:	f003 0304 	and.w	r3, r3, #4
 8001172:	60bb      	str	r3, [r7, #8]
 8001174:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001176:	2300      	movs	r3, #0
 8001178:	607b      	str	r3, [r7, #4]
 800117a:	4b3d      	ldr	r3, [pc, #244]	; (8001270 <MX_GPIO_Init+0x12c>)
 800117c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800117e:	4a3c      	ldr	r2, [pc, #240]	; (8001270 <MX_GPIO_Init+0x12c>)
 8001180:	f043 0301 	orr.w	r3, r3, #1
 8001184:	6313      	str	r3, [r2, #48]	; 0x30
 8001186:	4b3a      	ldr	r3, [pc, #232]	; (8001270 <MX_GPIO_Init+0x12c>)
 8001188:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800118a:	f003 0301 	and.w	r3, r3, #1
 800118e:	607b      	str	r3, [r7, #4]
 8001190:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001192:	2300      	movs	r3, #0
 8001194:	603b      	str	r3, [r7, #0]
 8001196:	4b36      	ldr	r3, [pc, #216]	; (8001270 <MX_GPIO_Init+0x12c>)
 8001198:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800119a:	4a35      	ldr	r2, [pc, #212]	; (8001270 <MX_GPIO_Init+0x12c>)
 800119c:	f043 0302 	orr.w	r3, r3, #2
 80011a0:	6313      	str	r3, [r2, #48]	; 0x30
 80011a2:	4b33      	ldr	r3, [pc, #204]	; (8001270 <MX_GPIO_Init+0x12c>)
 80011a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011a6:	f003 0302 	and.w	r3, r3, #2
 80011aa:	603b      	str	r3, [r7, #0]
 80011ac:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 80011ae:	2200      	movs	r2, #0
 80011b0:	21e3      	movs	r1, #227	; 0xe3
 80011b2:	4830      	ldr	r0, [pc, #192]	; (8001274 <MX_GPIO_Init+0x130>)
 80011b4:	f002 f84e 	bl	8003254 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 80011b8:	2200      	movs	r2, #0
 80011ba:	2140      	movs	r1, #64	; 0x40
 80011bc:	482e      	ldr	r0, [pc, #184]	; (8001278 <MX_GPIO_Init+0x134>)
 80011be:	f002 f849 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 80011c2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80011c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80011c8:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011ce:	2300      	movs	r3, #0
 80011d0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80011d2:	f107 030c 	add.w	r3, r7, #12
 80011d6:	4619      	mov	r1, r3
 80011d8:	4828      	ldr	r0, [pc, #160]	; (800127c <MX_GPIO_Init+0x138>)
 80011da:	f001 fe9f 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 80011de:	23e3      	movs	r3, #227	; 0xe3
 80011e0:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011e2:	2301      	movs	r3, #1
 80011e4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011e6:	2300      	movs	r3, #0
 80011e8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011ea:	2300      	movs	r3, #0
 80011ec:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011ee:	f107 030c 	add.w	r3, r7, #12
 80011f2:	4619      	mov	r1, r3
 80011f4:	481f      	ldr	r0, [pc, #124]	; (8001274 <MX_GPIO_Init+0x130>)
 80011f6:	f001 fe91 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80011fa:	230c      	movs	r3, #12
 80011fc:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800120a:	2307      	movs	r3, #7
 800120c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800120e:	f107 030c 	add.w	r3, r7, #12
 8001212:	4619      	mov	r1, r3
 8001214:	4817      	ldr	r0, [pc, #92]	; (8001274 <MX_GPIO_Init+0x130>)
 8001216:	f001 fe81 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800121a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800121e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001220:	2300      	movs	r3, #0
 8001222:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001228:	f107 030c 	add.w	r3, r7, #12
 800122c:	4619      	mov	r1, r3
 800122e:	4813      	ldr	r0, [pc, #76]	; (800127c <MX_GPIO_Init+0x138>)
 8001230:	f001 fe74 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001234:	2338      	movs	r3, #56	; 0x38
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001238:	2300      	movs	r3, #0
 800123a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800123c:	2301      	movs	r3, #1
 800123e:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001240:	f107 030c 	add.w	r3, r7, #12
 8001244:	4619      	mov	r1, r3
 8001246:	480c      	ldr	r0, [pc, #48]	; (8001278 <MX_GPIO_Init+0x134>)
 8001248:	f001 fe68 	bl	8002f1c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800124c:	2340      	movs	r3, #64	; 0x40
 800124e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001250:	2301      	movs	r3, #1
 8001252:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001254:	2300      	movs	r3, #0
 8001256:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001258:	2300      	movs	r3, #0
 800125a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800125c:	f107 030c 	add.w	r3, r7, #12
 8001260:	4619      	mov	r1, r3
 8001262:	4805      	ldr	r0, [pc, #20]	; (8001278 <MX_GPIO_Init+0x134>)
 8001264:	f001 fe5a 	bl	8002f1c <HAL_GPIO_Init>

}
 8001268:	bf00      	nop
 800126a:	3720      	adds	r7, #32
 800126c:	46bd      	mov	sp, r7
 800126e:	bd80      	pop	{r7, pc}
 8001270:	40023800 	.word	0x40023800
 8001274:	40020000 	.word	0x40020000
 8001278:	40020400 	.word	0x40020400
 800127c:	40020800 	.word	0x40020800

08001280 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b082      	sub	sp, #8
 8001284:	af00      	add	r7, sp, #0
 8001286:	6078      	str	r0, [r7, #4]
	// 50ms Poll Button Timer
	if (htim == &htim5 )
 8001288:	687b      	ldr	r3, [r7, #4]
 800128a:	4a40      	ldr	r2, [pc, #256]	; (800138c <HAL_TIM_PeriodElapsedCallback+0x10c>)
 800128c:	4293      	cmp	r3, r2
 800128e:	d179      	bne.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x104>
		// Count the number of times the interrupt fires for flashing
		static uint8_t i = 0;
		// Set high if the button has been released, low while pressed
		static uint8_t released = 1;

		button = poll_buttons();
 8001290:	f7ff fa14 	bl	80006bc <poll_buttons>
 8001294:	4603      	mov	r3, r0
 8001296:	461a      	mov	r2, r3
 8001298:	4b3d      	ldr	r3, [pc, #244]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800129a:	701a      	strb	r2, [r3, #0]
		// If a new button is pressed
		if (button && released) {
 800129c:	4b3c      	ldr	r3, [pc, #240]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x110>)
 800129e:	781b      	ldrb	r3, [r3, #0]
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	d01b      	beq.n	80012dc <HAL_TIM_PeriodElapsedCallback+0x5c>
 80012a4:	4b3b      	ldr	r3, [pc, #236]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80012a6:	781b      	ldrb	r3, [r3, #0]
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d017      	beq.n	80012dc <HAL_TIM_PeriodElapsedCallback+0x5c>
			// Turn on Button Light
			if (current_menu != settings_menu) enable_all_buttons();
 80012ac:	4b3a      	ldr	r3, [pc, #232]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x118>)
 80012ae:	781b      	ldrb	r3, [r3, #0]
 80012b0:	2b01      	cmp	r3, #1
 80012b2:	d001      	beq.n	80012b8 <HAL_TIM_PeriodElapsedCallback+0x38>
 80012b4:	f7ff f9ce 	bl	8000654 <enable_all_buttons>
			disable_button(button);
 80012b8:	4b35      	ldr	r3, [pc, #212]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80012ba:	781b      	ldrb	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff f969 	bl	8000594 <disable_button>
			// Invert display
			update_buttons();
 80012c2:	f7ff f9dd 	bl	8000680 <update_buttons>

			last_pressed = button;
 80012c6:	4b32      	ldr	r3, [pc, #200]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80012c8:	781a      	ldrb	r2, [r3, #0]
 80012ca:	4b34      	ldr	r3, [pc, #208]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012cc:	701a      	strb	r2, [r3, #0]
			released = 0;
 80012ce:	4b31      	ldr	r3, [pc, #196]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	701a      	strb	r2, [r3, #0]
			i = 0; // Reset counter
 80012d4:	4b32      	ldr	r3, [pc, #200]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	701a      	strb	r2, [r3, #0]
				// clear the last pressed button and stop flashing
				last_pressed = 0;
			}
		}
	}
}
 80012da:	e053      	b.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x104>
		} else if (!button && last_pressed) {
 80012dc:	4b2c      	ldr	r3, [pc, #176]	; (8001390 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80012de:	781b      	ldrb	r3, [r3, #0]
 80012e0:	2b00      	cmp	r3, #0
 80012e2:	d14f      	bne.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x104>
 80012e4:	4b2d      	ldr	r3, [pc, #180]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 80012e6:	781b      	ldrb	r3, [r3, #0]
 80012e8:	2b00      	cmp	r3, #0
 80012ea:	d04b      	beq.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x104>
			released = 1;
 80012ec:	4b29      	ldr	r3, [pc, #164]	; (8001394 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80012ee:	2201      	movs	r2, #1
 80012f0:	701a      	strb	r2, [r3, #0]
			++i;
 80012f2:	4b2b      	ldr	r3, [pc, #172]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012f4:	781b      	ldrb	r3, [r3, #0]
 80012f6:	3301      	adds	r3, #1
 80012f8:	b2da      	uxtb	r2, r3
 80012fa:	4b29      	ldr	r3, [pc, #164]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012fc:	701a      	strb	r2, [r3, #0]
			if (!(i % 4)) {
 80012fe:	4b28      	ldr	r3, [pc, #160]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8001300:	781b      	ldrb	r3, [r3, #0]
 8001302:	f003 0303 	and.w	r3, r3, #3
 8001306:	b2db      	uxtb	r3, r3
 8001308:	2b00      	cmp	r3, #0
 800130a:	d117      	bne.n	800133c <HAL_TIM_PeriodElapsedCallback+0xbc>
				if ((current_menu != settings_menu) || (last_pressed == 1 || last_pressed == 2 || last_pressed == 9))
 800130c:	4b22      	ldr	r3, [pc, #136]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800130e:	781b      	ldrb	r3, [r3, #0]
 8001310:	2b01      	cmp	r3, #1
 8001312:	d10b      	bne.n	800132c <HAL_TIM_PeriodElapsedCallback+0xac>
 8001314:	4b21      	ldr	r3, [pc, #132]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001316:	781b      	ldrb	r3, [r3, #0]
 8001318:	2b01      	cmp	r3, #1
 800131a:	d007      	beq.n	800132c <HAL_TIM_PeriodElapsedCallback+0xac>
 800131c:	4b1f      	ldr	r3, [pc, #124]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800131e:	781b      	ldrb	r3, [r3, #0]
 8001320:	2b02      	cmp	r3, #2
 8001322:	d003      	beq.n	800132c <HAL_TIM_PeriodElapsedCallback+0xac>
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001326:	781b      	ldrb	r3, [r3, #0]
 8001328:	2b09      	cmp	r3, #9
 800132a:	d104      	bne.n	8001336 <HAL_TIM_PeriodElapsedCallback+0xb6>
					toggle_button(last_pressed);
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800132e:	781b      	ldrb	r3, [r3, #0]
 8001330:	4618      	mov	r0, r3
 8001332:	f7ff f95f 	bl	80005f4 <toggle_button>
				update_buttons();
 8001336:	f7ff f9a3 	bl	8000680 <update_buttons>
}
 800133a:	e023      	b.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x104>
			else if (i > BUTTON_FLASH_DURATION / 50) {
 800133c:	4b18      	ldr	r3, [pc, #96]	; (80013a0 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800133e:	781b      	ldrb	r3, [r3, #0]
 8001340:	2b0c      	cmp	r3, #12
 8001342:	d91f      	bls.n	8001384 <HAL_TIM_PeriodElapsedCallback+0x104>
				if (current_menu != settings_menu || last_pressed == 1 || last_pressed == 2 || last_pressed == 9)
 8001344:	4b14      	ldr	r3, [pc, #80]	; (8001398 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8001346:	781b      	ldrb	r3, [r3, #0]
 8001348:	2b01      	cmp	r3, #1
 800134a:	d10b      	bne.n	8001364 <HAL_TIM_PeriodElapsedCallback+0xe4>
 800134c:	4b13      	ldr	r3, [pc, #76]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800134e:	781b      	ldrb	r3, [r3, #0]
 8001350:	2b01      	cmp	r3, #1
 8001352:	d007      	beq.n	8001364 <HAL_TIM_PeriodElapsedCallback+0xe4>
 8001354:	4b11      	ldr	r3, [pc, #68]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001356:	781b      	ldrb	r3, [r3, #0]
 8001358:	2b02      	cmp	r3, #2
 800135a:	d003      	beq.n	8001364 <HAL_TIM_PeriodElapsedCallback+0xe4>
 800135c:	4b0f      	ldr	r3, [pc, #60]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 800135e:	781b      	ldrb	r3, [r3, #0]
 8001360:	2b09      	cmp	r3, #9
 8001362:	d105      	bne.n	8001370 <HAL_TIM_PeriodElapsedCallback+0xf0>
					enable_button(last_pressed);
 8001364:	4b0d      	ldr	r3, [pc, #52]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	4618      	mov	r0, r3
 800136a:	f7ff f8e1 	bl	8000530 <enable_button>
 800136e:	e004      	b.n	800137a <HAL_TIM_PeriodElapsedCallback+0xfa>
				else disable_button(last_pressed);
 8001370:	4b0a      	ldr	r3, [pc, #40]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	4618      	mov	r0, r3
 8001376:	f7ff f90d 	bl	8000594 <disable_button>
				update_buttons();
 800137a:	f7ff f981 	bl	8000680 <update_buttons>
				last_pressed = 0;
 800137e:	4b07      	ldr	r3, [pc, #28]	; (800139c <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8001380:	2200      	movs	r2, #0
 8001382:	701a      	strb	r2, [r3, #0]
}
 8001384:	bf00      	nop
 8001386:	3708      	adds	r7, #8
 8001388:	46bd      	mov	sp, r7
 800138a:	bd80      	pop	{r7, pc}
 800138c:	2000167c 	.word	0x2000167c
 8001390:	20001709 	.word	0x20001709
 8001394:	20000008 	.word	0x20000008
 8001398:	20001708 	.word	0x20001708
 800139c:	20006da4 	.word	0x20006da4
 80013a0:	20006da5 	.word	0x20006da5

080013a4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80013a4:	b480      	push	{r7}
 80013a6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80013a8:	b672      	cpsid	i
}
 80013aa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80013ac:	e7fe      	b.n	80013ac <Error_Handler+0x8>
	...

080013b0 <display_menu>:
extern Controller controller;

// Store Menu Commands
static char menu_commands[9][11];

void display_menu(Menu menu, uint8_t page, uint8_t device) {
 80013b0:	b590      	push	{r4, r7, lr}
 80013b2:	b085      	sub	sp, #20
 80013b4:	af00      	add	r7, sp, #0
 80013b6:	4603      	mov	r3, r0
 80013b8:	71fb      	strb	r3, [r7, #7]
 80013ba:	460b      	mov	r3, r1
 80013bc:	71bb      	strb	r3, [r7, #6]
 80013be:	4613      	mov	r3, r2
 80013c0:	717b      	strb	r3, [r7, #5]
	if (!page) return;
 80013c2:	79bb      	ldrb	r3, [r7, #6]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	f000 80d7 	beq.w	8001578 <display_menu+0x1c8>
	current_menu = menu;
 80013ca:	4a6e      	ldr	r2, [pc, #440]	; (8001584 <display_menu+0x1d4>)
 80013cc:	79fb      	ldrb	r3, [r7, #7]
 80013ce:	7013      	strb	r3, [r2, #0]
	current_page = page;
 80013d0:	4a6d      	ldr	r2, [pc, #436]	; (8001588 <display_menu+0x1d8>)
 80013d2:	79bb      	ldrb	r3, [r7, #6]
 80013d4:	7013      	strb	r3, [r2, #0]
	switch(menu) {
 80013d6:	79fb      	ldrb	r3, [r7, #7]
 80013d8:	2b02      	cmp	r3, #2
 80013da:	d06e      	beq.n	80014ba <display_menu+0x10a>
 80013dc:	2b02      	cmp	r3, #2
 80013de:	f300 80ae 	bgt.w	800153e <display_menu+0x18e>
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d002      	beq.n	80013ec <display_menu+0x3c>
 80013e6:	2b01      	cmp	r3, #1
 80013e8:	d03f      	beq.n	800146a <display_menu+0xba>
 80013ea:	e0a8      	b.n	800153e <display_menu+0x18e>
	case main_menu:
		if (page > MAIN_MENU_PAGE_COUNT) return;
 80013ec:	79bb      	ldrb	r3, [r7, #6]
 80013ee:	2b03      	cmp	r3, #3
 80013f0:	f200 80c4 	bhi.w	800157c <display_menu+0x1cc>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 80013f4:	2300      	movs	r3, #0
 80013f6:	73fb      	strb	r3, [r7, #15]
 80013f8:	e020      	b.n	800143c <display_menu+0x8c>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 80013fa:	7bfa      	ldrb	r2, [r7, #15]
 80013fc:	4613      	mov	r3, r2
 80013fe:	009b      	lsls	r3, r3, #2
 8001400:	4413      	add	r3, r2
 8001402:	005b      	lsls	r3, r3, #1
 8001404:	4413      	add	r3, r2
 8001406:	4a61      	ldr	r2, [pc, #388]	; (800158c <display_menu+0x1dc>)
 8001408:	1898      	adds	r0, r3, r2
 800140a:	7bf9      	ldrb	r1, [r7, #15]
 800140c:	4b5e      	ldr	r3, [pc, #376]	; (8001588 <display_menu+0x1d8>)
 800140e:	781b      	ldrb	r3, [r3, #0]
 8001410:	1e5a      	subs	r2, r3, #1
 8001412:	4613      	mov	r3, r2
 8001414:	005b      	lsls	r3, r3, #1
 8001416:	4413      	add	r3, r2
 8001418:	005b      	lsls	r3, r3, #1
 800141a:	18ca      	adds	r2, r1, r3
 800141c:	4613      	mov	r3, r2
 800141e:	005b      	lsls	r3, r3, #1
 8001420:	4413      	add	r3, r2
 8001422:	021b      	lsls	r3, r3, #8
 8001424:	4413      	add	r3, r2
 8001426:	f503 733c 	add.w	r3, r3, #752	; 0x2f0
 800142a:	4a59      	ldr	r2, [pc, #356]	; (8001590 <display_menu+0x1e0>)
 800142c:	4413      	add	r3, r2
 800142e:	3304      	adds	r3, #4
 8001430:	4619      	mov	r1, r3
 8001432:	f005 fa1c 	bl	800686e <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001436:	7bfb      	ldrb	r3, [r7, #15]
 8001438:	3301      	adds	r3, #1
 800143a:	73fb      	strb	r3, [r7, #15]
 800143c:	7bfb      	ldrb	r3, [r7, #15]
 800143e:	2b05      	cmp	r3, #5
 8001440:	d9db      	bls.n	80013fa <display_menu+0x4a>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 8001442:	4a54      	ldr	r2, [pc, #336]	; (8001594 <display_menu+0x1e4>)
 8001444:	4b54      	ldr	r3, [pc, #336]	; (8001598 <display_menu+0x1e8>)
 8001446:	cb03      	ldmia	r3!, {r0, r1}
 8001448:	6010      	str	r0, [r2, #0]
 800144a:	6051      	str	r1, [r2, #4]
 800144c:	881b      	ldrh	r3, [r3, #0]
 800144e:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Settings");
 8001450:	4a52      	ldr	r2, [pc, #328]	; (800159c <display_menu+0x1ec>)
 8001452:	4b53      	ldr	r3, [pc, #332]	; (80015a0 <display_menu+0x1f0>)
 8001454:	cb03      	ldmia	r3!, {r0, r1}
 8001456:	6010      	str	r0, [r2, #0]
 8001458:	6051      	str	r1, [r2, #4]
 800145a:	781b      	ldrb	r3, [r3, #0]
 800145c:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 800145e:	4b51      	ldr	r3, [pc, #324]	; (80015a4 <display_menu+0x1f4>)
 8001460:	4a51      	ldr	r2, [pc, #324]	; (80015a8 <display_menu+0x1f8>)
 8001462:	ca07      	ldmia	r2, {r0, r1, r2}
 8001464:	c303      	stmia	r3!, {r0, r1}
 8001466:	801a      	strh	r2, [r3, #0]
		break;
 8001468:	e069      	b.n	800153e <display_menu+0x18e>
	case settings_menu:
		strcpy(menu_commands[0], "PC Connect");
 800146a:	4b48      	ldr	r3, [pc, #288]	; (800158c <display_menu+0x1dc>)
 800146c:	4a4f      	ldr	r2, [pc, #316]	; (80015ac <display_menu+0x1fc>)
 800146e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001470:	c303      	stmia	r3!, {r0, r1}
 8001472:	801a      	strh	r2, [r3, #0]
 8001474:	3302      	adds	r3, #2
 8001476:	0c12      	lsrs	r2, r2, #16
 8001478:	701a      	strb	r2, [r3, #0]
		strcpy(menu_commands[1], "Learn Cmd");
 800147a:	4a4d      	ldr	r2, [pc, #308]	; (80015b0 <display_menu+0x200>)
 800147c:	4b4d      	ldr	r3, [pc, #308]	; (80015b4 <display_menu+0x204>)
 800147e:	cb03      	ldmia	r3!, {r0, r1}
 8001480:	6010      	str	r0, [r2, #0]
 8001482:	6051      	str	r1, [r2, #4]
 8001484:	881b      	ldrh	r3, [r3, #0]
 8001486:	8113      	strh	r3, [r2, #8]
		for (uint8_t i = 2; i <= 7; ++i) {
 8001488:	2302      	movs	r3, #2
 800148a:	73bb      	strb	r3, [r7, #14]
 800148c:	e00c      	b.n	80014a8 <display_menu+0xf8>
			menu_commands[i][0] = '\0';
 800148e:	7bba      	ldrb	r2, [r7, #14]
 8001490:	493e      	ldr	r1, [pc, #248]	; (800158c <display_menu+0x1dc>)
 8001492:	4613      	mov	r3, r2
 8001494:	009b      	lsls	r3, r3, #2
 8001496:	4413      	add	r3, r2
 8001498:	005b      	lsls	r3, r3, #1
 800149a:	4413      	add	r3, r2
 800149c:	440b      	add	r3, r1
 800149e:	2200      	movs	r2, #0
 80014a0:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 2; i <= 7; ++i) {
 80014a2:	7bbb      	ldrb	r3, [r7, #14]
 80014a4:	3301      	adds	r3, #1
 80014a6:	73bb      	strb	r3, [r7, #14]
 80014a8:	7bbb      	ldrb	r3, [r7, #14]
 80014aa:	2b07      	cmp	r3, #7
 80014ac:	d9ef      	bls.n	800148e <display_menu+0xde>
		}
		strcpy(menu_commands[8], "Main Menu");
 80014ae:	4b3d      	ldr	r3, [pc, #244]	; (80015a4 <display_menu+0x1f4>)
 80014b0:	4a41      	ldr	r2, [pc, #260]	; (80015b8 <display_menu+0x208>)
 80014b2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014b4:	c303      	stmia	r3!, {r0, r1}
 80014b6:	801a      	strh	r2, [r3, #0]
		break;
 80014b8:	e041      	b.n	800153e <display_menu+0x18e>
	case device_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 80014ba:	2300      	movs	r3, #0
 80014bc:	737b      	strb	r3, [r7, #13]
 80014be:	e027      	b.n	8001510 <display_menu+0x160>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 80014c0:	7b7a      	ldrb	r2, [r7, #13]
 80014c2:	4613      	mov	r3, r2
 80014c4:	009b      	lsls	r3, r3, #2
 80014c6:	4413      	add	r3, r2
 80014c8:	005b      	lsls	r3, r3, #1
 80014ca:	4413      	add	r3, r2
 80014cc:	4a2f      	ldr	r2, [pc, #188]	; (800158c <display_menu+0x1dc>)
 80014ce:	189c      	adds	r4, r3, r2
 80014d0:	7979      	ldrb	r1, [r7, #5]
 80014d2:	7b78      	ldrb	r0, [r7, #13]
 80014d4:	4b2c      	ldr	r3, [pc, #176]	; (8001588 <display_menu+0x1d8>)
 80014d6:	781b      	ldrb	r3, [r3, #0]
 80014d8:	1e5a      	subs	r2, r3, #1
 80014da:	4613      	mov	r3, r2
 80014dc:	005b      	lsls	r3, r3, #1
 80014de:	4413      	add	r3, r2
 80014e0:	005b      	lsls	r3, r3, #1
 80014e2:	4403      	add	r3, r0
 80014e4:	461a      	mov	r2, r3
 80014e6:	0052      	lsls	r2, r2, #1
 80014e8:	441a      	add	r2, r3
 80014ea:	00d3      	lsls	r3, r2, #3
 80014ec:	441a      	add	r2, r3
 80014ee:	460b      	mov	r3, r1
 80014f0:	005b      	lsls	r3, r3, #1
 80014f2:	440b      	add	r3, r1
 80014f4:	021b      	lsls	r3, r3, #8
 80014f6:	440b      	add	r3, r1
 80014f8:	4413      	add	r3, r2
 80014fa:	3310      	adds	r3, #16
 80014fc:	4a24      	ldr	r2, [pc, #144]	; (8001590 <display_menu+0x1e0>)
 80014fe:	4413      	add	r3, r2
 8001500:	3301      	adds	r3, #1
 8001502:	4619      	mov	r1, r3
 8001504:	4620      	mov	r0, r4
 8001506:	f005 f9b2 	bl	800686e <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 800150a:	7b7b      	ldrb	r3, [r7, #13]
 800150c:	3301      	adds	r3, #1
 800150e:	737b      	strb	r3, [r7, #13]
 8001510:	7b7b      	ldrb	r3, [r7, #13]
 8001512:	2b05      	cmp	r3, #5
 8001514:	d9d4      	bls.n	80014c0 <display_menu+0x110>
		}
		strcpy(menu_commands[6], "Prev Page");
 8001516:	4a1f      	ldr	r2, [pc, #124]	; (8001594 <display_menu+0x1e4>)
 8001518:	4b1f      	ldr	r3, [pc, #124]	; (8001598 <display_menu+0x1e8>)
 800151a:	cb03      	ldmia	r3!, {r0, r1}
 800151c:	6010      	str	r0, [r2, #0]
 800151e:	6051      	str	r1, [r2, #4]
 8001520:	881b      	ldrh	r3, [r3, #0]
 8001522:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Main Menu");
 8001524:	4a1d      	ldr	r2, [pc, #116]	; (800159c <display_menu+0x1ec>)
 8001526:	4b24      	ldr	r3, [pc, #144]	; (80015b8 <display_menu+0x208>)
 8001528:	cb03      	ldmia	r3!, {r0, r1}
 800152a:	6010      	str	r0, [r2, #0]
 800152c:	6051      	str	r1, [r2, #4]
 800152e:	881b      	ldrh	r3, [r3, #0]
 8001530:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 8001532:	4b1c      	ldr	r3, [pc, #112]	; (80015a4 <display_menu+0x1f4>)
 8001534:	4a1c      	ldr	r2, [pc, #112]	; (80015a8 <display_menu+0x1f8>)
 8001536:	ca07      	ldmia	r2, {r0, r1, r2}
 8001538:	c303      	stmia	r3!, {r0, r1}
 800153a:	801a      	strh	r2, [r3, #0]
		break;
 800153c:	bf00      	nop
	}
	for (uint8_t i = 1; i <= 9; ++i) {
 800153e:	2301      	movs	r3, #1
 8001540:	733b      	strb	r3, [r7, #12]
 8001542:	e015      	b.n	8001570 <display_menu+0x1c0>
		erase_buffer();
 8001544:	f000 fb1e 	bl	8001b84 <erase_buffer>
		draw_string(menu_commands[i-1], white);
 8001548:	7b3b      	ldrb	r3, [r7, #12]
 800154a:	1e5a      	subs	r2, r3, #1
 800154c:	4613      	mov	r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	4413      	add	r3, r2
 8001552:	005b      	lsls	r3, r3, #1
 8001554:	4413      	add	r3, r2
 8001556:	4a0d      	ldr	r2, [pc, #52]	; (800158c <display_menu+0x1dc>)
 8001558:	4413      	add	r3, r2
 800155a:	2101      	movs	r1, #1
 800155c:	4618      	mov	r0, r3
 800155e:	f000 fc16 	bl	8001d8e <draw_string>
		update_display(i);
 8001562:	7b3b      	ldrb	r3, [r7, #12]
 8001564:	4618      	mov	r0, r3
 8001566:	f000 fa19 	bl	800199c <update_display>
	for (uint8_t i = 1; i <= 9; ++i) {
 800156a:	7b3b      	ldrb	r3, [r7, #12]
 800156c:	3301      	adds	r3, #1
 800156e:	733b      	strb	r3, [r7, #12]
 8001570:	7b3b      	ldrb	r3, [r7, #12]
 8001572:	2b09      	cmp	r3, #9
 8001574:	d9e6      	bls.n	8001544 <display_menu+0x194>
 8001576:	e002      	b.n	800157e <display_menu+0x1ce>
	if (!page) return;
 8001578:	bf00      	nop
 800157a:	e000      	b.n	800157e <display_menu+0x1ce>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 800157c:	bf00      	nop
	}
}
 800157e:	3714      	adds	r7, #20
 8001580:	46bd      	mov	sp, r7
 8001582:	bd90      	pop	{r4, r7, pc}
 8001584:	20001708 	.word	0x20001708
 8001588:	20006da6 	.word	0x20006da6
 800158c:	20006da8 	.word	0x20006da8
 8001590:	2000170c 	.word	0x2000170c
 8001594:	20006dea 	.word	0x20006dea
 8001598:	08006944 	.word	0x08006944
 800159c:	20006df5 	.word	0x20006df5
 80015a0:	08006950 	.word	0x08006950
 80015a4:	20006e00 	.word	0x20006e00
 80015a8:	0800695c 	.word	0x0800695c
 80015ac:	08006968 	.word	0x08006968
 80015b0:	20006db3 	.word	0x20006db3
 80015b4:	08006974 	.word	0x08006974
 80015b8:	08006980 	.word	0x08006980

080015bc <button_pressed>:

void button_pressed(uint8_t button) {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0
 80015c2:	4603      	mov	r3, r0
 80015c4:	71fb      	strb	r3, [r7, #7]
	static uint8_t in_device_menu = 0;
	if (!button || button > 9) return;
 80015c6:	79fb      	ldrb	r3, [r7, #7]
 80015c8:	2b00      	cmp	r3, #0
 80015ca:	f000 80d7 	beq.w	800177c <button_pressed+0x1c0>
 80015ce:	79fb      	ldrb	r3, [r7, #7]
 80015d0:	2b09      	cmp	r3, #9
 80015d2:	f200 80d3 	bhi.w	800177c <button_pressed+0x1c0>

	switch(current_menu) {
 80015d6:	4b6c      	ldr	r3, [pc, #432]	; (8001788 <button_pressed+0x1cc>)
 80015d8:	781b      	ldrb	r3, [r3, #0]
 80015da:	2b02      	cmp	r3, #2
 80015dc:	d075      	beq.n	80016ca <button_pressed+0x10e>
 80015de:	2b02      	cmp	r3, #2
 80015e0:	f300 80ce 	bgt.w	8001780 <button_pressed+0x1c4>
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d002      	beq.n	80015ee <button_pressed+0x32>
 80015e8:	2b01      	cmp	r3, #1
 80015ea:	d055      	beq.n	8001698 <button_pressed+0xdc>
			break;
		}
		in_device_menu = 1;
		break;
	default:
		break;
 80015ec:	e0c8      	b.n	8001780 <button_pressed+0x1c4>
		switch(button) {
 80015ee:	79fb      	ldrb	r3, [r7, #7]
 80015f0:	2b09      	cmp	r3, #9
 80015f2:	d02b      	beq.n	800164c <button_pressed+0x90>
 80015f4:	2b09      	cmp	r3, #9
 80015f6:	dc39      	bgt.n	800166c <button_pressed+0xb0>
 80015f8:	2b07      	cmp	r3, #7
 80015fa:	d002      	beq.n	8001602 <button_pressed+0x46>
 80015fc:	2b08      	cmp	r3, #8
 80015fe:	d010      	beq.n	8001622 <button_pressed+0x66>
 8001600:	e034      	b.n	800166c <button_pressed+0xb0>
			display_menu(main_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 8001602:	4b62      	ldr	r3, [pc, #392]	; (800178c <button_pressed+0x1d0>)
 8001604:	781b      	ldrb	r3, [r3, #0]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d004      	beq.n	8001614 <button_pressed+0x58>
 800160a:	4b60      	ldr	r3, [pc, #384]	; (800178c <button_pressed+0x1d0>)
 800160c:	781b      	ldrb	r3, [r3, #0]
 800160e:	3b01      	subs	r3, #1
 8001610:	b2db      	uxtb	r3, r3
 8001612:	e000      	b.n	8001616 <button_pressed+0x5a>
 8001614:	2303      	movs	r3, #3
 8001616:	2200      	movs	r2, #0
 8001618:	4619      	mov	r1, r3
 800161a:	2000      	movs	r0, #0
 800161c:	f7ff fec8 	bl	80013b0 <display_menu>
			break;
 8001620:	e036      	b.n	8001690 <button_pressed+0xd4>
			display_menu(settings_menu, 1, 0);
 8001622:	2200      	movs	r2, #0
 8001624:	2101      	movs	r1, #1
 8001626:	2001      	movs	r0, #1
 8001628:	f7ff fec2 	bl	80013b0 <display_menu>
			for (uint8_t i = 3; i <= 8; ++i) {
 800162c:	2303      	movs	r3, #3
 800162e:	73fb      	strb	r3, [r7, #15]
 8001630:	e006      	b.n	8001640 <button_pressed+0x84>
				disable_button(i);
 8001632:	7bfb      	ldrb	r3, [r7, #15]
 8001634:	4618      	mov	r0, r3
 8001636:	f7fe ffad 	bl	8000594 <disable_button>
			for (uint8_t i = 3; i <= 8; ++i) {
 800163a:	7bfb      	ldrb	r3, [r7, #15]
 800163c:	3301      	adds	r3, #1
 800163e:	73fb      	strb	r3, [r7, #15]
 8001640:	7bfb      	ldrb	r3, [r7, #15]
 8001642:	2b08      	cmp	r3, #8
 8001644:	d9f5      	bls.n	8001632 <button_pressed+0x76>
			update_buttons();
 8001646:	f7ff f81b 	bl	8000680 <update_buttons>
			break;
 800164a:	e021      	b.n	8001690 <button_pressed+0xd4>
			display_menu(main_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 800164c:	4b4f      	ldr	r3, [pc, #316]	; (800178c <button_pressed+0x1d0>)
 800164e:	781b      	ldrb	r3, [r3, #0]
 8001650:	2b03      	cmp	r3, #3
 8001652:	d004      	beq.n	800165e <button_pressed+0xa2>
 8001654:	4b4d      	ldr	r3, [pc, #308]	; (800178c <button_pressed+0x1d0>)
 8001656:	781b      	ldrb	r3, [r3, #0]
 8001658:	3301      	adds	r3, #1
 800165a:	b2db      	uxtb	r3, r3
 800165c:	e000      	b.n	8001660 <button_pressed+0xa4>
 800165e:	2301      	movs	r3, #1
 8001660:	2200      	movs	r2, #0
 8001662:	4619      	mov	r1, r3
 8001664:	2000      	movs	r0, #0
 8001666:	f7ff fea3 	bl	80013b0 <display_menu>
			break;
 800166a:	e011      	b.n	8001690 <button_pressed+0xd4>
			display_menu(device_menu, 1, button + (6 * (current_page - 1)));
 800166c:	4b47      	ldr	r3, [pc, #284]	; (800178c <button_pressed+0x1d0>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	461a      	mov	r2, r3
 8001672:	0052      	lsls	r2, r2, #1
 8001674:	4413      	add	r3, r2
 8001676:	005b      	lsls	r3, r3, #1
 8001678:	b2da      	uxtb	r2, r3
 800167a:	79fb      	ldrb	r3, [r7, #7]
 800167c:	4413      	add	r3, r2
 800167e:	b2db      	uxtb	r3, r3
 8001680:	3b06      	subs	r3, #6
 8001682:	b2db      	uxtb	r3, r3
 8001684:	461a      	mov	r2, r3
 8001686:	2101      	movs	r1, #1
 8001688:	2002      	movs	r0, #2
 800168a:	f7ff fe91 	bl	80013b0 <display_menu>
			break;
 800168e:	bf00      	nop
		in_device_menu = 0;
 8001690:	4b3f      	ldr	r3, [pc, #252]	; (8001790 <button_pressed+0x1d4>)
 8001692:	2200      	movs	r2, #0
 8001694:	701a      	strb	r2, [r3, #0]
		break;
 8001696:	e074      	b.n	8001782 <button_pressed+0x1c6>
		switch(button) {
 8001698:	79fb      	ldrb	r3, [r7, #7]
 800169a:	2b09      	cmp	r3, #9
 800169c:	d008      	beq.n	80016b0 <button_pressed+0xf4>
 800169e:	2b09      	cmp	r3, #9
 80016a0:	dc0e      	bgt.n	80016c0 <button_pressed+0x104>
 80016a2:	2b01      	cmp	r3, #1
 80016a4:	d001      	beq.n	80016aa <button_pressed+0xee>
 80016a6:	2b02      	cmp	r3, #2
			break;
 80016a8:	e00b      	b.n	80016c2 <button_pressed+0x106>
			init_xbee_communication();
 80016aa:	f7ff f90b 	bl	80008c4 <init_xbee_communication>
			break;
 80016ae:	e008      	b.n	80016c2 <button_pressed+0x106>
			display_menu(main_menu, 1, 0);
 80016b0:	2200      	movs	r2, #0
 80016b2:	2101      	movs	r1, #1
 80016b4:	2000      	movs	r0, #0
 80016b6:	f7ff fe7b 	bl	80013b0 <display_menu>
			enable_all_buttons();
 80016ba:	f7fe ffcb 	bl	8000654 <enable_all_buttons>
			break;
 80016be:	e000      	b.n	80016c2 <button_pressed+0x106>
			break;
 80016c0:	bf00      	nop
		in_device_menu = 0;
 80016c2:	4b33      	ldr	r3, [pc, #204]	; (8001790 <button_pressed+0x1d4>)
 80016c4:	2200      	movs	r2, #0
 80016c6:	701a      	strb	r2, [r3, #0]
		break;
 80016c8:	e05b      	b.n	8001782 <button_pressed+0x1c6>
		switch(button) {
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	2b09      	cmp	r3, #9
 80016ce:	d02e      	beq.n	800172e <button_pressed+0x172>
 80016d0:	2b09      	cmp	r3, #9
 80016d2:	dc4e      	bgt.n	8001772 <button_pressed+0x1b6>
 80016d4:	2b07      	cmp	r3, #7
 80016d6:	d002      	beq.n	80016de <button_pressed+0x122>
 80016d8:	2b08      	cmp	r3, #8
 80016da:	d022      	beq.n	8001722 <button_pressed+0x166>
			break;
 80016dc:	e049      	b.n	8001772 <button_pressed+0x1b6>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 80016de:	4b2b      	ldr	r3, [pc, #172]	; (800178c <button_pressed+0x1d0>)
 80016e0:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80016e2:	2b01      	cmp	r3, #1
 80016e4:	d004      	beq.n	80016f0 <button_pressed+0x134>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 80016e6:	4b29      	ldr	r3, [pc, #164]	; (800178c <button_pressed+0x1d0>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80016ea:	3b01      	subs	r3, #1
 80016ec:	b2d9      	uxtb	r1, r3
 80016ee:	e000      	b.n	80016f2 <button_pressed+0x136>
 80016f0:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 80016f2:	4b27      	ldr	r3, [pc, #156]	; (8001790 <button_pressed+0x1d4>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80016f6:	2b00      	cmp	r3, #0
 80016f8:	d10c      	bne.n	8001714 <button_pressed+0x158>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 80016fa:	4b24      	ldr	r3, [pc, #144]	; (800178c <button_pressed+0x1d0>)
 80016fc:	781b      	ldrb	r3, [r3, #0]
 80016fe:	461a      	mov	r2, r3
 8001700:	0052      	lsls	r2, r2, #1
 8001702:	4413      	add	r3, r2
 8001704:	005b      	lsls	r3, r3, #1
 8001706:	b2da      	uxtb	r2, r3
 8001708:	79fb      	ldrb	r3, [r7, #7]
 800170a:	4413      	add	r3, r2
 800170c:	b2db      	uxtb	r3, r3
			display_menu(
 800170e:	3b06      	subs	r3, #6
 8001710:	b2db      	uxtb	r3, r3
 8001712:	e001      	b.n	8001718 <button_pressed+0x15c>
 8001714:	4b1d      	ldr	r3, [pc, #116]	; (800178c <button_pressed+0x1d0>)
 8001716:	781b      	ldrb	r3, [r3, #0]
 8001718:	461a      	mov	r2, r3
 800171a:	2002      	movs	r0, #2
 800171c:	f7ff fe48 	bl	80013b0 <display_menu>
			break;
 8001720:	e028      	b.n	8001774 <button_pressed+0x1b8>
			display_menu(main_menu, 1, 0);
 8001722:	2200      	movs	r2, #0
 8001724:	2101      	movs	r1, #1
 8001726:	2000      	movs	r0, #0
 8001728:	f7ff fe42 	bl	80013b0 <display_menu>
			break;
 800172c:	e022      	b.n	8001774 <button_pressed+0x1b8>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 800172e:	4b17      	ldr	r3, [pc, #92]	; (800178c <button_pressed+0x1d0>)
 8001730:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001732:	2b04      	cmp	r3, #4
 8001734:	d004      	beq.n	8001740 <button_pressed+0x184>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001736:	4b15      	ldr	r3, [pc, #84]	; (800178c <button_pressed+0x1d0>)
 8001738:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 800173a:	3301      	adds	r3, #1
 800173c:	b2d9      	uxtb	r1, r3
 800173e:	e000      	b.n	8001742 <button_pressed+0x186>
 8001740:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001742:	4b13      	ldr	r3, [pc, #76]	; (8001790 <button_pressed+0x1d4>)
 8001744:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001746:	2b00      	cmp	r3, #0
 8001748:	d10c      	bne.n	8001764 <button_pressed+0x1a8>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 800174a:	4b10      	ldr	r3, [pc, #64]	; (800178c <button_pressed+0x1d0>)
 800174c:	781b      	ldrb	r3, [r3, #0]
 800174e:	461a      	mov	r2, r3
 8001750:	0052      	lsls	r2, r2, #1
 8001752:	4413      	add	r3, r2
 8001754:	005b      	lsls	r3, r3, #1
 8001756:	b2da      	uxtb	r2, r3
 8001758:	79fb      	ldrb	r3, [r7, #7]
 800175a:	4413      	add	r3, r2
 800175c:	b2db      	uxtb	r3, r3
			display_menu(
 800175e:	3b06      	subs	r3, #6
 8001760:	b2db      	uxtb	r3, r3
 8001762:	e001      	b.n	8001768 <button_pressed+0x1ac>
 8001764:	4b09      	ldr	r3, [pc, #36]	; (800178c <button_pressed+0x1d0>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	461a      	mov	r2, r3
 800176a:	2002      	movs	r0, #2
 800176c:	f7ff fe20 	bl	80013b0 <display_menu>
			break;
 8001770:	e000      	b.n	8001774 <button_pressed+0x1b8>
			break;
 8001772:	bf00      	nop
		in_device_menu = 1;
 8001774:	4b06      	ldr	r3, [pc, #24]	; (8001790 <button_pressed+0x1d4>)
 8001776:	2201      	movs	r2, #1
 8001778:	701a      	strb	r2, [r3, #0]
		break;
 800177a:	e002      	b.n	8001782 <button_pressed+0x1c6>
	if (!button || button > 9) return;
 800177c:	bf00      	nop
 800177e:	e000      	b.n	8001782 <button_pressed+0x1c6>
		break;
 8001780:	bf00      	nop
	}
}
 8001782:	3710      	adds	r7, #16
 8001784:	46bd      	mov	sp, r7
 8001786:	bd80      	pop	{r7, pc}
 8001788:	20001708 	.word	0x20001708
 800178c:	20006da6 	.word	0x20006da6
 8001790:	20006e0b 	.word	0x20006e0b

08001794 <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 8001794:	b580      	push	{r7, lr}
 8001796:	b084      	sub	sp, #16
 8001798:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 800179a:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800179e:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 80017a0:	1d3a      	adds	r2, r7, #4
 80017a2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017a6:	9300      	str	r3, [sp, #0]
 80017a8:	2302      	movs	r3, #2
 80017aa:	21a2      	movs	r1, #162	; 0xa2
 80017ac:	4803      	ldr	r0, [pc, #12]	; (80017bc <disable_OLED_EEPROM_writes+0x28>)
 80017ae:	f001 feaf 	bl	8003510 <HAL_I2C_Master_Transmit>
}
 80017b2:	bf00      	nop
 80017b4:	3708      	adds	r7, #8
 80017b6:	46bd      	mov	sp, r7
 80017b8:	bd80      	pop	{r7, pc}
 80017ba:	bf00      	nop
 80017bc:	200014b0 	.word	0x200014b0

080017c0 <drop_all_CS>:

void drop_all_CS(void) {
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b082      	sub	sp, #8
 80017c4:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 80017c6:	4b0a      	ldr	r3, [pc, #40]	; (80017f0 <drop_all_CS+0x30>)
 80017c8:	2200      	movs	r2, #0
 80017ca:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <drop_all_CS+0x30>)
 80017ce:	2200      	movs	r2, #0
 80017d0:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 80017d2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80017d6:	9300      	str	r3, [sp, #0]
 80017d8:	2303      	movs	r3, #3
 80017da:	4a05      	ldr	r2, [pc, #20]	; (80017f0 <drop_all_CS+0x30>)
 80017dc:	21a2      	movs	r1, #162	; 0xa2
 80017de:	4805      	ldr	r0, [pc, #20]	; (80017f4 <drop_all_CS+0x34>)
 80017e0:	f001 fe96 	bl	8003510 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80017e4:	2001      	movs	r0, #1
 80017e6:	f000 feb5 	bl	8002554 <HAL_Delay>
}
 80017ea:	bf00      	nop
 80017ec:	46bd      	mov	sp, r7
 80017ee:	bd80      	pop	{r7, pc}
 80017f0:	20001418 	.word	0x20001418
 80017f4:	200014b0 	.word	0x200014b0

080017f8 <raise_all_CS>:

void raise_all_CS(void) {
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 80017fe:	4b09      	ldr	r3, [pc, #36]	; (8001824 <raise_all_CS+0x2c>)
 8001800:	22ff      	movs	r2, #255	; 0xff
 8001802:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8001804:	4b07      	ldr	r3, [pc, #28]	; (8001824 <raise_all_CS+0x2c>)
 8001806:	2201      	movs	r2, #1
 8001808:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 800180a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800180e:	9300      	str	r3, [sp, #0]
 8001810:	2303      	movs	r3, #3
 8001812:	4a04      	ldr	r2, [pc, #16]	; (8001824 <raise_all_CS+0x2c>)
 8001814:	21a2      	movs	r1, #162	; 0xa2
 8001816:	4804      	ldr	r0, [pc, #16]	; (8001828 <raise_all_CS+0x30>)
 8001818:	f001 fe7a 	bl	8003510 <HAL_I2C_Master_Transmit>
}
 800181c:	bf00      	nop
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	20001418 	.word	0x20001418
 8001828:	200014b0 	.word	0x200014b0

0800182c <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 800182c:	b580      	push	{r7, lr}
 800182e:	b084      	sub	sp, #16
 8001830:	af02      	add	r7, sp, #8
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 8001836:	4b1a      	ldr	r3, [pc, #104]	; (80018a0 <drop_CS+0x74>)
 8001838:	22ff      	movs	r2, #255	; 0xff
 800183a:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 800183c:	4b18      	ldr	r3, [pc, #96]	; (80018a0 <drop_CS+0x74>)
 800183e:	2201      	movs	r2, #1
 8001840:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	2b09      	cmp	r3, #9
 8001846:	d107      	bne.n	8001858 <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 8001848:	4b15      	ldr	r3, [pc, #84]	; (80018a0 <drop_CS+0x74>)
 800184a:	789b      	ldrb	r3, [r3, #2]
 800184c:	f023 0301 	bic.w	r3, r3, #1
 8001850:	b2da      	uxtb	r2, r3
 8001852:	4b13      	ldr	r3, [pc, #76]	; (80018a0 <drop_CS+0x74>)
 8001854:	709a      	strb	r2, [r3, #2]
 8001856:	e012      	b.n	800187e <drop_CS+0x52>
	} else if (display <= 8) {
 8001858:	79fb      	ldrb	r3, [r7, #7]
 800185a:	2b08      	cmp	r3, #8
 800185c:	d80f      	bhi.n	800187e <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 800185e:	4b10      	ldr	r3, [pc, #64]	; (80018a0 <drop_CS+0x74>)
 8001860:	785b      	ldrb	r3, [r3, #1]
 8001862:	b25a      	sxtb	r2, r3
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	3b01      	subs	r3, #1
 8001868:	2101      	movs	r1, #1
 800186a:	fa01 f303 	lsl.w	r3, r1, r3
 800186e:	b25b      	sxtb	r3, r3
 8001870:	43db      	mvns	r3, r3
 8001872:	b25b      	sxtb	r3, r3
 8001874:	4013      	ands	r3, r2
 8001876:	b25b      	sxtb	r3, r3
 8001878:	b2da      	uxtb	r2, r3
 800187a:	4b09      	ldr	r3, [pc, #36]	; (80018a0 <drop_CS+0x74>)
 800187c:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 800187e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001882:	9300      	str	r3, [sp, #0]
 8001884:	2303      	movs	r3, #3
 8001886:	4a06      	ldr	r2, [pc, #24]	; (80018a0 <drop_CS+0x74>)
 8001888:	21a2      	movs	r1, #162	; 0xa2
 800188a:	4806      	ldr	r0, [pc, #24]	; (80018a4 <drop_CS+0x78>)
 800188c:	f001 fe40 	bl	8003510 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001890:	2001      	movs	r0, #1
 8001892:	f000 fe5f 	bl	8002554 <HAL_Delay>
}
 8001896:	bf00      	nop
 8001898:	3708      	adds	r7, #8
 800189a:	46bd      	mov	sp, r7
 800189c:	bd80      	pop	{r7, pc}
 800189e:	bf00      	nop
 80018a0:	20001418 	.word	0x20001418
 80018a4:	200014b0 	.word	0x200014b0

080018a8 <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b082      	sub	sp, #8
 80018ac:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 80018ae:	4b37      	ldr	r3, [pc, #220]	; (800198c <init_displays+0xe4>)
 80018b0:	681b      	ldr	r3, [r3, #0]
 80018b2:	4a36      	ldr	r2, [pc, #216]	; (800198c <init_displays+0xe4>)
 80018b4:	f023 0301 	bic.w	r3, r3, #1
 80018b8:	6013      	str	r3, [r2, #0]
	disable_OLED_EEPROM_writes();
 80018ba:	f7ff ff6b 	bl	8001794 <disable_OLED_EEPROM_writes>
	raise_all_CS();
 80018be:	f7ff ff9b 	bl	80017f8 <raise_all_CS>
	DC_HIGH();
 80018c2:	2201      	movs	r2, #1
 80018c4:	2101      	movs	r1, #1
 80018c6:	4832      	ldr	r0, [pc, #200]	; (8001990 <init_displays+0xe8>)
 80018c8:	f001 fcc4 	bl	8003254 <HAL_GPIO_WritePin>
	RST_HIGH();
 80018cc:	2201      	movs	r2, #1
 80018ce:	2102      	movs	r1, #2
 80018d0:	482f      	ldr	r0, [pc, #188]	; (8001990 <init_displays+0xe8>)
 80018d2:	f001 fcbf 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80018d6:	200a      	movs	r0, #10
 80018d8:	f000 fe3c 	bl	8002554 <HAL_Delay>
	RST_LOW();
 80018dc:	2200      	movs	r2, #0
 80018de:	2102      	movs	r1, #2
 80018e0:	482b      	ldr	r0, [pc, #172]	; (8001990 <init_displays+0xe8>)
 80018e2:	f001 fcb7 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 80018e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80018ea:	2201      	movs	r2, #1
 80018ec:	4929      	ldr	r1, [pc, #164]	; (8001994 <init_displays+0xec>)
 80018ee:	482a      	ldr	r0, [pc, #168]	; (8001998 <init_displays+0xf0>)
 80018f0:	f002 fe37 	bl	8004562 <HAL_SPI_Transmit>
	HAL_Delay(10);
 80018f4:	200a      	movs	r0, #10
 80018f6:	f000 fe2d 	bl	8002554 <HAL_Delay>
	RST_HIGH();
 80018fa:	2201      	movs	r2, #1
 80018fc:	2102      	movs	r1, #2
 80018fe:	4824      	ldr	r0, [pc, #144]	; (8001990 <init_displays+0xe8>)
 8001900:	f001 fca8 	bl	8003254 <HAL_GPIO_WritePin>

	DC_LOW();
 8001904:	2200      	movs	r2, #0
 8001906:	2101      	movs	r1, #1
 8001908:	4821      	ldr	r0, [pc, #132]	; (8001990 <init_displays+0xe8>)
 800190a:	f001 fca3 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800190e:	2001      	movs	r0, #1
 8001910:	f000 fe20 	bl	8002554 <HAL_Delay>

	drop_all_CS();
 8001914:	f7ff ff54 	bl	80017c0 <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001918:	2300      	movs	r3, #0
 800191a:	71fb      	strb	r3, [r7, #7]
 800191c:	e002      	b.n	8001924 <init_displays+0x7c>
 800191e:	79fb      	ldrb	r3, [r7, #7]
 8001920:	3301      	adds	r3, #1
 8001922:	71fb      	strb	r3, [r7, #7]
 8001924:	79fb      	ldrb	r3, [r7, #7]
 8001926:	2b4f      	cmp	r3, #79	; 0x4f
 8001928:	d9f9      	bls.n	800191e <init_displays+0x76>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 800192a:	2300      	movs	r3, #0
 800192c:	80bb      	strh	r3, [r7, #4]
 800192e:	e014      	b.n	800195a <init_displays+0xb2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 8001930:	88bb      	ldrh	r3, [r7, #4]
 8001932:	4a18      	ldr	r2, [pc, #96]	; (8001994 <init_displays+0xec>)
 8001934:	1899      	adds	r1, r3, r2
 8001936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800193a:	2201      	movs	r2, #1
 800193c:	4816      	ldr	r0, [pc, #88]	; (8001998 <init_displays+0xf0>)
 800193e:	f002 fe10 	bl	8004562 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001942:	2300      	movs	r3, #0
 8001944:	70fb      	strb	r3, [r7, #3]
 8001946:	e002      	b.n	800194e <init_displays+0xa6>
 8001948:	78fb      	ldrb	r3, [r7, #3]
 800194a:	3301      	adds	r3, #1
 800194c:	70fb      	strb	r3, [r7, #3]
 800194e:	78fb      	ldrb	r3, [r7, #3]
 8001950:	2b09      	cmp	r3, #9
 8001952:	d9f9      	bls.n	8001948 <init_displays+0xa0>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8001954:	88bb      	ldrh	r3, [r7, #4]
 8001956:	3301      	adds	r3, #1
 8001958:	80bb      	strh	r3, [r7, #4]
 800195a:	88bb      	ldrh	r3, [r7, #4]
 800195c:	2b19      	cmp	r3, #25
 800195e:	d9e7      	bls.n	8001930 <init_displays+0x88>
	}

	raise_all_CS();
 8001960:	f7ff ff4a 	bl	80017f8 <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 8001964:	2201      	movs	r2, #1
 8001966:	2101      	movs	r1, #1
 8001968:	4809      	ldr	r0, [pc, #36]	; (8001990 <init_displays+0xe8>)
 800196a:	f001 fc73 	bl	8003254 <HAL_GPIO_WritePin>
	START_BUTTON_POLL();
 800196e:	4b07      	ldr	r3, [pc, #28]	; (800198c <init_displays+0xe4>)
 8001970:	681b      	ldr	r3, [r3, #0]
 8001972:	4a06      	ldr	r2, [pc, #24]	; (800198c <init_displays+0xe4>)
 8001974:	f043 0301 	orr.w	r3, r3, #1
 8001978:	6013      	str	r3, [r2, #0]
	erase_buffer();
 800197a:	f000 f903 	bl	8001b84 <erase_buffer>
	update_all_displays();
 800197e:	f000 f889 	bl	8001a94 <update_all_displays>
}
 8001982:	bf00      	nop
 8001984:	3708      	adds	r7, #8
 8001986:	46bd      	mov	sp, r7
 8001988:	bd80      	pop	{r7, pc}
 800198a:	bf00      	nop
 800198c:	40000c00 	.word	0x40000c00
 8001990:	40020000 	.word	0x40020000
 8001994:	2000141c 	.word	0x2000141c
 8001998:	20001504 	.word	0x20001504

0800199c <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 800199c:	b580      	push	{r7, lr}
 800199e:	b086      	sub	sp, #24
 80019a0:	af00      	add	r7, sp, #0
 80019a2:	4603      	mov	r3, r0
 80019a4:	71fb      	strb	r3, [r7, #7]
	STOP_BUTTON_POLL();
 80019a6:	4b36      	ldr	r3, [pc, #216]	; (8001a80 <update_display+0xe4>)
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	4a35      	ldr	r2, [pc, #212]	; (8001a80 <update_display+0xe4>)
 80019ac:	f023 0301 	bic.w	r3, r3, #1
 80019b0:	6013      	str	r3, [r2, #0]
	DC_LOW();
 80019b2:	2200      	movs	r2, #0
 80019b4:	2101      	movs	r1, #1
 80019b6:	4833      	ldr	r0, [pc, #204]	; (8001a84 <update_display+0xe8>)
 80019b8:	f001 fc4c 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80019bc:	2001      	movs	r0, #1
 80019be:	f000 fdc9 	bl	8002554 <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 80019c2:	79fb      	ldrb	r3, [r7, #7]
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff ff31 	bl	800182c <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 80019ca:	2300      	movs	r3, #0
 80019cc:	75fb      	strb	r3, [r7, #23]
 80019ce:	e002      	b.n	80019d6 <update_display+0x3a>
 80019d0:	7dfb      	ldrb	r3, [r7, #23]
 80019d2:	3301      	adds	r3, #1
 80019d4:	75fb      	strb	r3, [r7, #23]
 80019d6:	7dfb      	ldrb	r3, [r7, #23]
 80019d8:	2b4f      	cmp	r3, #79	; 0x4f
 80019da:	d9f9      	bls.n	80019d0 <update_display+0x34>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 80019dc:	2300      	movs	r3, #0
 80019de:	82bb      	strh	r3, [r7, #20]
 80019e0:	e014      	b.n	8001a0c <update_display+0x70>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 80019e2:	8abb      	ldrh	r3, [r7, #20]
 80019e4:	4a28      	ldr	r2, [pc, #160]	; (8001a88 <update_display+0xec>)
 80019e6:	1899      	adds	r1, r3, r2
 80019e8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80019ec:	2201      	movs	r2, #1
 80019ee:	4827      	ldr	r0, [pc, #156]	; (8001a8c <update_display+0xf0>)
 80019f0:	f002 fdb7 	bl	8004562 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 80019f4:	2300      	movs	r3, #0
 80019f6:	74fb      	strb	r3, [r7, #19]
 80019f8:	e002      	b.n	8001a00 <update_display+0x64>
 80019fa:	7cfb      	ldrb	r3, [r7, #19]
 80019fc:	3301      	adds	r3, #1
 80019fe:	74fb      	strb	r3, [r7, #19]
 8001a00:	7cfb      	ldrb	r3, [r7, #19]
 8001a02:	2b09      	cmp	r3, #9
 8001a04:	d9f9      	bls.n	80019fa <update_display+0x5e>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001a06:	8abb      	ldrh	r3, [r7, #20]
 8001a08:	3301      	adds	r3, #1
 8001a0a:	82bb      	strh	r3, [r7, #20]
 8001a0c:	8abb      	ldrh	r3, [r7, #20]
 8001a0e:	2b05      	cmp	r3, #5
 8001a10:	d9e7      	bls.n	80019e2 <update_display+0x46>
	}

	DC_HIGH();
 8001a12:	2201      	movs	r2, #1
 8001a14:	2101      	movs	r1, #1
 8001a16:	481b      	ldr	r0, [pc, #108]	; (8001a84 <update_display+0xe8>)
 8001a18:	f001 fc1c 	bl	8003254 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	74bb      	strb	r3, [r7, #18]
 8001a20:	e002      	b.n	8001a28 <update_display+0x8c>
 8001a22:	7cbb      	ldrb	r3, [r7, #18]
 8001a24:	3301      	adds	r3, #1
 8001a26:	74bb      	strb	r3, [r7, #18]
 8001a28:	7cbb      	ldrb	r3, [r7, #18]
 8001a2a:	2b4f      	cmp	r3, #79	; 0x4f
 8001a2c:	d9f9      	bls.n	8001a22 <update_display+0x86>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001a2e:	2300      	movs	r3, #0
 8001a30:	823b      	strh	r3, [r7, #16]
 8001a32:	e014      	b.n	8001a5e <update_display+0xc2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8001a34:	8a3b      	ldrh	r3, [r7, #16]
 8001a36:	4a16      	ldr	r2, [pc, #88]	; (8001a90 <update_display+0xf4>)
 8001a38:	1899      	adds	r1, r3, r2
 8001a3a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001a3e:	2201      	movs	r2, #1
 8001a40:	4812      	ldr	r0, [pc, #72]	; (8001a8c <update_display+0xf0>)
 8001a42:	f002 fd8e 	bl	8004562 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8001a46:	2300      	movs	r3, #0
 8001a48:	73fb      	strb	r3, [r7, #15]
 8001a4a:	e002      	b.n	8001a52 <update_display+0xb6>
 8001a4c:	7bfb      	ldrb	r3, [r7, #15]
 8001a4e:	3301      	adds	r3, #1
 8001a50:	73fb      	strb	r3, [r7, #15]
 8001a52:	7bfb      	ldrb	r3, [r7, #15]
 8001a54:	2b09      	cmp	r3, #9
 8001a56:	d9f9      	bls.n	8001a4c <update_display+0xb0>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001a58:	8a3b      	ldrh	r3, [r7, #16]
 8001a5a:	3301      	adds	r3, #1
 8001a5c:	823b      	strh	r3, [r7, #16]
 8001a5e:	8a3b      	ldrh	r3, [r7, #16]
 8001a60:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001a64:	d3e6      	bcc.n	8001a34 <update_display+0x98>
	}

	raise_all_CS();
 8001a66:	f7ff fec7 	bl	80017f8 <raise_all_CS>
	START_BUTTON_POLL();
 8001a6a:	4b05      	ldr	r3, [pc, #20]	; (8001a80 <update_display+0xe4>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4a04      	ldr	r2, [pc, #16]	; (8001a80 <update_display+0xe4>)
 8001a70:	f043 0301 	orr.w	r3, r3, #1
 8001a74:	6013      	str	r3, [r2, #0]
}
 8001a76:	bf00      	nop
 8001a78:	3718      	adds	r7, #24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bd80      	pop	{r7, pc}
 8001a7e:	bf00      	nop
 8001a80:	40000c00 	.word	0x40000c00
 8001a84:	40020000 	.word	0x40020000
 8001a88:	20001438 	.word	0x20001438
 8001a8c:	20001504 	.word	0x20001504
 8001a90:	20006e0c 	.word	0x20006e0c

08001a94 <update_all_displays>:

void update_all_displays() {
 8001a94:	b580      	push	{r7, lr}
 8001a96:	b084      	sub	sp, #16
 8001a98:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8001a9a:	4b35      	ldr	r3, [pc, #212]	; (8001b70 <update_all_displays+0xdc>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4a34      	ldr	r2, [pc, #208]	; (8001b70 <update_all_displays+0xdc>)
 8001aa0:	f023 0301 	bic.w	r3, r3, #1
 8001aa4:	6013      	str	r3, [r2, #0]
	DC_LOW();
 8001aa6:	2200      	movs	r2, #0
 8001aa8:	2101      	movs	r1, #1
 8001aaa:	4832      	ldr	r0, [pc, #200]	; (8001b74 <update_all_displays+0xe0>)
 8001aac:	f001 fbd2 	bl	8003254 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ab0:	2001      	movs	r0, #1
 8001ab2:	f000 fd4f 	bl	8002554 <HAL_Delay>
	drop_all_CS();
 8001ab6:	f7ff fe83 	bl	80017c0 <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001aba:	2300      	movs	r3, #0
 8001abc:	73fb      	strb	r3, [r7, #15]
 8001abe:	e002      	b.n	8001ac6 <update_all_displays+0x32>
 8001ac0:	7bfb      	ldrb	r3, [r7, #15]
 8001ac2:	3301      	adds	r3, #1
 8001ac4:	73fb      	strb	r3, [r7, #15]
 8001ac6:	7bfb      	ldrb	r3, [r7, #15]
 8001ac8:	2b4f      	cmp	r3, #79	; 0x4f
 8001aca:	d9f9      	bls.n	8001ac0 <update_all_displays+0x2c>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001acc:	2300      	movs	r3, #0
 8001ace:	81bb      	strh	r3, [r7, #12]
 8001ad0:	e014      	b.n	8001afc <update_all_displays+0x68>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8001ad2:	89bb      	ldrh	r3, [r7, #12]
 8001ad4:	4a28      	ldr	r2, [pc, #160]	; (8001b78 <update_all_displays+0xe4>)
 8001ad6:	1899      	adds	r1, r3, r2
 8001ad8:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001adc:	2201      	movs	r2, #1
 8001ade:	4827      	ldr	r0, [pc, #156]	; (8001b7c <update_all_displays+0xe8>)
 8001ae0:	f002 fd3f 	bl	8004562 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001ae4:	2300      	movs	r3, #0
 8001ae6:	72fb      	strb	r3, [r7, #11]
 8001ae8:	e002      	b.n	8001af0 <update_all_displays+0x5c>
 8001aea:	7afb      	ldrb	r3, [r7, #11]
 8001aec:	3301      	adds	r3, #1
 8001aee:	72fb      	strb	r3, [r7, #11]
 8001af0:	7afb      	ldrb	r3, [r7, #11]
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d9f9      	bls.n	8001aea <update_all_displays+0x56>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001af6:	89bb      	ldrh	r3, [r7, #12]
 8001af8:	3301      	adds	r3, #1
 8001afa:	81bb      	strh	r3, [r7, #12]
 8001afc:	89bb      	ldrh	r3, [r7, #12]
 8001afe:	2b05      	cmp	r3, #5
 8001b00:	d9e7      	bls.n	8001ad2 <update_all_displays+0x3e>
	}

	DC_HIGH();
 8001b02:	2201      	movs	r2, #1
 8001b04:	2101      	movs	r1, #1
 8001b06:	481b      	ldr	r0, [pc, #108]	; (8001b74 <update_all_displays+0xe0>)
 8001b08:	f001 fba4 	bl	8003254 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	72bb      	strb	r3, [r7, #10]
 8001b10:	e002      	b.n	8001b18 <update_all_displays+0x84>
 8001b12:	7abb      	ldrb	r3, [r7, #10]
 8001b14:	3301      	adds	r3, #1
 8001b16:	72bb      	strb	r3, [r7, #10]
 8001b18:	7abb      	ldrb	r3, [r7, #10]
 8001b1a:	2b4f      	cmp	r3, #79	; 0x4f
 8001b1c:	d9f9      	bls.n	8001b12 <update_all_displays+0x7e>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001b1e:	2300      	movs	r3, #0
 8001b20:	813b      	strh	r3, [r7, #8]
 8001b22:	e014      	b.n	8001b4e <update_all_displays+0xba>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8001b24:	893b      	ldrh	r3, [r7, #8]
 8001b26:	4a16      	ldr	r2, [pc, #88]	; (8001b80 <update_all_displays+0xec>)
 8001b28:	1899      	adds	r1, r3, r2
 8001b2a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001b2e:	2201      	movs	r2, #1
 8001b30:	4812      	ldr	r0, [pc, #72]	; (8001b7c <update_all_displays+0xe8>)
 8001b32:	f002 fd16 	bl	8004562 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8001b36:	2300      	movs	r3, #0
 8001b38:	71fb      	strb	r3, [r7, #7]
 8001b3a:	e002      	b.n	8001b42 <update_all_displays+0xae>
 8001b3c:	79fb      	ldrb	r3, [r7, #7]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	71fb      	strb	r3, [r7, #7]
 8001b42:	79fb      	ldrb	r3, [r7, #7]
 8001b44:	2b09      	cmp	r3, #9
 8001b46:	d9f9      	bls.n	8001b3c <update_all_displays+0xa8>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001b48:	893b      	ldrh	r3, [r7, #8]
 8001b4a:	3301      	adds	r3, #1
 8001b4c:	813b      	strh	r3, [r7, #8]
 8001b4e:	893b      	ldrh	r3, [r7, #8]
 8001b50:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001b54:	d3e6      	bcc.n	8001b24 <update_all_displays+0x90>
	}
	raise_all_CS();
 8001b56:	f7ff fe4f 	bl	80017f8 <raise_all_CS>
	START_BUTTON_POLL();
 8001b5a:	4b05      	ldr	r3, [pc, #20]	; (8001b70 <update_all_displays+0xdc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4a04      	ldr	r2, [pc, #16]	; (8001b70 <update_all_displays+0xdc>)
 8001b60:	f043 0301 	orr.w	r3, r3, #1
 8001b64:	6013      	str	r3, [r2, #0]
}
 8001b66:	bf00      	nop
 8001b68:	3710      	adds	r7, #16
 8001b6a:	46bd      	mov	sp, r7
 8001b6c:	bd80      	pop	{r7, pc}
 8001b6e:	bf00      	nop
 8001b70:	40000c00 	.word	0x40000c00
 8001b74:	40020000 	.word	0x40020000
 8001b78:	20001438 	.word	0x20001438
 8001b7c:	20001504 	.word	0x20001504
 8001b80:	20006e0c 	.word	0x20006e0c

08001b84 <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 8001b84:	b480      	push	{r7}
 8001b86:	b083      	sub	sp, #12
 8001b88:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	80fb      	strh	r3, [r7, #6]
 8001b8e:	e006      	b.n	8001b9e <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 8001b90:	88fb      	ldrh	r3, [r7, #6]
 8001b92:	4a08      	ldr	r2, [pc, #32]	; (8001bb4 <erase_buffer+0x30>)
 8001b94:	2100      	movs	r1, #0
 8001b96:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001b98:	88fb      	ldrh	r3, [r7, #6]
 8001b9a:	3301      	adds	r3, #1
 8001b9c:	80fb      	strh	r3, [r7, #6]
 8001b9e:	88fb      	ldrh	r3, [r7, #6]
 8001ba0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001ba4:	d3f4      	bcc.n	8001b90 <erase_buffer+0xc>
	}
}
 8001ba6:	bf00      	nop
 8001ba8:	bf00      	nop
 8001baa:	370c      	adds	r7, #12
 8001bac:	46bd      	mov	sp, r7
 8001bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb2:	4770      	bx	lr
 8001bb4:	20006e0c 	.word	0x20006e0c

08001bb8 <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 8001bb8:	b480      	push	{r7}
 8001bba:	b083      	sub	sp, #12
 8001bbc:	af00      	add	r7, sp, #0
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	71fb      	strb	r3, [r7, #7]
 8001bc2:	460b      	mov	r3, r1
 8001bc4:	71bb      	strb	r3, [r7, #6]
 8001bc6:	4613      	mov	r3, r2
 8001bc8:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8001bca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bce:	2b00      	cmp	r3, #0
 8001bd0:	db3d      	blt.n	8001c4e <draw_pixel+0x96>
 8001bd2:	79bb      	ldrb	r3, [r7, #6]
 8001bd4:	2b1f      	cmp	r3, #31
 8001bd6:	d83a      	bhi.n	8001c4e <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d01a      	beq.n	8001c14 <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 8001bde:	79fa      	ldrb	r2, [r7, #7]
 8001be0:	79bb      	ldrb	r3, [r7, #6]
 8001be2:	08db      	lsrs	r3, r3, #3
 8001be4:	b2d8      	uxtb	r0, r3
 8001be6:	4603      	mov	r3, r0
 8001be8:	01db      	lsls	r3, r3, #7
 8001bea:	4413      	add	r3, r2
 8001bec:	4a1b      	ldr	r2, [pc, #108]	; (8001c5c <draw_pixel+0xa4>)
 8001bee:	5cd3      	ldrb	r3, [r2, r3]
 8001bf0:	b25a      	sxtb	r2, r3
 8001bf2:	79bb      	ldrb	r3, [r7, #6]
 8001bf4:	f003 0307 	and.w	r3, r3, #7
 8001bf8:	2101      	movs	r1, #1
 8001bfa:	fa01 f303 	lsl.w	r3, r1, r3
 8001bfe:	b25b      	sxtb	r3, r3
 8001c00:	4313      	orrs	r3, r2
 8001c02:	b259      	sxtb	r1, r3
 8001c04:	79fa      	ldrb	r2, [r7, #7]
 8001c06:	4603      	mov	r3, r0
 8001c08:	01db      	lsls	r3, r3, #7
 8001c0a:	4413      	add	r3, r2
 8001c0c:	b2c9      	uxtb	r1, r1
 8001c0e:	4a13      	ldr	r2, [pc, #76]	; (8001c5c <draw_pixel+0xa4>)
 8001c10:	54d1      	strb	r1, [r2, r3]
 8001c12:	e01d      	b.n	8001c50 <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	79bb      	ldrb	r3, [r7, #6]
 8001c18:	08db      	lsrs	r3, r3, #3
 8001c1a:	b2d8      	uxtb	r0, r3
 8001c1c:	4603      	mov	r3, r0
 8001c1e:	01db      	lsls	r3, r3, #7
 8001c20:	4413      	add	r3, r2
 8001c22:	4a0e      	ldr	r2, [pc, #56]	; (8001c5c <draw_pixel+0xa4>)
 8001c24:	5cd3      	ldrb	r3, [r2, r3]
 8001c26:	b25a      	sxtb	r2, r3
 8001c28:	79bb      	ldrb	r3, [r7, #6]
 8001c2a:	f003 0307 	and.w	r3, r3, #7
 8001c2e:	2101      	movs	r1, #1
 8001c30:	fa01 f303 	lsl.w	r3, r1, r3
 8001c34:	b25b      	sxtb	r3, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	b25b      	sxtb	r3, r3
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	b259      	sxtb	r1, r3
 8001c3e:	79fa      	ldrb	r2, [r7, #7]
 8001c40:	4603      	mov	r3, r0
 8001c42:	01db      	lsls	r3, r3, #7
 8001c44:	4413      	add	r3, r2
 8001c46:	b2c9      	uxtb	r1, r1
 8001c48:	4a04      	ldr	r2, [pc, #16]	; (8001c5c <draw_pixel+0xa4>)
 8001c4a:	54d1      	strb	r1, [r2, r3]
 8001c4c:	e000      	b.n	8001c50 <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8001c4e:	bf00      	nop
	}
}
 8001c50:	370c      	adds	r7, #12
 8001c52:	46bd      	mov	sp, r7
 8001c54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c58:	4770      	bx	lr
 8001c5a:	bf00      	nop
 8001c5c:	20006e0c 	.word	0x20006e0c

08001c60 <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 8001c60:	b590      	push	{r4, r7, lr}
 8001c62:	b085      	sub	sp, #20
 8001c64:	af02      	add	r7, sp, #8
 8001c66:	4604      	mov	r4, r0
 8001c68:	4608      	mov	r0, r1
 8001c6a:	4611      	mov	r1, r2
 8001c6c:	461a      	mov	r2, r3
 8001c6e:	4623      	mov	r3, r4
 8001c70:	71fb      	strb	r3, [r7, #7]
 8001c72:	4603      	mov	r3, r0
 8001c74:	71bb      	strb	r3, [r7, #6]
 8001c76:	460b      	mov	r3, r1
 8001c78:	717b      	strb	r3, [r7, #5]
 8001c7a:	4613      	mov	r3, r2
 8001c7c:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 8001c7e:	79fb      	ldrb	r3, [r7, #7]
 8001c80:	2b1f      	cmp	r3, #31
 8001c82:	d913      	bls.n	8001cac <draw_char+0x4c>
 8001c84:	79fb      	ldrb	r3, [r7, #7]
 8001c86:	2b7e      	cmp	r3, #126	; 0x7e
 8001c88:	d810      	bhi.n	8001cac <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 8001c8a:	79fb      	ldrb	r3, [r7, #7]
 8001c8c:	3b20      	subs	r3, #32
 8001c8e:	2236      	movs	r2, #54	; 0x36
 8001c90:	fb02 f303 	mul.w	r3, r2, r3
 8001c94:	4a07      	ldr	r2, [pc, #28]	; (8001cb4 <draw_char+0x54>)
 8001c96:	1898      	adds	r0, r3, r2
 8001c98:	797a      	ldrb	r2, [r7, #5]
 8001c9a:	79b9      	ldrb	r1, [r7, #6]
 8001c9c:	793b      	ldrb	r3, [r7, #4]
 8001c9e:	9301      	str	r3, [sp, #4]
 8001ca0:	231b      	movs	r3, #27
 8001ca2:	9300      	str	r3, [sp, #0]
 8001ca4:	230c      	movs	r3, #12
 8001ca6:	f000 f807 	bl	8001cb8 <draw_bmp>
 8001caa:	e000      	b.n	8001cae <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 8001cac:	bf00      	nop
}
 8001cae:	370c      	adds	r7, #12
 8001cb0:	46bd      	mov	sp, r7
 8001cb2:	bd90      	pop	{r4, r7, pc}
 8001cb4:	2000000c 	.word	0x2000000c

08001cb8 <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 8001cb8:	b580      	push	{r7, lr}
 8001cba:	b084      	sub	sp, #16
 8001cbc:	af00      	add	r7, sp, #0
 8001cbe:	6078      	str	r0, [r7, #4]
 8001cc0:	4608      	mov	r0, r1
 8001cc2:	4611      	mov	r1, r2
 8001cc4:	461a      	mov	r2, r3
 8001cc6:	4603      	mov	r3, r0
 8001cc8:	70fb      	strb	r3, [r7, #3]
 8001cca:	460b      	mov	r3, r1
 8001ccc:	70bb      	strb	r3, [r7, #2]
 8001cce:	4613      	mov	r3, r2
 8001cd0:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 8001cd2:	787b      	ldrb	r3, [r7, #1]
 8001cd4:	3307      	adds	r3, #7
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	da00      	bge.n	8001cdc <draw_bmp+0x24>
 8001cda:	3307      	adds	r3, #7
 8001cdc:	10db      	asrs	r3, r3, #3
 8001cde:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 8001ce0:	2300      	movs	r3, #0
 8001ce2:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 8001ce4:	2300      	movs	r3, #0
 8001ce6:	81bb      	strh	r3, [r7, #12]
 8001ce8:	e047      	b.n	8001d7a <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 8001cea:	2300      	movs	r3, #0
 8001cec:	817b      	strh	r3, [r7, #10]
 8001cee:	e036      	b.n	8001d5e <draw_bmp+0xa6>
			if (i & 7)
 8001cf0:	897b      	ldrh	r3, [r7, #10]
 8001cf2:	f003 0307 	and.w	r3, r3, #7
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d003      	beq.n	8001d02 <draw_bmp+0x4a>
				b <<= 1;
 8001cfa:	7bfb      	ldrb	r3, [r7, #15]
 8001cfc:	005b      	lsls	r3, r3, #1
 8001cfe:	73fb      	strb	r3, [r7, #15]
 8001d00:	e012      	b.n	8001d28 <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 8001d02:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001d0a:	fb03 f202 	mul.w	r2, r3, r2
 8001d0e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	da00      	bge.n	8001d18 <draw_bmp+0x60>
 8001d16:	3307      	adds	r3, #7
 8001d18:	10db      	asrs	r3, r3, #3
 8001d1a:	b21b      	sxth	r3, r3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	461a      	mov	r2, r3
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	4413      	add	r3, r2
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 8001d28:	897b      	ldrh	r3, [r7, #10]
 8001d2a:	b2da      	uxtb	r2, r3
 8001d2c:	78fb      	ldrb	r3, [r7, #3]
 8001d2e:	4413      	add	r3, r2
 8001d30:	b2d8      	uxtb	r0, r3
 8001d32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	db06      	blt.n	8001d48 <draw_bmp+0x90>
 8001d3a:	7f3b      	ldrb	r3, [r7, #28]
 8001d3c:	2b00      	cmp	r3, #0
 8001d3e:	bf0c      	ite	eq
 8001d40:	2301      	moveq	r3, #1
 8001d42:	2300      	movne	r3, #0
 8001d44:	b2db      	uxtb	r3, r3
 8001d46:	e000      	b.n	8001d4a <draw_bmp+0x92>
 8001d48:	7f3b      	ldrb	r3, [r7, #28]
 8001d4a:	78b9      	ldrb	r1, [r7, #2]
 8001d4c:	461a      	mov	r2, r3
 8001d4e:	f7ff ff33 	bl	8001bb8 <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 8001d52:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001d56:	b29b      	uxth	r3, r3
 8001d58:	3301      	adds	r3, #1
 8001d5a:	b29b      	uxth	r3, r3
 8001d5c:	817b      	strh	r3, [r7, #10]
 8001d5e:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d62:	787b      	ldrb	r3, [r7, #1]
 8001d64:	429a      	cmp	r2, r3
 8001d66:	dbc3      	blt.n	8001cf0 <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 8001d68:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001d6c:	b29b      	uxth	r3, r3
 8001d6e:	3301      	adds	r3, #1
 8001d70:	b29b      	uxth	r3, r3
 8001d72:	81bb      	strh	r3, [r7, #12]
 8001d74:	78bb      	ldrb	r3, [r7, #2]
 8001d76:	3301      	adds	r3, #1
 8001d78:	70bb      	strb	r3, [r7, #2]
 8001d7a:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8001d7e:	7e3b      	ldrb	r3, [r7, #24]
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dbb2      	blt.n	8001cea <draw_bmp+0x32>
		}
	}
}
 8001d84:	bf00      	nop
 8001d86:	bf00      	nop
 8001d88:	3710      	adds	r7, #16
 8001d8a:	46bd      	mov	sp, r7
 8001d8c:	bd80      	pop	{r7, pc}

08001d8e <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 8001d8e:	b580      	push	{r7, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
 8001d94:	6078      	str	r0, [r7, #4]
 8001d96:	460b      	mov	r3, r1
 8001d98:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 8001d9a:	6878      	ldr	r0, [r7, #4]
 8001d9c:	f7fe fa1a 	bl	80001d4 <strlen>
 8001da0:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d02c      	beq.n	8001e02 <draw_string+0x74>
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	2b0a      	cmp	r3, #10
 8001dac:	d829      	bhi.n	8001e02 <draw_string+0x74>

    uint8_t x = DISPLAY_WIDTH/2;
 8001dae:	2340      	movs	r3, #64	; 0x40
 8001db0:	72fb      	strb	r3, [r7, #11]
    if (len%2) {
 8001db2:	68fb      	ldr	r3, [r7, #12]
 8001db4:	f003 0301 	and.w	r3, r3, #1
 8001db8:	2b00      	cmp	r3, #0
 8001dba:	d005      	beq.n	8001dc8 <draw_string+0x3a>
        x -= FONT_WIDTH/2;
 8001dbc:	7afb      	ldrb	r3, [r7, #11]
 8001dbe:	3b06      	subs	r3, #6
 8001dc0:	72fb      	strb	r3, [r7, #11]
        len -= 1;
 8001dc2:	68fb      	ldr	r3, [r7, #12]
 8001dc4:	3b01      	subs	r3, #1
 8001dc6:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 8001dc8:	68fa      	ldr	r2, [r7, #12]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	005b      	lsls	r3, r3, #1
 8001dce:	4413      	add	r3, r2
 8001dd0:	009b      	lsls	r3, r3, #2
 8001dd2:	085b      	lsrs	r3, r3, #1
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	7afa      	ldrb	r2, [r7, #11]
 8001dd8:	1ad3      	subs	r3, r2, r3
 8001dda:	72fb      	strb	r3, [r7, #11]

    while(*str) {
 8001ddc:	e00c      	b.n	8001df8 <draw_string+0x6a>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	7818      	ldrb	r0, [r3, #0]
 8001de2:	78fb      	ldrb	r3, [r7, #3]
 8001de4:	7af9      	ldrb	r1, [r7, #11]
 8001de6:	2203      	movs	r2, #3
 8001de8:	f7ff ff3a 	bl	8001c60 <draw_char>
        x += FONT_WIDTH;
 8001dec:	7afb      	ldrb	r3, [r7, #11]
 8001dee:	330c      	adds	r3, #12
 8001df0:	72fb      	strb	r3, [r7, #11]
        ++str;
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	3301      	adds	r3, #1
 8001df6:	607b      	str	r3, [r7, #4]
    while(*str) {
 8001df8:	687b      	ldr	r3, [r7, #4]
 8001dfa:	781b      	ldrb	r3, [r3, #0]
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d1ee      	bne.n	8001dde <draw_string+0x50>
 8001e00:	e000      	b.n	8001e04 <draw_string+0x76>
    if (len <= 0 || len > 10) return;
 8001e02:	bf00      	nop
    }
}
 8001e04:	3710      	adds	r7, #16
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bd80      	pop	{r7, pc}
	...

08001e0c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e0c:	b580      	push	{r7, lr}
 8001e0e:	b082      	sub	sp, #8
 8001e10:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e12:	2300      	movs	r3, #0
 8001e14:	607b      	str	r3, [r7, #4]
 8001e16:	4b10      	ldr	r3, [pc, #64]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e1a:	4a0f      	ldr	r2, [pc, #60]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e20:	6453      	str	r3, [r2, #68]	; 0x44
 8001e22:	4b0d      	ldr	r3, [pc, #52]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e2a:	607b      	str	r3, [r7, #4]
 8001e2c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e2e:	2300      	movs	r3, #0
 8001e30:	603b      	str	r3, [r7, #0]
 8001e32:	4b09      	ldr	r3, [pc, #36]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e36:	4a08      	ldr	r2, [pc, #32]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e38:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e3c:	6413      	str	r3, [r2, #64]	; 0x40
 8001e3e:	4b06      	ldr	r3, [pc, #24]	; (8001e58 <HAL_MspInit+0x4c>)
 8001e40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e42:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e46:	603b      	str	r3, [r7, #0]
 8001e48:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001e4a:	2007      	movs	r0, #7
 8001e4c:	f001 f824 	bl	8002e98 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e50:	bf00      	nop
 8001e52:	3708      	adds	r7, #8
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40023800 	.word	0x40023800

08001e5c <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b08a      	sub	sp, #40	; 0x28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001e64:	f107 0314 	add.w	r3, r7, #20
 8001e68:	2200      	movs	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
 8001e6c:	605a      	str	r2, [r3, #4]
 8001e6e:	609a      	str	r2, [r3, #8]
 8001e70:	60da      	str	r2, [r3, #12]
 8001e72:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	4a17      	ldr	r2, [pc, #92]	; (8001ed8 <HAL_ADC_MspInit+0x7c>)
 8001e7a:	4293      	cmp	r3, r2
 8001e7c:	d127      	bne.n	8001ece <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8001e7e:	2300      	movs	r3, #0
 8001e80:	613b      	str	r3, [r7, #16]
 8001e82:	4b16      	ldr	r3, [pc, #88]	; (8001edc <HAL_ADC_MspInit+0x80>)
 8001e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e86:	4a15      	ldr	r2, [pc, #84]	; (8001edc <HAL_ADC_MspInit+0x80>)
 8001e88:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001e8c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e8e:	4b13      	ldr	r3, [pc, #76]	; (8001edc <HAL_ADC_MspInit+0x80>)
 8001e90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001e96:	613b      	str	r3, [r7, #16]
 8001e98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001e9a:	2300      	movs	r3, #0
 8001e9c:	60fb      	str	r3, [r7, #12]
 8001e9e:	4b0f      	ldr	r3, [pc, #60]	; (8001edc <HAL_ADC_MspInit+0x80>)
 8001ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ea2:	4a0e      	ldr	r2, [pc, #56]	; (8001edc <HAL_ADC_MspInit+0x80>)
 8001ea4:	f043 0301 	orr.w	r3, r3, #1
 8001ea8:	6313      	str	r3, [r2, #48]	; 0x30
 8001eaa:	4b0c      	ldr	r3, [pc, #48]	; (8001edc <HAL_ADC_MspInit+0x80>)
 8001eac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001eae:	f003 0301 	and.w	r3, r3, #1
 8001eb2:	60fb      	str	r3, [r7, #12]
 8001eb4:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001eb6:	2310      	movs	r3, #16
 8001eb8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8001eba:	2303      	movs	r3, #3
 8001ebc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ebe:	2300      	movs	r3, #0
 8001ec0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001ec2:	f107 0314 	add.w	r3, r7, #20
 8001ec6:	4619      	mov	r1, r3
 8001ec8:	4805      	ldr	r0, [pc, #20]	; (8001ee0 <HAL_ADC_MspInit+0x84>)
 8001eca:	f001 f827 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8001ece:	bf00      	nop
 8001ed0:	3728      	adds	r7, #40	; 0x28
 8001ed2:	46bd      	mov	sp, r7
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	40012000 	.word	0x40012000
 8001edc:	40023800 	.word	0x40023800
 8001ee0:	40020000 	.word	0x40020000

08001ee4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b08a      	sub	sp, #40	; 0x28
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001eec:	f107 0314 	add.w	r3, r7, #20
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	601a      	str	r2, [r3, #0]
 8001ef4:	605a      	str	r2, [r3, #4]
 8001ef6:	609a      	str	r2, [r3, #8]
 8001ef8:	60da      	str	r2, [r3, #12]
 8001efa:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001efc:	687b      	ldr	r3, [r7, #4]
 8001efe:	681b      	ldr	r3, [r3, #0]
 8001f00:	4a19      	ldr	r2, [pc, #100]	; (8001f68 <HAL_I2C_MspInit+0x84>)
 8001f02:	4293      	cmp	r3, r2
 8001f04:	d12c      	bne.n	8001f60 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f06:	2300      	movs	r3, #0
 8001f08:	613b      	str	r3, [r7, #16]
 8001f0a:	4b18      	ldr	r3, [pc, #96]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f0e:	4a17      	ldr	r2, [pc, #92]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f10:	f043 0302 	orr.w	r3, r3, #2
 8001f14:	6313      	str	r3, [r2, #48]	; 0x30
 8001f16:	4b15      	ldr	r3, [pc, #84]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f1a:	f003 0302 	and.w	r3, r3, #2
 8001f1e:	613b      	str	r3, [r7, #16]
 8001f20:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001f22:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001f26:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f28:	2312      	movs	r3, #18
 8001f2a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f30:	2303      	movs	r3, #3
 8001f32:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f34:	2304      	movs	r3, #4
 8001f36:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f38:	f107 0314 	add.w	r3, r7, #20
 8001f3c:	4619      	mov	r1, r3
 8001f3e:	480c      	ldr	r0, [pc, #48]	; (8001f70 <HAL_I2C_MspInit+0x8c>)
 8001f40:	f000 ffec 	bl	8002f1c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f44:	2300      	movs	r3, #0
 8001f46:	60fb      	str	r3, [r7, #12]
 8001f48:	4b08      	ldr	r3, [pc, #32]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f4c:	4a07      	ldr	r2, [pc, #28]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f4e:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f52:	6413      	str	r3, [r2, #64]	; 0x40
 8001f54:	4b05      	ldr	r3, [pc, #20]	; (8001f6c <HAL_I2C_MspInit+0x88>)
 8001f56:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f58:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f60:	bf00      	nop
 8001f62:	3728      	adds	r7, #40	; 0x28
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bd80      	pop	{r7, pc}
 8001f68:	40005400 	.word	0x40005400
 8001f6c:	40023800 	.word	0x40023800
 8001f70:	40020400 	.word	0x40020400

08001f74 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b08a      	sub	sp, #40	; 0x28
 8001f78:	af00      	add	r7, sp, #0
 8001f7a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f7c:	f107 0314 	add.w	r3, r7, #20
 8001f80:	2200      	movs	r2, #0
 8001f82:	601a      	str	r2, [r3, #0]
 8001f84:	605a      	str	r2, [r3, #4]
 8001f86:	609a      	str	r2, [r3, #8]
 8001f88:	60da      	str	r2, [r3, #12]
 8001f8a:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001f8c:	687b      	ldr	r3, [r7, #4]
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	4a28      	ldr	r2, [pc, #160]	; (8002034 <HAL_SPI_MspInit+0xc0>)
 8001f92:	4293      	cmp	r3, r2
 8001f94:	d14a      	bne.n	800202c <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001f96:	2300      	movs	r3, #0
 8001f98:	613b      	str	r3, [r7, #16]
 8001f9a:	4b27      	ldr	r3, [pc, #156]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001f9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001f9e:	4a26      	ldr	r2, [pc, #152]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001fa4:	6413      	str	r3, [r2, #64]	; 0x40
 8001fa6:	4b24      	ldr	r3, [pc, #144]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001faa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001fae:	613b      	str	r3, [r7, #16]
 8001fb0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001fb2:	2300      	movs	r3, #0
 8001fb4:	60fb      	str	r3, [r7, #12]
 8001fb6:	4b20      	ldr	r3, [pc, #128]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001fb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fba:	4a1f      	ldr	r2, [pc, #124]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001fbc:	f043 0304 	orr.w	r3, r3, #4
 8001fc0:	6313      	str	r3, [r2, #48]	; 0x30
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001fc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	60fb      	str	r3, [r7, #12]
 8001fcc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001fce:	2300      	movs	r3, #0
 8001fd0:	60bb      	str	r3, [r7, #8]
 8001fd2:	4b19      	ldr	r3, [pc, #100]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001fd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fd6:	4a18      	ldr	r2, [pc, #96]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001fd8:	f043 0302 	orr.w	r3, r3, #2
 8001fdc:	6313      	str	r3, [r2, #48]	; 0x30
 8001fde:	4b16      	ldr	r3, [pc, #88]	; (8002038 <HAL_SPI_MspInit+0xc4>)
 8001fe0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fea:	2308      	movs	r3, #8
 8001fec:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fee:	2302      	movs	r3, #2
 8001ff0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ff2:	2300      	movs	r3, #0
 8001ff4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ff6:	2303      	movs	r3, #3
 8001ff8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ffa:	2305      	movs	r3, #5
 8001ffc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ffe:	f107 0314 	add.w	r3, r7, #20
 8002002:	4619      	mov	r1, r3
 8002004:	480d      	ldr	r0, [pc, #52]	; (800203c <HAL_SPI_MspInit+0xc8>)
 8002006:	f000 ff89 	bl	8002f1c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800200a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800200e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002010:	2302      	movs	r3, #2
 8002012:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002014:	2300      	movs	r3, #0
 8002016:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002018:	2303      	movs	r3, #3
 800201a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800201c:	2305      	movs	r3, #5
 800201e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002020:	f107 0314 	add.w	r3, r7, #20
 8002024:	4619      	mov	r1, r3
 8002026:	4806      	ldr	r0, [pc, #24]	; (8002040 <HAL_SPI_MspInit+0xcc>)
 8002028:	f000 ff78 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800202c:	bf00      	nop
 800202e:	3728      	adds	r7, #40	; 0x28
 8002030:	46bd      	mov	sp, r7
 8002032:	bd80      	pop	{r7, pc}
 8002034:	40003800 	.word	0x40003800
 8002038:	40023800 	.word	0x40023800
 800203c:	40020800 	.word	0x40020800
 8002040:	40020400 	.word	0x40020400

08002044 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b08c      	sub	sp, #48	; 0x30
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800204c:	f107 031c 	add.w	r3, r7, #28
 8002050:	2200      	movs	r2, #0
 8002052:	601a      	str	r2, [r3, #0]
 8002054:	605a      	str	r2, [r3, #4]
 8002056:	609a      	str	r2, [r3, #8]
 8002058:	60da      	str	r2, [r3, #12]
 800205a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 800205c:	687b      	ldr	r3, [r7, #4]
 800205e:	681b      	ldr	r3, [r3, #0]
 8002060:	4a3f      	ldr	r2, [pc, #252]	; (8002160 <HAL_TIM_Base_MspInit+0x11c>)
 8002062:	4293      	cmp	r3, r2
 8002064:	d10e      	bne.n	8002084 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002066:	2300      	movs	r3, #0
 8002068:	61bb      	str	r3, [r7, #24]
 800206a:	4b3e      	ldr	r3, [pc, #248]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 800206c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800206e:	4a3d      	ldr	r2, [pc, #244]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 8002070:	f043 0301 	orr.w	r3, r3, #1
 8002074:	6453      	str	r3, [r2, #68]	; 0x44
 8002076:	4b3b      	ldr	r3, [pc, #236]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 8002078:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800207a:	f003 0301 	and.w	r3, r3, #1
 800207e:	61bb      	str	r3, [r7, #24]
 8002080:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002082:	e069      	b.n	8002158 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800208c:	d135      	bne.n	80020fa <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 800208e:	2300      	movs	r3, #0
 8002090:	617b      	str	r3, [r7, #20]
 8002092:	4b34      	ldr	r3, [pc, #208]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 8002094:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002096:	4a33      	ldr	r2, [pc, #204]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 8002098:	f043 0301 	orr.w	r3, r3, #1
 800209c:	6413      	str	r3, [r2, #64]	; 0x40
 800209e:	4b31      	ldr	r3, [pc, #196]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 80020a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a2:	f003 0301 	and.w	r3, r3, #1
 80020a6:	617b      	str	r3, [r7, #20]
 80020a8:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020aa:	2300      	movs	r3, #0
 80020ac:	613b      	str	r3, [r7, #16]
 80020ae:	4b2d      	ldr	r3, [pc, #180]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 80020b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020b2:	4a2c      	ldr	r2, [pc, #176]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 80020b4:	f043 0301 	orr.w	r3, r3, #1
 80020b8:	6313      	str	r3, [r2, #48]	; 0x30
 80020ba:	4b2a      	ldr	r3, [pc, #168]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 80020bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020be:	f003 0301 	and.w	r3, r3, #1
 80020c2:	613b      	str	r3, [r7, #16]
 80020c4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80020c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80020ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020cc:	2302      	movs	r3, #2
 80020ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020d0:	2300      	movs	r3, #0
 80020d2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80020d4:	2300      	movs	r3, #0
 80020d6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80020d8:	2301      	movs	r3, #1
 80020da:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80020dc:	f107 031c 	add.w	r3, r7, #28
 80020e0:	4619      	mov	r1, r3
 80020e2:	4821      	ldr	r0, [pc, #132]	; (8002168 <HAL_TIM_Base_MspInit+0x124>)
 80020e4:	f000 ff1a 	bl	8002f1c <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80020e8:	2200      	movs	r2, #0
 80020ea:	2100      	movs	r1, #0
 80020ec:	201c      	movs	r0, #28
 80020ee:	f000 fede 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80020f2:	201c      	movs	r0, #28
 80020f4:	f000 fef7 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 80020f8:	e02e      	b.n	8002158 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	681b      	ldr	r3, [r3, #0]
 80020fe:	4a1b      	ldr	r2, [pc, #108]	; (800216c <HAL_TIM_Base_MspInit+0x128>)
 8002100:	4293      	cmp	r3, r2
 8002102:	d10e      	bne.n	8002122 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002104:	2300      	movs	r3, #0
 8002106:	60fb      	str	r3, [r7, #12]
 8002108:	4b16      	ldr	r3, [pc, #88]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 800210a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800210c:	4a15      	ldr	r2, [pc, #84]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 800210e:	f043 0302 	orr.w	r3, r3, #2
 8002112:	6413      	str	r3, [r2, #64]	; 0x40
 8002114:	4b13      	ldr	r3, [pc, #76]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 8002116:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002118:	f003 0302 	and.w	r3, r3, #2
 800211c:	60fb      	str	r3, [r7, #12]
 800211e:	68fb      	ldr	r3, [r7, #12]
}
 8002120:	e01a      	b.n	8002158 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	4a12      	ldr	r2, [pc, #72]	; (8002170 <HAL_TIM_Base_MspInit+0x12c>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d115      	bne.n	8002158 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM5_CLK_ENABLE();
 800212c:	2300      	movs	r3, #0
 800212e:	60bb      	str	r3, [r7, #8]
 8002130:	4b0c      	ldr	r3, [pc, #48]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 8002132:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002134:	4a0b      	ldr	r2, [pc, #44]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 8002136:	f043 0308 	orr.w	r3, r3, #8
 800213a:	6413      	str	r3, [r2, #64]	; 0x40
 800213c:	4b09      	ldr	r3, [pc, #36]	; (8002164 <HAL_TIM_Base_MspInit+0x120>)
 800213e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002140:	f003 0308 	and.w	r3, r3, #8
 8002144:	60bb      	str	r3, [r7, #8]
 8002146:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002148:	2200      	movs	r2, #0
 800214a:	2100      	movs	r1, #0
 800214c:	2032      	movs	r0, #50	; 0x32
 800214e:	f000 feae 	bl	8002eae <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002152:	2032      	movs	r0, #50	; 0x32
 8002154:	f000 fec7 	bl	8002ee6 <HAL_NVIC_EnableIRQ>
}
 8002158:	bf00      	nop
 800215a:	3730      	adds	r7, #48	; 0x30
 800215c:	46bd      	mov	sp, r7
 800215e:	bd80      	pop	{r7, pc}
 8002160:	40010000 	.word	0x40010000
 8002164:	40023800 	.word	0x40023800
 8002168:	40020000 	.word	0x40020000
 800216c:	40000400 	.word	0x40000400
 8002170:	40000c00 	.word	0x40000c00

08002174 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	4a0b      	ldr	r2, [pc, #44]	; (80021b0 <HAL_TIM_PWM_MspInit+0x3c>)
 8002182:	4293      	cmp	r3, r2
 8002184:	d10d      	bne.n	80021a2 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002186:	2300      	movs	r3, #0
 8002188:	60fb      	str	r3, [r7, #12]
 800218a:	4b0a      	ldr	r3, [pc, #40]	; (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 800218c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800218e:	4a09      	ldr	r2, [pc, #36]	; (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 8002190:	f043 0304 	orr.w	r3, r3, #4
 8002194:	6413      	str	r3, [r2, #64]	; 0x40
 8002196:	4b07      	ldr	r3, [pc, #28]	; (80021b4 <HAL_TIM_PWM_MspInit+0x40>)
 8002198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800219a:	f003 0304 	and.w	r3, r3, #4
 800219e:	60fb      	str	r3, [r7, #12]
 80021a0:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 80021a2:	bf00      	nop
 80021a4:	3714      	adds	r7, #20
 80021a6:	46bd      	mov	sp, r7
 80021a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ac:	4770      	bx	lr
 80021ae:	bf00      	nop
 80021b0:	40000800 	.word	0x40000800
 80021b4:	40023800 	.word	0x40023800

080021b8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	b08a      	sub	sp, #40	; 0x28
 80021bc:	af00      	add	r7, sp, #0
 80021be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80021c0:	f107 0314 	add.w	r3, r7, #20
 80021c4:	2200      	movs	r2, #0
 80021c6:	601a      	str	r2, [r3, #0]
 80021c8:	605a      	str	r2, [r3, #4]
 80021ca:	609a      	str	r2, [r3, #8]
 80021cc:	60da      	str	r2, [r3, #12]
 80021ce:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4a24      	ldr	r2, [pc, #144]	; (8002268 <HAL_TIM_MspPostInit+0xb0>)
 80021d6:	4293      	cmp	r3, r2
 80021d8:	d11e      	bne.n	8002218 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80021da:	2300      	movs	r3, #0
 80021dc:	613b      	str	r3, [r7, #16]
 80021de:	4b23      	ldr	r3, [pc, #140]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 80021e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021e2:	4a22      	ldr	r2, [pc, #136]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 80021e4:	f043 0304 	orr.w	r3, r3, #4
 80021e8:	6313      	str	r3, [r2, #48]	; 0x30
 80021ea:	4b20      	ldr	r3, [pc, #128]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 80021ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021ee:	f003 0304 	and.w	r3, r3, #4
 80021f2:	613b      	str	r3, [r7, #16]
 80021f4:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80021f6:	2380      	movs	r3, #128	; 0x80
 80021f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021fa:	2302      	movs	r3, #2
 80021fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021fe:	2300      	movs	r3, #0
 8002200:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002202:	2300      	movs	r3, #0
 8002204:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002206:	2302      	movs	r3, #2
 8002208:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800220a:	f107 0314 	add.w	r3, r7, #20
 800220e:	4619      	mov	r1, r3
 8002210:	4817      	ldr	r0, [pc, #92]	; (8002270 <HAL_TIM_MspPostInit+0xb8>)
 8002212:	f000 fe83 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002216:	e022      	b.n	800225e <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	681b      	ldr	r3, [r3, #0]
 800221c:	4a15      	ldr	r2, [pc, #84]	; (8002274 <HAL_TIM_MspPostInit+0xbc>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d11d      	bne.n	800225e <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002222:	2300      	movs	r3, #0
 8002224:	60fb      	str	r3, [r7, #12]
 8002226:	4b11      	ldr	r3, [pc, #68]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 8002228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800222a:	4a10      	ldr	r2, [pc, #64]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 800222c:	f043 0302 	orr.w	r3, r3, #2
 8002230:	6313      	str	r3, [r2, #48]	; 0x30
 8002232:	4b0e      	ldr	r3, [pc, #56]	; (800226c <HAL_TIM_MspPostInit+0xb4>)
 8002234:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002236:	f003 0302 	and.w	r3, r3, #2
 800223a:	60fb      	str	r3, [r7, #12]
 800223c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 800223e:	2380      	movs	r3, #128	; 0x80
 8002240:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002242:	2302      	movs	r3, #2
 8002244:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002246:	2300      	movs	r3, #0
 8002248:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800224a:	2300      	movs	r3, #0
 800224c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 800224e:	2302      	movs	r3, #2
 8002250:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002252:	f107 0314 	add.w	r3, r7, #20
 8002256:	4619      	mov	r1, r3
 8002258:	4807      	ldr	r0, [pc, #28]	; (8002278 <HAL_TIM_MspPostInit+0xc0>)
 800225a:	f000 fe5f 	bl	8002f1c <HAL_GPIO_Init>
}
 800225e:	bf00      	nop
 8002260:	3728      	adds	r7, #40	; 0x28
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40000400 	.word	0x40000400
 800226c:	40023800 	.word	0x40023800
 8002270:	40020800 	.word	0x40020800
 8002274:	40000800 	.word	0x40000800
 8002278:	40020400 	.word	0x40020400

0800227c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800227c:	b580      	push	{r7, lr}
 800227e:	b08a      	sub	sp, #40	; 0x28
 8002280:	af00      	add	r7, sp, #0
 8002282:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002284:	f107 0314 	add.w	r3, r7, #20
 8002288:	2200      	movs	r2, #0
 800228a:	601a      	str	r2, [r3, #0]
 800228c:	605a      	str	r2, [r3, #4]
 800228e:	609a      	str	r2, [r3, #8]
 8002290:	60da      	str	r2, [r3, #12]
 8002292:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	681b      	ldr	r3, [r3, #0]
 8002298:	4a19      	ldr	r2, [pc, #100]	; (8002300 <HAL_UART_MspInit+0x84>)
 800229a:	4293      	cmp	r3, r2
 800229c:	d12c      	bne.n	80022f8 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 800229e:	2300      	movs	r3, #0
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	4b18      	ldr	r3, [pc, #96]	; (8002304 <HAL_UART_MspInit+0x88>)
 80022a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022a6:	4a17      	ldr	r2, [pc, #92]	; (8002304 <HAL_UART_MspInit+0x88>)
 80022a8:	f043 0310 	orr.w	r3, r3, #16
 80022ac:	6453      	str	r3, [r2, #68]	; 0x44
 80022ae:	4b15      	ldr	r3, [pc, #84]	; (8002304 <HAL_UART_MspInit+0x88>)
 80022b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022b2:	f003 0310 	and.w	r3, r3, #16
 80022b6:	613b      	str	r3, [r7, #16]
 80022b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80022ba:	2300      	movs	r3, #0
 80022bc:	60fb      	str	r3, [r7, #12]
 80022be:	4b11      	ldr	r3, [pc, #68]	; (8002304 <HAL_UART_MspInit+0x88>)
 80022c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022c2:	4a10      	ldr	r2, [pc, #64]	; (8002304 <HAL_UART_MspInit+0x88>)
 80022c4:	f043 0301 	orr.w	r3, r3, #1
 80022c8:	6313      	str	r3, [r2, #48]	; 0x30
 80022ca:	4b0e      	ldr	r3, [pc, #56]	; (8002304 <HAL_UART_MspInit+0x88>)
 80022cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80022ce:	f003 0301 	and.w	r3, r3, #1
 80022d2:	60fb      	str	r3, [r7, #12]
 80022d4:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80022d6:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80022da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80022dc:	2302      	movs	r3, #2
 80022de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022e0:	2300      	movs	r3, #0
 80022e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022e4:	2303      	movs	r3, #3
 80022e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80022e8:	2307      	movs	r3, #7
 80022ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80022ec:	f107 0314 	add.w	r3, r7, #20
 80022f0:	4619      	mov	r1, r3
 80022f2:	4805      	ldr	r0, [pc, #20]	; (8002308 <HAL_UART_MspInit+0x8c>)
 80022f4:	f000 fe12 	bl	8002f1c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80022f8:	bf00      	nop
 80022fa:	3728      	adds	r7, #40	; 0x28
 80022fc:	46bd      	mov	sp, r7
 80022fe:	bd80      	pop	{r7, pc}
 8002300:	40011000 	.word	0x40011000
 8002304:	40023800 	.word	0x40023800
 8002308:	40020000 	.word	0x40020000

0800230c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002310:	e7fe      	b.n	8002310 <NMI_Handler+0x4>

08002312 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002312:	b480      	push	{r7}
 8002314:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002316:	e7fe      	b.n	8002316 <HardFault_Handler+0x4>

08002318 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002318:	b480      	push	{r7}
 800231a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800231c:	e7fe      	b.n	800231c <MemManage_Handler+0x4>

0800231e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800231e:	b480      	push	{r7}
 8002320:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002322:	e7fe      	b.n	8002322 <BusFault_Handler+0x4>

08002324 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002324:	b480      	push	{r7}
 8002326:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002328:	e7fe      	b.n	8002328 <UsageFault_Handler+0x4>

0800232a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800232a:	b480      	push	{r7}
 800232c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800232e:	bf00      	nop
 8002330:	46bd      	mov	sp, r7
 8002332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002336:	4770      	bx	lr

08002338 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002338:	b480      	push	{r7}
 800233a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800233c:	bf00      	nop
 800233e:	46bd      	mov	sp, r7
 8002340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002344:	4770      	bx	lr

08002346 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002346:	b480      	push	{r7}
 8002348:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800234a:	bf00      	nop
 800234c:	46bd      	mov	sp, r7
 800234e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002352:	4770      	bx	lr

08002354 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002358:	f000 f8dc 	bl	8002514 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800235c:	bf00      	nop
 800235e:	bd80      	pop	{r7, pc}

08002360 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002360:	b580      	push	{r7, lr}
 8002362:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8002364:	481a      	ldr	r0, [pc, #104]	; (80023d0 <TIM2_IRQHandler+0x70>)
 8002366:	f002 ff3b 	bl	80051e0 <HAL_TIM_IRQHandler>
	if(firsttime){
 800236a:	4b1a      	ldr	r3, [pc, #104]	; (80023d4 <TIM2_IRQHandler+0x74>)
 800236c:	781b      	ldrb	r3, [r3, #0]
 800236e:	2b00      	cmp	r3, #0
 8002370:	d00d      	beq.n	800238e <TIM2_IRQHandler+0x2e>
		firsttime =0;
 8002372:	4b18      	ldr	r3, [pc, #96]	; (80023d4 <TIM2_IRQHandler+0x74>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = 0;
 8002378:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800237c:	2200      	movs	r2, #0
 800237e:	625a      	str	r2, [r3, #36]	; 0x24
		index = 0;
 8002380:	4b15      	ldr	r3, [pc, #84]	; (80023d8 <TIM2_IRQHandler+0x78>)
 8002382:	2200      	movs	r2, #0
 8002384:	601a      	str	r2, [r3, #0]
		HAL_TIM_IRQHandler(&htim2);
 8002386:	4812      	ldr	r0, [pc, #72]	; (80023d0 <TIM2_IRQHandler+0x70>)
 8002388:	f002 ff2a 	bl	80051e0 <HAL_TIM_IRQHandler>
		return;
 800238c:	e01e      	b.n	80023cc <TIM2_IRQHandler+0x6c>
	}
	data[index] = TIM2->CNT;
 800238e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002392:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002394:	4b10      	ldr	r3, [pc, #64]	; (80023d8 <TIM2_IRQHandler+0x78>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	b291      	uxth	r1, r2
 800239a:	4a10      	ldr	r2, [pc, #64]	; (80023dc <TIM2_IRQHandler+0x7c>)
 800239c:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TIM2->CNT =0;
 80023a0:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80023a4:	2200      	movs	r2, #0
 80023a6:	625a      	str	r2, [r3, #36]	; 0x24
	index++;
 80023a8:	4b0b      	ldr	r3, [pc, #44]	; (80023d8 <TIM2_IRQHandler+0x78>)
 80023aa:	681b      	ldr	r3, [r3, #0]
 80023ac:	3301      	adds	r3, #1
 80023ae:	4a0a      	ldr	r2, [pc, #40]	; (80023d8 <TIM2_IRQHandler+0x78>)
 80023b0:	6013      	str	r3, [r2, #0]
	if(index == dataLen){
 80023b2:	4b09      	ldr	r3, [pc, #36]	; (80023d8 <TIM2_IRQHandler+0x78>)
 80023b4:	681a      	ldr	r2, [r3, #0]
 80023b6:	4b0a      	ldr	r3, [pc, #40]	; (80023e0 <TIM2_IRQHandler+0x80>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	429a      	cmp	r2, r3
 80023bc:	d103      	bne.n	80023c6 <TIM2_IRQHandler+0x66>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);		//Transmit();
 80023be:	2100      	movs	r1, #0
 80023c0:	4803      	ldr	r0, [pc, #12]	; (80023d0 <TIM2_IRQHandler+0x70>)
 80023c2:	f002 fe5f 	bl	8005084 <HAL_TIM_IC_Stop_IT>
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80023c6:	4802      	ldr	r0, [pc, #8]	; (80023d0 <TIM2_IRQHandler+0x70>)
 80023c8:	f002 ff0a 	bl	80051e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80023cc:	bd80      	pop	{r7, pc}
 80023ce:	bf00      	nop
 80023d0:	200015a4 	.word	0x200015a4
 80023d4:	2000143e 	.word	0x2000143e
 80023d8:	2000700c 	.word	0x2000700c
 80023dc:	20006d20 	.word	0x20006d20
 80023e0:	20000004 	.word	0x20000004

080023e4 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80023e4:	b580      	push	{r7, lr}
 80023e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80023e8:	4802      	ldr	r0, [pc, #8]	; (80023f4 <TIM5_IRQHandler+0x10>)
 80023ea:	f002 fef9 	bl	80051e0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	bd80      	pop	{r7, pc}
 80023f2:	bf00      	nop
 80023f4:	2000167c 	.word	0x2000167c

080023f8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023fc:	4b06      	ldr	r3, [pc, #24]	; (8002418 <SystemInit+0x20>)
 80023fe:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002402:	4a05      	ldr	r2, [pc, #20]	; (8002418 <SystemInit+0x20>)
 8002404:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002408:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800240c:	bf00      	nop
 800240e:	46bd      	mov	sp, r7
 8002410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002414:	4770      	bx	lr
 8002416:	bf00      	nop
 8002418:	e000ed00 	.word	0xe000ed00

0800241c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800241c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002454 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002420:	480d      	ldr	r0, [pc, #52]	; (8002458 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002422:	490e      	ldr	r1, [pc, #56]	; (800245c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002424:	4a0e      	ldr	r2, [pc, #56]	; (8002460 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002426:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002428:	e002      	b.n	8002430 <LoopCopyDataInit>

0800242a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800242a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800242c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800242e:	3304      	adds	r3, #4

08002430 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002430:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002432:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002434:	d3f9      	bcc.n	800242a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002436:	4a0b      	ldr	r2, [pc, #44]	; (8002464 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002438:	4c0b      	ldr	r4, [pc, #44]	; (8002468 <LoopFillZerobss+0x26>)
  movs r3, #0
 800243a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800243c:	e001      	b.n	8002442 <LoopFillZerobss>

0800243e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800243e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002440:	3204      	adds	r2, #4

08002442 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002442:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002444:	d3fb      	bcc.n	800243e <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002446:	f7ff ffd7 	bl	80023f8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800244a:	f004 f9bb 	bl	80067c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800244e:	f7fe fab3 	bl	80009b8 <main>
  bx  lr    
 8002452:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002454:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8002458:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800245c:	2000144c 	.word	0x2000144c
  ldr r2, =_sidata
 8002460:	080069dc 	.word	0x080069dc
  ldr r2, =_sbss
 8002464:	2000144c 	.word	0x2000144c
  ldr r4, =_ebss
 8002468:	20007014 	.word	0x20007014

0800246c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800246c:	e7fe      	b.n	800246c <ADC_IRQHandler>
	...

08002470 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002470:	b580      	push	{r7, lr}
 8002472:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002474:	4b0e      	ldr	r3, [pc, #56]	; (80024b0 <HAL_Init+0x40>)
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	4a0d      	ldr	r2, [pc, #52]	; (80024b0 <HAL_Init+0x40>)
 800247a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800247e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002480:	4b0b      	ldr	r3, [pc, #44]	; (80024b0 <HAL_Init+0x40>)
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	4a0a      	ldr	r2, [pc, #40]	; (80024b0 <HAL_Init+0x40>)
 8002486:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800248a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800248c:	4b08      	ldr	r3, [pc, #32]	; (80024b0 <HAL_Init+0x40>)
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a07      	ldr	r2, [pc, #28]	; (80024b0 <HAL_Init+0x40>)
 8002492:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002496:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002498:	2003      	movs	r0, #3
 800249a:	f000 fcfd 	bl	8002e98 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800249e:	2000      	movs	r0, #0
 80024a0:	f000 f808 	bl	80024b4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024a4:	f7ff fcb2 	bl	8001e0c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024a8:	2300      	movs	r3, #0
}
 80024aa:	4618      	mov	r0, r3
 80024ac:	bd80      	pop	{r7, pc}
 80024ae:	bf00      	nop
 80024b0:	40023c00 	.word	0x40023c00

080024b4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80024b4:	b580      	push	{r7, lr}
 80024b6:	b082      	sub	sp, #8
 80024b8:	af00      	add	r7, sp, #0
 80024ba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80024bc:	4b12      	ldr	r3, [pc, #72]	; (8002508 <HAL_InitTick+0x54>)
 80024be:	681a      	ldr	r2, [r3, #0]
 80024c0:	4b12      	ldr	r3, [pc, #72]	; (800250c <HAL_InitTick+0x58>)
 80024c2:	781b      	ldrb	r3, [r3, #0]
 80024c4:	4619      	mov	r1, r3
 80024c6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80024ca:	fbb3 f3f1 	udiv	r3, r3, r1
 80024ce:	fbb2 f3f3 	udiv	r3, r2, r3
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fd15 	bl	8002f02 <HAL_SYSTICK_Config>
 80024d8:	4603      	mov	r3, r0
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d001      	beq.n	80024e2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80024de:	2301      	movs	r3, #1
 80024e0:	e00e      	b.n	8002500 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	2b0f      	cmp	r3, #15
 80024e6:	d80a      	bhi.n	80024fe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80024e8:	2200      	movs	r2, #0
 80024ea:	6879      	ldr	r1, [r7, #4]
 80024ec:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80024f0:	f000 fcdd 	bl	8002eae <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80024f4:	4a06      	ldr	r2, [pc, #24]	; (8002510 <HAL_InitTick+0x5c>)
 80024f6:	687b      	ldr	r3, [r7, #4]
 80024f8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80024fa:	2300      	movs	r3, #0
 80024fc:	e000      	b.n	8002500 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80024fe:	2301      	movs	r3, #1
}
 8002500:	4618      	mov	r0, r3
 8002502:	3708      	adds	r7, #8
 8002504:	46bd      	mov	sp, r7
 8002506:	bd80      	pop	{r7, pc}
 8002508:	20001440 	.word	0x20001440
 800250c:	20001448 	.word	0x20001448
 8002510:	20001444 	.word	0x20001444

08002514 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002514:	b480      	push	{r7}
 8002516:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002518:	4b06      	ldr	r3, [pc, #24]	; (8002534 <HAL_IncTick+0x20>)
 800251a:	781b      	ldrb	r3, [r3, #0]
 800251c:	461a      	mov	r2, r3
 800251e:	4b06      	ldr	r3, [pc, #24]	; (8002538 <HAL_IncTick+0x24>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4413      	add	r3, r2
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <HAL_IncTick+0x24>)
 8002526:	6013      	str	r3, [r2, #0]
}
 8002528:	bf00      	nop
 800252a:	46bd      	mov	sp, r7
 800252c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002530:	4770      	bx	lr
 8002532:	bf00      	nop
 8002534:	20001448 	.word	0x20001448
 8002538:	20007010 	.word	0x20007010

0800253c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800253c:	b480      	push	{r7}
 800253e:	af00      	add	r7, sp, #0
  return uwTick;
 8002540:	4b03      	ldr	r3, [pc, #12]	; (8002550 <HAL_GetTick+0x14>)
 8002542:	681b      	ldr	r3, [r3, #0]
}
 8002544:	4618      	mov	r0, r3
 8002546:	46bd      	mov	sp, r7
 8002548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800254c:	4770      	bx	lr
 800254e:	bf00      	nop
 8002550:	20007010 	.word	0x20007010

08002554 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002554:	b580      	push	{r7, lr}
 8002556:	b084      	sub	sp, #16
 8002558:	af00      	add	r7, sp, #0
 800255a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800255c:	f7ff ffee 	bl	800253c <HAL_GetTick>
 8002560:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800256c:	d005      	beq.n	800257a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800256e:	4b0a      	ldr	r3, [pc, #40]	; (8002598 <HAL_Delay+0x44>)
 8002570:	781b      	ldrb	r3, [r3, #0]
 8002572:	461a      	mov	r2, r3
 8002574:	68fb      	ldr	r3, [r7, #12]
 8002576:	4413      	add	r3, r2
 8002578:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800257a:	bf00      	nop
 800257c:	f7ff ffde 	bl	800253c <HAL_GetTick>
 8002580:	4602      	mov	r2, r0
 8002582:	68bb      	ldr	r3, [r7, #8]
 8002584:	1ad3      	subs	r3, r2, r3
 8002586:	68fa      	ldr	r2, [r7, #12]
 8002588:	429a      	cmp	r2, r3
 800258a:	d8f7      	bhi.n	800257c <HAL_Delay+0x28>
  {
  }
}
 800258c:	bf00      	nop
 800258e:	bf00      	nop
 8002590:	3710      	adds	r7, #16
 8002592:	46bd      	mov	sp, r7
 8002594:	bd80      	pop	{r7, pc}
 8002596:	bf00      	nop
 8002598:	20001448 	.word	0x20001448

0800259c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800259c:	b580      	push	{r7, lr}
 800259e:	b084      	sub	sp, #16
 80025a0:	af00      	add	r7, sp, #0
 80025a2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 80025a4:	2300      	movs	r3, #0
 80025a6:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d101      	bne.n	80025b2 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 80025ae:	2301      	movs	r3, #1
 80025b0:	e033      	b.n	800261a <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d109      	bne.n	80025ce <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fc4e 	bl	8001e5c <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	2200      	movs	r2, #0
 80025c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025d2:	f003 0310 	and.w	r3, r3, #16
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d118      	bne.n	800260c <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025de:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80025e2:	f023 0302 	bic.w	r3, r3, #2
 80025e6:	f043 0202 	orr.w	r2, r3, #2
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80025ee:	6878      	ldr	r0, [r7, #4]
 80025f0:	f000 fa86 	bl	8002b00 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2200      	movs	r2, #0
 80025f8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80025fa:	687b      	ldr	r3, [r7, #4]
 80025fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fe:	f023 0303 	bic.w	r3, r3, #3
 8002602:	f043 0201 	orr.w	r2, r3, #1
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	641a      	str	r2, [r3, #64]	; 0x40
 800260a:	e001      	b.n	8002610 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 800260c:	2301      	movs	r3, #1
 800260e:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	2200      	movs	r2, #0
 8002614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002618:	7bfb      	ldrb	r3, [r7, #15]
}
 800261a:	4618      	mov	r0, r3
 800261c:	3710      	adds	r7, #16
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
	...

08002624 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002624:	b480      	push	{r7}
 8002626:	b085      	sub	sp, #20
 8002628:	af00      	add	r7, sp, #0
 800262a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 800262c:	2300      	movs	r3, #0
 800262e:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002636:	2b01      	cmp	r3, #1
 8002638:	d101      	bne.n	800263e <HAL_ADC_Start+0x1a>
 800263a:	2302      	movs	r3, #2
 800263c:	e097      	b.n	800276e <HAL_ADC_Start+0x14a>
 800263e:	687b      	ldr	r3, [r7, #4]
 8002640:	2201      	movs	r2, #1
 8002642:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	689b      	ldr	r3, [r3, #8]
 800264c:	f003 0301 	and.w	r3, r3, #1
 8002650:	2b01      	cmp	r3, #1
 8002652:	d018      	beq.n	8002686 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	689a      	ldr	r2, [r3, #8]
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f042 0201 	orr.w	r2, r2, #1
 8002662:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002664:	4b45      	ldr	r3, [pc, #276]	; (800277c <HAL_ADC_Start+0x158>)
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a45      	ldr	r2, [pc, #276]	; (8002780 <HAL_ADC_Start+0x15c>)
 800266a:	fba2 2303 	umull	r2, r3, r2, r3
 800266e:	0c9a      	lsrs	r2, r3, #18
 8002670:	4613      	mov	r3, r2
 8002672:	005b      	lsls	r3, r3, #1
 8002674:	4413      	add	r3, r2
 8002676:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002678:	e002      	b.n	8002680 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800267a:	68bb      	ldr	r3, [r7, #8]
 800267c:	3b01      	subs	r3, #1
 800267e:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002680:	68bb      	ldr	r3, [r7, #8]
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f9      	bne.n	800267a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	681b      	ldr	r3, [r3, #0]
 800268a:	689b      	ldr	r3, [r3, #8]
 800268c:	f003 0301 	and.w	r3, r3, #1
 8002690:	2b01      	cmp	r3, #1
 8002692:	d15f      	bne.n	8002754 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002698:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 800269c:	f023 0301 	bic.w	r3, r3, #1
 80026a0:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	685b      	ldr	r3, [r3, #4]
 80026ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d007      	beq.n	80026c6 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ba:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80026be:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80026c6:	687b      	ldr	r3, [r7, #4]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80026ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80026d2:	d106      	bne.n	80026e2 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026d8:	f023 0206 	bic.w	r2, r3, #6
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	645a      	str	r2, [r3, #68]	; 0x44
 80026e0:	e002      	b.n	80026e8 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 80026e2:	687b      	ldr	r3, [r7, #4]
 80026e4:	2200      	movs	r2, #0
 80026e6:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	2200      	movs	r2, #0
 80026ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80026f0:	4b24      	ldr	r3, [pc, #144]	; (8002784 <HAL_ADC_Start+0x160>)
 80026f2:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	681b      	ldr	r3, [r3, #0]
 80026f8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80026fc:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 80026fe:	68fb      	ldr	r3, [r7, #12]
 8002700:	685b      	ldr	r3, [r3, #4]
 8002702:	f003 031f 	and.w	r3, r3, #31
 8002706:	2b00      	cmp	r3, #0
 8002708:	d10f      	bne.n	800272a <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 800270a:	687b      	ldr	r3, [r7, #4]
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	689b      	ldr	r3, [r3, #8]
 8002710:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002714:	2b00      	cmp	r3, #0
 8002716:	d129      	bne.n	800276c <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	681b      	ldr	r3, [r3, #0]
 800271c:	689a      	ldr	r2, [r3, #8]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002726:	609a      	str	r2, [r3, #8]
 8002728:	e020      	b.n	800276c <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	4a16      	ldr	r2, [pc, #88]	; (8002788 <HAL_ADC_Start+0x164>)
 8002730:	4293      	cmp	r3, r2
 8002732:	d11b      	bne.n	800276c <HAL_ADC_Start+0x148>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	689b      	ldr	r3, [r3, #8]
 800273a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d114      	bne.n	800276c <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	689a      	ldr	r2, [r3, #8]
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002750:	609a      	str	r2, [r3, #8]
 8002752:	e00b      	b.n	800276c <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002758:	f043 0210 	orr.w	r2, r3, #16
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002760:	687b      	ldr	r3, [r7, #4]
 8002762:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002764:	f043 0201 	orr.w	r2, r3, #1
 8002768:	687b      	ldr	r3, [r7, #4]
 800276a:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 800276c:	2300      	movs	r3, #0
}
 800276e:	4618      	mov	r0, r3
 8002770:	3714      	adds	r7, #20
 8002772:	46bd      	mov	sp, r7
 8002774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002778:	4770      	bx	lr
 800277a:	bf00      	nop
 800277c:	20001440 	.word	0x20001440
 8002780:	431bde83 	.word	0x431bde83
 8002784:	40012300 	.word	0x40012300
 8002788:	40012000 	.word	0x40012000

0800278c <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 800278c:	b580      	push	{r7, lr}
 800278e:	b084      	sub	sp, #16
 8002790:	af00      	add	r7, sp, #0
 8002792:	6078      	str	r0, [r7, #4]
 8002794:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	689b      	ldr	r3, [r3, #8]
 80027a0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80027a4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80027a8:	d113      	bne.n	80027d2 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	681b      	ldr	r3, [r3, #0]
 80027ae:	689b      	ldr	r3, [r3, #8]
 80027b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80027b4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80027b8:	d10b      	bne.n	80027d2 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027be:	f043 0220 	orr.w	r2, r3, #32
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	2200      	movs	r2, #0
 80027ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80027ce:	2301      	movs	r3, #1
 80027d0:	e063      	b.n	800289a <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 80027d2:	f7ff feb3 	bl	800253c <HAL_GetTick>
 80027d6:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027d8:	e021      	b.n	800281e <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80027da:	683b      	ldr	r3, [r7, #0]
 80027dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80027e0:	d01d      	beq.n	800281e <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 80027e2:	683b      	ldr	r3, [r7, #0]
 80027e4:	2b00      	cmp	r3, #0
 80027e6:	d007      	beq.n	80027f8 <HAL_ADC_PollForConversion+0x6c>
 80027e8:	f7ff fea8 	bl	800253c <HAL_GetTick>
 80027ec:	4602      	mov	r2, r0
 80027ee:	68fb      	ldr	r3, [r7, #12]
 80027f0:	1ad3      	subs	r3, r2, r3
 80027f2:	683a      	ldr	r2, [r7, #0]
 80027f4:	429a      	cmp	r2, r3
 80027f6:	d212      	bcs.n	800281e <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f003 0302 	and.w	r3, r3, #2
 8002802:	2b02      	cmp	r3, #2
 8002804:	d00b      	beq.n	800281e <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280a:	f043 0204 	orr.w	r2, r3, #4
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	2200      	movs	r2, #0
 8002816:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 800281a:	2303      	movs	r3, #3
 800281c:	e03d      	b.n	800289a <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	f003 0302 	and.w	r3, r3, #2
 8002828:	2b02      	cmp	r3, #2
 800282a:	d1d6      	bne.n	80027da <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	f06f 0212 	mvn.w	r2, #18
 8002834:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800283a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	681b      	ldr	r3, [r3, #0]
 8002846:	689b      	ldr	r3, [r3, #8]
 8002848:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800284c:	2b00      	cmp	r3, #0
 800284e:	d123      	bne.n	8002898 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002854:	2b00      	cmp	r3, #0
 8002856:	d11f      	bne.n	8002898 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800285e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002862:	2b00      	cmp	r3, #0
 8002864:	d006      	beq.n	8002874 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	689b      	ldr	r3, [r3, #8]
 800286c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002870:	2b00      	cmp	r3, #0
 8002872:	d111      	bne.n	8002898 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002878:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800287c:	687b      	ldr	r3, [r7, #4]
 800287e:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002880:	687b      	ldr	r3, [r7, #4]
 8002882:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002884:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002888:	2b00      	cmp	r3, #0
 800288a:	d105      	bne.n	8002898 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002890:	f043 0201 	orr.w	r2, r3, #1
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002898:	2300      	movs	r3, #0
}
 800289a:	4618      	mov	r0, r3
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}

080028a2 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 80028b0:	4618      	mov	r0, r3
 80028b2:	370c      	adds	r7, #12
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80028bc:	b480      	push	{r7}
 80028be:	b085      	sub	sp, #20
 80028c0:	af00      	add	r7, sp, #0
 80028c2:	6078      	str	r0, [r7, #4]
 80028c4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80028c6:	2300      	movs	r3, #0
 80028c8:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80028d0:	2b01      	cmp	r3, #1
 80028d2:	d101      	bne.n	80028d8 <HAL_ADC_ConfigChannel+0x1c>
 80028d4:	2302      	movs	r3, #2
 80028d6:	e105      	b.n	8002ae4 <HAL_ADC_ConfigChannel+0x228>
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	2201      	movs	r2, #1
 80028dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 80028e0:	683b      	ldr	r3, [r7, #0]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	2b09      	cmp	r3, #9
 80028e6:	d925      	bls.n	8002934 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	68d9      	ldr	r1, [r3, #12]
 80028ee:	683b      	ldr	r3, [r7, #0]
 80028f0:	681b      	ldr	r3, [r3, #0]
 80028f2:	b29b      	uxth	r3, r3
 80028f4:	461a      	mov	r2, r3
 80028f6:	4613      	mov	r3, r2
 80028f8:	005b      	lsls	r3, r3, #1
 80028fa:	4413      	add	r3, r2
 80028fc:	3b1e      	subs	r3, #30
 80028fe:	2207      	movs	r2, #7
 8002900:	fa02 f303 	lsl.w	r3, r2, r3
 8002904:	43da      	mvns	r2, r3
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	681b      	ldr	r3, [r3, #0]
 800290a:	400a      	ands	r2, r1
 800290c:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 800290e:	687b      	ldr	r3, [r7, #4]
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	68d9      	ldr	r1, [r3, #12]
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	689a      	ldr	r2, [r3, #8]
 8002918:	683b      	ldr	r3, [r7, #0]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	b29b      	uxth	r3, r3
 800291e:	4618      	mov	r0, r3
 8002920:	4603      	mov	r3, r0
 8002922:	005b      	lsls	r3, r3, #1
 8002924:	4403      	add	r3, r0
 8002926:	3b1e      	subs	r3, #30
 8002928:	409a      	lsls	r2, r3
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	430a      	orrs	r2, r1
 8002930:	60da      	str	r2, [r3, #12]
 8002932:	e022      	b.n	800297a <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	681b      	ldr	r3, [r3, #0]
 8002938:	6919      	ldr	r1, [r3, #16]
 800293a:	683b      	ldr	r3, [r7, #0]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	b29b      	uxth	r3, r3
 8002940:	461a      	mov	r2, r3
 8002942:	4613      	mov	r3, r2
 8002944:	005b      	lsls	r3, r3, #1
 8002946:	4413      	add	r3, r2
 8002948:	2207      	movs	r2, #7
 800294a:	fa02 f303 	lsl.w	r3, r2, r3
 800294e:	43da      	mvns	r2, r3
 8002950:	687b      	ldr	r3, [r7, #4]
 8002952:	681b      	ldr	r3, [r3, #0]
 8002954:	400a      	ands	r2, r1
 8002956:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	6919      	ldr	r1, [r3, #16]
 800295e:	683b      	ldr	r3, [r7, #0]
 8002960:	689a      	ldr	r2, [r3, #8]
 8002962:	683b      	ldr	r3, [r7, #0]
 8002964:	681b      	ldr	r3, [r3, #0]
 8002966:	b29b      	uxth	r3, r3
 8002968:	4618      	mov	r0, r3
 800296a:	4603      	mov	r3, r0
 800296c:	005b      	lsls	r3, r3, #1
 800296e:	4403      	add	r3, r0
 8002970:	409a      	lsls	r2, r3
 8002972:	687b      	ldr	r3, [r7, #4]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 800297a:	683b      	ldr	r3, [r7, #0]
 800297c:	685b      	ldr	r3, [r3, #4]
 800297e:	2b06      	cmp	r3, #6
 8002980:	d824      	bhi.n	80029cc <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002982:	687b      	ldr	r3, [r7, #4]
 8002984:	681b      	ldr	r3, [r3, #0]
 8002986:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002988:	683b      	ldr	r3, [r7, #0]
 800298a:	685a      	ldr	r2, [r3, #4]
 800298c:	4613      	mov	r3, r2
 800298e:	009b      	lsls	r3, r3, #2
 8002990:	4413      	add	r3, r2
 8002992:	3b05      	subs	r3, #5
 8002994:	221f      	movs	r2, #31
 8002996:	fa02 f303 	lsl.w	r3, r2, r3
 800299a:	43da      	mvns	r2, r3
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	400a      	ands	r2, r1
 80029a2:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80029aa:	683b      	ldr	r3, [r7, #0]
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	b29b      	uxth	r3, r3
 80029b0:	4618      	mov	r0, r3
 80029b2:	683b      	ldr	r3, [r7, #0]
 80029b4:	685a      	ldr	r2, [r3, #4]
 80029b6:	4613      	mov	r3, r2
 80029b8:	009b      	lsls	r3, r3, #2
 80029ba:	4413      	add	r3, r2
 80029bc:	3b05      	subs	r3, #5
 80029be:	fa00 f203 	lsl.w	r2, r0, r3
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	681b      	ldr	r3, [r3, #0]
 80029c6:	430a      	orrs	r2, r1
 80029c8:	635a      	str	r2, [r3, #52]	; 0x34
 80029ca:	e04c      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 80029cc:	683b      	ldr	r3, [r7, #0]
 80029ce:	685b      	ldr	r3, [r3, #4]
 80029d0:	2b0c      	cmp	r3, #12
 80029d2:	d824      	bhi.n	8002a1e <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80029d4:	687b      	ldr	r3, [r7, #4]
 80029d6:	681b      	ldr	r3, [r3, #0]
 80029d8:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	685a      	ldr	r2, [r3, #4]
 80029de:	4613      	mov	r3, r2
 80029e0:	009b      	lsls	r3, r3, #2
 80029e2:	4413      	add	r3, r2
 80029e4:	3b23      	subs	r3, #35	; 0x23
 80029e6:	221f      	movs	r2, #31
 80029e8:	fa02 f303 	lsl.w	r3, r2, r3
 80029ec:	43da      	mvns	r2, r3
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	681b      	ldr	r3, [r3, #0]
 80029f2:	400a      	ands	r2, r1
 80029f4:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80029f6:	687b      	ldr	r3, [r7, #4]
 80029f8:	681b      	ldr	r3, [r3, #0]
 80029fa:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80029fc:	683b      	ldr	r3, [r7, #0]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	b29b      	uxth	r3, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	683b      	ldr	r3, [r7, #0]
 8002a06:	685a      	ldr	r2, [r3, #4]
 8002a08:	4613      	mov	r3, r2
 8002a0a:	009b      	lsls	r3, r3, #2
 8002a0c:	4413      	add	r3, r2
 8002a0e:	3b23      	subs	r3, #35	; 0x23
 8002a10:	fa00 f203 	lsl.w	r2, r0, r3
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	430a      	orrs	r2, r1
 8002a1a:	631a      	str	r2, [r3, #48]	; 0x30
 8002a1c:	e023      	b.n	8002a66 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a24:	683b      	ldr	r3, [r7, #0]
 8002a26:	685a      	ldr	r2, [r3, #4]
 8002a28:	4613      	mov	r3, r2
 8002a2a:	009b      	lsls	r3, r3, #2
 8002a2c:	4413      	add	r3, r2
 8002a2e:	3b41      	subs	r3, #65	; 0x41
 8002a30:	221f      	movs	r2, #31
 8002a32:	fa02 f303 	lsl.w	r3, r2, r3
 8002a36:	43da      	mvns	r2, r3
 8002a38:	687b      	ldr	r3, [r7, #4]
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	400a      	ands	r2, r1
 8002a3e:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002a46:	683b      	ldr	r3, [r7, #0]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	b29b      	uxth	r3, r3
 8002a4c:	4618      	mov	r0, r3
 8002a4e:	683b      	ldr	r3, [r7, #0]
 8002a50:	685a      	ldr	r2, [r3, #4]
 8002a52:	4613      	mov	r3, r2
 8002a54:	009b      	lsls	r3, r3, #2
 8002a56:	4413      	add	r3, r2
 8002a58:	3b41      	subs	r3, #65	; 0x41
 8002a5a:	fa00 f203 	lsl.w	r2, r0, r3
 8002a5e:	687b      	ldr	r3, [r7, #4]
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	430a      	orrs	r2, r1
 8002a64:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002a66:	4b22      	ldr	r3, [pc, #136]	; (8002af0 <HAL_ADC_ConfigChannel+0x234>)
 8002a68:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	681b      	ldr	r3, [r3, #0]
 8002a6e:	4a21      	ldr	r2, [pc, #132]	; (8002af4 <HAL_ADC_ConfigChannel+0x238>)
 8002a70:	4293      	cmp	r3, r2
 8002a72:	d109      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1cc>
 8002a74:	683b      	ldr	r3, [r7, #0]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	2b12      	cmp	r3, #18
 8002a7a:	d105      	bne.n	8002a88 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002a7c:	68fb      	ldr	r3, [r7, #12]
 8002a7e:	685b      	ldr	r3, [r3, #4]
 8002a80:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	681b      	ldr	r3, [r3, #0]
 8002a8c:	4a19      	ldr	r2, [pc, #100]	; (8002af4 <HAL_ADC_ConfigChannel+0x238>)
 8002a8e:	4293      	cmp	r3, r2
 8002a90:	d123      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x21e>
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	2b10      	cmp	r3, #16
 8002a98:	d003      	beq.n	8002aa2 <HAL_ADC_ConfigChannel+0x1e6>
 8002a9a:	683b      	ldr	r3, [r7, #0]
 8002a9c:	681b      	ldr	r3, [r3, #0]
 8002a9e:	2b11      	cmp	r3, #17
 8002aa0:	d11b      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002aaa:	68fb      	ldr	r3, [r7, #12]
 8002aac:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002aae:	683b      	ldr	r3, [r7, #0]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	2b10      	cmp	r3, #16
 8002ab4:	d111      	bne.n	8002ada <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002ab6:	4b10      	ldr	r3, [pc, #64]	; (8002af8 <HAL_ADC_ConfigChannel+0x23c>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4a10      	ldr	r2, [pc, #64]	; (8002afc <HAL_ADC_ConfigChannel+0x240>)
 8002abc:	fba2 2303 	umull	r2, r3, r2, r3
 8002ac0:	0c9a      	lsrs	r2, r3, #18
 8002ac2:	4613      	mov	r3, r2
 8002ac4:	009b      	lsls	r3, r3, #2
 8002ac6:	4413      	add	r3, r2
 8002ac8:	005b      	lsls	r3, r3, #1
 8002aca:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002acc:	e002      	b.n	8002ad4 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002ace:	68bb      	ldr	r3, [r7, #8]
 8002ad0:	3b01      	subs	r3, #1
 8002ad2:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002ad4:	68bb      	ldr	r3, [r7, #8]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	d1f9      	bne.n	8002ace <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2200      	movs	r2, #0
 8002ade:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002ae2:	2300      	movs	r3, #0
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	3714      	adds	r7, #20
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aee:	4770      	bx	lr
 8002af0:	40012300 	.word	0x40012300
 8002af4:	40012000 	.word	0x40012000
 8002af8:	20001440 	.word	0x20001440
 8002afc:	431bde83 	.word	0x431bde83

08002b00 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002b08:	4b79      	ldr	r3, [pc, #484]	; (8002cf0 <ADC_Init+0x1f0>)
 8002b0a:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	685b      	ldr	r3, [r3, #4]
 8002b10:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	685a      	ldr	r2, [r3, #4]
 8002b1c:	687b      	ldr	r3, [r7, #4]
 8002b1e:	685b      	ldr	r3, [r3, #4]
 8002b20:	431a      	orrs	r2, r3
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	681b      	ldr	r3, [r3, #0]
 8002b2a:	685a      	ldr	r2, [r3, #4]
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b34:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	6859      	ldr	r1, [r3, #4]
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	691b      	ldr	r3, [r3, #16]
 8002b40:	021a      	lsls	r2, r3, #8
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	430a      	orrs	r2, r1
 8002b48:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	685a      	ldr	r2, [r3, #4]
 8002b50:	687b      	ldr	r3, [r7, #4]
 8002b52:	681b      	ldr	r3, [r3, #0]
 8002b54:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8002b58:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8002b5a:	687b      	ldr	r3, [r7, #4]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	6859      	ldr	r1, [r3, #4]
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	689a      	ldr	r2, [r3, #8]
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	430a      	orrs	r2, r1
 8002b6a:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	681b      	ldr	r3, [r3, #0]
 8002b70:	689a      	ldr	r2, [r3, #8]
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002b7a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8002b7c:	687b      	ldr	r3, [r7, #4]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	6899      	ldr	r1, [r3, #8]
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	68da      	ldr	r2, [r3, #12]
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	681b      	ldr	r3, [r3, #0]
 8002b8a:	430a      	orrs	r2, r1
 8002b8c:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002b92:	4a58      	ldr	r2, [pc, #352]	; (8002cf4 <ADC_Init+0x1f4>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d022      	beq.n	8002bde <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	689a      	ldr	r2, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002ba6:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	681b      	ldr	r3, [r3, #0]
 8002bac:	6899      	ldr	r1, [r3, #8]
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002bb2:	687b      	ldr	r3, [r7, #4]
 8002bb4:	681b      	ldr	r3, [r3, #0]
 8002bb6:	430a      	orrs	r2, r1
 8002bb8:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	689a      	ldr	r2, [r3, #8]
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bc8:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	681b      	ldr	r3, [r3, #0]
 8002bce:	6899      	ldr	r1, [r3, #8]
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	681b      	ldr	r3, [r3, #0]
 8002bd8:	430a      	orrs	r2, r1
 8002bda:	609a      	str	r2, [r3, #8]
 8002bdc:	e00f      	b.n	8002bfe <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	689a      	ldr	r2, [r3, #8]
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	681b      	ldr	r3, [r3, #0]
 8002be8:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8002bec:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8002bee:	687b      	ldr	r3, [r7, #4]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	689a      	ldr	r2, [r3, #8]
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8002bfc:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689a      	ldr	r2, [r3, #8]
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	f022 0202 	bic.w	r2, r2, #2
 8002c0c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	681b      	ldr	r3, [r3, #0]
 8002c12:	6899      	ldr	r1, [r3, #8]
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	7e1b      	ldrb	r3, [r3, #24]
 8002c18:	005a      	lsls	r2, r3, #1
 8002c1a:	687b      	ldr	r3, [r7, #4]
 8002c1c:	681b      	ldr	r3, [r3, #0]
 8002c1e:	430a      	orrs	r2, r1
 8002c20:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002c28:	2b00      	cmp	r3, #0
 8002c2a:	d01b      	beq.n	8002c64 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8002c2c:	687b      	ldr	r3, [r7, #4]
 8002c2e:	681b      	ldr	r3, [r3, #0]
 8002c30:	685a      	ldr	r2, [r3, #4]
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8002c3a:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	685a      	ldr	r2, [r3, #4]
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	681b      	ldr	r3, [r3, #0]
 8002c46:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8002c4a:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	6859      	ldr	r1, [r3, #4]
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c56:	3b01      	subs	r3, #1
 8002c58:	035a      	lsls	r2, r3, #13
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	430a      	orrs	r2, r1
 8002c60:	605a      	str	r2, [r3, #4]
 8002c62:	e007      	b.n	8002c74 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8002c64:	687b      	ldr	r3, [r7, #4]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	685a      	ldr	r2, [r3, #4]
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002c72:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8002c7a:	687b      	ldr	r3, [r7, #4]
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8002c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8002c84:	687b      	ldr	r3, [r7, #4]
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002c8a:	687b      	ldr	r3, [r7, #4]
 8002c8c:	69db      	ldr	r3, [r3, #28]
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	051a      	lsls	r2, r3, #20
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	430a      	orrs	r2, r1
 8002c98:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	689a      	ldr	r2, [r3, #8]
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8002ca8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	6899      	ldr	r1, [r3, #8]
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8002cb6:	025a      	lsls	r2, r3, #9
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	430a      	orrs	r2, r1
 8002cbe:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8002cc0:	687b      	ldr	r3, [r7, #4]
 8002cc2:	681b      	ldr	r3, [r3, #0]
 8002cc4:	689a      	ldr	r2, [r3, #8]
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8002cce:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	681b      	ldr	r3, [r3, #0]
 8002cd4:	6899      	ldr	r1, [r3, #8]
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	695b      	ldr	r3, [r3, #20]
 8002cda:	029a      	lsls	r2, r3, #10
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	430a      	orrs	r2, r1
 8002ce2:	609a      	str	r2, [r3, #8]
}
 8002ce4:	bf00      	nop
 8002ce6:	3714      	adds	r7, #20
 8002ce8:	46bd      	mov	sp, r7
 8002cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cee:	4770      	bx	lr
 8002cf0:	40012300 	.word	0x40012300
 8002cf4:	0f000001 	.word	0x0f000001

08002cf8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002cf8:	b480      	push	{r7}
 8002cfa:	b085      	sub	sp, #20
 8002cfc:	af00      	add	r7, sp, #0
 8002cfe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	f003 0307 	and.w	r3, r3, #7
 8002d06:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d08:	4b0c      	ldr	r3, [pc, #48]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d0a:	68db      	ldr	r3, [r3, #12]
 8002d0c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d0e:	68ba      	ldr	r2, [r7, #8]
 8002d10:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002d14:	4013      	ands	r3, r2
 8002d16:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d1c:	68bb      	ldr	r3, [r7, #8]
 8002d1e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d20:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002d24:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002d28:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d2a:	4a04      	ldr	r2, [pc, #16]	; (8002d3c <__NVIC_SetPriorityGrouping+0x44>)
 8002d2c:	68bb      	ldr	r3, [r7, #8]
 8002d2e:	60d3      	str	r3, [r2, #12]
}
 8002d30:	bf00      	nop
 8002d32:	3714      	adds	r7, #20
 8002d34:	46bd      	mov	sp, r7
 8002d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d3a:	4770      	bx	lr
 8002d3c:	e000ed00 	.word	0xe000ed00

08002d40 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d40:	b480      	push	{r7}
 8002d42:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d44:	4b04      	ldr	r3, [pc, #16]	; (8002d58 <__NVIC_GetPriorityGrouping+0x18>)
 8002d46:	68db      	ldr	r3, [r3, #12]
 8002d48:	0a1b      	lsrs	r3, r3, #8
 8002d4a:	f003 0307 	and.w	r3, r3, #7
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	46bd      	mov	sp, r7
 8002d52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d56:	4770      	bx	lr
 8002d58:	e000ed00 	.word	0xe000ed00

08002d5c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b083      	sub	sp, #12
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	4603      	mov	r3, r0
 8002d64:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	2b00      	cmp	r3, #0
 8002d6c:	db0b      	blt.n	8002d86 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d6e:	79fb      	ldrb	r3, [r7, #7]
 8002d70:	f003 021f 	and.w	r2, r3, #31
 8002d74:	4907      	ldr	r1, [pc, #28]	; (8002d94 <__NVIC_EnableIRQ+0x38>)
 8002d76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d7a:	095b      	lsrs	r3, r3, #5
 8002d7c:	2001      	movs	r0, #1
 8002d7e:	fa00 f202 	lsl.w	r2, r0, r2
 8002d82:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr
 8002d92:	bf00      	nop
 8002d94:	e000e100 	.word	0xe000e100

08002d98 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	b083      	sub	sp, #12
 8002d9c:	af00      	add	r7, sp, #0
 8002d9e:	4603      	mov	r3, r0
 8002da0:	6039      	str	r1, [r7, #0]
 8002da2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002da4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002da8:	2b00      	cmp	r3, #0
 8002daa:	db0a      	blt.n	8002dc2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	b2da      	uxtb	r2, r3
 8002db0:	490c      	ldr	r1, [pc, #48]	; (8002de4 <__NVIC_SetPriority+0x4c>)
 8002db2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002db6:	0112      	lsls	r2, r2, #4
 8002db8:	b2d2      	uxtb	r2, r2
 8002dba:	440b      	add	r3, r1
 8002dbc:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002dc0:	e00a      	b.n	8002dd8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dc2:	683b      	ldr	r3, [r7, #0]
 8002dc4:	b2da      	uxtb	r2, r3
 8002dc6:	4908      	ldr	r1, [pc, #32]	; (8002de8 <__NVIC_SetPriority+0x50>)
 8002dc8:	79fb      	ldrb	r3, [r7, #7]
 8002dca:	f003 030f 	and.w	r3, r3, #15
 8002dce:	3b04      	subs	r3, #4
 8002dd0:	0112      	lsls	r2, r2, #4
 8002dd2:	b2d2      	uxtb	r2, r2
 8002dd4:	440b      	add	r3, r1
 8002dd6:	761a      	strb	r2, [r3, #24]
}
 8002dd8:	bf00      	nop
 8002dda:	370c      	adds	r7, #12
 8002ddc:	46bd      	mov	sp, r7
 8002dde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100
 8002de8:	e000ed00 	.word	0xe000ed00

08002dec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002dec:	b480      	push	{r7}
 8002dee:	b089      	sub	sp, #36	; 0x24
 8002df0:	af00      	add	r7, sp, #0
 8002df2:	60f8      	str	r0, [r7, #12]
 8002df4:	60b9      	str	r1, [r7, #8]
 8002df6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	f003 0307 	and.w	r3, r3, #7
 8002dfe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e00:	69fb      	ldr	r3, [r7, #28]
 8002e02:	f1c3 0307 	rsb	r3, r3, #7
 8002e06:	2b04      	cmp	r3, #4
 8002e08:	bf28      	it	cs
 8002e0a:	2304      	movcs	r3, #4
 8002e0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	3304      	adds	r3, #4
 8002e12:	2b06      	cmp	r3, #6
 8002e14:	d902      	bls.n	8002e1c <NVIC_EncodePriority+0x30>
 8002e16:	69fb      	ldr	r3, [r7, #28]
 8002e18:	3b03      	subs	r3, #3
 8002e1a:	e000      	b.n	8002e1e <NVIC_EncodePriority+0x32>
 8002e1c:	2300      	movs	r3, #0
 8002e1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e20:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002e24:	69bb      	ldr	r3, [r7, #24]
 8002e26:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2a:	43da      	mvns	r2, r3
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	401a      	ands	r2, r3
 8002e30:	697b      	ldr	r3, [r7, #20]
 8002e32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e34:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002e38:	697b      	ldr	r3, [r7, #20]
 8002e3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e3e:	43d9      	mvns	r1, r3
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e44:	4313      	orrs	r3, r2
         );
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	3724      	adds	r7, #36	; 0x24
 8002e4a:	46bd      	mov	sp, r7
 8002e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e50:	4770      	bx	lr
	...

08002e54 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e54:	b580      	push	{r7, lr}
 8002e56:	b082      	sub	sp, #8
 8002e58:	af00      	add	r7, sp, #0
 8002e5a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3b01      	subs	r3, #1
 8002e60:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e64:	d301      	bcc.n	8002e6a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e66:	2301      	movs	r3, #1
 8002e68:	e00f      	b.n	8002e8a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e6a:	4a0a      	ldr	r2, [pc, #40]	; (8002e94 <SysTick_Config+0x40>)
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	3b01      	subs	r3, #1
 8002e70:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e72:	210f      	movs	r1, #15
 8002e74:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e78:	f7ff ff8e 	bl	8002d98 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e7c:	4b05      	ldr	r3, [pc, #20]	; (8002e94 <SysTick_Config+0x40>)
 8002e7e:	2200      	movs	r2, #0
 8002e80:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e82:	4b04      	ldr	r3, [pc, #16]	; (8002e94 <SysTick_Config+0x40>)
 8002e84:	2207      	movs	r2, #7
 8002e86:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e88:	2300      	movs	r3, #0
}
 8002e8a:	4618      	mov	r0, r3
 8002e8c:	3708      	adds	r7, #8
 8002e8e:	46bd      	mov	sp, r7
 8002e90:	bd80      	pop	{r7, pc}
 8002e92:	bf00      	nop
 8002e94:	e000e010 	.word	0xe000e010

08002e98 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e98:	b580      	push	{r7, lr}
 8002e9a:	b082      	sub	sp, #8
 8002e9c:	af00      	add	r7, sp, #0
 8002e9e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ea0:	6878      	ldr	r0, [r7, #4]
 8002ea2:	f7ff ff29 	bl	8002cf8 <__NVIC_SetPriorityGrouping>
}
 8002ea6:	bf00      	nop
 8002ea8:	3708      	adds	r7, #8
 8002eaa:	46bd      	mov	sp, r7
 8002eac:	bd80      	pop	{r7, pc}

08002eae <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002eae:	b580      	push	{r7, lr}
 8002eb0:	b086      	sub	sp, #24
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	4603      	mov	r3, r0
 8002eb6:	60b9      	str	r1, [r7, #8]
 8002eb8:	607a      	str	r2, [r7, #4]
 8002eba:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ebc:	2300      	movs	r3, #0
 8002ebe:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ec0:	f7ff ff3e 	bl	8002d40 <__NVIC_GetPriorityGrouping>
 8002ec4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ec6:	687a      	ldr	r2, [r7, #4]
 8002ec8:	68b9      	ldr	r1, [r7, #8]
 8002eca:	6978      	ldr	r0, [r7, #20]
 8002ecc:	f7ff ff8e 	bl	8002dec <NVIC_EncodePriority>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ed6:	4611      	mov	r1, r2
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7ff ff5d 	bl	8002d98 <__NVIC_SetPriority>
}
 8002ede:	bf00      	nop
 8002ee0:	3718      	adds	r7, #24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ee6:	b580      	push	{r7, lr}
 8002ee8:	b082      	sub	sp, #8
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	4603      	mov	r3, r0
 8002eee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ef0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7ff ff31 	bl	8002d5c <__NVIC_EnableIRQ>
}
 8002efa:	bf00      	nop
 8002efc:	3708      	adds	r7, #8
 8002efe:	46bd      	mov	sp, r7
 8002f00:	bd80      	pop	{r7, pc}

08002f02 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f02:	b580      	push	{r7, lr}
 8002f04:	b082      	sub	sp, #8
 8002f06:	af00      	add	r7, sp, #0
 8002f08:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f0a:	6878      	ldr	r0, [r7, #4]
 8002f0c:	f7ff ffa2 	bl	8002e54 <SysTick_Config>
 8002f10:	4603      	mov	r3, r0
}
 8002f12:	4618      	mov	r0, r3
 8002f14:	3708      	adds	r7, #8
 8002f16:	46bd      	mov	sp, r7
 8002f18:	bd80      	pop	{r7, pc}
	...

08002f1c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f1c:	b480      	push	{r7}
 8002f1e:	b089      	sub	sp, #36	; 0x24
 8002f20:	af00      	add	r7, sp, #0
 8002f22:	6078      	str	r0, [r7, #4]
 8002f24:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f26:	2300      	movs	r3, #0
 8002f28:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f2a:	2300      	movs	r3, #0
 8002f2c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f2e:	2300      	movs	r3, #0
 8002f30:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f32:	2300      	movs	r3, #0
 8002f34:	61fb      	str	r3, [r7, #28]
 8002f36:	e159      	b.n	80031ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f38:	2201      	movs	r2, #1
 8002f3a:	69fb      	ldr	r3, [r7, #28]
 8002f3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f40:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	697a      	ldr	r2, [r7, #20]
 8002f48:	4013      	ands	r3, r2
 8002f4a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f4c:	693a      	ldr	r2, [r7, #16]
 8002f4e:	697b      	ldr	r3, [r7, #20]
 8002f50:	429a      	cmp	r2, r3
 8002f52:	f040 8148 	bne.w	80031e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f56:	683b      	ldr	r3, [r7, #0]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	f003 0303 	and.w	r3, r3, #3
 8002f5e:	2b01      	cmp	r3, #1
 8002f60:	d005      	beq.n	8002f6e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	685b      	ldr	r3, [r3, #4]
 8002f66:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002f6a:	2b02      	cmp	r3, #2
 8002f6c:	d130      	bne.n	8002fd0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	689b      	ldr	r3, [r3, #8]
 8002f72:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002f74:	69fb      	ldr	r3, [r7, #28]
 8002f76:	005b      	lsls	r3, r3, #1
 8002f78:	2203      	movs	r2, #3
 8002f7a:	fa02 f303 	lsl.w	r3, r2, r3
 8002f7e:	43db      	mvns	r3, r3
 8002f80:	69ba      	ldr	r2, [r7, #24]
 8002f82:	4013      	ands	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	68da      	ldr	r2, [r3, #12]
 8002f8a:	69fb      	ldr	r3, [r7, #28]
 8002f8c:	005b      	lsls	r3, r3, #1
 8002f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002f9e:	687b      	ldr	r3, [r7, #4]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fa4:	2201      	movs	r2, #1
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fac:	43db      	mvns	r3, r3
 8002fae:	69ba      	ldr	r2, [r7, #24]
 8002fb0:	4013      	ands	r3, r2
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002fb4:	683b      	ldr	r3, [r7, #0]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	091b      	lsrs	r3, r3, #4
 8002fba:	f003 0201 	and.w	r2, r3, #1
 8002fbe:	69fb      	ldr	r3, [r7, #28]
 8002fc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	69ba      	ldr	r2, [r7, #24]
 8002fce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002fd0:	683b      	ldr	r3, [r7, #0]
 8002fd2:	685b      	ldr	r3, [r3, #4]
 8002fd4:	f003 0303 	and.w	r3, r3, #3
 8002fd8:	2b03      	cmp	r3, #3
 8002fda:	d017      	beq.n	800300c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	68db      	ldr	r3, [r3, #12]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002fe2:	69fb      	ldr	r3, [r7, #28]
 8002fe4:	005b      	lsls	r3, r3, #1
 8002fe6:	2203      	movs	r2, #3
 8002fe8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fec:	43db      	mvns	r3, r3
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	4013      	ands	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002ff4:	683b      	ldr	r3, [r7, #0]
 8002ff6:	689a      	ldr	r2, [r3, #8]
 8002ff8:	69fb      	ldr	r3, [r7, #28]
 8002ffa:	005b      	lsls	r3, r3, #1
 8002ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8003000:	69ba      	ldr	r2, [r7, #24]
 8003002:	4313      	orrs	r3, r2
 8003004:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	69ba      	ldr	r2, [r7, #24]
 800300a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f003 0303 	and.w	r3, r3, #3
 8003014:	2b02      	cmp	r3, #2
 8003016:	d123      	bne.n	8003060 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003018:	69fb      	ldr	r3, [r7, #28]
 800301a:	08da      	lsrs	r2, r3, #3
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	3208      	adds	r2, #8
 8003020:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003024:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	f003 0307 	and.w	r3, r3, #7
 800302c:	009b      	lsls	r3, r3, #2
 800302e:	220f      	movs	r2, #15
 8003030:	fa02 f303 	lsl.w	r3, r2, r3
 8003034:	43db      	mvns	r3, r3
 8003036:	69ba      	ldr	r2, [r7, #24]
 8003038:	4013      	ands	r3, r2
 800303a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	691a      	ldr	r2, [r3, #16]
 8003040:	69fb      	ldr	r3, [r7, #28]
 8003042:	f003 0307 	and.w	r3, r3, #7
 8003046:	009b      	lsls	r3, r3, #2
 8003048:	fa02 f303 	lsl.w	r3, r2, r3
 800304c:	69ba      	ldr	r2, [r7, #24]
 800304e:	4313      	orrs	r3, r2
 8003050:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003052:	69fb      	ldr	r3, [r7, #28]
 8003054:	08da      	lsrs	r2, r3, #3
 8003056:	687b      	ldr	r3, [r7, #4]
 8003058:	3208      	adds	r2, #8
 800305a:	69b9      	ldr	r1, [r7, #24]
 800305c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	005b      	lsls	r3, r3, #1
 800306a:	2203      	movs	r2, #3
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	43db      	mvns	r3, r3
 8003072:	69ba      	ldr	r2, [r7, #24]
 8003074:	4013      	ands	r3, r2
 8003076:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003078:	683b      	ldr	r3, [r7, #0]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	f003 0203 	and.w	r2, r3, #3
 8003080:	69fb      	ldr	r3, [r7, #28]
 8003082:	005b      	lsls	r3, r3, #1
 8003084:	fa02 f303 	lsl.w	r3, r2, r3
 8003088:	69ba      	ldr	r2, [r7, #24]
 800308a:	4313      	orrs	r3, r2
 800308c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	69ba      	ldr	r2, [r7, #24]
 8003092:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003094:	683b      	ldr	r3, [r7, #0]
 8003096:	685b      	ldr	r3, [r3, #4]
 8003098:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800309c:	2b00      	cmp	r3, #0
 800309e:	f000 80a2 	beq.w	80031e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030a2:	2300      	movs	r3, #0
 80030a4:	60fb      	str	r3, [r7, #12]
 80030a6:	4b57      	ldr	r3, [pc, #348]	; (8003204 <HAL_GPIO_Init+0x2e8>)
 80030a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030aa:	4a56      	ldr	r2, [pc, #344]	; (8003204 <HAL_GPIO_Init+0x2e8>)
 80030ac:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030b0:	6453      	str	r3, [r2, #68]	; 0x44
 80030b2:	4b54      	ldr	r3, [pc, #336]	; (8003204 <HAL_GPIO_Init+0x2e8>)
 80030b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030b6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ba:	60fb      	str	r3, [r7, #12]
 80030bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030be:	4a52      	ldr	r2, [pc, #328]	; (8003208 <HAL_GPIO_Init+0x2ec>)
 80030c0:	69fb      	ldr	r3, [r7, #28]
 80030c2:	089b      	lsrs	r3, r3, #2
 80030c4:	3302      	adds	r3, #2
 80030c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030cc:	69fb      	ldr	r3, [r7, #28]
 80030ce:	f003 0303 	and.w	r3, r3, #3
 80030d2:	009b      	lsls	r3, r3, #2
 80030d4:	220f      	movs	r2, #15
 80030d6:	fa02 f303 	lsl.w	r3, r2, r3
 80030da:	43db      	mvns	r3, r3
 80030dc:	69ba      	ldr	r2, [r7, #24]
 80030de:	4013      	ands	r3, r2
 80030e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	4a49      	ldr	r2, [pc, #292]	; (800320c <HAL_GPIO_Init+0x2f0>)
 80030e6:	4293      	cmp	r3, r2
 80030e8:	d019      	beq.n	800311e <HAL_GPIO_Init+0x202>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	4a48      	ldr	r2, [pc, #288]	; (8003210 <HAL_GPIO_Init+0x2f4>)
 80030ee:	4293      	cmp	r3, r2
 80030f0:	d013      	beq.n	800311a <HAL_GPIO_Init+0x1fe>
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	4a47      	ldr	r2, [pc, #284]	; (8003214 <HAL_GPIO_Init+0x2f8>)
 80030f6:	4293      	cmp	r3, r2
 80030f8:	d00d      	beq.n	8003116 <HAL_GPIO_Init+0x1fa>
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	4a46      	ldr	r2, [pc, #280]	; (8003218 <HAL_GPIO_Init+0x2fc>)
 80030fe:	4293      	cmp	r3, r2
 8003100:	d007      	beq.n	8003112 <HAL_GPIO_Init+0x1f6>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	4a45      	ldr	r2, [pc, #276]	; (800321c <HAL_GPIO_Init+0x300>)
 8003106:	4293      	cmp	r3, r2
 8003108:	d101      	bne.n	800310e <HAL_GPIO_Init+0x1f2>
 800310a:	2304      	movs	r3, #4
 800310c:	e008      	b.n	8003120 <HAL_GPIO_Init+0x204>
 800310e:	2307      	movs	r3, #7
 8003110:	e006      	b.n	8003120 <HAL_GPIO_Init+0x204>
 8003112:	2303      	movs	r3, #3
 8003114:	e004      	b.n	8003120 <HAL_GPIO_Init+0x204>
 8003116:	2302      	movs	r3, #2
 8003118:	e002      	b.n	8003120 <HAL_GPIO_Init+0x204>
 800311a:	2301      	movs	r3, #1
 800311c:	e000      	b.n	8003120 <HAL_GPIO_Init+0x204>
 800311e:	2300      	movs	r3, #0
 8003120:	69fa      	ldr	r2, [r7, #28]
 8003122:	f002 0203 	and.w	r2, r2, #3
 8003126:	0092      	lsls	r2, r2, #2
 8003128:	4093      	lsls	r3, r2
 800312a:	69ba      	ldr	r2, [r7, #24]
 800312c:	4313      	orrs	r3, r2
 800312e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003130:	4935      	ldr	r1, [pc, #212]	; (8003208 <HAL_GPIO_Init+0x2ec>)
 8003132:	69fb      	ldr	r3, [r7, #28]
 8003134:	089b      	lsrs	r3, r3, #2
 8003136:	3302      	adds	r3, #2
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800313e:	4b38      	ldr	r3, [pc, #224]	; (8003220 <HAL_GPIO_Init+0x304>)
 8003140:	689b      	ldr	r3, [r3, #8]
 8003142:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003144:	693b      	ldr	r3, [r7, #16]
 8003146:	43db      	mvns	r3, r3
 8003148:	69ba      	ldr	r2, [r7, #24]
 800314a:	4013      	ands	r3, r2
 800314c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800314e:	683b      	ldr	r3, [r7, #0]
 8003150:	685b      	ldr	r3, [r3, #4]
 8003152:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003156:	2b00      	cmp	r3, #0
 8003158:	d003      	beq.n	8003162 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	693b      	ldr	r3, [r7, #16]
 800315e:	4313      	orrs	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003162:	4a2f      	ldr	r2, [pc, #188]	; (8003220 <HAL_GPIO_Init+0x304>)
 8003164:	69bb      	ldr	r3, [r7, #24]
 8003166:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003168:	4b2d      	ldr	r3, [pc, #180]	; (8003220 <HAL_GPIO_Init+0x304>)
 800316a:	68db      	ldr	r3, [r3, #12]
 800316c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800316e:	693b      	ldr	r3, [r7, #16]
 8003170:	43db      	mvns	r3, r3
 8003172:	69ba      	ldr	r2, [r7, #24]
 8003174:	4013      	ands	r3, r2
 8003176:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003178:	683b      	ldr	r3, [r7, #0]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d003      	beq.n	800318c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003184:	69ba      	ldr	r2, [r7, #24]
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	4313      	orrs	r3, r2
 800318a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800318c:	4a24      	ldr	r2, [pc, #144]	; (8003220 <HAL_GPIO_Init+0x304>)
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003192:	4b23      	ldr	r3, [pc, #140]	; (8003220 <HAL_GPIO_Init+0x304>)
 8003194:	685b      	ldr	r3, [r3, #4]
 8003196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003198:	693b      	ldr	r3, [r7, #16]
 800319a:	43db      	mvns	r3, r3
 800319c:	69ba      	ldr	r2, [r7, #24]
 800319e:	4013      	ands	r3, r2
 80031a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80031a2:	683b      	ldr	r3, [r7, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d003      	beq.n	80031b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031ae:	69ba      	ldr	r2, [r7, #24]
 80031b0:	693b      	ldr	r3, [r7, #16]
 80031b2:	4313      	orrs	r3, r2
 80031b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031b6:	4a1a      	ldr	r2, [pc, #104]	; (8003220 <HAL_GPIO_Init+0x304>)
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80031bc:	4b18      	ldr	r3, [pc, #96]	; (8003220 <HAL_GPIO_Init+0x304>)
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c2:	693b      	ldr	r3, [r7, #16]
 80031c4:	43db      	mvns	r3, r3
 80031c6:	69ba      	ldr	r2, [r7, #24]
 80031c8:	4013      	ands	r3, r2
 80031ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d003      	beq.n	80031e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80031d8:	69ba      	ldr	r2, [r7, #24]
 80031da:	693b      	ldr	r3, [r7, #16]
 80031dc:	4313      	orrs	r3, r2
 80031de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80031e0:	4a0f      	ldr	r2, [pc, #60]	; (8003220 <HAL_GPIO_Init+0x304>)
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80031e6:	69fb      	ldr	r3, [r7, #28]
 80031e8:	3301      	adds	r3, #1
 80031ea:	61fb      	str	r3, [r7, #28]
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	2b0f      	cmp	r3, #15
 80031f0:	f67f aea2 	bls.w	8002f38 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80031f4:	bf00      	nop
 80031f6:	bf00      	nop
 80031f8:	3724      	adds	r7, #36	; 0x24
 80031fa:	46bd      	mov	sp, r7
 80031fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003200:	4770      	bx	lr
 8003202:	bf00      	nop
 8003204:	40023800 	.word	0x40023800
 8003208:	40013800 	.word	0x40013800
 800320c:	40020000 	.word	0x40020000
 8003210:	40020400 	.word	0x40020400
 8003214:	40020800 	.word	0x40020800
 8003218:	40020c00 	.word	0x40020c00
 800321c:	40021000 	.word	0x40021000
 8003220:	40013c00 	.word	0x40013c00

08003224 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003224:	b480      	push	{r7}
 8003226:	b085      	sub	sp, #20
 8003228:	af00      	add	r7, sp, #0
 800322a:	6078      	str	r0, [r7, #4]
 800322c:	460b      	mov	r3, r1
 800322e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	691a      	ldr	r2, [r3, #16]
 8003234:	887b      	ldrh	r3, [r7, #2]
 8003236:	4013      	ands	r3, r2
 8003238:	2b00      	cmp	r3, #0
 800323a:	d002      	beq.n	8003242 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800323c:	2301      	movs	r3, #1
 800323e:	73fb      	strb	r3, [r7, #15]
 8003240:	e001      	b.n	8003246 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003242:	2300      	movs	r3, #0
 8003244:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003246:	7bfb      	ldrb	r3, [r7, #15]
}
 8003248:	4618      	mov	r0, r3
 800324a:	3714      	adds	r7, #20
 800324c:	46bd      	mov	sp, r7
 800324e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003252:	4770      	bx	lr

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003270:	e003      	b.n	800327a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b084      	sub	sp, #16
 800328c:	af00      	add	r7, sp, #0
 800328e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2b00      	cmp	r3, #0
 8003294:	d101      	bne.n	800329a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003296:	2301      	movs	r3, #1
 8003298:	e12b      	b.n	80034f2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032a0:	b2db      	uxtb	r3, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	d106      	bne.n	80032b4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	2200      	movs	r2, #0
 80032aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032ae:	6878      	ldr	r0, [r7, #4]
 80032b0:	f7fe fe18 	bl	8001ee4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032b4:	687b      	ldr	r3, [r7, #4]
 80032b6:	2224      	movs	r2, #36	; 0x24
 80032b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	681a      	ldr	r2, [r3, #0]
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	681b      	ldr	r3, [r3, #0]
 80032c6:	f022 0201 	bic.w	r2, r2, #1
 80032ca:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	681a      	ldr	r2, [r3, #0]
 80032d2:	687b      	ldr	r3, [r7, #4]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80032da:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	681a      	ldr	r2, [r3, #0]
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80032ea:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80032ec:	f001 f888 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 80032f0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	685b      	ldr	r3, [r3, #4]
 80032f6:	4a81      	ldr	r2, [pc, #516]	; (80034fc <HAL_I2C_Init+0x274>)
 80032f8:	4293      	cmp	r3, r2
 80032fa:	d807      	bhi.n	800330c <HAL_I2C_Init+0x84>
 80032fc:	68fb      	ldr	r3, [r7, #12]
 80032fe:	4a80      	ldr	r2, [pc, #512]	; (8003500 <HAL_I2C_Init+0x278>)
 8003300:	4293      	cmp	r3, r2
 8003302:	bf94      	ite	ls
 8003304:	2301      	movls	r3, #1
 8003306:	2300      	movhi	r3, #0
 8003308:	b2db      	uxtb	r3, r3
 800330a:	e006      	b.n	800331a <HAL_I2C_Init+0x92>
 800330c:	68fb      	ldr	r3, [r7, #12]
 800330e:	4a7d      	ldr	r2, [pc, #500]	; (8003504 <HAL_I2C_Init+0x27c>)
 8003310:	4293      	cmp	r3, r2
 8003312:	bf94      	ite	ls
 8003314:	2301      	movls	r3, #1
 8003316:	2300      	movhi	r3, #0
 8003318:	b2db      	uxtb	r3, r3
 800331a:	2b00      	cmp	r3, #0
 800331c:	d001      	beq.n	8003322 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800331e:	2301      	movs	r3, #1
 8003320:	e0e7      	b.n	80034f2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	4a78      	ldr	r2, [pc, #480]	; (8003508 <HAL_I2C_Init+0x280>)
 8003326:	fba2 2303 	umull	r2, r3, r2, r3
 800332a:	0c9b      	lsrs	r3, r3, #18
 800332c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	685b      	ldr	r3, [r3, #4]
 8003334:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	68ba      	ldr	r2, [r7, #8]
 800333e:	430a      	orrs	r2, r1
 8003340:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	6a1b      	ldr	r3, [r3, #32]
 8003348:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	4a6a      	ldr	r2, [pc, #424]	; (80034fc <HAL_I2C_Init+0x274>)
 8003352:	4293      	cmp	r3, r2
 8003354:	d802      	bhi.n	800335c <HAL_I2C_Init+0xd4>
 8003356:	68bb      	ldr	r3, [r7, #8]
 8003358:	3301      	adds	r3, #1
 800335a:	e009      	b.n	8003370 <HAL_I2C_Init+0xe8>
 800335c:	68bb      	ldr	r3, [r7, #8]
 800335e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003362:	fb02 f303 	mul.w	r3, r2, r3
 8003366:	4a69      	ldr	r2, [pc, #420]	; (800350c <HAL_I2C_Init+0x284>)
 8003368:	fba2 2303 	umull	r2, r3, r2, r3
 800336c:	099b      	lsrs	r3, r3, #6
 800336e:	3301      	adds	r3, #1
 8003370:	687a      	ldr	r2, [r7, #4]
 8003372:	6812      	ldr	r2, [r2, #0]
 8003374:	430b      	orrs	r3, r1
 8003376:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	681b      	ldr	r3, [r3, #0]
 800337c:	69db      	ldr	r3, [r3, #28]
 800337e:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003382:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	685b      	ldr	r3, [r3, #4]
 800338a:	495c      	ldr	r1, [pc, #368]	; (80034fc <HAL_I2C_Init+0x274>)
 800338c:	428b      	cmp	r3, r1
 800338e:	d819      	bhi.n	80033c4 <HAL_I2C_Init+0x13c>
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	1e59      	subs	r1, r3, #1
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	005b      	lsls	r3, r3, #1
 800339a:	fbb1 f3f3 	udiv	r3, r1, r3
 800339e:	1c59      	adds	r1, r3, #1
 80033a0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033a4:	400b      	ands	r3, r1
 80033a6:	2b00      	cmp	r3, #0
 80033a8:	d00a      	beq.n	80033c0 <HAL_I2C_Init+0x138>
 80033aa:	68fb      	ldr	r3, [r7, #12]
 80033ac:	1e59      	subs	r1, r3, #1
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	685b      	ldr	r3, [r3, #4]
 80033b2:	005b      	lsls	r3, r3, #1
 80033b4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033b8:	3301      	adds	r3, #1
 80033ba:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033be:	e051      	b.n	8003464 <HAL_I2C_Init+0x1dc>
 80033c0:	2304      	movs	r3, #4
 80033c2:	e04f      	b.n	8003464 <HAL_I2C_Init+0x1dc>
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d111      	bne.n	80033f0 <HAL_I2C_Init+0x168>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	1e58      	subs	r0, r3, #1
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	6859      	ldr	r1, [r3, #4]
 80033d4:	460b      	mov	r3, r1
 80033d6:	005b      	lsls	r3, r3, #1
 80033d8:	440b      	add	r3, r1
 80033da:	fbb0 f3f3 	udiv	r3, r0, r3
 80033de:	3301      	adds	r3, #1
 80033e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033e4:	2b00      	cmp	r3, #0
 80033e6:	bf0c      	ite	eq
 80033e8:	2301      	moveq	r3, #1
 80033ea:	2300      	movne	r3, #0
 80033ec:	b2db      	uxtb	r3, r3
 80033ee:	e012      	b.n	8003416 <HAL_I2C_Init+0x18e>
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	1e58      	subs	r0, r3, #1
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	6859      	ldr	r1, [r3, #4]
 80033f8:	460b      	mov	r3, r1
 80033fa:	009b      	lsls	r3, r3, #2
 80033fc:	440b      	add	r3, r1
 80033fe:	0099      	lsls	r1, r3, #2
 8003400:	440b      	add	r3, r1
 8003402:	fbb0 f3f3 	udiv	r3, r0, r3
 8003406:	3301      	adds	r3, #1
 8003408:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800340c:	2b00      	cmp	r3, #0
 800340e:	bf0c      	ite	eq
 8003410:	2301      	moveq	r3, #1
 8003412:	2300      	movne	r3, #0
 8003414:	b2db      	uxtb	r3, r3
 8003416:	2b00      	cmp	r3, #0
 8003418:	d001      	beq.n	800341e <HAL_I2C_Init+0x196>
 800341a:	2301      	movs	r3, #1
 800341c:	e022      	b.n	8003464 <HAL_I2C_Init+0x1dc>
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d10e      	bne.n	8003444 <HAL_I2C_Init+0x1bc>
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	1e58      	subs	r0, r3, #1
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	6859      	ldr	r1, [r3, #4]
 800342e:	460b      	mov	r3, r1
 8003430:	005b      	lsls	r3, r3, #1
 8003432:	440b      	add	r3, r1
 8003434:	fbb0 f3f3 	udiv	r3, r0, r3
 8003438:	3301      	adds	r3, #1
 800343a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003442:	e00f      	b.n	8003464 <HAL_I2C_Init+0x1dc>
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	1e58      	subs	r0, r3, #1
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	6859      	ldr	r1, [r3, #4]
 800344c:	460b      	mov	r3, r1
 800344e:	009b      	lsls	r3, r3, #2
 8003450:	440b      	add	r3, r1
 8003452:	0099      	lsls	r1, r3, #2
 8003454:	440b      	add	r3, r1
 8003456:	fbb0 f3f3 	udiv	r3, r0, r3
 800345a:	3301      	adds	r3, #1
 800345c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003460:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003464:	6879      	ldr	r1, [r7, #4]
 8003466:	6809      	ldr	r1, [r1, #0]
 8003468:	4313      	orrs	r3, r2
 800346a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	681b      	ldr	r3, [r3, #0]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	69da      	ldr	r2, [r3, #28]
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	6a1b      	ldr	r3, [r3, #32]
 800347e:	431a      	orrs	r2, r3
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	430a      	orrs	r2, r1
 8003486:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	689b      	ldr	r3, [r3, #8]
 800348e:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003492:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	6911      	ldr	r1, [r2, #16]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	68d2      	ldr	r2, [r2, #12]
 800349e:	4311      	orrs	r1, r2
 80034a0:	687a      	ldr	r2, [r7, #4]
 80034a2:	6812      	ldr	r2, [r2, #0]
 80034a4:	430b      	orrs	r3, r1
 80034a6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	68db      	ldr	r3, [r3, #12]
 80034ae:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	695a      	ldr	r2, [r3, #20]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	699b      	ldr	r3, [r3, #24]
 80034ba:	431a      	orrs	r2, r3
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	430a      	orrs	r2, r1
 80034c2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	681b      	ldr	r3, [r3, #0]
 80034c8:	681a      	ldr	r2, [r3, #0]
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	f042 0201 	orr.w	r2, r2, #1
 80034d2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2200      	movs	r2, #0
 80034d8:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	2220      	movs	r2, #32
 80034de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	2200      	movs	r2, #0
 80034e6:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	2200      	movs	r2, #0
 80034ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80034f0:	2300      	movs	r3, #0
}
 80034f2:	4618      	mov	r0, r3
 80034f4:	3710      	adds	r7, #16
 80034f6:	46bd      	mov	sp, r7
 80034f8:	bd80      	pop	{r7, pc}
 80034fa:	bf00      	nop
 80034fc:	000186a0 	.word	0x000186a0
 8003500:	001e847f 	.word	0x001e847f
 8003504:	003d08ff 	.word	0x003d08ff
 8003508:	431bde83 	.word	0x431bde83
 800350c:	10624dd3 	.word	0x10624dd3

08003510 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003510:	b580      	push	{r7, lr}
 8003512:	b088      	sub	sp, #32
 8003514:	af02      	add	r7, sp, #8
 8003516:	60f8      	str	r0, [r7, #12]
 8003518:	607a      	str	r2, [r7, #4]
 800351a:	461a      	mov	r2, r3
 800351c:	460b      	mov	r3, r1
 800351e:	817b      	strh	r3, [r7, #10]
 8003520:	4613      	mov	r3, r2
 8003522:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003524:	f7ff f80a 	bl	800253c <HAL_GetTick>
 8003528:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003530:	b2db      	uxtb	r3, r3
 8003532:	2b20      	cmp	r3, #32
 8003534:	f040 80e0 	bne.w	80036f8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003538:	697b      	ldr	r3, [r7, #20]
 800353a:	9300      	str	r3, [sp, #0]
 800353c:	2319      	movs	r3, #25
 800353e:	2201      	movs	r2, #1
 8003540:	4970      	ldr	r1, [pc, #448]	; (8003704 <HAL_I2C_Master_Transmit+0x1f4>)
 8003542:	68f8      	ldr	r0, [r7, #12]
 8003544:	f000 f964 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003548:	4603      	mov	r3, r0
 800354a:	2b00      	cmp	r3, #0
 800354c:	d001      	beq.n	8003552 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800354e:	2302      	movs	r3, #2
 8003550:	e0d3      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003558:	2b01      	cmp	r3, #1
 800355a:	d101      	bne.n	8003560 <HAL_I2C_Master_Transmit+0x50>
 800355c:	2302      	movs	r3, #2
 800355e:	e0cc      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
 8003560:	68fb      	ldr	r3, [r7, #12]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	681b      	ldr	r3, [r3, #0]
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0301 	and.w	r3, r3, #1
 8003572:	2b01      	cmp	r3, #1
 8003574:	d007      	beq.n	8003586 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	681a      	ldr	r2, [r3, #0]
 800357c:	68fb      	ldr	r3, [r7, #12]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	f042 0201 	orr.w	r2, r2, #1
 8003584:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	681b      	ldr	r3, [r3, #0]
 800358a:	681a      	ldr	r2, [r3, #0]
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003594:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	2221      	movs	r2, #33	; 0x21
 800359a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800359e:	68fb      	ldr	r3, [r7, #12]
 80035a0:	2210      	movs	r2, #16
 80035a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	2200      	movs	r2, #0
 80035aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	687a      	ldr	r2, [r7, #4]
 80035b0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	893a      	ldrh	r2, [r7, #8]
 80035b6:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80035bc:	b29a      	uxth	r2, r3
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	4a50      	ldr	r2, [pc, #320]	; (8003708 <HAL_I2C_Master_Transmit+0x1f8>)
 80035c6:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035c8:	8979      	ldrh	r1, [r7, #10]
 80035ca:	697b      	ldr	r3, [r7, #20]
 80035cc:	6a3a      	ldr	r2, [r7, #32]
 80035ce:	68f8      	ldr	r0, [r7, #12]
 80035d0:	f000 f89c 	bl	800370c <I2C_MasterRequestWrite>
 80035d4:	4603      	mov	r3, r0
 80035d6:	2b00      	cmp	r3, #0
 80035d8:	d001      	beq.n	80035de <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80035da:	2301      	movs	r3, #1
 80035dc:	e08d      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035de:	2300      	movs	r3, #0
 80035e0:	613b      	str	r3, [r7, #16]
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	695b      	ldr	r3, [r3, #20]
 80035e8:	613b      	str	r3, [r7, #16]
 80035ea:	68fb      	ldr	r3, [r7, #12]
 80035ec:	681b      	ldr	r3, [r3, #0]
 80035ee:	699b      	ldr	r3, [r3, #24]
 80035f0:	613b      	str	r3, [r7, #16]
 80035f2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80035f4:	e066      	b.n	80036c4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035f6:	697a      	ldr	r2, [r7, #20]
 80035f8:	6a39      	ldr	r1, [r7, #32]
 80035fa:	68f8      	ldr	r0, [r7, #12]
 80035fc:	f000 f9de 	bl	80039bc <I2C_WaitOnTXEFlagUntilTimeout>
 8003600:	4603      	mov	r3, r0
 8003602:	2b00      	cmp	r3, #0
 8003604:	d00d      	beq.n	8003622 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003606:	68fb      	ldr	r3, [r7, #12]
 8003608:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800360a:	2b04      	cmp	r3, #4
 800360c:	d107      	bne.n	800361e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800360e:	68fb      	ldr	r3, [r7, #12]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	681a      	ldr	r2, [r3, #0]
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800361c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e06b      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003626:	781a      	ldrb	r2, [r3, #0]
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800363c:	b29b      	uxth	r3, r3
 800363e:	3b01      	subs	r3, #1
 8003640:	b29a      	uxth	r2, r3
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800364a:	3b01      	subs	r3, #1
 800364c:	b29a      	uxth	r2, r3
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b04      	cmp	r3, #4
 800365e:	d11b      	bne.n	8003698 <HAL_I2C_Master_Transmit+0x188>
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003664:	2b00      	cmp	r3, #0
 8003666:	d017      	beq.n	8003698 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800366c:	781a      	ldrb	r2, [r3, #0]
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003678:	1c5a      	adds	r2, r3, #1
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003682:	b29b      	uxth	r3, r3
 8003684:	3b01      	subs	r3, #1
 8003686:	b29a      	uxth	r2, r3
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 800368c:	68fb      	ldr	r3, [r7, #12]
 800368e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003690:	3b01      	subs	r3, #1
 8003692:	b29a      	uxth	r2, r3
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003698:	697a      	ldr	r2, [r7, #20]
 800369a:	6a39      	ldr	r1, [r7, #32]
 800369c:	68f8      	ldr	r0, [r7, #12]
 800369e:	f000 f9ce 	bl	8003a3e <I2C_WaitOnBTFFlagUntilTimeout>
 80036a2:	4603      	mov	r3, r0
 80036a4:	2b00      	cmp	r3, #0
 80036a6:	d00d      	beq.n	80036c4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80036a8:	68fb      	ldr	r3, [r7, #12]
 80036aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036ac:	2b04      	cmp	r3, #4
 80036ae:	d107      	bne.n	80036c0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	681a      	ldr	r2, [r3, #0]
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036be:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80036c0:	2301      	movs	r3, #1
 80036c2:	e01a      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80036c4:	68fb      	ldr	r3, [r7, #12]
 80036c6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d194      	bne.n	80035f6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	681a      	ldr	r2, [r3, #0]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80036da:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	2220      	movs	r2, #32
 80036e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	2200      	movs	r2, #0
 80036e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	2200      	movs	r2, #0
 80036f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80036f4:	2300      	movs	r3, #0
 80036f6:	e000      	b.n	80036fa <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80036f8:	2302      	movs	r3, #2
  }
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3718      	adds	r7, #24
 80036fe:	46bd      	mov	sp, r7
 8003700:	bd80      	pop	{r7, pc}
 8003702:	bf00      	nop
 8003704:	00100002 	.word	0x00100002
 8003708:	ffff0000 	.word	0xffff0000

0800370c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800370c:	b580      	push	{r7, lr}
 800370e:	b088      	sub	sp, #32
 8003710:	af02      	add	r7, sp, #8
 8003712:	60f8      	str	r0, [r7, #12]
 8003714:	607a      	str	r2, [r7, #4]
 8003716:	603b      	str	r3, [r7, #0]
 8003718:	460b      	mov	r3, r1
 800371a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003720:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003722:	697b      	ldr	r3, [r7, #20]
 8003724:	2b08      	cmp	r3, #8
 8003726:	d006      	beq.n	8003736 <I2C_MasterRequestWrite+0x2a>
 8003728:	697b      	ldr	r3, [r7, #20]
 800372a:	2b01      	cmp	r3, #1
 800372c:	d003      	beq.n	8003736 <I2C_MasterRequestWrite+0x2a>
 800372e:	697b      	ldr	r3, [r7, #20]
 8003730:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003734:	d108      	bne.n	8003748 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	681a      	ldr	r2, [r3, #0]
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003744:	601a      	str	r2, [r3, #0]
 8003746:	e00b      	b.n	8003760 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374c:	2b12      	cmp	r3, #18
 800374e:	d107      	bne.n	8003760 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003750:	68fb      	ldr	r3, [r7, #12]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	681a      	ldr	r2, [r3, #0]
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	681b      	ldr	r3, [r3, #0]
 800375a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800375e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	9300      	str	r3, [sp, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	2200      	movs	r2, #0
 8003768:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800376c:	68f8      	ldr	r0, [r7, #12]
 800376e:	f000 f84f 	bl	8003810 <I2C_WaitOnFlagUntilTimeout>
 8003772:	4603      	mov	r3, r0
 8003774:	2b00      	cmp	r3, #0
 8003776:	d00d      	beq.n	8003794 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003782:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003786:	d103      	bne.n	8003790 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800378e:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e035      	b.n	8003800 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	691b      	ldr	r3, [r3, #16]
 8003798:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800379c:	d108      	bne.n	80037b0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800379e:	897b      	ldrh	r3, [r7, #10]
 80037a0:	b2db      	uxtb	r3, r3
 80037a2:	461a      	mov	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	681b      	ldr	r3, [r3, #0]
 80037a8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80037ac:	611a      	str	r2, [r3, #16]
 80037ae:	e01b      	b.n	80037e8 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80037b0:	897b      	ldrh	r3, [r7, #10]
 80037b2:	11db      	asrs	r3, r3, #7
 80037b4:	b2db      	uxtb	r3, r3
 80037b6:	f003 0306 	and.w	r3, r3, #6
 80037ba:	b2db      	uxtb	r3, r3
 80037bc:	f063 030f 	orn	r3, r3, #15
 80037c0:	b2da      	uxtb	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80037c8:	683b      	ldr	r3, [r7, #0]
 80037ca:	687a      	ldr	r2, [r7, #4]
 80037cc:	490e      	ldr	r1, [pc, #56]	; (8003808 <I2C_MasterRequestWrite+0xfc>)
 80037ce:	68f8      	ldr	r0, [r7, #12]
 80037d0:	f000 f875 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037d4:	4603      	mov	r3, r0
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d001      	beq.n	80037de <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80037da:	2301      	movs	r3, #1
 80037dc:	e010      	b.n	8003800 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80037de:	897b      	ldrh	r3, [r7, #10]
 80037e0:	b2da      	uxtb	r2, r3
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	687a      	ldr	r2, [r7, #4]
 80037ec:	4907      	ldr	r1, [pc, #28]	; (800380c <I2C_MasterRequestWrite+0x100>)
 80037ee:	68f8      	ldr	r0, [r7, #12]
 80037f0:	f000 f865 	bl	80038be <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037f4:	4603      	mov	r3, r0
 80037f6:	2b00      	cmp	r3, #0
 80037f8:	d001      	beq.n	80037fe <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80037fa:	2301      	movs	r3, #1
 80037fc:	e000      	b.n	8003800 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80037fe:	2300      	movs	r3, #0
}
 8003800:	4618      	mov	r0, r3
 8003802:	3718      	adds	r7, #24
 8003804:	46bd      	mov	sp, r7
 8003806:	bd80      	pop	{r7, pc}
 8003808:	00010008 	.word	0x00010008
 800380c:	00010002 	.word	0x00010002

08003810 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b084      	sub	sp, #16
 8003814:	af00      	add	r7, sp, #0
 8003816:	60f8      	str	r0, [r7, #12]
 8003818:	60b9      	str	r1, [r7, #8]
 800381a:	603b      	str	r3, [r7, #0]
 800381c:	4613      	mov	r3, r2
 800381e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003820:	e025      	b.n	800386e <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003828:	d021      	beq.n	800386e <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800382a:	f7fe fe87 	bl	800253c <HAL_GetTick>
 800382e:	4602      	mov	r2, r0
 8003830:	69bb      	ldr	r3, [r7, #24]
 8003832:	1ad3      	subs	r3, r2, r3
 8003834:	683a      	ldr	r2, [r7, #0]
 8003836:	429a      	cmp	r2, r3
 8003838:	d302      	bcc.n	8003840 <I2C_WaitOnFlagUntilTimeout+0x30>
 800383a:	683b      	ldr	r3, [r7, #0]
 800383c:	2b00      	cmp	r3, #0
 800383e:	d116      	bne.n	800386e <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003840:	68fb      	ldr	r3, [r7, #12]
 8003842:	2200      	movs	r2, #0
 8003844:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2220      	movs	r2, #32
 800384a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 800384e:	68fb      	ldr	r3, [r7, #12]
 8003850:	2200      	movs	r2, #0
 8003852:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003856:	68fb      	ldr	r3, [r7, #12]
 8003858:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800385a:	f043 0220 	orr.w	r2, r3, #32
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003862:	68fb      	ldr	r3, [r7, #12]
 8003864:	2200      	movs	r2, #0
 8003866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800386a:	2301      	movs	r3, #1
 800386c:	e023      	b.n	80038b6 <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 800386e:	68bb      	ldr	r3, [r7, #8]
 8003870:	0c1b      	lsrs	r3, r3, #16
 8003872:	b2db      	uxtb	r3, r3
 8003874:	2b01      	cmp	r3, #1
 8003876:	d10d      	bne.n	8003894 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003878:	68fb      	ldr	r3, [r7, #12]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	695b      	ldr	r3, [r3, #20]
 800387e:	43da      	mvns	r2, r3
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	4013      	ands	r3, r2
 8003884:	b29b      	uxth	r3, r3
 8003886:	2b00      	cmp	r3, #0
 8003888:	bf0c      	ite	eq
 800388a:	2301      	moveq	r3, #1
 800388c:	2300      	movne	r3, #0
 800388e:	b2db      	uxtb	r3, r3
 8003890:	461a      	mov	r2, r3
 8003892:	e00c      	b.n	80038ae <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	681b      	ldr	r3, [r3, #0]
 8003898:	699b      	ldr	r3, [r3, #24]
 800389a:	43da      	mvns	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	4013      	ands	r3, r2
 80038a0:	b29b      	uxth	r3, r3
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	bf0c      	ite	eq
 80038a6:	2301      	moveq	r3, #1
 80038a8:	2300      	movne	r3, #0
 80038aa:	b2db      	uxtb	r3, r3
 80038ac:	461a      	mov	r2, r3
 80038ae:	79fb      	ldrb	r3, [r7, #7]
 80038b0:	429a      	cmp	r2, r3
 80038b2:	d0b6      	beq.n	8003822 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80038b4:	2300      	movs	r3, #0
}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3710      	adds	r7, #16
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}

080038be <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80038be:	b580      	push	{r7, lr}
 80038c0:	b084      	sub	sp, #16
 80038c2:	af00      	add	r7, sp, #0
 80038c4:	60f8      	str	r0, [r7, #12]
 80038c6:	60b9      	str	r1, [r7, #8]
 80038c8:	607a      	str	r2, [r7, #4]
 80038ca:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80038cc:	e051      	b.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695b      	ldr	r3, [r3, #20]
 80038d4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80038d8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80038dc:	d123      	bne.n	8003926 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80038ec:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80038ee:	68fb      	ldr	r3, [r7, #12]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80038f6:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80038f8:	68fb      	ldr	r3, [r7, #12]
 80038fa:	2200      	movs	r2, #0
 80038fc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	2220      	movs	r2, #32
 8003902:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003912:	f043 0204 	orr.w	r2, r3, #4
 8003916:	68fb      	ldr	r3, [r7, #12]
 8003918:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	2200      	movs	r2, #0
 800391e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e046      	b.n	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800392c:	d021      	beq.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800392e:	f7fe fe05 	bl	800253c <HAL_GetTick>
 8003932:	4602      	mov	r2, r0
 8003934:	683b      	ldr	r3, [r7, #0]
 8003936:	1ad3      	subs	r3, r2, r3
 8003938:	687a      	ldr	r2, [r7, #4]
 800393a:	429a      	cmp	r2, r3
 800393c:	d302      	bcc.n	8003944 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	2b00      	cmp	r3, #0
 8003942:	d116      	bne.n	8003972 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003944:	68fb      	ldr	r3, [r7, #12]
 8003946:	2200      	movs	r2, #0
 8003948:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	2220      	movs	r2, #32
 800394e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	2200      	movs	r2, #0
 8003956:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800395e:	f043 0220 	orr.w	r2, r3, #32
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	2200      	movs	r2, #0
 800396a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800396e:	2301      	movs	r3, #1
 8003970:	e020      	b.n	80039b4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003972:	68bb      	ldr	r3, [r7, #8]
 8003974:	0c1b      	lsrs	r3, r3, #16
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b01      	cmp	r3, #1
 800397a:	d10c      	bne.n	8003996 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	695b      	ldr	r3, [r3, #20]
 8003982:	43da      	mvns	r2, r3
 8003984:	68bb      	ldr	r3, [r7, #8]
 8003986:	4013      	ands	r3, r2
 8003988:	b29b      	uxth	r3, r3
 800398a:	2b00      	cmp	r3, #0
 800398c:	bf14      	ite	ne
 800398e:	2301      	movne	r3, #1
 8003990:	2300      	moveq	r3, #0
 8003992:	b2db      	uxtb	r3, r3
 8003994:	e00b      	b.n	80039ae <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	699b      	ldr	r3, [r3, #24]
 800399c:	43da      	mvns	r2, r3
 800399e:	68bb      	ldr	r3, [r7, #8]
 80039a0:	4013      	ands	r3, r2
 80039a2:	b29b      	uxth	r3, r3
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	bf14      	ite	ne
 80039a8:	2301      	movne	r3, #1
 80039aa:	2300      	moveq	r3, #0
 80039ac:	b2db      	uxtb	r3, r3
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d18d      	bne.n	80038ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80039b2:	2300      	movs	r3, #0
}
 80039b4:	4618      	mov	r0, r3
 80039b6:	3710      	adds	r7, #16
 80039b8:	46bd      	mov	sp, r7
 80039ba:	bd80      	pop	{r7, pc}

080039bc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80039bc:	b580      	push	{r7, lr}
 80039be:	b084      	sub	sp, #16
 80039c0:	af00      	add	r7, sp, #0
 80039c2:	60f8      	str	r0, [r7, #12]
 80039c4:	60b9      	str	r1, [r7, #8]
 80039c6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80039c8:	e02d      	b.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80039ca:	68f8      	ldr	r0, [r7, #12]
 80039cc:	f000 f878 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80039d6:	2301      	movs	r3, #1
 80039d8:	e02d      	b.n	8003a36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80039da:	68bb      	ldr	r3, [r7, #8]
 80039dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80039e0:	d021      	beq.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80039e2:	f7fe fdab 	bl	800253c <HAL_GetTick>
 80039e6:	4602      	mov	r2, r0
 80039e8:	687b      	ldr	r3, [r7, #4]
 80039ea:	1ad3      	subs	r3, r2, r3
 80039ec:	68ba      	ldr	r2, [r7, #8]
 80039ee:	429a      	cmp	r2, r3
 80039f0:	d302      	bcc.n	80039f8 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80039f2:	68bb      	ldr	r3, [r7, #8]
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d116      	bne.n	8003a26 <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	2200      	movs	r2, #0
 80039fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	2220      	movs	r2, #32
 8003a02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	2200      	movs	r2, #0
 8003a0a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a0e:	68fb      	ldr	r3, [r7, #12]
 8003a10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a12:	f043 0220 	orr.w	r2, r3, #32
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	2200      	movs	r2, #0
 8003a1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003a22:	2301      	movs	r3, #1
 8003a24:	e007      	b.n	8003a36 <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	695b      	ldr	r3, [r3, #20]
 8003a2c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003a30:	2b80      	cmp	r3, #128	; 0x80
 8003a32:	d1ca      	bne.n	80039ca <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003a34:	2300      	movs	r3, #0
}
 8003a36:	4618      	mov	r0, r3
 8003a38:	3710      	adds	r7, #16
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	bd80      	pop	{r7, pc}

08003a3e <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003a3e:	b580      	push	{r7, lr}
 8003a40:	b084      	sub	sp, #16
 8003a42:	af00      	add	r7, sp, #0
 8003a44:	60f8      	str	r0, [r7, #12]
 8003a46:	60b9      	str	r1, [r7, #8]
 8003a48:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003a4a:	e02d      	b.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003a4c:	68f8      	ldr	r0, [r7, #12]
 8003a4e:	f000 f837 	bl	8003ac0 <I2C_IsAcknowledgeFailed>
 8003a52:	4603      	mov	r3, r0
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d001      	beq.n	8003a5c <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e02d      	b.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003a5c:	68bb      	ldr	r3, [r7, #8]
 8003a5e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003a62:	d021      	beq.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003a64:	f7fe fd6a 	bl	800253c <HAL_GetTick>
 8003a68:	4602      	mov	r2, r0
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	1ad3      	subs	r3, r2, r3
 8003a6e:	68ba      	ldr	r2, [r7, #8]
 8003a70:	429a      	cmp	r2, r3
 8003a72:	d302      	bcc.n	8003a7a <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003a74:	68bb      	ldr	r3, [r7, #8]
 8003a76:	2b00      	cmp	r3, #0
 8003a78:	d116      	bne.n	8003aa8 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	2220      	movs	r2, #32
 8003a84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	2200      	movs	r2, #0
 8003a8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a94:	f043 0220 	orr.w	r2, r3, #32
 8003a98:	68fb      	ldr	r3, [r7, #12]
 8003a9a:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003aa4:	2301      	movs	r3, #1
 8003aa6:	e007      	b.n	8003ab8 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	695b      	ldr	r3, [r3, #20]
 8003aae:	f003 0304 	and.w	r3, r3, #4
 8003ab2:	2b04      	cmp	r3, #4
 8003ab4:	d1ca      	bne.n	8003a4c <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ab6:	2300      	movs	r3, #0
}
 8003ab8:	4618      	mov	r0, r3
 8003aba:	3710      	adds	r7, #16
 8003abc:	46bd      	mov	sp, r7
 8003abe:	bd80      	pop	{r7, pc}

08003ac0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ac0:	b480      	push	{r7}
 8003ac2:	b083      	sub	sp, #12
 8003ac4:	af00      	add	r7, sp, #0
 8003ac6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	695b      	ldr	r3, [r3, #20]
 8003ace:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ad2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003ad6:	d11b      	bne.n	8003b10 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003ae0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	2200      	movs	r2, #0
 8003ae6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	2220      	movs	r2, #32
 8003aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	2200      	movs	r2, #0
 8003af4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afc:	f043 0204 	orr.w	r2, r3, #4
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003b0c:	2301      	movs	r3, #1
 8003b0e:	e000      	b.n	8003b12 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003b10:	2300      	movs	r3, #0
}
 8003b12:	4618      	mov	r0, r3
 8003b14:	370c      	adds	r7, #12
 8003b16:	46bd      	mov	sp, r7
 8003b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1c:	4770      	bx	lr
	...

08003b20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	b086      	sub	sp, #24
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d101      	bne.n	8003b32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e267      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d075      	beq.n	8003c2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b3e:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b40:	689b      	ldr	r3, [r3, #8]
 8003b42:	f003 030c 	and.w	r3, r3, #12
 8003b46:	2b04      	cmp	r3, #4
 8003b48:	d00c      	beq.n	8003b64 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b4a:	4b85      	ldr	r3, [pc, #532]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003b52:	2b08      	cmp	r3, #8
 8003b54:	d112      	bne.n	8003b7c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003b56:	4b82      	ldr	r3, [pc, #520]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b58:	685b      	ldr	r3, [r3, #4]
 8003b5a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003b5e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003b62:	d10b      	bne.n	8003b7c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003b64:	4b7e      	ldr	r3, [pc, #504]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b6c:	2b00      	cmp	r3, #0
 8003b6e:	d05b      	beq.n	8003c28 <HAL_RCC_OscConfig+0x108>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	685b      	ldr	r3, [r3, #4]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d157      	bne.n	8003c28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e242      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	685b      	ldr	r3, [r3, #4]
 8003b80:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003b84:	d106      	bne.n	8003b94 <HAL_RCC_OscConfig+0x74>
 8003b86:	4b76      	ldr	r3, [pc, #472]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a75      	ldr	r2, [pc, #468]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003b8c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003b90:	6013      	str	r3, [r2, #0]
 8003b92:	e01d      	b.n	8003bd0 <HAL_RCC_OscConfig+0xb0>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	685b      	ldr	r3, [r3, #4]
 8003b98:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003b9c:	d10c      	bne.n	8003bb8 <HAL_RCC_OscConfig+0x98>
 8003b9e:	4b70      	ldr	r3, [pc, #448]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a6f      	ldr	r2, [pc, #444]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ba4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003ba8:	6013      	str	r3, [r2, #0]
 8003baa:	4b6d      	ldr	r3, [pc, #436]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	4a6c      	ldr	r2, [pc, #432]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003bb4:	6013      	str	r3, [r2, #0]
 8003bb6:	e00b      	b.n	8003bd0 <HAL_RCC_OscConfig+0xb0>
 8003bb8:	4b69      	ldr	r3, [pc, #420]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a68      	ldr	r2, [pc, #416]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bbe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003bc2:	6013      	str	r3, [r2, #0]
 8003bc4:	4b66      	ldr	r3, [pc, #408]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a65      	ldr	r2, [pc, #404]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bca:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003bce:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	685b      	ldr	r3, [r3, #4]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d013      	beq.n	8003c00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003bd8:	f7fe fcb0 	bl	800253c <HAL_GetTick>
 8003bdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bde:	e008      	b.n	8003bf2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003be0:	f7fe fcac 	bl	800253c <HAL_GetTick>
 8003be4:	4602      	mov	r2, r0
 8003be6:	693b      	ldr	r3, [r7, #16]
 8003be8:	1ad3      	subs	r3, r2, r3
 8003bea:	2b64      	cmp	r3, #100	; 0x64
 8003bec:	d901      	bls.n	8003bf2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003bee:	2303      	movs	r3, #3
 8003bf0:	e207      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003bf2:	4b5b      	ldr	r3, [pc, #364]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003bfa:	2b00      	cmp	r3, #0
 8003bfc:	d0f0      	beq.n	8003be0 <HAL_RCC_OscConfig+0xc0>
 8003bfe:	e014      	b.n	8003c2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003c00:	f7fe fc9c 	bl	800253c <HAL_GetTick>
 8003c04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c06:	e008      	b.n	8003c1a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003c08:	f7fe fc98 	bl	800253c <HAL_GetTick>
 8003c0c:	4602      	mov	r2, r0
 8003c0e:	693b      	ldr	r3, [r7, #16]
 8003c10:	1ad3      	subs	r3, r2, r3
 8003c12:	2b64      	cmp	r3, #100	; 0x64
 8003c14:	d901      	bls.n	8003c1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003c16:	2303      	movs	r3, #3
 8003c18:	e1f3      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003c1a:	4b51      	ldr	r3, [pc, #324]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c1c:	681b      	ldr	r3, [r3, #0]
 8003c1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d1f0      	bne.n	8003c08 <HAL_RCC_OscConfig+0xe8>
 8003c26:	e000      	b.n	8003c2a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003c28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d063      	beq.n	8003cfe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c36:	4b4a      	ldr	r3, [pc, #296]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c38:	689b      	ldr	r3, [r3, #8]
 8003c3a:	f003 030c 	and.w	r3, r3, #12
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d00b      	beq.n	8003c5a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c42:	4b47      	ldr	r3, [pc, #284]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c44:	689b      	ldr	r3, [r3, #8]
 8003c46:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003c4a:	2b08      	cmp	r3, #8
 8003c4c:	d11c      	bne.n	8003c88 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003c4e:	4b44      	ldr	r3, [pc, #272]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c50:	685b      	ldr	r3, [r3, #4]
 8003c52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003c56:	2b00      	cmp	r3, #0
 8003c58:	d116      	bne.n	8003c88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c5a:	4b41      	ldr	r3, [pc, #260]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d005      	beq.n	8003c72 <HAL_RCC_OscConfig+0x152>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68db      	ldr	r3, [r3, #12]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d001      	beq.n	8003c72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003c6e:	2301      	movs	r3, #1
 8003c70:	e1c7      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003c72:	4b3b      	ldr	r3, [pc, #236]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	691b      	ldr	r3, [r3, #16]
 8003c7e:	00db      	lsls	r3, r3, #3
 8003c80:	4937      	ldr	r1, [pc, #220]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003c82:	4313      	orrs	r3, r2
 8003c84:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003c86:	e03a      	b.n	8003cfe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	68db      	ldr	r3, [r3, #12]
 8003c8c:	2b00      	cmp	r3, #0
 8003c8e:	d020      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003c90:	4b34      	ldr	r3, [pc, #208]	; (8003d64 <HAL_RCC_OscConfig+0x244>)
 8003c92:	2201      	movs	r2, #1
 8003c94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003c96:	f7fe fc51 	bl	800253c <HAL_GetTick>
 8003c9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003c9c:	e008      	b.n	8003cb0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003c9e:	f7fe fc4d 	bl	800253c <HAL_GetTick>
 8003ca2:	4602      	mov	r2, r0
 8003ca4:	693b      	ldr	r3, [r7, #16]
 8003ca6:	1ad3      	subs	r3, r2, r3
 8003ca8:	2b02      	cmp	r3, #2
 8003caa:	d901      	bls.n	8003cb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003cac:	2303      	movs	r3, #3
 8003cae:	e1a8      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003cb0:	4b2b      	ldr	r3, [pc, #172]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f003 0302 	and.w	r3, r3, #2
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d0f0      	beq.n	8003c9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003cbc:	4b28      	ldr	r3, [pc, #160]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	691b      	ldr	r3, [r3, #16]
 8003cc8:	00db      	lsls	r3, r3, #3
 8003cca:	4925      	ldr	r1, [pc, #148]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003ccc:	4313      	orrs	r3, r2
 8003cce:	600b      	str	r3, [r1, #0]
 8003cd0:	e015      	b.n	8003cfe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003cd2:	4b24      	ldr	r3, [pc, #144]	; (8003d64 <HAL_RCC_OscConfig+0x244>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003cd8:	f7fe fc30 	bl	800253c <HAL_GetTick>
 8003cdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cde:	e008      	b.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003ce0:	f7fe fc2c 	bl	800253c <HAL_GetTick>
 8003ce4:	4602      	mov	r2, r0
 8003ce6:	693b      	ldr	r3, [r7, #16]
 8003ce8:	1ad3      	subs	r3, r2, r3
 8003cea:	2b02      	cmp	r3, #2
 8003cec:	d901      	bls.n	8003cf2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003cee:	2303      	movs	r3, #3
 8003cf0:	e187      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003cf2:	4b1b      	ldr	r3, [pc, #108]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f003 0302 	and.w	r3, r3, #2
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d1f0      	bne.n	8003ce0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f003 0308 	and.w	r3, r3, #8
 8003d06:	2b00      	cmp	r3, #0
 8003d08:	d036      	beq.n	8003d78 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	695b      	ldr	r3, [r3, #20]
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d016      	beq.n	8003d40 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003d12:	4b15      	ldr	r3, [pc, #84]	; (8003d68 <HAL_RCC_OscConfig+0x248>)
 8003d14:	2201      	movs	r2, #1
 8003d16:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003d18:	f7fe fc10 	bl	800253c <HAL_GetTick>
 8003d1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d1e:	e008      	b.n	8003d32 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d20:	f7fe fc0c 	bl	800253c <HAL_GetTick>
 8003d24:	4602      	mov	r2, r0
 8003d26:	693b      	ldr	r3, [r7, #16]
 8003d28:	1ad3      	subs	r3, r2, r3
 8003d2a:	2b02      	cmp	r3, #2
 8003d2c:	d901      	bls.n	8003d32 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003d2e:	2303      	movs	r3, #3
 8003d30:	e167      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003d32:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <HAL_RCC_OscConfig+0x240>)
 8003d34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d36:	f003 0302 	and.w	r3, r3, #2
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d0f0      	beq.n	8003d20 <HAL_RCC_OscConfig+0x200>
 8003d3e:	e01b      	b.n	8003d78 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003d40:	4b09      	ldr	r3, [pc, #36]	; (8003d68 <HAL_RCC_OscConfig+0x248>)
 8003d42:	2200      	movs	r2, #0
 8003d44:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003d46:	f7fe fbf9 	bl	800253c <HAL_GetTick>
 8003d4a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d4c:	e00e      	b.n	8003d6c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003d4e:	f7fe fbf5 	bl	800253c <HAL_GetTick>
 8003d52:	4602      	mov	r2, r0
 8003d54:	693b      	ldr	r3, [r7, #16]
 8003d56:	1ad3      	subs	r3, r2, r3
 8003d58:	2b02      	cmp	r3, #2
 8003d5a:	d907      	bls.n	8003d6c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003d5c:	2303      	movs	r3, #3
 8003d5e:	e150      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
 8003d60:	40023800 	.word	0x40023800
 8003d64:	42470000 	.word	0x42470000
 8003d68:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003d6c:	4b88      	ldr	r3, [pc, #544]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d6e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003d70:	f003 0302 	and.w	r3, r3, #2
 8003d74:	2b00      	cmp	r3, #0
 8003d76:	d1ea      	bne.n	8003d4e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	f000 8097 	beq.w	8003eb4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003d86:	2300      	movs	r3, #0
 8003d88:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003d8a:	4b81      	ldr	r3, [pc, #516]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d10f      	bne.n	8003db6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003d96:	2300      	movs	r3, #0
 8003d98:	60bb      	str	r3, [r7, #8]
 8003d9a:	4b7d      	ldr	r3, [pc, #500]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003d9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d9e:	4a7c      	ldr	r2, [pc, #496]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003da0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003da4:	6413      	str	r3, [r2, #64]	; 0x40
 8003da6:	4b7a      	ldr	r3, [pc, #488]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003da8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003daa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003dae:	60bb      	str	r3, [r7, #8]
 8003db0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003db2:	2301      	movs	r3, #1
 8003db4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003db6:	4b77      	ldr	r3, [pc, #476]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d118      	bne.n	8003df4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003dc2:	4b74      	ldr	r3, [pc, #464]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	4a73      	ldr	r2, [pc, #460]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dc8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003dcc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003dce:	f7fe fbb5 	bl	800253c <HAL_GetTick>
 8003dd2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003dd4:	e008      	b.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003dd6:	f7fe fbb1 	bl	800253c <HAL_GetTick>
 8003dda:	4602      	mov	r2, r0
 8003ddc:	693b      	ldr	r3, [r7, #16]
 8003dde:	1ad3      	subs	r3, r2, r3
 8003de0:	2b02      	cmp	r3, #2
 8003de2:	d901      	bls.n	8003de8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003de4:	2303      	movs	r3, #3
 8003de6:	e10c      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003de8:	4b6a      	ldr	r3, [pc, #424]	; (8003f94 <HAL_RCC_OscConfig+0x474>)
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003df0:	2b00      	cmp	r3, #0
 8003df2:	d0f0      	beq.n	8003dd6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	689b      	ldr	r3, [r3, #8]
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	d106      	bne.n	8003e0a <HAL_RCC_OscConfig+0x2ea>
 8003dfc:	4b64      	ldr	r3, [pc, #400]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003dfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e00:	4a63      	ldr	r2, [pc, #396]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e02:	f043 0301 	orr.w	r3, r3, #1
 8003e06:	6713      	str	r3, [r2, #112]	; 0x70
 8003e08:	e01c      	b.n	8003e44 <HAL_RCC_OscConfig+0x324>
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	689b      	ldr	r3, [r3, #8]
 8003e0e:	2b05      	cmp	r3, #5
 8003e10:	d10c      	bne.n	8003e2c <HAL_RCC_OscConfig+0x30c>
 8003e12:	4b5f      	ldr	r3, [pc, #380]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e14:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e16:	4a5e      	ldr	r2, [pc, #376]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e18:	f043 0304 	orr.w	r3, r3, #4
 8003e1c:	6713      	str	r3, [r2, #112]	; 0x70
 8003e1e:	4b5c      	ldr	r3, [pc, #368]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e20:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e22:	4a5b      	ldr	r2, [pc, #364]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e24:	f043 0301 	orr.w	r3, r3, #1
 8003e28:	6713      	str	r3, [r2, #112]	; 0x70
 8003e2a:	e00b      	b.n	8003e44 <HAL_RCC_OscConfig+0x324>
 8003e2c:	4b58      	ldr	r3, [pc, #352]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e30:	4a57      	ldr	r2, [pc, #348]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e32:	f023 0301 	bic.w	r3, r3, #1
 8003e36:	6713      	str	r3, [r2, #112]	; 0x70
 8003e38:	4b55      	ldr	r3, [pc, #340]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e3c:	4a54      	ldr	r2, [pc, #336]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e3e:	f023 0304 	bic.w	r3, r3, #4
 8003e42:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	689b      	ldr	r3, [r3, #8]
 8003e48:	2b00      	cmp	r3, #0
 8003e4a:	d015      	beq.n	8003e78 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003e4c:	f7fe fb76 	bl	800253c <HAL_GetTick>
 8003e50:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e52:	e00a      	b.n	8003e6a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e54:	f7fe fb72 	bl	800253c <HAL_GetTick>
 8003e58:	4602      	mov	r2, r0
 8003e5a:	693b      	ldr	r3, [r7, #16]
 8003e5c:	1ad3      	subs	r3, r2, r3
 8003e5e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e62:	4293      	cmp	r3, r2
 8003e64:	d901      	bls.n	8003e6a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003e66:	2303      	movs	r3, #3
 8003e68:	e0cb      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003e6a:	4b49      	ldr	r3, [pc, #292]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e6e:	f003 0302 	and.w	r3, r3, #2
 8003e72:	2b00      	cmp	r3, #0
 8003e74:	d0ee      	beq.n	8003e54 <HAL_RCC_OscConfig+0x334>
 8003e76:	e014      	b.n	8003ea2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003e78:	f7fe fb60 	bl	800253c <HAL_GetTick>
 8003e7c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e7e:	e00a      	b.n	8003e96 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003e80:	f7fe fb5c 	bl	800253c <HAL_GetTick>
 8003e84:	4602      	mov	r2, r0
 8003e86:	693b      	ldr	r3, [r7, #16]
 8003e88:	1ad3      	subs	r3, r2, r3
 8003e8a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e0b5      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003e96:	4b3e      	ldr	r3, [pc, #248]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003e98:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003e9a:	f003 0302 	and.w	r3, r3, #2
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d1ee      	bne.n	8003e80 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003ea2:	7dfb      	ldrb	r3, [r7, #23]
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d105      	bne.n	8003eb4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003ea8:	4b39      	ldr	r3, [pc, #228]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003eaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eac:	4a38      	ldr	r2, [pc, #224]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003eae:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003eb2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	699b      	ldr	r3, [r3, #24]
 8003eb8:	2b00      	cmp	r3, #0
 8003eba:	f000 80a1 	beq.w	8004000 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8003ebe:	4b34      	ldr	r3, [pc, #208]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003ec0:	689b      	ldr	r3, [r3, #8]
 8003ec2:	f003 030c 	and.w	r3, r3, #12
 8003ec6:	2b08      	cmp	r3, #8
 8003ec8:	d05c      	beq.n	8003f84 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	699b      	ldr	r3, [r3, #24]
 8003ece:	2b02      	cmp	r3, #2
 8003ed0:	d141      	bne.n	8003f56 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003ed2:	4b31      	ldr	r3, [pc, #196]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003ed8:	f7fe fb30 	bl	800253c <HAL_GetTick>
 8003edc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ede:	e008      	b.n	8003ef2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003ee0:	f7fe fb2c 	bl	800253c <HAL_GetTick>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	693b      	ldr	r3, [r7, #16]
 8003ee8:	1ad3      	subs	r3, r2, r3
 8003eea:	2b02      	cmp	r3, #2
 8003eec:	d901      	bls.n	8003ef2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8003eee:	2303      	movs	r3, #3
 8003ef0:	e087      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003ef2:	4b27      	ldr	r3, [pc, #156]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003efa:	2b00      	cmp	r3, #0
 8003efc:	d1f0      	bne.n	8003ee0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	69da      	ldr	r2, [r3, #28]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	6a1b      	ldr	r3, [r3, #32]
 8003f06:	431a      	orrs	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f0c:	019b      	lsls	r3, r3, #6
 8003f0e:	431a      	orrs	r2, r3
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003f14:	085b      	lsrs	r3, r3, #1
 8003f16:	3b01      	subs	r3, #1
 8003f18:	041b      	lsls	r3, r3, #16
 8003f1a:	431a      	orrs	r2, r3
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f20:	061b      	lsls	r3, r3, #24
 8003f22:	491b      	ldr	r1, [pc, #108]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f24:	4313      	orrs	r3, r2
 8003f26:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003f28:	4b1b      	ldr	r3, [pc, #108]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003f2a:	2201      	movs	r2, #1
 8003f2c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f2e:	f7fe fb05 	bl	800253c <HAL_GetTick>
 8003f32:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f34:	e008      	b.n	8003f48 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f36:	f7fe fb01 	bl	800253c <HAL_GetTick>
 8003f3a:	4602      	mov	r2, r0
 8003f3c:	693b      	ldr	r3, [r7, #16]
 8003f3e:	1ad3      	subs	r3, r2, r3
 8003f40:	2b02      	cmp	r3, #2
 8003f42:	d901      	bls.n	8003f48 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003f44:	2303      	movs	r3, #3
 8003f46:	e05c      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003f48:	4b11      	ldr	r3, [pc, #68]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d0f0      	beq.n	8003f36 <HAL_RCC_OscConfig+0x416>
 8003f54:	e054      	b.n	8004000 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003f56:	4b10      	ldr	r3, [pc, #64]	; (8003f98 <HAL_RCC_OscConfig+0x478>)
 8003f58:	2200      	movs	r2, #0
 8003f5a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003f5c:	f7fe faee 	bl	800253c <HAL_GetTick>
 8003f60:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f62:	e008      	b.n	8003f76 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003f64:	f7fe faea 	bl	800253c <HAL_GetTick>
 8003f68:	4602      	mov	r2, r0
 8003f6a:	693b      	ldr	r3, [r7, #16]
 8003f6c:	1ad3      	subs	r3, r2, r3
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d901      	bls.n	8003f76 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003f72:	2303      	movs	r3, #3
 8003f74:	e045      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003f76:	4b06      	ldr	r3, [pc, #24]	; (8003f90 <HAL_RCC_OscConfig+0x470>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f7e:	2b00      	cmp	r3, #0
 8003f80:	d1f0      	bne.n	8003f64 <HAL_RCC_OscConfig+0x444>
 8003f82:	e03d      	b.n	8004000 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	699b      	ldr	r3, [r3, #24]
 8003f88:	2b01      	cmp	r3, #1
 8003f8a:	d107      	bne.n	8003f9c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e038      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
 8003f90:	40023800 	.word	0x40023800
 8003f94:	40007000 	.word	0x40007000
 8003f98:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003f9c:	4b1b      	ldr	r3, [pc, #108]	; (800400c <HAL_RCC_OscConfig+0x4ec>)
 8003f9e:	685b      	ldr	r3, [r3, #4]
 8003fa0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	699b      	ldr	r3, [r3, #24]
 8003fa6:	2b01      	cmp	r3, #1
 8003fa8:	d028      	beq.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003fb4:	429a      	cmp	r2, r3
 8003fb6:	d121      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fb8:	68fb      	ldr	r3, [r7, #12]
 8003fba:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003fc2:	429a      	cmp	r2, r3
 8003fc4:	d11a      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fc6:	68fa      	ldr	r2, [r7, #12]
 8003fc8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003fcc:	4013      	ands	r3, r2
 8003fce:	687a      	ldr	r2, [r7, #4]
 8003fd0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003fd2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d111      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fe2:	085b      	lsrs	r3, r3, #1
 8003fe4:	3b01      	subs	r3, #1
 8003fe6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003fe8:	429a      	cmp	r2, r3
 8003fea:	d107      	bne.n	8003ffc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003ff2:	687b      	ldr	r3, [r7, #4]
 8003ff4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ff6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003ff8:	429a      	cmp	r2, r3
 8003ffa:	d001      	beq.n	8004000 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003ffc:	2301      	movs	r3, #1
 8003ffe:	e000      	b.n	8004002 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004000:	2300      	movs	r3, #0
}
 8004002:	4618      	mov	r0, r3
 8004004:	3718      	adds	r7, #24
 8004006:	46bd      	mov	sp, r7
 8004008:	bd80      	pop	{r7, pc}
 800400a:	bf00      	nop
 800400c:	40023800 	.word	0x40023800

08004010 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004010:	b580      	push	{r7, lr}
 8004012:	b084      	sub	sp, #16
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
 8004018:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	2b00      	cmp	r3, #0
 800401e:	d101      	bne.n	8004024 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004020:	2301      	movs	r3, #1
 8004022:	e0cc      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004024:	4b68      	ldr	r3, [pc, #416]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f003 0307 	and.w	r3, r3, #7
 800402c:	683a      	ldr	r2, [r7, #0]
 800402e:	429a      	cmp	r2, r3
 8004030:	d90c      	bls.n	800404c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004032:	4b65      	ldr	r3, [pc, #404]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004034:	683a      	ldr	r2, [r7, #0]
 8004036:	b2d2      	uxtb	r2, r2
 8004038:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800403a:	4b63      	ldr	r3, [pc, #396]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f003 0307 	and.w	r3, r3, #7
 8004042:	683a      	ldr	r2, [r7, #0]
 8004044:	429a      	cmp	r2, r3
 8004046:	d001      	beq.n	800404c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	e0b8      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f003 0302 	and.w	r3, r3, #2
 8004054:	2b00      	cmp	r3, #0
 8004056:	d020      	beq.n	800409a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f003 0304 	and.w	r3, r3, #4
 8004060:	2b00      	cmp	r3, #0
 8004062:	d005      	beq.n	8004070 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004064:	4b59      	ldr	r3, [pc, #356]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004066:	689b      	ldr	r3, [r3, #8]
 8004068:	4a58      	ldr	r2, [pc, #352]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800406a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800406e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0308 	and.w	r3, r3, #8
 8004078:	2b00      	cmp	r3, #0
 800407a:	d005      	beq.n	8004088 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800407c:	4b53      	ldr	r3, [pc, #332]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	4a52      	ldr	r2, [pc, #328]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004082:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8004086:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b50      	ldr	r3, [pc, #320]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	494d      	ldr	r1, [pc, #308]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0301 	and.w	r3, r3, #1
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d044      	beq.n	8004130 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	685b      	ldr	r3, [r3, #4]
 80040aa:	2b01      	cmp	r3, #1
 80040ac:	d107      	bne.n	80040be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040ae:	4b47      	ldr	r3, [pc, #284]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d119      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e07f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	685b      	ldr	r3, [r3, #4]
 80040c2:	2b02      	cmp	r3, #2
 80040c4:	d003      	beq.n	80040ce <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80040ca:	2b03      	cmp	r3, #3
 80040cc:	d107      	bne.n	80040de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80040ce:	4b3f      	ldr	r3, [pc, #252]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d109      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040da:	2301      	movs	r3, #1
 80040dc:	e06f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040de:	4b3b      	ldr	r3, [pc, #236]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f003 0302 	and.w	r3, r3, #2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d101      	bne.n	80040ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80040ea:	2301      	movs	r3, #1
 80040ec:	e067      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80040ee:	4b37      	ldr	r3, [pc, #220]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040f0:	689b      	ldr	r3, [r3, #8]
 80040f2:	f023 0203 	bic.w	r2, r3, #3
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	685b      	ldr	r3, [r3, #4]
 80040fa:	4934      	ldr	r1, [pc, #208]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 80040fc:	4313      	orrs	r3, r2
 80040fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004100:	f7fe fa1c 	bl	800253c <HAL_GetTick>
 8004104:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004106:	e00a      	b.n	800411e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004108:	f7fe fa18 	bl	800253c <HAL_GetTick>
 800410c:	4602      	mov	r2, r0
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1ad3      	subs	r3, r2, r3
 8004112:	f241 3288 	movw	r2, #5000	; 0x1388
 8004116:	4293      	cmp	r3, r2
 8004118:	d901      	bls.n	800411e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800411a:	2303      	movs	r3, #3
 800411c:	e04f      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800411e:	4b2b      	ldr	r3, [pc, #172]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004120:	689b      	ldr	r3, [r3, #8]
 8004122:	f003 020c 	and.w	r2, r3, #12
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	685b      	ldr	r3, [r3, #4]
 800412a:	009b      	lsls	r3, r3, #2
 800412c:	429a      	cmp	r2, r3
 800412e:	d1eb      	bne.n	8004108 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004130:	4b25      	ldr	r3, [pc, #148]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004132:	681b      	ldr	r3, [r3, #0]
 8004134:	f003 0307 	and.w	r3, r3, #7
 8004138:	683a      	ldr	r2, [r7, #0]
 800413a:	429a      	cmp	r2, r3
 800413c:	d20c      	bcs.n	8004158 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800413e:	4b22      	ldr	r3, [pc, #136]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004140:	683a      	ldr	r2, [r7, #0]
 8004142:	b2d2      	uxtb	r2, r2
 8004144:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8004146:	4b20      	ldr	r3, [pc, #128]	; (80041c8 <HAL_RCC_ClockConfig+0x1b8>)
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	f003 0307 	and.w	r3, r3, #7
 800414e:	683a      	ldr	r2, [r7, #0]
 8004150:	429a      	cmp	r2, r3
 8004152:	d001      	beq.n	8004158 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004154:	2301      	movs	r3, #1
 8004156:	e032      	b.n	80041be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	681b      	ldr	r3, [r3, #0]
 800415c:	f003 0304 	and.w	r3, r3, #4
 8004160:	2b00      	cmp	r3, #0
 8004162:	d008      	beq.n	8004176 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004164:	4b19      	ldr	r3, [pc, #100]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	4916      	ldr	r1, [pc, #88]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004172:	4313      	orrs	r3, r2
 8004174:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f003 0308 	and.w	r3, r3, #8
 800417e:	2b00      	cmp	r3, #0
 8004180:	d009      	beq.n	8004196 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004182:	4b12      	ldr	r3, [pc, #72]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004184:	689b      	ldr	r3, [r3, #8]
 8004186:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	691b      	ldr	r3, [r3, #16]
 800418e:	00db      	lsls	r3, r3, #3
 8004190:	490e      	ldr	r1, [pc, #56]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 8004192:	4313      	orrs	r3, r2
 8004194:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8004196:	f000 f821 	bl	80041dc <HAL_RCC_GetSysClockFreq>
 800419a:	4602      	mov	r2, r0
 800419c:	4b0b      	ldr	r3, [pc, #44]	; (80041cc <HAL_RCC_ClockConfig+0x1bc>)
 800419e:	689b      	ldr	r3, [r3, #8]
 80041a0:	091b      	lsrs	r3, r3, #4
 80041a2:	f003 030f 	and.w	r3, r3, #15
 80041a6:	490a      	ldr	r1, [pc, #40]	; (80041d0 <HAL_RCC_ClockConfig+0x1c0>)
 80041a8:	5ccb      	ldrb	r3, [r1, r3]
 80041aa:	fa22 f303 	lsr.w	r3, r2, r3
 80041ae:	4a09      	ldr	r2, [pc, #36]	; (80041d4 <HAL_RCC_ClockConfig+0x1c4>)
 80041b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80041b2:	4b09      	ldr	r3, [pc, #36]	; (80041d8 <HAL_RCC_ClockConfig+0x1c8>)
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fe f97c 	bl	80024b4 <HAL_InitTick>

  return HAL_OK;
 80041bc:	2300      	movs	r3, #0
}
 80041be:	4618      	mov	r0, r3
 80041c0:	3710      	adds	r7, #16
 80041c2:	46bd      	mov	sp, r7
 80041c4:	bd80      	pop	{r7, pc}
 80041c6:	bf00      	nop
 80041c8:	40023c00 	.word	0x40023c00
 80041cc:	40023800 	.word	0x40023800
 80041d0:	0800698c 	.word	0x0800698c
 80041d4:	20001440 	.word	0x20001440
 80041d8:	20001444 	.word	0x20001444

080041dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80041dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80041e0:	b094      	sub	sp, #80	; 0x50
 80041e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	647b      	str	r3, [r7, #68]	; 0x44
 80041e8:	2300      	movs	r3, #0
 80041ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80041ec:	2300      	movs	r3, #0
 80041ee:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80041f0:	2300      	movs	r3, #0
 80041f2:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80041f4:	4b79      	ldr	r3, [pc, #484]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 030c 	and.w	r3, r3, #12
 80041fc:	2b08      	cmp	r3, #8
 80041fe:	d00d      	beq.n	800421c <HAL_RCC_GetSysClockFreq+0x40>
 8004200:	2b08      	cmp	r3, #8
 8004202:	f200 80e1 	bhi.w	80043c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004206:	2b00      	cmp	r3, #0
 8004208:	d002      	beq.n	8004210 <HAL_RCC_GetSysClockFreq+0x34>
 800420a:	2b04      	cmp	r3, #4
 800420c:	d003      	beq.n	8004216 <HAL_RCC_GetSysClockFreq+0x3a>
 800420e:	e0db      	b.n	80043c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004210:	4b73      	ldr	r3, [pc, #460]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8004212:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004214:	e0db      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004216:	4b73      	ldr	r3, [pc, #460]	; (80043e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8004218:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800421a:	e0d8      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800421c:	4b6f      	ldr	r3, [pc, #444]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 800421e:	685b      	ldr	r3, [r3, #4]
 8004220:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004224:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004226:	4b6d      	ldr	r3, [pc, #436]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004228:	685b      	ldr	r3, [r3, #4]
 800422a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800422e:	2b00      	cmp	r3, #0
 8004230:	d063      	beq.n	80042fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004232:	4b6a      	ldr	r3, [pc, #424]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 8004234:	685b      	ldr	r3, [r3, #4]
 8004236:	099b      	lsrs	r3, r3, #6
 8004238:	2200      	movs	r2, #0
 800423a:	63bb      	str	r3, [r7, #56]	; 0x38
 800423c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800423e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004240:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004244:	633b      	str	r3, [r7, #48]	; 0x30
 8004246:	2300      	movs	r3, #0
 8004248:	637b      	str	r3, [r7, #52]	; 0x34
 800424a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800424e:	4622      	mov	r2, r4
 8004250:	462b      	mov	r3, r5
 8004252:	f04f 0000 	mov.w	r0, #0
 8004256:	f04f 0100 	mov.w	r1, #0
 800425a:	0159      	lsls	r1, r3, #5
 800425c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004260:	0150      	lsls	r0, r2, #5
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4621      	mov	r1, r4
 8004268:	1a51      	subs	r1, r2, r1
 800426a:	6139      	str	r1, [r7, #16]
 800426c:	4629      	mov	r1, r5
 800426e:	eb63 0301 	sbc.w	r3, r3, r1
 8004272:	617b      	str	r3, [r7, #20]
 8004274:	f04f 0200 	mov.w	r2, #0
 8004278:	f04f 0300 	mov.w	r3, #0
 800427c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004280:	4659      	mov	r1, fp
 8004282:	018b      	lsls	r3, r1, #6
 8004284:	4651      	mov	r1, sl
 8004286:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800428a:	4651      	mov	r1, sl
 800428c:	018a      	lsls	r2, r1, #6
 800428e:	4651      	mov	r1, sl
 8004290:	ebb2 0801 	subs.w	r8, r2, r1
 8004294:	4659      	mov	r1, fp
 8004296:	eb63 0901 	sbc.w	r9, r3, r1
 800429a:	f04f 0200 	mov.w	r2, #0
 800429e:	f04f 0300 	mov.w	r3, #0
 80042a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80042a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80042aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80042ae:	4690      	mov	r8, r2
 80042b0:	4699      	mov	r9, r3
 80042b2:	4623      	mov	r3, r4
 80042b4:	eb18 0303 	adds.w	r3, r8, r3
 80042b8:	60bb      	str	r3, [r7, #8]
 80042ba:	462b      	mov	r3, r5
 80042bc:	eb49 0303 	adc.w	r3, r9, r3
 80042c0:	60fb      	str	r3, [r7, #12]
 80042c2:	f04f 0200 	mov.w	r2, #0
 80042c6:	f04f 0300 	mov.w	r3, #0
 80042ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80042ce:	4629      	mov	r1, r5
 80042d0:	024b      	lsls	r3, r1, #9
 80042d2:	4621      	mov	r1, r4
 80042d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80042d8:	4621      	mov	r1, r4
 80042da:	024a      	lsls	r2, r1, #9
 80042dc:	4610      	mov	r0, r2
 80042de:	4619      	mov	r1, r3
 80042e0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80042e2:	2200      	movs	r2, #0
 80042e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80042e6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80042e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80042ec:	f7fb ff7a 	bl	80001e4 <__aeabi_uldivmod>
 80042f0:	4602      	mov	r2, r0
 80042f2:	460b      	mov	r3, r1
 80042f4:	4613      	mov	r3, r2
 80042f6:	64fb      	str	r3, [r7, #76]	; 0x4c
 80042f8:	e058      	b.n	80043ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80042fa:	4b38      	ldr	r3, [pc, #224]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80042fc:	685b      	ldr	r3, [r3, #4]
 80042fe:	099b      	lsrs	r3, r3, #6
 8004300:	2200      	movs	r2, #0
 8004302:	4618      	mov	r0, r3
 8004304:	4611      	mov	r1, r2
 8004306:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800430a:	623b      	str	r3, [r7, #32]
 800430c:	2300      	movs	r3, #0
 800430e:	627b      	str	r3, [r7, #36]	; 0x24
 8004310:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004314:	4642      	mov	r2, r8
 8004316:	464b      	mov	r3, r9
 8004318:	f04f 0000 	mov.w	r0, #0
 800431c:	f04f 0100 	mov.w	r1, #0
 8004320:	0159      	lsls	r1, r3, #5
 8004322:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004326:	0150      	lsls	r0, r2, #5
 8004328:	4602      	mov	r2, r0
 800432a:	460b      	mov	r3, r1
 800432c:	4641      	mov	r1, r8
 800432e:	ebb2 0a01 	subs.w	sl, r2, r1
 8004332:	4649      	mov	r1, r9
 8004334:	eb63 0b01 	sbc.w	fp, r3, r1
 8004338:	f04f 0200 	mov.w	r2, #0
 800433c:	f04f 0300 	mov.w	r3, #0
 8004340:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004344:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8004348:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800434c:	ebb2 040a 	subs.w	r4, r2, sl
 8004350:	eb63 050b 	sbc.w	r5, r3, fp
 8004354:	f04f 0200 	mov.w	r2, #0
 8004358:	f04f 0300 	mov.w	r3, #0
 800435c:	00eb      	lsls	r3, r5, #3
 800435e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004362:	00e2      	lsls	r2, r4, #3
 8004364:	4614      	mov	r4, r2
 8004366:	461d      	mov	r5, r3
 8004368:	4643      	mov	r3, r8
 800436a:	18e3      	adds	r3, r4, r3
 800436c:	603b      	str	r3, [r7, #0]
 800436e:	464b      	mov	r3, r9
 8004370:	eb45 0303 	adc.w	r3, r5, r3
 8004374:	607b      	str	r3, [r7, #4]
 8004376:	f04f 0200 	mov.w	r2, #0
 800437a:	f04f 0300 	mov.w	r3, #0
 800437e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004382:	4629      	mov	r1, r5
 8004384:	028b      	lsls	r3, r1, #10
 8004386:	4621      	mov	r1, r4
 8004388:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800438c:	4621      	mov	r1, r4
 800438e:	028a      	lsls	r2, r1, #10
 8004390:	4610      	mov	r0, r2
 8004392:	4619      	mov	r1, r3
 8004394:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8004396:	2200      	movs	r2, #0
 8004398:	61bb      	str	r3, [r7, #24]
 800439a:	61fa      	str	r2, [r7, #28]
 800439c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80043a0:	f7fb ff20 	bl	80001e4 <__aeabi_uldivmod>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4613      	mov	r3, r2
 80043aa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80043ac:	4b0b      	ldr	r3, [pc, #44]	; (80043dc <HAL_RCC_GetSysClockFreq+0x200>)
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	0c1b      	lsrs	r3, r3, #16
 80043b2:	f003 0303 	and.w	r3, r3, #3
 80043b6:	3301      	adds	r3, #1
 80043b8:	005b      	lsls	r3, r3, #1
 80043ba:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80043bc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80043be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80043c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80043c4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043c6:	e002      	b.n	80043ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80043c8:	4b05      	ldr	r3, [pc, #20]	; (80043e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80043ca:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80043cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80043ce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80043d0:	4618      	mov	r0, r3
 80043d2:	3750      	adds	r7, #80	; 0x50
 80043d4:	46bd      	mov	sp, r7
 80043d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80043da:	bf00      	nop
 80043dc:	40023800 	.word	0x40023800
 80043e0:	00f42400 	.word	0x00f42400
 80043e4:	007a1200 	.word	0x007a1200

080043e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80043e8:	b480      	push	{r7}
 80043ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80043ec:	4b03      	ldr	r3, [pc, #12]	; (80043fc <HAL_RCC_GetHCLKFreq+0x14>)
 80043ee:	681b      	ldr	r3, [r3, #0]
}
 80043f0:	4618      	mov	r0, r3
 80043f2:	46bd      	mov	sp, r7
 80043f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043f8:	4770      	bx	lr
 80043fa:	bf00      	nop
 80043fc:	20001440 	.word	0x20001440

08004400 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004400:	b580      	push	{r7, lr}
 8004402:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8004404:	f7ff fff0 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004408:	4602      	mov	r2, r0
 800440a:	4b05      	ldr	r3, [pc, #20]	; (8004420 <HAL_RCC_GetPCLK1Freq+0x20>)
 800440c:	689b      	ldr	r3, [r3, #8]
 800440e:	0a9b      	lsrs	r3, r3, #10
 8004410:	f003 0307 	and.w	r3, r3, #7
 8004414:	4903      	ldr	r1, [pc, #12]	; (8004424 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004416:	5ccb      	ldrb	r3, [r1, r3]
 8004418:	fa22 f303 	lsr.w	r3, r2, r3
}
 800441c:	4618      	mov	r0, r3
 800441e:	bd80      	pop	{r7, pc}
 8004420:	40023800 	.word	0x40023800
 8004424:	0800699c 	.word	0x0800699c

08004428 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004428:	b580      	push	{r7, lr}
 800442a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800442c:	f7ff ffdc 	bl	80043e8 <HAL_RCC_GetHCLKFreq>
 8004430:	4602      	mov	r2, r0
 8004432:	4b05      	ldr	r3, [pc, #20]	; (8004448 <HAL_RCC_GetPCLK2Freq+0x20>)
 8004434:	689b      	ldr	r3, [r3, #8]
 8004436:	0b5b      	lsrs	r3, r3, #13
 8004438:	f003 0307 	and.w	r3, r3, #7
 800443c:	4903      	ldr	r1, [pc, #12]	; (800444c <HAL_RCC_GetPCLK2Freq+0x24>)
 800443e:	5ccb      	ldrb	r3, [r1, r3]
 8004440:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004444:	4618      	mov	r0, r3
 8004446:	bd80      	pop	{r7, pc}
 8004448:	40023800 	.word	0x40023800
 800444c:	0800699c 	.word	0x0800699c

08004450 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b082      	sub	sp, #8
 8004454:	af00      	add	r7, sp, #0
 8004456:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d101      	bne.n	8004462 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800445e:	2301      	movs	r3, #1
 8004460:	e07b      	b.n	800455a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004466:	2b00      	cmp	r3, #0
 8004468:	d108      	bne.n	800447c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	685b      	ldr	r3, [r3, #4]
 800446e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004472:	d009      	beq.n	8004488 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	2200      	movs	r2, #0
 8004478:	61da      	str	r2, [r3, #28]
 800447a:	e005      	b.n	8004488 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2200      	movs	r2, #0
 8004480:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2200      	movs	r2, #0
 8004486:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	2200      	movs	r2, #0
 800448c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004494:	b2db      	uxtb	r3, r3
 8004496:	2b00      	cmp	r3, #0
 8004498:	d106      	bne.n	80044a8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	2200      	movs	r2, #0
 800449e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80044a2:	6878      	ldr	r0, [r7, #4]
 80044a4:	f7fd fd66 	bl	8001f74 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	2202      	movs	r2, #2
 80044ac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	681a      	ldr	r2, [r3, #0]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80044be:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	685b      	ldr	r3, [r3, #4]
 80044c4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	689b      	ldr	r3, [r3, #8]
 80044cc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80044d0:	431a      	orrs	r2, r3
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	68db      	ldr	r3, [r3, #12]
 80044d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80044da:	431a      	orrs	r2, r3
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	691b      	ldr	r3, [r3, #16]
 80044e0:	f003 0302 	and.w	r3, r3, #2
 80044e4:	431a      	orrs	r2, r3
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	695b      	ldr	r3, [r3, #20]
 80044ea:	f003 0301 	and.w	r3, r3, #1
 80044ee:	431a      	orrs	r2, r3
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	699b      	ldr	r3, [r3, #24]
 80044f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80044f8:	431a      	orrs	r2, r3
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	69db      	ldr	r3, [r3, #28]
 80044fe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8004502:	431a      	orrs	r2, r3
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6a1b      	ldr	r3, [r3, #32]
 8004508:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800450c:	ea42 0103 	orr.w	r1, r2, r3
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004514:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004518:	687b      	ldr	r3, [r7, #4]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	430a      	orrs	r2, r1
 800451e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	0c1b      	lsrs	r3, r3, #16
 8004526:	f003 0104 	and.w	r1, r3, #4
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800452e:	f003 0210 	and.w	r2, r3, #16
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	430a      	orrs	r2, r1
 8004538:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	681b      	ldr	r3, [r3, #0]
 800453e:	69da      	ldr	r2, [r3, #28]
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004548:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	2200      	movs	r2, #0
 800454e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004558:	2300      	movs	r3, #0
}
 800455a:	4618      	mov	r0, r3
 800455c:	3708      	adds	r7, #8
 800455e:	46bd      	mov	sp, r7
 8004560:	bd80      	pop	{r7, pc}

08004562 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004562:	b580      	push	{r7, lr}
 8004564:	b088      	sub	sp, #32
 8004566:	af00      	add	r7, sp, #0
 8004568:	60f8      	str	r0, [r7, #12]
 800456a:	60b9      	str	r1, [r7, #8]
 800456c:	603b      	str	r3, [r7, #0]
 800456e:	4613      	mov	r3, r2
 8004570:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004572:	2300      	movs	r3, #0
 8004574:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004576:	68fb      	ldr	r3, [r7, #12]
 8004578:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800457c:	2b01      	cmp	r3, #1
 800457e:	d101      	bne.n	8004584 <HAL_SPI_Transmit+0x22>
 8004580:	2302      	movs	r3, #2
 8004582:	e126      	b.n	80047d2 <HAL_SPI_Transmit+0x270>
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	2201      	movs	r2, #1
 8004588:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800458c:	f7fd ffd6 	bl	800253c <HAL_GetTick>
 8004590:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004592:	88fb      	ldrh	r3, [r7, #6]
 8004594:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800459c:	b2db      	uxtb	r3, r3
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d002      	beq.n	80045a8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80045a2:	2302      	movs	r3, #2
 80045a4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045a6:	e10b      	b.n	80047c0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d002      	beq.n	80045b4 <HAL_SPI_Transmit+0x52>
 80045ae:	88fb      	ldrh	r3, [r7, #6]
 80045b0:	2b00      	cmp	r3, #0
 80045b2:	d102      	bne.n	80045ba <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80045b4:	2301      	movs	r3, #1
 80045b6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80045b8:	e102      	b.n	80047c0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	2203      	movs	r2, #3
 80045be:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	2200      	movs	r2, #0
 80045c6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80045c8:	68fb      	ldr	r3, [r7, #12]
 80045ca:	68ba      	ldr	r2, [r7, #8]
 80045cc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80045ce:	68fb      	ldr	r3, [r7, #12]
 80045d0:	88fa      	ldrh	r2, [r7, #6]
 80045d2:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	88fa      	ldrh	r2, [r7, #6]
 80045d8:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80045da:	68fb      	ldr	r3, [r7, #12]
 80045dc:	2200      	movs	r2, #0
 80045de:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80045e0:	68fb      	ldr	r3, [r7, #12]
 80045e2:	2200      	movs	r2, #0
 80045e4:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2200      	movs	r2, #0
 80045ea:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	2200      	movs	r2, #0
 80045f6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80045f8:	68fb      	ldr	r3, [r7, #12]
 80045fa:	689b      	ldr	r3, [r3, #8]
 80045fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004600:	d10f      	bne.n	8004622 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	681b      	ldr	r3, [r3, #0]
 8004606:	681a      	ldr	r2, [r3, #0]
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004610:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004612:	68fb      	ldr	r3, [r7, #12]
 8004614:	681b      	ldr	r3, [r3, #0]
 8004616:	681a      	ldr	r2, [r3, #0]
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004620:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800462c:	2b40      	cmp	r3, #64	; 0x40
 800462e:	d007      	beq.n	8004640 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	681a      	ldr	r2, [r3, #0]
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	681b      	ldr	r3, [r3, #0]
 800463a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800463e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004640:	68fb      	ldr	r3, [r7, #12]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004648:	d14b      	bne.n	80046e2 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	685b      	ldr	r3, [r3, #4]
 800464e:	2b00      	cmp	r3, #0
 8004650:	d002      	beq.n	8004658 <HAL_SPI_Transmit+0xf6>
 8004652:	8afb      	ldrh	r3, [r7, #22]
 8004654:	2b01      	cmp	r3, #1
 8004656:	d13e      	bne.n	80046d6 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004658:	68fb      	ldr	r3, [r7, #12]
 800465a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800465c:	881a      	ldrh	r2, [r3, #0]
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004668:	1c9a      	adds	r2, r3, #2
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004672:	b29b      	uxth	r3, r3
 8004674:	3b01      	subs	r3, #1
 8004676:	b29a      	uxth	r2, r3
 8004678:	68fb      	ldr	r3, [r7, #12]
 800467a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800467c:	e02b      	b.n	80046d6 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800467e:	68fb      	ldr	r3, [r7, #12]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	f003 0302 	and.w	r3, r3, #2
 8004688:	2b02      	cmp	r3, #2
 800468a:	d112      	bne.n	80046b2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004690:	881a      	ldrh	r2, [r3, #0]
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004698:	68fb      	ldr	r3, [r7, #12]
 800469a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800469c:	1c9a      	adds	r2, r3, #2
 800469e:	68fb      	ldr	r3, [r7, #12]
 80046a0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046a6:	b29b      	uxth	r3, r3
 80046a8:	3b01      	subs	r3, #1
 80046aa:	b29a      	uxth	r2, r3
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	86da      	strh	r2, [r3, #54]	; 0x36
 80046b0:	e011      	b.n	80046d6 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80046b2:	f7fd ff43 	bl	800253c <HAL_GetTick>
 80046b6:	4602      	mov	r2, r0
 80046b8:	69bb      	ldr	r3, [r7, #24]
 80046ba:	1ad3      	subs	r3, r2, r3
 80046bc:	683a      	ldr	r2, [r7, #0]
 80046be:	429a      	cmp	r2, r3
 80046c0:	d803      	bhi.n	80046ca <HAL_SPI_Transmit+0x168>
 80046c2:	683b      	ldr	r3, [r7, #0]
 80046c4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80046c8:	d102      	bne.n	80046d0 <HAL_SPI_Transmit+0x16e>
 80046ca:	683b      	ldr	r3, [r7, #0]
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d102      	bne.n	80046d6 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 80046d0:	2303      	movs	r3, #3
 80046d2:	77fb      	strb	r3, [r7, #31]
          goto error;
 80046d4:	e074      	b.n	80047c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80046da:	b29b      	uxth	r3, r3
 80046dc:	2b00      	cmp	r3, #0
 80046de:	d1ce      	bne.n	800467e <HAL_SPI_Transmit+0x11c>
 80046e0:	e04c      	b.n	800477c <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80046e2:	68fb      	ldr	r3, [r7, #12]
 80046e4:	685b      	ldr	r3, [r3, #4]
 80046e6:	2b00      	cmp	r3, #0
 80046e8:	d002      	beq.n	80046f0 <HAL_SPI_Transmit+0x18e>
 80046ea:	8afb      	ldrh	r3, [r7, #22]
 80046ec:	2b01      	cmp	r3, #1
 80046ee:	d140      	bne.n	8004772 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	330c      	adds	r3, #12
 80046fa:	7812      	ldrb	r2, [r2, #0]
 80046fc:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004702:	1c5a      	adds	r2, r3, #1
 8004704:	68fb      	ldr	r3, [r7, #12]
 8004706:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800470c:	b29b      	uxth	r3, r3
 800470e:	3b01      	subs	r3, #1
 8004710:	b29a      	uxth	r2, r3
 8004712:	68fb      	ldr	r3, [r7, #12]
 8004714:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004716:	e02c      	b.n	8004772 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	689b      	ldr	r3, [r3, #8]
 800471e:	f003 0302 	and.w	r3, r3, #2
 8004722:	2b02      	cmp	r3, #2
 8004724:	d113      	bne.n	800474e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	330c      	adds	r3, #12
 8004730:	7812      	ldrb	r2, [r2, #0]
 8004732:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004738:	1c5a      	adds	r2, r3, #1
 800473a:	68fb      	ldr	r3, [r7, #12]
 800473c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800473e:	68fb      	ldr	r3, [r7, #12]
 8004740:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004742:	b29b      	uxth	r3, r3
 8004744:	3b01      	subs	r3, #1
 8004746:	b29a      	uxth	r2, r3
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	86da      	strh	r2, [r3, #54]	; 0x36
 800474c:	e011      	b.n	8004772 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800474e:	f7fd fef5 	bl	800253c <HAL_GetTick>
 8004752:	4602      	mov	r2, r0
 8004754:	69bb      	ldr	r3, [r7, #24]
 8004756:	1ad3      	subs	r3, r2, r3
 8004758:	683a      	ldr	r2, [r7, #0]
 800475a:	429a      	cmp	r2, r3
 800475c:	d803      	bhi.n	8004766 <HAL_SPI_Transmit+0x204>
 800475e:	683b      	ldr	r3, [r7, #0]
 8004760:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004764:	d102      	bne.n	800476c <HAL_SPI_Transmit+0x20a>
 8004766:	683b      	ldr	r3, [r7, #0]
 8004768:	2b00      	cmp	r3, #0
 800476a:	d102      	bne.n	8004772 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800476c:	2303      	movs	r3, #3
 800476e:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004770:	e026      	b.n	80047c0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004776:	b29b      	uxth	r3, r3
 8004778:	2b00      	cmp	r3, #0
 800477a:	d1cd      	bne.n	8004718 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800477c:	69ba      	ldr	r2, [r7, #24]
 800477e:	6839      	ldr	r1, [r7, #0]
 8004780:	68f8      	ldr	r0, [r7, #12]
 8004782:	f000 f8b3 	bl	80048ec <SPI_EndRxTxTransaction>
 8004786:	4603      	mov	r3, r0
 8004788:	2b00      	cmp	r3, #0
 800478a:	d002      	beq.n	8004792 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800478c:	68fb      	ldr	r3, [r7, #12]
 800478e:	2220      	movs	r2, #32
 8004790:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004792:	68fb      	ldr	r3, [r7, #12]
 8004794:	689b      	ldr	r3, [r3, #8]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d10a      	bne.n	80047b0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800479a:	2300      	movs	r3, #0
 800479c:	613b      	str	r3, [r7, #16]
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	68db      	ldr	r3, [r3, #12]
 80047a4:	613b      	str	r3, [r7, #16]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	689b      	ldr	r3, [r3, #8]
 80047ac:	613b      	str	r3, [r7, #16]
 80047ae:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d002      	beq.n	80047be <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80047b8:	2301      	movs	r3, #1
 80047ba:	77fb      	strb	r3, [r7, #31]
 80047bc:	e000      	b.n	80047c0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80047be:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	2201      	movs	r2, #1
 80047c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	2200      	movs	r2, #0
 80047cc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80047d0:	7ffb      	ldrb	r3, [r7, #31]
}
 80047d2:	4618      	mov	r0, r3
 80047d4:	3720      	adds	r7, #32
 80047d6:	46bd      	mov	sp, r7
 80047d8:	bd80      	pop	{r7, pc}
	...

080047dc <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80047dc:	b580      	push	{r7, lr}
 80047de:	b088      	sub	sp, #32
 80047e0:	af00      	add	r7, sp, #0
 80047e2:	60f8      	str	r0, [r7, #12]
 80047e4:	60b9      	str	r1, [r7, #8]
 80047e6:	603b      	str	r3, [r7, #0]
 80047e8:	4613      	mov	r3, r2
 80047ea:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80047ec:	f7fd fea6 	bl	800253c <HAL_GetTick>
 80047f0:	4602      	mov	r2, r0
 80047f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80047f4:	1a9b      	subs	r3, r3, r2
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4413      	add	r3, r2
 80047fa:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80047fc:	f7fd fe9e 	bl	800253c <HAL_GetTick>
 8004800:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004802:	4b39      	ldr	r3, [pc, #228]	; (80048e8 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	015b      	lsls	r3, r3, #5
 8004808:	0d1b      	lsrs	r3, r3, #20
 800480a:	69fa      	ldr	r2, [r7, #28]
 800480c:	fb02 f303 	mul.w	r3, r2, r3
 8004810:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004812:	e054      	b.n	80048be <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800481a:	d050      	beq.n	80048be <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800481c:	f7fd fe8e 	bl	800253c <HAL_GetTick>
 8004820:	4602      	mov	r2, r0
 8004822:	69bb      	ldr	r3, [r7, #24]
 8004824:	1ad3      	subs	r3, r2, r3
 8004826:	69fa      	ldr	r2, [r7, #28]
 8004828:	429a      	cmp	r2, r3
 800482a:	d902      	bls.n	8004832 <SPI_WaitFlagStateUntilTimeout+0x56>
 800482c:	69fb      	ldr	r3, [r7, #28]
 800482e:	2b00      	cmp	r3, #0
 8004830:	d13d      	bne.n	80048ae <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	685a      	ldr	r2, [r3, #4]
 8004838:	68fb      	ldr	r3, [r7, #12]
 800483a:	681b      	ldr	r3, [r3, #0]
 800483c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004840:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004842:	68fb      	ldr	r3, [r7, #12]
 8004844:	685b      	ldr	r3, [r3, #4]
 8004846:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800484a:	d111      	bne.n	8004870 <SPI_WaitFlagStateUntilTimeout+0x94>
 800484c:	68fb      	ldr	r3, [r7, #12]
 800484e:	689b      	ldr	r3, [r3, #8]
 8004850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004854:	d004      	beq.n	8004860 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004856:	68fb      	ldr	r3, [r7, #12]
 8004858:	689b      	ldr	r3, [r3, #8]
 800485a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800485e:	d107      	bne.n	8004870 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	681b      	ldr	r3, [r3, #0]
 8004864:	681a      	ldr	r2, [r3, #0]
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800486e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004874:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004878:	d10f      	bne.n	800489a <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800487a:	68fb      	ldr	r3, [r7, #12]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	681a      	ldr	r2, [r3, #0]
 8004880:	68fb      	ldr	r3, [r7, #12]
 8004882:	681b      	ldr	r3, [r3, #0]
 8004884:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004888:	601a      	str	r2, [r3, #0]
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004898:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	2201      	movs	r2, #1
 800489e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	2200      	movs	r2, #0
 80048a6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80048aa:	2303      	movs	r3, #3
 80048ac:	e017      	b.n	80048de <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	2b00      	cmp	r3, #0
 80048b2:	d101      	bne.n	80048b8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80048b4:	2300      	movs	r3, #0
 80048b6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80048b8:	697b      	ldr	r3, [r7, #20]
 80048ba:	3b01      	subs	r3, #1
 80048bc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80048be:	68fb      	ldr	r3, [r7, #12]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	689a      	ldr	r2, [r3, #8]
 80048c4:	68bb      	ldr	r3, [r7, #8]
 80048c6:	4013      	ands	r3, r2
 80048c8:	68ba      	ldr	r2, [r7, #8]
 80048ca:	429a      	cmp	r2, r3
 80048cc:	bf0c      	ite	eq
 80048ce:	2301      	moveq	r3, #1
 80048d0:	2300      	movne	r3, #0
 80048d2:	b2db      	uxtb	r3, r3
 80048d4:	461a      	mov	r2, r3
 80048d6:	79fb      	ldrb	r3, [r7, #7]
 80048d8:	429a      	cmp	r2, r3
 80048da:	d19b      	bne.n	8004814 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80048dc:	2300      	movs	r3, #0
}
 80048de:	4618      	mov	r0, r3
 80048e0:	3720      	adds	r7, #32
 80048e2:	46bd      	mov	sp, r7
 80048e4:	bd80      	pop	{r7, pc}
 80048e6:	bf00      	nop
 80048e8:	20001440 	.word	0x20001440

080048ec <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80048ec:	b580      	push	{r7, lr}
 80048ee:	b088      	sub	sp, #32
 80048f0:	af02      	add	r7, sp, #8
 80048f2:	60f8      	str	r0, [r7, #12]
 80048f4:	60b9      	str	r1, [r7, #8]
 80048f6:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80048f8:	4b1b      	ldr	r3, [pc, #108]	; (8004968 <SPI_EndRxTxTransaction+0x7c>)
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	4a1b      	ldr	r2, [pc, #108]	; (800496c <SPI_EndRxTxTransaction+0x80>)
 80048fe:	fba2 2303 	umull	r2, r3, r2, r3
 8004902:	0d5b      	lsrs	r3, r3, #21
 8004904:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004908:	fb02 f303 	mul.w	r3, r2, r3
 800490c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	685b      	ldr	r3, [r3, #4]
 8004912:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004916:	d112      	bne.n	800493e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004918:	687b      	ldr	r3, [r7, #4]
 800491a:	9300      	str	r3, [sp, #0]
 800491c:	68bb      	ldr	r3, [r7, #8]
 800491e:	2200      	movs	r2, #0
 8004920:	2180      	movs	r1, #128	; 0x80
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f7ff ff5a 	bl	80047dc <SPI_WaitFlagStateUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d016      	beq.n	800495c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004932:	f043 0220 	orr.w	r2, r3, #32
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800493a:	2303      	movs	r3, #3
 800493c:	e00f      	b.n	800495e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800493e:	697b      	ldr	r3, [r7, #20]
 8004940:	2b00      	cmp	r3, #0
 8004942:	d00a      	beq.n	800495a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004944:	697b      	ldr	r3, [r7, #20]
 8004946:	3b01      	subs	r3, #1
 8004948:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800494a:	68fb      	ldr	r3, [r7, #12]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004954:	2b80      	cmp	r3, #128	; 0x80
 8004956:	d0f2      	beq.n	800493e <SPI_EndRxTxTransaction+0x52>
 8004958:	e000      	b.n	800495c <SPI_EndRxTxTransaction+0x70>
        break;
 800495a:	bf00      	nop
  }

  return HAL_OK;
 800495c:	2300      	movs	r3, #0
}
 800495e:	4618      	mov	r0, r3
 8004960:	3718      	adds	r7, #24
 8004962:	46bd      	mov	sp, r7
 8004964:	bd80      	pop	{r7, pc}
 8004966:	bf00      	nop
 8004968:	20001440 	.word	0x20001440
 800496c:	165e9f81 	.word	0x165e9f81

08004970 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b082      	sub	sp, #8
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004978:	687b      	ldr	r3, [r7, #4]
 800497a:	2b00      	cmp	r3, #0
 800497c:	d101      	bne.n	8004982 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800497e:	2301      	movs	r3, #1
 8004980:	e041      	b.n	8004a06 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fd fb54 	bl	8002044 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	3304      	adds	r3, #4
 80049ac:	4619      	mov	r1, r3
 80049ae:	4610      	mov	r0, r2
 80049b0:	f000 ff6c 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2201      	movs	r2, #1
 80049b8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2201      	movs	r2, #1
 80049c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	2201      	movs	r2, #1
 80049c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	2201      	movs	r2, #1
 80049d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	2201      	movs	r2, #1
 80049d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80049dc:	687b      	ldr	r3, [r7, #4]
 80049de:	2201      	movs	r2, #1
 80049e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	2201      	movs	r2, #1
 80049e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	2201      	movs	r2, #1
 80049f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	2201      	movs	r2, #1
 80049f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	2201      	movs	r2, #1
 8004a00:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004a04:	2300      	movs	r3, #0
}
 8004a06:	4618      	mov	r0, r3
 8004a08:	3708      	adds	r7, #8
 8004a0a:	46bd      	mov	sp, r7
 8004a0c:	bd80      	pop	{r7, pc}
	...

08004a10 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004a10:	b480      	push	{r7}
 8004a12:	b085      	sub	sp, #20
 8004a14:	af00      	add	r7, sp, #0
 8004a16:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a1e:	b2db      	uxtb	r3, r3
 8004a20:	2b01      	cmp	r3, #1
 8004a22:	d001      	beq.n	8004a28 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004a24:	2301      	movs	r3, #1
 8004a26:	e044      	b.n	8004ab2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	2202      	movs	r2, #2
 8004a2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68da      	ldr	r2, [r3, #12]
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	f042 0201 	orr.w	r2, r2, #1
 8004a3e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	4a1e      	ldr	r2, [pc, #120]	; (8004ac0 <HAL_TIM_Base_Start_IT+0xb0>)
 8004a46:	4293      	cmp	r3, r2
 8004a48:	d018      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x6c>
 8004a4a:	687b      	ldr	r3, [r7, #4]
 8004a4c:	681b      	ldr	r3, [r3, #0]
 8004a4e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004a52:	d013      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x6c>
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	681b      	ldr	r3, [r3, #0]
 8004a58:	4a1a      	ldr	r2, [pc, #104]	; (8004ac4 <HAL_TIM_Base_Start_IT+0xb4>)
 8004a5a:	4293      	cmp	r3, r2
 8004a5c:	d00e      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x6c>
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	4a19      	ldr	r2, [pc, #100]	; (8004ac8 <HAL_TIM_Base_Start_IT+0xb8>)
 8004a64:	4293      	cmp	r3, r2
 8004a66:	d009      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x6c>
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a17      	ldr	r2, [pc, #92]	; (8004acc <HAL_TIM_Base_Start_IT+0xbc>)
 8004a6e:	4293      	cmp	r3, r2
 8004a70:	d004      	beq.n	8004a7c <HAL_TIM_Base_Start_IT+0x6c>
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	4a16      	ldr	r2, [pc, #88]	; (8004ad0 <HAL_TIM_Base_Start_IT+0xc0>)
 8004a78:	4293      	cmp	r3, r2
 8004a7a:	d111      	bne.n	8004aa0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	689b      	ldr	r3, [r3, #8]
 8004a82:	f003 0307 	and.w	r3, r3, #7
 8004a86:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2b06      	cmp	r3, #6
 8004a8c:	d010      	beq.n	8004ab0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	681a      	ldr	r2, [r3, #0]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	f042 0201 	orr.w	r2, r2, #1
 8004a9c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004a9e:	e007      	b.n	8004ab0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	681b      	ldr	r3, [r3, #0]
 8004aa4:	681a      	ldr	r2, [r3, #0]
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f042 0201 	orr.w	r2, r2, #1
 8004aae:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004ab0:	2300      	movs	r3, #0
}
 8004ab2:	4618      	mov	r0, r3
 8004ab4:	3714      	adds	r7, #20
 8004ab6:	46bd      	mov	sp, r7
 8004ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004abc:	4770      	bx	lr
 8004abe:	bf00      	nop
 8004ac0:	40010000 	.word	0x40010000
 8004ac4:	40000400 	.word	0x40000400
 8004ac8:	40000800 	.word	0x40000800
 8004acc:	40000c00 	.word	0x40000c00
 8004ad0:	40014000 	.word	0x40014000

08004ad4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004ad4:	b580      	push	{r7, lr}
 8004ad6:	b082      	sub	sp, #8
 8004ad8:	af00      	add	r7, sp, #0
 8004ada:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d101      	bne.n	8004ae6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e041      	b.n	8004b6a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004aec:	b2db      	uxtb	r3, r3
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	2200      	movs	r2, #0
 8004af6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004afa:	6878      	ldr	r0, [r7, #4]
 8004afc:	f7fd fb3a 	bl	8002174 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2202      	movs	r2, #2
 8004b04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	3304      	adds	r3, #4
 8004b10:	4619      	mov	r1, r3
 8004b12:	4610      	mov	r0, r2
 8004b14:	f000 feba 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2201      	movs	r2, #1
 8004b1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2201      	movs	r2, #1
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2201      	movs	r2, #1
 8004b2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2201      	movs	r2, #1
 8004b34:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2201      	movs	r2, #1
 8004b3c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2201      	movs	r2, #1
 8004b44:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	2201      	movs	r2, #1
 8004b4c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2201      	movs	r2, #1
 8004b54:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2201      	movs	r2, #1
 8004b5c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004b60:	687b      	ldr	r3, [r7, #4]
 8004b62:	2201      	movs	r2, #1
 8004b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004b68:	2300      	movs	r3, #0
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3708      	adds	r7, #8
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	bd80      	pop	{r7, pc}
	...

08004b74 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004b74:	b580      	push	{r7, lr}
 8004b76:	b084      	sub	sp, #16
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	6078      	str	r0, [r7, #4]
 8004b7c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d109      	bne.n	8004b98 <HAL_TIM_PWM_Start+0x24>
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004b8a:	b2db      	uxtb	r3, r3
 8004b8c:	2b01      	cmp	r3, #1
 8004b8e:	bf14      	ite	ne
 8004b90:	2301      	movne	r3, #1
 8004b92:	2300      	moveq	r3, #0
 8004b94:	b2db      	uxtb	r3, r3
 8004b96:	e022      	b.n	8004bde <HAL_TIM_PWM_Start+0x6a>
 8004b98:	683b      	ldr	r3, [r7, #0]
 8004b9a:	2b04      	cmp	r3, #4
 8004b9c:	d109      	bne.n	8004bb2 <HAL_TIM_PWM_Start+0x3e>
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004ba4:	b2db      	uxtb	r3, r3
 8004ba6:	2b01      	cmp	r3, #1
 8004ba8:	bf14      	ite	ne
 8004baa:	2301      	movne	r3, #1
 8004bac:	2300      	moveq	r3, #0
 8004bae:	b2db      	uxtb	r3, r3
 8004bb0:	e015      	b.n	8004bde <HAL_TIM_PWM_Start+0x6a>
 8004bb2:	683b      	ldr	r3, [r7, #0]
 8004bb4:	2b08      	cmp	r3, #8
 8004bb6:	d109      	bne.n	8004bcc <HAL_TIM_PWM_Start+0x58>
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004bbe:	b2db      	uxtb	r3, r3
 8004bc0:	2b01      	cmp	r3, #1
 8004bc2:	bf14      	ite	ne
 8004bc4:	2301      	movne	r3, #1
 8004bc6:	2300      	moveq	r3, #0
 8004bc8:	b2db      	uxtb	r3, r3
 8004bca:	e008      	b.n	8004bde <HAL_TIM_PWM_Start+0x6a>
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004bd2:	b2db      	uxtb	r3, r3
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	bf14      	ite	ne
 8004bd8:	2301      	movne	r3, #1
 8004bda:	2300      	moveq	r3, #0
 8004bdc:	b2db      	uxtb	r3, r3
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d001      	beq.n	8004be6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8004be2:	2301      	movs	r3, #1
 8004be4:	e068      	b.n	8004cb8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004be6:	683b      	ldr	r3, [r7, #0]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d104      	bne.n	8004bf6 <HAL_TIM_PWM_Start+0x82>
 8004bec:	687b      	ldr	r3, [r7, #4]
 8004bee:	2202      	movs	r2, #2
 8004bf0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004bf4:	e013      	b.n	8004c1e <HAL_TIM_PWM_Start+0xaa>
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	2b04      	cmp	r3, #4
 8004bfa:	d104      	bne.n	8004c06 <HAL_TIM_PWM_Start+0x92>
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	2202      	movs	r2, #2
 8004c00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004c04:	e00b      	b.n	8004c1e <HAL_TIM_PWM_Start+0xaa>
 8004c06:	683b      	ldr	r3, [r7, #0]
 8004c08:	2b08      	cmp	r3, #8
 8004c0a:	d104      	bne.n	8004c16 <HAL_TIM_PWM_Start+0xa2>
 8004c0c:	687b      	ldr	r3, [r7, #4]
 8004c0e:	2202      	movs	r2, #2
 8004c10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004c14:	e003      	b.n	8004c1e <HAL_TIM_PWM_Start+0xaa>
 8004c16:	687b      	ldr	r3, [r7, #4]
 8004c18:	2202      	movs	r2, #2
 8004c1a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	2201      	movs	r2, #1
 8004c24:	6839      	ldr	r1, [r7, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f001 f9f4 	bl	8006014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4a23      	ldr	r2, [pc, #140]	; (8004cc0 <HAL_TIM_PWM_Start+0x14c>)
 8004c32:	4293      	cmp	r3, r2
 8004c34:	d107      	bne.n	8004c46 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8004c36:	687b      	ldr	r3, [r7, #4]
 8004c38:	681b      	ldr	r3, [r3, #0]
 8004c3a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004c3c:	687b      	ldr	r3, [r7, #4]
 8004c3e:	681b      	ldr	r3, [r3, #0]
 8004c40:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004c44:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4a1d      	ldr	r2, [pc, #116]	; (8004cc0 <HAL_TIM_PWM_Start+0x14c>)
 8004c4c:	4293      	cmp	r3, r2
 8004c4e:	d018      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x10e>
 8004c50:	687b      	ldr	r3, [r7, #4]
 8004c52:	681b      	ldr	r3, [r3, #0]
 8004c54:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c58:	d013      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x10e>
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	4a19      	ldr	r2, [pc, #100]	; (8004cc4 <HAL_TIM_PWM_Start+0x150>)
 8004c60:	4293      	cmp	r3, r2
 8004c62:	d00e      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x10e>
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4a17      	ldr	r2, [pc, #92]	; (8004cc8 <HAL_TIM_PWM_Start+0x154>)
 8004c6a:	4293      	cmp	r3, r2
 8004c6c:	d009      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x10e>
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	4a16      	ldr	r2, [pc, #88]	; (8004ccc <HAL_TIM_PWM_Start+0x158>)
 8004c74:	4293      	cmp	r3, r2
 8004c76:	d004      	beq.n	8004c82 <HAL_TIM_PWM_Start+0x10e>
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	4a14      	ldr	r2, [pc, #80]	; (8004cd0 <HAL_TIM_PWM_Start+0x15c>)
 8004c7e:	4293      	cmp	r3, r2
 8004c80:	d111      	bne.n	8004ca6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004c82:	687b      	ldr	r3, [r7, #4]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	689b      	ldr	r3, [r3, #8]
 8004c88:	f003 0307 	and.w	r3, r3, #7
 8004c8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004c8e:	68fb      	ldr	r3, [r7, #12]
 8004c90:	2b06      	cmp	r3, #6
 8004c92:	d010      	beq.n	8004cb6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	681a      	ldr	r2, [r3, #0]
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f042 0201 	orr.w	r2, r2, #1
 8004ca2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004ca4:	e007      	b.n	8004cb6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	681a      	ldr	r2, [r3, #0]
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	f042 0201 	orr.w	r2, r2, #1
 8004cb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004cb6:	2300      	movs	r3, #0
}
 8004cb8:	4618      	mov	r0, r3
 8004cba:	3710      	adds	r7, #16
 8004cbc:	46bd      	mov	sp, r7
 8004cbe:	bd80      	pop	{r7, pc}
 8004cc0:	40010000 	.word	0x40010000
 8004cc4:	40000400 	.word	0x40000400
 8004cc8:	40000800 	.word	0x40000800
 8004ccc:	40000c00 	.word	0x40000c00
 8004cd0:	40014000 	.word	0x40014000

08004cd4 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004cd4:	b580      	push	{r7, lr}
 8004cd6:	b082      	sub	sp, #8
 8004cd8:	af00      	add	r7, sp, #0
 8004cda:	6078      	str	r0, [r7, #4]
 8004cdc:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	2200      	movs	r2, #0
 8004ce4:	6839      	ldr	r1, [r7, #0]
 8004ce6:	4618      	mov	r0, r3
 8004ce8:	f001 f994 	bl	8006014 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	4a29      	ldr	r2, [pc, #164]	; (8004d98 <HAL_TIM_PWM_Stop+0xc4>)
 8004cf2:	4293      	cmp	r3, r2
 8004cf4:	d117      	bne.n	8004d26 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	6a1a      	ldr	r2, [r3, #32]
 8004cfc:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d00:	4013      	ands	r3, r2
 8004d02:	2b00      	cmp	r3, #0
 8004d04:	d10f      	bne.n	8004d26 <HAL_TIM_PWM_Stop+0x52>
 8004d06:	687b      	ldr	r3, [r7, #4]
 8004d08:	681b      	ldr	r3, [r3, #0]
 8004d0a:	6a1a      	ldr	r2, [r3, #32]
 8004d0c:	f240 4344 	movw	r3, #1092	; 0x444
 8004d10:	4013      	ands	r3, r2
 8004d12:	2b00      	cmp	r3, #0
 8004d14:	d107      	bne.n	8004d26 <HAL_TIM_PWM_Stop+0x52>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	681b      	ldr	r3, [r3, #0]
 8004d20:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004d24:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8004d26:	687b      	ldr	r3, [r7, #4]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	6a1a      	ldr	r2, [r3, #32]
 8004d2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8004d30:	4013      	ands	r3, r2
 8004d32:	2b00      	cmp	r3, #0
 8004d34:	d10f      	bne.n	8004d56 <HAL_TIM_PWM_Stop+0x82>
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	681b      	ldr	r3, [r3, #0]
 8004d3a:	6a1a      	ldr	r2, [r3, #32]
 8004d3c:	f240 4344 	movw	r3, #1092	; 0x444
 8004d40:	4013      	ands	r3, r2
 8004d42:	2b00      	cmp	r3, #0
 8004d44:	d107      	bne.n	8004d56 <HAL_TIM_PWM_Stop+0x82>
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	681b      	ldr	r3, [r3, #0]
 8004d4a:	681a      	ldr	r2, [r3, #0]
 8004d4c:	687b      	ldr	r3, [r7, #4]
 8004d4e:	681b      	ldr	r3, [r3, #0]
 8004d50:	f022 0201 	bic.w	r2, r2, #1
 8004d54:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8004d56:	683b      	ldr	r3, [r7, #0]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d104      	bne.n	8004d66 <HAL_TIM_PWM_Stop+0x92>
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	2201      	movs	r2, #1
 8004d60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004d64:	e013      	b.n	8004d8e <HAL_TIM_PWM_Stop+0xba>
 8004d66:	683b      	ldr	r3, [r7, #0]
 8004d68:	2b04      	cmp	r3, #4
 8004d6a:	d104      	bne.n	8004d76 <HAL_TIM_PWM_Stop+0xa2>
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	2201      	movs	r2, #1
 8004d70:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004d74:	e00b      	b.n	8004d8e <HAL_TIM_PWM_Stop+0xba>
 8004d76:	683b      	ldr	r3, [r7, #0]
 8004d78:	2b08      	cmp	r3, #8
 8004d7a:	d104      	bne.n	8004d86 <HAL_TIM_PWM_Stop+0xb2>
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	2201      	movs	r2, #1
 8004d80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004d84:	e003      	b.n	8004d8e <HAL_TIM_PWM_Stop+0xba>
 8004d86:	687b      	ldr	r3, [r7, #4]
 8004d88:	2201      	movs	r2, #1
 8004d8a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8004d8e:	2300      	movs	r3, #0
}
 8004d90:	4618      	mov	r0, r3
 8004d92:	3708      	adds	r7, #8
 8004d94:	46bd      	mov	sp, r7
 8004d96:	bd80      	pop	{r7, pc}
 8004d98:	40010000 	.word	0x40010000

08004d9c <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8004d9c:	b580      	push	{r7, lr}
 8004d9e:	b082      	sub	sp, #8
 8004da0:	af00      	add	r7, sp, #0
 8004da2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004da4:	687b      	ldr	r3, [r7, #4]
 8004da6:	2b00      	cmp	r3, #0
 8004da8:	d101      	bne.n	8004dae <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8004daa:	2301      	movs	r3, #1
 8004dac:	e041      	b.n	8004e32 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004db4:	b2db      	uxtb	r3, r3
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d106      	bne.n	8004dc8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2200      	movs	r2, #0
 8004dbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8004dc2:	6878      	ldr	r0, [r7, #4]
 8004dc4:	f000 f839 	bl	8004e3a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2202      	movs	r2, #2
 8004dcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	681a      	ldr	r2, [r3, #0]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	3304      	adds	r3, #4
 8004dd8:	4619      	mov	r1, r3
 8004dda:	4610      	mov	r0, r2
 8004ddc:	f000 fd56 	bl	800588c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2201      	movs	r2, #1
 8004de4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	2201      	movs	r2, #1
 8004dec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	2201      	movs	r2, #1
 8004df4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	2201      	movs	r2, #1
 8004dfc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004e00:	687b      	ldr	r3, [r7, #4]
 8004e02:	2201      	movs	r2, #1
 8004e04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	2201      	movs	r2, #1
 8004e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	2201      	movs	r2, #1
 8004e14:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	2201      	movs	r2, #1
 8004e1c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	2201      	movs	r2, #1
 8004e24:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	2201      	movs	r2, #1
 8004e2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004e30:	2300      	movs	r3, #0
}
 8004e32:	4618      	mov	r0, r3
 8004e34:	3708      	adds	r7, #8
 8004e36:	46bd      	mov	sp, r7
 8004e38:	bd80      	pop	{r7, pc}

08004e3a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8004e3a:	b480      	push	{r7}
 8004e3c:	b083      	sub	sp, #12
 8004e3e:	af00      	add	r7, sp, #0
 8004e40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8004e42:	bf00      	nop
 8004e44:	370c      	adds	r7, #12
 8004e46:	46bd      	mov	sp, r7
 8004e48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e4c:	4770      	bx	lr
	...

08004e50 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8004e50:	b580      	push	{r7, lr}
 8004e52:	b084      	sub	sp, #16
 8004e54:	af00      	add	r7, sp, #0
 8004e56:	6078      	str	r0, [r7, #4]
 8004e58:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8004e5e:	683b      	ldr	r3, [r7, #0]
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d104      	bne.n	8004e6e <HAL_TIM_IC_Start_IT+0x1e>
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e6a:	b2db      	uxtb	r3, r3
 8004e6c:	e013      	b.n	8004e96 <HAL_TIM_IC_Start_IT+0x46>
 8004e6e:	683b      	ldr	r3, [r7, #0]
 8004e70:	2b04      	cmp	r3, #4
 8004e72:	d104      	bne.n	8004e7e <HAL_TIM_IC_Start_IT+0x2e>
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8004e7a:	b2db      	uxtb	r3, r3
 8004e7c:	e00b      	b.n	8004e96 <HAL_TIM_IC_Start_IT+0x46>
 8004e7e:	683b      	ldr	r3, [r7, #0]
 8004e80:	2b08      	cmp	r3, #8
 8004e82:	d104      	bne.n	8004e8e <HAL_TIM_IC_Start_IT+0x3e>
 8004e84:	687b      	ldr	r3, [r7, #4]
 8004e86:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8004e8a:	b2db      	uxtb	r3, r3
 8004e8c:	e003      	b.n	8004e96 <HAL_TIM_IC_Start_IT+0x46>
 8004e8e:	687b      	ldr	r3, [r7, #4]
 8004e90:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8004e94:	b2db      	uxtb	r3, r3
 8004e96:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8004e98:	683b      	ldr	r3, [r7, #0]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d104      	bne.n	8004ea8 <HAL_TIM_IC_Start_IT+0x58>
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8004ea4:	b2db      	uxtb	r3, r3
 8004ea6:	e013      	b.n	8004ed0 <HAL_TIM_IC_Start_IT+0x80>
 8004ea8:	683b      	ldr	r3, [r7, #0]
 8004eaa:	2b04      	cmp	r3, #4
 8004eac:	d104      	bne.n	8004eb8 <HAL_TIM_IC_Start_IT+0x68>
 8004eae:	687b      	ldr	r3, [r7, #4]
 8004eb0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8004eb4:	b2db      	uxtb	r3, r3
 8004eb6:	e00b      	b.n	8004ed0 <HAL_TIM_IC_Start_IT+0x80>
 8004eb8:	683b      	ldr	r3, [r7, #0]
 8004eba:	2b08      	cmp	r3, #8
 8004ebc:	d104      	bne.n	8004ec8 <HAL_TIM_IC_Start_IT+0x78>
 8004ebe:	687b      	ldr	r3, [r7, #4]
 8004ec0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8004ec4:	b2db      	uxtb	r3, r3
 8004ec6:	e003      	b.n	8004ed0 <HAL_TIM_IC_Start_IT+0x80>
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8004ece:	b2db      	uxtb	r3, r3
 8004ed0:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8004ed2:	7bbb      	ldrb	r3, [r7, #14]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d102      	bne.n	8004ede <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8004ed8:	7b7b      	ldrb	r3, [r7, #13]
 8004eda:	2b01      	cmp	r3, #1
 8004edc:	d001      	beq.n	8004ee2 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8004ede:	2301      	movs	r3, #1
 8004ee0:	e0c2      	b.n	8005068 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004ee2:	683b      	ldr	r3, [r7, #0]
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	d104      	bne.n	8004ef2 <HAL_TIM_IC_Start_IT+0xa2>
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2202      	movs	r2, #2
 8004eec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004ef0:	e013      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0xca>
 8004ef2:	683b      	ldr	r3, [r7, #0]
 8004ef4:	2b04      	cmp	r3, #4
 8004ef6:	d104      	bne.n	8004f02 <HAL_TIM_IC_Start_IT+0xb2>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	2202      	movs	r2, #2
 8004efc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004f00:	e00b      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0xca>
 8004f02:	683b      	ldr	r3, [r7, #0]
 8004f04:	2b08      	cmp	r3, #8
 8004f06:	d104      	bne.n	8004f12 <HAL_TIM_IC_Start_IT+0xc2>
 8004f08:	687b      	ldr	r3, [r7, #4]
 8004f0a:	2202      	movs	r2, #2
 8004f0c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004f10:	e003      	b.n	8004f1a <HAL_TIM_IC_Start_IT+0xca>
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2202      	movs	r2, #2
 8004f16:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d104      	bne.n	8004f2a <HAL_TIM_IC_Start_IT+0xda>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	2202      	movs	r2, #2
 8004f24:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004f28:	e013      	b.n	8004f52 <HAL_TIM_IC_Start_IT+0x102>
 8004f2a:	683b      	ldr	r3, [r7, #0]
 8004f2c:	2b04      	cmp	r3, #4
 8004f2e:	d104      	bne.n	8004f3a <HAL_TIM_IC_Start_IT+0xea>
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	2202      	movs	r2, #2
 8004f34:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004f38:	e00b      	b.n	8004f52 <HAL_TIM_IC_Start_IT+0x102>
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	2b08      	cmp	r3, #8
 8004f3e:	d104      	bne.n	8004f4a <HAL_TIM_IC_Start_IT+0xfa>
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	2202      	movs	r2, #2
 8004f44:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004f48:	e003      	b.n	8004f52 <HAL_TIM_IC_Start_IT+0x102>
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	2202      	movs	r2, #2
 8004f4e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8004f52:	683b      	ldr	r3, [r7, #0]
 8004f54:	2b0c      	cmp	r3, #12
 8004f56:	d841      	bhi.n	8004fdc <HAL_TIM_IC_Start_IT+0x18c>
 8004f58:	a201      	add	r2, pc, #4	; (adr r2, 8004f60 <HAL_TIM_IC_Start_IT+0x110>)
 8004f5a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004f5e:	bf00      	nop
 8004f60:	08004f95 	.word	0x08004f95
 8004f64:	08004fdd 	.word	0x08004fdd
 8004f68:	08004fdd 	.word	0x08004fdd
 8004f6c:	08004fdd 	.word	0x08004fdd
 8004f70:	08004fa7 	.word	0x08004fa7
 8004f74:	08004fdd 	.word	0x08004fdd
 8004f78:	08004fdd 	.word	0x08004fdd
 8004f7c:	08004fdd 	.word	0x08004fdd
 8004f80:	08004fb9 	.word	0x08004fb9
 8004f84:	08004fdd 	.word	0x08004fdd
 8004f88:	08004fdd 	.word	0x08004fdd
 8004f8c:	08004fdd 	.word	0x08004fdd
 8004f90:	08004fcb 	.word	0x08004fcb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	68da      	ldr	r2, [r3, #12]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0202 	orr.w	r2, r2, #2
 8004fa2:	60da      	str	r2, [r3, #12]
      break;
 8004fa4:	e01d      	b.n	8004fe2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	68da      	ldr	r2, [r3, #12]
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	681b      	ldr	r3, [r3, #0]
 8004fb0:	f042 0204 	orr.w	r2, r2, #4
 8004fb4:	60da      	str	r2, [r3, #12]
      break;
 8004fb6:	e014      	b.n	8004fe2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	68da      	ldr	r2, [r3, #12]
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f042 0208 	orr.w	r2, r2, #8
 8004fc6:	60da      	str	r2, [r3, #12]
      break;
 8004fc8:	e00b      	b.n	8004fe2 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	68da      	ldr	r2, [r3, #12]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	681b      	ldr	r3, [r3, #0]
 8004fd4:	f042 0210 	orr.w	r2, r2, #16
 8004fd8:	60da      	str	r2, [r3, #12]
      break;
 8004fda:	e002      	b.n	8004fe2 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 8004fdc:	2301      	movs	r3, #1
 8004fde:	73fb      	strb	r3, [r7, #15]
      break;
 8004fe0:	bf00      	nop
  }

  if (status == HAL_OK)
 8004fe2:	7bfb      	ldrb	r3, [r7, #15]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d13e      	bne.n	8005066 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	2201      	movs	r2, #1
 8004fee:	6839      	ldr	r1, [r7, #0]
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f001 f80f 	bl	8006014 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	681b      	ldr	r3, [r3, #0]
 8004ffa:	4a1d      	ldr	r2, [pc, #116]	; (8005070 <HAL_TIM_IC_Start_IT+0x220>)
 8004ffc:	4293      	cmp	r3, r2
 8004ffe:	d018      	beq.n	8005032 <HAL_TIM_IC_Start_IT+0x1e2>
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	681b      	ldr	r3, [r3, #0]
 8005004:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005008:	d013      	beq.n	8005032 <HAL_TIM_IC_Start_IT+0x1e2>
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	4a19      	ldr	r2, [pc, #100]	; (8005074 <HAL_TIM_IC_Start_IT+0x224>)
 8005010:	4293      	cmp	r3, r2
 8005012:	d00e      	beq.n	8005032 <HAL_TIM_IC_Start_IT+0x1e2>
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	4a17      	ldr	r2, [pc, #92]	; (8005078 <HAL_TIM_IC_Start_IT+0x228>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d009      	beq.n	8005032 <HAL_TIM_IC_Start_IT+0x1e2>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	681b      	ldr	r3, [r3, #0]
 8005022:	4a16      	ldr	r2, [pc, #88]	; (800507c <HAL_TIM_IC_Start_IT+0x22c>)
 8005024:	4293      	cmp	r3, r2
 8005026:	d004      	beq.n	8005032 <HAL_TIM_IC_Start_IT+0x1e2>
 8005028:	687b      	ldr	r3, [r7, #4]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	4a14      	ldr	r2, [pc, #80]	; (8005080 <HAL_TIM_IC_Start_IT+0x230>)
 800502e:	4293      	cmp	r3, r2
 8005030:	d111      	bne.n	8005056 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f003 0307 	and.w	r3, r3, #7
 800503c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800503e:	68bb      	ldr	r3, [r7, #8]
 8005040:	2b06      	cmp	r3, #6
 8005042:	d010      	beq.n	8005066 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	681a      	ldr	r2, [r3, #0]
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	f042 0201 	orr.w	r2, r2, #1
 8005052:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005054:	e007      	b.n	8005066 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8005056:	687b      	ldr	r3, [r7, #4]
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	681a      	ldr	r2, [r3, #0]
 800505c:	687b      	ldr	r3, [r7, #4]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f042 0201 	orr.w	r2, r2, #1
 8005064:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8005066:	7bfb      	ldrb	r3, [r7, #15]
}
 8005068:	4618      	mov	r0, r3
 800506a:	3710      	adds	r7, #16
 800506c:	46bd      	mov	sp, r7
 800506e:	bd80      	pop	{r7, pc}
 8005070:	40010000 	.word	0x40010000
 8005074:	40000400 	.word	0x40000400
 8005078:	40000800 	.word	0x40000800
 800507c:	40000c00 	.word	0x40000c00
 8005080:	40014000 	.word	0x40014000

08005084 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005084:	b580      	push	{r7, lr}
 8005086:	b084      	sub	sp, #16
 8005088:	af00      	add	r7, sp, #0
 800508a:	6078      	str	r0, [r7, #4]
 800508c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800508e:	2300      	movs	r3, #0
 8005090:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005092:	683b      	ldr	r3, [r7, #0]
 8005094:	2b0c      	cmp	r3, #12
 8005096:	d841      	bhi.n	800511c <HAL_TIM_IC_Stop_IT+0x98>
 8005098:	a201      	add	r2, pc, #4	; (adr r2, 80050a0 <HAL_TIM_IC_Stop_IT+0x1c>)
 800509a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800509e:	bf00      	nop
 80050a0:	080050d5 	.word	0x080050d5
 80050a4:	0800511d 	.word	0x0800511d
 80050a8:	0800511d 	.word	0x0800511d
 80050ac:	0800511d 	.word	0x0800511d
 80050b0:	080050e7 	.word	0x080050e7
 80050b4:	0800511d 	.word	0x0800511d
 80050b8:	0800511d 	.word	0x0800511d
 80050bc:	0800511d 	.word	0x0800511d
 80050c0:	080050f9 	.word	0x080050f9
 80050c4:	0800511d 	.word	0x0800511d
 80050c8:	0800511d 	.word	0x0800511d
 80050cc:	0800511d 	.word	0x0800511d
 80050d0:	0800510b 	.word	0x0800510b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	68da      	ldr	r2, [r3, #12]
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	f022 0202 	bic.w	r2, r2, #2
 80050e2:	60da      	str	r2, [r3, #12]
      break;
 80050e4:	e01d      	b.n	8005122 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	68da      	ldr	r2, [r3, #12]
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	f022 0204 	bic.w	r2, r2, #4
 80050f4:	60da      	str	r2, [r3, #12]
      break;
 80050f6:	e014      	b.n	8005122 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	68da      	ldr	r2, [r3, #12]
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f022 0208 	bic.w	r2, r2, #8
 8005106:	60da      	str	r2, [r3, #12]
      break;
 8005108:	e00b      	b.n	8005122 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	68da      	ldr	r2, [r3, #12]
 8005110:	687b      	ldr	r3, [r7, #4]
 8005112:	681b      	ldr	r3, [r3, #0]
 8005114:	f022 0210 	bic.w	r2, r2, #16
 8005118:	60da      	str	r2, [r3, #12]
      break;
 800511a:	e002      	b.n	8005122 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800511c:	2301      	movs	r3, #1
 800511e:	73fb      	strb	r3, [r7, #15]
      break;
 8005120:	bf00      	nop
  }

  if (status == HAL_OK)
 8005122:	7bfb      	ldrb	r3, [r7, #15]
 8005124:	2b00      	cmp	r3, #0
 8005126:	d156      	bne.n	80051d6 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005128:	687b      	ldr	r3, [r7, #4]
 800512a:	681b      	ldr	r3, [r3, #0]
 800512c:	2200      	movs	r2, #0
 800512e:	6839      	ldr	r1, [r7, #0]
 8005130:	4618      	mov	r0, r3
 8005132:	f000 ff6f 	bl	8006014 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	681b      	ldr	r3, [r3, #0]
 800513a:	6a1a      	ldr	r2, [r3, #32]
 800513c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005140:	4013      	ands	r3, r2
 8005142:	2b00      	cmp	r3, #0
 8005144:	d10f      	bne.n	8005166 <HAL_TIM_IC_Stop_IT+0xe2>
 8005146:	687b      	ldr	r3, [r7, #4]
 8005148:	681b      	ldr	r3, [r3, #0]
 800514a:	6a1a      	ldr	r2, [r3, #32]
 800514c:	f240 4344 	movw	r3, #1092	; 0x444
 8005150:	4013      	ands	r3, r2
 8005152:	2b00      	cmp	r3, #0
 8005154:	d107      	bne.n	8005166 <HAL_TIM_IC_Stop_IT+0xe2>
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	681b      	ldr	r3, [r3, #0]
 800515a:	681a      	ldr	r2, [r3, #0]
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	f022 0201 	bic.w	r2, r2, #1
 8005164:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d104      	bne.n	8005176 <HAL_TIM_IC_Stop_IT+0xf2>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	2201      	movs	r2, #1
 8005170:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005174:	e013      	b.n	800519e <HAL_TIM_IC_Stop_IT+0x11a>
 8005176:	683b      	ldr	r3, [r7, #0]
 8005178:	2b04      	cmp	r3, #4
 800517a:	d104      	bne.n	8005186 <HAL_TIM_IC_Stop_IT+0x102>
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	2201      	movs	r2, #1
 8005180:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005184:	e00b      	b.n	800519e <HAL_TIM_IC_Stop_IT+0x11a>
 8005186:	683b      	ldr	r3, [r7, #0]
 8005188:	2b08      	cmp	r3, #8
 800518a:	d104      	bne.n	8005196 <HAL_TIM_IC_Stop_IT+0x112>
 800518c:	687b      	ldr	r3, [r7, #4]
 800518e:	2201      	movs	r2, #1
 8005190:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005194:	e003      	b.n	800519e <HAL_TIM_IC_Stop_IT+0x11a>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	2201      	movs	r2, #1
 800519a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800519e:	683b      	ldr	r3, [r7, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d104      	bne.n	80051ae <HAL_TIM_IC_Stop_IT+0x12a>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2201      	movs	r2, #1
 80051a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80051ac:	e013      	b.n	80051d6 <HAL_TIM_IC_Stop_IT+0x152>
 80051ae:	683b      	ldr	r3, [r7, #0]
 80051b0:	2b04      	cmp	r3, #4
 80051b2:	d104      	bne.n	80051be <HAL_TIM_IC_Stop_IT+0x13a>
 80051b4:	687b      	ldr	r3, [r7, #4]
 80051b6:	2201      	movs	r2, #1
 80051b8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80051bc:	e00b      	b.n	80051d6 <HAL_TIM_IC_Stop_IT+0x152>
 80051be:	683b      	ldr	r3, [r7, #0]
 80051c0:	2b08      	cmp	r3, #8
 80051c2:	d104      	bne.n	80051ce <HAL_TIM_IC_Stop_IT+0x14a>
 80051c4:	687b      	ldr	r3, [r7, #4]
 80051c6:	2201      	movs	r2, #1
 80051c8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80051cc:	e003      	b.n	80051d6 <HAL_TIM_IC_Stop_IT+0x152>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	2201      	movs	r2, #1
 80051d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80051d6:	7bfb      	ldrb	r3, [r7, #15]
}
 80051d8:	4618      	mov	r0, r3
 80051da:	3710      	adds	r7, #16
 80051dc:	46bd      	mov	sp, r7
 80051de:	bd80      	pop	{r7, pc}

080051e0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80051e0:	b580      	push	{r7, lr}
 80051e2:	b082      	sub	sp, #8
 80051e4:	af00      	add	r7, sp, #0
 80051e6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80051e8:	687b      	ldr	r3, [r7, #4]
 80051ea:	681b      	ldr	r3, [r3, #0]
 80051ec:	691b      	ldr	r3, [r3, #16]
 80051ee:	f003 0302 	and.w	r3, r3, #2
 80051f2:	2b02      	cmp	r3, #2
 80051f4:	d122      	bne.n	800523c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	68db      	ldr	r3, [r3, #12]
 80051fc:	f003 0302 	and.w	r3, r3, #2
 8005200:	2b02      	cmp	r3, #2
 8005202:	d11b      	bne.n	800523c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f06f 0202 	mvn.w	r2, #2
 800520c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	2201      	movs	r2, #1
 8005212:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	699b      	ldr	r3, [r3, #24]
 800521a:	f003 0303 	and.w	r3, r3, #3
 800521e:	2b00      	cmp	r3, #0
 8005220:	d003      	beq.n	800522a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005222:	6878      	ldr	r0, [r7, #4]
 8005224:	f000 fb13 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 8005228:	e005      	b.n	8005236 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800522a:	6878      	ldr	r0, [r7, #4]
 800522c:	f000 fb05 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005230:	6878      	ldr	r0, [r7, #4]
 8005232:	f000 fb16 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	2200      	movs	r2, #0
 800523a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691b      	ldr	r3, [r3, #16]
 8005242:	f003 0304 	and.w	r3, r3, #4
 8005246:	2b04      	cmp	r3, #4
 8005248:	d122      	bne.n	8005290 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68db      	ldr	r3, [r3, #12]
 8005250:	f003 0304 	and.w	r3, r3, #4
 8005254:	2b04      	cmp	r3, #4
 8005256:	d11b      	bne.n	8005290 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	f06f 0204 	mvn.w	r2, #4
 8005260:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005262:	687b      	ldr	r3, [r7, #4]
 8005264:	2202      	movs	r2, #2
 8005266:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	681b      	ldr	r3, [r3, #0]
 800526c:	699b      	ldr	r3, [r3, #24]
 800526e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005272:	2b00      	cmp	r3, #0
 8005274:	d003      	beq.n	800527e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005276:	6878      	ldr	r0, [r7, #4]
 8005278:	f000 fae9 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 800527c:	e005      	b.n	800528a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800527e:	6878      	ldr	r0, [r7, #4]
 8005280:	f000 fadb 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005284:	6878      	ldr	r0, [r7, #4]
 8005286:	f000 faec 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	2200      	movs	r2, #0
 800528e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	691b      	ldr	r3, [r3, #16]
 8005296:	f003 0308 	and.w	r3, r3, #8
 800529a:	2b08      	cmp	r3, #8
 800529c:	d122      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	681b      	ldr	r3, [r3, #0]
 80052a2:	68db      	ldr	r3, [r3, #12]
 80052a4:	f003 0308 	and.w	r3, r3, #8
 80052a8:	2b08      	cmp	r3, #8
 80052aa:	d11b      	bne.n	80052e4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80052ac:	687b      	ldr	r3, [r7, #4]
 80052ae:	681b      	ldr	r3, [r3, #0]
 80052b0:	f06f 0208 	mvn.w	r2, #8
 80052b4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	2204      	movs	r2, #4
 80052ba:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	69db      	ldr	r3, [r3, #28]
 80052c2:	f003 0303 	and.w	r3, r3, #3
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d003      	beq.n	80052d2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80052ca:	6878      	ldr	r0, [r7, #4]
 80052cc:	f000 fabf 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 80052d0:	e005      	b.n	80052de <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80052d2:	6878      	ldr	r0, [r7, #4]
 80052d4:	f000 fab1 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80052d8:	6878      	ldr	r0, [r7, #4]
 80052da:	f000 fac2 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	2200      	movs	r2, #0
 80052e2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	691b      	ldr	r3, [r3, #16]
 80052ea:	f003 0310 	and.w	r3, r3, #16
 80052ee:	2b10      	cmp	r3, #16
 80052f0:	d122      	bne.n	8005338 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80052f2:	687b      	ldr	r3, [r7, #4]
 80052f4:	681b      	ldr	r3, [r3, #0]
 80052f6:	68db      	ldr	r3, [r3, #12]
 80052f8:	f003 0310 	and.w	r3, r3, #16
 80052fc:	2b10      	cmp	r3, #16
 80052fe:	d11b      	bne.n	8005338 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	681b      	ldr	r3, [r3, #0]
 8005304:	f06f 0210 	mvn.w	r2, #16
 8005308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2208      	movs	r2, #8
 800530e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	69db      	ldr	r3, [r3, #28]
 8005316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800531a:	2b00      	cmp	r3, #0
 800531c:	d003      	beq.n	8005326 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800531e:	6878      	ldr	r0, [r7, #4]
 8005320:	f000 fa95 	bl	800584e <HAL_TIM_IC_CaptureCallback>
 8005324:	e005      	b.n	8005332 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005326:	6878      	ldr	r0, [r7, #4]
 8005328:	f000 fa87 	bl	800583a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800532c:	6878      	ldr	r0, [r7, #4]
 800532e:	f000 fa98 	bl	8005862 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	2200      	movs	r2, #0
 8005336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	681b      	ldr	r3, [r3, #0]
 800533c:	691b      	ldr	r3, [r3, #16]
 800533e:	f003 0301 	and.w	r3, r3, #1
 8005342:	2b01      	cmp	r3, #1
 8005344:	d10e      	bne.n	8005364 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68db      	ldr	r3, [r3, #12]
 800534c:	f003 0301 	and.w	r3, r3, #1
 8005350:	2b01      	cmp	r3, #1
 8005352:	d107      	bne.n	8005364 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	681b      	ldr	r3, [r3, #0]
 8005358:	f06f 0201 	mvn.w	r2, #1
 800535c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800535e:	6878      	ldr	r0, [r7, #4]
 8005360:	f7fb ff8e 	bl	8001280 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	691b      	ldr	r3, [r3, #16]
 800536a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800536e:	2b80      	cmp	r3, #128	; 0x80
 8005370:	d10e      	bne.n	8005390 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	68db      	ldr	r3, [r3, #12]
 8005378:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800537c:	2b80      	cmp	r3, #128	; 0x80
 800537e:	d107      	bne.n	8005390 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005380:	687b      	ldr	r3, [r7, #4]
 8005382:	681b      	ldr	r3, [r3, #0]
 8005384:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005388:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800538a:	6878      	ldr	r0, [r7, #4]
 800538c:	f000 fee0 	bl	8006150 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005390:	687b      	ldr	r3, [r7, #4]
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	691b      	ldr	r3, [r3, #16]
 8005396:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800539a:	2b40      	cmp	r3, #64	; 0x40
 800539c:	d10e      	bne.n	80053bc <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800539e:	687b      	ldr	r3, [r7, #4]
 80053a0:	681b      	ldr	r3, [r3, #0]
 80053a2:	68db      	ldr	r3, [r3, #12]
 80053a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80053a8:	2b40      	cmp	r3, #64	; 0x40
 80053aa:	d107      	bne.n	80053bc <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80053b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80053b6:	6878      	ldr	r0, [r7, #4]
 80053b8:	f000 fa5d 	bl	8005876 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	681b      	ldr	r3, [r3, #0]
 80053c0:	691b      	ldr	r3, [r3, #16]
 80053c2:	f003 0320 	and.w	r3, r3, #32
 80053c6:	2b20      	cmp	r3, #32
 80053c8:	d10e      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	681b      	ldr	r3, [r3, #0]
 80053ce:	68db      	ldr	r3, [r3, #12]
 80053d0:	f003 0320 	and.w	r3, r3, #32
 80053d4:	2b20      	cmp	r3, #32
 80053d6:	d107      	bne.n	80053e8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	681b      	ldr	r3, [r3, #0]
 80053dc:	f06f 0220 	mvn.w	r2, #32
 80053e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80053e2:	6878      	ldr	r0, [r7, #4]
 80053e4:	f000 feaa 	bl	800613c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80053e8:	bf00      	nop
 80053ea:	3708      	adds	r7, #8
 80053ec:	46bd      	mov	sp, r7
 80053ee:	bd80      	pop	{r7, pc}

080053f0 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80053f0:	b580      	push	{r7, lr}
 80053f2:	b086      	sub	sp, #24
 80053f4:	af00      	add	r7, sp, #0
 80053f6:	60f8      	str	r0, [r7, #12]
 80053f8:	60b9      	str	r1, [r7, #8]
 80053fa:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80053fc:	2300      	movs	r3, #0
 80053fe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005400:	68fb      	ldr	r3, [r7, #12]
 8005402:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005406:	2b01      	cmp	r3, #1
 8005408:	d101      	bne.n	800540e <HAL_TIM_IC_ConfigChannel+0x1e>
 800540a:	2302      	movs	r3, #2
 800540c:	e088      	b.n	8005520 <HAL_TIM_IC_ConfigChannel+0x130>
 800540e:	68fb      	ldr	r3, [r7, #12]
 8005410:	2201      	movs	r2, #1
 8005412:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	2b00      	cmp	r3, #0
 800541a:	d11b      	bne.n	8005454 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800541c:	68fb      	ldr	r3, [r7, #12]
 800541e:	6818      	ldr	r0, [r3, #0]
 8005420:	68bb      	ldr	r3, [r7, #8]
 8005422:	6819      	ldr	r1, [r3, #0]
 8005424:	68bb      	ldr	r3, [r7, #8]
 8005426:	685a      	ldr	r2, [r3, #4]
 8005428:	68bb      	ldr	r3, [r7, #8]
 800542a:	68db      	ldr	r3, [r3, #12]
 800542c:	f000 fc3a 	bl	8005ca4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005430:	68fb      	ldr	r3, [r7, #12]
 8005432:	681b      	ldr	r3, [r3, #0]
 8005434:	699a      	ldr	r2, [r3, #24]
 8005436:	68fb      	ldr	r3, [r7, #12]
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f022 020c 	bic.w	r2, r2, #12
 800543e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005440:	68fb      	ldr	r3, [r7, #12]
 8005442:	681b      	ldr	r3, [r3, #0]
 8005444:	6999      	ldr	r1, [r3, #24]
 8005446:	68bb      	ldr	r3, [r7, #8]
 8005448:	689a      	ldr	r2, [r3, #8]
 800544a:	68fb      	ldr	r3, [r7, #12]
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	430a      	orrs	r2, r1
 8005450:	619a      	str	r2, [r3, #24]
 8005452:	e060      	b.n	8005516 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	2b04      	cmp	r3, #4
 8005458:	d11c      	bne.n	8005494 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800545a:	68fb      	ldr	r3, [r7, #12]
 800545c:	6818      	ldr	r0, [r3, #0]
 800545e:	68bb      	ldr	r3, [r7, #8]
 8005460:	6819      	ldr	r1, [r3, #0]
 8005462:	68bb      	ldr	r3, [r7, #8]
 8005464:	685a      	ldr	r2, [r3, #4]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	68db      	ldr	r3, [r3, #12]
 800546a:	f000 fcb2 	bl	8005dd2 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800546e:	68fb      	ldr	r3, [r7, #12]
 8005470:	681b      	ldr	r3, [r3, #0]
 8005472:	699a      	ldr	r2, [r3, #24]
 8005474:	68fb      	ldr	r3, [r7, #12]
 8005476:	681b      	ldr	r3, [r3, #0]
 8005478:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800547c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800547e:	68fb      	ldr	r3, [r7, #12]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	6999      	ldr	r1, [r3, #24]
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	689b      	ldr	r3, [r3, #8]
 8005488:	021a      	lsls	r2, r3, #8
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	430a      	orrs	r2, r1
 8005490:	619a      	str	r2, [r3, #24]
 8005492:	e040      	b.n	8005516 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	2b08      	cmp	r3, #8
 8005498:	d11b      	bne.n	80054d2 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	6818      	ldr	r0, [r3, #0]
 800549e:	68bb      	ldr	r3, [r7, #8]
 80054a0:	6819      	ldr	r1, [r3, #0]
 80054a2:	68bb      	ldr	r3, [r7, #8]
 80054a4:	685a      	ldr	r2, [r3, #4]
 80054a6:	68bb      	ldr	r3, [r7, #8]
 80054a8:	68db      	ldr	r3, [r3, #12]
 80054aa:	f000 fcff 	bl	8005eac <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80054ae:	68fb      	ldr	r3, [r7, #12]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	69da      	ldr	r2, [r3, #28]
 80054b4:	68fb      	ldr	r3, [r7, #12]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f022 020c 	bic.w	r2, r2, #12
 80054bc:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80054be:	68fb      	ldr	r3, [r7, #12]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	69d9      	ldr	r1, [r3, #28]
 80054c4:	68bb      	ldr	r3, [r7, #8]
 80054c6:	689a      	ldr	r2, [r3, #8]
 80054c8:	68fb      	ldr	r3, [r7, #12]
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	430a      	orrs	r2, r1
 80054ce:	61da      	str	r2, [r3, #28]
 80054d0:	e021      	b.n	8005516 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	2b0c      	cmp	r3, #12
 80054d6:	d11c      	bne.n	8005512 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	6818      	ldr	r0, [r3, #0]
 80054dc:	68bb      	ldr	r3, [r7, #8]
 80054de:	6819      	ldr	r1, [r3, #0]
 80054e0:	68bb      	ldr	r3, [r7, #8]
 80054e2:	685a      	ldr	r2, [r3, #4]
 80054e4:	68bb      	ldr	r3, [r7, #8]
 80054e6:	68db      	ldr	r3, [r3, #12]
 80054e8:	f000 fd1c 	bl	8005f24 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80054ec:	68fb      	ldr	r3, [r7, #12]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	69da      	ldr	r2, [r3, #28]
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80054fa:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80054fc:	68fb      	ldr	r3, [r7, #12]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	69d9      	ldr	r1, [r3, #28]
 8005502:	68bb      	ldr	r3, [r7, #8]
 8005504:	689b      	ldr	r3, [r3, #8]
 8005506:	021a      	lsls	r2, r3, #8
 8005508:	68fb      	ldr	r3, [r7, #12]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	430a      	orrs	r2, r1
 800550e:	61da      	str	r2, [r3, #28]
 8005510:	e001      	b.n	8005516 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005512:	2301      	movs	r3, #1
 8005514:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	2200      	movs	r2, #0
 800551a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800551e:	7dfb      	ldrb	r3, [r7, #23]
}
 8005520:	4618      	mov	r0, r3
 8005522:	3718      	adds	r7, #24
 8005524:	46bd      	mov	sp, r7
 8005526:	bd80      	pop	{r7, pc}

08005528 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005528:	b580      	push	{r7, lr}
 800552a:	b086      	sub	sp, #24
 800552c:	af00      	add	r7, sp, #0
 800552e:	60f8      	str	r0, [r7, #12]
 8005530:	60b9      	str	r1, [r7, #8]
 8005532:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005534:	2300      	movs	r3, #0
 8005536:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005538:	68fb      	ldr	r3, [r7, #12]
 800553a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800553e:	2b01      	cmp	r3, #1
 8005540:	d101      	bne.n	8005546 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005542:	2302      	movs	r3, #2
 8005544:	e0ae      	b.n	80056a4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	2201      	movs	r2, #1
 800554a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800554e:	687b      	ldr	r3, [r7, #4]
 8005550:	2b0c      	cmp	r3, #12
 8005552:	f200 809f 	bhi.w	8005694 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005556:	a201      	add	r2, pc, #4	; (adr r2, 800555c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800555c:	08005591 	.word	0x08005591
 8005560:	08005695 	.word	0x08005695
 8005564:	08005695 	.word	0x08005695
 8005568:	08005695 	.word	0x08005695
 800556c:	080055d1 	.word	0x080055d1
 8005570:	08005695 	.word	0x08005695
 8005574:	08005695 	.word	0x08005695
 8005578:	08005695 	.word	0x08005695
 800557c:	08005613 	.word	0x08005613
 8005580:	08005695 	.word	0x08005695
 8005584:	08005695 	.word	0x08005695
 8005588:	08005695 	.word	0x08005695
 800558c:	08005653 	.word	0x08005653
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005590:	68fb      	ldr	r3, [r7, #12]
 8005592:	681b      	ldr	r3, [r3, #0]
 8005594:	68b9      	ldr	r1, [r7, #8]
 8005596:	4618      	mov	r0, r3
 8005598:	f000 f9f8 	bl	800598c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	681b      	ldr	r3, [r3, #0]
 80055a0:	699a      	ldr	r2, [r3, #24]
 80055a2:	68fb      	ldr	r3, [r7, #12]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	f042 0208 	orr.w	r2, r2, #8
 80055aa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80055ac:	68fb      	ldr	r3, [r7, #12]
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	699a      	ldr	r2, [r3, #24]
 80055b2:	68fb      	ldr	r3, [r7, #12]
 80055b4:	681b      	ldr	r3, [r3, #0]
 80055b6:	f022 0204 	bic.w	r2, r2, #4
 80055ba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80055bc:	68fb      	ldr	r3, [r7, #12]
 80055be:	681b      	ldr	r3, [r3, #0]
 80055c0:	6999      	ldr	r1, [r3, #24]
 80055c2:	68bb      	ldr	r3, [r7, #8]
 80055c4:	691a      	ldr	r2, [r3, #16]
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	430a      	orrs	r2, r1
 80055cc:	619a      	str	r2, [r3, #24]
      break;
 80055ce:	e064      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80055d0:	68fb      	ldr	r3, [r7, #12]
 80055d2:	681b      	ldr	r3, [r3, #0]
 80055d4:	68b9      	ldr	r1, [r7, #8]
 80055d6:	4618      	mov	r0, r3
 80055d8:	f000 fa3e 	bl	8005a58 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80055dc:	68fb      	ldr	r3, [r7, #12]
 80055de:	681b      	ldr	r3, [r3, #0]
 80055e0:	699a      	ldr	r2, [r3, #24]
 80055e2:	68fb      	ldr	r3, [r7, #12]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80055ea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	699a      	ldr	r2, [r3, #24]
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055fa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80055fc:	68fb      	ldr	r3, [r7, #12]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	6999      	ldr	r1, [r3, #24]
 8005602:	68bb      	ldr	r3, [r7, #8]
 8005604:	691b      	ldr	r3, [r3, #16]
 8005606:	021a      	lsls	r2, r3, #8
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	681b      	ldr	r3, [r3, #0]
 800560c:	430a      	orrs	r2, r1
 800560e:	619a      	str	r2, [r3, #24]
      break;
 8005610:	e043      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005612:	68fb      	ldr	r3, [r7, #12]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	68b9      	ldr	r1, [r7, #8]
 8005618:	4618      	mov	r0, r3
 800561a:	f000 fa89 	bl	8005b30 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800561e:	68fb      	ldr	r3, [r7, #12]
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	69da      	ldr	r2, [r3, #28]
 8005624:	68fb      	ldr	r3, [r7, #12]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	f042 0208 	orr.w	r2, r2, #8
 800562c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	69da      	ldr	r2, [r3, #28]
 8005634:	68fb      	ldr	r3, [r7, #12]
 8005636:	681b      	ldr	r3, [r3, #0]
 8005638:	f022 0204 	bic.w	r2, r2, #4
 800563c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	681b      	ldr	r3, [r3, #0]
 8005642:	69d9      	ldr	r1, [r3, #28]
 8005644:	68bb      	ldr	r3, [r7, #8]
 8005646:	691a      	ldr	r2, [r3, #16]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	430a      	orrs	r2, r1
 800564e:	61da      	str	r2, [r3, #28]
      break;
 8005650:	e023      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	68b9      	ldr	r1, [r7, #8]
 8005658:	4618      	mov	r0, r3
 800565a:	f000 fad3 	bl	8005c04 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800565e:	68fb      	ldr	r3, [r7, #12]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	69da      	ldr	r2, [r3, #28]
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800566c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800566e:	68fb      	ldr	r3, [r7, #12]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	69da      	ldr	r2, [r3, #28]
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	681b      	ldr	r3, [r3, #0]
 8005678:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800567c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800567e:	68fb      	ldr	r3, [r7, #12]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	69d9      	ldr	r1, [r3, #28]
 8005684:	68bb      	ldr	r3, [r7, #8]
 8005686:	691b      	ldr	r3, [r3, #16]
 8005688:	021a      	lsls	r2, r3, #8
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	681b      	ldr	r3, [r3, #0]
 800568e:	430a      	orrs	r2, r1
 8005690:	61da      	str	r2, [r3, #28]
      break;
 8005692:	e002      	b.n	800569a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005694:	2301      	movs	r3, #1
 8005696:	75fb      	strb	r3, [r7, #23]
      break;
 8005698:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	2200      	movs	r2, #0
 800569e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80056a2:	7dfb      	ldrb	r3, [r7, #23]
}
 80056a4:	4618      	mov	r0, r3
 80056a6:	3718      	adds	r7, #24
 80056a8:	46bd      	mov	sp, r7
 80056aa:	bd80      	pop	{r7, pc}

080056ac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80056ac:	b580      	push	{r7, lr}
 80056ae:	b084      	sub	sp, #16
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
 80056b4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80056b6:	2300      	movs	r3, #0
 80056b8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80056c0:	2b01      	cmp	r3, #1
 80056c2:	d101      	bne.n	80056c8 <HAL_TIM_ConfigClockSource+0x1c>
 80056c4:	2302      	movs	r3, #2
 80056c6:	e0b4      	b.n	8005832 <HAL_TIM_ConfigClockSource+0x186>
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	2201      	movs	r2, #1
 80056cc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	2202      	movs	r2, #2
 80056d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	681b      	ldr	r3, [r3, #0]
 80056dc:	689b      	ldr	r3, [r3, #8]
 80056de:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80056e0:	68bb      	ldr	r3, [r7, #8]
 80056e2:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80056e6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80056e8:	68bb      	ldr	r3, [r7, #8]
 80056ea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80056ee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80056f0:	687b      	ldr	r3, [r7, #4]
 80056f2:	681b      	ldr	r3, [r3, #0]
 80056f4:	68ba      	ldr	r2, [r7, #8]
 80056f6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80056f8:	683b      	ldr	r3, [r7, #0]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005700:	d03e      	beq.n	8005780 <HAL_TIM_ConfigClockSource+0xd4>
 8005702:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005706:	f200 8087 	bhi.w	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 800570a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800570e:	f000 8086 	beq.w	800581e <HAL_TIM_ConfigClockSource+0x172>
 8005712:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005716:	d87f      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005718:	2b70      	cmp	r3, #112	; 0x70
 800571a:	d01a      	beq.n	8005752 <HAL_TIM_ConfigClockSource+0xa6>
 800571c:	2b70      	cmp	r3, #112	; 0x70
 800571e:	d87b      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005720:	2b60      	cmp	r3, #96	; 0x60
 8005722:	d050      	beq.n	80057c6 <HAL_TIM_ConfigClockSource+0x11a>
 8005724:	2b60      	cmp	r3, #96	; 0x60
 8005726:	d877      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005728:	2b50      	cmp	r3, #80	; 0x50
 800572a:	d03c      	beq.n	80057a6 <HAL_TIM_ConfigClockSource+0xfa>
 800572c:	2b50      	cmp	r3, #80	; 0x50
 800572e:	d873      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005730:	2b40      	cmp	r3, #64	; 0x40
 8005732:	d058      	beq.n	80057e6 <HAL_TIM_ConfigClockSource+0x13a>
 8005734:	2b40      	cmp	r3, #64	; 0x40
 8005736:	d86f      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005738:	2b30      	cmp	r3, #48	; 0x30
 800573a:	d064      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x15a>
 800573c:	2b30      	cmp	r3, #48	; 0x30
 800573e:	d86b      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005740:	2b20      	cmp	r3, #32
 8005742:	d060      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x15a>
 8005744:	2b20      	cmp	r3, #32
 8005746:	d867      	bhi.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
 8005748:	2b00      	cmp	r3, #0
 800574a:	d05c      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x15a>
 800574c:	2b10      	cmp	r3, #16
 800574e:	d05a      	beq.n	8005806 <HAL_TIM_ConfigClockSource+0x15a>
 8005750:	e062      	b.n	8005818 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	6818      	ldr	r0, [r3, #0]
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	6899      	ldr	r1, [r3, #8]
 800575a:	683b      	ldr	r3, [r7, #0]
 800575c:	685a      	ldr	r2, [r3, #4]
 800575e:	683b      	ldr	r3, [r7, #0]
 8005760:	68db      	ldr	r3, [r3, #12]
 8005762:	f000 fc37 	bl	8005fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800576e:	68bb      	ldr	r3, [r7, #8]
 8005770:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005774:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	681b      	ldr	r3, [r3, #0]
 800577a:	68ba      	ldr	r2, [r7, #8]
 800577c:	609a      	str	r2, [r3, #8]
      break;
 800577e:	e04f      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	6818      	ldr	r0, [r3, #0]
 8005784:	683b      	ldr	r3, [r7, #0]
 8005786:	6899      	ldr	r1, [r3, #8]
 8005788:	683b      	ldr	r3, [r7, #0]
 800578a:	685a      	ldr	r2, [r3, #4]
 800578c:	683b      	ldr	r3, [r7, #0]
 800578e:	68db      	ldr	r3, [r3, #12]
 8005790:	f000 fc20 	bl	8005fd4 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	689a      	ldr	r2, [r3, #8]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80057a2:	609a      	str	r2, [r3, #8]
      break;
 80057a4:	e03c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	6818      	ldr	r0, [r3, #0]
 80057aa:	683b      	ldr	r3, [r7, #0]
 80057ac:	6859      	ldr	r1, [r3, #4]
 80057ae:	683b      	ldr	r3, [r7, #0]
 80057b0:	68db      	ldr	r3, [r3, #12]
 80057b2:	461a      	mov	r2, r3
 80057b4:	f000 fade 	bl	8005d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	2150      	movs	r1, #80	; 0x50
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fbed 	bl	8005f9e <TIM_ITRx_SetConfig>
      break;
 80057c4:	e02c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80057c6:	687b      	ldr	r3, [r7, #4]
 80057c8:	6818      	ldr	r0, [r3, #0]
 80057ca:	683b      	ldr	r3, [r7, #0]
 80057cc:	6859      	ldr	r1, [r3, #4]
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	68db      	ldr	r3, [r3, #12]
 80057d2:	461a      	mov	r2, r3
 80057d4:	f000 fb3a 	bl	8005e4c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	2160      	movs	r1, #96	; 0x60
 80057de:	4618      	mov	r0, r3
 80057e0:	f000 fbdd 	bl	8005f9e <TIM_ITRx_SetConfig>
      break;
 80057e4:	e01c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	6818      	ldr	r0, [r3, #0]
 80057ea:	683b      	ldr	r3, [r7, #0]
 80057ec:	6859      	ldr	r1, [r3, #4]
 80057ee:	683b      	ldr	r3, [r7, #0]
 80057f0:	68db      	ldr	r3, [r3, #12]
 80057f2:	461a      	mov	r2, r3
 80057f4:	f000 fabe 	bl	8005d74 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80057f8:	687b      	ldr	r3, [r7, #4]
 80057fa:	681b      	ldr	r3, [r3, #0]
 80057fc:	2140      	movs	r1, #64	; 0x40
 80057fe:	4618      	mov	r0, r3
 8005800:	f000 fbcd 	bl	8005f9e <TIM_ITRx_SetConfig>
      break;
 8005804:	e00c      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	681a      	ldr	r2, [r3, #0]
 800580a:	683b      	ldr	r3, [r7, #0]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4619      	mov	r1, r3
 8005810:	4610      	mov	r0, r2
 8005812:	f000 fbc4 	bl	8005f9e <TIM_ITRx_SetConfig>
      break;
 8005816:	e003      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005818:	2301      	movs	r3, #1
 800581a:	73fb      	strb	r3, [r7, #15]
      break;
 800581c:	e000      	b.n	8005820 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800581e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	2201      	movs	r2, #1
 8005824:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	2200      	movs	r2, #0
 800582c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005830:	7bfb      	ldrb	r3, [r7, #15]
}
 8005832:	4618      	mov	r0, r3
 8005834:	3710      	adds	r7, #16
 8005836:	46bd      	mov	sp, r7
 8005838:	bd80      	pop	{r7, pc}

0800583a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800583a:	b480      	push	{r7}
 800583c:	b083      	sub	sp, #12
 800583e:	af00      	add	r7, sp, #0
 8005840:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005842:	bf00      	nop
 8005844:	370c      	adds	r7, #12
 8005846:	46bd      	mov	sp, r7
 8005848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584c:	4770      	bx	lr

0800584e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800584e:	b480      	push	{r7}
 8005850:	b083      	sub	sp, #12
 8005852:	af00      	add	r7, sp, #0
 8005854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005856:	bf00      	nop
 8005858:	370c      	adds	r7, #12
 800585a:	46bd      	mov	sp, r7
 800585c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005860:	4770      	bx	lr

08005862 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005862:	b480      	push	{r7}
 8005864:	b083      	sub	sp, #12
 8005866:	af00      	add	r7, sp, #0
 8005868:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800586a:	bf00      	nop
 800586c:	370c      	adds	r7, #12
 800586e:	46bd      	mov	sp, r7
 8005870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005874:	4770      	bx	lr

08005876 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005876:	b480      	push	{r7}
 8005878:	b083      	sub	sp, #12
 800587a:	af00      	add	r7, sp, #0
 800587c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800587e:	bf00      	nop
 8005880:	370c      	adds	r7, #12
 8005882:	46bd      	mov	sp, r7
 8005884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005888:	4770      	bx	lr
	...

0800588c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800588c:	b480      	push	{r7}
 800588e:	b085      	sub	sp, #20
 8005890:	af00      	add	r7, sp, #0
 8005892:	6078      	str	r0, [r7, #4]
 8005894:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	4a34      	ldr	r2, [pc, #208]	; (8005970 <TIM_Base_SetConfig+0xe4>)
 80058a0:	4293      	cmp	r3, r2
 80058a2:	d00f      	beq.n	80058c4 <TIM_Base_SetConfig+0x38>
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058aa:	d00b      	beq.n	80058c4 <TIM_Base_SetConfig+0x38>
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	4a31      	ldr	r2, [pc, #196]	; (8005974 <TIM_Base_SetConfig+0xe8>)
 80058b0:	4293      	cmp	r3, r2
 80058b2:	d007      	beq.n	80058c4 <TIM_Base_SetConfig+0x38>
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	4a30      	ldr	r2, [pc, #192]	; (8005978 <TIM_Base_SetConfig+0xec>)
 80058b8:	4293      	cmp	r3, r2
 80058ba:	d003      	beq.n	80058c4 <TIM_Base_SetConfig+0x38>
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	4a2f      	ldr	r2, [pc, #188]	; (800597c <TIM_Base_SetConfig+0xf0>)
 80058c0:	4293      	cmp	r3, r2
 80058c2:	d108      	bne.n	80058d6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80058ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80058cc:	683b      	ldr	r3, [r7, #0]
 80058ce:	685b      	ldr	r3, [r3, #4]
 80058d0:	68fa      	ldr	r2, [r7, #12]
 80058d2:	4313      	orrs	r3, r2
 80058d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	4a25      	ldr	r2, [pc, #148]	; (8005970 <TIM_Base_SetConfig+0xe4>)
 80058da:	4293      	cmp	r3, r2
 80058dc:	d01b      	beq.n	8005916 <TIM_Base_SetConfig+0x8a>
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80058e4:	d017      	beq.n	8005916 <TIM_Base_SetConfig+0x8a>
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	4a22      	ldr	r2, [pc, #136]	; (8005974 <TIM_Base_SetConfig+0xe8>)
 80058ea:	4293      	cmp	r3, r2
 80058ec:	d013      	beq.n	8005916 <TIM_Base_SetConfig+0x8a>
 80058ee:	687b      	ldr	r3, [r7, #4]
 80058f0:	4a21      	ldr	r2, [pc, #132]	; (8005978 <TIM_Base_SetConfig+0xec>)
 80058f2:	4293      	cmp	r3, r2
 80058f4:	d00f      	beq.n	8005916 <TIM_Base_SetConfig+0x8a>
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	4a20      	ldr	r2, [pc, #128]	; (800597c <TIM_Base_SetConfig+0xf0>)
 80058fa:	4293      	cmp	r3, r2
 80058fc:	d00b      	beq.n	8005916 <TIM_Base_SetConfig+0x8a>
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	4a1f      	ldr	r2, [pc, #124]	; (8005980 <TIM_Base_SetConfig+0xf4>)
 8005902:	4293      	cmp	r3, r2
 8005904:	d007      	beq.n	8005916 <TIM_Base_SetConfig+0x8a>
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	4a1e      	ldr	r2, [pc, #120]	; (8005984 <TIM_Base_SetConfig+0xf8>)
 800590a:	4293      	cmp	r3, r2
 800590c:	d003      	beq.n	8005916 <TIM_Base_SetConfig+0x8a>
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	4a1d      	ldr	r2, [pc, #116]	; (8005988 <TIM_Base_SetConfig+0xfc>)
 8005912:	4293      	cmp	r3, r2
 8005914:	d108      	bne.n	8005928 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005916:	68fb      	ldr	r3, [r7, #12]
 8005918:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800591c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	68db      	ldr	r3, [r3, #12]
 8005922:	68fa      	ldr	r2, [r7, #12]
 8005924:	4313      	orrs	r3, r2
 8005926:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005928:	68fb      	ldr	r3, [r7, #12]
 800592a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800592e:	683b      	ldr	r3, [r7, #0]
 8005930:	695b      	ldr	r3, [r3, #20]
 8005932:	4313      	orrs	r3, r2
 8005934:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	68fa      	ldr	r2, [r7, #12]
 800593a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	689a      	ldr	r2, [r3, #8]
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005944:	683b      	ldr	r3, [r7, #0]
 8005946:	681a      	ldr	r2, [r3, #0]
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	4a08      	ldr	r2, [pc, #32]	; (8005970 <TIM_Base_SetConfig+0xe4>)
 8005950:	4293      	cmp	r3, r2
 8005952:	d103      	bne.n	800595c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005954:	683b      	ldr	r3, [r7, #0]
 8005956:	691a      	ldr	r2, [r3, #16]
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	2201      	movs	r2, #1
 8005960:	615a      	str	r2, [r3, #20]
}
 8005962:	bf00      	nop
 8005964:	3714      	adds	r7, #20
 8005966:	46bd      	mov	sp, r7
 8005968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800596c:	4770      	bx	lr
 800596e:	bf00      	nop
 8005970:	40010000 	.word	0x40010000
 8005974:	40000400 	.word	0x40000400
 8005978:	40000800 	.word	0x40000800
 800597c:	40000c00 	.word	0x40000c00
 8005980:	40014000 	.word	0x40014000
 8005984:	40014400 	.word	0x40014400
 8005988:	40014800 	.word	0x40014800

0800598c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800598c:	b480      	push	{r7}
 800598e:	b087      	sub	sp, #28
 8005990:	af00      	add	r7, sp, #0
 8005992:	6078      	str	r0, [r7, #4]
 8005994:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005996:	687b      	ldr	r3, [r7, #4]
 8005998:	6a1b      	ldr	r3, [r3, #32]
 800599a:	f023 0201 	bic.w	r2, r3, #1
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	6a1b      	ldr	r3, [r3, #32]
 80059a6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	685b      	ldr	r3, [r3, #4]
 80059ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80059ae:	687b      	ldr	r3, [r7, #4]
 80059b0:	699b      	ldr	r3, [r3, #24]
 80059b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80059ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	f023 0303 	bic.w	r3, r3, #3
 80059c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80059c4:	683b      	ldr	r3, [r7, #0]
 80059c6:	681b      	ldr	r3, [r3, #0]
 80059c8:	68fa      	ldr	r2, [r7, #12]
 80059ca:	4313      	orrs	r3, r2
 80059cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80059ce:	697b      	ldr	r3, [r7, #20]
 80059d0:	f023 0302 	bic.w	r3, r3, #2
 80059d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	689b      	ldr	r3, [r3, #8]
 80059da:	697a      	ldr	r2, [r7, #20]
 80059dc:	4313      	orrs	r3, r2
 80059de:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	4a1c      	ldr	r2, [pc, #112]	; (8005a54 <TIM_OC1_SetConfig+0xc8>)
 80059e4:	4293      	cmp	r3, r2
 80059e6:	d10c      	bne.n	8005a02 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80059e8:	697b      	ldr	r3, [r7, #20]
 80059ea:	f023 0308 	bic.w	r3, r3, #8
 80059ee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	68db      	ldr	r3, [r3, #12]
 80059f4:	697a      	ldr	r2, [r7, #20]
 80059f6:	4313      	orrs	r3, r2
 80059f8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80059fa:	697b      	ldr	r3, [r7, #20]
 80059fc:	f023 0304 	bic.w	r3, r3, #4
 8005a00:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	4a13      	ldr	r2, [pc, #76]	; (8005a54 <TIM_OC1_SetConfig+0xc8>)
 8005a06:	4293      	cmp	r3, r2
 8005a08:	d111      	bne.n	8005a2e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005a0a:	693b      	ldr	r3, [r7, #16]
 8005a0c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005a10:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005a12:	693b      	ldr	r3, [r7, #16]
 8005a14:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005a18:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005a1a:	683b      	ldr	r3, [r7, #0]
 8005a1c:	695b      	ldr	r3, [r3, #20]
 8005a1e:	693a      	ldr	r2, [r7, #16]
 8005a20:	4313      	orrs	r3, r2
 8005a22:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005a24:	683b      	ldr	r3, [r7, #0]
 8005a26:	699b      	ldr	r3, [r3, #24]
 8005a28:	693a      	ldr	r2, [r7, #16]
 8005a2a:	4313      	orrs	r3, r2
 8005a2c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005a2e:	687b      	ldr	r3, [r7, #4]
 8005a30:	693a      	ldr	r2, [r7, #16]
 8005a32:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	68fa      	ldr	r2, [r7, #12]
 8005a38:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005a3a:	683b      	ldr	r3, [r7, #0]
 8005a3c:	685a      	ldr	r2, [r3, #4]
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	697a      	ldr	r2, [r7, #20]
 8005a46:	621a      	str	r2, [r3, #32]
}
 8005a48:	bf00      	nop
 8005a4a:	371c      	adds	r7, #28
 8005a4c:	46bd      	mov	sp, r7
 8005a4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a52:	4770      	bx	lr
 8005a54:	40010000 	.word	0x40010000

08005a58 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005a58:	b480      	push	{r7}
 8005a5a:	b087      	sub	sp, #28
 8005a5c:	af00      	add	r7, sp, #0
 8005a5e:	6078      	str	r0, [r7, #4]
 8005a60:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	6a1b      	ldr	r3, [r3, #32]
 8005a66:	f023 0210 	bic.w	r2, r3, #16
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	6a1b      	ldr	r3, [r3, #32]
 8005a72:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005a74:	687b      	ldr	r3, [r7, #4]
 8005a76:	685b      	ldr	r3, [r3, #4]
 8005a78:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	699b      	ldr	r3, [r3, #24]
 8005a7e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005a80:	68fb      	ldr	r3, [r7, #12]
 8005a82:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005a86:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005a8e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005a90:	683b      	ldr	r3, [r7, #0]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	021b      	lsls	r3, r3, #8
 8005a96:	68fa      	ldr	r2, [r7, #12]
 8005a98:	4313      	orrs	r3, r2
 8005a9a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005a9c:	697b      	ldr	r3, [r7, #20]
 8005a9e:	f023 0320 	bic.w	r3, r3, #32
 8005aa2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005aa4:	683b      	ldr	r3, [r7, #0]
 8005aa6:	689b      	ldr	r3, [r3, #8]
 8005aa8:	011b      	lsls	r3, r3, #4
 8005aaa:	697a      	ldr	r2, [r7, #20]
 8005aac:	4313      	orrs	r3, r2
 8005aae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	4a1e      	ldr	r2, [pc, #120]	; (8005b2c <TIM_OC2_SetConfig+0xd4>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d10d      	bne.n	8005ad4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005ab8:	697b      	ldr	r3, [r7, #20]
 8005aba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005abe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005ac0:	683b      	ldr	r3, [r7, #0]
 8005ac2:	68db      	ldr	r3, [r3, #12]
 8005ac4:	011b      	lsls	r3, r3, #4
 8005ac6:	697a      	ldr	r2, [r7, #20]
 8005ac8:	4313      	orrs	r3, r2
 8005aca:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005acc:	697b      	ldr	r3, [r7, #20]
 8005ace:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005ad2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ad4:	687b      	ldr	r3, [r7, #4]
 8005ad6:	4a15      	ldr	r2, [pc, #84]	; (8005b2c <TIM_OC2_SetConfig+0xd4>)
 8005ad8:	4293      	cmp	r3, r2
 8005ada:	d113      	bne.n	8005b04 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005adc:	693b      	ldr	r3, [r7, #16]
 8005ade:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ae2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005ae4:	693b      	ldr	r3, [r7, #16]
 8005ae6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005aea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	695b      	ldr	r3, [r3, #20]
 8005af0:	009b      	lsls	r3, r3, #2
 8005af2:	693a      	ldr	r2, [r7, #16]
 8005af4:	4313      	orrs	r3, r2
 8005af6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005af8:	683b      	ldr	r3, [r7, #0]
 8005afa:	699b      	ldr	r3, [r3, #24]
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	693a      	ldr	r2, [r7, #16]
 8005b00:	4313      	orrs	r3, r2
 8005b02:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	693a      	ldr	r2, [r7, #16]
 8005b08:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	68fa      	ldr	r2, [r7, #12]
 8005b0e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8005b10:	683b      	ldr	r3, [r7, #0]
 8005b12:	685a      	ldr	r2, [r3, #4]
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	697a      	ldr	r2, [r7, #20]
 8005b1c:	621a      	str	r2, [r3, #32]
}
 8005b1e:	bf00      	nop
 8005b20:	371c      	adds	r7, #28
 8005b22:	46bd      	mov	sp, r7
 8005b24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b28:	4770      	bx	lr
 8005b2a:	bf00      	nop
 8005b2c:	40010000 	.word	0x40010000

08005b30 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005b30:	b480      	push	{r7}
 8005b32:	b087      	sub	sp, #28
 8005b34:	af00      	add	r7, sp, #0
 8005b36:	6078      	str	r0, [r7, #4]
 8005b38:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6a1b      	ldr	r3, [r3, #32]
 8005b3e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	6a1b      	ldr	r3, [r3, #32]
 8005b4a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	685b      	ldr	r3, [r3, #4]
 8005b50:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	69db      	ldr	r3, [r3, #28]
 8005b56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005b5e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	f023 0303 	bic.w	r3, r3, #3
 8005b66:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	68fa      	ldr	r2, [r7, #12]
 8005b6e:	4313      	orrs	r3, r2
 8005b70:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8005b72:	697b      	ldr	r3, [r7, #20]
 8005b74:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005b78:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8005b7a:	683b      	ldr	r3, [r7, #0]
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	021b      	lsls	r3, r3, #8
 8005b80:	697a      	ldr	r2, [r7, #20]
 8005b82:	4313      	orrs	r3, r2
 8005b84:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8005b86:	687b      	ldr	r3, [r7, #4]
 8005b88:	4a1d      	ldr	r2, [pc, #116]	; (8005c00 <TIM_OC3_SetConfig+0xd0>)
 8005b8a:	4293      	cmp	r3, r2
 8005b8c:	d10d      	bne.n	8005baa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8005b8e:	697b      	ldr	r3, [r7, #20]
 8005b90:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005b94:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	68db      	ldr	r3, [r3, #12]
 8005b9a:	021b      	lsls	r3, r3, #8
 8005b9c:	697a      	ldr	r2, [r7, #20]
 8005b9e:	4313      	orrs	r3, r2
 8005ba0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8005ba2:	697b      	ldr	r3, [r7, #20]
 8005ba4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005ba8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	4a14      	ldr	r2, [pc, #80]	; (8005c00 <TIM_OC3_SetConfig+0xd0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d113      	bne.n	8005bda <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8005bb2:	693b      	ldr	r3, [r7, #16]
 8005bb4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8005bb8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8005bba:	693b      	ldr	r3, [r7, #16]
 8005bbc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005bc0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8005bc2:	683b      	ldr	r3, [r7, #0]
 8005bc4:	695b      	ldr	r3, [r3, #20]
 8005bc6:	011b      	lsls	r3, r3, #4
 8005bc8:	693a      	ldr	r2, [r7, #16]
 8005bca:	4313      	orrs	r3, r2
 8005bcc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8005bce:	683b      	ldr	r3, [r7, #0]
 8005bd0:	699b      	ldr	r3, [r3, #24]
 8005bd2:	011b      	lsls	r3, r3, #4
 8005bd4:	693a      	ldr	r2, [r7, #16]
 8005bd6:	4313      	orrs	r3, r2
 8005bd8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	693a      	ldr	r2, [r7, #16]
 8005bde:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	68fa      	ldr	r2, [r7, #12]
 8005be4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8005be6:	683b      	ldr	r3, [r7, #0]
 8005be8:	685a      	ldr	r2, [r3, #4]
 8005bea:	687b      	ldr	r3, [r7, #4]
 8005bec:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	697a      	ldr	r2, [r7, #20]
 8005bf2:	621a      	str	r2, [r3, #32]
}
 8005bf4:	bf00      	nop
 8005bf6:	371c      	adds	r7, #28
 8005bf8:	46bd      	mov	sp, r7
 8005bfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bfe:	4770      	bx	lr
 8005c00:	40010000 	.word	0x40010000

08005c04 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b087      	sub	sp, #28
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	6a1b      	ldr	r3, [r3, #32]
 8005c12:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6a1b      	ldr	r3, [r3, #32]
 8005c1e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	685b      	ldr	r3, [r3, #4]
 8005c24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	69db      	ldr	r3, [r3, #28]
 8005c2a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8005c2c:	68fb      	ldr	r3, [r7, #12]
 8005c2e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005c32:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005c3a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005c3c:	683b      	ldr	r3, [r7, #0]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	021b      	lsls	r3, r3, #8
 8005c42:	68fa      	ldr	r2, [r7, #12]
 8005c44:	4313      	orrs	r3, r2
 8005c46:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8005c48:	693b      	ldr	r3, [r7, #16]
 8005c4a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8005c4e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8005c50:	683b      	ldr	r3, [r7, #0]
 8005c52:	689b      	ldr	r3, [r3, #8]
 8005c54:	031b      	lsls	r3, r3, #12
 8005c56:	693a      	ldr	r2, [r7, #16]
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	4a10      	ldr	r2, [pc, #64]	; (8005ca0 <TIM_OC4_SetConfig+0x9c>)
 8005c60:	4293      	cmp	r3, r2
 8005c62:	d109      	bne.n	8005c78 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8005c64:	697b      	ldr	r3, [r7, #20]
 8005c66:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005c6a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8005c6c:	683b      	ldr	r3, [r7, #0]
 8005c6e:	695b      	ldr	r3, [r3, #20]
 8005c70:	019b      	lsls	r3, r3, #6
 8005c72:	697a      	ldr	r2, [r7, #20]
 8005c74:	4313      	orrs	r3, r2
 8005c76:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	697a      	ldr	r2, [r7, #20]
 8005c7c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8005c7e:	687b      	ldr	r3, [r7, #4]
 8005c80:	68fa      	ldr	r2, [r7, #12]
 8005c82:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	685a      	ldr	r2, [r3, #4]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	693a      	ldr	r2, [r7, #16]
 8005c90:	621a      	str	r2, [r3, #32]
}
 8005c92:	bf00      	nop
 8005c94:	371c      	adds	r7, #28
 8005c96:	46bd      	mov	sp, r7
 8005c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c9c:	4770      	bx	lr
 8005c9e:	bf00      	nop
 8005ca0:	40010000 	.word	0x40010000

08005ca4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8005ca4:	b480      	push	{r7}
 8005ca6:	b087      	sub	sp, #28
 8005ca8:	af00      	add	r7, sp, #0
 8005caa:	60f8      	str	r0, [r7, #12]
 8005cac:	60b9      	str	r1, [r7, #8]
 8005cae:	607a      	str	r2, [r7, #4]
 8005cb0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005cb2:	68fb      	ldr	r3, [r7, #12]
 8005cb4:	6a1b      	ldr	r3, [r3, #32]
 8005cb6:	f023 0201 	bic.w	r2, r3, #1
 8005cba:	68fb      	ldr	r3, [r7, #12]
 8005cbc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	699b      	ldr	r3, [r3, #24]
 8005cc2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005cc4:	68fb      	ldr	r3, [r7, #12]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8005cca:	68fb      	ldr	r3, [r7, #12]
 8005ccc:	4a24      	ldr	r2, [pc, #144]	; (8005d60 <TIM_TI1_SetConfig+0xbc>)
 8005cce:	4293      	cmp	r3, r2
 8005cd0:	d013      	beq.n	8005cfa <TIM_TI1_SetConfig+0x56>
 8005cd2:	68fb      	ldr	r3, [r7, #12]
 8005cd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005cd8:	d00f      	beq.n	8005cfa <TIM_TI1_SetConfig+0x56>
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	4a21      	ldr	r2, [pc, #132]	; (8005d64 <TIM_TI1_SetConfig+0xc0>)
 8005cde:	4293      	cmp	r3, r2
 8005ce0:	d00b      	beq.n	8005cfa <TIM_TI1_SetConfig+0x56>
 8005ce2:	68fb      	ldr	r3, [r7, #12]
 8005ce4:	4a20      	ldr	r2, [pc, #128]	; (8005d68 <TIM_TI1_SetConfig+0xc4>)
 8005ce6:	4293      	cmp	r3, r2
 8005ce8:	d007      	beq.n	8005cfa <TIM_TI1_SetConfig+0x56>
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	4a1f      	ldr	r2, [pc, #124]	; (8005d6c <TIM_TI1_SetConfig+0xc8>)
 8005cee:	4293      	cmp	r3, r2
 8005cf0:	d003      	beq.n	8005cfa <TIM_TI1_SetConfig+0x56>
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	4a1e      	ldr	r2, [pc, #120]	; (8005d70 <TIM_TI1_SetConfig+0xcc>)
 8005cf6:	4293      	cmp	r3, r2
 8005cf8:	d101      	bne.n	8005cfe <TIM_TI1_SetConfig+0x5a>
 8005cfa:	2301      	movs	r3, #1
 8005cfc:	e000      	b.n	8005d00 <TIM_TI1_SetConfig+0x5c>
 8005cfe:	2300      	movs	r3, #0
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d008      	beq.n	8005d16 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8005d04:	697b      	ldr	r3, [r7, #20]
 8005d06:	f023 0303 	bic.w	r3, r3, #3
 8005d0a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8005d0c:	697a      	ldr	r2, [r7, #20]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	4313      	orrs	r3, r2
 8005d12:	617b      	str	r3, [r7, #20]
 8005d14:	e003      	b.n	8005d1e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8005d16:	697b      	ldr	r3, [r7, #20]
 8005d18:	f043 0301 	orr.w	r3, r3, #1
 8005d1c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d1e:	697b      	ldr	r3, [r7, #20]
 8005d20:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d24:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8005d26:	683b      	ldr	r3, [r7, #0]
 8005d28:	011b      	lsls	r3, r3, #4
 8005d2a:	b2db      	uxtb	r3, r3
 8005d2c:	697a      	ldr	r2, [r7, #20]
 8005d2e:	4313      	orrs	r3, r2
 8005d30:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005d32:	693b      	ldr	r3, [r7, #16]
 8005d34:	f023 030a 	bic.w	r3, r3, #10
 8005d38:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8005d3a:	68bb      	ldr	r3, [r7, #8]
 8005d3c:	f003 030a 	and.w	r3, r3, #10
 8005d40:	693a      	ldr	r2, [r7, #16]
 8005d42:	4313      	orrs	r3, r2
 8005d44:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005d46:	68fb      	ldr	r3, [r7, #12]
 8005d48:	697a      	ldr	r2, [r7, #20]
 8005d4a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005d4c:	68fb      	ldr	r3, [r7, #12]
 8005d4e:	693a      	ldr	r2, [r7, #16]
 8005d50:	621a      	str	r2, [r3, #32]
}
 8005d52:	bf00      	nop
 8005d54:	371c      	adds	r7, #28
 8005d56:	46bd      	mov	sp, r7
 8005d58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d5c:	4770      	bx	lr
 8005d5e:	bf00      	nop
 8005d60:	40010000 	.word	0x40010000
 8005d64:	40000400 	.word	0x40000400
 8005d68:	40000800 	.word	0x40000800
 8005d6c:	40000c00 	.word	0x40000c00
 8005d70:	40014000 	.word	0x40014000

08005d74 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005d74:	b480      	push	{r7}
 8005d76:	b087      	sub	sp, #28
 8005d78:	af00      	add	r7, sp, #0
 8005d7a:	60f8      	str	r0, [r7, #12]
 8005d7c:	60b9      	str	r1, [r7, #8]
 8005d7e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8005d80:	68fb      	ldr	r3, [r7, #12]
 8005d82:	6a1b      	ldr	r3, [r3, #32]
 8005d84:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005d86:	68fb      	ldr	r3, [r7, #12]
 8005d88:	6a1b      	ldr	r3, [r3, #32]
 8005d8a:	f023 0201 	bic.w	r2, r3, #1
 8005d8e:	68fb      	ldr	r3, [r7, #12]
 8005d90:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005d92:	68fb      	ldr	r3, [r7, #12]
 8005d94:	699b      	ldr	r3, [r3, #24]
 8005d96:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8005d98:	693b      	ldr	r3, [r7, #16]
 8005d9a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005d9e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	011b      	lsls	r3, r3, #4
 8005da4:	693a      	ldr	r2, [r7, #16]
 8005da6:	4313      	orrs	r3, r2
 8005da8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8005daa:	697b      	ldr	r3, [r7, #20]
 8005dac:	f023 030a 	bic.w	r3, r3, #10
 8005db0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8005db2:	697a      	ldr	r2, [r7, #20]
 8005db4:	68bb      	ldr	r3, [r7, #8]
 8005db6:	4313      	orrs	r3, r2
 8005db8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8005dba:	68fb      	ldr	r3, [r7, #12]
 8005dbc:	693a      	ldr	r2, [r7, #16]
 8005dbe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005dc0:	68fb      	ldr	r3, [r7, #12]
 8005dc2:	697a      	ldr	r2, [r7, #20]
 8005dc4:	621a      	str	r2, [r3, #32]
}
 8005dc6:	bf00      	nop
 8005dc8:	371c      	adds	r7, #28
 8005dca:	46bd      	mov	sp, r7
 8005dcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dd0:	4770      	bx	lr

08005dd2 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005dd2:	b480      	push	{r7}
 8005dd4:	b087      	sub	sp, #28
 8005dd6:	af00      	add	r7, sp, #0
 8005dd8:	60f8      	str	r0, [r7, #12]
 8005dda:	60b9      	str	r1, [r7, #8]
 8005ddc:	607a      	str	r2, [r7, #4]
 8005dde:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	6a1b      	ldr	r3, [r3, #32]
 8005de4:	f023 0210 	bic.w	r2, r3, #16
 8005de8:	68fb      	ldr	r3, [r7, #12]
 8005dea:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005dec:	68fb      	ldr	r3, [r7, #12]
 8005dee:	699b      	ldr	r3, [r3, #24]
 8005df0:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	6a1b      	ldr	r3, [r3, #32]
 8005df6:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8005df8:	697b      	ldr	r3, [r7, #20]
 8005dfa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dfe:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	021b      	lsls	r3, r3, #8
 8005e04:	697a      	ldr	r2, [r7, #20]
 8005e06:	4313      	orrs	r3, r2
 8005e08:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e0a:	697b      	ldr	r3, [r7, #20]
 8005e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e10:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	031b      	lsls	r3, r3, #12
 8005e16:	b29b      	uxth	r3, r3
 8005e18:	697a      	ldr	r2, [r7, #20]
 8005e1a:	4313      	orrs	r3, r2
 8005e1c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e1e:	693b      	ldr	r3, [r7, #16]
 8005e20:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e24:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8005e26:	68bb      	ldr	r3, [r7, #8]
 8005e28:	011b      	lsls	r3, r3, #4
 8005e2a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8005e2e:	693a      	ldr	r2, [r7, #16]
 8005e30:	4313      	orrs	r3, r2
 8005e32:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	697a      	ldr	r2, [r7, #20]
 8005e38:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e3a:	68fb      	ldr	r3, [r7, #12]
 8005e3c:	693a      	ldr	r2, [r7, #16]
 8005e3e:	621a      	str	r2, [r3, #32]
}
 8005e40:	bf00      	nop
 8005e42:	371c      	adds	r7, #28
 8005e44:	46bd      	mov	sp, r7
 8005e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e4a:	4770      	bx	lr

08005e4c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8005e4c:	b480      	push	{r7}
 8005e4e:	b087      	sub	sp, #28
 8005e50:	af00      	add	r7, sp, #0
 8005e52:	60f8      	str	r0, [r7, #12]
 8005e54:	60b9      	str	r1, [r7, #8]
 8005e56:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005e58:	68fb      	ldr	r3, [r7, #12]
 8005e5a:	6a1b      	ldr	r3, [r3, #32]
 8005e5c:	f023 0210 	bic.w	r2, r3, #16
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	699b      	ldr	r3, [r3, #24]
 8005e68:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005e6a:	68fb      	ldr	r3, [r7, #12]
 8005e6c:	6a1b      	ldr	r3, [r3, #32]
 8005e6e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8005e70:	697b      	ldr	r3, [r7, #20]
 8005e72:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e76:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	031b      	lsls	r3, r3, #12
 8005e7c:	697a      	ldr	r2, [r7, #20]
 8005e7e:	4313      	orrs	r3, r2
 8005e80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8005e82:	693b      	ldr	r3, [r7, #16]
 8005e84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8005e88:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8005e8a:	68bb      	ldr	r3, [r7, #8]
 8005e8c:	011b      	lsls	r3, r3, #4
 8005e8e:	693a      	ldr	r2, [r7, #16]
 8005e90:	4313      	orrs	r3, r2
 8005e92:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8005e94:	68fb      	ldr	r3, [r7, #12]
 8005e96:	697a      	ldr	r2, [r7, #20]
 8005e98:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8005e9a:	68fb      	ldr	r3, [r7, #12]
 8005e9c:	693a      	ldr	r2, [r7, #16]
 8005e9e:	621a      	str	r2, [r3, #32]
}
 8005ea0:	bf00      	nop
 8005ea2:	371c      	adds	r7, #28
 8005ea4:	46bd      	mov	sp, r7
 8005ea6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eaa:	4770      	bx	lr

08005eac <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005eac:	b480      	push	{r7}
 8005eae:	b087      	sub	sp, #28
 8005eb0:	af00      	add	r7, sp, #0
 8005eb2:	60f8      	str	r0, [r7, #12]
 8005eb4:	60b9      	str	r1, [r7, #8]
 8005eb6:	607a      	str	r2, [r7, #4]
 8005eb8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6a1b      	ldr	r3, [r3, #32]
 8005ebe:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8005ec2:	68fb      	ldr	r3, [r7, #12]
 8005ec4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005ec6:	68fb      	ldr	r3, [r7, #12]
 8005ec8:	69db      	ldr	r3, [r3, #28]
 8005eca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005ecc:	68fb      	ldr	r3, [r7, #12]
 8005ece:	6a1b      	ldr	r3, [r3, #32]
 8005ed0:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8005ed2:	697b      	ldr	r3, [r7, #20]
 8005ed4:	f023 0303 	bic.w	r3, r3, #3
 8005ed8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8005eda:	697a      	ldr	r2, [r7, #20]
 8005edc:	687b      	ldr	r3, [r7, #4]
 8005ede:	4313      	orrs	r3, r2
 8005ee0:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005ee8:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8005eea:	683b      	ldr	r3, [r7, #0]
 8005eec:	011b      	lsls	r3, r3, #4
 8005eee:	b2db      	uxtb	r3, r3
 8005ef0:	697a      	ldr	r2, [r7, #20]
 8005ef2:	4313      	orrs	r3, r2
 8005ef4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8005ef6:	693b      	ldr	r3, [r7, #16]
 8005ef8:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8005efc:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8005efe:	68bb      	ldr	r3, [r7, #8]
 8005f00:	021b      	lsls	r3, r3, #8
 8005f02:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8005f06:	693a      	ldr	r2, [r7, #16]
 8005f08:	4313      	orrs	r3, r2
 8005f0a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	697a      	ldr	r2, [r7, #20]
 8005f10:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8005f12:	68fb      	ldr	r3, [r7, #12]
 8005f14:	693a      	ldr	r2, [r7, #16]
 8005f16:	621a      	str	r2, [r3, #32]
}
 8005f18:	bf00      	nop
 8005f1a:	371c      	adds	r7, #28
 8005f1c:	46bd      	mov	sp, r7
 8005f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f22:	4770      	bx	lr

08005f24 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8005f24:	b480      	push	{r7}
 8005f26:	b087      	sub	sp, #28
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	60f8      	str	r0, [r7, #12]
 8005f2c:	60b9      	str	r1, [r7, #8]
 8005f2e:	607a      	str	r2, [r7, #4]
 8005f30:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8005f3a:	68fb      	ldr	r3, [r7, #12]
 8005f3c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8005f3e:	68fb      	ldr	r3, [r7, #12]
 8005f40:	69db      	ldr	r3, [r3, #28]
 8005f42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8005f44:	68fb      	ldr	r3, [r7, #12]
 8005f46:	6a1b      	ldr	r3, [r3, #32]
 8005f48:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8005f4a:	697b      	ldr	r3, [r7, #20]
 8005f4c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f50:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	021b      	lsls	r3, r3, #8
 8005f56:	697a      	ldr	r2, [r7, #20]
 8005f58:	4313      	orrs	r3, r2
 8005f5a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8005f5c:	697b      	ldr	r3, [r7, #20]
 8005f5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005f62:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8005f64:	683b      	ldr	r3, [r7, #0]
 8005f66:	031b      	lsls	r3, r3, #12
 8005f68:	b29b      	uxth	r3, r3
 8005f6a:	697a      	ldr	r2, [r7, #20]
 8005f6c:	4313      	orrs	r3, r2
 8005f6e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8005f70:	693b      	ldr	r3, [r7, #16]
 8005f72:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8005f76:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8005f78:	68bb      	ldr	r3, [r7, #8]
 8005f7a:	031b      	lsls	r3, r3, #12
 8005f7c:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8005f80:	693a      	ldr	r2, [r7, #16]
 8005f82:	4313      	orrs	r3, r2
 8005f84:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8005f86:	68fb      	ldr	r3, [r7, #12]
 8005f88:	697a      	ldr	r2, [r7, #20]
 8005f8a:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8005f8c:	68fb      	ldr	r3, [r7, #12]
 8005f8e:	693a      	ldr	r2, [r7, #16]
 8005f90:	621a      	str	r2, [r3, #32]
}
 8005f92:	bf00      	nop
 8005f94:	371c      	adds	r7, #28
 8005f96:	46bd      	mov	sp, r7
 8005f98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f9c:	4770      	bx	lr

08005f9e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8005f9e:	b480      	push	{r7}
 8005fa0:	b085      	sub	sp, #20
 8005fa2:	af00      	add	r7, sp, #0
 8005fa4:	6078      	str	r0, [r7, #4]
 8005fa6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	689b      	ldr	r3, [r3, #8]
 8005fac:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8005fae:	68fb      	ldr	r3, [r7, #12]
 8005fb0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005fb4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8005fb6:	683a      	ldr	r2, [r7, #0]
 8005fb8:	68fb      	ldr	r3, [r7, #12]
 8005fba:	4313      	orrs	r3, r2
 8005fbc:	f043 0307 	orr.w	r3, r3, #7
 8005fc0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	68fa      	ldr	r2, [r7, #12]
 8005fc6:	609a      	str	r2, [r3, #8]
}
 8005fc8:	bf00      	nop
 8005fca:	3714      	adds	r7, #20
 8005fcc:	46bd      	mov	sp, r7
 8005fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd2:	4770      	bx	lr

08005fd4 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8005fd4:	b480      	push	{r7}
 8005fd6:	b087      	sub	sp, #28
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	60f8      	str	r0, [r7, #12]
 8005fdc:	60b9      	str	r1, [r7, #8]
 8005fde:	607a      	str	r2, [r7, #4]
 8005fe0:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8005fe2:	68fb      	ldr	r3, [r7, #12]
 8005fe4:	689b      	ldr	r3, [r3, #8]
 8005fe6:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005fe8:	697b      	ldr	r3, [r7, #20]
 8005fea:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005fee:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	021a      	lsls	r2, r3, #8
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	431a      	orrs	r2, r3
 8005ff8:	68bb      	ldr	r3, [r7, #8]
 8005ffa:	4313      	orrs	r3, r2
 8005ffc:	697a      	ldr	r2, [r7, #20]
 8005ffe:	4313      	orrs	r3, r2
 8006000:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	697a      	ldr	r2, [r7, #20]
 8006006:	609a      	str	r2, [r3, #8]
}
 8006008:	bf00      	nop
 800600a:	371c      	adds	r7, #28
 800600c:	46bd      	mov	sp, r7
 800600e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006012:	4770      	bx	lr

08006014 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006014:	b480      	push	{r7}
 8006016:	b087      	sub	sp, #28
 8006018:	af00      	add	r7, sp, #0
 800601a:	60f8      	str	r0, [r7, #12]
 800601c:	60b9      	str	r1, [r7, #8]
 800601e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006020:	68bb      	ldr	r3, [r7, #8]
 8006022:	f003 031f 	and.w	r3, r3, #31
 8006026:	2201      	movs	r2, #1
 8006028:	fa02 f303 	lsl.w	r3, r2, r3
 800602c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800602e:	68fb      	ldr	r3, [r7, #12]
 8006030:	6a1a      	ldr	r2, [r3, #32]
 8006032:	697b      	ldr	r3, [r7, #20]
 8006034:	43db      	mvns	r3, r3
 8006036:	401a      	ands	r2, r3
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	6a1a      	ldr	r2, [r3, #32]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	f003 031f 	and.w	r3, r3, #31
 8006046:	6879      	ldr	r1, [r7, #4]
 8006048:	fa01 f303 	lsl.w	r3, r1, r3
 800604c:	431a      	orrs	r2, r3
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	621a      	str	r2, [r3, #32]
}
 8006052:	bf00      	nop
 8006054:	371c      	adds	r7, #28
 8006056:	46bd      	mov	sp, r7
 8006058:	f85d 7b04 	ldr.w	r7, [sp], #4
 800605c:	4770      	bx	lr
	...

08006060 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006060:	b480      	push	{r7}
 8006062:	b085      	sub	sp, #20
 8006064:	af00      	add	r7, sp, #0
 8006066:	6078      	str	r0, [r7, #4]
 8006068:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006070:	2b01      	cmp	r3, #1
 8006072:	d101      	bne.n	8006078 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006074:	2302      	movs	r3, #2
 8006076:	e050      	b.n	800611a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	2201      	movs	r2, #1
 800607c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006080:	687b      	ldr	r3, [r7, #4]
 8006082:	2202      	movs	r2, #2
 8006084:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	685b      	ldr	r3, [r3, #4]
 800608e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	689b      	ldr	r3, [r3, #8]
 8006096:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800609e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80060a0:	683b      	ldr	r3, [r7, #0]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	68fa      	ldr	r2, [r7, #12]
 80060a6:	4313      	orrs	r3, r2
 80060a8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	68fa      	ldr	r2, [r7, #12]
 80060b0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	4a1c      	ldr	r2, [pc, #112]	; (8006128 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80060b8:	4293      	cmp	r3, r2
 80060ba:	d018      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80060c4:	d013      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060c6:	687b      	ldr	r3, [r7, #4]
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4a18      	ldr	r2, [pc, #96]	; (800612c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80060cc:	4293      	cmp	r3, r2
 80060ce:	d00e      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	4a16      	ldr	r2, [pc, #88]	; (8006130 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d009      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060da:	687b      	ldr	r3, [r7, #4]
 80060dc:	681b      	ldr	r3, [r3, #0]
 80060de:	4a15      	ldr	r2, [pc, #84]	; (8006134 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80060e0:	4293      	cmp	r3, r2
 80060e2:	d004      	beq.n	80060ee <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	4a13      	ldr	r2, [pc, #76]	; (8006138 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80060ea:	4293      	cmp	r3, r2
 80060ec:	d10c      	bne.n	8006108 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80060ee:	68bb      	ldr	r3, [r7, #8]
 80060f0:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80060f4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80060f6:	683b      	ldr	r3, [r7, #0]
 80060f8:	685b      	ldr	r3, [r3, #4]
 80060fa:	68ba      	ldr	r2, [r7, #8]
 80060fc:	4313      	orrs	r3, r2
 80060fe:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006100:	687b      	ldr	r3, [r7, #4]
 8006102:	681b      	ldr	r3, [r3, #0]
 8006104:	68ba      	ldr	r2, [r7, #8]
 8006106:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006108:	687b      	ldr	r3, [r7, #4]
 800610a:	2201      	movs	r2, #1
 800610c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006110:	687b      	ldr	r3, [r7, #4]
 8006112:	2200      	movs	r2, #0
 8006114:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006118:	2300      	movs	r3, #0
}
 800611a:	4618      	mov	r0, r3
 800611c:	3714      	adds	r7, #20
 800611e:	46bd      	mov	sp, r7
 8006120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006124:	4770      	bx	lr
 8006126:	bf00      	nop
 8006128:	40010000 	.word	0x40010000
 800612c:	40000400 	.word	0x40000400
 8006130:	40000800 	.word	0x40000800
 8006134:	40000c00 	.word	0x40000c00
 8006138:	40014000 	.word	0x40014000

0800613c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800613c:	b480      	push	{r7}
 800613e:	b083      	sub	sp, #12
 8006140:	af00      	add	r7, sp, #0
 8006142:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006144:	bf00      	nop
 8006146:	370c      	adds	r7, #12
 8006148:	46bd      	mov	sp, r7
 800614a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614e:	4770      	bx	lr

08006150 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006150:	b480      	push	{r7}
 8006152:	b083      	sub	sp, #12
 8006154:	af00      	add	r7, sp, #0
 8006156:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006158:	bf00      	nop
 800615a:	370c      	adds	r7, #12
 800615c:	46bd      	mov	sp, r7
 800615e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006162:	4770      	bx	lr

08006164 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006164:	b580      	push	{r7, lr}
 8006166:	b082      	sub	sp, #8
 8006168:	af00      	add	r7, sp, #0
 800616a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	2b00      	cmp	r3, #0
 8006170:	d101      	bne.n	8006176 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006172:	2301      	movs	r3, #1
 8006174:	e03f      	b.n	80061f6 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800617c:	b2db      	uxtb	r3, r3
 800617e:	2b00      	cmp	r3, #0
 8006180:	d106      	bne.n	8006190 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	2200      	movs	r2, #0
 8006186:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800618a:	6878      	ldr	r0, [r7, #4]
 800618c:	f7fc f876 	bl	800227c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	2224      	movs	r2, #36	; 0x24
 8006194:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	68da      	ldr	r2, [r3, #12]
 800619e:	687b      	ldr	r3, [r7, #4]
 80061a0:	681b      	ldr	r3, [r3, #0]
 80061a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80061a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80061a8:	6878      	ldr	r0, [r7, #4]
 80061aa:	f000 f897 	bl	80062dc <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	681b      	ldr	r3, [r3, #0]
 80061b2:	691a      	ldr	r2, [r3, #16]
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80061bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	695a      	ldr	r2, [r3, #20]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80061cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	681b      	ldr	r3, [r3, #0]
 80061d2:	68da      	ldr	r2, [r3, #12]
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80061dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2220      	movs	r2, #32
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80061ec:	687b      	ldr	r3, [r7, #4]
 80061ee:	2220      	movs	r2, #32
 80061f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80061f4:	2300      	movs	r3, #0
}
 80061f6:	4618      	mov	r0, r3
 80061f8:	3708      	adds	r7, #8
 80061fa:	46bd      	mov	sp, r7
 80061fc:	bd80      	pop	{r7, pc}

080061fe <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80061fe:	b580      	push	{r7, lr}
 8006200:	b084      	sub	sp, #16
 8006202:	af00      	add	r7, sp, #0
 8006204:	60f8      	str	r0, [r7, #12]
 8006206:	60b9      	str	r1, [r7, #8]
 8006208:	4613      	mov	r3, r2
 800620a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800620c:	68fb      	ldr	r3, [r7, #12]
 800620e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006212:	b2db      	uxtb	r3, r3
 8006214:	2b20      	cmp	r3, #32
 8006216:	d11d      	bne.n	8006254 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006218:	68bb      	ldr	r3, [r7, #8]
 800621a:	2b00      	cmp	r3, #0
 800621c:	d002      	beq.n	8006224 <HAL_UART_Receive_IT+0x26>
 800621e:	88fb      	ldrh	r3, [r7, #6]
 8006220:	2b00      	cmp	r3, #0
 8006222:	d101      	bne.n	8006228 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006224:	2301      	movs	r3, #1
 8006226:	e016      	b.n	8006256 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800622e:	2b01      	cmp	r3, #1
 8006230:	d101      	bne.n	8006236 <HAL_UART_Receive_IT+0x38>
 8006232:	2302      	movs	r3, #2
 8006234:	e00f      	b.n	8006256 <HAL_UART_Receive_IT+0x58>
 8006236:	68fb      	ldr	r3, [r7, #12]
 8006238:	2201      	movs	r2, #1
 800623a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	68fb      	ldr	r3, [r7, #12]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006244:	88fb      	ldrh	r3, [r7, #6]
 8006246:	461a      	mov	r2, r3
 8006248:	68b9      	ldr	r1, [r7, #8]
 800624a:	68f8      	ldr	r0, [r7, #12]
 800624c:	f000 f807 	bl	800625e <UART_Start_Receive_IT>
 8006250:	4603      	mov	r3, r0
 8006252:	e000      	b.n	8006256 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006254:	2302      	movs	r3, #2
  }
}
 8006256:	4618      	mov	r0, r3
 8006258:	3710      	adds	r7, #16
 800625a:	46bd      	mov	sp, r7
 800625c:	bd80      	pop	{r7, pc}

0800625e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800625e:	b480      	push	{r7}
 8006260:	b085      	sub	sp, #20
 8006262:	af00      	add	r7, sp, #0
 8006264:	60f8      	str	r0, [r7, #12]
 8006266:	60b9      	str	r1, [r7, #8]
 8006268:	4613      	mov	r3, r2
 800626a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	68ba      	ldr	r2, [r7, #8]
 8006270:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006272:	68fb      	ldr	r3, [r7, #12]
 8006274:	88fa      	ldrh	r2, [r7, #6]
 8006276:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006278:	68fb      	ldr	r3, [r7, #12]
 800627a:	88fa      	ldrh	r2, [r7, #6]
 800627c:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	2200      	movs	r2, #0
 8006282:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006284:	68fb      	ldr	r3, [r7, #12]
 8006286:	2222      	movs	r2, #34	; 0x22
 8006288:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	2200      	movs	r2, #0
 8006290:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006294:	68fb      	ldr	r3, [r7, #12]
 8006296:	691b      	ldr	r3, [r3, #16]
 8006298:	2b00      	cmp	r3, #0
 800629a:	d007      	beq.n	80062ac <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	68da      	ldr	r2, [r3, #12]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80062aa:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	695a      	ldr	r2, [r3, #20]
 80062b2:	68fb      	ldr	r3, [r7, #12]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	f042 0201 	orr.w	r2, r2, #1
 80062ba:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80062bc:	68fb      	ldr	r3, [r7, #12]
 80062be:	681b      	ldr	r3, [r3, #0]
 80062c0:	68da      	ldr	r2, [r3, #12]
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	f042 0220 	orr.w	r2, r2, #32
 80062ca:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80062cc:	2300      	movs	r3, #0
}
 80062ce:	4618      	mov	r0, r3
 80062d0:	3714      	adds	r7, #20
 80062d2:	46bd      	mov	sp, r7
 80062d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062d8:	4770      	bx	lr
	...

080062dc <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80062dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80062e0:	b0c0      	sub	sp, #256	; 0x100
 80062e2:	af00      	add	r7, sp, #0
 80062e4:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80062e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062ec:	681b      	ldr	r3, [r3, #0]
 80062ee:	691b      	ldr	r3, [r3, #16]
 80062f0:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80062f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062f8:	68d9      	ldr	r1, [r3, #12]
 80062fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80062fe:	681a      	ldr	r2, [r3, #0]
 8006300:	ea40 0301 	orr.w	r3, r0, r1
 8006304:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006306:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800630a:	689a      	ldr	r2, [r3, #8]
 800630c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006310:	691b      	ldr	r3, [r3, #16]
 8006312:	431a      	orrs	r2, r3
 8006314:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006318:	695b      	ldr	r3, [r3, #20]
 800631a:	431a      	orrs	r2, r3
 800631c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006320:	69db      	ldr	r3, [r3, #28]
 8006322:	4313      	orrs	r3, r2
 8006324:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800632c:	681b      	ldr	r3, [r3, #0]
 800632e:	68db      	ldr	r3, [r3, #12]
 8006330:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006334:	f021 010c 	bic.w	r1, r1, #12
 8006338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800633c:	681a      	ldr	r2, [r3, #0]
 800633e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006342:	430b      	orrs	r3, r1
 8006344:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006346:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	695b      	ldr	r3, [r3, #20]
 800634e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006356:	6999      	ldr	r1, [r3, #24]
 8006358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800635c:	681a      	ldr	r2, [r3, #0]
 800635e:	ea40 0301 	orr.w	r3, r0, r1
 8006362:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006368:	681a      	ldr	r2, [r3, #0]
 800636a:	4b8f      	ldr	r3, [pc, #572]	; (80065a8 <UART_SetConfig+0x2cc>)
 800636c:	429a      	cmp	r2, r3
 800636e:	d005      	beq.n	800637c <UART_SetConfig+0xa0>
 8006370:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006374:	681a      	ldr	r2, [r3, #0]
 8006376:	4b8d      	ldr	r3, [pc, #564]	; (80065ac <UART_SetConfig+0x2d0>)
 8006378:	429a      	cmp	r2, r3
 800637a:	d104      	bne.n	8006386 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800637c:	f7fe f854 	bl	8004428 <HAL_RCC_GetPCLK2Freq>
 8006380:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006384:	e003      	b.n	800638e <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006386:	f7fe f83b 	bl	8004400 <HAL_RCC_GetPCLK1Freq>
 800638a:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800638e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006392:	69db      	ldr	r3, [r3, #28]
 8006394:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006398:	f040 810c 	bne.w	80065b4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800639c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80063a0:	2200      	movs	r2, #0
 80063a2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80063a6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80063aa:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80063ae:	4622      	mov	r2, r4
 80063b0:	462b      	mov	r3, r5
 80063b2:	1891      	adds	r1, r2, r2
 80063b4:	65b9      	str	r1, [r7, #88]	; 0x58
 80063b6:	415b      	adcs	r3, r3
 80063b8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80063ba:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80063be:	4621      	mov	r1, r4
 80063c0:	eb12 0801 	adds.w	r8, r2, r1
 80063c4:	4629      	mov	r1, r5
 80063c6:	eb43 0901 	adc.w	r9, r3, r1
 80063ca:	f04f 0200 	mov.w	r2, #0
 80063ce:	f04f 0300 	mov.w	r3, #0
 80063d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80063d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80063da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80063de:	4690      	mov	r8, r2
 80063e0:	4699      	mov	r9, r3
 80063e2:	4623      	mov	r3, r4
 80063e4:	eb18 0303 	adds.w	r3, r8, r3
 80063e8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80063ec:	462b      	mov	r3, r5
 80063ee:	eb49 0303 	adc.w	r3, r9, r3
 80063f2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80063f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80063fa:	685b      	ldr	r3, [r3, #4]
 80063fc:	2200      	movs	r2, #0
 80063fe:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8006402:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8006406:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800640a:	460b      	mov	r3, r1
 800640c:	18db      	adds	r3, r3, r3
 800640e:	653b      	str	r3, [r7, #80]	; 0x50
 8006410:	4613      	mov	r3, r2
 8006412:	eb42 0303 	adc.w	r3, r2, r3
 8006416:	657b      	str	r3, [r7, #84]	; 0x54
 8006418:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800641c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006420:	f7f9 fee0 	bl	80001e4 <__aeabi_uldivmod>
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	4b61      	ldr	r3, [pc, #388]	; (80065b0 <UART_SetConfig+0x2d4>)
 800642a:	fba3 2302 	umull	r2, r3, r3, r2
 800642e:	095b      	lsrs	r3, r3, #5
 8006430:	011c      	lsls	r4, r3, #4
 8006432:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006436:	2200      	movs	r2, #0
 8006438:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800643c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006440:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006444:	4642      	mov	r2, r8
 8006446:	464b      	mov	r3, r9
 8006448:	1891      	adds	r1, r2, r2
 800644a:	64b9      	str	r1, [r7, #72]	; 0x48
 800644c:	415b      	adcs	r3, r3
 800644e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006450:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006454:	4641      	mov	r1, r8
 8006456:	eb12 0a01 	adds.w	sl, r2, r1
 800645a:	4649      	mov	r1, r9
 800645c:	eb43 0b01 	adc.w	fp, r3, r1
 8006460:	f04f 0200 	mov.w	r2, #0
 8006464:	f04f 0300 	mov.w	r3, #0
 8006468:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800646c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006470:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006474:	4692      	mov	sl, r2
 8006476:	469b      	mov	fp, r3
 8006478:	4643      	mov	r3, r8
 800647a:	eb1a 0303 	adds.w	r3, sl, r3
 800647e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006482:	464b      	mov	r3, r9
 8006484:	eb4b 0303 	adc.w	r3, fp, r3
 8006488:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800648c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006490:	685b      	ldr	r3, [r3, #4]
 8006492:	2200      	movs	r2, #0
 8006494:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006498:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800649c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80064a0:	460b      	mov	r3, r1
 80064a2:	18db      	adds	r3, r3, r3
 80064a4:	643b      	str	r3, [r7, #64]	; 0x40
 80064a6:	4613      	mov	r3, r2
 80064a8:	eb42 0303 	adc.w	r3, r2, r3
 80064ac:	647b      	str	r3, [r7, #68]	; 0x44
 80064ae:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80064b2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80064b6:	f7f9 fe95 	bl	80001e4 <__aeabi_uldivmod>
 80064ba:	4602      	mov	r2, r0
 80064bc:	460b      	mov	r3, r1
 80064be:	4611      	mov	r1, r2
 80064c0:	4b3b      	ldr	r3, [pc, #236]	; (80065b0 <UART_SetConfig+0x2d4>)
 80064c2:	fba3 2301 	umull	r2, r3, r3, r1
 80064c6:	095b      	lsrs	r3, r3, #5
 80064c8:	2264      	movs	r2, #100	; 0x64
 80064ca:	fb02 f303 	mul.w	r3, r2, r3
 80064ce:	1acb      	subs	r3, r1, r3
 80064d0:	00db      	lsls	r3, r3, #3
 80064d2:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80064d6:	4b36      	ldr	r3, [pc, #216]	; (80065b0 <UART_SetConfig+0x2d4>)
 80064d8:	fba3 2302 	umull	r2, r3, r3, r2
 80064dc:	095b      	lsrs	r3, r3, #5
 80064de:	005b      	lsls	r3, r3, #1
 80064e0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80064e4:	441c      	add	r4, r3
 80064e6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80064ea:	2200      	movs	r2, #0
 80064ec:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80064f0:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80064f4:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80064f8:	4642      	mov	r2, r8
 80064fa:	464b      	mov	r3, r9
 80064fc:	1891      	adds	r1, r2, r2
 80064fe:	63b9      	str	r1, [r7, #56]	; 0x38
 8006500:	415b      	adcs	r3, r3
 8006502:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006504:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006508:	4641      	mov	r1, r8
 800650a:	1851      	adds	r1, r2, r1
 800650c:	6339      	str	r1, [r7, #48]	; 0x30
 800650e:	4649      	mov	r1, r9
 8006510:	414b      	adcs	r3, r1
 8006512:	637b      	str	r3, [r7, #52]	; 0x34
 8006514:	f04f 0200 	mov.w	r2, #0
 8006518:	f04f 0300 	mov.w	r3, #0
 800651c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006520:	4659      	mov	r1, fp
 8006522:	00cb      	lsls	r3, r1, #3
 8006524:	4651      	mov	r1, sl
 8006526:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800652a:	4651      	mov	r1, sl
 800652c:	00ca      	lsls	r2, r1, #3
 800652e:	4610      	mov	r0, r2
 8006530:	4619      	mov	r1, r3
 8006532:	4603      	mov	r3, r0
 8006534:	4642      	mov	r2, r8
 8006536:	189b      	adds	r3, r3, r2
 8006538:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800653c:	464b      	mov	r3, r9
 800653e:	460a      	mov	r2, r1
 8006540:	eb42 0303 	adc.w	r3, r2, r3
 8006544:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006548:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800654c:	685b      	ldr	r3, [r3, #4]
 800654e:	2200      	movs	r2, #0
 8006550:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006554:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006558:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800655c:	460b      	mov	r3, r1
 800655e:	18db      	adds	r3, r3, r3
 8006560:	62bb      	str	r3, [r7, #40]	; 0x28
 8006562:	4613      	mov	r3, r2
 8006564:	eb42 0303 	adc.w	r3, r2, r3
 8006568:	62fb      	str	r3, [r7, #44]	; 0x2c
 800656a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800656e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006572:	f7f9 fe37 	bl	80001e4 <__aeabi_uldivmod>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4b0d      	ldr	r3, [pc, #52]	; (80065b0 <UART_SetConfig+0x2d4>)
 800657c:	fba3 1302 	umull	r1, r3, r3, r2
 8006580:	095b      	lsrs	r3, r3, #5
 8006582:	2164      	movs	r1, #100	; 0x64
 8006584:	fb01 f303 	mul.w	r3, r1, r3
 8006588:	1ad3      	subs	r3, r2, r3
 800658a:	00db      	lsls	r3, r3, #3
 800658c:	3332      	adds	r3, #50	; 0x32
 800658e:	4a08      	ldr	r2, [pc, #32]	; (80065b0 <UART_SetConfig+0x2d4>)
 8006590:	fba2 2303 	umull	r2, r3, r2, r3
 8006594:	095b      	lsrs	r3, r3, #5
 8006596:	f003 0207 	and.w	r2, r3, #7
 800659a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	4422      	add	r2, r4
 80065a2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80065a4:	e105      	b.n	80067b2 <UART_SetConfig+0x4d6>
 80065a6:	bf00      	nop
 80065a8:	40011000 	.word	0x40011000
 80065ac:	40011400 	.word	0x40011400
 80065b0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80065b4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80065b8:	2200      	movs	r2, #0
 80065ba:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80065be:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80065c2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80065c6:	4642      	mov	r2, r8
 80065c8:	464b      	mov	r3, r9
 80065ca:	1891      	adds	r1, r2, r2
 80065cc:	6239      	str	r1, [r7, #32]
 80065ce:	415b      	adcs	r3, r3
 80065d0:	627b      	str	r3, [r7, #36]	; 0x24
 80065d2:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80065d6:	4641      	mov	r1, r8
 80065d8:	1854      	adds	r4, r2, r1
 80065da:	4649      	mov	r1, r9
 80065dc:	eb43 0501 	adc.w	r5, r3, r1
 80065e0:	f04f 0200 	mov.w	r2, #0
 80065e4:	f04f 0300 	mov.w	r3, #0
 80065e8:	00eb      	lsls	r3, r5, #3
 80065ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80065ee:	00e2      	lsls	r2, r4, #3
 80065f0:	4614      	mov	r4, r2
 80065f2:	461d      	mov	r5, r3
 80065f4:	4643      	mov	r3, r8
 80065f6:	18e3      	adds	r3, r4, r3
 80065f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80065fc:	464b      	mov	r3, r9
 80065fe:	eb45 0303 	adc.w	r3, r5, r3
 8006602:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006606:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800660a:	685b      	ldr	r3, [r3, #4]
 800660c:	2200      	movs	r2, #0
 800660e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006612:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006616:	f04f 0200 	mov.w	r2, #0
 800661a:	f04f 0300 	mov.w	r3, #0
 800661e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006622:	4629      	mov	r1, r5
 8006624:	008b      	lsls	r3, r1, #2
 8006626:	4621      	mov	r1, r4
 8006628:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800662c:	4621      	mov	r1, r4
 800662e:	008a      	lsls	r2, r1, #2
 8006630:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006634:	f7f9 fdd6 	bl	80001e4 <__aeabi_uldivmod>
 8006638:	4602      	mov	r2, r0
 800663a:	460b      	mov	r3, r1
 800663c:	4b60      	ldr	r3, [pc, #384]	; (80067c0 <UART_SetConfig+0x4e4>)
 800663e:	fba3 2302 	umull	r2, r3, r3, r2
 8006642:	095b      	lsrs	r3, r3, #5
 8006644:	011c      	lsls	r4, r3, #4
 8006646:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800664a:	2200      	movs	r2, #0
 800664c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006650:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006654:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006658:	4642      	mov	r2, r8
 800665a:	464b      	mov	r3, r9
 800665c:	1891      	adds	r1, r2, r2
 800665e:	61b9      	str	r1, [r7, #24]
 8006660:	415b      	adcs	r3, r3
 8006662:	61fb      	str	r3, [r7, #28]
 8006664:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006668:	4641      	mov	r1, r8
 800666a:	1851      	adds	r1, r2, r1
 800666c:	6139      	str	r1, [r7, #16]
 800666e:	4649      	mov	r1, r9
 8006670:	414b      	adcs	r3, r1
 8006672:	617b      	str	r3, [r7, #20]
 8006674:	f04f 0200 	mov.w	r2, #0
 8006678:	f04f 0300 	mov.w	r3, #0
 800667c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006680:	4659      	mov	r1, fp
 8006682:	00cb      	lsls	r3, r1, #3
 8006684:	4651      	mov	r1, sl
 8006686:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800668a:	4651      	mov	r1, sl
 800668c:	00ca      	lsls	r2, r1, #3
 800668e:	4610      	mov	r0, r2
 8006690:	4619      	mov	r1, r3
 8006692:	4603      	mov	r3, r0
 8006694:	4642      	mov	r2, r8
 8006696:	189b      	adds	r3, r3, r2
 8006698:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800669c:	464b      	mov	r3, r9
 800669e:	460a      	mov	r2, r1
 80066a0:	eb42 0303 	adc.w	r3, r2, r3
 80066a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80066a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80066ac:	685b      	ldr	r3, [r3, #4]
 80066ae:	2200      	movs	r2, #0
 80066b0:	67bb      	str	r3, [r7, #120]	; 0x78
 80066b2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80066b4:	f04f 0200 	mov.w	r2, #0
 80066b8:	f04f 0300 	mov.w	r3, #0
 80066bc:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80066c0:	4649      	mov	r1, r9
 80066c2:	008b      	lsls	r3, r1, #2
 80066c4:	4641      	mov	r1, r8
 80066c6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80066ca:	4641      	mov	r1, r8
 80066cc:	008a      	lsls	r2, r1, #2
 80066ce:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80066d2:	f7f9 fd87 	bl	80001e4 <__aeabi_uldivmod>
 80066d6:	4602      	mov	r2, r0
 80066d8:	460b      	mov	r3, r1
 80066da:	4b39      	ldr	r3, [pc, #228]	; (80067c0 <UART_SetConfig+0x4e4>)
 80066dc:	fba3 1302 	umull	r1, r3, r3, r2
 80066e0:	095b      	lsrs	r3, r3, #5
 80066e2:	2164      	movs	r1, #100	; 0x64
 80066e4:	fb01 f303 	mul.w	r3, r1, r3
 80066e8:	1ad3      	subs	r3, r2, r3
 80066ea:	011b      	lsls	r3, r3, #4
 80066ec:	3332      	adds	r3, #50	; 0x32
 80066ee:	4a34      	ldr	r2, [pc, #208]	; (80067c0 <UART_SetConfig+0x4e4>)
 80066f0:	fba2 2303 	umull	r2, r3, r2, r3
 80066f4:	095b      	lsrs	r3, r3, #5
 80066f6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80066fa:	441c      	add	r4, r3
 80066fc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006700:	2200      	movs	r2, #0
 8006702:	673b      	str	r3, [r7, #112]	; 0x70
 8006704:	677a      	str	r2, [r7, #116]	; 0x74
 8006706:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800670a:	4642      	mov	r2, r8
 800670c:	464b      	mov	r3, r9
 800670e:	1891      	adds	r1, r2, r2
 8006710:	60b9      	str	r1, [r7, #8]
 8006712:	415b      	adcs	r3, r3
 8006714:	60fb      	str	r3, [r7, #12]
 8006716:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800671a:	4641      	mov	r1, r8
 800671c:	1851      	adds	r1, r2, r1
 800671e:	6039      	str	r1, [r7, #0]
 8006720:	4649      	mov	r1, r9
 8006722:	414b      	adcs	r3, r1
 8006724:	607b      	str	r3, [r7, #4]
 8006726:	f04f 0200 	mov.w	r2, #0
 800672a:	f04f 0300 	mov.w	r3, #0
 800672e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006732:	4659      	mov	r1, fp
 8006734:	00cb      	lsls	r3, r1, #3
 8006736:	4651      	mov	r1, sl
 8006738:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800673c:	4651      	mov	r1, sl
 800673e:	00ca      	lsls	r2, r1, #3
 8006740:	4610      	mov	r0, r2
 8006742:	4619      	mov	r1, r3
 8006744:	4603      	mov	r3, r0
 8006746:	4642      	mov	r2, r8
 8006748:	189b      	adds	r3, r3, r2
 800674a:	66bb      	str	r3, [r7, #104]	; 0x68
 800674c:	464b      	mov	r3, r9
 800674e:	460a      	mov	r2, r1
 8006750:	eb42 0303 	adc.w	r3, r2, r3
 8006754:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006756:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800675a:	685b      	ldr	r3, [r3, #4]
 800675c:	2200      	movs	r2, #0
 800675e:	663b      	str	r3, [r7, #96]	; 0x60
 8006760:	667a      	str	r2, [r7, #100]	; 0x64
 8006762:	f04f 0200 	mov.w	r2, #0
 8006766:	f04f 0300 	mov.w	r3, #0
 800676a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800676e:	4649      	mov	r1, r9
 8006770:	008b      	lsls	r3, r1, #2
 8006772:	4641      	mov	r1, r8
 8006774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006778:	4641      	mov	r1, r8
 800677a:	008a      	lsls	r2, r1, #2
 800677c:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006780:	f7f9 fd30 	bl	80001e4 <__aeabi_uldivmod>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	4b0d      	ldr	r3, [pc, #52]	; (80067c0 <UART_SetConfig+0x4e4>)
 800678a:	fba3 1302 	umull	r1, r3, r3, r2
 800678e:	095b      	lsrs	r3, r3, #5
 8006790:	2164      	movs	r1, #100	; 0x64
 8006792:	fb01 f303 	mul.w	r3, r1, r3
 8006796:	1ad3      	subs	r3, r2, r3
 8006798:	011b      	lsls	r3, r3, #4
 800679a:	3332      	adds	r3, #50	; 0x32
 800679c:	4a08      	ldr	r2, [pc, #32]	; (80067c0 <UART_SetConfig+0x4e4>)
 800679e:	fba2 2303 	umull	r2, r3, r2, r3
 80067a2:	095b      	lsrs	r3, r3, #5
 80067a4:	f003 020f 	and.w	r2, r3, #15
 80067a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4422      	add	r2, r4
 80067b0:	609a      	str	r2, [r3, #8]
}
 80067b2:	bf00      	nop
 80067b4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80067b8:	46bd      	mov	sp, r7
 80067ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80067be:	bf00      	nop
 80067c0:	51eb851f 	.word	0x51eb851f

080067c4 <__libc_init_array>:
 80067c4:	b570      	push	{r4, r5, r6, lr}
 80067c6:	4d0d      	ldr	r5, [pc, #52]	; (80067fc <__libc_init_array+0x38>)
 80067c8:	4c0d      	ldr	r4, [pc, #52]	; (8006800 <__libc_init_array+0x3c>)
 80067ca:	1b64      	subs	r4, r4, r5
 80067cc:	10a4      	asrs	r4, r4, #2
 80067ce:	2600      	movs	r6, #0
 80067d0:	42a6      	cmp	r6, r4
 80067d2:	d109      	bne.n	80067e8 <__libc_init_array+0x24>
 80067d4:	4d0b      	ldr	r5, [pc, #44]	; (8006804 <__libc_init_array+0x40>)
 80067d6:	4c0c      	ldr	r4, [pc, #48]	; (8006808 <__libc_init_array+0x44>)
 80067d8:	f000 f894 	bl	8006904 <_init>
 80067dc:	1b64      	subs	r4, r4, r5
 80067de:	10a4      	asrs	r4, r4, #2
 80067e0:	2600      	movs	r6, #0
 80067e2:	42a6      	cmp	r6, r4
 80067e4:	d105      	bne.n	80067f2 <__libc_init_array+0x2e>
 80067e6:	bd70      	pop	{r4, r5, r6, pc}
 80067e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80067ec:	4798      	blx	r3
 80067ee:	3601      	adds	r6, #1
 80067f0:	e7ee      	b.n	80067d0 <__libc_init_array+0xc>
 80067f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80067f6:	4798      	blx	r3
 80067f8:	3601      	adds	r6, #1
 80067fa:	e7f2      	b.n	80067e2 <__libc_init_array+0x1e>
 80067fc:	080069d4 	.word	0x080069d4
 8006800:	080069d4 	.word	0x080069d4
 8006804:	080069d4 	.word	0x080069d4
 8006808:	080069d8 	.word	0x080069d8

0800680c <__itoa>:
 800680c:	1e93      	subs	r3, r2, #2
 800680e:	2b22      	cmp	r3, #34	; 0x22
 8006810:	b510      	push	{r4, lr}
 8006812:	460c      	mov	r4, r1
 8006814:	d904      	bls.n	8006820 <__itoa+0x14>
 8006816:	2300      	movs	r3, #0
 8006818:	700b      	strb	r3, [r1, #0]
 800681a:	461c      	mov	r4, r3
 800681c:	4620      	mov	r0, r4
 800681e:	bd10      	pop	{r4, pc}
 8006820:	2a0a      	cmp	r2, #10
 8006822:	d109      	bne.n	8006838 <__itoa+0x2c>
 8006824:	2800      	cmp	r0, #0
 8006826:	da07      	bge.n	8006838 <__itoa+0x2c>
 8006828:	232d      	movs	r3, #45	; 0x2d
 800682a:	700b      	strb	r3, [r1, #0]
 800682c:	4240      	negs	r0, r0
 800682e:	2101      	movs	r1, #1
 8006830:	4421      	add	r1, r4
 8006832:	f000 f825 	bl	8006880 <__utoa>
 8006836:	e7f1      	b.n	800681c <__itoa+0x10>
 8006838:	2100      	movs	r1, #0
 800683a:	e7f9      	b.n	8006830 <__itoa+0x24>

0800683c <itoa>:
 800683c:	f7ff bfe6 	b.w	800680c <__itoa>

08006840 <memset>:
 8006840:	4402      	add	r2, r0
 8006842:	4603      	mov	r3, r0
 8006844:	4293      	cmp	r3, r2
 8006846:	d100      	bne.n	800684a <memset+0xa>
 8006848:	4770      	bx	lr
 800684a:	f803 1b01 	strb.w	r1, [r3], #1
 800684e:	e7f9      	b.n	8006844 <memset+0x4>

08006850 <strcat>:
 8006850:	b510      	push	{r4, lr}
 8006852:	4602      	mov	r2, r0
 8006854:	7814      	ldrb	r4, [r2, #0]
 8006856:	4613      	mov	r3, r2
 8006858:	3201      	adds	r2, #1
 800685a:	2c00      	cmp	r4, #0
 800685c:	d1fa      	bne.n	8006854 <strcat+0x4>
 800685e:	3b01      	subs	r3, #1
 8006860:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006864:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006868:	2a00      	cmp	r2, #0
 800686a:	d1f9      	bne.n	8006860 <strcat+0x10>
 800686c:	bd10      	pop	{r4, pc}

0800686e <strcpy>:
 800686e:	4603      	mov	r3, r0
 8006870:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006874:	f803 2b01 	strb.w	r2, [r3], #1
 8006878:	2a00      	cmp	r2, #0
 800687a:	d1f9      	bne.n	8006870 <strcpy+0x2>
 800687c:	4770      	bx	lr
	...

08006880 <__utoa>:
 8006880:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006882:	4c1f      	ldr	r4, [pc, #124]	; (8006900 <__utoa+0x80>)
 8006884:	b08b      	sub	sp, #44	; 0x2c
 8006886:	4605      	mov	r5, r0
 8006888:	460b      	mov	r3, r1
 800688a:	466e      	mov	r6, sp
 800688c:	f104 0c20 	add.w	ip, r4, #32
 8006890:	6820      	ldr	r0, [r4, #0]
 8006892:	6861      	ldr	r1, [r4, #4]
 8006894:	4637      	mov	r7, r6
 8006896:	c703      	stmia	r7!, {r0, r1}
 8006898:	3408      	adds	r4, #8
 800689a:	4564      	cmp	r4, ip
 800689c:	463e      	mov	r6, r7
 800689e:	d1f7      	bne.n	8006890 <__utoa+0x10>
 80068a0:	7921      	ldrb	r1, [r4, #4]
 80068a2:	7139      	strb	r1, [r7, #4]
 80068a4:	1e91      	subs	r1, r2, #2
 80068a6:	6820      	ldr	r0, [r4, #0]
 80068a8:	6038      	str	r0, [r7, #0]
 80068aa:	2922      	cmp	r1, #34	; 0x22
 80068ac:	f04f 0100 	mov.w	r1, #0
 80068b0:	d904      	bls.n	80068bc <__utoa+0x3c>
 80068b2:	7019      	strb	r1, [r3, #0]
 80068b4:	460b      	mov	r3, r1
 80068b6:	4618      	mov	r0, r3
 80068b8:	b00b      	add	sp, #44	; 0x2c
 80068ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80068bc:	1e58      	subs	r0, r3, #1
 80068be:	4684      	mov	ip, r0
 80068c0:	fbb5 f7f2 	udiv	r7, r5, r2
 80068c4:	fb02 5617 	mls	r6, r2, r7, r5
 80068c8:	3628      	adds	r6, #40	; 0x28
 80068ca:	446e      	add	r6, sp
 80068cc:	460c      	mov	r4, r1
 80068ce:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 80068d2:	f80c 6f01 	strb.w	r6, [ip, #1]!
 80068d6:	462e      	mov	r6, r5
 80068d8:	42b2      	cmp	r2, r6
 80068da:	f101 0101 	add.w	r1, r1, #1
 80068de:	463d      	mov	r5, r7
 80068e0:	d9ee      	bls.n	80068c0 <__utoa+0x40>
 80068e2:	2200      	movs	r2, #0
 80068e4:	545a      	strb	r2, [r3, r1]
 80068e6:	1919      	adds	r1, r3, r4
 80068e8:	1aa5      	subs	r5, r4, r2
 80068ea:	42aa      	cmp	r2, r5
 80068ec:	dae3      	bge.n	80068b6 <__utoa+0x36>
 80068ee:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 80068f2:	780e      	ldrb	r6, [r1, #0]
 80068f4:	7006      	strb	r6, [r0, #0]
 80068f6:	3201      	adds	r2, #1
 80068f8:	f801 5901 	strb.w	r5, [r1], #-1
 80068fc:	e7f4      	b.n	80068e8 <__utoa+0x68>
 80068fe:	bf00      	nop
 8006900:	080069a4 	.word	0x080069a4

08006904 <_init>:
 8006904:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006906:	bf00      	nop
 8006908:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800690a:	bc08      	pop	{r3}
 800690c:	469e      	mov	lr, r3
 800690e:	4770      	bx	lr

08006910 <_fini>:
 8006910:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006912:	bf00      	nop
 8006914:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006916:	bc08      	pop	{r3}
 8006918:	469e      	mov	lr, r3
 800691a:	4770      	bx	lr
