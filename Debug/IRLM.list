
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004a10  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  08004ba4  08004ba4  00014ba4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004bd4  08004bd4  00021444  2**0
                  CONTENTS
  4 .ARM          00000008  08004bd4  08004bd4  00014bd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004bdc  08004bdc  00021444  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004bdc  08004bdc  00014bdc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004be0  08004be0  00014be0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001444  20000000  08004be4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000003a4  20001444  08006028  00021444  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200017e8  08006028  000217e8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021444  2**0
                  CONTENTS, READONLY
 12 .debug_info   00012d13  00000000  00000000  00021474  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002322  00000000  00000000  00034187  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001108  00000000  00000000  000364b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001078  00000000  00000000  000375b8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016db7  00000000  00000000  00038630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013acc  00000000  00000000  0004f3e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090c16  00000000  00000000  00062eb3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  000f3ac9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004964  00000000  00000000  000f3b1c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20001444 	.word	0x20001444
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08004b8c 	.word	0x08004b8c

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001448 	.word	0x20001448
 80001d0:	08004b8c 	.word	0x08004b8c

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <disable_button_EEPROM_writes>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

void disable_button_EEPROM_writes(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 80004ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004f2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 2, HAL_MAX_DELAY);
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	21a0      	movs	r1, #160	; 0xa0
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <disable_button_EEPROM_writes+0x28>)
 8000502:	f001 fe61 	bl	80021c8 <HAL_I2C_Master_Transmit>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	20001460 	.word	0x20001460

08000514 <initialize_buttons>:

// Initialize Buttons
void initialize_buttons(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	disable_button_EEPROM_writes();
 8000518:	f7ff ffe6 	bl	80004e8 <disable_button_EEPROM_writes>
	enable_all_buttons();
 800051c:	f000 f89a 	bl	8000654 <enable_all_buttons>
	update_buttons();
 8000520:	f000 f8c2 	bl	80006a8 <update_buttons>
	HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f001 fa1f 	bl	8001968 <HAL_Delay>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <enable_button>:

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01e      	beq.n	800057e <enable_button+0x4e>
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b09      	cmp	r3, #9
 8000544:	d107      	bne.n	8000556 <enable_button+0x26>
		io_ctrl_2 &= ~(0b1);
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <enable_button+0x5c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <enable_button+0x5c>)
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e014      	b.n	8000580 <enable_button+0x50>
	} else if (button <= 8) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d811      	bhi.n	8000580 <enable_button+0x50>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	3b01      	subs	r3, #1
 8000560:	2201      	movs	r2, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	b25b      	sxtb	r3, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	b25a      	sxtb	r2, r3
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <enable_button+0x60>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4013      	ands	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <enable_button+0x60>)
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e000      	b.n	8000580 <enable_button+0x50>
	if (!button) return;
 800057e:	bf00      	nop
	}
}
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000001 	.word	0x20000001
 8000590:	20000000 	.word	0x20000000

08000594 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d01c      	beq.n	80005de <disable_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	d107      	bne.n	80005ba <disable_button+0x26>
		io_ctrl_2 |= 0b1;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <disable_button+0x58>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <disable_button+0x58>)
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e012      	b.n	80005e0 <disable_button+0x4c>
	} else if (button <= 8) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d80f      	bhi.n	80005e0 <disable_button+0x4c>
		io_ctrl_1 |= 0b1 << (button - 1);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <disable_button+0x5c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <disable_button+0x5c>)
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e000      	b.n	80005e0 <disable_button+0x4c>
	if (!button) return;
 80005de:	bf00      	nop
	}
}
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000001 	.word	0x20000001
 80005f0:	20000000 	.word	0x20000000

080005f4 <toggle_button>:

// Toggle a button (1 indexed, left-to-right, top-to-bottom)
void toggle_button(uint8_t button) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d01c      	beq.n	800063e <toggle_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b09      	cmp	r3, #9
 8000608:	d107      	bne.n	800061a <toggle_button+0x26>
		io_ctrl_2 ^= 0b1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <toggle_button+0x58>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <toggle_button+0x58>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e012      	b.n	8000640 <toggle_button+0x4c>
	} else if (button <= 8) {
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d80f      	bhi.n	8000640 <toggle_button+0x4c>
		io_ctrl_1 ^= 0b1 << (button - 1);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b01      	subs	r3, #1
 8000624:	2201      	movs	r2, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <toggle_button+0x5c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4053      	eors	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <toggle_button+0x5c>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e000      	b.n	8000640 <toggle_button+0x4c>
	if (!button) return;
 800063e:	bf00      	nop
	}
}
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000001 	.word	0x20000001
 8000650:	20000000 	.word	0x20000000

08000654 <enable_all_buttons>:

// Enable all of the buttons
void enable_all_buttons(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 800065a:	2301      	movs	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e006      	b.n	800066e <enable_all_buttons+0x1a>
		enable_button(i);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff64 	bl	8000530 <enable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b09      	cmp	r3, #9
 8000672:	d9f5      	bls.n	8000660 <enable_all_buttons+0xc>
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <disable_all_buttons>:

// Disable all of the buttons
void disable_all_buttons(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 8000684:	2301      	movs	r3, #1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	e006      	b.n	8000698 <disable_all_buttons+0x1a>
		disable_button(i);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff81 	bl	8000594 <disable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	3301      	adds	r3, #1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b09      	cmp	r3, #9
 800069c:	d9f5      	bls.n	800068a <disable_all_buttons+0xc>
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <update_buttons>:
		toggle_button(i);
	}
}

// Write the updated button configuration to the remote
void update_buttons(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 80006ae:	23f2      	movs	r3, #242	; 0xf2
 80006b0:	713b      	strb	r3, [r7, #4]
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <update_buttons+0x30>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	717b      	strb	r3, [r7, #5]
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <update_buttons+0x34>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2303      	movs	r3, #3
 80006c8:	21a0      	movs	r1, #160	; 0xa0
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <update_buttons+0x38>)
 80006cc:	f001 fd7c 	bl	80021c8 <HAL_I2C_Master_Transmit>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000001 	.word	0x20000001
 80006e0:	20001460 	.word	0x20001460

080006e4 <poll_buttons>:

// Poll buttons, returns the first pressed button
// or zero if no button is pressed
uint8_t poll_buttons(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	C1_HIGH();
 80006e8:	2201      	movs	r2, #1
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	483c      	ldr	r0, [pc, #240]	; (80007e0 <poll_buttons+0xfc>)
 80006ee:	f001 fc0d 	bl	8001f0c <HAL_GPIO_WritePin>
	C2_HIGH();
 80006f2:	2201      	movs	r2, #1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	483a      	ldr	r0, [pc, #232]	; (80007e0 <poll_buttons+0xfc>)
 80006f8:	f001 fc08 	bl	8001f0c <HAL_GPIO_WritePin>
	C0_LOW();
 80006fc:	2200      	movs	r2, #0
 80006fe:	2140      	movs	r1, #64	; 0x40
 8000700:	4838      	ldr	r0, [pc, #224]	; (80007e4 <poll_buttons+0x100>)
 8000702:	f001 fc03 	bl	8001f0c <HAL_GPIO_WritePin>
	if (!R0_READ()) return 1;
 8000706:	2108      	movs	r1, #8
 8000708:	4836      	ldr	r0, [pc, #216]	; (80007e4 <poll_buttons+0x100>)
 800070a:	f001 fbe7 	bl	8001edc <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <poll_buttons+0x34>
 8000714:	2301      	movs	r3, #1
 8000716:	e061      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 4;
 8000718:	2120      	movs	r1, #32
 800071a:	4832      	ldr	r0, [pc, #200]	; (80007e4 <poll_buttons+0x100>)
 800071c:	f001 fbde 	bl	8001edc <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <poll_buttons+0x46>
 8000726:	2304      	movs	r3, #4
 8000728:	e058      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 7;
 800072a:	2110      	movs	r1, #16
 800072c:	482d      	ldr	r0, [pc, #180]	; (80007e4 <poll_buttons+0x100>)
 800072e:	f001 fbd5 	bl	8001edc <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <poll_buttons+0x58>
 8000738:	2307      	movs	r3, #7
 800073a:	e04f      	b.n	80007dc <poll_buttons+0xf8>
	C0_HIGH();
 800073c:	2201      	movs	r2, #1
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	4828      	ldr	r0, [pc, #160]	; (80007e4 <poll_buttons+0x100>)
 8000742:	f001 fbe3 	bl	8001f0c <HAL_GPIO_WritePin>

	C1_LOW();
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4825      	ldr	r0, [pc, #148]	; (80007e0 <poll_buttons+0xfc>)
 800074c:	f001 fbde 	bl	8001f0c <HAL_GPIO_WritePin>
	if (!R0_READ()) return 2;
 8000750:	2108      	movs	r1, #8
 8000752:	4824      	ldr	r0, [pc, #144]	; (80007e4 <poll_buttons+0x100>)
 8000754:	f001 fbc2 	bl	8001edc <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <poll_buttons+0x7e>
 800075e:	2302      	movs	r3, #2
 8000760:	e03c      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 5;
 8000762:	2120      	movs	r1, #32
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <poll_buttons+0x100>)
 8000766:	f001 fbb9 	bl	8001edc <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <poll_buttons+0x90>
 8000770:	2305      	movs	r3, #5
 8000772:	e033      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 8;
 8000774:	2110      	movs	r1, #16
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <poll_buttons+0x100>)
 8000778:	f001 fbb0 	bl	8001edc <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <poll_buttons+0xa2>
 8000782:	2308      	movs	r3, #8
 8000784:	e02a      	b.n	80007dc <poll_buttons+0xf8>
	C1_HIGH();
 8000786:	2201      	movs	r2, #1
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	4815      	ldr	r0, [pc, #84]	; (80007e0 <poll_buttons+0xfc>)
 800078c:	f001 fbbe 	bl	8001f0c <HAL_GPIO_WritePin>

	C2_LOW();
 8000790:	2200      	movs	r2, #0
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <poll_buttons+0xfc>)
 8000796:	f001 fbb9 	bl	8001f0c <HAL_GPIO_WritePin>
	if (!R0_READ()) return 3;
 800079a:	2108      	movs	r1, #8
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <poll_buttons+0x100>)
 800079e:	f001 fb9d 	bl	8001edc <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <poll_buttons+0xc8>
 80007a8:	2303      	movs	r3, #3
 80007aa:	e017      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 6;
 80007ac:	2120      	movs	r1, #32
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <poll_buttons+0x100>)
 80007b0:	f001 fb94 	bl	8001edc <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <poll_buttons+0xda>
 80007ba:	2306      	movs	r3, #6
 80007bc:	e00e      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 9;
 80007be:	2110      	movs	r1, #16
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <poll_buttons+0x100>)
 80007c2:	f001 fb8b 	bl	8001edc <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <poll_buttons+0xec>
 80007cc:	2309      	movs	r3, #9
 80007ce:	e005      	b.n	80007dc <poll_buttons+0xf8>
	C2_HIGH();
 80007d0:	2201      	movs	r2, #1
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <poll_buttons+0xfc>)
 80007d6:	f001 fb99 	bl	8001f0c <HAL_GPIO_WritePin>

	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80007ec:	f001 f84a 	bl	8001884 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80007f0:	f000 f86a 	bl	80008c8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80007f4:	f000 fa28 	bl	8000c48 <MX_GPIO_Init>
  MX_SPI2_Init();
 80007f8:	f000 f900 	bl	80009fc <MX_SPI2_Init>
  MX_TIM2_Init();
 80007fc:	f000 f936 	bl	8000a6c <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000800:	f000 f9f8 	bl	8000bf4 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000804:	f000 f8cc 	bl	80009a0 <MX_I2C1_Init>
  MX_TIM5_Init();
 8000808:	f000 f9a6 	bl	8000b58 <MX_TIM5_Init>
  /* USER CODE BEGIN 2 */
  init_displays();
 800080c:	f000 fbae 	bl	8000f6c <init_displays>
  HAL_TIM_Base_Start_IT(&htim5);
 8000810:	4827      	ldr	r0, [pc, #156]	; (80008b0 <main+0xc8>)
 8000812:	f002 ff59 	bl	80036c8 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000816:	2108      	movs	r1, #8
 8000818:	4826      	ldr	r0, [pc, #152]	; (80008b4 <main+0xcc>)
 800081a:	f003 f811 	bl	8003840 <HAL_TIM_PWM_Start>
  __HAL_TIM_SET_COMPARE(&htim2, TIM_CHANNEL_3, 200);
 800081e:	4b25      	ldr	r3, [pc, #148]	; (80008b4 <main+0xcc>)
 8000820:	681b      	ldr	r3, [r3, #0]
 8000822:	22c8      	movs	r2, #200	; 0xc8
 8000824:	63da      	str	r2, [r3, #60]	; 0x3c
  initialize_buttons();
 8000826:	f7ff fe75 	bl	8000514 <initialize_buttons>
  disable_all_buttons();
 800082a:	f7ff ff28 	bl	800067e <disable_all_buttons>
  update_buttons();
 800082e:	f7ff ff3b 	bl	80006a8 <update_buttons>
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

  while (1)
  {
	  STOP_BUTTON_POLL();
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <main+0xd0>)
 8000834:	681b      	ldr	r3, [r3, #0]
 8000836:	4a20      	ldr	r2, [pc, #128]	; (80008b8 <main+0xd0>)
 8000838:	f023 0301 	bic.w	r3, r3, #1
 800083c:	6013      	str	r3, [r2, #0]
	  draw_string("testing", white);
 800083e:	2101      	movs	r1, #1
 8000840:	481e      	ldr	r0, [pc, #120]	; (80008bc <main+0xd4>)
 8000842:	f000 fddc 	bl	80013fe <draw_string>
	  update_display(3);
 8000846:	2003      	movs	r0, #3
 8000848:	f000 fbfc 	bl	8001044 <update_display>
	  erase_buffer();
 800084c:	f000 fcd2 	bl	80011f4 <erase_buffer>
	  draw_string("please", white);
 8000850:	2101      	movs	r1, #1
 8000852:	481b      	ldr	r0, [pc, #108]	; (80008c0 <main+0xd8>)
 8000854:	f000 fdd3 	bl	80013fe <draw_string>
	  update_display(5);
 8000858:	2005      	movs	r0, #5
 800085a:	f000 fbf3 	bl	8001044 <update_display>
	  erase_buffer();
 800085e:	f000 fcc9 	bl	80011f4 <erase_buffer>
	  draw_string("work", white);
 8000862:	2101      	movs	r1, #1
 8000864:	4817      	ldr	r0, [pc, #92]	; (80008c4 <main+0xdc>)
 8000866:	f000 fdca 	bl	80013fe <draw_string>
	  update_display(6);
 800086a:	2006      	movs	r0, #6
 800086c:	f000 fbea 	bl	8001044 <update_display>
	  START_BUTTON_POLL();
 8000870:	4b11      	ldr	r3, [pc, #68]	; (80008b8 <main+0xd0>)
 8000872:	681b      	ldr	r3, [r3, #0]
 8000874:	4a10      	ldr	r2, [pc, #64]	; (80008b8 <main+0xd0>)
 8000876:	f043 0301 	orr.w	r3, r3, #1
 800087a:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 800087c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8000880:	f001 f872 	bl	8001968 <HAL_Delay>

	  STOP_BUTTON_POLL();
 8000884:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <main+0xd0>)
 8000886:	681b      	ldr	r3, [r3, #0]
 8000888:	4a0b      	ldr	r2, [pc, #44]	; (80008b8 <main+0xd0>)
 800088a:	f023 0301 	bic.w	r3, r3, #1
 800088e:	6013      	str	r3, [r2, #0]
	  erase_buffer();
 8000890:	f000 fcb0 	bl	80011f4 <erase_buffer>
	  update_all_displays();
 8000894:	f000 fc44 	bl	8001120 <update_all_displays>
	  START_BUTTON_POLL();
 8000898:	4b07      	ldr	r3, [pc, #28]	; (80008b8 <main+0xd0>)
 800089a:	681b      	ldr	r3, [r3, #0]
 800089c:	4a06      	ldr	r2, [pc, #24]	; (80008b8 <main+0xd0>)
 800089e:	f043 0301 	orr.w	r3, r3, #1
 80008a2:	6013      	str	r3, [r2, #0]
	  HAL_Delay(1000);
 80008a4:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80008a8:	f001 f85e 	bl	8001968 <HAL_Delay>
	  STOP_BUTTON_POLL();
 80008ac:	e7c1      	b.n	8000832 <main+0x4a>
 80008ae:	bf00      	nop
 80008b0:	20001554 	.word	0x20001554
 80008b4:	2000150c 	.word	0x2000150c
 80008b8:	40000c00 	.word	0x40000c00
 80008bc:	08004ba4 	.word	0x08004ba4
 80008c0:	08004bac 	.word	0x08004bac
 80008c4:	08004bb4 	.word	0x08004bb4

080008c8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b094      	sub	sp, #80	; 0x50
 80008cc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008ce:	f107 0320 	add.w	r3, r7, #32
 80008d2:	2230      	movs	r2, #48	; 0x30
 80008d4:	2100      	movs	r1, #0
 80008d6:	4618      	mov	r0, r3
 80008d8:	f004 f950 	bl	8004b7c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008dc:	f107 030c 	add.w	r3, r7, #12
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80008ec:	2300      	movs	r3, #0
 80008ee:	60bb      	str	r3, [r7, #8]
 80008f0:	4b29      	ldr	r3, [pc, #164]	; (8000998 <SystemClock_Config+0xd0>)
 80008f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80008f4:	4a28      	ldr	r2, [pc, #160]	; (8000998 <SystemClock_Config+0xd0>)
 80008f6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80008fa:	6413      	str	r3, [r2, #64]	; 0x40
 80008fc:	4b26      	ldr	r3, [pc, #152]	; (8000998 <SystemClock_Config+0xd0>)
 80008fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000900:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000904:	60bb      	str	r3, [r7, #8]
 8000906:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000908:	2300      	movs	r3, #0
 800090a:	607b      	str	r3, [r7, #4]
 800090c:	4b23      	ldr	r3, [pc, #140]	; (800099c <SystemClock_Config+0xd4>)
 800090e:	681b      	ldr	r3, [r3, #0]
 8000910:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000914:	4a21      	ldr	r2, [pc, #132]	; (800099c <SystemClock_Config+0xd4>)
 8000916:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800091a:	6013      	str	r3, [r2, #0]
 800091c:	4b1f      	ldr	r3, [pc, #124]	; (800099c <SystemClock_Config+0xd4>)
 800091e:	681b      	ldr	r3, [r3, #0]
 8000920:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000924:	607b      	str	r3, [r7, #4]
 8000926:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000928:	2302      	movs	r3, #2
 800092a:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800092c:	2301      	movs	r3, #1
 800092e:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000930:	2310      	movs	r3, #16
 8000932:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000934:	2302      	movs	r3, #2
 8000936:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000938:	2300      	movs	r3, #0
 800093a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 800093c:	2310      	movs	r3, #16
 800093e:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000940:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000944:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000946:	2304      	movs	r3, #4
 8000948:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 800094a:	2307      	movs	r3, #7
 800094c:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800094e:	f107 0320 	add.w	r3, r7, #32
 8000952:	4618      	mov	r0, r3
 8000954:	f001 ff40 	bl	80027d8 <HAL_RCC_OscConfig>
 8000958:	4603      	mov	r3, r0
 800095a:	2b00      	cmp	r3, #0
 800095c:	d001      	beq.n	8000962 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 800095e:	f000 fa75 	bl	8000e4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000962:	230f      	movs	r3, #15
 8000964:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000966:	2302      	movs	r3, #2
 8000968:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800096a:	2300      	movs	r3, #0
 800096c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800096e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000972:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000974:	2300      	movs	r3, #0
 8000976:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000978:	f107 030c 	add.w	r3, r7, #12
 800097c:	2102      	movs	r1, #2
 800097e:	4618      	mov	r0, r3
 8000980:	f002 f9a2 	bl	8002cc8 <HAL_RCC_ClockConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xc6>
  {
    Error_Handler();
 800098a:	f000 fa5f 	bl	8000e4c <Error_Handler>
  }
}
 800098e:	bf00      	nop
 8000990:	3750      	adds	r7, #80	; 0x50
 8000992:	46bd      	mov	sp, r7
 8000994:	bd80      	pop	{r7, pc}
 8000996:	bf00      	nop
 8000998:	40023800 	.word	0x40023800
 800099c:	40007000 	.word	0x40007000

080009a0 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80009a4:	4b12      	ldr	r3, [pc, #72]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009a6:	4a13      	ldr	r2, [pc, #76]	; (80009f4 <MX_I2C1_Init+0x54>)
 80009a8:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80009aa:	4b11      	ldr	r3, [pc, #68]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009ac:	4a12      	ldr	r2, [pc, #72]	; (80009f8 <MX_I2C1_Init+0x58>)
 80009ae:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80009b0:	4b0f      	ldr	r3, [pc, #60]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b2:	2200      	movs	r2, #0
 80009b4:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80009b6:	4b0e      	ldr	r3, [pc, #56]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80009bc:	4b0c      	ldr	r3, [pc, #48]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009be:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 80009c2:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80009c4:	4b0a      	ldr	r3, [pc, #40]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009c6:	2200      	movs	r2, #0
 80009c8:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80009ca:	4b09      	ldr	r3, [pc, #36]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009cc:	2200      	movs	r2, #0
 80009ce:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80009d0:	4b07      	ldr	r3, [pc, #28]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d2:	2200      	movs	r2, #0
 80009d4:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80009d6:	4b06      	ldr	r3, [pc, #24]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009d8:	2200      	movs	r2, #0
 80009da:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80009dc:	4804      	ldr	r0, [pc, #16]	; (80009f0 <MX_I2C1_Init+0x50>)
 80009de:	f001 faaf 	bl	8001f40 <HAL_I2C_Init>
 80009e2:	4603      	mov	r3, r0
 80009e4:	2b00      	cmp	r3, #0
 80009e6:	d001      	beq.n	80009ec <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80009e8:	f000 fa30 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80009ec:	bf00      	nop
 80009ee:	bd80      	pop	{r7, pc}
 80009f0:	20001460 	.word	0x20001460
 80009f4:	40005400 	.word	0x40005400
 80009f8:	000186a0 	.word	0x000186a0

080009fc <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 80009fc:	b580      	push	{r7, lr}
 80009fe:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000a00:	4b18      	ldr	r3, [pc, #96]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a02:	4a19      	ldr	r2, [pc, #100]	; (8000a68 <MX_SPI2_Init+0x6c>)
 8000a04:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000a06:	4b17      	ldr	r3, [pc, #92]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a08:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000a0c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_1LINE;
 8000a0e:	4b15      	ldr	r3, [pc, #84]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a10:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8000a14:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000a16:	4b13      	ldr	r3, [pc, #76]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000a1c:	4b11      	ldr	r3, [pc, #68]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000a22:	4b10      	ldr	r3, [pc, #64]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a24:	2200      	movs	r2, #0
 8000a26:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000a28:	4b0e      	ldr	r3, [pc, #56]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a2a:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000a2e:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000a30:	4b0c      	ldr	r3, [pc, #48]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a32:	2230      	movs	r2, #48	; 0x30
 8000a34:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000a36:	4b0b      	ldr	r3, [pc, #44]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000a3c:	4b09      	ldr	r3, [pc, #36]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000a42:	4b08      	ldr	r3, [pc, #32]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000a48:	4b06      	ldr	r3, [pc, #24]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a4a:	220a      	movs	r2, #10
 8000a4c:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000a4e:	4805      	ldr	r0, [pc, #20]	; (8000a64 <MX_SPI2_Init+0x68>)
 8000a50:	f002 fb5a 	bl	8003108 <HAL_SPI_Init>
 8000a54:	4603      	mov	r3, r0
 8000a56:	2b00      	cmp	r3, #0
 8000a58:	d001      	beq.n	8000a5e <MX_SPI2_Init+0x62>
  {
    Error_Handler();
 8000a5a:	f000 f9f7 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000a5e:	bf00      	nop
 8000a60:	bd80      	pop	{r7, pc}
 8000a62:	bf00      	nop
 8000a64:	200014b4 	.word	0x200014b4
 8000a68:	40003800 	.word	0x40003800

08000a6c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b08e      	sub	sp, #56	; 0x38
 8000a70:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000a72:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000a76:	2200      	movs	r2, #0
 8000a78:	601a      	str	r2, [r3, #0]
 8000a7a:	605a      	str	r2, [r3, #4]
 8000a7c:	609a      	str	r2, [r3, #8]
 8000a7e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000a80:	f107 0320 	add.w	r3, r7, #32
 8000a84:	2200      	movs	r2, #0
 8000a86:	601a      	str	r2, [r3, #0]
 8000a88:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000a8a:	1d3b      	adds	r3, r7, #4
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	601a      	str	r2, [r3, #0]
 8000a90:	605a      	str	r2, [r3, #4]
 8000a92:	609a      	str	r2, [r3, #8]
 8000a94:	60da      	str	r2, [r3, #12]
 8000a96:	611a      	str	r2, [r3, #16]
 8000a98:	615a      	str	r2, [r3, #20]
 8000a9a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000a9c:	4b2d      	ldr	r3, [pc, #180]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000a9e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000aa2:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1023;
 8000aa4:	4b2b      	ldr	r3, [pc, #172]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000aa6:	f240 32ff 	movw	r2, #1023	; 0x3ff
 8000aaa:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000aac:	4b29      	ldr	r3, [pc, #164]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000aae:	2200      	movs	r2, #0
 8000ab0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000ab2:	4b28      	ldr	r3, [pc, #160]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000ab4:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ab8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000aba:	4b26      	ldr	r3, [pc, #152]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000abc:	2200      	movs	r2, #0
 8000abe:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000ac0:	4b24      	ldr	r3, [pc, #144]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000ac2:	2200      	movs	r2, #0
 8000ac4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000ac6:	4823      	ldr	r0, [pc, #140]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000ac8:	f002 fdae 	bl	8003628 <HAL_TIM_Base_Init>
 8000acc:	4603      	mov	r3, r0
 8000ace:	2b00      	cmp	r3, #0
 8000ad0:	d001      	beq.n	8000ad6 <MX_TIM2_Init+0x6a>
  {
    Error_Handler();
 8000ad2:	f000 f9bb 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ad6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000ada:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000adc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000ae0:	4619      	mov	r1, r3
 8000ae2:	481c      	ldr	r0, [pc, #112]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000ae4:	f003 f926 	bl	8003d34 <HAL_TIM_ConfigClockSource>
 8000ae8:	4603      	mov	r3, r0
 8000aea:	2b00      	cmp	r3, #0
 8000aec:	d001      	beq.n	8000af2 <MX_TIM2_Init+0x86>
  {
    Error_Handler();
 8000aee:	f000 f9ad 	bl	8000e4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000af2:	4818      	ldr	r0, [pc, #96]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000af4:	f002 fe4a 	bl	800378c <HAL_TIM_PWM_Init>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	d001      	beq.n	8000b02 <MX_TIM2_Init+0x96>
  {
    Error_Handler();
 8000afe:	f000 f9a5 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000b02:	2300      	movs	r3, #0
 8000b04:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000b06:	2300      	movs	r3, #0
 8000b08:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000b0a:	f107 0320 	add.w	r3, r7, #32
 8000b0e:	4619      	mov	r1, r3
 8000b10:	4810      	ldr	r0, [pc, #64]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000b12:	f003 fccb 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8000b16:	4603      	mov	r3, r0
 8000b18:	2b00      	cmp	r3, #0
 8000b1a:	d001      	beq.n	8000b20 <MX_TIM2_Init+0xb4>
  {
    Error_Handler();
 8000b1c:	f000 f996 	bl	8000e4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8000b20:	2370      	movs	r3, #112	; 0x70
 8000b22:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000b24:	2300      	movs	r3, #0
 8000b26:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000b28:	2300      	movs	r3, #0
 8000b2a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000b2c:	2300      	movs	r3, #0
 8000b2e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2208      	movs	r2, #8
 8000b34:	4619      	mov	r1, r3
 8000b36:	4807      	ldr	r0, [pc, #28]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000b38:	f003 f83a 	bl	8003bb0 <HAL_TIM_PWM_ConfigChannel>
 8000b3c:	4603      	mov	r3, r0
 8000b3e:	2b00      	cmp	r3, #0
 8000b40:	d001      	beq.n	8000b46 <MX_TIM2_Init+0xda>
  {
    Error_Handler();
 8000b42:	f000 f983 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000b46:	4803      	ldr	r0, [pc, #12]	; (8000b54 <MX_TIM2_Init+0xe8>)
 8000b48:	f000 fdac 	bl	80016a4 <HAL_TIM_MspPostInit>

}
 8000b4c:	bf00      	nop
 8000b4e:	3738      	adds	r7, #56	; 0x38
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	2000150c 	.word	0x2000150c

08000b58 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8000b58:	b580      	push	{r7, lr}
 8000b5a:	b086      	sub	sp, #24
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000b5e:	f107 0308 	add.w	r3, r7, #8
 8000b62:	2200      	movs	r2, #0
 8000b64:	601a      	str	r2, [r3, #0]
 8000b66:	605a      	str	r2, [r3, #4]
 8000b68:	609a      	str	r2, [r3, #8]
 8000b6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000b6c:	463b      	mov	r3, r7
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 8000b74:	4b1d      	ldr	r3, [pc, #116]	; (8000bec <MX_TIM5_Init+0x94>)
 8000b76:	4a1e      	ldr	r2, [pc, #120]	; (8000bf0 <MX_TIM5_Init+0x98>)
 8000b78:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 8000b7a:	4b1c      	ldr	r3, [pc, #112]	; (8000bec <MX_TIM5_Init+0x94>)
 8000b7c:	2253      	movs	r2, #83	; 0x53
 8000b7e:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000b80:	4b1a      	ldr	r3, [pc, #104]	; (8000bec <MX_TIM5_Init+0x94>)
 8000b82:	2200      	movs	r2, #0
 8000b84:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49999;
 8000b86:	4b19      	ldr	r3, [pc, #100]	; (8000bec <MX_TIM5_Init+0x94>)
 8000b88:	f24c 324f 	movw	r2, #49999	; 0xc34f
 8000b8c:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000b8e:	4b17      	ldr	r3, [pc, #92]	; (8000bec <MX_TIM5_Init+0x94>)
 8000b90:	2200      	movs	r2, #0
 8000b92:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8000b94:	4b15      	ldr	r3, [pc, #84]	; (8000bec <MX_TIM5_Init+0x94>)
 8000b96:	2280      	movs	r2, #128	; 0x80
 8000b98:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8000b9a:	4814      	ldr	r0, [pc, #80]	; (8000bec <MX_TIM5_Init+0x94>)
 8000b9c:	f002 fd44 	bl	8003628 <HAL_TIM_Base_Init>
 8000ba0:	4603      	mov	r3, r0
 8000ba2:	2b00      	cmp	r3, #0
 8000ba4:	d001      	beq.n	8000baa <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8000ba6:	f000 f951 	bl	8000e4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000baa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000bae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8000bb0:	f107 0308 	add.w	r3, r7, #8
 8000bb4:	4619      	mov	r1, r3
 8000bb6:	480d      	ldr	r0, [pc, #52]	; (8000bec <MX_TIM5_Init+0x94>)
 8000bb8:	f003 f8bc 	bl	8003d34 <HAL_TIM_ConfigClockSource>
 8000bbc:	4603      	mov	r3, r0
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 8000bc2:	f000 f943 	bl	8000e4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 8000bce:	463b      	mov	r3, r7
 8000bd0:	4619      	mov	r1, r3
 8000bd2:	4806      	ldr	r0, [pc, #24]	; (8000bec <MX_TIM5_Init+0x94>)
 8000bd4:	f003 fc6a 	bl	80044ac <HAL_TIMEx_MasterConfigSynchronization>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	2b00      	cmp	r3, #0
 8000bdc:	d001      	beq.n	8000be2 <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 8000bde:	f000 f935 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 8000be2:	bf00      	nop
 8000be4:	3718      	adds	r7, #24
 8000be6:	46bd      	mov	sp, r7
 8000be8:	bd80      	pop	{r7, pc}
 8000bea:	bf00      	nop
 8000bec:	20001554 	.word	0x20001554
 8000bf0:	40000c00 	.word	0x40000c00

08000bf4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000bf4:	b580      	push	{r7, lr}
 8000bf6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000bf8:	4b11      	ldr	r3, [pc, #68]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000bfa:	4a12      	ldr	r2, [pc, #72]	; (8000c44 <MX_USART1_UART_Init+0x50>)
 8000bfc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 8000bfe:	4b10      	ldr	r3, [pc, #64]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c00:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8000c04:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000c06:	4b0e      	ldr	r3, [pc, #56]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c08:	2200      	movs	r2, #0
 8000c0a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000c0c:	4b0c      	ldr	r3, [pc, #48]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c0e:	2200      	movs	r2, #0
 8000c10:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000c12:	4b0b      	ldr	r3, [pc, #44]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c14:	2200      	movs	r2, #0
 8000c16:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000c18:	4b09      	ldr	r3, [pc, #36]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c1a:	220c      	movs	r2, #12
 8000c1c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000c1e:	4b08      	ldr	r3, [pc, #32]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c20:	2200      	movs	r2, #0
 8000c22:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000c24:	4b06      	ldr	r3, [pc, #24]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c26:	2200      	movs	r2, #0
 8000c28:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000c2a:	4805      	ldr	r0, [pc, #20]	; (8000c40 <MX_USART1_UART_Init+0x4c>)
 8000c2c:	f003 fcc0 	bl	80045b0 <HAL_UART_Init>
 8000c30:	4603      	mov	r3, r0
 8000c32:	2b00      	cmp	r3, #0
 8000c34:	d001      	beq.n	8000c3a <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 8000c36:	f000 f909 	bl	8000e4c <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000c3a:	bf00      	nop
 8000c3c:	bd80      	pop	{r7, pc}
 8000c3e:	bf00      	nop
 8000c40:	2000159c 	.word	0x2000159c
 8000c44:	40011000 	.word	0x40011000

08000c48 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000c48:	b580      	push	{r7, lr}
 8000c4a:	b088      	sub	sp, #32
 8000c4c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c4e:	f107 030c 	add.w	r3, r7, #12
 8000c52:	2200      	movs	r2, #0
 8000c54:	601a      	str	r2, [r3, #0]
 8000c56:	605a      	str	r2, [r3, #4]
 8000c58:	609a      	str	r2, [r3, #8]
 8000c5a:	60da      	str	r2, [r3, #12]
 8000c5c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000c5e:	2300      	movs	r3, #0
 8000c60:	60bb      	str	r3, [r7, #8]
 8000c62:	4b44      	ldr	r3, [pc, #272]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000c64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c66:	4a43      	ldr	r2, [pc, #268]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000c68:	f043 0304 	orr.w	r3, r3, #4
 8000c6c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c6e:	4b41      	ldr	r3, [pc, #260]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000c70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c72:	f003 0304 	and.w	r3, r3, #4
 8000c76:	60bb      	str	r3, [r7, #8]
 8000c78:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	607b      	str	r3, [r7, #4]
 8000c7e:	4b3d      	ldr	r3, [pc, #244]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c82:	4a3c      	ldr	r2, [pc, #240]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000c84:	f043 0301 	orr.w	r3, r3, #1
 8000c88:	6313      	str	r3, [r2, #48]	; 0x30
 8000c8a:	4b3a      	ldr	r3, [pc, #232]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c8e:	f003 0301 	and.w	r3, r3, #1
 8000c92:	607b      	str	r3, [r7, #4]
 8000c94:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000c96:	2300      	movs	r3, #0
 8000c98:	603b      	str	r3, [r7, #0]
 8000c9a:	4b36      	ldr	r3, [pc, #216]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000c9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c9e:	4a35      	ldr	r2, [pc, #212]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000ca0:	f043 0302 	orr.w	r3, r3, #2
 8000ca4:	6313      	str	r3, [r2, #48]	; 0x30
 8000ca6:	4b33      	ldr	r3, [pc, #204]	; (8000d74 <MX_GPIO_Init+0x12c>)
 8000ca8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000caa:	f003 0302 	and.w	r3, r3, #2
 8000cae:	603b      	str	r3, [r7, #0]
 8000cb0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000cb2:	2200      	movs	r2, #0
 8000cb4:	21f3      	movs	r1, #243	; 0xf3
 8000cb6:	4830      	ldr	r0, [pc, #192]	; (8000d78 <MX_GPIO_Init+0x130>)
 8000cb8:	f001 f928 	bl	8001f0c <HAL_GPIO_WritePin>
                          |GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000cbc:	2200      	movs	r2, #0
 8000cbe:	2140      	movs	r1, #64	; 0x40
 8000cc0:	482e      	ldr	r0, [pc, #184]	; (8000d7c <MX_GPIO_Init+0x134>)
 8000cc2:	f001 f923 	bl	8001f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8000cc6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000cca:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000ccc:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8000cd0:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cd2:	2300      	movs	r3, #0
 8000cd4:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8000cd6:	f107 030c 	add.w	r3, r7, #12
 8000cda:	4619      	mov	r1, r3
 8000cdc:	4828      	ldr	r0, [pc, #160]	; (8000d80 <MX_GPIO_Init+0x138>)
 8000cde:	f000 ff79 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 PA4 LD2_Pin
                           PA6 PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4|LD2_Pin
 8000ce2:	23f3      	movs	r3, #243	; 0xf3
 8000ce4:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ce6:	2301      	movs	r3, #1
 8000ce8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cea:	2300      	movs	r3, #0
 8000cec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000cee:	2300      	movs	r3, #0
 8000cf0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cf2:	f107 030c 	add.w	r3, r7, #12
 8000cf6:	4619      	mov	r1, r3
 8000cf8:	481f      	ldr	r0, [pc, #124]	; (8000d78 <MX_GPIO_Init+0x130>)
 8000cfa:	f000 ff6b 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8000cfe:	230c      	movs	r3, #12
 8000d00:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d02:	2302      	movs	r3, #2
 8000d04:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d06:	2300      	movs	r3, #0
 8000d08:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d0a:	2303      	movs	r3, #3
 8000d0c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8000d0e:	2307      	movs	r3, #7
 8000d10:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000d12:	f107 030c 	add.w	r3, r7, #12
 8000d16:	4619      	mov	r1, r3
 8000d18:	4817      	ldr	r0, [pc, #92]	; (8000d78 <MX_GPIO_Init+0x130>)
 8000d1a:	f000 ff5b 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 8000d1e:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8000d22:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d24:	2300      	movs	r3, #0
 8000d26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000d2c:	f107 030c 	add.w	r3, r7, #12
 8000d30:	4619      	mov	r1, r3
 8000d32:	4813      	ldr	r0, [pc, #76]	; (8000d80 <MX_GPIO_Init+0x138>)
 8000d34:	f000 ff4e 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8000d38:	2338      	movs	r3, #56	; 0x38
 8000d3a:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000d3c:	2300      	movs	r3, #0
 8000d3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000d40:	2301      	movs	r3, #1
 8000d42:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d44:	f107 030c 	add.w	r3, r7, #12
 8000d48:	4619      	mov	r1, r3
 8000d4a:	480c      	ldr	r0, [pc, #48]	; (8000d7c <MX_GPIO_Init+0x134>)
 8000d4c:	f000 ff42 	bl	8001bd4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000d50:	2340      	movs	r3, #64	; 0x40
 8000d52:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000d54:	2301      	movs	r3, #1
 8000d56:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d58:	2300      	movs	r3, #0
 8000d5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d5c:	2300      	movs	r3, #0
 8000d5e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d60:	f107 030c 	add.w	r3, r7, #12
 8000d64:	4619      	mov	r1, r3
 8000d66:	4805      	ldr	r0, [pc, #20]	; (8000d7c <MX_GPIO_Init+0x134>)
 8000d68:	f000 ff34 	bl	8001bd4 <HAL_GPIO_Init>

}
 8000d6c:	bf00      	nop
 8000d6e:	3720      	adds	r7, #32
 8000d70:	46bd      	mov	sp, r7
 8000d72:	bd80      	pop	{r7, pc}
 8000d74:	40023800 	.word	0x40023800
 8000d78:	40020000 	.word	0x40020000
 8000d7c:	40020400 	.word	0x40020400
 8000d80:	40020800 	.word	0x40020800

08000d84 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000d84:	b580      	push	{r7, lr}
 8000d86:	b082      	sub	sp, #8
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	6078      	str	r0, [r7, #4]
  // 50ms Poll Button Timer
  if (htim == &htim5 )
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	4a2a      	ldr	r2, [pc, #168]	; (8000e38 <HAL_TIM_PeriodElapsedCallback+0xb4>)
 8000d90:	4293      	cmp	r3, r2
 8000d92:	d14c      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0xaa>
	  // Count the number of times the interrupt fires for flashing
	  static uint8_t i = 0;
	  // Set high if the button has been released, low while pressed
	  static uint8_t released = 1;

	  button = poll_buttons();
 8000d94:	f7ff fca6 	bl	80006e4 <poll_buttons>
 8000d98:	4603      	mov	r3, r0
 8000d9a:	461a      	mov	r2, r3
 8000d9c:	4b27      	ldr	r3, [pc, #156]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000d9e:	701a      	strb	r2, [r3, #0]
	  // If a new button is pressed
	  if (button && released) {
 8000da0:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000da2:	781b      	ldrb	r3, [r3, #0]
 8000da4:	2b00      	cmp	r3, #0
 8000da6:	d017      	beq.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0x54>
 8000da8:	4b25      	ldr	r3, [pc, #148]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000daa:	781b      	ldrb	r3, [r3, #0]
 8000dac:	2b00      	cmp	r3, #0
 8000dae:	d013      	beq.n	8000dd8 <HAL_TIM_PeriodElapsedCallback+0x54>
		  // Transmit IR Code Here!
		  disable_all_buttons();
 8000db0:	f7ff fc65 	bl	800067e <disable_all_buttons>
		  enable_button(button);
 8000db4:	4b21      	ldr	r3, [pc, #132]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000db6:	781b      	ldrb	r3, [r3, #0]
 8000db8:	4618      	mov	r0, r3
 8000dba:	f7ff fbb9 	bl	8000530 <enable_button>
		  update_buttons();
 8000dbe:	f7ff fc73 	bl	80006a8 <update_buttons>
		  last_pressed = button;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000dc4:	781a      	ldrb	r2, [r3, #0]
 8000dc6:	4b1f      	ldr	r3, [pc, #124]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000dc8:	701a      	strb	r2, [r3, #0]
		  released = 0;
 8000dca:	4b1d      	ldr	r3, [pc, #116]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	701a      	strb	r2, [r3, #0]
		  i = 0; // Reset counter
 8000dd0:	4b1d      	ldr	r3, [pc, #116]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000dd2:	2200      	movs	r2, #0
 8000dd4:	701a      	strb	r2, [r3, #0]
			  // clear the last pressed button and stop flashing
			  last_pressed = 0;
		  }
	  }
  }
}
 8000dd6:	e02a      	b.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0xaa>
	  } else if (!button && last_pressed) {
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <HAL_TIM_PeriodElapsedCallback+0xb8>)
 8000dda:	781b      	ldrb	r3, [r3, #0]
 8000ddc:	2b00      	cmp	r3, #0
 8000dde:	d126      	bne.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0xaa>
 8000de0:	4b18      	ldr	r3, [pc, #96]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000de2:	781b      	ldrb	r3, [r3, #0]
 8000de4:	2b00      	cmp	r3, #0
 8000de6:	d022      	beq.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0xaa>
		  released = 1;
 8000de8:	4b15      	ldr	r3, [pc, #84]	; (8000e40 <HAL_TIM_PeriodElapsedCallback+0xbc>)
 8000dea:	2201      	movs	r2, #1
 8000dec:	701a      	strb	r2, [r3, #0]
		  ++i;
 8000dee:	4b16      	ldr	r3, [pc, #88]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000df0:	781b      	ldrb	r3, [r3, #0]
 8000df2:	3301      	adds	r3, #1
 8000df4:	b2da      	uxtb	r2, r3
 8000df6:	4b14      	ldr	r3, [pc, #80]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000df8:	701a      	strb	r2, [r3, #0]
		  if (!(i % 4)) {
 8000dfa:	4b13      	ldr	r3, [pc, #76]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000dfc:	781b      	ldrb	r3, [r3, #0]
 8000dfe:	f003 0303 	and.w	r3, r3, #3
 8000e02:	b2db      	uxtb	r3, r3
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d107      	bne.n	8000e18 <HAL_TIM_PeriodElapsedCallback+0x94>
			  toggle_button(last_pressed);
 8000e08:	4b0e      	ldr	r3, [pc, #56]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e0a:	781b      	ldrb	r3, [r3, #0]
 8000e0c:	4618      	mov	r0, r3
 8000e0e:	f7ff fbf1 	bl	80005f4 <toggle_button>
			  update_buttons();
 8000e12:	f7ff fc49 	bl	80006a8 <update_buttons>
}
 8000e16:	e00a      	b.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0xaa>
		  else if (i > BUTTON_FLASH_DURATION / 50) {
 8000e18:	4b0b      	ldr	r3, [pc, #44]	; (8000e48 <HAL_TIM_PeriodElapsedCallback+0xc4>)
 8000e1a:	781b      	ldrb	r3, [r3, #0]
 8000e1c:	2b1e      	cmp	r3, #30
 8000e1e:	d906      	bls.n	8000e2e <HAL_TIM_PeriodElapsedCallback+0xaa>
			  disable_all_buttons();
 8000e20:	f7ff fc2d 	bl	800067e <disable_all_buttons>
			  update_buttons();
 8000e24:	f7ff fc40 	bl	80006a8 <update_buttons>
			  last_pressed = 0;
 8000e28:	4b06      	ldr	r3, [pc, #24]	; (8000e44 <HAL_TIM_PeriodElapsedCallback+0xc0>)
 8000e2a:	2200      	movs	r2, #0
 8000e2c:	701a      	strb	r2, [r3, #0]
}
 8000e2e:	bf00      	nop
 8000e30:	3708      	adds	r7, #8
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
 8000e36:	bf00      	nop
 8000e38:	20001554 	.word	0x20001554
 8000e3c:	200015e0 	.word	0x200015e0
 8000e40:	20000002 	.word	0x20000002
 8000e44:	200015e1 	.word	0x200015e1
 8000e48:	200015e2 	.word	0x200015e2

08000e4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000e4c:	b480      	push	{r7}
 8000e4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000e50:	b672      	cpsid	i
}
 8000e52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000e54:	e7fe      	b.n	8000e54 <Error_Handler+0x8>
	...

08000e58 <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b084      	sub	sp, #16
 8000e5c:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 8000e5e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8000e62:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 8000e64:	1d3a      	adds	r2, r7, #4
 8000e66:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e6a:	9300      	str	r3, [sp, #0]
 8000e6c:	2302      	movs	r3, #2
 8000e6e:	21a2      	movs	r1, #162	; 0xa2
 8000e70:	4803      	ldr	r0, [pc, #12]	; (8000e80 <disable_OLED_EEPROM_writes+0x28>)
 8000e72:	f001 f9a9 	bl	80021c8 <HAL_I2C_Master_Transmit>
}
 8000e76:	bf00      	nop
 8000e78:	3708      	adds	r7, #8
 8000e7a:	46bd      	mov	sp, r7
 8000e7c:	bd80      	pop	{r7, pc}
 8000e7e:	bf00      	nop
 8000e80:	20001460 	.word	0x20001460

08000e84 <drop_all_CS>:

void drop_all_CS(void) {
 8000e84:	b580      	push	{r7, lr}
 8000e86:	b082      	sub	sp, #8
 8000e88:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 8000e8a:	4b0a      	ldr	r3, [pc, #40]	; (8000eb4 <drop_all_CS+0x30>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 8000e90:	4b08      	ldr	r3, [pc, #32]	; (8000eb4 <drop_all_CS+0x30>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8000e96:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000e9a:	9300      	str	r3, [sp, #0]
 8000e9c:	2303      	movs	r3, #3
 8000e9e:	4a05      	ldr	r2, [pc, #20]	; (8000eb4 <drop_all_CS+0x30>)
 8000ea0:	21a2      	movs	r1, #162	; 0xa2
 8000ea2:	4805      	ldr	r0, [pc, #20]	; (8000eb8 <drop_all_CS+0x34>)
 8000ea4:	f001 f990 	bl	80021c8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000ea8:	2001      	movs	r0, #1
 8000eaa:	f000 fd5d 	bl	8001968 <HAL_Delay>
}
 8000eae:	bf00      	nop
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	bd80      	pop	{r7, pc}
 8000eb4:	20001410 	.word	0x20001410
 8000eb8:	20001460 	.word	0x20001460

08000ebc <raise_all_CS>:

void raise_all_CS(void) {
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	b082      	sub	sp, #8
 8000ec0:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 8000ec2:	4b09      	ldr	r3, [pc, #36]	; (8000ee8 <raise_all_CS+0x2c>)
 8000ec4:	22ff      	movs	r2, #255	; 0xff
 8000ec6:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8000ec8:	4b07      	ldr	r3, [pc, #28]	; (8000ee8 <raise_all_CS+0x2c>)
 8000eca:	2201      	movs	r2, #1
 8000ecc:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8000ece:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ed2:	9300      	str	r3, [sp, #0]
 8000ed4:	2303      	movs	r3, #3
 8000ed6:	4a04      	ldr	r2, [pc, #16]	; (8000ee8 <raise_all_CS+0x2c>)
 8000ed8:	21a2      	movs	r1, #162	; 0xa2
 8000eda:	4804      	ldr	r0, [pc, #16]	; (8000eec <raise_all_CS+0x30>)
 8000edc:	f001 f974 	bl	80021c8 <HAL_I2C_Master_Transmit>
}
 8000ee0:	bf00      	nop
 8000ee2:	46bd      	mov	sp, r7
 8000ee4:	bd80      	pop	{r7, pc}
 8000ee6:	bf00      	nop
 8000ee8:	20001410 	.word	0x20001410
 8000eec:	20001460 	.word	0x20001460

08000ef0 <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b084      	sub	sp, #16
 8000ef4:	af02      	add	r7, sp, #8
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 8000efa:	4b1a      	ldr	r3, [pc, #104]	; (8000f64 <drop_CS+0x74>)
 8000efc:	22ff      	movs	r2, #255	; 0xff
 8000efe:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8000f00:	4b18      	ldr	r3, [pc, #96]	; (8000f64 <drop_CS+0x74>)
 8000f02:	2201      	movs	r2, #1
 8000f04:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 8000f06:	79fb      	ldrb	r3, [r7, #7]
 8000f08:	2b09      	cmp	r3, #9
 8000f0a:	d107      	bne.n	8000f1c <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 8000f0c:	4b15      	ldr	r3, [pc, #84]	; (8000f64 <drop_CS+0x74>)
 8000f0e:	789b      	ldrb	r3, [r3, #2]
 8000f10:	f023 0301 	bic.w	r3, r3, #1
 8000f14:	b2da      	uxtb	r2, r3
 8000f16:	4b13      	ldr	r3, [pc, #76]	; (8000f64 <drop_CS+0x74>)
 8000f18:	709a      	strb	r2, [r3, #2]
 8000f1a:	e012      	b.n	8000f42 <drop_CS+0x52>
	} else if (display <= 8) {
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	2b08      	cmp	r3, #8
 8000f20:	d80f      	bhi.n	8000f42 <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 8000f22:	4b10      	ldr	r3, [pc, #64]	; (8000f64 <drop_CS+0x74>)
 8000f24:	785b      	ldrb	r3, [r3, #1]
 8000f26:	b25a      	sxtb	r2, r3
 8000f28:	79fb      	ldrb	r3, [r7, #7]
 8000f2a:	3b01      	subs	r3, #1
 8000f2c:	2101      	movs	r1, #1
 8000f2e:	fa01 f303 	lsl.w	r3, r1, r3
 8000f32:	b25b      	sxtb	r3, r3
 8000f34:	43db      	mvns	r3, r3
 8000f36:	b25b      	sxtb	r3, r3
 8000f38:	4013      	ands	r3, r2
 8000f3a:	b25b      	sxtb	r3, r3
 8000f3c:	b2da      	uxtb	r2, r3
 8000f3e:	4b09      	ldr	r3, [pc, #36]	; (8000f64 <drop_CS+0x74>)
 8000f40:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 8000f42:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000f46:	9300      	str	r3, [sp, #0]
 8000f48:	2303      	movs	r3, #3
 8000f4a:	4a06      	ldr	r2, [pc, #24]	; (8000f64 <drop_CS+0x74>)
 8000f4c:	21a2      	movs	r1, #162	; 0xa2
 8000f4e:	4806      	ldr	r0, [pc, #24]	; (8000f68 <drop_CS+0x78>)
 8000f50:	f001 f93a 	bl	80021c8 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8000f54:	2001      	movs	r0, #1
 8000f56:	f000 fd07 	bl	8001968 <HAL_Delay>
}
 8000f5a:	bf00      	nop
 8000f5c:	3708      	adds	r7, #8
 8000f5e:	46bd      	mov	sp, r7
 8000f60:	bd80      	pop	{r7, pc}
 8000f62:	bf00      	nop
 8000f64:	20001410 	.word	0x20001410
 8000f68:	20001460 	.word	0x20001460

08000f6c <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
	disable_OLED_EEPROM_writes();
 8000f72:	f7ff ff71 	bl	8000e58 <disable_OLED_EEPROM_writes>
	raise_all_CS();
 8000f76:	f7ff ffa1 	bl	8000ebc <raise_all_CS>
	DC_HIGH();
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	2101      	movs	r1, #1
 8000f7e:	482e      	ldr	r0, [pc, #184]	; (8001038 <init_displays+0xcc>)
 8000f80:	f000 ffc4 	bl	8001f0c <HAL_GPIO_WritePin>
	RST_HIGH();
 8000f84:	2201      	movs	r2, #1
 8000f86:	2102      	movs	r1, #2
 8000f88:	482b      	ldr	r0, [pc, #172]	; (8001038 <init_displays+0xcc>)
 8000f8a:	f000 ffbf 	bl	8001f0c <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8000f8e:	200a      	movs	r0, #10
 8000f90:	f000 fcea 	bl	8001968 <HAL_Delay>
	RST_LOW();
 8000f94:	2200      	movs	r2, #0
 8000f96:	2102      	movs	r1, #2
 8000f98:	4827      	ldr	r0, [pc, #156]	; (8001038 <init_displays+0xcc>)
 8000f9a:	f000 ffb7 	bl	8001f0c <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 8000f9e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000fa2:	2201      	movs	r2, #1
 8000fa4:	4925      	ldr	r1, [pc, #148]	; (800103c <init_displays+0xd0>)
 8000fa6:	4826      	ldr	r0, [pc, #152]	; (8001040 <init_displays+0xd4>)
 8000fa8:	f002 f937 	bl	800321a <HAL_SPI_Transmit>
	HAL_Delay(10);
 8000fac:	200a      	movs	r0, #10
 8000fae:	f000 fcdb 	bl	8001968 <HAL_Delay>
	RST_HIGH();
 8000fb2:	2201      	movs	r2, #1
 8000fb4:	2102      	movs	r1, #2
 8000fb6:	4820      	ldr	r0, [pc, #128]	; (8001038 <init_displays+0xcc>)
 8000fb8:	f000 ffa8 	bl	8001f0c <HAL_GPIO_WritePin>

	DC_LOW();
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	2101      	movs	r1, #1
 8000fc0:	481d      	ldr	r0, [pc, #116]	; (8001038 <init_displays+0xcc>)
 8000fc2:	f000 ffa3 	bl	8001f0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8000fc6:	2001      	movs	r0, #1
 8000fc8:	f000 fcce 	bl	8001968 <HAL_Delay>

	drop_all_CS();
 8000fcc:	f7ff ff5a 	bl	8000e84 <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8000fd0:	2300      	movs	r3, #0
 8000fd2:	71fb      	strb	r3, [r7, #7]
 8000fd4:	e002      	b.n	8000fdc <init_displays+0x70>
 8000fd6:	79fb      	ldrb	r3, [r7, #7]
 8000fd8:	3301      	adds	r3, #1
 8000fda:	71fb      	strb	r3, [r7, #7]
 8000fdc:	79fb      	ldrb	r3, [r7, #7]
 8000fde:	2b4f      	cmp	r3, #79	; 0x4f
 8000fe0:	d9f9      	bls.n	8000fd6 <init_displays+0x6a>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8000fe2:	2300      	movs	r3, #0
 8000fe4:	80bb      	strh	r3, [r7, #4]
 8000fe6:	e014      	b.n	8001012 <init_displays+0xa6>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 8000fe8:	88bb      	ldrh	r3, [r7, #4]
 8000fea:	4a14      	ldr	r2, [pc, #80]	; (800103c <init_displays+0xd0>)
 8000fec:	1899      	adds	r1, r3, r2
 8000fee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8000ff2:	2201      	movs	r2, #1
 8000ff4:	4812      	ldr	r0, [pc, #72]	; (8001040 <init_displays+0xd4>)
 8000ff6:	f002 f910 	bl	800321a <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	70fb      	strb	r3, [r7, #3]
 8000ffe:	e002      	b.n	8001006 <init_displays+0x9a>
 8001000:	78fb      	ldrb	r3, [r7, #3]
 8001002:	3301      	adds	r3, #1
 8001004:	70fb      	strb	r3, [r7, #3]
 8001006:	78fb      	ldrb	r3, [r7, #3]
 8001008:	2b09      	cmp	r3, #9
 800100a:	d9f9      	bls.n	8001000 <init_displays+0x94>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 800100c:	88bb      	ldrh	r3, [r7, #4]
 800100e:	3301      	adds	r3, #1
 8001010:	80bb      	strh	r3, [r7, #4]
 8001012:	88bb      	ldrh	r3, [r7, #4]
 8001014:	2b19      	cmp	r3, #25
 8001016:	d9e7      	bls.n	8000fe8 <init_displays+0x7c>
	}

	raise_all_CS();
 8001018:	f7ff ff50 	bl	8000ebc <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 800101c:	2201      	movs	r2, #1
 800101e:	2101      	movs	r1, #1
 8001020:	4805      	ldr	r0, [pc, #20]	; (8001038 <init_displays+0xcc>)
 8001022:	f000 ff73 	bl	8001f0c <HAL_GPIO_WritePin>
	erase_buffer();
 8001026:	f000 f8e5 	bl	80011f4 <erase_buffer>
	update_all_displays();
 800102a:	f000 f879 	bl	8001120 <update_all_displays>
}
 800102e:	bf00      	nop
 8001030:	3708      	adds	r7, #8
 8001032:	46bd      	mov	sp, r7
 8001034:	bd80      	pop	{r7, pc}
 8001036:	bf00      	nop
 8001038:	40020000 	.word	0x40020000
 800103c:	20001414 	.word	0x20001414
 8001040:	200014b4 	.word	0x200014b4

08001044 <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 8001044:	b580      	push	{r7, lr}
 8001046:	b086      	sub	sp, #24
 8001048:	af00      	add	r7, sp, #0
 800104a:	4603      	mov	r3, r0
 800104c:	71fb      	strb	r3, [r7, #7]
	DC_LOW();
 800104e:	2200      	movs	r2, #0
 8001050:	2101      	movs	r1, #1
 8001052:	482f      	ldr	r0, [pc, #188]	; (8001110 <update_display+0xcc>)
 8001054:	f000 ff5a 	bl	8001f0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001058:	2001      	movs	r0, #1
 800105a:	f000 fc85 	bl	8001968 <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 800105e:	79fb      	ldrb	r3, [r7, #7]
 8001060:	4618      	mov	r0, r3
 8001062:	f7ff ff45 	bl	8000ef0 <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]
 800106a:	e002      	b.n	8001072 <update_display+0x2e>
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	3301      	adds	r3, #1
 8001070:	75fb      	strb	r3, [r7, #23]
 8001072:	7dfb      	ldrb	r3, [r7, #23]
 8001074:	2b4f      	cmp	r3, #79	; 0x4f
 8001076:	d9f9      	bls.n	800106c <update_display+0x28>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001078:	2300      	movs	r3, #0
 800107a:	82bb      	strh	r3, [r7, #20]
 800107c:	e014      	b.n	80010a8 <update_display+0x64>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 800107e:	8abb      	ldrh	r3, [r7, #20]
 8001080:	4a24      	ldr	r2, [pc, #144]	; (8001114 <update_display+0xd0>)
 8001082:	1899      	adds	r1, r3, r2
 8001084:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001088:	2201      	movs	r2, #1
 800108a:	4823      	ldr	r0, [pc, #140]	; (8001118 <update_display+0xd4>)
 800108c:	f002 f8c5 	bl	800321a <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001090:	2300      	movs	r3, #0
 8001092:	74fb      	strb	r3, [r7, #19]
 8001094:	e002      	b.n	800109c <update_display+0x58>
 8001096:	7cfb      	ldrb	r3, [r7, #19]
 8001098:	3301      	adds	r3, #1
 800109a:	74fb      	strb	r3, [r7, #19]
 800109c:	7cfb      	ldrb	r3, [r7, #19]
 800109e:	2b09      	cmp	r3, #9
 80010a0:	d9f9      	bls.n	8001096 <update_display+0x52>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 80010a2:	8abb      	ldrh	r3, [r7, #20]
 80010a4:	3301      	adds	r3, #1
 80010a6:	82bb      	strh	r3, [r7, #20]
 80010a8:	8abb      	ldrh	r3, [r7, #20]
 80010aa:	2b05      	cmp	r3, #5
 80010ac:	d9e7      	bls.n	800107e <update_display+0x3a>
	}

	DC_HIGH();
 80010ae:	2201      	movs	r2, #1
 80010b0:	2101      	movs	r1, #1
 80010b2:	4817      	ldr	r0, [pc, #92]	; (8001110 <update_display+0xcc>)
 80010b4:	f000 ff2a 	bl	8001f0c <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 80010b8:	2300      	movs	r3, #0
 80010ba:	74bb      	strb	r3, [r7, #18]
 80010bc:	e002      	b.n	80010c4 <update_display+0x80>
 80010be:	7cbb      	ldrb	r3, [r7, #18]
 80010c0:	3301      	adds	r3, #1
 80010c2:	74bb      	strb	r3, [r7, #18]
 80010c4:	7cbb      	ldrb	r3, [r7, #18]
 80010c6:	2b4f      	cmp	r3, #79	; 0x4f
 80010c8:	d9f9      	bls.n	80010be <update_display+0x7a>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80010ca:	2300      	movs	r3, #0
 80010cc:	823b      	strh	r3, [r7, #16]
 80010ce:	e014      	b.n	80010fa <update_display+0xb6>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 80010d0:	8a3b      	ldrh	r3, [r7, #16]
 80010d2:	4a12      	ldr	r2, [pc, #72]	; (800111c <update_display+0xd8>)
 80010d4:	1899      	adds	r1, r3, r2
 80010d6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80010da:	2201      	movs	r2, #1
 80010dc:	480e      	ldr	r0, [pc, #56]	; (8001118 <update_display+0xd4>)
 80010de:	f002 f89c 	bl	800321a <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 80010e2:	2300      	movs	r3, #0
 80010e4:	73fb      	strb	r3, [r7, #15]
 80010e6:	e002      	b.n	80010ee <update_display+0xaa>
 80010e8:	7bfb      	ldrb	r3, [r7, #15]
 80010ea:	3301      	adds	r3, #1
 80010ec:	73fb      	strb	r3, [r7, #15]
 80010ee:	7bfb      	ldrb	r3, [r7, #15]
 80010f0:	2b09      	cmp	r3, #9
 80010f2:	d9f9      	bls.n	80010e8 <update_display+0xa4>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80010f4:	8a3b      	ldrh	r3, [r7, #16]
 80010f6:	3301      	adds	r3, #1
 80010f8:	823b      	strh	r3, [r7, #16]
 80010fa:	8a3b      	ldrh	r3, [r7, #16]
 80010fc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001100:	d3e6      	bcc.n	80010d0 <update_display+0x8c>
	}

	raise_all_CS();
 8001102:	f7ff fedb 	bl	8000ebc <raise_all_CS>
}
 8001106:	bf00      	nop
 8001108:	3718      	adds	r7, #24
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40020000 	.word	0x40020000
 8001114:	20001430 	.word	0x20001430
 8001118:	200014b4 	.word	0x200014b4
 800111c:	200015e4 	.word	0x200015e4

08001120 <update_all_displays>:

void update_all_displays() {
 8001120:	b580      	push	{r7, lr}
 8001122:	b084      	sub	sp, #16
 8001124:	af00      	add	r7, sp, #0
	DC_LOW();
 8001126:	2200      	movs	r2, #0
 8001128:	2101      	movs	r1, #1
 800112a:	482e      	ldr	r0, [pc, #184]	; (80011e4 <update_all_displays+0xc4>)
 800112c:	f000 feee 	bl	8001f0c <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001130:	2001      	movs	r0, #1
 8001132:	f000 fc19 	bl	8001968 <HAL_Delay>
	drop_all_CS();
 8001136:	f7ff fea5 	bl	8000e84 <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 800113a:	2300      	movs	r3, #0
 800113c:	73fb      	strb	r3, [r7, #15]
 800113e:	e002      	b.n	8001146 <update_all_displays+0x26>
 8001140:	7bfb      	ldrb	r3, [r7, #15]
 8001142:	3301      	adds	r3, #1
 8001144:	73fb      	strb	r3, [r7, #15]
 8001146:	7bfb      	ldrb	r3, [r7, #15]
 8001148:	2b4f      	cmp	r3, #79	; 0x4f
 800114a:	d9f9      	bls.n	8001140 <update_all_displays+0x20>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 800114c:	2300      	movs	r3, #0
 800114e:	81bb      	strh	r3, [r7, #12]
 8001150:	e014      	b.n	800117c <update_all_displays+0x5c>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8001152:	89bb      	ldrh	r3, [r7, #12]
 8001154:	4a24      	ldr	r2, [pc, #144]	; (80011e8 <update_all_displays+0xc8>)
 8001156:	1899      	adds	r1, r3, r2
 8001158:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800115c:	2201      	movs	r2, #1
 800115e:	4823      	ldr	r0, [pc, #140]	; (80011ec <update_all_displays+0xcc>)
 8001160:	f002 f85b 	bl	800321a <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001164:	2300      	movs	r3, #0
 8001166:	72fb      	strb	r3, [r7, #11]
 8001168:	e002      	b.n	8001170 <update_all_displays+0x50>
 800116a:	7afb      	ldrb	r3, [r7, #11]
 800116c:	3301      	adds	r3, #1
 800116e:	72fb      	strb	r3, [r7, #11]
 8001170:	7afb      	ldrb	r3, [r7, #11]
 8001172:	2b09      	cmp	r3, #9
 8001174:	d9f9      	bls.n	800116a <update_all_displays+0x4a>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001176:	89bb      	ldrh	r3, [r7, #12]
 8001178:	3301      	adds	r3, #1
 800117a:	81bb      	strh	r3, [r7, #12]
 800117c:	89bb      	ldrh	r3, [r7, #12]
 800117e:	2b05      	cmp	r3, #5
 8001180:	d9e7      	bls.n	8001152 <update_all_displays+0x32>
	}

	DC_HIGH();
 8001182:	2201      	movs	r2, #1
 8001184:	2101      	movs	r1, #1
 8001186:	4817      	ldr	r0, [pc, #92]	; (80011e4 <update_all_displays+0xc4>)
 8001188:	f000 fec0 	bl	8001f0c <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 800118c:	2300      	movs	r3, #0
 800118e:	72bb      	strb	r3, [r7, #10]
 8001190:	e002      	b.n	8001198 <update_all_displays+0x78>
 8001192:	7abb      	ldrb	r3, [r7, #10]
 8001194:	3301      	adds	r3, #1
 8001196:	72bb      	strb	r3, [r7, #10]
 8001198:	7abb      	ldrb	r3, [r7, #10]
 800119a:	2b4f      	cmp	r3, #79	; 0x4f
 800119c:	d9f9      	bls.n	8001192 <update_all_displays+0x72>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 800119e:	2300      	movs	r3, #0
 80011a0:	813b      	strh	r3, [r7, #8]
 80011a2:	e014      	b.n	80011ce <update_all_displays+0xae>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 80011a4:	893b      	ldrh	r3, [r7, #8]
 80011a6:	4a12      	ldr	r2, [pc, #72]	; (80011f0 <update_all_displays+0xd0>)
 80011a8:	1899      	adds	r1, r3, r2
 80011aa:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80011ae:	2201      	movs	r2, #1
 80011b0:	480e      	ldr	r0, [pc, #56]	; (80011ec <update_all_displays+0xcc>)
 80011b2:	f002 f832 	bl	800321a <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 80011b6:	2300      	movs	r3, #0
 80011b8:	71fb      	strb	r3, [r7, #7]
 80011ba:	e002      	b.n	80011c2 <update_all_displays+0xa2>
 80011bc:	79fb      	ldrb	r3, [r7, #7]
 80011be:	3301      	adds	r3, #1
 80011c0:	71fb      	strb	r3, [r7, #7]
 80011c2:	79fb      	ldrb	r3, [r7, #7]
 80011c4:	2b09      	cmp	r3, #9
 80011c6:	d9f9      	bls.n	80011bc <update_all_displays+0x9c>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80011c8:	893b      	ldrh	r3, [r7, #8]
 80011ca:	3301      	adds	r3, #1
 80011cc:	813b      	strh	r3, [r7, #8]
 80011ce:	893b      	ldrh	r3, [r7, #8]
 80011d0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80011d4:	d3e6      	bcc.n	80011a4 <update_all_displays+0x84>
	}
	raise_all_CS();
 80011d6:	f7ff fe71 	bl	8000ebc <raise_all_CS>
}
 80011da:	bf00      	nop
 80011dc:	3710      	adds	r7, #16
 80011de:	46bd      	mov	sp, r7
 80011e0:	bd80      	pop	{r7, pc}
 80011e2:	bf00      	nop
 80011e4:	40020000 	.word	0x40020000
 80011e8:	20001430 	.word	0x20001430
 80011ec:	200014b4 	.word	0x200014b4
 80011f0:	200015e4 	.word	0x200015e4

080011f4 <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 80011f4:	b480      	push	{r7}
 80011f6:	b083      	sub	sp, #12
 80011f8:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80011fa:	2300      	movs	r3, #0
 80011fc:	80fb      	strh	r3, [r7, #6]
 80011fe:	e006      	b.n	800120e <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 8001200:	88fb      	ldrh	r3, [r7, #6]
 8001202:	4a08      	ldr	r2, [pc, #32]	; (8001224 <erase_buffer+0x30>)
 8001204:	2100      	movs	r1, #0
 8001206:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001208:	88fb      	ldrh	r3, [r7, #6]
 800120a:	3301      	adds	r3, #1
 800120c:	80fb      	strh	r3, [r7, #6]
 800120e:	88fb      	ldrh	r3, [r7, #6]
 8001210:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001214:	d3f4      	bcc.n	8001200 <erase_buffer+0xc>
	}
}
 8001216:	bf00      	nop
 8001218:	bf00      	nop
 800121a:	370c      	adds	r7, #12
 800121c:	46bd      	mov	sp, r7
 800121e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001222:	4770      	bx	lr
 8001224:	200015e4 	.word	0x200015e4

08001228 <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 8001228:	b480      	push	{r7}
 800122a:	b083      	sub	sp, #12
 800122c:	af00      	add	r7, sp, #0
 800122e:	4603      	mov	r3, r0
 8001230:	71fb      	strb	r3, [r7, #7]
 8001232:	460b      	mov	r3, r1
 8001234:	71bb      	strb	r3, [r7, #6]
 8001236:	4613      	mov	r3, r2
 8001238:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 800123a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800123e:	2b00      	cmp	r3, #0
 8001240:	db3d      	blt.n	80012be <draw_pixel+0x96>
 8001242:	79bb      	ldrb	r3, [r7, #6]
 8001244:	2b1f      	cmp	r3, #31
 8001246:	d83a      	bhi.n	80012be <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 8001248:	797b      	ldrb	r3, [r7, #5]
 800124a:	2b00      	cmp	r3, #0
 800124c:	d01a      	beq.n	8001284 <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 800124e:	79fa      	ldrb	r2, [r7, #7]
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	08db      	lsrs	r3, r3, #3
 8001254:	b2d8      	uxtb	r0, r3
 8001256:	4603      	mov	r3, r0
 8001258:	01db      	lsls	r3, r3, #7
 800125a:	4413      	add	r3, r2
 800125c:	4a1b      	ldr	r2, [pc, #108]	; (80012cc <draw_pixel+0xa4>)
 800125e:	5cd3      	ldrb	r3, [r2, r3]
 8001260:	b25a      	sxtb	r2, r3
 8001262:	79bb      	ldrb	r3, [r7, #6]
 8001264:	f003 0307 	and.w	r3, r3, #7
 8001268:	2101      	movs	r1, #1
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	b25b      	sxtb	r3, r3
 8001270:	4313      	orrs	r3, r2
 8001272:	b259      	sxtb	r1, r3
 8001274:	79fa      	ldrb	r2, [r7, #7]
 8001276:	4603      	mov	r3, r0
 8001278:	01db      	lsls	r3, r3, #7
 800127a:	4413      	add	r3, r2
 800127c:	b2c9      	uxtb	r1, r1
 800127e:	4a13      	ldr	r2, [pc, #76]	; (80012cc <draw_pixel+0xa4>)
 8001280:	54d1      	strb	r1, [r2, r3]
 8001282:	e01d      	b.n	80012c0 <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 8001284:	79fa      	ldrb	r2, [r7, #7]
 8001286:	79bb      	ldrb	r3, [r7, #6]
 8001288:	08db      	lsrs	r3, r3, #3
 800128a:	b2d8      	uxtb	r0, r3
 800128c:	4603      	mov	r3, r0
 800128e:	01db      	lsls	r3, r3, #7
 8001290:	4413      	add	r3, r2
 8001292:	4a0e      	ldr	r2, [pc, #56]	; (80012cc <draw_pixel+0xa4>)
 8001294:	5cd3      	ldrb	r3, [r2, r3]
 8001296:	b25a      	sxtb	r2, r3
 8001298:	79bb      	ldrb	r3, [r7, #6]
 800129a:	f003 0307 	and.w	r3, r3, #7
 800129e:	2101      	movs	r1, #1
 80012a0:	fa01 f303 	lsl.w	r3, r1, r3
 80012a4:	b25b      	sxtb	r3, r3
 80012a6:	43db      	mvns	r3, r3
 80012a8:	b25b      	sxtb	r3, r3
 80012aa:	4013      	ands	r3, r2
 80012ac:	b259      	sxtb	r1, r3
 80012ae:	79fa      	ldrb	r2, [r7, #7]
 80012b0:	4603      	mov	r3, r0
 80012b2:	01db      	lsls	r3, r3, #7
 80012b4:	4413      	add	r3, r2
 80012b6:	b2c9      	uxtb	r1, r1
 80012b8:	4a04      	ldr	r2, [pc, #16]	; (80012cc <draw_pixel+0xa4>)
 80012ba:	54d1      	strb	r1, [r2, r3]
 80012bc:	e000      	b.n	80012c0 <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 80012be:	bf00      	nop
	}
}
 80012c0:	370c      	adds	r7, #12
 80012c2:	46bd      	mov	sp, r7
 80012c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012c8:	4770      	bx	lr
 80012ca:	bf00      	nop
 80012cc:	200015e4 	.word	0x200015e4

080012d0 <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 80012d0:	b590      	push	{r4, r7, lr}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af02      	add	r7, sp, #8
 80012d6:	4604      	mov	r4, r0
 80012d8:	4608      	mov	r0, r1
 80012da:	4611      	mov	r1, r2
 80012dc:	461a      	mov	r2, r3
 80012de:	4623      	mov	r3, r4
 80012e0:	71fb      	strb	r3, [r7, #7]
 80012e2:	4603      	mov	r3, r0
 80012e4:	71bb      	strb	r3, [r7, #6]
 80012e6:	460b      	mov	r3, r1
 80012e8:	717b      	strb	r3, [r7, #5]
 80012ea:	4613      	mov	r3, r2
 80012ec:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 80012ee:	79fb      	ldrb	r3, [r7, #7]
 80012f0:	2b1f      	cmp	r3, #31
 80012f2:	d913      	bls.n	800131c <draw_char+0x4c>
 80012f4:	79fb      	ldrb	r3, [r7, #7]
 80012f6:	2b7e      	cmp	r3, #126	; 0x7e
 80012f8:	d810      	bhi.n	800131c <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 80012fa:	79fb      	ldrb	r3, [r7, #7]
 80012fc:	3b20      	subs	r3, #32
 80012fe:	2236      	movs	r2, #54	; 0x36
 8001300:	fb02 f303 	mul.w	r3, r2, r3
 8001304:	4a07      	ldr	r2, [pc, #28]	; (8001324 <draw_char+0x54>)
 8001306:	1898      	adds	r0, r3, r2
 8001308:	797a      	ldrb	r2, [r7, #5]
 800130a:	79b9      	ldrb	r1, [r7, #6]
 800130c:	793b      	ldrb	r3, [r7, #4]
 800130e:	9301      	str	r3, [sp, #4]
 8001310:	231b      	movs	r3, #27
 8001312:	9300      	str	r3, [sp, #0]
 8001314:	230c      	movs	r3, #12
 8001316:	f000 f807 	bl	8001328 <draw_bmp>
 800131a:	e000      	b.n	800131e <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 800131c:	bf00      	nop
}
 800131e:	370c      	adds	r7, #12
 8001320:	46bd      	mov	sp, r7
 8001322:	bd90      	pop	{r4, r7, pc}
 8001324:	20000004 	.word	0x20000004

08001328 <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 8001328:	b580      	push	{r7, lr}
 800132a:	b084      	sub	sp, #16
 800132c:	af00      	add	r7, sp, #0
 800132e:	6078      	str	r0, [r7, #4]
 8001330:	4608      	mov	r0, r1
 8001332:	4611      	mov	r1, r2
 8001334:	461a      	mov	r2, r3
 8001336:	4603      	mov	r3, r0
 8001338:	70fb      	strb	r3, [r7, #3]
 800133a:	460b      	mov	r3, r1
 800133c:	70bb      	strb	r3, [r7, #2]
 800133e:	4613      	mov	r3, r2
 8001340:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 8001342:	787b      	ldrb	r3, [r7, #1]
 8001344:	3307      	adds	r3, #7
 8001346:	2b00      	cmp	r3, #0
 8001348:	da00      	bge.n	800134c <draw_bmp+0x24>
 800134a:	3307      	adds	r3, #7
 800134c:	10db      	asrs	r3, r3, #3
 800134e:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 8001350:	2300      	movs	r3, #0
 8001352:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 8001354:	2300      	movs	r3, #0
 8001356:	81bb      	strh	r3, [r7, #12]
 8001358:	e047      	b.n	80013ea <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 800135a:	2300      	movs	r3, #0
 800135c:	817b      	strh	r3, [r7, #10]
 800135e:	e036      	b.n	80013ce <draw_bmp+0xa6>
			if (i & 7)
 8001360:	897b      	ldrh	r3, [r7, #10]
 8001362:	f003 0307 	and.w	r3, r3, #7
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <draw_bmp+0x4a>
				b <<= 1;
 800136a:	7bfb      	ldrb	r3, [r7, #15]
 800136c:	005b      	lsls	r3, r3, #1
 800136e:	73fb      	strb	r3, [r7, #15]
 8001370:	e012      	b.n	8001398 <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 8001372:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8001376:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800137a:	fb03 f202 	mul.w	r2, r3, r2
 800137e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001382:	2b00      	cmp	r3, #0
 8001384:	da00      	bge.n	8001388 <draw_bmp+0x60>
 8001386:	3307      	adds	r3, #7
 8001388:	10db      	asrs	r3, r3, #3
 800138a:	b21b      	sxth	r3, r3
 800138c:	4413      	add	r3, r2
 800138e:	461a      	mov	r2, r3
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	4413      	add	r3, r2
 8001394:	781b      	ldrb	r3, [r3, #0]
 8001396:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 8001398:	897b      	ldrh	r3, [r7, #10]
 800139a:	b2da      	uxtb	r2, r3
 800139c:	78fb      	ldrb	r3, [r7, #3]
 800139e:	4413      	add	r3, r2
 80013a0:	b2d8      	uxtb	r0, r3
 80013a2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80013a6:	2b00      	cmp	r3, #0
 80013a8:	db06      	blt.n	80013b8 <draw_bmp+0x90>
 80013aa:	7f3b      	ldrb	r3, [r7, #28]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	bf0c      	ite	eq
 80013b0:	2301      	moveq	r3, #1
 80013b2:	2300      	movne	r3, #0
 80013b4:	b2db      	uxtb	r3, r3
 80013b6:	e000      	b.n	80013ba <draw_bmp+0x92>
 80013b8:	7f3b      	ldrb	r3, [r7, #28]
 80013ba:	78b9      	ldrb	r1, [r7, #2]
 80013bc:	461a      	mov	r2, r3
 80013be:	f7ff ff33 	bl	8001228 <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 80013c2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80013c6:	b29b      	uxth	r3, r3
 80013c8:	3301      	adds	r3, #1
 80013ca:	b29b      	uxth	r3, r3
 80013cc:	817b      	strh	r3, [r7, #10]
 80013ce:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80013d2:	787b      	ldrb	r3, [r7, #1]
 80013d4:	429a      	cmp	r2, r3
 80013d6:	dbc3      	blt.n	8001360 <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 80013d8:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80013dc:	b29b      	uxth	r3, r3
 80013de:	3301      	adds	r3, #1
 80013e0:	b29b      	uxth	r3, r3
 80013e2:	81bb      	strh	r3, [r7, #12]
 80013e4:	78bb      	ldrb	r3, [r7, #2]
 80013e6:	3301      	adds	r3, #1
 80013e8:	70bb      	strb	r3, [r7, #2]
 80013ea:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 80013ee:	7e3b      	ldrb	r3, [r7, #24]
 80013f0:	429a      	cmp	r2, r3
 80013f2:	dbb2      	blt.n	800135a <draw_bmp+0x32>
		}
	}
}
 80013f4:	bf00      	nop
 80013f6:	bf00      	nop
 80013f8:	3710      	adds	r7, #16
 80013fa:	46bd      	mov	sp, r7
 80013fc:	bd80      	pop	{r7, pc}

080013fe <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 80013fe:	b580      	push	{r7, lr}
 8001400:	b084      	sub	sp, #16
 8001402:	af00      	add	r7, sp, #0
 8001404:	6078      	str	r0, [r7, #4]
 8001406:	460b      	mov	r3, r1
 8001408:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 800140a:	6878      	ldr	r0, [r7, #4]
 800140c:	f7fe fee2 	bl	80001d4 <strlen>
 8001410:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 8001412:	68fb      	ldr	r3, [r7, #12]
 8001414:	2b00      	cmp	r3, #0
 8001416:	d02c      	beq.n	8001472 <draw_string+0x74>
 8001418:	68fb      	ldr	r3, [r7, #12]
 800141a:	2b0a      	cmp	r3, #10
 800141c:	d829      	bhi.n	8001472 <draw_string+0x74>

    uint8_t x = DISPLAY_WIDTH/2;
 800141e:	2340      	movs	r3, #64	; 0x40
 8001420:	72fb      	strb	r3, [r7, #11]
    if (len%2) {
 8001422:	68fb      	ldr	r3, [r7, #12]
 8001424:	f003 0301 	and.w	r3, r3, #1
 8001428:	2b00      	cmp	r3, #0
 800142a:	d005      	beq.n	8001438 <draw_string+0x3a>
        x -= FONT_WIDTH/2;
 800142c:	7afb      	ldrb	r3, [r7, #11]
 800142e:	3b06      	subs	r3, #6
 8001430:	72fb      	strb	r3, [r7, #11]
        len -= 1;
 8001432:	68fb      	ldr	r3, [r7, #12]
 8001434:	3b01      	subs	r3, #1
 8001436:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 8001438:	68fa      	ldr	r2, [r7, #12]
 800143a:	4613      	mov	r3, r2
 800143c:	005b      	lsls	r3, r3, #1
 800143e:	4413      	add	r3, r2
 8001440:	009b      	lsls	r3, r3, #2
 8001442:	085b      	lsrs	r3, r3, #1
 8001444:	b2db      	uxtb	r3, r3
 8001446:	7afa      	ldrb	r2, [r7, #11]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	72fb      	strb	r3, [r7, #11]

    while(*str) {
 800144c:	e00c      	b.n	8001468 <draw_string+0x6a>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 800144e:	687b      	ldr	r3, [r7, #4]
 8001450:	7818      	ldrb	r0, [r3, #0]
 8001452:	78fb      	ldrb	r3, [r7, #3]
 8001454:	7af9      	ldrb	r1, [r7, #11]
 8001456:	2203      	movs	r2, #3
 8001458:	f7ff ff3a 	bl	80012d0 <draw_char>
        x += FONT_WIDTH;
 800145c:	7afb      	ldrb	r3, [r7, #11]
 800145e:	330c      	adds	r3, #12
 8001460:	72fb      	strb	r3, [r7, #11]
        ++str;
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	3301      	adds	r3, #1
 8001466:	607b      	str	r3, [r7, #4]
    while(*str) {
 8001468:	687b      	ldr	r3, [r7, #4]
 800146a:	781b      	ldrb	r3, [r3, #0]
 800146c:	2b00      	cmp	r3, #0
 800146e:	d1ee      	bne.n	800144e <draw_string+0x50>
 8001470:	e000      	b.n	8001474 <draw_string+0x76>
    if (len <= 0 || len > 10) return;
 8001472:	bf00      	nop
    }
}
 8001474:	3710      	adds	r7, #16
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
	...

0800147c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800147c:	b580      	push	{r7, lr}
 800147e:	b082      	sub	sp, #8
 8001480:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001482:	2300      	movs	r3, #0
 8001484:	607b      	str	r3, [r7, #4]
 8001486:	4b10      	ldr	r3, [pc, #64]	; (80014c8 <HAL_MspInit+0x4c>)
 8001488:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800148a:	4a0f      	ldr	r2, [pc, #60]	; (80014c8 <HAL_MspInit+0x4c>)
 800148c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001490:	6453      	str	r3, [r2, #68]	; 0x44
 8001492:	4b0d      	ldr	r3, [pc, #52]	; (80014c8 <HAL_MspInit+0x4c>)
 8001494:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001496:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800149a:	607b      	str	r3, [r7, #4]
 800149c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800149e:	2300      	movs	r3, #0
 80014a0:	603b      	str	r3, [r7, #0]
 80014a2:	4b09      	ldr	r3, [pc, #36]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a6:	4a08      	ldr	r2, [pc, #32]	; (80014c8 <HAL_MspInit+0x4c>)
 80014a8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ac:	6413      	str	r3, [r2, #64]	; 0x40
 80014ae:	4b06      	ldr	r3, [pc, #24]	; (80014c8 <HAL_MspInit+0x4c>)
 80014b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014b6:	603b      	str	r3, [r7, #0]
 80014b8:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80014ba:	2007      	movs	r0, #7
 80014bc:	f000 fb48 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014c0:	bf00      	nop
 80014c2:	3708      	adds	r7, #8
 80014c4:	46bd      	mov	sp, r7
 80014c6:	bd80      	pop	{r7, pc}
 80014c8:	40023800 	.word	0x40023800

080014cc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	b08a      	sub	sp, #40	; 0x28
 80014d0:	af00      	add	r7, sp, #0
 80014d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014d4:	f107 0314 	add.w	r3, r7, #20
 80014d8:	2200      	movs	r2, #0
 80014da:	601a      	str	r2, [r3, #0]
 80014dc:	605a      	str	r2, [r3, #4]
 80014de:	609a      	str	r2, [r3, #8]
 80014e0:	60da      	str	r2, [r3, #12]
 80014e2:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4a19      	ldr	r2, [pc, #100]	; (8001550 <HAL_I2C_MspInit+0x84>)
 80014ea:	4293      	cmp	r3, r2
 80014ec:	d12c      	bne.n	8001548 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80014ee:	2300      	movs	r3, #0
 80014f0:	613b      	str	r3, [r7, #16]
 80014f2:	4b18      	ldr	r3, [pc, #96]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014f6:	4a17      	ldr	r2, [pc, #92]	; (8001554 <HAL_I2C_MspInit+0x88>)
 80014f8:	f043 0302 	orr.w	r3, r3, #2
 80014fc:	6313      	str	r3, [r2, #48]	; 0x30
 80014fe:	4b15      	ldr	r3, [pc, #84]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001500:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001502:	f003 0302 	and.w	r3, r3, #2
 8001506:	613b      	str	r3, [r7, #16]
 8001508:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800150a:	f44f 7340 	mov.w	r3, #768	; 0x300
 800150e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001510:	2312      	movs	r3, #18
 8001512:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001514:	2300      	movs	r3, #0
 8001516:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001518:	2303      	movs	r3, #3
 800151a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800151c:	2304      	movs	r3, #4
 800151e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001520:	f107 0314 	add.w	r3, r7, #20
 8001524:	4619      	mov	r1, r3
 8001526:	480c      	ldr	r0, [pc, #48]	; (8001558 <HAL_I2C_MspInit+0x8c>)
 8001528:	f000 fb54 	bl	8001bd4 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800152c:	2300      	movs	r3, #0
 800152e:	60fb      	str	r3, [r7, #12]
 8001530:	4b08      	ldr	r3, [pc, #32]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001534:	4a07      	ldr	r2, [pc, #28]	; (8001554 <HAL_I2C_MspInit+0x88>)
 8001536:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800153a:	6413      	str	r3, [r2, #64]	; 0x40
 800153c:	4b05      	ldr	r3, [pc, #20]	; (8001554 <HAL_I2C_MspInit+0x88>)
 800153e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001540:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001544:	60fb      	str	r3, [r7, #12]
 8001546:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001548:	bf00      	nop
 800154a:	3728      	adds	r7, #40	; 0x28
 800154c:	46bd      	mov	sp, r7
 800154e:	bd80      	pop	{r7, pc}
 8001550:	40005400 	.word	0x40005400
 8001554:	40023800 	.word	0x40023800
 8001558:	40020400 	.word	0x40020400

0800155c <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800155c:	b580      	push	{r7, lr}
 800155e:	b08a      	sub	sp, #40	; 0x28
 8001560:	af00      	add	r7, sp, #0
 8001562:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001564:	f107 0314 	add.w	r3, r7, #20
 8001568:	2200      	movs	r2, #0
 800156a:	601a      	str	r2, [r3, #0]
 800156c:	605a      	str	r2, [r3, #4]
 800156e:	609a      	str	r2, [r3, #8]
 8001570:	60da      	str	r2, [r3, #12]
 8001572:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	4a28      	ldr	r2, [pc, #160]	; (800161c <HAL_SPI_MspInit+0xc0>)
 800157a:	4293      	cmp	r3, r2
 800157c:	d14a      	bne.n	8001614 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	613b      	str	r3, [r7, #16]
 8001582:	4b27      	ldr	r3, [pc, #156]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 8001584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001586:	4a26      	ldr	r2, [pc, #152]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 8001588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800158c:	6413      	str	r3, [r2, #64]	; 0x40
 800158e:	4b24      	ldr	r3, [pc, #144]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 8001590:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001592:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001596:	613b      	str	r3, [r7, #16]
 8001598:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800159a:	2300      	movs	r3, #0
 800159c:	60fb      	str	r3, [r7, #12]
 800159e:	4b20      	ldr	r3, [pc, #128]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 80015a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015a2:	4a1f      	ldr	r2, [pc, #124]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 80015a4:	f043 0304 	orr.w	r3, r3, #4
 80015a8:	6313      	str	r3, [r2, #48]	; 0x30
 80015aa:	4b1d      	ldr	r3, [pc, #116]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 80015ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ae:	f003 0304 	and.w	r3, r3, #4
 80015b2:	60fb      	str	r3, [r7, #12]
 80015b4:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80015b6:	2300      	movs	r3, #0
 80015b8:	60bb      	str	r3, [r7, #8]
 80015ba:	4b19      	ldr	r3, [pc, #100]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 80015bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015be:	4a18      	ldr	r2, [pc, #96]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 80015c0:	f043 0302 	orr.w	r3, r3, #2
 80015c4:	6313      	str	r3, [r2, #48]	; 0x30
 80015c6:	4b16      	ldr	r3, [pc, #88]	; (8001620 <HAL_SPI_MspInit+0xc4>)
 80015c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ca:	f003 0302 	and.w	r3, r3, #2
 80015ce:	60bb      	str	r3, [r7, #8]
 80015d0:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80015d2:	2308      	movs	r3, #8
 80015d4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015d6:	2302      	movs	r3, #2
 80015d8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015de:	2303      	movs	r3, #3
 80015e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80015e2:	2305      	movs	r3, #5
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015e6:	f107 0314 	add.w	r3, r7, #20
 80015ea:	4619      	mov	r1, r3
 80015ec:	480d      	ldr	r0, [pc, #52]	; (8001624 <HAL_SPI_MspInit+0xc8>)
 80015ee:	f000 faf1 	bl	8001bd4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80015f2:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f8:	2302      	movs	r3, #2
 80015fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015fc:	2300      	movs	r3, #0
 80015fe:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001600:	2303      	movs	r3, #3
 8001602:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001604:	2305      	movs	r3, #5
 8001606:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001608:	f107 0314 	add.w	r3, r7, #20
 800160c:	4619      	mov	r1, r3
 800160e:	4806      	ldr	r0, [pc, #24]	; (8001628 <HAL_SPI_MspInit+0xcc>)
 8001610:	f000 fae0 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8001614:	bf00      	nop
 8001616:	3728      	adds	r7, #40	; 0x28
 8001618:	46bd      	mov	sp, r7
 800161a:	bd80      	pop	{r7, pc}
 800161c:	40003800 	.word	0x40003800
 8001620:	40023800 	.word	0x40023800
 8001624:	40020800 	.word	0x40020800
 8001628:	40020400 	.word	0x40020400

0800162c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800162c:	b580      	push	{r7, lr}
 800162e:	b084      	sub	sp, #16
 8001630:	af00      	add	r7, sp, #0
 8001632:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001634:	687b      	ldr	r3, [r7, #4]
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800163c:	d10e      	bne.n	800165c <HAL_TIM_Base_MspInit+0x30>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	60fb      	str	r3, [r7, #12]
 8001642:	4b16      	ldr	r3, [pc, #88]	; (800169c <HAL_TIM_Base_MspInit+0x70>)
 8001644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001646:	4a15      	ldr	r2, [pc, #84]	; (800169c <HAL_TIM_Base_MspInit+0x70>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6413      	str	r3, [r2, #64]	; 0x40
 800164e:	4b13      	ldr	r3, [pc, #76]	; (800169c <HAL_TIM_Base_MspInit+0x70>)
 8001650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	60fb      	str	r3, [r7, #12]
 8001658:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 800165a:	e01a      	b.n	8001692 <HAL_TIM_Base_MspInit+0x66>
  else if(htim_base->Instance==TIM5)
 800165c:	687b      	ldr	r3, [r7, #4]
 800165e:	681b      	ldr	r3, [r3, #0]
 8001660:	4a0f      	ldr	r2, [pc, #60]	; (80016a0 <HAL_TIM_Base_MspInit+0x74>)
 8001662:	4293      	cmp	r3, r2
 8001664:	d115      	bne.n	8001692 <HAL_TIM_Base_MspInit+0x66>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8001666:	2300      	movs	r3, #0
 8001668:	60bb      	str	r3, [r7, #8]
 800166a:	4b0c      	ldr	r3, [pc, #48]	; (800169c <HAL_TIM_Base_MspInit+0x70>)
 800166c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800166e:	4a0b      	ldr	r2, [pc, #44]	; (800169c <HAL_TIM_Base_MspInit+0x70>)
 8001670:	f043 0308 	orr.w	r3, r3, #8
 8001674:	6413      	str	r3, [r2, #64]	; 0x40
 8001676:	4b09      	ldr	r3, [pc, #36]	; (800169c <HAL_TIM_Base_MspInit+0x70>)
 8001678:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800167a:	f003 0308 	and.w	r3, r3, #8
 800167e:	60bb      	str	r3, [r7, #8]
 8001680:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8001682:	2200      	movs	r2, #0
 8001684:	2100      	movs	r1, #0
 8001686:	2032      	movs	r0, #50	; 0x32
 8001688:	f000 fa6d 	bl	8001b66 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 800168c:	2032      	movs	r0, #50	; 0x32
 800168e:	f000 fa86 	bl	8001b9e <HAL_NVIC_EnableIRQ>
}
 8001692:	bf00      	nop
 8001694:	3710      	adds	r7, #16
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
 800169a:	bf00      	nop
 800169c:	40023800 	.word	0x40023800
 80016a0:	40000c00 	.word	0x40000c00

080016a4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016a4:	b580      	push	{r7, lr}
 80016a6:	b088      	sub	sp, #32
 80016a8:	af00      	add	r7, sp, #0
 80016aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016ac:	f107 030c 	add.w	r3, r7, #12
 80016b0:	2200      	movs	r2, #0
 80016b2:	601a      	str	r2, [r3, #0]
 80016b4:	605a      	str	r2, [r3, #4]
 80016b6:	609a      	str	r2, [r3, #8]
 80016b8:	60da      	str	r2, [r3, #12]
 80016ba:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 80016bc:	687b      	ldr	r3, [r7, #4]
 80016be:	681b      	ldr	r3, [r3, #0]
 80016c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80016c4:	d11e      	bne.n	8001704 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016c6:	2300      	movs	r3, #0
 80016c8:	60bb      	str	r3, [r7, #8]
 80016ca:	4b10      	ldr	r3, [pc, #64]	; (800170c <HAL_TIM_MspPostInit+0x68>)
 80016cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016ce:	4a0f      	ldr	r2, [pc, #60]	; (800170c <HAL_TIM_MspPostInit+0x68>)
 80016d0:	f043 0302 	orr.w	r3, r3, #2
 80016d4:	6313      	str	r3, [r2, #48]	; 0x30
 80016d6:	4b0d      	ldr	r3, [pc, #52]	; (800170c <HAL_TIM_MspPostInit+0x68>)
 80016d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016da:	f003 0302 	and.w	r3, r3, #2
 80016de:	60bb      	str	r3, [r7, #8]
 80016e0:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PB10     ------> TIM2_CH3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80016e2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80016e6:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80016e8:	2302      	movs	r3, #2
 80016ea:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ec:	2300      	movs	r3, #0
 80016ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016f0:	2300      	movs	r3, #0
 80016f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80016f4:	2301      	movs	r3, #1
 80016f6:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016f8:	f107 030c 	add.w	r3, r7, #12
 80016fc:	4619      	mov	r1, r3
 80016fe:	4804      	ldr	r0, [pc, #16]	; (8001710 <HAL_TIM_MspPostInit+0x6c>)
 8001700:	f000 fa68 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8001704:	bf00      	nop
 8001706:	3720      	adds	r7, #32
 8001708:	46bd      	mov	sp, r7
 800170a:	bd80      	pop	{r7, pc}
 800170c:	40023800 	.word	0x40023800
 8001710:	40020400 	.word	0x40020400

08001714 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b08a      	sub	sp, #40	; 0x28
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800171c:	f107 0314 	add.w	r3, r7, #20
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
 8001726:	609a      	str	r2, [r3, #8]
 8001728:	60da      	str	r2, [r3, #12]
 800172a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a19      	ldr	r2, [pc, #100]	; (8001798 <HAL_UART_MspInit+0x84>)
 8001732:	4293      	cmp	r3, r2
 8001734:	d12c      	bne.n	8001790 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8001736:	2300      	movs	r3, #0
 8001738:	613b      	str	r3, [r7, #16]
 800173a:	4b18      	ldr	r3, [pc, #96]	; (800179c <HAL_UART_MspInit+0x88>)
 800173c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800173e:	4a17      	ldr	r2, [pc, #92]	; (800179c <HAL_UART_MspInit+0x88>)
 8001740:	f043 0310 	orr.w	r3, r3, #16
 8001744:	6453      	str	r3, [r2, #68]	; 0x44
 8001746:	4b15      	ldr	r3, [pc, #84]	; (800179c <HAL_UART_MspInit+0x88>)
 8001748:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800174a:	f003 0310 	and.w	r3, r3, #16
 800174e:	613b      	str	r3, [r7, #16]
 8001750:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001752:	2300      	movs	r3, #0
 8001754:	60fb      	str	r3, [r7, #12]
 8001756:	4b11      	ldr	r3, [pc, #68]	; (800179c <HAL_UART_MspInit+0x88>)
 8001758:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800175a:	4a10      	ldr	r2, [pc, #64]	; (800179c <HAL_UART_MspInit+0x88>)
 800175c:	f043 0301 	orr.w	r3, r3, #1
 8001760:	6313      	str	r3, [r2, #48]	; 0x30
 8001762:	4b0e      	ldr	r3, [pc, #56]	; (800179c <HAL_UART_MspInit+0x88>)
 8001764:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001766:	f003 0301 	and.w	r3, r3, #1
 800176a:	60fb      	str	r3, [r7, #12]
 800176c:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800176e:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8001772:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001774:	2302      	movs	r3, #2
 8001776:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001778:	2300      	movs	r3, #0
 800177a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800177c:	2303      	movs	r3, #3
 800177e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8001780:	2307      	movs	r3, #7
 8001782:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	4619      	mov	r1, r3
 800178a:	4805      	ldr	r0, [pc, #20]	; (80017a0 <HAL_UART_MspInit+0x8c>)
 800178c:	f000 fa22 	bl	8001bd4 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8001790:	bf00      	nop
 8001792:	3728      	adds	r7, #40	; 0x28
 8001794:	46bd      	mov	sp, r7
 8001796:	bd80      	pop	{r7, pc}
 8001798:	40011000 	.word	0x40011000
 800179c:	40023800 	.word	0x40023800
 80017a0:	40020000 	.word	0x40020000

080017a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a4:	b480      	push	{r7}
 80017a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80017a8:	e7fe      	b.n	80017a8 <NMI_Handler+0x4>

080017aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017aa:	b480      	push	{r7}
 80017ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ae:	e7fe      	b.n	80017ae <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	e7fe      	b.n	80017b4 <MemManage_Handler+0x4>

080017b6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b6:	b480      	push	{r7}
 80017b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017ba:	e7fe      	b.n	80017ba <BusFault_Handler+0x4>

080017bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017bc:	b480      	push	{r7}
 80017be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c0:	e7fe      	b.n	80017c0 <UsageFault_Handler+0x4>

080017c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c2:	b480      	push	{r7}
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017c6:	bf00      	nop
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr

080017d0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d0:	b480      	push	{r7}
 80017d2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d4:	bf00      	nop
 80017d6:	46bd      	mov	sp, r7
 80017d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017dc:	4770      	bx	lr

080017de <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017de:	b480      	push	{r7}
 80017e0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e2:	bf00      	nop
 80017e4:	46bd      	mov	sp, r7
 80017e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f89a 	bl	8001928 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80017fc:	4802      	ldr	r0, [pc, #8]	; (8001808 <TIM5_IRQHandler+0x10>)
 80017fe:	f002 f8cf 	bl	80039a0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8001802:	bf00      	nop
 8001804:	bd80      	pop	{r7, pc}
 8001806:	bf00      	nop
 8001808:	20001554 	.word	0x20001554

0800180c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800180c:	b480      	push	{r7}
 800180e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001810:	4b06      	ldr	r3, [pc, #24]	; (800182c <SystemInit+0x20>)
 8001812:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001816:	4a05      	ldr	r2, [pc, #20]	; (800182c <SystemInit+0x20>)
 8001818:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800181c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001828:	4770      	bx	lr
 800182a:	bf00      	nop
 800182c:	e000ed00 	.word	0xe000ed00

08001830 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001830:	f8df d034 	ldr.w	sp, [pc, #52]	; 8001868 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001834:	480d      	ldr	r0, [pc, #52]	; (800186c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8001836:	490e      	ldr	r1, [pc, #56]	; (8001870 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8001838:	4a0e      	ldr	r2, [pc, #56]	; (8001874 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800183c:	e002      	b.n	8001844 <LoopCopyDataInit>

0800183e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800183e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001840:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001842:	3304      	adds	r3, #4

08001844 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001844:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001846:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001848:	d3f9      	bcc.n	800183e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800184a:	4a0b      	ldr	r2, [pc, #44]	; (8001878 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 800184c:	4c0b      	ldr	r4, [pc, #44]	; (800187c <LoopFillZerobss+0x26>)
  movs r3, #0
 800184e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001850:	e001      	b.n	8001856 <LoopFillZerobss>

08001852 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001852:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001854:	3204      	adds	r2, #4

08001856 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001856:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001858:	d3fb      	bcc.n	8001852 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800185a:	f7ff ffd7 	bl	800180c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800185e:	f003 f969 	bl	8004b34 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001862:	f7fe ffc1 	bl	80007e8 <main>
  bx  lr    
 8001866:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001868:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 800186c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001870:	20001444 	.word	0x20001444
  ldr r2, =_sidata
 8001874:	08004be4 	.word	0x08004be4
  ldr r2, =_sbss
 8001878:	20001444 	.word	0x20001444
  ldr r4, =_ebss
 800187c:	200017e8 	.word	0x200017e8

08001880 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001880:	e7fe      	b.n	8001880 <ADC_IRQHandler>
	...

08001884 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001888:	4b0e      	ldr	r3, [pc, #56]	; (80018c4 <HAL_Init+0x40>)
 800188a:	681b      	ldr	r3, [r3, #0]
 800188c:	4a0d      	ldr	r2, [pc, #52]	; (80018c4 <HAL_Init+0x40>)
 800188e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001892:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001894:	4b0b      	ldr	r3, [pc, #44]	; (80018c4 <HAL_Init+0x40>)
 8001896:	681b      	ldr	r3, [r3, #0]
 8001898:	4a0a      	ldr	r2, [pc, #40]	; (80018c4 <HAL_Init+0x40>)
 800189a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800189e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80018a0:	4b08      	ldr	r3, [pc, #32]	; (80018c4 <HAL_Init+0x40>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	4a07      	ldr	r2, [pc, #28]	; (80018c4 <HAL_Init+0x40>)
 80018a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80018aa:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80018ac:	2003      	movs	r0, #3
 80018ae:	f000 f94f 	bl	8001b50 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80018b2:	2000      	movs	r0, #0
 80018b4:	f000 f808 	bl	80018c8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80018b8:	f7ff fde0 	bl	800147c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80018bc:	2300      	movs	r3, #0
}
 80018be:	4618      	mov	r0, r3
 80018c0:	bd80      	pop	{r7, pc}
 80018c2:	bf00      	nop
 80018c4:	40023c00 	.word	0x40023c00

080018c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80018c8:	b580      	push	{r7, lr}
 80018ca:	b082      	sub	sp, #8
 80018cc:	af00      	add	r7, sp, #0
 80018ce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80018d0:	4b12      	ldr	r3, [pc, #72]	; (800191c <HAL_InitTick+0x54>)
 80018d2:	681a      	ldr	r2, [r3, #0]
 80018d4:	4b12      	ldr	r3, [pc, #72]	; (8001920 <HAL_InitTick+0x58>)
 80018d6:	781b      	ldrb	r3, [r3, #0]
 80018d8:	4619      	mov	r1, r3
 80018da:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80018de:	fbb3 f3f1 	udiv	r3, r3, r1
 80018e2:	fbb2 f3f3 	udiv	r3, r2, r3
 80018e6:	4618      	mov	r0, r3
 80018e8:	f000 f967 	bl	8001bba <HAL_SYSTICK_Config>
 80018ec:	4603      	mov	r3, r0
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d001      	beq.n	80018f6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e00e      	b.n	8001914 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	2b0f      	cmp	r3, #15
 80018fa:	d80a      	bhi.n	8001912 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018fc:	2200      	movs	r2, #0
 80018fe:	6879      	ldr	r1, [r7, #4]
 8001900:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001904:	f000 f92f 	bl	8001b66 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001908:	4a06      	ldr	r2, [pc, #24]	; (8001924 <HAL_InitTick+0x5c>)
 800190a:	687b      	ldr	r3, [r7, #4]
 800190c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800190e:	2300      	movs	r3, #0
 8001910:	e000      	b.n	8001914 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
}
 8001914:	4618      	mov	r0, r3
 8001916:	3708      	adds	r7, #8
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}
 800191c:	20001438 	.word	0x20001438
 8001920:	20001440 	.word	0x20001440
 8001924:	2000143c 	.word	0x2000143c

08001928 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001928:	b480      	push	{r7}
 800192a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800192c:	4b06      	ldr	r3, [pc, #24]	; (8001948 <HAL_IncTick+0x20>)
 800192e:	781b      	ldrb	r3, [r3, #0]
 8001930:	461a      	mov	r2, r3
 8001932:	4b06      	ldr	r3, [pc, #24]	; (800194c <HAL_IncTick+0x24>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	4413      	add	r3, r2
 8001938:	4a04      	ldr	r2, [pc, #16]	; (800194c <HAL_IncTick+0x24>)
 800193a:	6013      	str	r3, [r2, #0]
}
 800193c:	bf00      	nop
 800193e:	46bd      	mov	sp, r7
 8001940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001944:	4770      	bx	lr
 8001946:	bf00      	nop
 8001948:	20001440 	.word	0x20001440
 800194c:	200017e4 	.word	0x200017e4

08001950 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001950:	b480      	push	{r7}
 8001952:	af00      	add	r7, sp, #0
  return uwTick;
 8001954:	4b03      	ldr	r3, [pc, #12]	; (8001964 <HAL_GetTick+0x14>)
 8001956:	681b      	ldr	r3, [r3, #0]
}
 8001958:	4618      	mov	r0, r3
 800195a:	46bd      	mov	sp, r7
 800195c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001960:	4770      	bx	lr
 8001962:	bf00      	nop
 8001964:	200017e4 	.word	0x200017e4

08001968 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001968:	b580      	push	{r7, lr}
 800196a:	b084      	sub	sp, #16
 800196c:	af00      	add	r7, sp, #0
 800196e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001970:	f7ff ffee 	bl	8001950 <HAL_GetTick>
 8001974:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800197a:	68fb      	ldr	r3, [r7, #12]
 800197c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8001980:	d005      	beq.n	800198e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001982:	4b0a      	ldr	r3, [pc, #40]	; (80019ac <HAL_Delay+0x44>)
 8001984:	781b      	ldrb	r3, [r3, #0]
 8001986:	461a      	mov	r2, r3
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	4413      	add	r3, r2
 800198c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800198e:	bf00      	nop
 8001990:	f7ff ffde 	bl	8001950 <HAL_GetTick>
 8001994:	4602      	mov	r2, r0
 8001996:	68bb      	ldr	r3, [r7, #8]
 8001998:	1ad3      	subs	r3, r2, r3
 800199a:	68fa      	ldr	r2, [r7, #12]
 800199c:	429a      	cmp	r2, r3
 800199e:	d8f7      	bhi.n	8001990 <HAL_Delay+0x28>
  {
  }
}
 80019a0:	bf00      	nop
 80019a2:	bf00      	nop
 80019a4:	3710      	adds	r7, #16
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
 80019aa:	bf00      	nop
 80019ac:	20001440 	.word	0x20001440

080019b0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019b0:	b480      	push	{r7}
 80019b2:	b085      	sub	sp, #20
 80019b4:	af00      	add	r7, sp, #0
 80019b6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80019c0:	4b0c      	ldr	r3, [pc, #48]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019c2:	68db      	ldr	r3, [r3, #12]
 80019c4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80019c6:	68ba      	ldr	r2, [r7, #8]
 80019c8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80019cc:	4013      	ands	r3, r2
 80019ce:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80019d0:	68fb      	ldr	r3, [r7, #12]
 80019d2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80019d4:	68bb      	ldr	r3, [r7, #8]
 80019d6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80019d8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80019dc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80019e2:	4a04      	ldr	r2, [pc, #16]	; (80019f4 <__NVIC_SetPriorityGrouping+0x44>)
 80019e4:	68bb      	ldr	r3, [r7, #8]
 80019e6:	60d3      	str	r3, [r2, #12]
}
 80019e8:	bf00      	nop
 80019ea:	3714      	adds	r7, #20
 80019ec:	46bd      	mov	sp, r7
 80019ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019f2:	4770      	bx	lr
 80019f4:	e000ed00 	.word	0xe000ed00

080019f8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80019f8:	b480      	push	{r7}
 80019fa:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80019fc:	4b04      	ldr	r3, [pc, #16]	; (8001a10 <__NVIC_GetPriorityGrouping+0x18>)
 80019fe:	68db      	ldr	r3, [r3, #12]
 8001a00:	0a1b      	lsrs	r3, r3, #8
 8001a02:	f003 0307 	and.w	r3, r3, #7
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	46bd      	mov	sp, r7
 8001a0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0e:	4770      	bx	lr
 8001a10:	e000ed00 	.word	0xe000ed00

08001a14 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a22:	2b00      	cmp	r3, #0
 8001a24:	db0b      	blt.n	8001a3e <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	f003 021f 	and.w	r2, r3, #31
 8001a2c:	4907      	ldr	r1, [pc, #28]	; (8001a4c <__NVIC_EnableIRQ+0x38>)
 8001a2e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a32:	095b      	lsrs	r3, r3, #5
 8001a34:	2001      	movs	r0, #1
 8001a36:	fa00 f202 	lsl.w	r2, r0, r2
 8001a3a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001a3e:	bf00      	nop
 8001a40:	370c      	adds	r7, #12
 8001a42:	46bd      	mov	sp, r7
 8001a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a48:	4770      	bx	lr
 8001a4a:	bf00      	nop
 8001a4c:	e000e100 	.word	0xe000e100

08001a50 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001a50:	b480      	push	{r7}
 8001a52:	b083      	sub	sp, #12
 8001a54:	af00      	add	r7, sp, #0
 8001a56:	4603      	mov	r3, r0
 8001a58:	6039      	str	r1, [r7, #0]
 8001a5a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001a5c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	db0a      	blt.n	8001a7a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a64:	683b      	ldr	r3, [r7, #0]
 8001a66:	b2da      	uxtb	r2, r3
 8001a68:	490c      	ldr	r1, [pc, #48]	; (8001a9c <__NVIC_SetPriority+0x4c>)
 8001a6a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a6e:	0112      	lsls	r2, r2, #4
 8001a70:	b2d2      	uxtb	r2, r2
 8001a72:	440b      	add	r3, r1
 8001a74:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001a78:	e00a      	b.n	8001a90 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001a7a:	683b      	ldr	r3, [r7, #0]
 8001a7c:	b2da      	uxtb	r2, r3
 8001a7e:	4908      	ldr	r1, [pc, #32]	; (8001aa0 <__NVIC_SetPriority+0x50>)
 8001a80:	79fb      	ldrb	r3, [r7, #7]
 8001a82:	f003 030f 	and.w	r3, r3, #15
 8001a86:	3b04      	subs	r3, #4
 8001a88:	0112      	lsls	r2, r2, #4
 8001a8a:	b2d2      	uxtb	r2, r2
 8001a8c:	440b      	add	r3, r1
 8001a8e:	761a      	strb	r2, [r3, #24]
}
 8001a90:	bf00      	nop
 8001a92:	370c      	adds	r7, #12
 8001a94:	46bd      	mov	sp, r7
 8001a96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a9a:	4770      	bx	lr
 8001a9c:	e000e100 	.word	0xe000e100
 8001aa0:	e000ed00 	.word	0xe000ed00

08001aa4 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001aa4:	b480      	push	{r7}
 8001aa6:	b089      	sub	sp, #36	; 0x24
 8001aa8:	af00      	add	r7, sp, #0
 8001aaa:	60f8      	str	r0, [r7, #12]
 8001aac:	60b9      	str	r1, [r7, #8]
 8001aae:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001ab0:	68fb      	ldr	r3, [r7, #12]
 8001ab2:	f003 0307 	and.w	r3, r3, #7
 8001ab6:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001ab8:	69fb      	ldr	r3, [r7, #28]
 8001aba:	f1c3 0307 	rsb	r3, r3, #7
 8001abe:	2b04      	cmp	r3, #4
 8001ac0:	bf28      	it	cs
 8001ac2:	2304      	movcs	r3, #4
 8001ac4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001ac6:	69fb      	ldr	r3, [r7, #28]
 8001ac8:	3304      	adds	r3, #4
 8001aca:	2b06      	cmp	r3, #6
 8001acc:	d902      	bls.n	8001ad4 <NVIC_EncodePriority+0x30>
 8001ace:	69fb      	ldr	r3, [r7, #28]
 8001ad0:	3b03      	subs	r3, #3
 8001ad2:	e000      	b.n	8001ad6 <NVIC_EncodePriority+0x32>
 8001ad4:	2300      	movs	r3, #0
 8001ad6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001ad8:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001adc:	69bb      	ldr	r3, [r7, #24]
 8001ade:	fa02 f303 	lsl.w	r3, r2, r3
 8001ae2:	43da      	mvns	r2, r3
 8001ae4:	68bb      	ldr	r3, [r7, #8]
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	697b      	ldr	r3, [r7, #20]
 8001aea:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001aec:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8001af0:	697b      	ldr	r3, [r7, #20]
 8001af2:	fa01 f303 	lsl.w	r3, r1, r3
 8001af6:	43d9      	mvns	r1, r3
 8001af8:	687b      	ldr	r3, [r7, #4]
 8001afa:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001afc:	4313      	orrs	r3, r2
         );
}
 8001afe:	4618      	mov	r0, r3
 8001b00:	3724      	adds	r7, #36	; 0x24
 8001b02:	46bd      	mov	sp, r7
 8001b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b08:	4770      	bx	lr
	...

08001b0c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001b0c:	b580      	push	{r7, lr}
 8001b0e:	b082      	sub	sp, #8
 8001b10:	af00      	add	r7, sp, #0
 8001b12:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	3b01      	subs	r3, #1
 8001b18:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001b1c:	d301      	bcc.n	8001b22 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001b1e:	2301      	movs	r3, #1
 8001b20:	e00f      	b.n	8001b42 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001b22:	4a0a      	ldr	r2, [pc, #40]	; (8001b4c <SysTick_Config+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	3b01      	subs	r3, #1
 8001b28:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001b2a:	210f      	movs	r1, #15
 8001b2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8001b30:	f7ff ff8e 	bl	8001a50 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001b34:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <SysTick_Config+0x40>)
 8001b36:	2200      	movs	r2, #0
 8001b38:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001b3a:	4b04      	ldr	r3, [pc, #16]	; (8001b4c <SysTick_Config+0x40>)
 8001b3c:	2207      	movs	r2, #7
 8001b3e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001b40:	2300      	movs	r3, #0
}
 8001b42:	4618      	mov	r0, r3
 8001b44:	3708      	adds	r7, #8
 8001b46:	46bd      	mov	sp, r7
 8001b48:	bd80      	pop	{r7, pc}
 8001b4a:	bf00      	nop
 8001b4c:	e000e010 	.word	0xe000e010

08001b50 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b082      	sub	sp, #8
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001b58:	6878      	ldr	r0, [r7, #4]
 8001b5a:	f7ff ff29 	bl	80019b0 <__NVIC_SetPriorityGrouping>
}
 8001b5e:	bf00      	nop
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001b66:	b580      	push	{r7, lr}
 8001b68:	b086      	sub	sp, #24
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	60b9      	str	r1, [r7, #8]
 8001b70:	607a      	str	r2, [r7, #4]
 8001b72:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001b74:	2300      	movs	r3, #0
 8001b76:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001b78:	f7ff ff3e 	bl	80019f8 <__NVIC_GetPriorityGrouping>
 8001b7c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001b7e:	687a      	ldr	r2, [r7, #4]
 8001b80:	68b9      	ldr	r1, [r7, #8]
 8001b82:	6978      	ldr	r0, [r7, #20]
 8001b84:	f7ff ff8e 	bl	8001aa4 <NVIC_EncodePriority>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b8e:	4611      	mov	r1, r2
 8001b90:	4618      	mov	r0, r3
 8001b92:	f7ff ff5d 	bl	8001a50 <__NVIC_SetPriority>
}
 8001b96:	bf00      	nop
 8001b98:	3718      	adds	r7, #24
 8001b9a:	46bd      	mov	sp, r7
 8001b9c:	bd80      	pop	{r7, pc}

08001b9e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b9e:	b580      	push	{r7, lr}
 8001ba0:	b082      	sub	sp, #8
 8001ba2:	af00      	add	r7, sp, #0
 8001ba4:	4603      	mov	r3, r0
 8001ba6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ba8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bac:	4618      	mov	r0, r3
 8001bae:	f7ff ff31 	bl	8001a14 <__NVIC_EnableIRQ>
}
 8001bb2:	bf00      	nop
 8001bb4:	3708      	adds	r7, #8
 8001bb6:	46bd      	mov	sp, r7
 8001bb8:	bd80      	pop	{r7, pc}

08001bba <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001bba:	b580      	push	{r7, lr}
 8001bbc:	b082      	sub	sp, #8
 8001bbe:	af00      	add	r7, sp, #0
 8001bc0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001bc2:	6878      	ldr	r0, [r7, #4]
 8001bc4:	f7ff ffa2 	bl	8001b0c <SysTick_Config>
 8001bc8:	4603      	mov	r3, r0
}
 8001bca:	4618      	mov	r0, r3
 8001bcc:	3708      	adds	r7, #8
 8001bce:	46bd      	mov	sp, r7
 8001bd0:	bd80      	pop	{r7, pc}
	...

08001bd4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001bd4:	b480      	push	{r7}
 8001bd6:	b089      	sub	sp, #36	; 0x24
 8001bd8:	af00      	add	r7, sp, #0
 8001bda:	6078      	str	r0, [r7, #4]
 8001bdc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001bde:	2300      	movs	r3, #0
 8001be0:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001be2:	2300      	movs	r3, #0
 8001be4:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001be6:	2300      	movs	r3, #0
 8001be8:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001bea:	2300      	movs	r3, #0
 8001bec:	61fb      	str	r3, [r7, #28]
 8001bee:	e159      	b.n	8001ea4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001bf0:	2201      	movs	r2, #1
 8001bf2:	69fb      	ldr	r3, [r7, #28]
 8001bf4:	fa02 f303 	lsl.w	r3, r2, r3
 8001bf8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	681b      	ldr	r3, [r3, #0]
 8001bfe:	697a      	ldr	r2, [r7, #20]
 8001c00:	4013      	ands	r3, r2
 8001c02:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001c04:	693a      	ldr	r2, [r7, #16]
 8001c06:	697b      	ldr	r3, [r7, #20]
 8001c08:	429a      	cmp	r2, r3
 8001c0a:	f040 8148 	bne.w	8001e9e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c0e:	683b      	ldr	r3, [r7, #0]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	f003 0303 	and.w	r3, r3, #3
 8001c16:	2b01      	cmp	r3, #1
 8001c18:	d005      	beq.n	8001c26 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001c1a:	683b      	ldr	r3, [r7, #0]
 8001c1c:	685b      	ldr	r3, [r3, #4]
 8001c1e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001c22:	2b02      	cmp	r3, #2
 8001c24:	d130      	bne.n	8001c88 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	689b      	ldr	r3, [r3, #8]
 8001c2a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001c2c:	69fb      	ldr	r3, [r7, #28]
 8001c2e:	005b      	lsls	r3, r3, #1
 8001c30:	2203      	movs	r2, #3
 8001c32:	fa02 f303 	lsl.w	r3, r2, r3
 8001c36:	43db      	mvns	r3, r3
 8001c38:	69ba      	ldr	r2, [r7, #24]
 8001c3a:	4013      	ands	r3, r2
 8001c3c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001c3e:	683b      	ldr	r3, [r7, #0]
 8001c40:	68da      	ldr	r2, [r3, #12]
 8001c42:	69fb      	ldr	r3, [r7, #28]
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	fa02 f303 	lsl.w	r3, r2, r3
 8001c4a:	69ba      	ldr	r2, [r7, #24]
 8001c4c:	4313      	orrs	r3, r2
 8001c4e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c50:	687b      	ldr	r3, [r7, #4]
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c5c:	2201      	movs	r2, #1
 8001c5e:	69fb      	ldr	r3, [r7, #28]
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	43db      	mvns	r3, r3
 8001c66:	69ba      	ldr	r2, [r7, #24]
 8001c68:	4013      	ands	r3, r2
 8001c6a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	685b      	ldr	r3, [r3, #4]
 8001c70:	091b      	lsrs	r3, r3, #4
 8001c72:	f003 0201 	and.w	r2, r3, #1
 8001c76:	69fb      	ldr	r3, [r7, #28]
 8001c78:	fa02 f303 	lsl.w	r3, r2, r3
 8001c7c:	69ba      	ldr	r2, [r7, #24]
 8001c7e:	4313      	orrs	r3, r2
 8001c80:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	69ba      	ldr	r2, [r7, #24]
 8001c86:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	685b      	ldr	r3, [r3, #4]
 8001c8c:	f003 0303 	and.w	r3, r3, #3
 8001c90:	2b03      	cmp	r3, #3
 8001c92:	d017      	beq.n	8001cc4 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	68db      	ldr	r3, [r3, #12]
 8001c98:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001c9a:	69fb      	ldr	r3, [r7, #28]
 8001c9c:	005b      	lsls	r3, r3, #1
 8001c9e:	2203      	movs	r2, #3
 8001ca0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ca4:	43db      	mvns	r3, r3
 8001ca6:	69ba      	ldr	r2, [r7, #24]
 8001ca8:	4013      	ands	r3, r2
 8001caa:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001cac:	683b      	ldr	r3, [r7, #0]
 8001cae:	689a      	ldr	r2, [r3, #8]
 8001cb0:	69fb      	ldr	r3, [r7, #28]
 8001cb2:	005b      	lsls	r3, r3, #1
 8001cb4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb8:	69ba      	ldr	r2, [r7, #24]
 8001cba:	4313      	orrs	r3, r2
 8001cbc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	69ba      	ldr	r2, [r7, #24]
 8001cc2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001cc4:	683b      	ldr	r3, [r7, #0]
 8001cc6:	685b      	ldr	r3, [r3, #4]
 8001cc8:	f003 0303 	and.w	r3, r3, #3
 8001ccc:	2b02      	cmp	r3, #2
 8001cce:	d123      	bne.n	8001d18 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001cd0:	69fb      	ldr	r3, [r7, #28]
 8001cd2:	08da      	lsrs	r2, r3, #3
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	3208      	adds	r2, #8
 8001cd8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	f003 0307 	and.w	r3, r3, #7
 8001ce4:	009b      	lsls	r3, r3, #2
 8001ce6:	220f      	movs	r2, #15
 8001ce8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cec:	43db      	mvns	r3, r3
 8001cee:	69ba      	ldr	r2, [r7, #24]
 8001cf0:	4013      	ands	r3, r2
 8001cf2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8001cf4:	683b      	ldr	r3, [r7, #0]
 8001cf6:	691a      	ldr	r2, [r3, #16]
 8001cf8:	69fb      	ldr	r3, [r7, #28]
 8001cfa:	f003 0307 	and.w	r3, r3, #7
 8001cfe:	009b      	lsls	r3, r3, #2
 8001d00:	fa02 f303 	lsl.w	r3, r2, r3
 8001d04:	69ba      	ldr	r2, [r7, #24]
 8001d06:	4313      	orrs	r3, r2
 8001d08:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001d0a:	69fb      	ldr	r3, [r7, #28]
 8001d0c:	08da      	lsrs	r2, r3, #3
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	3208      	adds	r2, #8
 8001d12:	69b9      	ldr	r1, [r7, #24]
 8001d14:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	681b      	ldr	r3, [r3, #0]
 8001d1c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001d1e:	69fb      	ldr	r3, [r7, #28]
 8001d20:	005b      	lsls	r3, r3, #1
 8001d22:	2203      	movs	r2, #3
 8001d24:	fa02 f303 	lsl.w	r3, r2, r3
 8001d28:	43db      	mvns	r3, r3
 8001d2a:	69ba      	ldr	r2, [r7, #24]
 8001d2c:	4013      	ands	r3, r2
 8001d2e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001d30:	683b      	ldr	r3, [r7, #0]
 8001d32:	685b      	ldr	r3, [r3, #4]
 8001d34:	f003 0203 	and.w	r2, r3, #3
 8001d38:	69fb      	ldr	r3, [r7, #28]
 8001d3a:	005b      	lsls	r3, r3, #1
 8001d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	69ba      	ldr	r2, [r7, #24]
 8001d4a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001d4c:	683b      	ldr	r3, [r7, #0]
 8001d4e:	685b      	ldr	r3, [r3, #4]
 8001d50:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	f000 80a2 	beq.w	8001e9e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d5a:	2300      	movs	r3, #0
 8001d5c:	60fb      	str	r3, [r7, #12]
 8001d5e:	4b57      	ldr	r3, [pc, #348]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001d60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d62:	4a56      	ldr	r2, [pc, #344]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001d64:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d68:	6453      	str	r3, [r2, #68]	; 0x44
 8001d6a:	4b54      	ldr	r3, [pc, #336]	; (8001ebc <HAL_GPIO_Init+0x2e8>)
 8001d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d6e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d72:	60fb      	str	r3, [r7, #12]
 8001d74:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8001d76:	4a52      	ldr	r2, [pc, #328]	; (8001ec0 <HAL_GPIO_Init+0x2ec>)
 8001d78:	69fb      	ldr	r3, [r7, #28]
 8001d7a:	089b      	lsrs	r3, r3, #2
 8001d7c:	3302      	adds	r3, #2
 8001d7e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d82:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8001d84:	69fb      	ldr	r3, [r7, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	009b      	lsls	r3, r3, #2
 8001d8c:	220f      	movs	r2, #15
 8001d8e:	fa02 f303 	lsl.w	r3, r2, r3
 8001d92:	43db      	mvns	r3, r3
 8001d94:	69ba      	ldr	r2, [r7, #24]
 8001d96:	4013      	ands	r3, r2
 8001d98:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	4a49      	ldr	r2, [pc, #292]	; (8001ec4 <HAL_GPIO_Init+0x2f0>)
 8001d9e:	4293      	cmp	r3, r2
 8001da0:	d019      	beq.n	8001dd6 <HAL_GPIO_Init+0x202>
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	4a48      	ldr	r2, [pc, #288]	; (8001ec8 <HAL_GPIO_Init+0x2f4>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d013      	beq.n	8001dd2 <HAL_GPIO_Init+0x1fe>
 8001daa:	687b      	ldr	r3, [r7, #4]
 8001dac:	4a47      	ldr	r2, [pc, #284]	; (8001ecc <HAL_GPIO_Init+0x2f8>)
 8001dae:	4293      	cmp	r3, r2
 8001db0:	d00d      	beq.n	8001dce <HAL_GPIO_Init+0x1fa>
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	4a46      	ldr	r2, [pc, #280]	; (8001ed0 <HAL_GPIO_Init+0x2fc>)
 8001db6:	4293      	cmp	r3, r2
 8001db8:	d007      	beq.n	8001dca <HAL_GPIO_Init+0x1f6>
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	4a45      	ldr	r2, [pc, #276]	; (8001ed4 <HAL_GPIO_Init+0x300>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d101      	bne.n	8001dc6 <HAL_GPIO_Init+0x1f2>
 8001dc2:	2304      	movs	r3, #4
 8001dc4:	e008      	b.n	8001dd8 <HAL_GPIO_Init+0x204>
 8001dc6:	2307      	movs	r3, #7
 8001dc8:	e006      	b.n	8001dd8 <HAL_GPIO_Init+0x204>
 8001dca:	2303      	movs	r3, #3
 8001dcc:	e004      	b.n	8001dd8 <HAL_GPIO_Init+0x204>
 8001dce:	2302      	movs	r3, #2
 8001dd0:	e002      	b.n	8001dd8 <HAL_GPIO_Init+0x204>
 8001dd2:	2301      	movs	r3, #1
 8001dd4:	e000      	b.n	8001dd8 <HAL_GPIO_Init+0x204>
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	69fa      	ldr	r2, [r7, #28]
 8001dda:	f002 0203 	and.w	r2, r2, #3
 8001dde:	0092      	lsls	r2, r2, #2
 8001de0:	4093      	lsls	r3, r2
 8001de2:	69ba      	ldr	r2, [r7, #24]
 8001de4:	4313      	orrs	r3, r2
 8001de6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001de8:	4935      	ldr	r1, [pc, #212]	; (8001ec0 <HAL_GPIO_Init+0x2ec>)
 8001dea:	69fb      	ldr	r3, [r7, #28]
 8001dec:	089b      	lsrs	r3, r3, #2
 8001dee:	3302      	adds	r3, #2
 8001df0:	69ba      	ldr	r2, [r7, #24]
 8001df2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001df6:	4b38      	ldr	r3, [pc, #224]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001df8:	689b      	ldr	r3, [r3, #8]
 8001dfa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	43db      	mvns	r3, r3
 8001e00:	69ba      	ldr	r2, [r7, #24]
 8001e02:	4013      	ands	r3, r2
 8001e04:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	685b      	ldr	r3, [r3, #4]
 8001e0a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e0e:	2b00      	cmp	r3, #0
 8001e10:	d003      	beq.n	8001e1a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	693b      	ldr	r3, [r7, #16]
 8001e16:	4313      	orrs	r3, r2
 8001e18:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e1a:	4a2f      	ldr	r2, [pc, #188]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e1c:	69bb      	ldr	r3, [r7, #24]
 8001e1e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e20:	4b2d      	ldr	r3, [pc, #180]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	43db      	mvns	r3, r3
 8001e2a:	69ba      	ldr	r2, [r7, #24]
 8001e2c:	4013      	ands	r3, r2
 8001e2e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	685b      	ldr	r3, [r3, #4]
 8001e34:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e38:	2b00      	cmp	r3, #0
 8001e3a:	d003      	beq.n	8001e44 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	693b      	ldr	r3, [r7, #16]
 8001e40:	4313      	orrs	r3, r2
 8001e42:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e44:	4a24      	ldr	r2, [pc, #144]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e46:	69bb      	ldr	r3, [r7, #24]
 8001e48:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001e4a:	4b23      	ldr	r3, [pc, #140]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e4c:	685b      	ldr	r3, [r3, #4]
 8001e4e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	43db      	mvns	r3, r3
 8001e54:	69ba      	ldr	r2, [r7, #24]
 8001e56:	4013      	ands	r3, r2
 8001e58:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001e5a:	683b      	ldr	r3, [r7, #0]
 8001e5c:	685b      	ldr	r3, [r3, #4]
 8001e5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e62:	2b00      	cmp	r3, #0
 8001e64:	d003      	beq.n	8001e6e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	693b      	ldr	r3, [r7, #16]
 8001e6a:	4313      	orrs	r3, r2
 8001e6c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e6e:	4a1a      	ldr	r2, [pc, #104]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e70:	69bb      	ldr	r3, [r7, #24]
 8001e72:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001e74:	4b18      	ldr	r3, [pc, #96]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	43db      	mvns	r3, r3
 8001e7e:	69ba      	ldr	r2, [r7, #24]
 8001e80:	4013      	ands	r3, r2
 8001e82:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001e84:	683b      	ldr	r3, [r7, #0]
 8001e86:	685b      	ldr	r3, [r3, #4]
 8001e88:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8c:	2b00      	cmp	r3, #0
 8001e8e:	d003      	beq.n	8001e98 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8001e90:	69ba      	ldr	r2, [r7, #24]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	4313      	orrs	r3, r2
 8001e96:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e98:	4a0f      	ldr	r2, [pc, #60]	; (8001ed8 <HAL_GPIO_Init+0x304>)
 8001e9a:	69bb      	ldr	r3, [r7, #24]
 8001e9c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001e9e:	69fb      	ldr	r3, [r7, #28]
 8001ea0:	3301      	adds	r3, #1
 8001ea2:	61fb      	str	r3, [r7, #28]
 8001ea4:	69fb      	ldr	r3, [r7, #28]
 8001ea6:	2b0f      	cmp	r3, #15
 8001ea8:	f67f aea2 	bls.w	8001bf0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001eac:	bf00      	nop
 8001eae:	bf00      	nop
 8001eb0:	3724      	adds	r7, #36	; 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr
 8001eba:	bf00      	nop
 8001ebc:	40023800 	.word	0x40023800
 8001ec0:	40013800 	.word	0x40013800
 8001ec4:	40020000 	.word	0x40020000
 8001ec8:	40020400 	.word	0x40020400
 8001ecc:	40020800 	.word	0x40020800
 8001ed0:	40020c00 	.word	0x40020c00
 8001ed4:	40021000 	.word	0x40021000
 8001ed8:	40013c00 	.word	0x40013c00

08001edc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001edc:	b480      	push	{r7}
 8001ede:	b085      	sub	sp, #20
 8001ee0:	af00      	add	r7, sp, #0
 8001ee2:	6078      	str	r0, [r7, #4]
 8001ee4:	460b      	mov	r3, r1
 8001ee6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	691a      	ldr	r2, [r3, #16]
 8001eec:	887b      	ldrh	r3, [r7, #2]
 8001eee:	4013      	ands	r3, r2
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d002      	beq.n	8001efa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ef4:	2301      	movs	r3, #1
 8001ef6:	73fb      	strb	r3, [r7, #15]
 8001ef8:	e001      	b.n	8001efe <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001efa:	2300      	movs	r3, #0
 8001efc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001efe:	7bfb      	ldrb	r3, [r7, #15]
}
 8001f00:	4618      	mov	r0, r3
 8001f02:	3714      	adds	r7, #20
 8001f04:	46bd      	mov	sp, r7
 8001f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f0a:	4770      	bx	lr

08001f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001f0c:	b480      	push	{r7}
 8001f0e:	b083      	sub	sp, #12
 8001f10:	af00      	add	r7, sp, #0
 8001f12:	6078      	str	r0, [r7, #4]
 8001f14:	460b      	mov	r3, r1
 8001f16:	807b      	strh	r3, [r7, #2]
 8001f18:	4613      	mov	r3, r2
 8001f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001f1c:	787b      	ldrb	r3, [r7, #1]
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d003      	beq.n	8001f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001f22:	887a      	ldrh	r2, [r7, #2]
 8001f24:	687b      	ldr	r3, [r7, #4]
 8001f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001f28:	e003      	b.n	8001f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001f2a:	887b      	ldrh	r3, [r7, #2]
 8001f2c:	041a      	lsls	r2, r3, #16
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	619a      	str	r2, [r3, #24]
}
 8001f32:	bf00      	nop
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr
	...

08001f40 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	b084      	sub	sp, #16
 8001f44:	af00      	add	r7, sp, #0
 8001f46:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d101      	bne.n	8001f52 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8001f4e:	2301      	movs	r3, #1
 8001f50:	e12b      	b.n	80021aa <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8001f52:	687b      	ldr	r3, [r7, #4]
 8001f54:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d106      	bne.n	8001f6c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8001f5e:	687b      	ldr	r3, [r7, #4]
 8001f60:	2200      	movs	r2, #0
 8001f62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8001f66:	6878      	ldr	r0, [r7, #4]
 8001f68:	f7ff fab0 	bl	80014cc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2224      	movs	r2, #36	; 0x24
 8001f70:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	f022 0201 	bic.w	r2, r2, #1
 8001f82:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	681a      	ldr	r2, [r3, #0]
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8001f92:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	681b      	ldr	r3, [r3, #0]
 8001f98:	681a      	ldr	r2, [r3, #0]
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8001fa2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8001fa4:	f001 f888 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 8001fa8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	685b      	ldr	r3, [r3, #4]
 8001fae:	4a81      	ldr	r2, [pc, #516]	; (80021b4 <HAL_I2C_Init+0x274>)
 8001fb0:	4293      	cmp	r3, r2
 8001fb2:	d807      	bhi.n	8001fc4 <HAL_I2C_Init+0x84>
 8001fb4:	68fb      	ldr	r3, [r7, #12]
 8001fb6:	4a80      	ldr	r2, [pc, #512]	; (80021b8 <HAL_I2C_Init+0x278>)
 8001fb8:	4293      	cmp	r3, r2
 8001fba:	bf94      	ite	ls
 8001fbc:	2301      	movls	r3, #1
 8001fbe:	2300      	movhi	r3, #0
 8001fc0:	b2db      	uxtb	r3, r3
 8001fc2:	e006      	b.n	8001fd2 <HAL_I2C_Init+0x92>
 8001fc4:	68fb      	ldr	r3, [r7, #12]
 8001fc6:	4a7d      	ldr	r2, [pc, #500]	; (80021bc <HAL_I2C_Init+0x27c>)
 8001fc8:	4293      	cmp	r3, r2
 8001fca:	bf94      	ite	ls
 8001fcc:	2301      	movls	r3, #1
 8001fce:	2300      	movhi	r3, #0
 8001fd0:	b2db      	uxtb	r3, r3
 8001fd2:	2b00      	cmp	r3, #0
 8001fd4:	d001      	beq.n	8001fda <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8001fd6:	2301      	movs	r3, #1
 8001fd8:	e0e7      	b.n	80021aa <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	4a78      	ldr	r2, [pc, #480]	; (80021c0 <HAL_I2C_Init+0x280>)
 8001fde:	fba2 2303 	umull	r2, r3, r2, r3
 8001fe2:	0c9b      	lsrs	r3, r3, #18
 8001fe4:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	685b      	ldr	r3, [r3, #4]
 8001fec:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	68ba      	ldr	r2, [r7, #8]
 8001ff6:	430a      	orrs	r2, r1
 8001ff8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	6a1b      	ldr	r3, [r3, #32]
 8002000:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	685b      	ldr	r3, [r3, #4]
 8002008:	4a6a      	ldr	r2, [pc, #424]	; (80021b4 <HAL_I2C_Init+0x274>)
 800200a:	4293      	cmp	r3, r2
 800200c:	d802      	bhi.n	8002014 <HAL_I2C_Init+0xd4>
 800200e:	68bb      	ldr	r3, [r7, #8]
 8002010:	3301      	adds	r3, #1
 8002012:	e009      	b.n	8002028 <HAL_I2C_Init+0xe8>
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800201a:	fb02 f303 	mul.w	r3, r2, r3
 800201e:	4a69      	ldr	r2, [pc, #420]	; (80021c4 <HAL_I2C_Init+0x284>)
 8002020:	fba2 2303 	umull	r2, r3, r2, r3
 8002024:	099b      	lsrs	r3, r3, #6
 8002026:	3301      	adds	r3, #1
 8002028:	687a      	ldr	r2, [r7, #4]
 800202a:	6812      	ldr	r2, [r2, #0]
 800202c:	430b      	orrs	r3, r1
 800202e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	69db      	ldr	r3, [r3, #28]
 8002036:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800203a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	685b      	ldr	r3, [r3, #4]
 8002042:	495c      	ldr	r1, [pc, #368]	; (80021b4 <HAL_I2C_Init+0x274>)
 8002044:	428b      	cmp	r3, r1
 8002046:	d819      	bhi.n	800207c <HAL_I2C_Init+0x13c>
 8002048:	68fb      	ldr	r3, [r7, #12]
 800204a:	1e59      	subs	r1, r3, #1
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	685b      	ldr	r3, [r3, #4]
 8002050:	005b      	lsls	r3, r3, #1
 8002052:	fbb1 f3f3 	udiv	r3, r1, r3
 8002056:	1c59      	adds	r1, r3, #1
 8002058:	f640 73fc 	movw	r3, #4092	; 0xffc
 800205c:	400b      	ands	r3, r1
 800205e:	2b00      	cmp	r3, #0
 8002060:	d00a      	beq.n	8002078 <HAL_I2C_Init+0x138>
 8002062:	68fb      	ldr	r3, [r7, #12]
 8002064:	1e59      	subs	r1, r3, #1
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	685b      	ldr	r3, [r3, #4]
 800206a:	005b      	lsls	r3, r3, #1
 800206c:	fbb1 f3f3 	udiv	r3, r1, r3
 8002070:	3301      	adds	r3, #1
 8002072:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002076:	e051      	b.n	800211c <HAL_I2C_Init+0x1dc>
 8002078:	2304      	movs	r3, #4
 800207a:	e04f      	b.n	800211c <HAL_I2C_Init+0x1dc>
 800207c:	687b      	ldr	r3, [r7, #4]
 800207e:	689b      	ldr	r3, [r3, #8]
 8002080:	2b00      	cmp	r3, #0
 8002082:	d111      	bne.n	80020a8 <HAL_I2C_Init+0x168>
 8002084:	68fb      	ldr	r3, [r7, #12]
 8002086:	1e58      	subs	r0, r3, #1
 8002088:	687b      	ldr	r3, [r7, #4]
 800208a:	6859      	ldr	r1, [r3, #4]
 800208c:	460b      	mov	r3, r1
 800208e:	005b      	lsls	r3, r3, #1
 8002090:	440b      	add	r3, r1
 8002092:	fbb0 f3f3 	udiv	r3, r0, r3
 8002096:	3301      	adds	r3, #1
 8002098:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800209c:	2b00      	cmp	r3, #0
 800209e:	bf0c      	ite	eq
 80020a0:	2301      	moveq	r3, #1
 80020a2:	2300      	movne	r3, #0
 80020a4:	b2db      	uxtb	r3, r3
 80020a6:	e012      	b.n	80020ce <HAL_I2C_Init+0x18e>
 80020a8:	68fb      	ldr	r3, [r7, #12]
 80020aa:	1e58      	subs	r0, r3, #1
 80020ac:	687b      	ldr	r3, [r7, #4]
 80020ae:	6859      	ldr	r1, [r3, #4]
 80020b0:	460b      	mov	r3, r1
 80020b2:	009b      	lsls	r3, r3, #2
 80020b4:	440b      	add	r3, r1
 80020b6:	0099      	lsls	r1, r3, #2
 80020b8:	440b      	add	r3, r1
 80020ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80020be:	3301      	adds	r3, #1
 80020c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020c4:	2b00      	cmp	r3, #0
 80020c6:	bf0c      	ite	eq
 80020c8:	2301      	moveq	r3, #1
 80020ca:	2300      	movne	r3, #0
 80020cc:	b2db      	uxtb	r3, r3
 80020ce:	2b00      	cmp	r3, #0
 80020d0:	d001      	beq.n	80020d6 <HAL_I2C_Init+0x196>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e022      	b.n	800211c <HAL_I2C_Init+0x1dc>
 80020d6:	687b      	ldr	r3, [r7, #4]
 80020d8:	689b      	ldr	r3, [r3, #8]
 80020da:	2b00      	cmp	r3, #0
 80020dc:	d10e      	bne.n	80020fc <HAL_I2C_Init+0x1bc>
 80020de:	68fb      	ldr	r3, [r7, #12]
 80020e0:	1e58      	subs	r0, r3, #1
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	6859      	ldr	r1, [r3, #4]
 80020e6:	460b      	mov	r3, r1
 80020e8:	005b      	lsls	r3, r3, #1
 80020ea:	440b      	add	r3, r1
 80020ec:	fbb0 f3f3 	udiv	r3, r0, r3
 80020f0:	3301      	adds	r3, #1
 80020f2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80020f6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80020fa:	e00f      	b.n	800211c <HAL_I2C_Init+0x1dc>
 80020fc:	68fb      	ldr	r3, [r7, #12]
 80020fe:	1e58      	subs	r0, r3, #1
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6859      	ldr	r1, [r3, #4]
 8002104:	460b      	mov	r3, r1
 8002106:	009b      	lsls	r3, r3, #2
 8002108:	440b      	add	r3, r1
 800210a:	0099      	lsls	r1, r3, #2
 800210c:	440b      	add	r3, r1
 800210e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002112:	3301      	adds	r3, #1
 8002114:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002118:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800211c:	6879      	ldr	r1, [r7, #4]
 800211e:	6809      	ldr	r1, [r1, #0]
 8002120:	4313      	orrs	r3, r2
 8002122:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	681b      	ldr	r3, [r3, #0]
 800212a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	69da      	ldr	r2, [r3, #28]
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6a1b      	ldr	r3, [r3, #32]
 8002136:	431a      	orrs	r2, r3
 8002138:	687b      	ldr	r3, [r7, #4]
 800213a:	681b      	ldr	r3, [r3, #0]
 800213c:	430a      	orrs	r2, r1
 800213e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002140:	687b      	ldr	r3, [r7, #4]
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	689b      	ldr	r3, [r3, #8]
 8002146:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800214a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800214e:	687a      	ldr	r2, [r7, #4]
 8002150:	6911      	ldr	r1, [r2, #16]
 8002152:	687a      	ldr	r2, [r7, #4]
 8002154:	68d2      	ldr	r2, [r2, #12]
 8002156:	4311      	orrs	r1, r2
 8002158:	687a      	ldr	r2, [r7, #4]
 800215a:	6812      	ldr	r2, [r2, #0]
 800215c:	430b      	orrs	r3, r1
 800215e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002160:	687b      	ldr	r3, [r7, #4]
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	68db      	ldr	r3, [r3, #12]
 8002166:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	695a      	ldr	r2, [r3, #20]
 800216e:	687b      	ldr	r3, [r7, #4]
 8002170:	699b      	ldr	r3, [r3, #24]
 8002172:	431a      	orrs	r2, r3
 8002174:	687b      	ldr	r3, [r7, #4]
 8002176:	681b      	ldr	r3, [r3, #0]
 8002178:	430a      	orrs	r2, r1
 800217a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	681b      	ldr	r3, [r3, #0]
 8002180:	681a      	ldr	r2, [r3, #0]
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	681b      	ldr	r3, [r3, #0]
 8002186:	f042 0201 	orr.w	r2, r2, #1
 800218a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	2200      	movs	r2, #0
 8002190:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	2220      	movs	r2, #32
 8002196:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	2200      	movs	r2, #0
 800219e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	2200      	movs	r2, #0
 80021a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80021a8:	2300      	movs	r3, #0
}
 80021aa:	4618      	mov	r0, r3
 80021ac:	3710      	adds	r7, #16
 80021ae:	46bd      	mov	sp, r7
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	000186a0 	.word	0x000186a0
 80021b8:	001e847f 	.word	0x001e847f
 80021bc:	003d08ff 	.word	0x003d08ff
 80021c0:	431bde83 	.word	0x431bde83
 80021c4:	10624dd3 	.word	0x10624dd3

080021c8 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80021c8:	b580      	push	{r7, lr}
 80021ca:	b088      	sub	sp, #32
 80021cc:	af02      	add	r7, sp, #8
 80021ce:	60f8      	str	r0, [r7, #12]
 80021d0:	607a      	str	r2, [r7, #4]
 80021d2:	461a      	mov	r2, r3
 80021d4:	460b      	mov	r3, r1
 80021d6:	817b      	strh	r3, [r7, #10]
 80021d8:	4613      	mov	r3, r2
 80021da:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80021dc:	f7ff fbb8 	bl	8001950 <HAL_GetTick>
 80021e0:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 80021e2:	68fb      	ldr	r3, [r7, #12]
 80021e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80021e8:	b2db      	uxtb	r3, r3
 80021ea:	2b20      	cmp	r3, #32
 80021ec:	f040 80e0 	bne.w	80023b0 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80021f0:	697b      	ldr	r3, [r7, #20]
 80021f2:	9300      	str	r3, [sp, #0]
 80021f4:	2319      	movs	r3, #25
 80021f6:	2201      	movs	r2, #1
 80021f8:	4970      	ldr	r1, [pc, #448]	; (80023bc <HAL_I2C_Master_Transmit+0x1f4>)
 80021fa:	68f8      	ldr	r0, [r7, #12]
 80021fc:	f000 f964 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 8002200:	4603      	mov	r3, r0
 8002202:	2b00      	cmp	r3, #0
 8002204:	d001      	beq.n	800220a <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002206:	2302      	movs	r3, #2
 8002208:	e0d3      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800220a:	68fb      	ldr	r3, [r7, #12]
 800220c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002210:	2b01      	cmp	r3, #1
 8002212:	d101      	bne.n	8002218 <HAL_I2C_Master_Transmit+0x50>
 8002214:	2302      	movs	r3, #2
 8002216:	e0cc      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
 8002218:	68fb      	ldr	r3, [r7, #12]
 800221a:	2201      	movs	r2, #1
 800221c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002220:	68fb      	ldr	r3, [r7, #12]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	f003 0301 	and.w	r3, r3, #1
 800222a:	2b01      	cmp	r3, #1
 800222c:	d007      	beq.n	800223e <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	681b      	ldr	r3, [r3, #0]
 8002232:	681a      	ldr	r2, [r3, #0]
 8002234:	68fb      	ldr	r3, [r7, #12]
 8002236:	681b      	ldr	r3, [r3, #0]
 8002238:	f042 0201 	orr.w	r2, r2, #1
 800223c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800223e:	68fb      	ldr	r3, [r7, #12]
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	681a      	ldr	r2, [r3, #0]
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800224c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	2221      	movs	r2, #33	; 0x21
 8002252:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002256:	68fb      	ldr	r3, [r7, #12]
 8002258:	2210      	movs	r2, #16
 800225a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2200      	movs	r2, #0
 8002262:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	687a      	ldr	r2, [r7, #4]
 8002268:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	893a      	ldrh	r2, [r7, #8]
 800226e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002270:	68fb      	ldr	r3, [r7, #12]
 8002272:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002274:	b29a      	uxth	r2, r3
 8002276:	68fb      	ldr	r3, [r7, #12]
 8002278:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800227a:	68fb      	ldr	r3, [r7, #12]
 800227c:	4a50      	ldr	r2, [pc, #320]	; (80023c0 <HAL_I2C_Master_Transmit+0x1f8>)
 800227e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002280:	8979      	ldrh	r1, [r7, #10]
 8002282:	697b      	ldr	r3, [r7, #20]
 8002284:	6a3a      	ldr	r2, [r7, #32]
 8002286:	68f8      	ldr	r0, [r7, #12]
 8002288:	f000 f89c 	bl	80023c4 <I2C_MasterRequestWrite>
 800228c:	4603      	mov	r3, r0
 800228e:	2b00      	cmp	r3, #0
 8002290:	d001      	beq.n	8002296 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002292:	2301      	movs	r3, #1
 8002294:	e08d      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002296:	2300      	movs	r3, #0
 8002298:	613b      	str	r3, [r7, #16]
 800229a:	68fb      	ldr	r3, [r7, #12]
 800229c:	681b      	ldr	r3, [r3, #0]
 800229e:	695b      	ldr	r3, [r3, #20]
 80022a0:	613b      	str	r3, [r7, #16]
 80022a2:	68fb      	ldr	r3, [r7, #12]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	699b      	ldr	r3, [r3, #24]
 80022a8:	613b      	str	r3, [r7, #16]
 80022aa:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80022ac:	e066      	b.n	800237c <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80022ae:	697a      	ldr	r2, [r7, #20]
 80022b0:	6a39      	ldr	r1, [r7, #32]
 80022b2:	68f8      	ldr	r0, [r7, #12]
 80022b4:	f000 f9de 	bl	8002674 <I2C_WaitOnTXEFlagUntilTimeout>
 80022b8:	4603      	mov	r3, r0
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d00d      	beq.n	80022da <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022c2:	2b04      	cmp	r3, #4
 80022c4:	d107      	bne.n	80022d6 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80022c6:	68fb      	ldr	r3, [r7, #12]
 80022c8:	681b      	ldr	r3, [r3, #0]
 80022ca:	681a      	ldr	r2, [r3, #0]
 80022cc:	68fb      	ldr	r3, [r7, #12]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80022d4:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80022d6:	2301      	movs	r3, #1
 80022d8:	e06b      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80022da:	68fb      	ldr	r3, [r7, #12]
 80022dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022de:	781a      	ldrb	r2, [r3, #0]
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80022ea:	1c5a      	adds	r2, r3, #1
 80022ec:	68fb      	ldr	r3, [r7, #12]
 80022ee:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80022f4:	b29b      	uxth	r3, r3
 80022f6:	3b01      	subs	r3, #1
 80022f8:	b29a      	uxth	r2, r3
 80022fa:	68fb      	ldr	r3, [r7, #12]
 80022fc:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 80022fe:	68fb      	ldr	r3, [r7, #12]
 8002300:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002302:	3b01      	subs	r3, #1
 8002304:	b29a      	uxth	r2, r3
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800230a:	68fb      	ldr	r3, [r7, #12]
 800230c:	681b      	ldr	r3, [r3, #0]
 800230e:	695b      	ldr	r3, [r3, #20]
 8002310:	f003 0304 	and.w	r3, r3, #4
 8002314:	2b04      	cmp	r3, #4
 8002316:	d11b      	bne.n	8002350 <HAL_I2C_Master_Transmit+0x188>
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800231c:	2b00      	cmp	r3, #0
 800231e:	d017      	beq.n	8002350 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002324:	781a      	ldrb	r2, [r3, #0]
 8002326:	68fb      	ldr	r3, [r7, #12]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002330:	1c5a      	adds	r2, r3, #1
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002336:	68fb      	ldr	r3, [r7, #12]
 8002338:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800233a:	b29b      	uxth	r3, r3
 800233c:	3b01      	subs	r3, #1
 800233e:	b29a      	uxth	r2, r3
 8002340:	68fb      	ldr	r3, [r7, #12]
 8002342:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002348:	3b01      	subs	r3, #1
 800234a:	b29a      	uxth	r2, r3
 800234c:	68fb      	ldr	r3, [r7, #12]
 800234e:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002350:	697a      	ldr	r2, [r7, #20]
 8002352:	6a39      	ldr	r1, [r7, #32]
 8002354:	68f8      	ldr	r0, [r7, #12]
 8002356:	f000 f9ce 	bl	80026f6 <I2C_WaitOnBTFFlagUntilTimeout>
 800235a:	4603      	mov	r3, r0
 800235c:	2b00      	cmp	r3, #0
 800235e:	d00d      	beq.n	800237c <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002360:	68fb      	ldr	r3, [r7, #12]
 8002362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002364:	2b04      	cmp	r3, #4
 8002366:	d107      	bne.n	8002378 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681a      	ldr	r2, [r3, #0]
 800236e:	68fb      	ldr	r3, [r7, #12]
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002376:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002378:	2301      	movs	r3, #1
 800237a:	e01a      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 800237c:	68fb      	ldr	r3, [r7, #12]
 800237e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002380:	2b00      	cmp	r3, #0
 8002382:	d194      	bne.n	80022ae <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002384:	68fb      	ldr	r3, [r7, #12]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681a      	ldr	r2, [r3, #0]
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681b      	ldr	r3, [r3, #0]
 800238e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002392:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	2220      	movs	r2, #32
 8002398:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800239c:	68fb      	ldr	r3, [r7, #12]
 800239e:	2200      	movs	r2, #0
 80023a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	2200      	movs	r2, #0
 80023a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80023ac:	2300      	movs	r3, #0
 80023ae:	e000      	b.n	80023b2 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80023b0:	2302      	movs	r3, #2
  }
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3718      	adds	r7, #24
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	00100002 	.word	0x00100002
 80023c0:	ffff0000 	.word	0xffff0000

080023c4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80023c4:	b580      	push	{r7, lr}
 80023c6:	b088      	sub	sp, #32
 80023c8:	af02      	add	r7, sp, #8
 80023ca:	60f8      	str	r0, [r7, #12]
 80023cc:	607a      	str	r2, [r7, #4]
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	460b      	mov	r3, r1
 80023d2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80023d4:	68fb      	ldr	r3, [r7, #12]
 80023d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80023d8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80023da:	697b      	ldr	r3, [r7, #20]
 80023dc:	2b08      	cmp	r3, #8
 80023de:	d006      	beq.n	80023ee <I2C_MasterRequestWrite+0x2a>
 80023e0:	697b      	ldr	r3, [r7, #20]
 80023e2:	2b01      	cmp	r3, #1
 80023e4:	d003      	beq.n	80023ee <I2C_MasterRequestWrite+0x2a>
 80023e6:	697b      	ldr	r3, [r7, #20]
 80023e8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80023ec:	d108      	bne.n	8002400 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80023ee:	68fb      	ldr	r3, [r7, #12]
 80023f0:	681b      	ldr	r3, [r3, #0]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68fb      	ldr	r3, [r7, #12]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80023fc:	601a      	str	r2, [r3, #0]
 80023fe:	e00b      	b.n	8002418 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002400:	68fb      	ldr	r3, [r7, #12]
 8002402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002404:	2b12      	cmp	r3, #18
 8002406:	d107      	bne.n	8002418 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002408:	68fb      	ldr	r3, [r7, #12]
 800240a:	681b      	ldr	r3, [r3, #0]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002416:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002418:	683b      	ldr	r3, [r7, #0]
 800241a:	9300      	str	r3, [sp, #0]
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	2200      	movs	r2, #0
 8002420:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002424:	68f8      	ldr	r0, [r7, #12]
 8002426:	f000 f84f 	bl	80024c8 <I2C_WaitOnFlagUntilTimeout>
 800242a:	4603      	mov	r3, r0
 800242c:	2b00      	cmp	r3, #0
 800242e:	d00d      	beq.n	800244c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800243a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800243e:	d103      	bne.n	8002448 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002440:	68fb      	ldr	r3, [r7, #12]
 8002442:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002446:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002448:	2303      	movs	r3, #3
 800244a:	e035      	b.n	80024b8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	691b      	ldr	r3, [r3, #16]
 8002450:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002454:	d108      	bne.n	8002468 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002456:	897b      	ldrh	r3, [r7, #10]
 8002458:	b2db      	uxtb	r3, r3
 800245a:	461a      	mov	r2, r3
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002464:	611a      	str	r2, [r3, #16]
 8002466:	e01b      	b.n	80024a0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002468:	897b      	ldrh	r3, [r7, #10]
 800246a:	11db      	asrs	r3, r3, #7
 800246c:	b2db      	uxtb	r3, r3
 800246e:	f003 0306 	and.w	r3, r3, #6
 8002472:	b2db      	uxtb	r3, r3
 8002474:	f063 030f 	orn	r3, r3, #15
 8002478:	b2da      	uxtb	r2, r3
 800247a:	68fb      	ldr	r3, [r7, #12]
 800247c:	681b      	ldr	r3, [r3, #0]
 800247e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	687a      	ldr	r2, [r7, #4]
 8002484:	490e      	ldr	r1, [pc, #56]	; (80024c0 <I2C_MasterRequestWrite+0xfc>)
 8002486:	68f8      	ldr	r0, [r7, #12]
 8002488:	f000 f875 	bl	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800248c:	4603      	mov	r3, r0
 800248e:	2b00      	cmp	r3, #0
 8002490:	d001      	beq.n	8002496 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002492:	2301      	movs	r3, #1
 8002494:	e010      	b.n	80024b8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002496:	897b      	ldrh	r3, [r7, #10]
 8002498:	b2da      	uxtb	r2, r3
 800249a:	68fb      	ldr	r3, [r7, #12]
 800249c:	681b      	ldr	r3, [r3, #0]
 800249e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80024a0:	683b      	ldr	r3, [r7, #0]
 80024a2:	687a      	ldr	r2, [r7, #4]
 80024a4:	4907      	ldr	r1, [pc, #28]	; (80024c4 <I2C_MasterRequestWrite+0x100>)
 80024a6:	68f8      	ldr	r0, [r7, #12]
 80024a8:	f000 f865 	bl	8002576 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80024b2:	2301      	movs	r3, #1
 80024b4:	e000      	b.n	80024b8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80024b6:	2300      	movs	r3, #0
}
 80024b8:	4618      	mov	r0, r3
 80024ba:	3718      	adds	r7, #24
 80024bc:	46bd      	mov	sp, r7
 80024be:	bd80      	pop	{r7, pc}
 80024c0:	00010008 	.word	0x00010008
 80024c4:	00010002 	.word	0x00010002

080024c8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 80024c8:	b580      	push	{r7, lr}
 80024ca:	b084      	sub	sp, #16
 80024cc:	af00      	add	r7, sp, #0
 80024ce:	60f8      	str	r0, [r7, #12]
 80024d0:	60b9      	str	r1, [r7, #8]
 80024d2:	603b      	str	r3, [r7, #0]
 80024d4:	4613      	mov	r3, r2
 80024d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80024d8:	e025      	b.n	8002526 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80024da:	683b      	ldr	r3, [r7, #0]
 80024dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80024e0:	d021      	beq.n	8002526 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80024e2:	f7ff fa35 	bl	8001950 <HAL_GetTick>
 80024e6:	4602      	mov	r2, r0
 80024e8:	69bb      	ldr	r3, [r7, #24]
 80024ea:	1ad3      	subs	r3, r2, r3
 80024ec:	683a      	ldr	r2, [r7, #0]
 80024ee:	429a      	cmp	r2, r3
 80024f0:	d302      	bcc.n	80024f8 <I2C_WaitOnFlagUntilTimeout+0x30>
 80024f2:	683b      	ldr	r3, [r7, #0]
 80024f4:	2b00      	cmp	r3, #0
 80024f6:	d116      	bne.n	8002526 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	2200      	movs	r2, #0
 80024fc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80024fe:	68fb      	ldr	r3, [r7, #12]
 8002500:	2220      	movs	r2, #32
 8002502:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002506:	68fb      	ldr	r3, [r7, #12]
 8002508:	2200      	movs	r2, #0
 800250a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800250e:	68fb      	ldr	r3, [r7, #12]
 8002510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002512:	f043 0220 	orr.w	r2, r3, #32
 8002516:	68fb      	ldr	r3, [r7, #12]
 8002518:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	2200      	movs	r2, #0
 800251e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002522:	2301      	movs	r3, #1
 8002524:	e023      	b.n	800256e <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002526:	68bb      	ldr	r3, [r7, #8]
 8002528:	0c1b      	lsrs	r3, r3, #16
 800252a:	b2db      	uxtb	r3, r3
 800252c:	2b01      	cmp	r3, #1
 800252e:	d10d      	bne.n	800254c <I2C_WaitOnFlagUntilTimeout+0x84>
 8002530:	68fb      	ldr	r3, [r7, #12]
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	695b      	ldr	r3, [r3, #20]
 8002536:	43da      	mvns	r2, r3
 8002538:	68bb      	ldr	r3, [r7, #8]
 800253a:	4013      	ands	r3, r2
 800253c:	b29b      	uxth	r3, r3
 800253e:	2b00      	cmp	r3, #0
 8002540:	bf0c      	ite	eq
 8002542:	2301      	moveq	r3, #1
 8002544:	2300      	movne	r3, #0
 8002546:	b2db      	uxtb	r3, r3
 8002548:	461a      	mov	r2, r3
 800254a:	e00c      	b.n	8002566 <I2C_WaitOnFlagUntilTimeout+0x9e>
 800254c:	68fb      	ldr	r3, [r7, #12]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	699b      	ldr	r3, [r3, #24]
 8002552:	43da      	mvns	r2, r3
 8002554:	68bb      	ldr	r3, [r7, #8]
 8002556:	4013      	ands	r3, r2
 8002558:	b29b      	uxth	r3, r3
 800255a:	2b00      	cmp	r3, #0
 800255c:	bf0c      	ite	eq
 800255e:	2301      	moveq	r3, #1
 8002560:	2300      	movne	r3, #0
 8002562:	b2db      	uxtb	r3, r3
 8002564:	461a      	mov	r2, r3
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	429a      	cmp	r2, r3
 800256a:	d0b6      	beq.n	80024da <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800256c:	2300      	movs	r3, #0
}
 800256e:	4618      	mov	r0, r3
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}

08002576 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002576:	b580      	push	{r7, lr}
 8002578:	b084      	sub	sp, #16
 800257a:	af00      	add	r7, sp, #0
 800257c:	60f8      	str	r0, [r7, #12]
 800257e:	60b9      	str	r1, [r7, #8]
 8002580:	607a      	str	r2, [r7, #4]
 8002582:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002584:	e051      	b.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002586:	68fb      	ldr	r3, [r7, #12]
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	695b      	ldr	r3, [r3, #20]
 800258c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002590:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002594:	d123      	bne.n	80025de <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002596:	68fb      	ldr	r3, [r7, #12]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	681a      	ldr	r2, [r3, #0]
 800259c:	68fb      	ldr	r3, [r7, #12]
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80025a4:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80025a6:	68fb      	ldr	r3, [r7, #12]
 80025a8:	681b      	ldr	r3, [r3, #0]
 80025aa:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80025ae:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80025b0:	68fb      	ldr	r3, [r7, #12]
 80025b2:	2200      	movs	r2, #0
 80025b4:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80025b6:	68fb      	ldr	r3, [r7, #12]
 80025b8:	2220      	movs	r2, #32
 80025ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	2200      	movs	r2, #0
 80025c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025ca:	f043 0204 	orr.w	r2, r3, #4
 80025ce:	68fb      	ldr	r3, [r7, #12]
 80025d0:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80025d2:	68fb      	ldr	r3, [r7, #12]
 80025d4:	2200      	movs	r2, #0
 80025d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	e046      	b.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80025e4:	d021      	beq.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80025e6:	f7ff f9b3 	bl	8001950 <HAL_GetTick>
 80025ea:	4602      	mov	r2, r0
 80025ec:	683b      	ldr	r3, [r7, #0]
 80025ee:	1ad3      	subs	r3, r2, r3
 80025f0:	687a      	ldr	r2, [r7, #4]
 80025f2:	429a      	cmp	r2, r3
 80025f4:	d302      	bcc.n	80025fc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	2b00      	cmp	r3, #0
 80025fa:	d116      	bne.n	800262a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	2200      	movs	r2, #0
 8002600:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002602:	68fb      	ldr	r3, [r7, #12]
 8002604:	2220      	movs	r2, #32
 8002606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800260a:	68fb      	ldr	r3, [r7, #12]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002612:	68fb      	ldr	r3, [r7, #12]
 8002614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002616:	f043 0220 	orr.w	r2, r3, #32
 800261a:	68fb      	ldr	r3, [r7, #12]
 800261c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	2200      	movs	r2, #0
 8002622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8002626:	2301      	movs	r3, #1
 8002628:	e020      	b.n	800266c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800262a:	68bb      	ldr	r3, [r7, #8]
 800262c:	0c1b      	lsrs	r3, r3, #16
 800262e:	b2db      	uxtb	r3, r3
 8002630:	2b01      	cmp	r3, #1
 8002632:	d10c      	bne.n	800264e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8002634:	68fb      	ldr	r3, [r7, #12]
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	695b      	ldr	r3, [r3, #20]
 800263a:	43da      	mvns	r2, r3
 800263c:	68bb      	ldr	r3, [r7, #8]
 800263e:	4013      	ands	r3, r2
 8002640:	b29b      	uxth	r3, r3
 8002642:	2b00      	cmp	r3, #0
 8002644:	bf14      	ite	ne
 8002646:	2301      	movne	r3, #1
 8002648:	2300      	moveq	r3, #0
 800264a:	b2db      	uxtb	r3, r3
 800264c:	e00b      	b.n	8002666 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	699b      	ldr	r3, [r3, #24]
 8002654:	43da      	mvns	r2, r3
 8002656:	68bb      	ldr	r3, [r7, #8]
 8002658:	4013      	ands	r3, r2
 800265a:	b29b      	uxth	r3, r3
 800265c:	2b00      	cmp	r3, #0
 800265e:	bf14      	ite	ne
 8002660:	2301      	movne	r3, #1
 8002662:	2300      	moveq	r3, #0
 8002664:	b2db      	uxtb	r3, r3
 8002666:	2b00      	cmp	r3, #0
 8002668:	d18d      	bne.n	8002586 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 800266a:	2300      	movs	r3, #0
}
 800266c:	4618      	mov	r0, r3
 800266e:	3710      	adds	r7, #16
 8002670:	46bd      	mov	sp, r7
 8002672:	bd80      	pop	{r7, pc}

08002674 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8002674:	b580      	push	{r7, lr}
 8002676:	b084      	sub	sp, #16
 8002678:	af00      	add	r7, sp, #0
 800267a:	60f8      	str	r0, [r7, #12]
 800267c:	60b9      	str	r1, [r7, #8]
 800267e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8002680:	e02d      	b.n	80026de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002682:	68f8      	ldr	r0, [r7, #12]
 8002684:	f000 f878 	bl	8002778 <I2C_IsAcknowledgeFailed>
 8002688:	4603      	mov	r3, r0
 800268a:	2b00      	cmp	r3, #0
 800268c:	d001      	beq.n	8002692 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800268e:	2301      	movs	r3, #1
 8002690:	e02d      	b.n	80026ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002692:	68bb      	ldr	r3, [r7, #8]
 8002694:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002698:	d021      	beq.n	80026de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800269a:	f7ff f959 	bl	8001950 <HAL_GetTick>
 800269e:	4602      	mov	r2, r0
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	1ad3      	subs	r3, r2, r3
 80026a4:	68ba      	ldr	r2, [r7, #8]
 80026a6:	429a      	cmp	r2, r3
 80026a8:	d302      	bcc.n	80026b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80026aa:	68bb      	ldr	r3, [r7, #8]
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d116      	bne.n	80026de <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80026b0:	68fb      	ldr	r3, [r7, #12]
 80026b2:	2200      	movs	r2, #0
 80026b4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80026b6:	68fb      	ldr	r3, [r7, #12]
 80026b8:	2220      	movs	r2, #32
 80026ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	2200      	movs	r2, #0
 80026c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80026ca:	f043 0220 	orr.w	r2, r3, #32
 80026ce:	68fb      	ldr	r3, [r7, #12]
 80026d0:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80026d2:	68fb      	ldr	r3, [r7, #12]
 80026d4:	2200      	movs	r2, #0
 80026d6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80026da:	2301      	movs	r3, #1
 80026dc:	e007      	b.n	80026ee <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	695b      	ldr	r3, [r3, #20]
 80026e4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80026e8:	2b80      	cmp	r3, #128	; 0x80
 80026ea:	d1ca      	bne.n	8002682 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80026ec:	2300      	movs	r3, #0
}
 80026ee:	4618      	mov	r0, r3
 80026f0:	3710      	adds	r7, #16
 80026f2:	46bd      	mov	sp, r7
 80026f4:	bd80      	pop	{r7, pc}

080026f6 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80026f6:	b580      	push	{r7, lr}
 80026f8:	b084      	sub	sp, #16
 80026fa:	af00      	add	r7, sp, #0
 80026fc:	60f8      	str	r0, [r7, #12]
 80026fe:	60b9      	str	r1, [r7, #8]
 8002700:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002702:	e02d      	b.n	8002760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8002704:	68f8      	ldr	r0, [r7, #12]
 8002706:	f000 f837 	bl	8002778 <I2C_IsAcknowledgeFailed>
 800270a:	4603      	mov	r3, r0
 800270c:	2b00      	cmp	r3, #0
 800270e:	d001      	beq.n	8002714 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8002710:	2301      	movs	r3, #1
 8002712:	e02d      	b.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002714:	68bb      	ldr	r3, [r7, #8]
 8002716:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800271a:	d021      	beq.n	8002760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800271c:	f7ff f918 	bl	8001950 <HAL_GetTick>
 8002720:	4602      	mov	r2, r0
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	1ad3      	subs	r3, r2, r3
 8002726:	68ba      	ldr	r2, [r7, #8]
 8002728:	429a      	cmp	r2, r3
 800272a:	d302      	bcc.n	8002732 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d116      	bne.n	8002760 <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	2200      	movs	r2, #0
 8002736:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	2220      	movs	r2, #32
 800273c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	2200      	movs	r2, #0
 8002744:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800274c:	f043 0220 	orr.w	r2, r3, #32
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	2200      	movs	r2, #0
 8002758:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800275c:	2301      	movs	r3, #1
 800275e:	e007      	b.n	8002770 <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8002760:	68fb      	ldr	r3, [r7, #12]
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	695b      	ldr	r3, [r3, #20]
 8002766:	f003 0304 	and.w	r3, r3, #4
 800276a:	2b04      	cmp	r3, #4
 800276c:	d1ca      	bne.n	8002704 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 800276e:	2300      	movs	r3, #0
}
 8002770:	4618      	mov	r0, r3
 8002772:	3710      	adds	r7, #16
 8002774:	46bd      	mov	sp, r7
 8002776:	bd80      	pop	{r7, pc}

08002778 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8002778:	b480      	push	{r7}
 800277a:	b083      	sub	sp, #12
 800277c:	af00      	add	r7, sp, #0
 800277e:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	681b      	ldr	r3, [r3, #0]
 8002784:	695b      	ldr	r3, [r3, #20]
 8002786:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800278a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800278e:	d11b      	bne.n	80027c8 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	681b      	ldr	r3, [r3, #0]
 8002794:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002798:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	2200      	movs	r2, #0
 800279e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2220      	movs	r2, #32
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	2200      	movs	r2, #0
 80027ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027b4:	f043 0204 	orr.w	r2, r3, #4
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	2200      	movs	r2, #0
 80027c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 80027c4:	2301      	movs	r3, #1
 80027c6:	e000      	b.n	80027ca <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80027c8:	2300      	movs	r3, #0
}
 80027ca:	4618      	mov	r0, r3
 80027cc:	370c      	adds	r7, #12
 80027ce:	46bd      	mov	sp, r7
 80027d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80027d4:	4770      	bx	lr
	...

080027d8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b086      	sub	sp, #24
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e267      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	f003 0301 	and.w	r3, r3, #1
 80027f2:	2b00      	cmp	r3, #0
 80027f4:	d075      	beq.n	80028e2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80027f6:	4b88      	ldr	r3, [pc, #544]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80027f8:	689b      	ldr	r3, [r3, #8]
 80027fa:	f003 030c 	and.w	r3, r3, #12
 80027fe:	2b04      	cmp	r3, #4
 8002800:	d00c      	beq.n	800281c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002802:	4b85      	ldr	r3, [pc, #532]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002804:	689b      	ldr	r3, [r3, #8]
 8002806:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800280a:	2b08      	cmp	r3, #8
 800280c:	d112      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800280e:	4b82      	ldr	r3, [pc, #520]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002810:	685b      	ldr	r3, [r3, #4]
 8002812:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002816:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800281a:	d10b      	bne.n	8002834 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800281c:	4b7e      	ldr	r3, [pc, #504]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002824:	2b00      	cmp	r3, #0
 8002826:	d05b      	beq.n	80028e0 <HAL_RCC_OscConfig+0x108>
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	2b00      	cmp	r3, #0
 800282e:	d157      	bne.n	80028e0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002830:	2301      	movs	r3, #1
 8002832:	e242      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	685b      	ldr	r3, [r3, #4]
 8002838:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800283c:	d106      	bne.n	800284c <HAL_RCC_OscConfig+0x74>
 800283e:	4b76      	ldr	r3, [pc, #472]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a75      	ldr	r2, [pc, #468]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002844:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002848:	6013      	str	r3, [r2, #0]
 800284a:	e01d      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	685b      	ldr	r3, [r3, #4]
 8002850:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002854:	d10c      	bne.n	8002870 <HAL_RCC_OscConfig+0x98>
 8002856:	4b70      	ldr	r3, [pc, #448]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	4a6f      	ldr	r2, [pc, #444]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800285c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002860:	6013      	str	r3, [r2, #0]
 8002862:	4b6d      	ldr	r3, [pc, #436]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a6c      	ldr	r2, [pc, #432]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002868:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800286c:	6013      	str	r3, [r2, #0]
 800286e:	e00b      	b.n	8002888 <HAL_RCC_OscConfig+0xb0>
 8002870:	4b69      	ldr	r3, [pc, #420]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4a68      	ldr	r2, [pc, #416]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002876:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800287a:	6013      	str	r3, [r2, #0]
 800287c:	4b66      	ldr	r3, [pc, #408]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	4a65      	ldr	r2, [pc, #404]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002882:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002886:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002888:	687b      	ldr	r3, [r7, #4]
 800288a:	685b      	ldr	r3, [r3, #4]
 800288c:	2b00      	cmp	r3, #0
 800288e:	d013      	beq.n	80028b8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002890:	f7ff f85e 	bl	8001950 <HAL_GetTick>
 8002894:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002896:	e008      	b.n	80028aa <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8002898:	f7ff f85a 	bl	8001950 <HAL_GetTick>
 800289c:	4602      	mov	r2, r0
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	1ad3      	subs	r3, r2, r3
 80028a2:	2b64      	cmp	r3, #100	; 0x64
 80028a4:	d901      	bls.n	80028aa <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80028a6:	2303      	movs	r3, #3
 80028a8:	e207      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80028aa:	4b5b      	ldr	r3, [pc, #364]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d0f0      	beq.n	8002898 <HAL_RCC_OscConfig+0xc0>
 80028b6:	e014      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028b8:	f7ff f84a 	bl	8001950 <HAL_GetTick>
 80028bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028be:	e008      	b.n	80028d2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80028c0:	f7ff f846 	bl	8001950 <HAL_GetTick>
 80028c4:	4602      	mov	r2, r0
 80028c6:	693b      	ldr	r3, [r7, #16]
 80028c8:	1ad3      	subs	r3, r2, r3
 80028ca:	2b64      	cmp	r3, #100	; 0x64
 80028cc:	d901      	bls.n	80028d2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80028ce:	2303      	movs	r3, #3
 80028d0:	e1f3      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80028d2:	4b51      	ldr	r3, [pc, #324]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80028d4:	681b      	ldr	r3, [r3, #0]
 80028d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028da:	2b00      	cmp	r3, #0
 80028dc:	d1f0      	bne.n	80028c0 <HAL_RCC_OscConfig+0xe8>
 80028de:	e000      	b.n	80028e2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80028e0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	f003 0302 	and.w	r3, r3, #2
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d063      	beq.n	80029b6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80028ee:	4b4a      	ldr	r3, [pc, #296]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80028f0:	689b      	ldr	r3, [r3, #8]
 80028f2:	f003 030c 	and.w	r3, r3, #12
 80028f6:	2b00      	cmp	r3, #0
 80028f8:	d00b      	beq.n	8002912 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80028fa:	4b47      	ldr	r3, [pc, #284]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80028fc:	689b      	ldr	r3, [r3, #8]
 80028fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002902:	2b08      	cmp	r3, #8
 8002904:	d11c      	bne.n	8002940 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002906:	4b44      	ldr	r3, [pc, #272]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002908:	685b      	ldr	r3, [r3, #4]
 800290a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800290e:	2b00      	cmp	r3, #0
 8002910:	d116      	bne.n	8002940 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002912:	4b41      	ldr	r3, [pc, #260]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0302 	and.w	r3, r3, #2
 800291a:	2b00      	cmp	r3, #0
 800291c:	d005      	beq.n	800292a <HAL_RCC_OscConfig+0x152>
 800291e:	687b      	ldr	r3, [r7, #4]
 8002920:	68db      	ldr	r3, [r3, #12]
 8002922:	2b01      	cmp	r3, #1
 8002924:	d001      	beq.n	800292a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002926:	2301      	movs	r3, #1
 8002928:	e1c7      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800292a:	4b3b      	ldr	r3, [pc, #236]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	691b      	ldr	r3, [r3, #16]
 8002936:	00db      	lsls	r3, r3, #3
 8002938:	4937      	ldr	r1, [pc, #220]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800293a:	4313      	orrs	r3, r2
 800293c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800293e:	e03a      	b.n	80029b6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	2b00      	cmp	r3, #0
 8002946:	d020      	beq.n	800298a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002948:	4b34      	ldr	r3, [pc, #208]	; (8002a1c <HAL_RCC_OscConfig+0x244>)
 800294a:	2201      	movs	r2, #1
 800294c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800294e:	f7fe ffff 	bl	8001950 <HAL_GetTick>
 8002952:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002954:	e008      	b.n	8002968 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002956:	f7fe fffb 	bl	8001950 <HAL_GetTick>
 800295a:	4602      	mov	r2, r0
 800295c:	693b      	ldr	r3, [r7, #16]
 800295e:	1ad3      	subs	r3, r2, r3
 8002960:	2b02      	cmp	r3, #2
 8002962:	d901      	bls.n	8002968 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002964:	2303      	movs	r3, #3
 8002966:	e1a8      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002968:	4b2b      	ldr	r3, [pc, #172]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	f003 0302 	and.w	r3, r3, #2
 8002970:	2b00      	cmp	r3, #0
 8002972:	d0f0      	beq.n	8002956 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002974:	4b28      	ldr	r3, [pc, #160]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	691b      	ldr	r3, [r3, #16]
 8002980:	00db      	lsls	r3, r3, #3
 8002982:	4925      	ldr	r1, [pc, #148]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 8002984:	4313      	orrs	r3, r2
 8002986:	600b      	str	r3, [r1, #0]
 8002988:	e015      	b.n	80029b6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800298a:	4b24      	ldr	r3, [pc, #144]	; (8002a1c <HAL_RCC_OscConfig+0x244>)
 800298c:	2200      	movs	r2, #0
 800298e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002990:	f7fe ffde 	bl	8001950 <HAL_GetTick>
 8002994:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002996:	e008      	b.n	80029aa <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8002998:	f7fe ffda 	bl	8001950 <HAL_GetTick>
 800299c:	4602      	mov	r2, r0
 800299e:	693b      	ldr	r3, [r7, #16]
 80029a0:	1ad3      	subs	r3, r2, r3
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d901      	bls.n	80029aa <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80029a6:	2303      	movs	r3, #3
 80029a8:	e187      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80029aa:	4b1b      	ldr	r3, [pc, #108]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80029ac:	681b      	ldr	r3, [r3, #0]
 80029ae:	f003 0302 	and.w	r3, r3, #2
 80029b2:	2b00      	cmp	r3, #0
 80029b4:	d1f0      	bne.n	8002998 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80029b6:	687b      	ldr	r3, [r7, #4]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	f003 0308 	and.w	r3, r3, #8
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d036      	beq.n	8002a30 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	695b      	ldr	r3, [r3, #20]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d016      	beq.n	80029f8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80029ca:	4b15      	ldr	r3, [pc, #84]	; (8002a20 <HAL_RCC_OscConfig+0x248>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80029d0:	f7fe ffbe 	bl	8001950 <HAL_GetTick>
 80029d4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029d6:	e008      	b.n	80029ea <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80029d8:	f7fe ffba 	bl	8001950 <HAL_GetTick>
 80029dc:	4602      	mov	r2, r0
 80029de:	693b      	ldr	r3, [r7, #16]
 80029e0:	1ad3      	subs	r3, r2, r3
 80029e2:	2b02      	cmp	r3, #2
 80029e4:	d901      	bls.n	80029ea <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80029e6:	2303      	movs	r3, #3
 80029e8:	e167      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80029ea:	4b0b      	ldr	r3, [pc, #44]	; (8002a18 <HAL_RCC_OscConfig+0x240>)
 80029ec:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80029ee:	f003 0302 	and.w	r3, r3, #2
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d0f0      	beq.n	80029d8 <HAL_RCC_OscConfig+0x200>
 80029f6:	e01b      	b.n	8002a30 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80029f8:	4b09      	ldr	r3, [pc, #36]	; (8002a20 <HAL_RCC_OscConfig+0x248>)
 80029fa:	2200      	movs	r2, #0
 80029fc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80029fe:	f7fe ffa7 	bl	8001950 <HAL_GetTick>
 8002a02:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a04:	e00e      	b.n	8002a24 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8002a06:	f7fe ffa3 	bl	8001950 <HAL_GetTick>
 8002a0a:	4602      	mov	r2, r0
 8002a0c:	693b      	ldr	r3, [r7, #16]
 8002a0e:	1ad3      	subs	r3, r2, r3
 8002a10:	2b02      	cmp	r3, #2
 8002a12:	d907      	bls.n	8002a24 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002a14:	2303      	movs	r3, #3
 8002a16:	e150      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
 8002a18:	40023800 	.word	0x40023800
 8002a1c:	42470000 	.word	0x42470000
 8002a20:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002a24:	4b88      	ldr	r3, [pc, #544]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002a28:	f003 0302 	and.w	r3, r3, #2
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d1ea      	bne.n	8002a06 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f003 0304 	and.w	r3, r3, #4
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	f000 8097 	beq.w	8002b6c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002a3e:	2300      	movs	r3, #0
 8002a40:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002a42:	4b81      	ldr	r3, [pc, #516]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a46:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d10f      	bne.n	8002a6e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002a4e:	2300      	movs	r3, #0
 8002a50:	60bb      	str	r3, [r7, #8]
 8002a52:	4b7d      	ldr	r3, [pc, #500]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a56:	4a7c      	ldr	r2, [pc, #496]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a58:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a5c:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5e:	4b7a      	ldr	r3, [pc, #488]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a62:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a66:	60bb      	str	r3, [r7, #8]
 8002a68:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a6e:	4b77      	ldr	r3, [pc, #476]	; (8002c4c <HAL_RCC_OscConfig+0x474>)
 8002a70:	681b      	ldr	r3, [r3, #0]
 8002a72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a76:	2b00      	cmp	r3, #0
 8002a78:	d118      	bne.n	8002aac <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a7a:	4b74      	ldr	r3, [pc, #464]	; (8002c4c <HAL_RCC_OscConfig+0x474>)
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	4a73      	ldr	r2, [pc, #460]	; (8002c4c <HAL_RCC_OscConfig+0x474>)
 8002a80:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a84:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a86:	f7fe ff63 	bl	8001950 <HAL_GetTick>
 8002a8a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a8c:	e008      	b.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a8e:	f7fe ff5f 	bl	8001950 <HAL_GetTick>
 8002a92:	4602      	mov	r2, r0
 8002a94:	693b      	ldr	r3, [r7, #16]
 8002a96:	1ad3      	subs	r3, r2, r3
 8002a98:	2b02      	cmp	r3, #2
 8002a9a:	d901      	bls.n	8002aa0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002a9c:	2303      	movs	r3, #3
 8002a9e:	e10c      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002aa0:	4b6a      	ldr	r3, [pc, #424]	; (8002c4c <HAL_RCC_OscConfig+0x474>)
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002aa8:	2b00      	cmp	r3, #0
 8002aaa:	d0f0      	beq.n	8002a8e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	689b      	ldr	r3, [r3, #8]
 8002ab0:	2b01      	cmp	r3, #1
 8002ab2:	d106      	bne.n	8002ac2 <HAL_RCC_OscConfig+0x2ea>
 8002ab4:	4b64      	ldr	r3, [pc, #400]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002ab6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ab8:	4a63      	ldr	r2, [pc, #396]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002aba:	f043 0301 	orr.w	r3, r3, #1
 8002abe:	6713      	str	r3, [r2, #112]	; 0x70
 8002ac0:	e01c      	b.n	8002afc <HAL_RCC_OscConfig+0x324>
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	2b05      	cmp	r3, #5
 8002ac8:	d10c      	bne.n	8002ae4 <HAL_RCC_OscConfig+0x30c>
 8002aca:	4b5f      	ldr	r3, [pc, #380]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002acc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ace:	4a5e      	ldr	r2, [pc, #376]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002ad0:	f043 0304 	orr.w	r3, r3, #4
 8002ad4:	6713      	str	r3, [r2, #112]	; 0x70
 8002ad6:	4b5c      	ldr	r3, [pc, #368]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002ad8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ada:	4a5b      	ldr	r2, [pc, #364]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002adc:	f043 0301 	orr.w	r3, r3, #1
 8002ae0:	6713      	str	r3, [r2, #112]	; 0x70
 8002ae2:	e00b      	b.n	8002afc <HAL_RCC_OscConfig+0x324>
 8002ae4:	4b58      	ldr	r3, [pc, #352]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002ae6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002ae8:	4a57      	ldr	r2, [pc, #348]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002aea:	f023 0301 	bic.w	r3, r3, #1
 8002aee:	6713      	str	r3, [r2, #112]	; 0x70
 8002af0:	4b55      	ldr	r3, [pc, #340]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002af2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002af4:	4a54      	ldr	r2, [pc, #336]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002af6:	f023 0304 	bic.w	r3, r3, #4
 8002afa:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002afc:	687b      	ldr	r3, [r7, #4]
 8002afe:	689b      	ldr	r3, [r3, #8]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	d015      	beq.n	8002b30 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002b04:	f7fe ff24 	bl	8001950 <HAL_GetTick>
 8002b08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b0a:	e00a      	b.n	8002b22 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b0c:	f7fe ff20 	bl	8001950 <HAL_GetTick>
 8002b10:	4602      	mov	r2, r0
 8002b12:	693b      	ldr	r3, [r7, #16]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d901      	bls.n	8002b22 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002b1e:	2303      	movs	r3, #3
 8002b20:	e0cb      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002b22:	4b49      	ldr	r3, [pc, #292]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b26:	f003 0302 	and.w	r3, r3, #2
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d0ee      	beq.n	8002b0c <HAL_RCC_OscConfig+0x334>
 8002b2e:	e014      	b.n	8002b5a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002b30:	f7fe ff0e 	bl	8001950 <HAL_GetTick>
 8002b34:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b36:	e00a      	b.n	8002b4e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002b38:	f7fe ff0a 	bl	8001950 <HAL_GetTick>
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	693b      	ldr	r3, [r7, #16]
 8002b40:	1ad3      	subs	r3, r2, r3
 8002b42:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d901      	bls.n	8002b4e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002b4a:	2303      	movs	r3, #3
 8002b4c:	e0b5      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b4e:	4b3e      	ldr	r3, [pc, #248]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b52:	f003 0302 	and.w	r3, r3, #2
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d1ee      	bne.n	8002b38 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8002b5a:	7dfb      	ldrb	r3, [r7, #23]
 8002b5c:	2b01      	cmp	r3, #1
 8002b5e:	d105      	bne.n	8002b6c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b60:	4b39      	ldr	r3, [pc, #228]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b64:	4a38      	ldr	r2, [pc, #224]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b66:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b6a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	699b      	ldr	r3, [r3, #24]
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	f000 80a1 	beq.w	8002cb8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002b76:	4b34      	ldr	r3, [pc, #208]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002b78:	689b      	ldr	r3, [r3, #8]
 8002b7a:	f003 030c 	and.w	r3, r3, #12
 8002b7e:	2b08      	cmp	r3, #8
 8002b80:	d05c      	beq.n	8002c3c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	699b      	ldr	r3, [r3, #24]
 8002b86:	2b02      	cmp	r3, #2
 8002b88:	d141      	bne.n	8002c0e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b8a:	4b31      	ldr	r3, [pc, #196]	; (8002c50 <HAL_RCC_OscConfig+0x478>)
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b90:	f7fe fede 	bl	8001950 <HAL_GetTick>
 8002b94:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002b96:	e008      	b.n	8002baa <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002b98:	f7fe feda 	bl	8001950 <HAL_GetTick>
 8002b9c:	4602      	mov	r2, r0
 8002b9e:	693b      	ldr	r3, [r7, #16]
 8002ba0:	1ad3      	subs	r3, r2, r3
 8002ba2:	2b02      	cmp	r3, #2
 8002ba4:	d901      	bls.n	8002baa <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002ba6:	2303      	movs	r3, #3
 8002ba8:	e087      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002baa:	4b27      	ldr	r3, [pc, #156]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002bac:	681b      	ldr	r3, [r3, #0]
 8002bae:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bb2:	2b00      	cmp	r3, #0
 8002bb4:	d1f0      	bne.n	8002b98 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	69da      	ldr	r2, [r3, #28]
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6a1b      	ldr	r3, [r3, #32]
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bc4:	019b      	lsls	r3, r3, #6
 8002bc6:	431a      	orrs	r2, r3
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002bcc:	085b      	lsrs	r3, r3, #1
 8002bce:	3b01      	subs	r3, #1
 8002bd0:	041b      	lsls	r3, r3, #16
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002bd8:	061b      	lsls	r3, r3, #24
 8002bda:	491b      	ldr	r1, [pc, #108]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002bdc:	4313      	orrs	r3, r2
 8002bde:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002be0:	4b1b      	ldr	r3, [pc, #108]	; (8002c50 <HAL_RCC_OscConfig+0x478>)
 8002be2:	2201      	movs	r2, #1
 8002be4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002be6:	f7fe feb3 	bl	8001950 <HAL_GetTick>
 8002bea:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002bec:	e008      	b.n	8002c00 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002bee:	f7fe feaf 	bl	8001950 <HAL_GetTick>
 8002bf2:	4602      	mov	r2, r0
 8002bf4:	693b      	ldr	r3, [r7, #16]
 8002bf6:	1ad3      	subs	r3, r2, r3
 8002bf8:	2b02      	cmp	r3, #2
 8002bfa:	d901      	bls.n	8002c00 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002bfc:	2303      	movs	r3, #3
 8002bfe:	e05c      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002c00:	4b11      	ldr	r3, [pc, #68]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002c02:	681b      	ldr	r3, [r3, #0]
 8002c04:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d0f0      	beq.n	8002bee <HAL_RCC_OscConfig+0x416>
 8002c0c:	e054      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002c0e:	4b10      	ldr	r3, [pc, #64]	; (8002c50 <HAL_RCC_OscConfig+0x478>)
 8002c10:	2200      	movs	r2, #0
 8002c12:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002c14:	f7fe fe9c 	bl	8001950 <HAL_GetTick>
 8002c18:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c1a:	e008      	b.n	8002c2e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002c1c:	f7fe fe98 	bl	8001950 <HAL_GetTick>
 8002c20:	4602      	mov	r2, r0
 8002c22:	693b      	ldr	r3, [r7, #16]
 8002c24:	1ad3      	subs	r3, r2, r3
 8002c26:	2b02      	cmp	r3, #2
 8002c28:	d901      	bls.n	8002c2e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002c2a:	2303      	movs	r3, #3
 8002c2c:	e045      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_RCC_OscConfig+0x470>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d1f0      	bne.n	8002c1c <HAL_RCC_OscConfig+0x444>
 8002c3a:	e03d      	b.n	8002cb8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	2b01      	cmp	r3, #1
 8002c42:	d107      	bne.n	8002c54 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002c44:	2301      	movs	r3, #1
 8002c46:	e038      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
 8002c48:	40023800 	.word	0x40023800
 8002c4c:	40007000 	.word	0x40007000
 8002c50:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002c54:	4b1b      	ldr	r3, [pc, #108]	; (8002cc4 <HAL_RCC_OscConfig+0x4ec>)
 8002c56:	685b      	ldr	r3, [r3, #4]
 8002c58:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	699b      	ldr	r3, [r3, #24]
 8002c5e:	2b01      	cmp	r3, #1
 8002c60:	d028      	beq.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c62:	68fb      	ldr	r3, [r7, #12]
 8002c64:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002c6c:	429a      	cmp	r2, r3
 8002c6e:	d121      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c7a:	429a      	cmp	r2, r3
 8002c7c:	d11a      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002c7e:	68fa      	ldr	r2, [r7, #12]
 8002c80:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8002c84:	4013      	ands	r3, r2
 8002c86:	687a      	ldr	r2, [r7, #4]
 8002c88:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8002c8a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002c8c:	4293      	cmp	r3, r2
 8002c8e:	d111      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002c90:	68fb      	ldr	r3, [r7, #12]
 8002c92:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002c9a:	085b      	lsrs	r3, r3, #1
 8002c9c:	3b01      	subs	r3, #1
 8002c9e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002ca0:	429a      	cmp	r2, r3
 8002ca2:	d107      	bne.n	8002cb4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002ca4:	68fb      	ldr	r3, [r7, #12]
 8002ca6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8002caa:	687b      	ldr	r3, [r7, #4]
 8002cac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002cae:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002cb0:	429a      	cmp	r2, r3
 8002cb2:	d001      	beq.n	8002cb8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	e000      	b.n	8002cba <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002cb8:	2300      	movs	r3, #0
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	3718      	adds	r7, #24
 8002cbe:	46bd      	mov	sp, r7
 8002cc0:	bd80      	pop	{r7, pc}
 8002cc2:	bf00      	nop
 8002cc4:	40023800 	.word	0x40023800

08002cc8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b084      	sub	sp, #16
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
 8002cd0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	2b00      	cmp	r3, #0
 8002cd6:	d101      	bne.n	8002cdc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002cd8:	2301      	movs	r3, #1
 8002cda:	e0cc      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8002cdc:	4b68      	ldr	r3, [pc, #416]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	f003 0307 	and.w	r3, r3, #7
 8002ce4:	683a      	ldr	r2, [r7, #0]
 8002ce6:	429a      	cmp	r2, r3
 8002ce8:	d90c      	bls.n	8002d04 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002cea:	4b65      	ldr	r3, [pc, #404]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cec:	683a      	ldr	r2, [r7, #0]
 8002cee:	b2d2      	uxtb	r2, r2
 8002cf0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002cf2:	4b63      	ldr	r3, [pc, #396]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	f003 0307 	and.w	r3, r3, #7
 8002cfa:	683a      	ldr	r2, [r7, #0]
 8002cfc:	429a      	cmp	r2, r3
 8002cfe:	d001      	beq.n	8002d04 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002d00:	2301      	movs	r3, #1
 8002d02:	e0b8      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	681b      	ldr	r3, [r3, #0]
 8002d08:	f003 0302 	and.w	r3, r3, #2
 8002d0c:	2b00      	cmp	r3, #0
 8002d0e:	d020      	beq.n	8002d52 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	681b      	ldr	r3, [r3, #0]
 8002d14:	f003 0304 	and.w	r3, r3, #4
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d005      	beq.n	8002d28 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d1e:	689b      	ldr	r3, [r3, #8]
 8002d20:	4a58      	ldr	r2, [pc, #352]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d22:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8002d26:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002d28:	687b      	ldr	r3, [r7, #4]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f003 0308 	and.w	r3, r3, #8
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	d005      	beq.n	8002d40 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002d34:	4b53      	ldr	r3, [pc, #332]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d36:	689b      	ldr	r3, [r3, #8]
 8002d38:	4a52      	ldr	r2, [pc, #328]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d3a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002d3e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002d40:	4b50      	ldr	r3, [pc, #320]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d42:	689b      	ldr	r3, [r3, #8]
 8002d44:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	689b      	ldr	r3, [r3, #8]
 8002d4c:	494d      	ldr	r1, [pc, #308]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f003 0301 	and.w	r3, r3, #1
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d044      	beq.n	8002de8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	2b01      	cmp	r3, #1
 8002d64:	d107      	bne.n	8002d76 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d66:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d119      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d72:	2301      	movs	r3, #1
 8002d74:	e07f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	2b02      	cmp	r3, #2
 8002d7c:	d003      	beq.n	8002d86 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002d82:	2b03      	cmp	r3, #3
 8002d84:	d107      	bne.n	8002d96 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d86:	4b3f      	ldr	r3, [pc, #252]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d109      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e06f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d96:	4b3b      	ldr	r3, [pc, #236]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f003 0302 	and.w	r3, r3, #2
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d101      	bne.n	8002da6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002da2:	2301      	movs	r3, #1
 8002da4:	e067      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002da6:	4b37      	ldr	r3, [pc, #220]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002da8:	689b      	ldr	r3, [r3, #8]
 8002daa:	f023 0203 	bic.w	r2, r3, #3
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	4934      	ldr	r1, [pc, #208]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002db4:	4313      	orrs	r3, r2
 8002db6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002db8:	f7fe fdca 	bl	8001950 <HAL_GetTick>
 8002dbc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dbe:	e00a      	b.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002dc0:	f7fe fdc6 	bl	8001950 <HAL_GetTick>
 8002dc4:	4602      	mov	r2, r0
 8002dc6:	68fb      	ldr	r3, [r7, #12]
 8002dc8:	1ad3      	subs	r3, r2, r3
 8002dca:	f241 3288 	movw	r2, #5000	; 0x1388
 8002dce:	4293      	cmp	r3, r2
 8002dd0:	d901      	bls.n	8002dd6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002dd2:	2303      	movs	r3, #3
 8002dd4:	e04f      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002dd6:	4b2b      	ldr	r3, [pc, #172]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002dd8:	689b      	ldr	r3, [r3, #8]
 8002dda:	f003 020c 	and.w	r2, r3, #12
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	009b      	lsls	r3, r3, #2
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d1eb      	bne.n	8002dc0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8002de8:	4b25      	ldr	r3, [pc, #148]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	f003 0307 	and.w	r3, r3, #7
 8002df0:	683a      	ldr	r2, [r7, #0]
 8002df2:	429a      	cmp	r2, r3
 8002df4:	d20c      	bcs.n	8002e10 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002df6:	4b22      	ldr	r3, [pc, #136]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002df8:	683a      	ldr	r2, [r7, #0]
 8002dfa:	b2d2      	uxtb	r2, r2
 8002dfc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002dfe:	4b20      	ldr	r3, [pc, #128]	; (8002e80 <HAL_RCC_ClockConfig+0x1b8>)
 8002e00:	681b      	ldr	r3, [r3, #0]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	683a      	ldr	r2, [r7, #0]
 8002e08:	429a      	cmp	r2, r3
 8002e0a:	d001      	beq.n	8002e10 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002e0c:	2301      	movs	r3, #1
 8002e0e:	e032      	b.n	8002e76 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f003 0304 	and.w	r3, r3, #4
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	d008      	beq.n	8002e2e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002e1c:	4b19      	ldr	r3, [pc, #100]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e1e:	689b      	ldr	r3, [r3, #8]
 8002e20:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8002e24:	687b      	ldr	r3, [r7, #4]
 8002e26:	68db      	ldr	r3, [r3, #12]
 8002e28:	4916      	ldr	r1, [pc, #88]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e2a:	4313      	orrs	r3, r2
 8002e2c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002e2e:	687b      	ldr	r3, [r7, #4]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	f003 0308 	and.w	r3, r3, #8
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d009      	beq.n	8002e4e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8002e3a:	4b12      	ldr	r3, [pc, #72]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e3c:	689b      	ldr	r3, [r3, #8]
 8002e3e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	00db      	lsls	r3, r3, #3
 8002e48:	490e      	ldr	r1, [pc, #56]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e4a:	4313      	orrs	r3, r2
 8002e4c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002e4e:	f000 f821 	bl	8002e94 <HAL_RCC_GetSysClockFreq>
 8002e52:	4602      	mov	r2, r0
 8002e54:	4b0b      	ldr	r3, [pc, #44]	; (8002e84 <HAL_RCC_ClockConfig+0x1bc>)
 8002e56:	689b      	ldr	r3, [r3, #8]
 8002e58:	091b      	lsrs	r3, r3, #4
 8002e5a:	f003 030f 	and.w	r3, r3, #15
 8002e5e:	490a      	ldr	r1, [pc, #40]	; (8002e88 <HAL_RCC_ClockConfig+0x1c0>)
 8002e60:	5ccb      	ldrb	r3, [r1, r3]
 8002e62:	fa22 f303 	lsr.w	r3, r2, r3
 8002e66:	4a09      	ldr	r2, [pc, #36]	; (8002e8c <HAL_RCC_ClockConfig+0x1c4>)
 8002e68:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8002e6a:	4b09      	ldr	r3, [pc, #36]	; (8002e90 <HAL_RCC_ClockConfig+0x1c8>)
 8002e6c:	681b      	ldr	r3, [r3, #0]
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f7fe fd2a 	bl	80018c8 <HAL_InitTick>

  return HAL_OK;
 8002e74:	2300      	movs	r3, #0
}
 8002e76:	4618      	mov	r0, r3
 8002e78:	3710      	adds	r7, #16
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40023c00 	.word	0x40023c00
 8002e84:	40023800 	.word	0x40023800
 8002e88:	08004bbc 	.word	0x08004bbc
 8002e8c:	20001438 	.word	0x20001438
 8002e90:	2000143c 	.word	0x2000143c

08002e94 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e94:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002e98:	b094      	sub	sp, #80	; 0x50
 8002e9a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8002ea0:	2300      	movs	r3, #0
 8002ea2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002ea4:	2300      	movs	r3, #0
 8002ea6:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8002ea8:	2300      	movs	r3, #0
 8002eaa:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8002eac:	4b79      	ldr	r3, [pc, #484]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eae:	689b      	ldr	r3, [r3, #8]
 8002eb0:	f003 030c 	and.w	r3, r3, #12
 8002eb4:	2b08      	cmp	r3, #8
 8002eb6:	d00d      	beq.n	8002ed4 <HAL_RCC_GetSysClockFreq+0x40>
 8002eb8:	2b08      	cmp	r3, #8
 8002eba:	f200 80e1 	bhi.w	8003080 <HAL_RCC_GetSysClockFreq+0x1ec>
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	d002      	beq.n	8002ec8 <HAL_RCC_GetSysClockFreq+0x34>
 8002ec2:	2b04      	cmp	r3, #4
 8002ec4:	d003      	beq.n	8002ece <HAL_RCC_GetSysClockFreq+0x3a>
 8002ec6:	e0db      	b.n	8003080 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002ec8:	4b73      	ldr	r3, [pc, #460]	; (8003098 <HAL_RCC_GetSysClockFreq+0x204>)
 8002eca:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8002ecc:	e0db      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002ece:	4b73      	ldr	r3, [pc, #460]	; (800309c <HAL_RCC_GetSysClockFreq+0x208>)
 8002ed0:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8002ed2:	e0d8      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8002ed4:	4b6f      	ldr	r3, [pc, #444]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002edc:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8002ede:	4b6d      	ldr	r3, [pc, #436]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002ee0:	685b      	ldr	r3, [r3, #4]
 8002ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ee6:	2b00      	cmp	r3, #0
 8002ee8:	d063      	beq.n	8002fb2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002eea:	4b6a      	ldr	r3, [pc, #424]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002eec:	685b      	ldr	r3, [r3, #4]
 8002eee:	099b      	lsrs	r3, r3, #6
 8002ef0:	2200      	movs	r2, #0
 8002ef2:	63bb      	str	r3, [r7, #56]	; 0x38
 8002ef4:	63fa      	str	r2, [r7, #60]	; 0x3c
 8002ef6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002ef8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8002efc:	633b      	str	r3, [r7, #48]	; 0x30
 8002efe:	2300      	movs	r3, #0
 8002f00:	637b      	str	r3, [r7, #52]	; 0x34
 8002f02:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8002f06:	4622      	mov	r2, r4
 8002f08:	462b      	mov	r3, r5
 8002f0a:	f04f 0000 	mov.w	r0, #0
 8002f0e:	f04f 0100 	mov.w	r1, #0
 8002f12:	0159      	lsls	r1, r3, #5
 8002f14:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002f18:	0150      	lsls	r0, r2, #5
 8002f1a:	4602      	mov	r2, r0
 8002f1c:	460b      	mov	r3, r1
 8002f1e:	4621      	mov	r1, r4
 8002f20:	1a51      	subs	r1, r2, r1
 8002f22:	6139      	str	r1, [r7, #16]
 8002f24:	4629      	mov	r1, r5
 8002f26:	eb63 0301 	sbc.w	r3, r3, r1
 8002f2a:	617b      	str	r3, [r7, #20]
 8002f2c:	f04f 0200 	mov.w	r2, #0
 8002f30:	f04f 0300 	mov.w	r3, #0
 8002f34:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002f38:	4659      	mov	r1, fp
 8002f3a:	018b      	lsls	r3, r1, #6
 8002f3c:	4651      	mov	r1, sl
 8002f3e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8002f42:	4651      	mov	r1, sl
 8002f44:	018a      	lsls	r2, r1, #6
 8002f46:	4651      	mov	r1, sl
 8002f48:	ebb2 0801 	subs.w	r8, r2, r1
 8002f4c:	4659      	mov	r1, fp
 8002f4e:	eb63 0901 	sbc.w	r9, r3, r1
 8002f52:	f04f 0200 	mov.w	r2, #0
 8002f56:	f04f 0300 	mov.w	r3, #0
 8002f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8002f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8002f66:	4690      	mov	r8, r2
 8002f68:	4699      	mov	r9, r3
 8002f6a:	4623      	mov	r3, r4
 8002f6c:	eb18 0303 	adds.w	r3, r8, r3
 8002f70:	60bb      	str	r3, [r7, #8]
 8002f72:	462b      	mov	r3, r5
 8002f74:	eb49 0303 	adc.w	r3, r9, r3
 8002f78:	60fb      	str	r3, [r7, #12]
 8002f7a:	f04f 0200 	mov.w	r2, #0
 8002f7e:	f04f 0300 	mov.w	r3, #0
 8002f82:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8002f86:	4629      	mov	r1, r5
 8002f88:	024b      	lsls	r3, r1, #9
 8002f8a:	4621      	mov	r1, r4
 8002f8c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8002f90:	4621      	mov	r1, r4
 8002f92:	024a      	lsls	r2, r1, #9
 8002f94:	4610      	mov	r0, r2
 8002f96:	4619      	mov	r1, r3
 8002f98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002f9a:	2200      	movs	r2, #0
 8002f9c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002f9e:	62fa      	str	r2, [r7, #44]	; 0x2c
 8002fa0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8002fa4:	f7fd f91e 	bl	80001e4 <__aeabi_uldivmod>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4613      	mov	r3, r2
 8002fae:	64fb      	str	r3, [r7, #76]	; 0x4c
 8002fb0:	e058      	b.n	8003064 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002fb2:	4b38      	ldr	r3, [pc, #224]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8002fb4:	685b      	ldr	r3, [r3, #4]
 8002fb6:	099b      	lsrs	r3, r3, #6
 8002fb8:	2200      	movs	r2, #0
 8002fba:	4618      	mov	r0, r3
 8002fbc:	4611      	mov	r1, r2
 8002fbe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8002fc2:	623b      	str	r3, [r7, #32]
 8002fc4:	2300      	movs	r3, #0
 8002fc6:	627b      	str	r3, [r7, #36]	; 0x24
 8002fc8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8002fcc:	4642      	mov	r2, r8
 8002fce:	464b      	mov	r3, r9
 8002fd0:	f04f 0000 	mov.w	r0, #0
 8002fd4:	f04f 0100 	mov.w	r1, #0
 8002fd8:	0159      	lsls	r1, r3, #5
 8002fda:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002fde:	0150      	lsls	r0, r2, #5
 8002fe0:	4602      	mov	r2, r0
 8002fe2:	460b      	mov	r3, r1
 8002fe4:	4641      	mov	r1, r8
 8002fe6:	ebb2 0a01 	subs.w	sl, r2, r1
 8002fea:	4649      	mov	r1, r9
 8002fec:	eb63 0b01 	sbc.w	fp, r3, r1
 8002ff0:	f04f 0200 	mov.w	r2, #0
 8002ff4:	f04f 0300 	mov.w	r3, #0
 8002ff8:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8002ffc:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003000:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003004:	ebb2 040a 	subs.w	r4, r2, sl
 8003008:	eb63 050b 	sbc.w	r5, r3, fp
 800300c:	f04f 0200 	mov.w	r2, #0
 8003010:	f04f 0300 	mov.w	r3, #0
 8003014:	00eb      	lsls	r3, r5, #3
 8003016:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800301a:	00e2      	lsls	r2, r4, #3
 800301c:	4614      	mov	r4, r2
 800301e:	461d      	mov	r5, r3
 8003020:	4643      	mov	r3, r8
 8003022:	18e3      	adds	r3, r4, r3
 8003024:	603b      	str	r3, [r7, #0]
 8003026:	464b      	mov	r3, r9
 8003028:	eb45 0303 	adc.w	r3, r5, r3
 800302c:	607b      	str	r3, [r7, #4]
 800302e:	f04f 0200 	mov.w	r2, #0
 8003032:	f04f 0300 	mov.w	r3, #0
 8003036:	e9d7 4500 	ldrd	r4, r5, [r7]
 800303a:	4629      	mov	r1, r5
 800303c:	028b      	lsls	r3, r1, #10
 800303e:	4621      	mov	r1, r4
 8003040:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003044:	4621      	mov	r1, r4
 8003046:	028a      	lsls	r2, r1, #10
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800304e:	2200      	movs	r2, #0
 8003050:	61bb      	str	r3, [r7, #24]
 8003052:	61fa      	str	r2, [r7, #28]
 8003054:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003058:	f7fd f8c4 	bl	80001e4 <__aeabi_uldivmod>
 800305c:	4602      	mov	r2, r0
 800305e:	460b      	mov	r3, r1
 8003060:	4613      	mov	r3, r2
 8003062:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8003064:	4b0b      	ldr	r3, [pc, #44]	; (8003094 <HAL_RCC_GetSysClockFreq+0x200>)
 8003066:	685b      	ldr	r3, [r3, #4]
 8003068:	0c1b      	lsrs	r3, r3, #16
 800306a:	f003 0303 	and.w	r3, r3, #3
 800306e:	3301      	adds	r3, #1
 8003070:	005b      	lsls	r3, r3, #1
 8003072:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 8003074:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8003076:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8003078:	fbb2 f3f3 	udiv	r3, r2, r3
 800307c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800307e:	e002      	b.n	8003086 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003080:	4b05      	ldr	r3, [pc, #20]	; (8003098 <HAL_RCC_GetSysClockFreq+0x204>)
 8003082:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8003084:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003086:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8003088:	4618      	mov	r0, r3
 800308a:	3750      	adds	r7, #80	; 0x50
 800308c:	46bd      	mov	sp, r7
 800308e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003092:	bf00      	nop
 8003094:	40023800 	.word	0x40023800
 8003098:	00f42400 	.word	0x00f42400
 800309c:	007a1200 	.word	0x007a1200

080030a0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80030a0:	b480      	push	{r7}
 80030a2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80030a4:	4b03      	ldr	r3, [pc, #12]	; (80030b4 <HAL_RCC_GetHCLKFreq+0x14>)
 80030a6:	681b      	ldr	r3, [r3, #0]
}
 80030a8:	4618      	mov	r0, r3
 80030aa:	46bd      	mov	sp, r7
 80030ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030b0:	4770      	bx	lr
 80030b2:	bf00      	nop
 80030b4:	20001438 	.word	0x20001438

080030b8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80030b8:	b580      	push	{r7, lr}
 80030ba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80030bc:	f7ff fff0 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030c0:	4602      	mov	r2, r0
 80030c2:	4b05      	ldr	r3, [pc, #20]	; (80030d8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	0a9b      	lsrs	r3, r3, #10
 80030c8:	f003 0307 	and.w	r3, r3, #7
 80030cc:	4903      	ldr	r1, [pc, #12]	; (80030dc <HAL_RCC_GetPCLK1Freq+0x24>)
 80030ce:	5ccb      	ldrb	r3, [r1, r3]
 80030d0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030d4:	4618      	mov	r0, r3
 80030d6:	bd80      	pop	{r7, pc}
 80030d8:	40023800 	.word	0x40023800
 80030dc:	08004bcc 	.word	0x08004bcc

080030e0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80030e4:	f7ff ffdc 	bl	80030a0 <HAL_RCC_GetHCLKFreq>
 80030e8:	4602      	mov	r2, r0
 80030ea:	4b05      	ldr	r3, [pc, #20]	; (8003100 <HAL_RCC_GetPCLK2Freq+0x20>)
 80030ec:	689b      	ldr	r3, [r3, #8]
 80030ee:	0b5b      	lsrs	r3, r3, #13
 80030f0:	f003 0307 	and.w	r3, r3, #7
 80030f4:	4903      	ldr	r1, [pc, #12]	; (8003104 <HAL_RCC_GetPCLK2Freq+0x24>)
 80030f6:	5ccb      	ldrb	r3, [r1, r3]
 80030f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80030fc:	4618      	mov	r0, r3
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40023800 	.word	0x40023800
 8003104:	08004bcc 	.word	0x08004bcc

08003108 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003108:	b580      	push	{r7, lr}
 800310a:	b082      	sub	sp, #8
 800310c:	af00      	add	r7, sp, #0
 800310e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003110:	687b      	ldr	r3, [r7, #4]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d101      	bne.n	800311a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003116:	2301      	movs	r3, #1
 8003118:	e07b      	b.n	8003212 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800311e:	2b00      	cmp	r3, #0
 8003120:	d108      	bne.n	8003134 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800312a:	d009      	beq.n	8003140 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	2200      	movs	r2, #0
 8003130:	61da      	str	r2, [r3, #28]
 8003132:	e005      	b.n	8003140 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	2200      	movs	r2, #0
 8003138:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	2200      	movs	r2, #0
 8003144:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800314c:	b2db      	uxtb	r3, r3
 800314e:	2b00      	cmp	r3, #0
 8003150:	d106      	bne.n	8003160 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	2200      	movs	r2, #0
 8003156:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800315a:	6878      	ldr	r0, [r7, #4]
 800315c:	f7fe f9fe 	bl	800155c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003160:	687b      	ldr	r3, [r7, #4]
 8003162:	2202      	movs	r2, #2
 8003164:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	681a      	ldr	r2, [r3, #0]
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003176:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	685b      	ldr	r3, [r3, #4]
 800317c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003180:	687b      	ldr	r3, [r7, #4]
 8003182:	689b      	ldr	r3, [r3, #8]
 8003184:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003188:	431a      	orrs	r2, r3
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	68db      	ldr	r3, [r3, #12]
 800318e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003192:	431a      	orrs	r2, r3
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	691b      	ldr	r3, [r3, #16]
 8003198:	f003 0302 	and.w	r3, r3, #2
 800319c:	431a      	orrs	r2, r3
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0301 	and.w	r3, r3, #1
 80031a6:	431a      	orrs	r2, r3
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	699b      	ldr	r3, [r3, #24]
 80031ac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80031b0:	431a      	orrs	r2, r3
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	69db      	ldr	r3, [r3, #28]
 80031b6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031ba:	431a      	orrs	r2, r3
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	6a1b      	ldr	r3, [r3, #32]
 80031c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80031c4:	ea42 0103 	orr.w	r1, r2, r3
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031cc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	699b      	ldr	r3, [r3, #24]
 80031dc:	0c1b      	lsrs	r3, r3, #16
 80031de:	f003 0104 	and.w	r1, r3, #4
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031e6:	f003 0210 	and.w	r2, r3, #16
 80031ea:	687b      	ldr	r3, [r7, #4]
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	430a      	orrs	r2, r1
 80031f0:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	69da      	ldr	r2, [r3, #28]
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	681b      	ldr	r3, [r3, #0]
 80031fc:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003200:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	2200      	movs	r2, #0
 8003206:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	2201      	movs	r2, #1
 800320c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003210:	2300      	movs	r3, #0
}
 8003212:	4618      	mov	r0, r3
 8003214:	3708      	adds	r7, #8
 8003216:	46bd      	mov	sp, r7
 8003218:	bd80      	pop	{r7, pc}

0800321a <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800321a:	b580      	push	{r7, lr}
 800321c:	b088      	sub	sp, #32
 800321e:	af00      	add	r7, sp, #0
 8003220:	60f8      	str	r0, [r7, #12]
 8003222:	60b9      	str	r1, [r7, #8]
 8003224:	603b      	str	r3, [r7, #0]
 8003226:	4613      	mov	r3, r2
 8003228:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800322a:	2300      	movs	r3, #0
 800322c:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003234:	2b01      	cmp	r3, #1
 8003236:	d101      	bne.n	800323c <HAL_SPI_Transmit+0x22>
 8003238:	2302      	movs	r3, #2
 800323a:	e126      	b.n	800348a <HAL_SPI_Transmit+0x270>
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	2201      	movs	r2, #1
 8003240:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003244:	f7fe fb84 	bl	8001950 <HAL_GetTick>
 8003248:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800324a:	88fb      	ldrh	r3, [r7, #6]
 800324c:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003254:	b2db      	uxtb	r3, r3
 8003256:	2b01      	cmp	r3, #1
 8003258:	d002      	beq.n	8003260 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800325a:	2302      	movs	r3, #2
 800325c:	77fb      	strb	r3, [r7, #31]
    goto error;
 800325e:	e10b      	b.n	8003478 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8003260:	68bb      	ldr	r3, [r7, #8]
 8003262:	2b00      	cmp	r3, #0
 8003264:	d002      	beq.n	800326c <HAL_SPI_Transmit+0x52>
 8003266:	88fb      	ldrh	r3, [r7, #6]
 8003268:	2b00      	cmp	r3, #0
 800326a:	d102      	bne.n	8003272 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800326c:	2301      	movs	r3, #1
 800326e:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003270:	e102      	b.n	8003478 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003272:	68fb      	ldr	r3, [r7, #12]
 8003274:	2203      	movs	r2, #3
 8003276:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800327a:	68fb      	ldr	r3, [r7, #12]
 800327c:	2200      	movs	r2, #0
 800327e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	68ba      	ldr	r2, [r7, #8]
 8003284:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	88fa      	ldrh	r2, [r7, #6]
 800328a:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	88fa      	ldrh	r2, [r7, #6]
 8003290:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003292:	68fb      	ldr	r3, [r7, #12]
 8003294:	2200      	movs	r2, #0
 8003296:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003298:	68fb      	ldr	r3, [r7, #12]
 800329a:	2200      	movs	r2, #0
 800329c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	2200      	movs	r2, #0
 80032a8:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	2200      	movs	r2, #0
 80032ae:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032b0:	68fb      	ldr	r3, [r7, #12]
 80032b2:	689b      	ldr	r3, [r3, #8]
 80032b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80032b8:	d10f      	bne.n	80032da <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	681a      	ldr	r2, [r3, #0]
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80032c8:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80032ca:	68fb      	ldr	r3, [r7, #12]
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	681a      	ldr	r2, [r3, #0]
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80032d8:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	681b      	ldr	r3, [r3, #0]
 80032e0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80032e4:	2b40      	cmp	r3, #64	; 0x40
 80032e6:	d007      	beq.n	80032f8 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80032e8:	68fb      	ldr	r3, [r7, #12]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	681a      	ldr	r2, [r3, #0]
 80032ee:	68fb      	ldr	r3, [r7, #12]
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80032f6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	68db      	ldr	r3, [r3, #12]
 80032fc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003300:	d14b      	bne.n	800339a <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003302:	68fb      	ldr	r3, [r7, #12]
 8003304:	685b      	ldr	r3, [r3, #4]
 8003306:	2b00      	cmp	r3, #0
 8003308:	d002      	beq.n	8003310 <HAL_SPI_Transmit+0xf6>
 800330a:	8afb      	ldrh	r3, [r7, #22]
 800330c:	2b01      	cmp	r3, #1
 800330e:	d13e      	bne.n	800338e <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003314:	881a      	ldrh	r2, [r3, #0]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003320:	1c9a      	adds	r2, r3, #2
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003326:	68fb      	ldr	r3, [r7, #12]
 8003328:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800332a:	b29b      	uxth	r3, r3
 800332c:	3b01      	subs	r3, #1
 800332e:	b29a      	uxth	r2, r3
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003334:	e02b      	b.n	800338e <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	689b      	ldr	r3, [r3, #8]
 800333c:	f003 0302 	and.w	r3, r3, #2
 8003340:	2b02      	cmp	r3, #2
 8003342:	d112      	bne.n	800336a <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003348:	881a      	ldrh	r2, [r3, #0]
 800334a:	68fb      	ldr	r3, [r7, #12]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003354:	1c9a      	adds	r2, r3, #2
 8003356:	68fb      	ldr	r3, [r7, #12]
 8003358:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800335e:	b29b      	uxth	r3, r3
 8003360:	3b01      	subs	r3, #1
 8003362:	b29a      	uxth	r2, r3
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	86da      	strh	r2, [r3, #54]	; 0x36
 8003368:	e011      	b.n	800338e <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800336a:	f7fe faf1 	bl	8001950 <HAL_GetTick>
 800336e:	4602      	mov	r2, r0
 8003370:	69bb      	ldr	r3, [r7, #24]
 8003372:	1ad3      	subs	r3, r2, r3
 8003374:	683a      	ldr	r2, [r7, #0]
 8003376:	429a      	cmp	r2, r3
 8003378:	d803      	bhi.n	8003382 <HAL_SPI_Transmit+0x168>
 800337a:	683b      	ldr	r3, [r7, #0]
 800337c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003380:	d102      	bne.n	8003388 <HAL_SPI_Transmit+0x16e>
 8003382:	683b      	ldr	r3, [r7, #0]
 8003384:	2b00      	cmp	r3, #0
 8003386:	d102      	bne.n	800338e <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8003388:	2303      	movs	r3, #3
 800338a:	77fb      	strb	r3, [r7, #31]
          goto error;
 800338c:	e074      	b.n	8003478 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003392:	b29b      	uxth	r3, r3
 8003394:	2b00      	cmp	r3, #0
 8003396:	d1ce      	bne.n	8003336 <HAL_SPI_Transmit+0x11c>
 8003398:	e04c      	b.n	8003434 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	685b      	ldr	r3, [r3, #4]
 800339e:	2b00      	cmp	r3, #0
 80033a0:	d002      	beq.n	80033a8 <HAL_SPI_Transmit+0x18e>
 80033a2:	8afb      	ldrh	r3, [r7, #22]
 80033a4:	2b01      	cmp	r3, #1
 80033a6:	d140      	bne.n	800342a <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033a8:	68fb      	ldr	r3, [r7, #12]
 80033aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	330c      	adds	r3, #12
 80033b2:	7812      	ldrb	r2, [r2, #0]
 80033b4:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ba:	1c5a      	adds	r2, r3, #1
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033c4:	b29b      	uxth	r3, r3
 80033c6:	3b01      	subs	r3, #1
 80033c8:	b29a      	uxth	r2, r3
 80033ca:	68fb      	ldr	r3, [r7, #12]
 80033cc:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 80033ce:	e02c      	b.n	800342a <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	f003 0302 	and.w	r3, r3, #2
 80033da:	2b02      	cmp	r3, #2
 80033dc:	d113      	bne.n	8003406 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	330c      	adds	r3, #12
 80033e8:	7812      	ldrb	r2, [r2, #0]
 80033ea:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033f0:	1c5a      	adds	r2, r3, #1
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80033f6:	68fb      	ldr	r3, [r7, #12]
 80033f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80033fa:	b29b      	uxth	r3, r3
 80033fc:	3b01      	subs	r3, #1
 80033fe:	b29a      	uxth	r2, r3
 8003400:	68fb      	ldr	r3, [r7, #12]
 8003402:	86da      	strh	r2, [r3, #54]	; 0x36
 8003404:	e011      	b.n	800342a <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003406:	f7fe faa3 	bl	8001950 <HAL_GetTick>
 800340a:	4602      	mov	r2, r0
 800340c:	69bb      	ldr	r3, [r7, #24]
 800340e:	1ad3      	subs	r3, r2, r3
 8003410:	683a      	ldr	r2, [r7, #0]
 8003412:	429a      	cmp	r2, r3
 8003414:	d803      	bhi.n	800341e <HAL_SPI_Transmit+0x204>
 8003416:	683b      	ldr	r3, [r7, #0]
 8003418:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800341c:	d102      	bne.n	8003424 <HAL_SPI_Transmit+0x20a>
 800341e:	683b      	ldr	r3, [r7, #0]
 8003420:	2b00      	cmp	r3, #0
 8003422:	d102      	bne.n	800342a <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8003424:	2303      	movs	r3, #3
 8003426:	77fb      	strb	r3, [r7, #31]
          goto error;
 8003428:	e026      	b.n	8003478 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800342e:	b29b      	uxth	r3, r3
 8003430:	2b00      	cmp	r3, #0
 8003432:	d1cd      	bne.n	80033d0 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003434:	69ba      	ldr	r2, [r7, #24]
 8003436:	6839      	ldr	r1, [r7, #0]
 8003438:	68f8      	ldr	r0, [r7, #12]
 800343a:	f000 f8b3 	bl	80035a4 <SPI_EndRxTxTransaction>
 800343e:	4603      	mov	r3, r0
 8003440:	2b00      	cmp	r3, #0
 8003442:	d002      	beq.n	800344a <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	2220      	movs	r2, #32
 8003448:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	689b      	ldr	r3, [r3, #8]
 800344e:	2b00      	cmp	r3, #0
 8003450:	d10a      	bne.n	8003468 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003452:	2300      	movs	r3, #0
 8003454:	613b      	str	r3, [r7, #16]
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	68db      	ldr	r3, [r3, #12]
 800345c:	613b      	str	r3, [r7, #16]
 800345e:	68fb      	ldr	r3, [r7, #12]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	689b      	ldr	r3, [r3, #8]
 8003464:	613b      	str	r3, [r7, #16]
 8003466:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800346c:	2b00      	cmp	r3, #0
 800346e:	d002      	beq.n	8003476 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8003470:	2301      	movs	r3, #1
 8003472:	77fb      	strb	r3, [r7, #31]
 8003474:	e000      	b.n	8003478 <HAL_SPI_Transmit+0x25e>
  }

error:
 8003476:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	2201      	movs	r2, #1
 800347c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003480:	68fb      	ldr	r3, [r7, #12]
 8003482:	2200      	movs	r2, #0
 8003484:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003488:	7ffb      	ldrb	r3, [r7, #31]
}
 800348a:	4618      	mov	r0, r3
 800348c:	3720      	adds	r7, #32
 800348e:	46bd      	mov	sp, r7
 8003490:	bd80      	pop	{r7, pc}
	...

08003494 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003494:	b580      	push	{r7, lr}
 8003496:	b088      	sub	sp, #32
 8003498:	af00      	add	r7, sp, #0
 800349a:	60f8      	str	r0, [r7, #12]
 800349c:	60b9      	str	r1, [r7, #8]
 800349e:	603b      	str	r3, [r7, #0]
 80034a0:	4613      	mov	r3, r2
 80034a2:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80034a4:	f7fe fa54 	bl	8001950 <HAL_GetTick>
 80034a8:	4602      	mov	r2, r0
 80034aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80034ac:	1a9b      	subs	r3, r3, r2
 80034ae:	683a      	ldr	r2, [r7, #0]
 80034b0:	4413      	add	r3, r2
 80034b2:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80034b4:	f7fe fa4c 	bl	8001950 <HAL_GetTick>
 80034b8:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80034ba:	4b39      	ldr	r3, [pc, #228]	; (80035a0 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	015b      	lsls	r3, r3, #5
 80034c0:	0d1b      	lsrs	r3, r3, #20
 80034c2:	69fa      	ldr	r2, [r7, #28]
 80034c4:	fb02 f303 	mul.w	r3, r2, r3
 80034c8:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80034ca:	e054      	b.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 80034cc:	683b      	ldr	r3, [r7, #0]
 80034ce:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80034d2:	d050      	beq.n	8003576 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80034d4:	f7fe fa3c 	bl	8001950 <HAL_GetTick>
 80034d8:	4602      	mov	r2, r0
 80034da:	69bb      	ldr	r3, [r7, #24]
 80034dc:	1ad3      	subs	r3, r2, r3
 80034de:	69fa      	ldr	r2, [r7, #28]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d902      	bls.n	80034ea <SPI_WaitFlagStateUntilTimeout+0x56>
 80034e4:	69fb      	ldr	r3, [r7, #28]
 80034e6:	2b00      	cmp	r3, #0
 80034e8:	d13d      	bne.n	8003566 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	681b      	ldr	r3, [r3, #0]
 80034ee:	685a      	ldr	r2, [r3, #4]
 80034f0:	68fb      	ldr	r3, [r7, #12]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80034f8:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003502:	d111      	bne.n	8003528 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	689b      	ldr	r3, [r3, #8]
 8003508:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800350c:	d004      	beq.n	8003518 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	689b      	ldr	r3, [r3, #8]
 8003512:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003516:	d107      	bne.n	8003528 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	681a      	ldr	r2, [r3, #0]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003526:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003530:	d10f      	bne.n	8003552 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003532:	68fb      	ldr	r3, [r7, #12]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	681a      	ldr	r2, [r3, #0]
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003540:	601a      	str	r2, [r3, #0]
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003550:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	2201      	movs	r2, #1
 8003556:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800355a:	68fb      	ldr	r3, [r7, #12]
 800355c:	2200      	movs	r2, #0
 800355e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e017      	b.n	8003596 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003566:	697b      	ldr	r3, [r7, #20]
 8003568:	2b00      	cmp	r3, #0
 800356a:	d101      	bne.n	8003570 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800356c:	2300      	movs	r3, #0
 800356e:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8003570:	697b      	ldr	r3, [r7, #20]
 8003572:	3b01      	subs	r3, #1
 8003574:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	689a      	ldr	r2, [r3, #8]
 800357c:	68bb      	ldr	r3, [r7, #8]
 800357e:	4013      	ands	r3, r2
 8003580:	68ba      	ldr	r2, [r7, #8]
 8003582:	429a      	cmp	r2, r3
 8003584:	bf0c      	ite	eq
 8003586:	2301      	moveq	r3, #1
 8003588:	2300      	movne	r3, #0
 800358a:	b2db      	uxtb	r3, r3
 800358c:	461a      	mov	r2, r3
 800358e:	79fb      	ldrb	r3, [r7, #7]
 8003590:	429a      	cmp	r2, r3
 8003592:	d19b      	bne.n	80034cc <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8003594:	2300      	movs	r3, #0
}
 8003596:	4618      	mov	r0, r3
 8003598:	3720      	adds	r7, #32
 800359a:	46bd      	mov	sp, r7
 800359c:	bd80      	pop	{r7, pc}
 800359e:	bf00      	nop
 80035a0:	20001438 	.word	0x20001438

080035a4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80035a4:	b580      	push	{r7, lr}
 80035a6:	b088      	sub	sp, #32
 80035a8:	af02      	add	r7, sp, #8
 80035aa:	60f8      	str	r0, [r7, #12]
 80035ac:	60b9      	str	r1, [r7, #8]
 80035ae:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80035b0:	4b1b      	ldr	r3, [pc, #108]	; (8003620 <SPI_EndRxTxTransaction+0x7c>)
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	4a1b      	ldr	r2, [pc, #108]	; (8003624 <SPI_EndRxTxTransaction+0x80>)
 80035b6:	fba2 2303 	umull	r2, r3, r2, r3
 80035ba:	0d5b      	lsrs	r3, r3, #21
 80035bc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80035c0:	fb02 f303 	mul.w	r3, r2, r3
 80035c4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	685b      	ldr	r3, [r3, #4]
 80035ca:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80035ce:	d112      	bne.n	80035f6 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	9300      	str	r3, [sp, #0]
 80035d4:	68bb      	ldr	r3, [r7, #8]
 80035d6:	2200      	movs	r2, #0
 80035d8:	2180      	movs	r1, #128	; 0x80
 80035da:	68f8      	ldr	r0, [r7, #12]
 80035dc:	f7ff ff5a 	bl	8003494 <SPI_WaitFlagStateUntilTimeout>
 80035e0:	4603      	mov	r3, r0
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d016      	beq.n	8003614 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80035ea:	f043 0220 	orr.w	r2, r3, #32
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80035f2:	2303      	movs	r3, #3
 80035f4:	e00f      	b.n	8003616 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	d00a      	beq.n	8003612 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 80035fc:	697b      	ldr	r3, [r7, #20]
 80035fe:	3b01      	subs	r3, #1
 8003600:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	689b      	ldr	r3, [r3, #8]
 8003608:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800360c:	2b80      	cmp	r3, #128	; 0x80
 800360e:	d0f2      	beq.n	80035f6 <SPI_EndRxTxTransaction+0x52>
 8003610:	e000      	b.n	8003614 <SPI_EndRxTxTransaction+0x70>
        break;
 8003612:	bf00      	nop
  }

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3718      	adds	r7, #24
 800361a:	46bd      	mov	sp, r7
 800361c:	bd80      	pop	{r7, pc}
 800361e:	bf00      	nop
 8003620:	20001438 	.word	0x20001438
 8003624:	165e9f81 	.word	0x165e9f81

08003628 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b082      	sub	sp, #8
 800362c:	af00      	add	r7, sp, #0
 800362e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	2b00      	cmp	r3, #0
 8003634:	d101      	bne.n	800363a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003636:	2301      	movs	r3, #1
 8003638:	e041      	b.n	80036be <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003640:	b2db      	uxtb	r3, r3
 8003642:	2b00      	cmp	r3, #0
 8003644:	d106      	bne.n	8003654 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	2200      	movs	r2, #0
 800364a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800364e:	6878      	ldr	r0, [r7, #4]
 8003650:	f7fd ffec 	bl	800162c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	2202      	movs	r2, #2
 8003658:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681a      	ldr	r2, [r3, #0]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	3304      	adds	r3, #4
 8003664:	4619      	mov	r1, r3
 8003666:	4610      	mov	r0, r2
 8003668:	f000 fc54 	bl	8003f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	2201      	movs	r2, #1
 8003670:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	2201      	movs	r2, #1
 8003678:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2201      	movs	r2, #1
 8003680:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2201      	movs	r2, #1
 8003688:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2201      	movs	r2, #1
 8003690:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	2201      	movs	r2, #1
 8003698:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	2201      	movs	r2, #1
 80036a0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2201      	movs	r2, #1
 80036a8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80036ac:	687b      	ldr	r3, [r7, #4]
 80036ae:	2201      	movs	r2, #1
 80036b0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80036b4:	687b      	ldr	r3, [r7, #4]
 80036b6:	2201      	movs	r2, #1
 80036b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80036bc:	2300      	movs	r3, #0
}
 80036be:	4618      	mov	r0, r3
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80036c8:	b480      	push	{r7}
 80036ca:	b085      	sub	sp, #20
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036d6:	b2db      	uxtb	r3, r3
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d001      	beq.n	80036e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80036dc:	2301      	movs	r3, #1
 80036de:	e044      	b.n	800376a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2202      	movs	r2, #2
 80036e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	68da      	ldr	r2, [r3, #12]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	f042 0201 	orr.w	r2, r2, #1
 80036f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a1e      	ldr	r2, [pc, #120]	; (8003778 <HAL_TIM_Base_Start_IT+0xb0>)
 80036fe:	4293      	cmp	r3, r2
 8003700:	d018      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x6c>
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800370a:	d013      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x6c>
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	4a1a      	ldr	r2, [pc, #104]	; (800377c <HAL_TIM_Base_Start_IT+0xb4>)
 8003712:	4293      	cmp	r3, r2
 8003714:	d00e      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x6c>
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	4a19      	ldr	r2, [pc, #100]	; (8003780 <HAL_TIM_Base_Start_IT+0xb8>)
 800371c:	4293      	cmp	r3, r2
 800371e:	d009      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x6c>
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a17      	ldr	r2, [pc, #92]	; (8003784 <HAL_TIM_Base_Start_IT+0xbc>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d004      	beq.n	8003734 <HAL_TIM_Base_Start_IT+0x6c>
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	4a16      	ldr	r2, [pc, #88]	; (8003788 <HAL_TIM_Base_Start_IT+0xc0>)
 8003730:	4293      	cmp	r3, r2
 8003732:	d111      	bne.n	8003758 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003734:	687b      	ldr	r3, [r7, #4]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	689b      	ldr	r3, [r3, #8]
 800373a:	f003 0307 	and.w	r3, r3, #7
 800373e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	2b06      	cmp	r3, #6
 8003744:	d010      	beq.n	8003768 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	681a      	ldr	r2, [r3, #0]
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f042 0201 	orr.w	r2, r2, #1
 8003754:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003756:	e007      	b.n	8003768 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f042 0201 	orr.w	r2, r2, #1
 8003766:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003768:	2300      	movs	r3, #0
}
 800376a:	4618      	mov	r0, r3
 800376c:	3714      	adds	r7, #20
 800376e:	46bd      	mov	sp, r7
 8003770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003774:	4770      	bx	lr
 8003776:	bf00      	nop
 8003778:	40010000 	.word	0x40010000
 800377c:	40000400 	.word	0x40000400
 8003780:	40000800 	.word	0x40000800
 8003784:	40000c00 	.word	0x40000c00
 8003788:	40014000 	.word	0x40014000

0800378c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800378c:	b580      	push	{r7, lr}
 800378e:	b082      	sub	sp, #8
 8003790:	af00      	add	r7, sp, #0
 8003792:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2b00      	cmp	r3, #0
 8003798:	d101      	bne.n	800379e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800379a:	2301      	movs	r3, #1
 800379c:	e041      	b.n	8003822 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80037a4:	b2db      	uxtb	r3, r3
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d106      	bne.n	80037b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	2200      	movs	r2, #0
 80037ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80037b2:	6878      	ldr	r0, [r7, #4]
 80037b4:	f000 f839 	bl	800382a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	2202      	movs	r2, #2
 80037bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681a      	ldr	r2, [r3, #0]
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	3304      	adds	r3, #4
 80037c8:	4619      	mov	r1, r3
 80037ca:	4610      	mov	r0, r2
 80037cc:	f000 fba2 	bl	8003f14 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2201      	movs	r2, #1
 80037d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2201      	movs	r2, #1
 80037dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2201      	movs	r2, #1
 80037e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003820:	2300      	movs	r3, #0
}
 8003822:	4618      	mov	r0, r3
 8003824:	3708      	adds	r7, #8
 8003826:	46bd      	mov	sp, r7
 8003828:	bd80      	pop	{r7, pc}

0800382a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800382a:	b480      	push	{r7}
 800382c:	b083      	sub	sp, #12
 800382e:	af00      	add	r7, sp, #0
 8003830:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003832:	bf00      	nop
 8003834:	370c      	adds	r7, #12
 8003836:	46bd      	mov	sp, r7
 8003838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800383c:	4770      	bx	lr
	...

08003840 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b084      	sub	sp, #16
 8003844:	af00      	add	r7, sp, #0
 8003846:	6078      	str	r0, [r7, #4]
 8003848:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800384a:	683b      	ldr	r3, [r7, #0]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d109      	bne.n	8003864 <HAL_TIM_PWM_Start+0x24>
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003856:	b2db      	uxtb	r3, r3
 8003858:	2b01      	cmp	r3, #1
 800385a:	bf14      	ite	ne
 800385c:	2301      	movne	r3, #1
 800385e:	2300      	moveq	r3, #0
 8003860:	b2db      	uxtb	r3, r3
 8003862:	e022      	b.n	80038aa <HAL_TIM_PWM_Start+0x6a>
 8003864:	683b      	ldr	r3, [r7, #0]
 8003866:	2b04      	cmp	r3, #4
 8003868:	d109      	bne.n	800387e <HAL_TIM_PWM_Start+0x3e>
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003870:	b2db      	uxtb	r3, r3
 8003872:	2b01      	cmp	r3, #1
 8003874:	bf14      	ite	ne
 8003876:	2301      	movne	r3, #1
 8003878:	2300      	moveq	r3, #0
 800387a:	b2db      	uxtb	r3, r3
 800387c:	e015      	b.n	80038aa <HAL_TIM_PWM_Start+0x6a>
 800387e:	683b      	ldr	r3, [r7, #0]
 8003880:	2b08      	cmp	r3, #8
 8003882:	d109      	bne.n	8003898 <HAL_TIM_PWM_Start+0x58>
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800388a:	b2db      	uxtb	r3, r3
 800388c:	2b01      	cmp	r3, #1
 800388e:	bf14      	ite	ne
 8003890:	2301      	movne	r3, #1
 8003892:	2300      	moveq	r3, #0
 8003894:	b2db      	uxtb	r3, r3
 8003896:	e008      	b.n	80038aa <HAL_TIM_PWM_Start+0x6a>
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800389e:	b2db      	uxtb	r3, r3
 80038a0:	2b01      	cmp	r3, #1
 80038a2:	bf14      	ite	ne
 80038a4:	2301      	movne	r3, #1
 80038a6:	2300      	moveq	r3, #0
 80038a8:	b2db      	uxtb	r3, r3
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d001      	beq.n	80038b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e068      	b.n	8003984 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80038b2:	683b      	ldr	r3, [r7, #0]
 80038b4:	2b00      	cmp	r3, #0
 80038b6:	d104      	bne.n	80038c2 <HAL_TIM_PWM_Start+0x82>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	2202      	movs	r2, #2
 80038bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80038c0:	e013      	b.n	80038ea <HAL_TIM_PWM_Start+0xaa>
 80038c2:	683b      	ldr	r3, [r7, #0]
 80038c4:	2b04      	cmp	r3, #4
 80038c6:	d104      	bne.n	80038d2 <HAL_TIM_PWM_Start+0x92>
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	2202      	movs	r2, #2
 80038cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80038d0:	e00b      	b.n	80038ea <HAL_TIM_PWM_Start+0xaa>
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	2b08      	cmp	r3, #8
 80038d6:	d104      	bne.n	80038e2 <HAL_TIM_PWM_Start+0xa2>
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80038e0:	e003      	b.n	80038ea <HAL_TIM_PWM_Start+0xaa>
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2202      	movs	r2, #2
 80038e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	2201      	movs	r2, #1
 80038f0:	6839      	ldr	r1, [r7, #0]
 80038f2:	4618      	mov	r0, r3
 80038f4:	f000 fdb4 	bl	8004460 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681b      	ldr	r3, [r3, #0]
 80038fc:	4a23      	ldr	r2, [pc, #140]	; (800398c <HAL_TIM_PWM_Start+0x14c>)
 80038fe:	4293      	cmp	r3, r2
 8003900:	d107      	bne.n	8003912 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003910:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	4a1d      	ldr	r2, [pc, #116]	; (800398c <HAL_TIM_PWM_Start+0x14c>)
 8003918:	4293      	cmp	r3, r2
 800391a:	d018      	beq.n	800394e <HAL_TIM_PWM_Start+0x10e>
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003924:	d013      	beq.n	800394e <HAL_TIM_PWM_Start+0x10e>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	4a19      	ldr	r2, [pc, #100]	; (8003990 <HAL_TIM_PWM_Start+0x150>)
 800392c:	4293      	cmp	r3, r2
 800392e:	d00e      	beq.n	800394e <HAL_TIM_PWM_Start+0x10e>
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a17      	ldr	r2, [pc, #92]	; (8003994 <HAL_TIM_PWM_Start+0x154>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d009      	beq.n	800394e <HAL_TIM_PWM_Start+0x10e>
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	4a16      	ldr	r2, [pc, #88]	; (8003998 <HAL_TIM_PWM_Start+0x158>)
 8003940:	4293      	cmp	r3, r2
 8003942:	d004      	beq.n	800394e <HAL_TIM_PWM_Start+0x10e>
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	4a14      	ldr	r2, [pc, #80]	; (800399c <HAL_TIM_PWM_Start+0x15c>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d111      	bne.n	8003972 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	689b      	ldr	r3, [r3, #8]
 8003954:	f003 0307 	and.w	r3, r3, #7
 8003958:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	2b06      	cmp	r3, #6
 800395e:	d010      	beq.n	8003982 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681a      	ldr	r2, [r3, #0]
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f042 0201 	orr.w	r2, r2, #1
 800396e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003970:	e007      	b.n	8003982 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003972:	687b      	ldr	r3, [r7, #4]
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	681a      	ldr	r2, [r3, #0]
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	f042 0201 	orr.w	r2, r2, #1
 8003980:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003982:	2300      	movs	r3, #0
}
 8003984:	4618      	mov	r0, r3
 8003986:	3710      	adds	r7, #16
 8003988:	46bd      	mov	sp, r7
 800398a:	bd80      	pop	{r7, pc}
 800398c:	40010000 	.word	0x40010000
 8003990:	40000400 	.word	0x40000400
 8003994:	40000800 	.word	0x40000800
 8003998:	40000c00 	.word	0x40000c00
 800399c:	40014000 	.word	0x40014000

080039a0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80039a0:	b580      	push	{r7, lr}
 80039a2:	b082      	sub	sp, #8
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	691b      	ldr	r3, [r3, #16]
 80039ae:	f003 0302 	and.w	r3, r3, #2
 80039b2:	2b02      	cmp	r3, #2
 80039b4:	d122      	bne.n	80039fc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	68db      	ldr	r3, [r3, #12]
 80039bc:	f003 0302 	and.w	r3, r3, #2
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d11b      	bne.n	80039fc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80039c4:	687b      	ldr	r3, [r7, #4]
 80039c6:	681b      	ldr	r3, [r3, #0]
 80039c8:	f06f 0202 	mvn.w	r2, #2
 80039cc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2201      	movs	r2, #1
 80039d2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	f003 0303 	and.w	r3, r3, #3
 80039de:	2b00      	cmp	r3, #0
 80039e0:	d003      	beq.n	80039ea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80039e2:	6878      	ldr	r0, [r7, #4]
 80039e4:	f000 fa77 	bl	8003ed6 <HAL_TIM_IC_CaptureCallback>
 80039e8:	e005      	b.n	80039f6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f000 fa69 	bl	8003ec2 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80039f0:	6878      	ldr	r0, [r7, #4]
 80039f2:	f000 fa7a 	bl	8003eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80039f6:	687b      	ldr	r3, [r7, #4]
 80039f8:	2200      	movs	r2, #0
 80039fa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	691b      	ldr	r3, [r3, #16]
 8003a02:	f003 0304 	and.w	r3, r3, #4
 8003a06:	2b04      	cmp	r3, #4
 8003a08:	d122      	bne.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	68db      	ldr	r3, [r3, #12]
 8003a10:	f003 0304 	and.w	r3, r3, #4
 8003a14:	2b04      	cmp	r3, #4
 8003a16:	d11b      	bne.n	8003a50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	681b      	ldr	r3, [r3, #0]
 8003a1c:	f06f 0204 	mvn.w	r2, #4
 8003a20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2202      	movs	r2, #2
 8003a26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	699b      	ldr	r3, [r3, #24]
 8003a2e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003a32:	2b00      	cmp	r3, #0
 8003a34:	d003      	beq.n	8003a3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a36:	6878      	ldr	r0, [r7, #4]
 8003a38:	f000 fa4d 	bl	8003ed6 <HAL_TIM_IC_CaptureCallback>
 8003a3c:	e005      	b.n	8003a4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a3e:	6878      	ldr	r0, [r7, #4]
 8003a40:	f000 fa3f 	bl	8003ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a44:	6878      	ldr	r0, [r7, #4]
 8003a46:	f000 fa50 	bl	8003eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	2200      	movs	r2, #0
 8003a4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	691b      	ldr	r3, [r3, #16]
 8003a56:	f003 0308 	and.w	r3, r3, #8
 8003a5a:	2b08      	cmp	r3, #8
 8003a5c:	d122      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	68db      	ldr	r3, [r3, #12]
 8003a64:	f003 0308 	and.w	r3, r3, #8
 8003a68:	2b08      	cmp	r3, #8
 8003a6a:	d11b      	bne.n	8003aa4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	681b      	ldr	r3, [r3, #0]
 8003a70:	f06f 0208 	mvn.w	r2, #8
 8003a74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	2204      	movs	r2, #4
 8003a7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	69db      	ldr	r3, [r3, #28]
 8003a82:	f003 0303 	and.w	r3, r3, #3
 8003a86:	2b00      	cmp	r3, #0
 8003a88:	d003      	beq.n	8003a92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003a8a:	6878      	ldr	r0, [r7, #4]
 8003a8c:	f000 fa23 	bl	8003ed6 <HAL_TIM_IC_CaptureCallback>
 8003a90:	e005      	b.n	8003a9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003a92:	6878      	ldr	r0, [r7, #4]
 8003a94:	f000 fa15 	bl	8003ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003a98:	6878      	ldr	r0, [r7, #4]
 8003a9a:	f000 fa26 	bl	8003eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	2200      	movs	r2, #0
 8003aa2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	691b      	ldr	r3, [r3, #16]
 8003aaa:	f003 0310 	and.w	r3, r3, #16
 8003aae:	2b10      	cmp	r3, #16
 8003ab0:	d122      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	68db      	ldr	r3, [r3, #12]
 8003ab8:	f003 0310 	and.w	r3, r3, #16
 8003abc:	2b10      	cmp	r3, #16
 8003abe:	d11b      	bne.n	8003af8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	f06f 0210 	mvn.w	r2, #16
 8003ac8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2208      	movs	r2, #8
 8003ace:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	69db      	ldr	r3, [r3, #28]
 8003ad6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ada:	2b00      	cmp	r3, #0
 8003adc:	d003      	beq.n	8003ae6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f000 f9f9 	bl	8003ed6 <HAL_TIM_IC_CaptureCallback>
 8003ae4:	e005      	b.n	8003af2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f000 f9eb 	bl	8003ec2 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003aec:	6878      	ldr	r0, [r7, #4]
 8003aee:	f000 f9fc 	bl	8003eea <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	2200      	movs	r2, #0
 8003af6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	681b      	ldr	r3, [r3, #0]
 8003afc:	691b      	ldr	r3, [r3, #16]
 8003afe:	f003 0301 	and.w	r3, r3, #1
 8003b02:	2b01      	cmp	r3, #1
 8003b04:	d10e      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	68db      	ldr	r3, [r3, #12]
 8003b0c:	f003 0301 	and.w	r3, r3, #1
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d107      	bne.n	8003b24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	681b      	ldr	r3, [r3, #0]
 8003b18:	f06f 0201 	mvn.w	r2, #1
 8003b1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f7fd f930 	bl	8000d84 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	681b      	ldr	r3, [r3, #0]
 8003b28:	691b      	ldr	r3, [r3, #16]
 8003b2a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b2e:	2b80      	cmp	r3, #128	; 0x80
 8003b30:	d10e      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	681b      	ldr	r3, [r3, #0]
 8003b36:	68db      	ldr	r3, [r3, #12]
 8003b38:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003b3c:	2b80      	cmp	r3, #128	; 0x80
 8003b3e:	d107      	bne.n	8003b50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003b48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003b4a:	6878      	ldr	r0, [r7, #4]
 8003b4c:	f000 fd26 	bl	800459c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b5a:	2b40      	cmp	r3, #64	; 0x40
 8003b5c:	d10e      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003b68:	2b40      	cmp	r3, #64	; 0x40
 8003b6a:	d107      	bne.n	8003b7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003b74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003b76:	6878      	ldr	r0, [r7, #4]
 8003b78:	f000 f9c1 	bl	8003efe <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	691b      	ldr	r3, [r3, #16]
 8003b82:	f003 0320 	and.w	r3, r3, #32
 8003b86:	2b20      	cmp	r3, #32
 8003b88:	d10e      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	68db      	ldr	r3, [r3, #12]
 8003b90:	f003 0320 	and.w	r3, r3, #32
 8003b94:	2b20      	cmp	r3, #32
 8003b96:	d107      	bne.n	8003ba8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f06f 0220 	mvn.w	r2, #32
 8003ba0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ba2:	6878      	ldr	r0, [r7, #4]
 8003ba4:	f000 fcf0 	bl	8004588 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ba8:	bf00      	nop
 8003baa:	3708      	adds	r7, #8
 8003bac:	46bd      	mov	sp, r7
 8003bae:	bd80      	pop	{r7, pc}

08003bb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003bb0:	b580      	push	{r7, lr}
 8003bb2:	b086      	sub	sp, #24
 8003bb4:	af00      	add	r7, sp, #0
 8003bb6:	60f8      	str	r0, [r7, #12]
 8003bb8:	60b9      	str	r1, [r7, #8]
 8003bba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003bbc:	2300      	movs	r3, #0
 8003bbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003bc6:	2b01      	cmp	r3, #1
 8003bc8:	d101      	bne.n	8003bce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003bca:	2302      	movs	r3, #2
 8003bcc:	e0ae      	b.n	8003d2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	2b0c      	cmp	r3, #12
 8003bda:	f200 809f 	bhi.w	8003d1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003bde:	a201      	add	r2, pc, #4	; (adr r2, 8003be4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003be0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003be4:	08003c19 	.word	0x08003c19
 8003be8:	08003d1d 	.word	0x08003d1d
 8003bec:	08003d1d 	.word	0x08003d1d
 8003bf0:	08003d1d 	.word	0x08003d1d
 8003bf4:	08003c59 	.word	0x08003c59
 8003bf8:	08003d1d 	.word	0x08003d1d
 8003bfc:	08003d1d 	.word	0x08003d1d
 8003c00:	08003d1d 	.word	0x08003d1d
 8003c04:	08003c9b 	.word	0x08003c9b
 8003c08:	08003d1d 	.word	0x08003d1d
 8003c0c:	08003d1d 	.word	0x08003d1d
 8003c10:	08003d1d 	.word	0x08003d1d
 8003c14:	08003cdb 	.word	0x08003cdb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	681b      	ldr	r3, [r3, #0]
 8003c1c:	68b9      	ldr	r1, [r7, #8]
 8003c1e:	4618      	mov	r0, r3
 8003c20:	f000 f9f8 	bl	8004014 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	699a      	ldr	r2, [r3, #24]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f042 0208 	orr.w	r2, r2, #8
 8003c32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	699a      	ldr	r2, [r3, #24]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f022 0204 	bic.w	r2, r2, #4
 8003c42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	6999      	ldr	r1, [r3, #24]
 8003c4a:	68bb      	ldr	r3, [r7, #8]
 8003c4c:	691a      	ldr	r2, [r3, #16]
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	430a      	orrs	r2, r1
 8003c54:	619a      	str	r2, [r3, #24]
      break;
 8003c56:	e064      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003c58:	68fb      	ldr	r3, [r7, #12]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	68b9      	ldr	r1, [r7, #8]
 8003c5e:	4618      	mov	r0, r3
 8003c60:	f000 fa3e 	bl	80040e0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003c64:	68fb      	ldr	r3, [r7, #12]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	699a      	ldr	r2, [r3, #24]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003c72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003c74:	68fb      	ldr	r3, [r7, #12]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	699a      	ldr	r2, [r3, #24]
 8003c7a:	68fb      	ldr	r3, [r7, #12]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003c82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	6999      	ldr	r1, [r3, #24]
 8003c8a:	68bb      	ldr	r3, [r7, #8]
 8003c8c:	691b      	ldr	r3, [r3, #16]
 8003c8e:	021a      	lsls	r2, r3, #8
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	430a      	orrs	r2, r1
 8003c96:	619a      	str	r2, [r3, #24]
      break;
 8003c98:	e043      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68b9      	ldr	r1, [r7, #8]
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	f000 fa89 	bl	80041b8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	69da      	ldr	r2, [r3, #28]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f042 0208 	orr.w	r2, r2, #8
 8003cb4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	69da      	ldr	r2, [r3, #28]
 8003cbc:	68fb      	ldr	r3, [r7, #12]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f022 0204 	bic.w	r2, r2, #4
 8003cc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	69d9      	ldr	r1, [r3, #28]
 8003ccc:	68bb      	ldr	r3, [r7, #8]
 8003cce:	691a      	ldr	r2, [r3, #16]
 8003cd0:	68fb      	ldr	r3, [r7, #12]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	430a      	orrs	r2, r1
 8003cd6:	61da      	str	r2, [r3, #28]
      break;
 8003cd8:	e023      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	68b9      	ldr	r1, [r7, #8]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f000 fad3 	bl	800428c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	69da      	ldr	r2, [r3, #28]
 8003cec:	68fb      	ldr	r3, [r7, #12]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003cf4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	69da      	ldr	r2, [r3, #28]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003d04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	69d9      	ldr	r1, [r3, #28]
 8003d0c:	68bb      	ldr	r3, [r7, #8]
 8003d0e:	691b      	ldr	r3, [r3, #16]
 8003d10:	021a      	lsls	r2, r3, #8
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	430a      	orrs	r2, r1
 8003d18:	61da      	str	r2, [r3, #28]
      break;
 8003d1a:	e002      	b.n	8003d22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003d1c:	2301      	movs	r3, #1
 8003d1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003d20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003d22:	68fb      	ldr	r3, [r7, #12]
 8003d24:	2200      	movs	r2, #0
 8003d26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003d2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	3718      	adds	r7, #24
 8003d30:	46bd      	mov	sp, r7
 8003d32:	bd80      	pop	{r7, pc}

08003d34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003d34:	b580      	push	{r7, lr}
 8003d36:	b084      	sub	sp, #16
 8003d38:	af00      	add	r7, sp, #0
 8003d3a:	6078      	str	r0, [r7, #4]
 8003d3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003d3e:	2300      	movs	r3, #0
 8003d40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003d48:	2b01      	cmp	r3, #1
 8003d4a:	d101      	bne.n	8003d50 <HAL_TIM_ConfigClockSource+0x1c>
 8003d4c:	2302      	movs	r3, #2
 8003d4e:	e0b4      	b.n	8003eba <HAL_TIM_ConfigClockSource+0x186>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	2201      	movs	r2, #1
 8003d54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	2202      	movs	r2, #2
 8003d5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	689b      	ldr	r3, [r3, #8]
 8003d66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003d68:	68bb      	ldr	r3, [r7, #8]
 8003d6a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8003d6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003d70:	68bb      	ldr	r3, [r7, #8]
 8003d72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003d76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	68ba      	ldr	r2, [r7, #8]
 8003d7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003d80:	683b      	ldr	r3, [r7, #0]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d88:	d03e      	beq.n	8003e08 <HAL_TIM_ConfigClockSource+0xd4>
 8003d8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003d8e:	f200 8087 	bhi.w	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003d92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d96:	f000 8086 	beq.w	8003ea6 <HAL_TIM_ConfigClockSource+0x172>
 8003d9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003d9e:	d87f      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003da0:	2b70      	cmp	r3, #112	; 0x70
 8003da2:	d01a      	beq.n	8003dda <HAL_TIM_ConfigClockSource+0xa6>
 8003da4:	2b70      	cmp	r3, #112	; 0x70
 8003da6:	d87b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003da8:	2b60      	cmp	r3, #96	; 0x60
 8003daa:	d050      	beq.n	8003e4e <HAL_TIM_ConfigClockSource+0x11a>
 8003dac:	2b60      	cmp	r3, #96	; 0x60
 8003dae:	d877      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003db0:	2b50      	cmp	r3, #80	; 0x50
 8003db2:	d03c      	beq.n	8003e2e <HAL_TIM_ConfigClockSource+0xfa>
 8003db4:	2b50      	cmp	r3, #80	; 0x50
 8003db6:	d873      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003db8:	2b40      	cmp	r3, #64	; 0x40
 8003dba:	d058      	beq.n	8003e6e <HAL_TIM_ConfigClockSource+0x13a>
 8003dbc:	2b40      	cmp	r3, #64	; 0x40
 8003dbe:	d86f      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc0:	2b30      	cmp	r3, #48	; 0x30
 8003dc2:	d064      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x15a>
 8003dc4:	2b30      	cmp	r3, #48	; 0x30
 8003dc6:	d86b      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dc8:	2b20      	cmp	r3, #32
 8003dca:	d060      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x15a>
 8003dcc:	2b20      	cmp	r3, #32
 8003dce:	d867      	bhi.n	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
 8003dd0:	2b00      	cmp	r3, #0
 8003dd2:	d05c      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x15a>
 8003dd4:	2b10      	cmp	r3, #16
 8003dd6:	d05a      	beq.n	8003e8e <HAL_TIM_ConfigClockSource+0x15a>
 8003dd8:	e062      	b.n	8003ea0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	6818      	ldr	r0, [r3, #0]
 8003dde:	683b      	ldr	r3, [r7, #0]
 8003de0:	6899      	ldr	r1, [r3, #8]
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	685a      	ldr	r2, [r3, #4]
 8003de6:	683b      	ldr	r3, [r7, #0]
 8003de8:	68db      	ldr	r3, [r3, #12]
 8003dea:	f000 fb19 	bl	8004420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003df6:	68bb      	ldr	r3, [r7, #8]
 8003df8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003dfc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	68ba      	ldr	r2, [r7, #8]
 8003e04:	609a      	str	r2, [r3, #8]
      break;
 8003e06:	e04f      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6818      	ldr	r0, [r3, #0]
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	6899      	ldr	r1, [r3, #8]
 8003e10:	683b      	ldr	r3, [r7, #0]
 8003e12:	685a      	ldr	r2, [r3, #4]
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	68db      	ldr	r3, [r3, #12]
 8003e18:	f000 fb02 	bl	8004420 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	689a      	ldr	r2, [r3, #8]
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003e2a:	609a      	str	r2, [r3, #8]
      break;
 8003e2c:	e03c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	6818      	ldr	r0, [r3, #0]
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6859      	ldr	r1, [r3, #4]
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	68db      	ldr	r3, [r3, #12]
 8003e3a:	461a      	mov	r2, r3
 8003e3c:	f000 fa76 	bl	800432c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	2150      	movs	r1, #80	; 0x50
 8003e46:	4618      	mov	r0, r3
 8003e48:	f000 facf 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8003e4c:	e02c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6818      	ldr	r0, [r3, #0]
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	6859      	ldr	r1, [r3, #4]
 8003e56:	683b      	ldr	r3, [r7, #0]
 8003e58:	68db      	ldr	r3, [r3, #12]
 8003e5a:	461a      	mov	r2, r3
 8003e5c:	f000 fa95 	bl	800438a <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	2160      	movs	r1, #96	; 0x60
 8003e66:	4618      	mov	r0, r3
 8003e68:	f000 fabf 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8003e6c:	e01c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6818      	ldr	r0, [r3, #0]
 8003e72:	683b      	ldr	r3, [r7, #0]
 8003e74:	6859      	ldr	r1, [r3, #4]
 8003e76:	683b      	ldr	r3, [r7, #0]
 8003e78:	68db      	ldr	r3, [r3, #12]
 8003e7a:	461a      	mov	r2, r3
 8003e7c:	f000 fa56 	bl	800432c <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	2140      	movs	r1, #64	; 0x40
 8003e86:	4618      	mov	r0, r3
 8003e88:	f000 faaf 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8003e8c:	e00c      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681a      	ldr	r2, [r3, #0]
 8003e92:	683b      	ldr	r3, [r7, #0]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4619      	mov	r1, r3
 8003e98:	4610      	mov	r0, r2
 8003e9a:	f000 faa6 	bl	80043ea <TIM_ITRx_SetConfig>
      break;
 8003e9e:	e003      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003ea0:	2301      	movs	r3, #1
 8003ea2:	73fb      	strb	r3, [r7, #15]
      break;
 8003ea4:	e000      	b.n	8003ea8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003ea6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2201      	movs	r2, #1
 8003eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	2200      	movs	r2, #0
 8003eb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003eba:	4618      	mov	r0, r3
 8003ebc:	3710      	adds	r7, #16
 8003ebe:	46bd      	mov	sp, r7
 8003ec0:	bd80      	pop	{r7, pc}

08003ec2 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ec2:	b480      	push	{r7}
 8003ec4:	b083      	sub	sp, #12
 8003ec6:	af00      	add	r7, sp, #0
 8003ec8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr

08003ed6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003ede:	bf00      	nop
 8003ee0:	370c      	adds	r7, #12
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr

08003eea <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003eea:	b480      	push	{r7}
 8003eec:	b083      	sub	sp, #12
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003ef2:	bf00      	nop
 8003ef4:	370c      	adds	r7, #12
 8003ef6:	46bd      	mov	sp, r7
 8003ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003efc:	4770      	bx	lr

08003efe <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003efe:	b480      	push	{r7}
 8003f00:	b083      	sub	sp, #12
 8003f02:	af00      	add	r7, sp, #0
 8003f04:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003f06:	bf00      	nop
 8003f08:	370c      	adds	r7, #12
 8003f0a:	46bd      	mov	sp, r7
 8003f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f10:	4770      	bx	lr
	...

08003f14 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8003f14:	b480      	push	{r7}
 8003f16:	b085      	sub	sp, #20
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
 8003f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	4a34      	ldr	r2, [pc, #208]	; (8003ff8 <TIM_Base_SetConfig+0xe4>)
 8003f28:	4293      	cmp	r3, r2
 8003f2a:	d00f      	beq.n	8003f4c <TIM_Base_SetConfig+0x38>
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f32:	d00b      	beq.n	8003f4c <TIM_Base_SetConfig+0x38>
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	4a31      	ldr	r2, [pc, #196]	; (8003ffc <TIM_Base_SetConfig+0xe8>)
 8003f38:	4293      	cmp	r3, r2
 8003f3a:	d007      	beq.n	8003f4c <TIM_Base_SetConfig+0x38>
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	4a30      	ldr	r2, [pc, #192]	; (8004000 <TIM_Base_SetConfig+0xec>)
 8003f40:	4293      	cmp	r3, r2
 8003f42:	d003      	beq.n	8003f4c <TIM_Base_SetConfig+0x38>
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	4a2f      	ldr	r2, [pc, #188]	; (8004004 <TIM_Base_SetConfig+0xf0>)
 8003f48:	4293      	cmp	r3, r2
 8003f4a:	d108      	bne.n	8003f5e <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003f52:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003f54:	683b      	ldr	r3, [r7, #0]
 8003f56:	685b      	ldr	r3, [r3, #4]
 8003f58:	68fa      	ldr	r2, [r7, #12]
 8003f5a:	4313      	orrs	r3, r2
 8003f5c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a25      	ldr	r2, [pc, #148]	; (8003ff8 <TIM_Base_SetConfig+0xe4>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d01b      	beq.n	8003f9e <TIM_Base_SetConfig+0x8a>
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003f6c:	d017      	beq.n	8003f9e <TIM_Base_SetConfig+0x8a>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	4a22      	ldr	r2, [pc, #136]	; (8003ffc <TIM_Base_SetConfig+0xe8>)
 8003f72:	4293      	cmp	r3, r2
 8003f74:	d013      	beq.n	8003f9e <TIM_Base_SetConfig+0x8a>
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	4a21      	ldr	r2, [pc, #132]	; (8004000 <TIM_Base_SetConfig+0xec>)
 8003f7a:	4293      	cmp	r3, r2
 8003f7c:	d00f      	beq.n	8003f9e <TIM_Base_SetConfig+0x8a>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	4a20      	ldr	r2, [pc, #128]	; (8004004 <TIM_Base_SetConfig+0xf0>)
 8003f82:	4293      	cmp	r3, r2
 8003f84:	d00b      	beq.n	8003f9e <TIM_Base_SetConfig+0x8a>
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	4a1f      	ldr	r2, [pc, #124]	; (8004008 <TIM_Base_SetConfig+0xf4>)
 8003f8a:	4293      	cmp	r3, r2
 8003f8c:	d007      	beq.n	8003f9e <TIM_Base_SetConfig+0x8a>
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	4a1e      	ldr	r2, [pc, #120]	; (800400c <TIM_Base_SetConfig+0xf8>)
 8003f92:	4293      	cmp	r3, r2
 8003f94:	d003      	beq.n	8003f9e <TIM_Base_SetConfig+0x8a>
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	4a1d      	ldr	r2, [pc, #116]	; (8004010 <TIM_Base_SetConfig+0xfc>)
 8003f9a:	4293      	cmp	r3, r2
 8003f9c:	d108      	bne.n	8003fb0 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003fa4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003fa6:	683b      	ldr	r3, [r7, #0]
 8003fa8:	68db      	ldr	r3, [r3, #12]
 8003faa:	68fa      	ldr	r2, [r7, #12]
 8003fac:	4313      	orrs	r3, r2
 8003fae:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8003fb6:	683b      	ldr	r3, [r7, #0]
 8003fb8:	695b      	ldr	r3, [r3, #20]
 8003fba:	4313      	orrs	r3, r2
 8003fbc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	68fa      	ldr	r2, [r7, #12]
 8003fc2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003fc4:	683b      	ldr	r3, [r7, #0]
 8003fc6:	689a      	ldr	r2, [r3, #8]
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003fcc:	683b      	ldr	r3, [r7, #0]
 8003fce:	681a      	ldr	r2, [r3, #0]
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	4a08      	ldr	r2, [pc, #32]	; (8003ff8 <TIM_Base_SetConfig+0xe4>)
 8003fd8:	4293      	cmp	r3, r2
 8003fda:	d103      	bne.n	8003fe4 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	691a      	ldr	r2, [r3, #16]
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	615a      	str	r2, [r3, #20]
}
 8003fea:	bf00      	nop
 8003fec:	3714      	adds	r7, #20
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ff4:	4770      	bx	lr
 8003ff6:	bf00      	nop
 8003ff8:	40010000 	.word	0x40010000
 8003ffc:	40000400 	.word	0x40000400
 8004000:	40000800 	.word	0x40000800
 8004004:	40000c00 	.word	0x40000c00
 8004008:	40014000 	.word	0x40014000
 800400c:	40014400 	.word	0x40014400
 8004010:	40014800 	.word	0x40014800

08004014 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004014:	b480      	push	{r7}
 8004016:	b087      	sub	sp, #28
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	6a1b      	ldr	r3, [r3, #32]
 8004022:	f023 0201 	bic.w	r2, r3, #1
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6a1b      	ldr	r3, [r3, #32]
 800402e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	685b      	ldr	r3, [r3, #4]
 8004034:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	699b      	ldr	r3, [r3, #24]
 800403a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004042:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0303 	bic.w	r3, r3, #3
 800404a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800404c:	683b      	ldr	r3, [r7, #0]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	68fa      	ldr	r2, [r7, #12]
 8004052:	4313      	orrs	r3, r2
 8004054:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004056:	697b      	ldr	r3, [r7, #20]
 8004058:	f023 0302 	bic.w	r3, r3, #2
 800405c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800405e:	683b      	ldr	r3, [r7, #0]
 8004060:	689b      	ldr	r3, [r3, #8]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	4313      	orrs	r3, r2
 8004066:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a1c      	ldr	r2, [pc, #112]	; (80040dc <TIM_OC1_SetConfig+0xc8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d10c      	bne.n	800408a <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004070:	697b      	ldr	r3, [r7, #20]
 8004072:	f023 0308 	bic.w	r3, r3, #8
 8004076:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004078:	683b      	ldr	r3, [r7, #0]
 800407a:	68db      	ldr	r3, [r3, #12]
 800407c:	697a      	ldr	r2, [r7, #20]
 800407e:	4313      	orrs	r3, r2
 8004080:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004082:	697b      	ldr	r3, [r7, #20]
 8004084:	f023 0304 	bic.w	r3, r3, #4
 8004088:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	4a13      	ldr	r2, [pc, #76]	; (80040dc <TIM_OC1_SetConfig+0xc8>)
 800408e:	4293      	cmp	r3, r2
 8004090:	d111      	bne.n	80040b6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8004092:	693b      	ldr	r3, [r7, #16]
 8004094:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004098:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800409a:	693b      	ldr	r3, [r7, #16]
 800409c:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80040a0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80040a2:	683b      	ldr	r3, [r7, #0]
 80040a4:	695b      	ldr	r3, [r3, #20]
 80040a6:	693a      	ldr	r2, [r7, #16]
 80040a8:	4313      	orrs	r3, r2
 80040aa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	699b      	ldr	r3, [r3, #24]
 80040b0:	693a      	ldr	r2, [r7, #16]
 80040b2:	4313      	orrs	r3, r2
 80040b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	693a      	ldr	r2, [r7, #16]
 80040ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	68fa      	ldr	r2, [r7, #12]
 80040c0:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	685a      	ldr	r2, [r3, #4]
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	697a      	ldr	r2, [r7, #20]
 80040ce:	621a      	str	r2, [r3, #32]
}
 80040d0:	bf00      	nop
 80040d2:	371c      	adds	r7, #28
 80040d4:	46bd      	mov	sp, r7
 80040d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040da:	4770      	bx	lr
 80040dc:	40010000 	.word	0x40010000

080040e0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	f023 0210 	bic.w	r2, r3, #16
 80040f2:	687b      	ldr	r3, [r7, #4]
 80040f4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040f6:	687b      	ldr	r3, [r7, #4]
 80040f8:	6a1b      	ldr	r3, [r3, #32]
 80040fa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004116:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	021b      	lsls	r3, r3, #8
 800411e:	68fa      	ldr	r2, [r7, #12]
 8004120:	4313      	orrs	r3, r2
 8004122:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004124:	697b      	ldr	r3, [r7, #20]
 8004126:	f023 0320 	bic.w	r3, r3, #32
 800412a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800412c:	683b      	ldr	r3, [r7, #0]
 800412e:	689b      	ldr	r3, [r3, #8]
 8004130:	011b      	lsls	r3, r3, #4
 8004132:	697a      	ldr	r2, [r7, #20]
 8004134:	4313      	orrs	r3, r2
 8004136:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	4a1e      	ldr	r2, [pc, #120]	; (80041b4 <TIM_OC2_SetConfig+0xd4>)
 800413c:	4293      	cmp	r3, r2
 800413e:	d10d      	bne.n	800415c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004140:	697b      	ldr	r3, [r7, #20]
 8004142:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004146:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	68db      	ldr	r3, [r3, #12]
 800414c:	011b      	lsls	r3, r3, #4
 800414e:	697a      	ldr	r2, [r7, #20]
 8004150:	4313      	orrs	r3, r2
 8004152:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004154:	697b      	ldr	r3, [r7, #20]
 8004156:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800415a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	4a15      	ldr	r2, [pc, #84]	; (80041b4 <TIM_OC2_SetConfig+0xd4>)
 8004160:	4293      	cmp	r3, r2
 8004162:	d113      	bne.n	800418c <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004164:	693b      	ldr	r3, [r7, #16]
 8004166:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800416a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800416c:	693b      	ldr	r3, [r7, #16]
 800416e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004172:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	695b      	ldr	r3, [r3, #20]
 8004178:	009b      	lsls	r3, r3, #2
 800417a:	693a      	ldr	r2, [r7, #16]
 800417c:	4313      	orrs	r3, r2
 800417e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	699b      	ldr	r3, [r3, #24]
 8004184:	009b      	lsls	r3, r3, #2
 8004186:	693a      	ldr	r2, [r7, #16]
 8004188:	4313      	orrs	r3, r2
 800418a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	693a      	ldr	r2, [r7, #16]
 8004190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	68fa      	ldr	r2, [r7, #12]
 8004196:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	685a      	ldr	r2, [r3, #4]
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	697a      	ldr	r2, [r7, #20]
 80041a4:	621a      	str	r2, [r3, #32]
}
 80041a6:	bf00      	nop
 80041a8:	371c      	adds	r7, #28
 80041aa:	46bd      	mov	sp, r7
 80041ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b0:	4770      	bx	lr
 80041b2:	bf00      	nop
 80041b4:	40010000 	.word	0x40010000

080041b8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b087      	sub	sp, #28
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]
 80041c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6a1b      	ldr	r3, [r3, #32]
 80041c6:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	685b      	ldr	r3, [r3, #4]
 80041d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	69db      	ldr	r3, [r3, #28]
 80041de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80041e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f023 0303 	bic.w	r3, r3, #3
 80041ee:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80041f0:	683b      	ldr	r3, [r7, #0]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	68fa      	ldr	r2, [r7, #12]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80041fa:	697b      	ldr	r3, [r7, #20]
 80041fc:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004200:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004202:	683b      	ldr	r3, [r7, #0]
 8004204:	689b      	ldr	r3, [r3, #8]
 8004206:	021b      	lsls	r3, r3, #8
 8004208:	697a      	ldr	r2, [r7, #20]
 800420a:	4313      	orrs	r3, r2
 800420c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a1d      	ldr	r2, [pc, #116]	; (8004288 <TIM_OC3_SetConfig+0xd0>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d10d      	bne.n	8004232 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004216:	697b      	ldr	r3, [r7, #20]
 8004218:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800421c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800421e:	683b      	ldr	r3, [r7, #0]
 8004220:	68db      	ldr	r3, [r3, #12]
 8004222:	021b      	lsls	r3, r3, #8
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	4313      	orrs	r3, r2
 8004228:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800422a:	697b      	ldr	r3, [r7, #20]
 800422c:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004230:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	4a14      	ldr	r2, [pc, #80]	; (8004288 <TIM_OC3_SetConfig+0xd0>)
 8004236:	4293      	cmp	r3, r2
 8004238:	d113      	bne.n	8004262 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800423a:	693b      	ldr	r3, [r7, #16]
 800423c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004240:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004242:	693b      	ldr	r3, [r7, #16]
 8004244:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004248:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	695b      	ldr	r3, [r3, #20]
 800424e:	011b      	lsls	r3, r3, #4
 8004250:	693a      	ldr	r2, [r7, #16]
 8004252:	4313      	orrs	r3, r2
 8004254:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004256:	683b      	ldr	r3, [r7, #0]
 8004258:	699b      	ldr	r3, [r3, #24]
 800425a:	011b      	lsls	r3, r3, #4
 800425c:	693a      	ldr	r2, [r7, #16]
 800425e:	4313      	orrs	r3, r2
 8004260:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	693a      	ldr	r2, [r7, #16]
 8004266:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800426e:	683b      	ldr	r3, [r7, #0]
 8004270:	685a      	ldr	r2, [r3, #4]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	697a      	ldr	r2, [r7, #20]
 800427a:	621a      	str	r2, [r3, #32]
}
 800427c:	bf00      	nop
 800427e:	371c      	adds	r7, #28
 8004280:	46bd      	mov	sp, r7
 8004282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004286:	4770      	bx	lr
 8004288:	40010000 	.word	0x40010000

0800428c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800428c:	b480      	push	{r7}
 800428e:	b087      	sub	sp, #28
 8004290:	af00      	add	r7, sp, #0
 8004292:	6078      	str	r0, [r7, #4]
 8004294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	6a1b      	ldr	r3, [r3, #32]
 800429a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6a1b      	ldr	r3, [r3, #32]
 80042a6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	685b      	ldr	r3, [r3, #4]
 80042ac:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	69db      	ldr	r3, [r3, #28]
 80042b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80042ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80042bc:	68fb      	ldr	r3, [r7, #12]
 80042be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80042c2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80042c4:	683b      	ldr	r3, [r7, #0]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	021b      	lsls	r3, r3, #8
 80042ca:	68fa      	ldr	r2, [r7, #12]
 80042cc:	4313      	orrs	r3, r2
 80042ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80042d6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80042d8:	683b      	ldr	r3, [r7, #0]
 80042da:	689b      	ldr	r3, [r3, #8]
 80042dc:	031b      	lsls	r3, r3, #12
 80042de:	693a      	ldr	r2, [r7, #16]
 80042e0:	4313      	orrs	r3, r2
 80042e2:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	4a10      	ldr	r2, [pc, #64]	; (8004328 <TIM_OC4_SetConfig+0x9c>)
 80042e8:	4293      	cmp	r3, r2
 80042ea:	d109      	bne.n	8004300 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80042f2:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	695b      	ldr	r3, [r3, #20]
 80042f8:	019b      	lsls	r3, r3, #6
 80042fa:	697a      	ldr	r2, [r7, #20]
 80042fc:	4313      	orrs	r3, r2
 80042fe:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	697a      	ldr	r2, [r7, #20]
 8004304:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	68fa      	ldr	r2, [r7, #12]
 800430a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	685a      	ldr	r2, [r3, #4]
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	693a      	ldr	r2, [r7, #16]
 8004318:	621a      	str	r2, [r3, #32]
}
 800431a:	bf00      	nop
 800431c:	371c      	adds	r7, #28
 800431e:	46bd      	mov	sp, r7
 8004320:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004324:	4770      	bx	lr
 8004326:	bf00      	nop
 8004328:	40010000 	.word	0x40010000

0800432c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800432c:	b480      	push	{r7}
 800432e:	b087      	sub	sp, #28
 8004330:	af00      	add	r7, sp, #0
 8004332:	60f8      	str	r0, [r7, #12]
 8004334:	60b9      	str	r1, [r7, #8]
 8004336:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	6a1b      	ldr	r3, [r3, #32]
 800433c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6a1b      	ldr	r3, [r3, #32]
 8004342:	f023 0201 	bic.w	r2, r3, #1
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	699b      	ldr	r3, [r3, #24]
 800434e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8004356:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	011b      	lsls	r3, r3, #4
 800435c:	693a      	ldr	r2, [r7, #16]
 800435e:	4313      	orrs	r3, r2
 8004360:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004362:	697b      	ldr	r3, [r7, #20]
 8004364:	f023 030a 	bic.w	r3, r3, #10
 8004368:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800436a:	697a      	ldr	r2, [r7, #20]
 800436c:	68bb      	ldr	r3, [r7, #8]
 800436e:	4313      	orrs	r3, r2
 8004370:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	693a      	ldr	r2, [r7, #16]
 8004376:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	697a      	ldr	r2, [r7, #20]
 800437c:	621a      	str	r2, [r3, #32]
}
 800437e:	bf00      	nop
 8004380:	371c      	adds	r7, #28
 8004382:	46bd      	mov	sp, r7
 8004384:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004388:	4770      	bx	lr

0800438a <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800438a:	b480      	push	{r7}
 800438c:	b087      	sub	sp, #28
 800438e:	af00      	add	r7, sp, #0
 8004390:	60f8      	str	r0, [r7, #12]
 8004392:	60b9      	str	r1, [r7, #8]
 8004394:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	6a1b      	ldr	r3, [r3, #32]
 800439a:	f023 0210 	bic.w	r2, r3, #16
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80043a2:	68fb      	ldr	r3, [r7, #12]
 80043a4:	699b      	ldr	r3, [r3, #24]
 80043a6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80043a8:	68fb      	ldr	r3, [r7, #12]
 80043aa:	6a1b      	ldr	r3, [r3, #32]
 80043ac:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80043ae:	697b      	ldr	r3, [r7, #20]
 80043b0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80043b4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	031b      	lsls	r3, r3, #12
 80043ba:	697a      	ldr	r2, [r7, #20]
 80043bc:	4313      	orrs	r3, r2
 80043be:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80043c0:	693b      	ldr	r3, [r7, #16]
 80043c2:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80043c6:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80043c8:	68bb      	ldr	r3, [r7, #8]
 80043ca:	011b      	lsls	r3, r3, #4
 80043cc:	693a      	ldr	r2, [r7, #16]
 80043ce:	4313      	orrs	r3, r2
 80043d0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	697a      	ldr	r2, [r7, #20]
 80043d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	693a      	ldr	r2, [r7, #16]
 80043dc:	621a      	str	r2, [r3, #32]
}
 80043de:	bf00      	nop
 80043e0:	371c      	adds	r7, #28
 80043e2:	46bd      	mov	sp, r7
 80043e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043e8:	4770      	bx	lr

080043ea <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80043ea:	b480      	push	{r7}
 80043ec:	b085      	sub	sp, #20
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
 80043f2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	689b      	ldr	r3, [r3, #8]
 80043f8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004400:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004402:	683a      	ldr	r2, [r7, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4313      	orrs	r3, r2
 8004408:	f043 0307 	orr.w	r3, r3, #7
 800440c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	68fa      	ldr	r2, [r7, #12]
 8004412:	609a      	str	r2, [r3, #8]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004420:	b480      	push	{r7}
 8004422:	b087      	sub	sp, #28
 8004424:	af00      	add	r7, sp, #0
 8004426:	60f8      	str	r0, [r7, #12]
 8004428:	60b9      	str	r1, [r7, #8]
 800442a:	607a      	str	r2, [r7, #4]
 800442c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800442e:	68fb      	ldr	r3, [r7, #12]
 8004430:	689b      	ldr	r3, [r3, #8]
 8004432:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004434:	697b      	ldr	r3, [r7, #20]
 8004436:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800443a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800443c:	683b      	ldr	r3, [r7, #0]
 800443e:	021a      	lsls	r2, r3, #8
 8004440:	687b      	ldr	r3, [r7, #4]
 8004442:	431a      	orrs	r2, r3
 8004444:	68bb      	ldr	r3, [r7, #8]
 8004446:	4313      	orrs	r3, r2
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	697a      	ldr	r2, [r7, #20]
 8004452:	609a      	str	r2, [r3, #8]
}
 8004454:	bf00      	nop
 8004456:	371c      	adds	r7, #28
 8004458:	46bd      	mov	sp, r7
 800445a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800445e:	4770      	bx	lr

08004460 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004460:	b480      	push	{r7}
 8004462:	b087      	sub	sp, #28
 8004464:	af00      	add	r7, sp, #0
 8004466:	60f8      	str	r0, [r7, #12]
 8004468:	60b9      	str	r1, [r7, #8]
 800446a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	f003 031f 	and.w	r3, r3, #31
 8004472:	2201      	movs	r2, #1
 8004474:	fa02 f303 	lsl.w	r3, r2, r3
 8004478:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	6a1a      	ldr	r2, [r3, #32]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	43db      	mvns	r3, r3
 8004482:	401a      	ands	r2, r3
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004488:	68fb      	ldr	r3, [r7, #12]
 800448a:	6a1a      	ldr	r2, [r3, #32]
 800448c:	68bb      	ldr	r3, [r7, #8]
 800448e:	f003 031f 	and.w	r3, r3, #31
 8004492:	6879      	ldr	r1, [r7, #4]
 8004494:	fa01 f303 	lsl.w	r3, r1, r3
 8004498:	431a      	orrs	r2, r3
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	621a      	str	r2, [r3, #32]
}
 800449e:	bf00      	nop
 80044a0:	371c      	adds	r7, #28
 80044a2:	46bd      	mov	sp, r7
 80044a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044a8:	4770      	bx	lr
	...

080044ac <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80044ac:	b480      	push	{r7}
 80044ae:	b085      	sub	sp, #20
 80044b0:	af00      	add	r7, sp, #0
 80044b2:	6078      	str	r0, [r7, #4]
 80044b4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80044bc:	2b01      	cmp	r3, #1
 80044be:	d101      	bne.n	80044c4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80044c0:	2302      	movs	r3, #2
 80044c2:	e050      	b.n	8004566 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	2201      	movs	r2, #1
 80044c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	2202      	movs	r2, #2
 80044d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	685b      	ldr	r3, [r3, #4]
 80044da:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	681b      	ldr	r3, [r3, #0]
 80044e0:	689b      	ldr	r3, [r3, #8]
 80044e2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80044e4:	68fb      	ldr	r3, [r7, #12]
 80044e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044ea:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80044ec:	683b      	ldr	r3, [r7, #0]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	68fa      	ldr	r2, [r7, #12]
 80044f2:	4313      	orrs	r3, r2
 80044f4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	68fa      	ldr	r2, [r7, #12]
 80044fc:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	4a1c      	ldr	r2, [pc, #112]	; (8004574 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d018      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d013      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	681b      	ldr	r3, [r3, #0]
 8004516:	4a18      	ldr	r2, [pc, #96]	; (8004578 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8004518:	4293      	cmp	r3, r2
 800451a:	d00e      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	681b      	ldr	r3, [r3, #0]
 8004520:	4a16      	ldr	r2, [pc, #88]	; (800457c <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8004522:	4293      	cmp	r3, r2
 8004524:	d009      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	4a15      	ldr	r2, [pc, #84]	; (8004580 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d004      	beq.n	800453a <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	681b      	ldr	r3, [r3, #0]
 8004534:	4a13      	ldr	r2, [pc, #76]	; (8004584 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d10c      	bne.n	8004554 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004540:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004542:	683b      	ldr	r3, [r7, #0]
 8004544:	685b      	ldr	r3, [r3, #4]
 8004546:	68ba      	ldr	r2, [r7, #8]
 8004548:	4313      	orrs	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	68ba      	ldr	r2, [r7, #8]
 8004552:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2201      	movs	r2, #1
 8004558:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2200      	movs	r2, #0
 8004560:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004564:	2300      	movs	r3, #0
}
 8004566:	4618      	mov	r0, r3
 8004568:	3714      	adds	r7, #20
 800456a:	46bd      	mov	sp, r7
 800456c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004570:	4770      	bx	lr
 8004572:	bf00      	nop
 8004574:	40010000 	.word	0x40010000
 8004578:	40000400 	.word	0x40000400
 800457c:	40000800 	.word	0x40000800
 8004580:	40000c00 	.word	0x40000c00
 8004584:	40014000 	.word	0x40014000

08004588 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004588:	b480      	push	{r7}
 800458a:	b083      	sub	sp, #12
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004590:	bf00      	nop
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800459c:	b480      	push	{r7}
 800459e:	b083      	sub	sp, #12
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80045a4:	bf00      	nop
 80045a6:	370c      	adds	r7, #12
 80045a8:	46bd      	mov	sp, r7
 80045aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ae:	4770      	bx	lr

080045b0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80045b0:	b580      	push	{r7, lr}
 80045b2:	b082      	sub	sp, #8
 80045b4:	af00      	add	r7, sp, #0
 80045b6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d101      	bne.n	80045c2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80045be:	2301      	movs	r3, #1
 80045c0:	e03f      	b.n	8004642 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045c8:	b2db      	uxtb	r3, r3
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d106      	bne.n	80045dc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	2200      	movs	r2, #0
 80045d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80045d6:	6878      	ldr	r0, [r7, #4]
 80045d8:	f7fd f89c 	bl	8001714 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2224      	movs	r2, #36	; 0x24
 80045e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	68da      	ldr	r2, [r3, #12]
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80045f2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80045f4:	6878      	ldr	r0, [r7, #4]
 80045f6:	f000 f829 	bl	800464c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	691a      	ldr	r2, [r3, #16]
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8004608:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	695a      	ldr	r2, [r3, #20]
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8004618:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	68da      	ldr	r2, [r3, #12]
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004628:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2200      	movs	r2, #0
 800462e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2220      	movs	r2, #32
 8004634:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	2220      	movs	r2, #32
 800463c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004640:	2300      	movs	r3, #0
}
 8004642:	4618      	mov	r0, r3
 8004644:	3708      	adds	r7, #8
 8004646:	46bd      	mov	sp, r7
 8004648:	bd80      	pop	{r7, pc}
	...

0800464c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800464c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004650:	b0c0      	sub	sp, #256	; 0x100
 8004652:	af00      	add	r7, sp, #0
 8004654:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004658:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	691b      	ldr	r3, [r3, #16]
 8004660:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8004664:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004668:	68d9      	ldr	r1, [r3, #12]
 800466a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800466e:	681a      	ldr	r2, [r3, #0]
 8004670:	ea40 0301 	orr.w	r3, r0, r1
 8004674:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004676:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800467a:	689a      	ldr	r2, [r3, #8]
 800467c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	431a      	orrs	r2, r3
 8004684:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004688:	695b      	ldr	r3, [r3, #20]
 800468a:	431a      	orrs	r2, r3
 800468c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004690:	69db      	ldr	r3, [r3, #28]
 8004692:	4313      	orrs	r3, r2
 8004694:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004698:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	68db      	ldr	r3, [r3, #12]
 80046a0:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80046a4:	f021 010c 	bic.w	r1, r1, #12
 80046a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ac:	681a      	ldr	r2, [r3, #0]
 80046ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80046b2:	430b      	orrs	r3, r1
 80046b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	695b      	ldr	r3, [r3, #20]
 80046be:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80046c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046c6:	6999      	ldr	r1, [r3, #24]
 80046c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046cc:	681a      	ldr	r2, [r3, #0]
 80046ce:	ea40 0301 	orr.w	r3, r0, r1
 80046d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046d8:	681a      	ldr	r2, [r3, #0]
 80046da:	4b8f      	ldr	r3, [pc, #572]	; (8004918 <UART_SetConfig+0x2cc>)
 80046dc:	429a      	cmp	r2, r3
 80046de:	d005      	beq.n	80046ec <UART_SetConfig+0xa0>
 80046e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80046e4:	681a      	ldr	r2, [r3, #0]
 80046e6:	4b8d      	ldr	r3, [pc, #564]	; (800491c <UART_SetConfig+0x2d0>)
 80046e8:	429a      	cmp	r2, r3
 80046ea:	d104      	bne.n	80046f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046ec:	f7fe fcf8 	bl	80030e0 <HAL_RCC_GetPCLK2Freq>
 80046f0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80046f4:	e003      	b.n	80046fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046f6:	f7fe fcdf 	bl	80030b8 <HAL_RCC_GetPCLK1Freq>
 80046fa:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80046fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004702:	69db      	ldr	r3, [r3, #28]
 8004704:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004708:	f040 810c 	bne.w	8004924 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800470c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004710:	2200      	movs	r2, #0
 8004712:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004716:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800471a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800471e:	4622      	mov	r2, r4
 8004720:	462b      	mov	r3, r5
 8004722:	1891      	adds	r1, r2, r2
 8004724:	65b9      	str	r1, [r7, #88]	; 0x58
 8004726:	415b      	adcs	r3, r3
 8004728:	65fb      	str	r3, [r7, #92]	; 0x5c
 800472a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800472e:	4621      	mov	r1, r4
 8004730:	eb12 0801 	adds.w	r8, r2, r1
 8004734:	4629      	mov	r1, r5
 8004736:	eb43 0901 	adc.w	r9, r3, r1
 800473a:	f04f 0200 	mov.w	r2, #0
 800473e:	f04f 0300 	mov.w	r3, #0
 8004742:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004746:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800474a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800474e:	4690      	mov	r8, r2
 8004750:	4699      	mov	r9, r3
 8004752:	4623      	mov	r3, r4
 8004754:	eb18 0303 	adds.w	r3, r8, r3
 8004758:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800475c:	462b      	mov	r3, r5
 800475e:	eb49 0303 	adc.w	r3, r9, r3
 8004762:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004766:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	2200      	movs	r2, #0
 800476e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004772:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8004776:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800477a:	460b      	mov	r3, r1
 800477c:	18db      	adds	r3, r3, r3
 800477e:	653b      	str	r3, [r7, #80]	; 0x50
 8004780:	4613      	mov	r3, r2
 8004782:	eb42 0303 	adc.w	r3, r2, r3
 8004786:	657b      	str	r3, [r7, #84]	; 0x54
 8004788:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800478c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8004790:	f7fb fd28 	bl	80001e4 <__aeabi_uldivmod>
 8004794:	4602      	mov	r2, r0
 8004796:	460b      	mov	r3, r1
 8004798:	4b61      	ldr	r3, [pc, #388]	; (8004920 <UART_SetConfig+0x2d4>)
 800479a:	fba3 2302 	umull	r2, r3, r3, r2
 800479e:	095b      	lsrs	r3, r3, #5
 80047a0:	011c      	lsls	r4, r3, #4
 80047a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80047a6:	2200      	movs	r2, #0
 80047a8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80047ac:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80047b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80047b4:	4642      	mov	r2, r8
 80047b6:	464b      	mov	r3, r9
 80047b8:	1891      	adds	r1, r2, r2
 80047ba:	64b9      	str	r1, [r7, #72]	; 0x48
 80047bc:	415b      	adcs	r3, r3
 80047be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80047c4:	4641      	mov	r1, r8
 80047c6:	eb12 0a01 	adds.w	sl, r2, r1
 80047ca:	4649      	mov	r1, r9
 80047cc:	eb43 0b01 	adc.w	fp, r3, r1
 80047d0:	f04f 0200 	mov.w	r2, #0
 80047d4:	f04f 0300 	mov.w	r3, #0
 80047d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e4:	4692      	mov	sl, r2
 80047e6:	469b      	mov	fp, r3
 80047e8:	4643      	mov	r3, r8
 80047ea:	eb1a 0303 	adds.w	r3, sl, r3
 80047ee:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80047f2:	464b      	mov	r3, r9
 80047f4:	eb4b 0303 	adc.w	r3, fp, r3
 80047f8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80047fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004800:	685b      	ldr	r3, [r3, #4]
 8004802:	2200      	movs	r2, #0
 8004804:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004808:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800480c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004810:	460b      	mov	r3, r1
 8004812:	18db      	adds	r3, r3, r3
 8004814:	643b      	str	r3, [r7, #64]	; 0x40
 8004816:	4613      	mov	r3, r2
 8004818:	eb42 0303 	adc.w	r3, r2, r3
 800481c:	647b      	str	r3, [r7, #68]	; 0x44
 800481e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004822:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004826:	f7fb fcdd 	bl	80001e4 <__aeabi_uldivmod>
 800482a:	4602      	mov	r2, r0
 800482c:	460b      	mov	r3, r1
 800482e:	4611      	mov	r1, r2
 8004830:	4b3b      	ldr	r3, [pc, #236]	; (8004920 <UART_SetConfig+0x2d4>)
 8004832:	fba3 2301 	umull	r2, r3, r3, r1
 8004836:	095b      	lsrs	r3, r3, #5
 8004838:	2264      	movs	r2, #100	; 0x64
 800483a:	fb02 f303 	mul.w	r3, r2, r3
 800483e:	1acb      	subs	r3, r1, r3
 8004840:	00db      	lsls	r3, r3, #3
 8004842:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8004846:	4b36      	ldr	r3, [pc, #216]	; (8004920 <UART_SetConfig+0x2d4>)
 8004848:	fba3 2302 	umull	r2, r3, r3, r2
 800484c:	095b      	lsrs	r3, r3, #5
 800484e:	005b      	lsls	r3, r3, #1
 8004850:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004854:	441c      	add	r4, r3
 8004856:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800485a:	2200      	movs	r2, #0
 800485c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004860:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8004864:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8004868:	4642      	mov	r2, r8
 800486a:	464b      	mov	r3, r9
 800486c:	1891      	adds	r1, r2, r2
 800486e:	63b9      	str	r1, [r7, #56]	; 0x38
 8004870:	415b      	adcs	r3, r3
 8004872:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004874:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004878:	4641      	mov	r1, r8
 800487a:	1851      	adds	r1, r2, r1
 800487c:	6339      	str	r1, [r7, #48]	; 0x30
 800487e:	4649      	mov	r1, r9
 8004880:	414b      	adcs	r3, r1
 8004882:	637b      	str	r3, [r7, #52]	; 0x34
 8004884:	f04f 0200 	mov.w	r2, #0
 8004888:	f04f 0300 	mov.w	r3, #0
 800488c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8004890:	4659      	mov	r1, fp
 8004892:	00cb      	lsls	r3, r1, #3
 8004894:	4651      	mov	r1, sl
 8004896:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489a:	4651      	mov	r1, sl
 800489c:	00ca      	lsls	r2, r1, #3
 800489e:	4610      	mov	r0, r2
 80048a0:	4619      	mov	r1, r3
 80048a2:	4603      	mov	r3, r0
 80048a4:	4642      	mov	r2, r8
 80048a6:	189b      	adds	r3, r3, r2
 80048a8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80048ac:	464b      	mov	r3, r9
 80048ae:	460a      	mov	r2, r1
 80048b0:	eb42 0303 	adc.w	r3, r2, r3
 80048b4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80048b8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80048bc:	685b      	ldr	r3, [r3, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80048c4:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80048c8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80048cc:	460b      	mov	r3, r1
 80048ce:	18db      	adds	r3, r3, r3
 80048d0:	62bb      	str	r3, [r7, #40]	; 0x28
 80048d2:	4613      	mov	r3, r2
 80048d4:	eb42 0303 	adc.w	r3, r2, r3
 80048d8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80048da:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80048de:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80048e2:	f7fb fc7f 	bl	80001e4 <__aeabi_uldivmod>
 80048e6:	4602      	mov	r2, r0
 80048e8:	460b      	mov	r3, r1
 80048ea:	4b0d      	ldr	r3, [pc, #52]	; (8004920 <UART_SetConfig+0x2d4>)
 80048ec:	fba3 1302 	umull	r1, r3, r3, r2
 80048f0:	095b      	lsrs	r3, r3, #5
 80048f2:	2164      	movs	r1, #100	; 0x64
 80048f4:	fb01 f303 	mul.w	r3, r1, r3
 80048f8:	1ad3      	subs	r3, r2, r3
 80048fa:	00db      	lsls	r3, r3, #3
 80048fc:	3332      	adds	r3, #50	; 0x32
 80048fe:	4a08      	ldr	r2, [pc, #32]	; (8004920 <UART_SetConfig+0x2d4>)
 8004900:	fba2 2303 	umull	r2, r3, r2, r3
 8004904:	095b      	lsrs	r3, r3, #5
 8004906:	f003 0207 	and.w	r2, r3, #7
 800490a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800490e:	681b      	ldr	r3, [r3, #0]
 8004910:	4422      	add	r2, r4
 8004912:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004914:	e105      	b.n	8004b22 <UART_SetConfig+0x4d6>
 8004916:	bf00      	nop
 8004918:	40011000 	.word	0x40011000
 800491c:	40011400 	.word	0x40011400
 8004920:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004924:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004928:	2200      	movs	r2, #0
 800492a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800492e:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8004932:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8004936:	4642      	mov	r2, r8
 8004938:	464b      	mov	r3, r9
 800493a:	1891      	adds	r1, r2, r2
 800493c:	6239      	str	r1, [r7, #32]
 800493e:	415b      	adcs	r3, r3
 8004940:	627b      	str	r3, [r7, #36]	; 0x24
 8004942:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004946:	4641      	mov	r1, r8
 8004948:	1854      	adds	r4, r2, r1
 800494a:	4649      	mov	r1, r9
 800494c:	eb43 0501 	adc.w	r5, r3, r1
 8004950:	f04f 0200 	mov.w	r2, #0
 8004954:	f04f 0300 	mov.w	r3, #0
 8004958:	00eb      	lsls	r3, r5, #3
 800495a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800495e:	00e2      	lsls	r2, r4, #3
 8004960:	4614      	mov	r4, r2
 8004962:	461d      	mov	r5, r3
 8004964:	4643      	mov	r3, r8
 8004966:	18e3      	adds	r3, r4, r3
 8004968:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800496c:	464b      	mov	r3, r9
 800496e:	eb45 0303 	adc.w	r3, r5, r3
 8004972:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004976:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800497a:	685b      	ldr	r3, [r3, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004982:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8004986:	f04f 0200 	mov.w	r2, #0
 800498a:	f04f 0300 	mov.w	r3, #0
 800498e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8004992:	4629      	mov	r1, r5
 8004994:	008b      	lsls	r3, r1, #2
 8004996:	4621      	mov	r1, r4
 8004998:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800499c:	4621      	mov	r1, r4
 800499e:	008a      	lsls	r2, r1, #2
 80049a0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80049a4:	f7fb fc1e 	bl	80001e4 <__aeabi_uldivmod>
 80049a8:	4602      	mov	r2, r0
 80049aa:	460b      	mov	r3, r1
 80049ac:	4b60      	ldr	r3, [pc, #384]	; (8004b30 <UART_SetConfig+0x4e4>)
 80049ae:	fba3 2302 	umull	r2, r3, r3, r2
 80049b2:	095b      	lsrs	r3, r3, #5
 80049b4:	011c      	lsls	r4, r3, #4
 80049b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80049ba:	2200      	movs	r2, #0
 80049bc:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80049c0:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80049c4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80049c8:	4642      	mov	r2, r8
 80049ca:	464b      	mov	r3, r9
 80049cc:	1891      	adds	r1, r2, r2
 80049ce:	61b9      	str	r1, [r7, #24]
 80049d0:	415b      	adcs	r3, r3
 80049d2:	61fb      	str	r3, [r7, #28]
 80049d4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049d8:	4641      	mov	r1, r8
 80049da:	1851      	adds	r1, r2, r1
 80049dc:	6139      	str	r1, [r7, #16]
 80049de:	4649      	mov	r1, r9
 80049e0:	414b      	adcs	r3, r1
 80049e2:	617b      	str	r3, [r7, #20]
 80049e4:	f04f 0200 	mov.w	r2, #0
 80049e8:	f04f 0300 	mov.w	r3, #0
 80049ec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f0:	4659      	mov	r1, fp
 80049f2:	00cb      	lsls	r3, r1, #3
 80049f4:	4651      	mov	r1, sl
 80049f6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fa:	4651      	mov	r1, sl
 80049fc:	00ca      	lsls	r2, r1, #3
 80049fe:	4610      	mov	r0, r2
 8004a00:	4619      	mov	r1, r3
 8004a02:	4603      	mov	r3, r0
 8004a04:	4642      	mov	r2, r8
 8004a06:	189b      	adds	r3, r3, r2
 8004a08:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8004a0c:	464b      	mov	r3, r9
 8004a0e:	460a      	mov	r2, r1
 8004a10:	eb42 0303 	adc.w	r3, r2, r3
 8004a14:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	2200      	movs	r2, #0
 8004a20:	67bb      	str	r3, [r7, #120]	; 0x78
 8004a22:	67fa      	str	r2, [r7, #124]	; 0x7c
 8004a24:	f04f 0200 	mov.w	r2, #0
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8004a30:	4649      	mov	r1, r9
 8004a32:	008b      	lsls	r3, r1, #2
 8004a34:	4641      	mov	r1, r8
 8004a36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3a:	4641      	mov	r1, r8
 8004a3c:	008a      	lsls	r2, r1, #2
 8004a3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8004a42:	f7fb fbcf 	bl	80001e4 <__aeabi_uldivmod>
 8004a46:	4602      	mov	r2, r0
 8004a48:	460b      	mov	r3, r1
 8004a4a:	4b39      	ldr	r3, [pc, #228]	; (8004b30 <UART_SetConfig+0x4e4>)
 8004a4c:	fba3 1302 	umull	r1, r3, r3, r2
 8004a50:	095b      	lsrs	r3, r3, #5
 8004a52:	2164      	movs	r1, #100	; 0x64
 8004a54:	fb01 f303 	mul.w	r3, r1, r3
 8004a58:	1ad3      	subs	r3, r2, r3
 8004a5a:	011b      	lsls	r3, r3, #4
 8004a5c:	3332      	adds	r3, #50	; 0x32
 8004a5e:	4a34      	ldr	r2, [pc, #208]	; (8004b30 <UART_SetConfig+0x4e4>)
 8004a60:	fba2 2303 	umull	r2, r3, r2, r3
 8004a64:	095b      	lsrs	r3, r3, #5
 8004a66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004a6a:	441c      	add	r4, r3
 8004a6c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8004a70:	2200      	movs	r2, #0
 8004a72:	673b      	str	r3, [r7, #112]	; 0x70
 8004a74:	677a      	str	r2, [r7, #116]	; 0x74
 8004a76:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8004a7a:	4642      	mov	r2, r8
 8004a7c:	464b      	mov	r3, r9
 8004a7e:	1891      	adds	r1, r2, r2
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	415b      	adcs	r3, r3
 8004a84:	60fb      	str	r3, [r7, #12]
 8004a86:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a8a:	4641      	mov	r1, r8
 8004a8c:	1851      	adds	r1, r2, r1
 8004a8e:	6039      	str	r1, [r7, #0]
 8004a90:	4649      	mov	r1, r9
 8004a92:	414b      	adcs	r3, r1
 8004a94:	607b      	str	r3, [r7, #4]
 8004a96:	f04f 0200 	mov.w	r2, #0
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aa2:	4659      	mov	r1, fp
 8004aa4:	00cb      	lsls	r3, r1, #3
 8004aa6:	4651      	mov	r1, sl
 8004aa8:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004aac:	4651      	mov	r1, sl
 8004aae:	00ca      	lsls	r2, r1, #3
 8004ab0:	4610      	mov	r0, r2
 8004ab2:	4619      	mov	r1, r3
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	4642      	mov	r2, r8
 8004ab8:	189b      	adds	r3, r3, r2
 8004aba:	66bb      	str	r3, [r7, #104]	; 0x68
 8004abc:	464b      	mov	r3, r9
 8004abe:	460a      	mov	r2, r1
 8004ac0:	eb42 0303 	adc.w	r3, r2, r3
 8004ac4:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004ac6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004aca:	685b      	ldr	r3, [r3, #4]
 8004acc:	2200      	movs	r2, #0
 8004ace:	663b      	str	r3, [r7, #96]	; 0x60
 8004ad0:	667a      	str	r2, [r7, #100]	; 0x64
 8004ad2:	f04f 0200 	mov.w	r2, #0
 8004ad6:	f04f 0300 	mov.w	r3, #0
 8004ada:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8004ade:	4649      	mov	r1, r9
 8004ae0:	008b      	lsls	r3, r1, #2
 8004ae2:	4641      	mov	r1, r8
 8004ae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004ae8:	4641      	mov	r1, r8
 8004aea:	008a      	lsls	r2, r1, #2
 8004aec:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8004af0:	f7fb fb78 	bl	80001e4 <__aeabi_uldivmod>
 8004af4:	4602      	mov	r2, r0
 8004af6:	460b      	mov	r3, r1
 8004af8:	4b0d      	ldr	r3, [pc, #52]	; (8004b30 <UART_SetConfig+0x4e4>)
 8004afa:	fba3 1302 	umull	r1, r3, r3, r2
 8004afe:	095b      	lsrs	r3, r3, #5
 8004b00:	2164      	movs	r1, #100	; 0x64
 8004b02:	fb01 f303 	mul.w	r3, r1, r3
 8004b06:	1ad3      	subs	r3, r2, r3
 8004b08:	011b      	lsls	r3, r3, #4
 8004b0a:	3332      	adds	r3, #50	; 0x32
 8004b0c:	4a08      	ldr	r2, [pc, #32]	; (8004b30 <UART_SetConfig+0x4e4>)
 8004b0e:	fba2 2303 	umull	r2, r3, r2, r3
 8004b12:	095b      	lsrs	r3, r3, #5
 8004b14:	f003 020f 	and.w	r2, r3, #15
 8004b18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	4422      	add	r2, r4
 8004b20:	609a      	str	r2, [r3, #8]
}
 8004b22:	bf00      	nop
 8004b24:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8004b28:	46bd      	mov	sp, r7
 8004b2a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b2e:	bf00      	nop
 8004b30:	51eb851f 	.word	0x51eb851f

08004b34 <__libc_init_array>:
 8004b34:	b570      	push	{r4, r5, r6, lr}
 8004b36:	4d0d      	ldr	r5, [pc, #52]	; (8004b6c <__libc_init_array+0x38>)
 8004b38:	4c0d      	ldr	r4, [pc, #52]	; (8004b70 <__libc_init_array+0x3c>)
 8004b3a:	1b64      	subs	r4, r4, r5
 8004b3c:	10a4      	asrs	r4, r4, #2
 8004b3e:	2600      	movs	r6, #0
 8004b40:	42a6      	cmp	r6, r4
 8004b42:	d109      	bne.n	8004b58 <__libc_init_array+0x24>
 8004b44:	4d0b      	ldr	r5, [pc, #44]	; (8004b74 <__libc_init_array+0x40>)
 8004b46:	4c0c      	ldr	r4, [pc, #48]	; (8004b78 <__libc_init_array+0x44>)
 8004b48:	f000 f820 	bl	8004b8c <_init>
 8004b4c:	1b64      	subs	r4, r4, r5
 8004b4e:	10a4      	asrs	r4, r4, #2
 8004b50:	2600      	movs	r6, #0
 8004b52:	42a6      	cmp	r6, r4
 8004b54:	d105      	bne.n	8004b62 <__libc_init_array+0x2e>
 8004b56:	bd70      	pop	{r4, r5, r6, pc}
 8004b58:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b5c:	4798      	blx	r3
 8004b5e:	3601      	adds	r6, #1
 8004b60:	e7ee      	b.n	8004b40 <__libc_init_array+0xc>
 8004b62:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b66:	4798      	blx	r3
 8004b68:	3601      	adds	r6, #1
 8004b6a:	e7f2      	b.n	8004b52 <__libc_init_array+0x1e>
 8004b6c:	08004bdc 	.word	0x08004bdc
 8004b70:	08004bdc 	.word	0x08004bdc
 8004b74:	08004bdc 	.word	0x08004bdc
 8004b78:	08004be0 	.word	0x08004be0

08004b7c <memset>:
 8004b7c:	4402      	add	r2, r0
 8004b7e:	4603      	mov	r3, r0
 8004b80:	4293      	cmp	r3, r2
 8004b82:	d100      	bne.n	8004b86 <memset+0xa>
 8004b84:	4770      	bx	lr
 8004b86:	f803 1b01 	strb.w	r1, [r3], #1
 8004b8a:	e7f9      	b.n	8004b80 <memset+0x4>

08004b8c <_init>:
 8004b8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b8e:	bf00      	nop
 8004b90:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b92:	bc08      	pop	{r3}
 8004b94:	469e      	mov	lr, r3
 8004b96:	4770      	bx	lr

08004b98 <_fini>:
 8004b98:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004b9a:	bf00      	nop
 8004b9c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004b9e:	bc08      	pop	{r3}
 8004ba0:	469e      	mov	lr, r3
 8004ba2:	4770      	bx	lr
