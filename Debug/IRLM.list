
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006c7c  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000dc  08006e10  08006e10  00016e10  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006eec  08006eec  0002144c  2**0
                  CONTENTS
  4 .ARM          00000008  08006eec  08006eec  00016eec  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08006ef4  08006ef4  0002144c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006ef4  08006ef4  00016ef4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08006ef8  08006ef8  00016ef8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000144c  20000000  08006efc  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000148f0  2000144c  08008348  0002144c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015d3c  08008348  00025d3c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002144c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00015ed9  00000000  00000000  0002147c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002b75  00000000  00000000  00037355  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001318  00000000  00000000  00039ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001258  00000000  00000000  0003b1e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018a97  00000000  00000000  0003c440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00016fbd  00000000  00000000  00054ed7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009cd18  00000000  00000000  0006be94  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  00108bac  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000052c0  00000000  00000000  00108bfc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	2000144c 	.word	0x2000144c
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08006df8 	.word	0x08006df8

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001450 	.word	0x20001450
 80001d0:	08006df8 	.word	0x08006df8

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <disable_button_EEPROM_writes>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

void disable_button_EEPROM_writes(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 80004ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004f2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 2, HAL_MAX_DELAY);
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	21a0      	movs	r1, #160	; 0xa0
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <disable_button_EEPROM_writes+0x28>)
 8000502:	f003 fa7f 	bl	8003a04 <HAL_I2C_Master_Transmit>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200014b0 	.word	0x200014b0

08000514 <initialize_buttons>:

// Initialize Buttons
void initialize_buttons(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	disable_button_EEPROM_writes();
 8000518:	f7ff ffe6 	bl	80004e8 <disable_button_EEPROM_writes>
	enable_all_buttons();
 800051c:	f000 f89a 	bl	8000654 <enable_all_buttons>
	update_buttons();
 8000520:	f000 f8c2 	bl	80006a8 <update_buttons>
	HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f002 fa8f 	bl	8002a48 <HAL_Delay>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <enable_button>:

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01e      	beq.n	800057e <enable_button+0x4e>
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b09      	cmp	r3, #9
 8000544:	d107      	bne.n	8000556 <enable_button+0x26>
		io_ctrl_2 &= ~(0b1);
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <enable_button+0x5c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <enable_button+0x5c>)
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e014      	b.n	8000580 <enable_button+0x50>
	} else if (button <= 8) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d811      	bhi.n	8000580 <enable_button+0x50>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	3b01      	subs	r3, #1
 8000560:	2201      	movs	r2, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	b25b      	sxtb	r3, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	b25a      	sxtb	r2, r3
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <enable_button+0x60>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4013      	ands	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <enable_button+0x60>)
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e000      	b.n	8000580 <enable_button+0x50>
	if (!button) return;
 800057e:	bf00      	nop
	}
}
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000001 	.word	0x20000001
 8000590:	20000000 	.word	0x20000000

08000594 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d01c      	beq.n	80005de <disable_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	d107      	bne.n	80005ba <disable_button+0x26>
		io_ctrl_2 |= 0b1;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <disable_button+0x58>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <disable_button+0x58>)
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e012      	b.n	80005e0 <disable_button+0x4c>
	} else if (button <= 8) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d80f      	bhi.n	80005e0 <disable_button+0x4c>
		io_ctrl_1 |= 0b1 << (button - 1);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <disable_button+0x5c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <disable_button+0x5c>)
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e000      	b.n	80005e0 <disable_button+0x4c>
	if (!button) return;
 80005de:	bf00      	nop
	}
}
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000001 	.word	0x20000001
 80005f0:	20000000 	.word	0x20000000

080005f4 <toggle_button>:

// Toggle a button (1 indexed, left-to-right, top-to-bottom)
void toggle_button(uint8_t button) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d01c      	beq.n	800063e <toggle_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b09      	cmp	r3, #9
 8000608:	d107      	bne.n	800061a <toggle_button+0x26>
		io_ctrl_2 ^= 0b1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <toggle_button+0x58>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <toggle_button+0x58>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e012      	b.n	8000640 <toggle_button+0x4c>
	} else if (button <= 8) {
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d80f      	bhi.n	8000640 <toggle_button+0x4c>
		io_ctrl_1 ^= 0b1 << (button - 1);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b01      	subs	r3, #1
 8000624:	2201      	movs	r2, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <toggle_button+0x5c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4053      	eors	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <toggle_button+0x5c>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e000      	b.n	8000640 <toggle_button+0x4c>
	if (!button) return;
 800063e:	bf00      	nop
	}
}
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000001 	.word	0x20000001
 8000650:	20000000 	.word	0x20000000

08000654 <enable_all_buttons>:

// Enable all of the buttons
void enable_all_buttons(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 800065a:	2301      	movs	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e006      	b.n	800066e <enable_all_buttons+0x1a>
		enable_button(i);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff64 	bl	8000530 <enable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b09      	cmp	r3, #9
 8000672:	d9f5      	bls.n	8000660 <enable_all_buttons+0xc>
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <disable_all_buttons>:

// Disable all of the buttons
void disable_all_buttons(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 8000684:	2301      	movs	r3, #1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	e006      	b.n	8000698 <disable_all_buttons+0x1a>
		disable_button(i);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff81 	bl	8000594 <disable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	3301      	adds	r3, #1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b09      	cmp	r3, #9
 800069c:	d9f5      	bls.n	800068a <disable_all_buttons+0xc>
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <update_buttons>:
		toggle_button(i);
	}
}

// Write the updated button configuration to the remote
void update_buttons(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 80006ae:	23f2      	movs	r3, #242	; 0xf2
 80006b0:	713b      	strb	r3, [r7, #4]
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <update_buttons+0x30>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	717b      	strb	r3, [r7, #5]
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <update_buttons+0x34>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2303      	movs	r3, #3
 80006c8:	21a0      	movs	r1, #160	; 0xa0
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <update_buttons+0x38>)
 80006cc:	f003 f99a 	bl	8003a04 <HAL_I2C_Master_Transmit>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000001 	.word	0x20000001
 80006e0:	200014b0 	.word	0x200014b0

080006e4 <poll_buttons>:

// Poll buttons, returns the first pressed button
// or zero if no button is pressed
uint8_t poll_buttons(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	C1_HIGH();
 80006e8:	2201      	movs	r2, #1
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	483c      	ldr	r0, [pc, #240]	; (80007e0 <poll_buttons+0xfc>)
 80006ee:	f003 f82b 	bl	8003748 <HAL_GPIO_WritePin>
	C2_HIGH();
 80006f2:	2201      	movs	r2, #1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	483a      	ldr	r0, [pc, #232]	; (80007e0 <poll_buttons+0xfc>)
 80006f8:	f003 f826 	bl	8003748 <HAL_GPIO_WritePin>
	C0_LOW();
 80006fc:	2200      	movs	r2, #0
 80006fe:	2140      	movs	r1, #64	; 0x40
 8000700:	4838      	ldr	r0, [pc, #224]	; (80007e4 <poll_buttons+0x100>)
 8000702:	f003 f821 	bl	8003748 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 1;
 8000706:	2108      	movs	r1, #8
 8000708:	4836      	ldr	r0, [pc, #216]	; (80007e4 <poll_buttons+0x100>)
 800070a:	f003 f805 	bl	8003718 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <poll_buttons+0x34>
 8000714:	2301      	movs	r3, #1
 8000716:	e061      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 4;
 8000718:	2120      	movs	r1, #32
 800071a:	4832      	ldr	r0, [pc, #200]	; (80007e4 <poll_buttons+0x100>)
 800071c:	f002 fffc 	bl	8003718 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <poll_buttons+0x46>
 8000726:	2304      	movs	r3, #4
 8000728:	e058      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 7;
 800072a:	2110      	movs	r1, #16
 800072c:	482d      	ldr	r0, [pc, #180]	; (80007e4 <poll_buttons+0x100>)
 800072e:	f002 fff3 	bl	8003718 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <poll_buttons+0x58>
 8000738:	2307      	movs	r3, #7
 800073a:	e04f      	b.n	80007dc <poll_buttons+0xf8>
	C0_HIGH();
 800073c:	2201      	movs	r2, #1
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	4828      	ldr	r0, [pc, #160]	; (80007e4 <poll_buttons+0x100>)
 8000742:	f003 f801 	bl	8003748 <HAL_GPIO_WritePin>

	C1_LOW();
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4825      	ldr	r0, [pc, #148]	; (80007e0 <poll_buttons+0xfc>)
 800074c:	f002 fffc 	bl	8003748 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 2;
 8000750:	2108      	movs	r1, #8
 8000752:	4824      	ldr	r0, [pc, #144]	; (80007e4 <poll_buttons+0x100>)
 8000754:	f002 ffe0 	bl	8003718 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <poll_buttons+0x7e>
 800075e:	2302      	movs	r3, #2
 8000760:	e03c      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 5;
 8000762:	2120      	movs	r1, #32
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <poll_buttons+0x100>)
 8000766:	f002 ffd7 	bl	8003718 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <poll_buttons+0x90>
 8000770:	2305      	movs	r3, #5
 8000772:	e033      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 8;
 8000774:	2110      	movs	r1, #16
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <poll_buttons+0x100>)
 8000778:	f002 ffce 	bl	8003718 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <poll_buttons+0xa2>
 8000782:	2308      	movs	r3, #8
 8000784:	e02a      	b.n	80007dc <poll_buttons+0xf8>
	C1_HIGH();
 8000786:	2201      	movs	r2, #1
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	4815      	ldr	r0, [pc, #84]	; (80007e0 <poll_buttons+0xfc>)
 800078c:	f002 ffdc 	bl	8003748 <HAL_GPIO_WritePin>

	C2_LOW();
 8000790:	2200      	movs	r2, #0
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <poll_buttons+0xfc>)
 8000796:	f002 ffd7 	bl	8003748 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 3;
 800079a:	2108      	movs	r1, #8
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <poll_buttons+0x100>)
 800079e:	f002 ffbb 	bl	8003718 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <poll_buttons+0xc8>
 80007a8:	2303      	movs	r3, #3
 80007aa:	e017      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 6;
 80007ac:	2120      	movs	r1, #32
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <poll_buttons+0x100>)
 80007b0:	f002 ffb2 	bl	8003718 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <poll_buttons+0xda>
 80007ba:	2306      	movs	r3, #6
 80007bc:	e00e      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 9;
 80007be:	2110      	movs	r1, #16
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <poll_buttons+0x100>)
 80007c2:	f002 ffa9 	bl	8003718 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <poll_buttons+0xec>
 80007cc:	2309      	movs	r3, #9
 80007ce:	e005      	b.n	80007dc <poll_buttons+0xf8>
	C2_HIGH();
 80007d0:	2201      	movs	r2, #1
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <poll_buttons+0xfc>)
 80007d6:	f002 ffb7 	bl	8003748 <HAL_GPIO_WritePin>

	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400

080007e8 <init_default_controller>:

extern UART_HandleTypeDef huart1;
extern Controller controller;
extern unsigned char UART1_rxBuffer[8192];

void init_default_controller() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
	char device_number[3];
	char cmd_number[3];
	for (uint8_t i = 0; i < 18; ++i) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e05f      	b.n	80008b4 <init_default_controller+0xcc>
		strcpy(controller.devices[i].name, "Device ");
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f241 022c 	movw	r2, #4140	; 0x102c
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000802:	4a33      	ldr	r2, [pc, #204]	; (80008d0 <init_default_controller+0xe8>)
 8000804:	4413      	add	r3, r2
 8000806:	4933      	ldr	r1, [pc, #204]	; (80008d4 <init_default_controller+0xec>)
 8000808:	461a      	mov	r2, r3
 800080a:	460b      	mov	r3, r1
 800080c:	cb03      	ldmia	r3!, {r0, r1}
 800080e:	6010      	str	r0, [r2, #0]
 8000810:	6051      	str	r1, [r2, #4]
		itoa(i + 1, device_number, 10);
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	3301      	adds	r3, #1
 8000816:	f107 0108 	add.w	r1, r7, #8
 800081a:	220a      	movs	r2, #10
 800081c:	4618      	mov	r0, r3
 800081e:	f006 fa87 	bl	8006d30 <itoa>
		strcat(controller.devices[i].name, device_number);
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	f241 022c 	movw	r2, #4140	; 0x102c
 8000828:	fb02 f303 	mul.w	r3, r2, r3
 800082c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <init_default_controller+0xe8>)
 8000832:	4413      	add	r3, r2
 8000834:	f107 0208 	add.w	r2, r7, #8
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f006 fa82 	bl	8006d44 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 8000840:	2300      	movs	r3, #0
 8000842:	73bb      	strb	r3, [r7, #14]
 8000844:	e030      	b.n	80008a8 <init_default_controller+0xc0>
			strcpy(controller.devices[i].commands[j].desc, "Command ");
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	7bba      	ldrb	r2, [r7, #14]
 800084a:	21ac      	movs	r1, #172	; 0xac
 800084c:	fb01 f202 	mul.w	r2, r1, r2
 8000850:	f241 012c 	movw	r1, #4140	; 0x102c
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	4413      	add	r3, r2
 800085a:	33a0      	adds	r3, #160	; 0xa0
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <init_default_controller+0xe8>)
 800085e:	4413      	add	r3, r2
 8000860:	491d      	ldr	r1, [pc, #116]	; (80008d8 <init_default_controller+0xf0>)
 8000862:	461a      	mov	r2, r3
 8000864:	460b      	mov	r3, r1
 8000866:	cb03      	ldmia	r3!, {r0, r1}
 8000868:	6010      	str	r0, [r2, #0]
 800086a:	6051      	str	r1, [r2, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	7213      	strb	r3, [r2, #8]
			itoa(j + 1, cmd_number, 10);
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	3301      	adds	r3, #1
 8000874:	1d39      	adds	r1, r7, #4
 8000876:	220a      	movs	r2, #10
 8000878:	4618      	mov	r0, r3
 800087a:	f006 fa59 	bl	8006d30 <itoa>
			strcat(controller.devices[i].commands[j].desc, cmd_number);
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	7bba      	ldrb	r2, [r7, #14]
 8000882:	21ac      	movs	r1, #172	; 0xac
 8000884:	fb01 f202 	mul.w	r2, r1, r2
 8000888:	f241 012c 	movw	r1, #4140	; 0x102c
 800088c:	fb01 f303 	mul.w	r3, r1, r3
 8000890:	4413      	add	r3, r2
 8000892:	33a0      	adds	r3, #160	; 0xa0
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <init_default_controller+0xe8>)
 8000896:	4413      	add	r3, r2
 8000898:	1d3a      	adds	r2, r7, #4
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f006 fa51 	bl	8006d44 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73bb      	strb	r3, [r7, #14]
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	2b17      	cmp	r3, #23
 80008ac:	d9cb      	bls.n	8000846 <init_default_controller+0x5e>
	for (uint8_t i = 0; i < 18; ++i) {
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	3301      	adds	r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	2b11      	cmp	r3, #17
 80008b8:	d99c      	bls.n	80007f4 <init_default_controller+0xc>
		}
	}
	controller.num_devices = 18;
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <init_default_controller+0xe8>)
 80008bc:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80008c0:	2212      	movs	r2, #18
 80008c2:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	2000170c 	.word	0x2000170c
 80008d4:	08006e18 	.word	0x08006e18
 80008d8:	08006e20 	.word	0x08006e20

080008dc <init_xbee_communication>:

void init_xbee_communication() {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	4903      	ldr	r1, [pc, #12]	; (80008f0 <init_xbee_communication+0x14>)
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <init_xbee_communication+0x18>)
 80008e6:	f005 ff04 	bl	80066f2 <HAL_UART_Receive_IT>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20013a28 	.word	0x20013a28
 80008f4:	200016c4 	.word	0x200016c4

080008f8 <Toggle>:
#include "main.h"
#include "stm32f4xx_hal.h"
extern uint16_t data[];
extern uint32_t dataLen;
extern TIM_HandleTypeDef htim3;
void Toggle(int on){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if(!on){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <Toggle+0x18>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000906:	2104      	movs	r1, #4
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <Toggle+0x28>)
 800090a:	f004 fbad 	bl	8005068 <HAL_TIM_PWM_Start>
	}
	else{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	}
}
 800090e:	e003      	b.n	8000918 <Toggle+0x20>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 8000910:	2104      	movs	r1, #4
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <Toggle+0x28>)
 8000914:	f004 fc58 	bl	80051c8 <HAL_TIM_PWM_Stop>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	200015ec 	.word	0x200015ec

08000924 <Delay>:
void Delay(uint16_t delay){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
	/*Adapted from:
	https://hackaday.com/2020/12/11/bare-metal-stm32-blinky-and-the-secret-of-delay-functions/#:~:text=On%20an%20STM32%20MCU%2C%20we,also%20have%20to%20use%20interrupts
	Example 4
	*/
	if(delay == 0)
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d01c      	beq.n	800096e <Delay+0x4a>
			return;
	TIM1->SR = 0;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <Delay+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
	TIM1->ARR = delay;
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <Delay+0x58>)
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CNT = 0;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Delay+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CR1 |= 1; //enables timer 1
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <Delay+0x58>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <Delay+0x58>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6013      	str	r3, [r2, #0]
	while(!(TIM1->SR & TIM_SR_UIF));
 8000952:	bf00      	nop
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <Delay+0x58>)
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f9      	beq.n	8000954 <Delay+0x30>
	TIM1->CR1 &= ~(1); //disables timer 1
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <Delay+0x58>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a05      	ldr	r2, [pc, #20]	; (800097c <Delay+0x58>)
 8000966:	f023 0301 	bic.w	r3, r3, #1
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	e000      	b.n	8000970 <Delay+0x4c>
			return;
 800096e:	bf00      	nop
}
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40010000 	.word	0x40010000

08000980 <GlobalTransmit>:
void GlobalTransmit(){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	int on = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
	for(size_t i = 0; i<dataLen;++i){
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	e010      	b.n	80009b2 <GlobalTransmit+0x32>
		Toggle(on);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ffb1 	bl	80008f8 <Toggle>
		on^=1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f083 0301 	eor.w	r3, r3, #1
 800099c:	607b      	str	r3, [r7, #4]
		Delay(data[i]);
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <GlobalTransmit+0x4c>)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ffbc 	bl	8000924 <Delay>
	for(size_t i = 0; i<dataLen;++i){
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <GlobalTransmit+0x50>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3e9      	bcc.n	8000990 <GlobalTransmit+0x10>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80009bc:	2104      	movs	r1, #4
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <GlobalTransmit+0x54>)
 80009c0:	f004 fc02 	bl	80051c8 <HAL_TIM_PWM_Stop>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20015a28 	.word	0x20015a28
 80009d0:	20000004 	.word	0x20000004
 80009d4:	200015ec 	.word	0x200015ec

080009d8 <DeviceTransmit>:
void DeviceTransmit(uint16_t data[dataLen]){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	int on =0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
	for(uint16_t *ptr = data; ptr<data+dataLen;++ptr){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	e00e      	b.n	8000a08 <DeviceTransmit+0x30>
		Toggle(on);
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff84 	bl	80008f8 <Toggle>
		on^=1;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f083 0301 	eor.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
		Delay(*ptr);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff91 	bl	8000924 <Delay>
	for(uint16_t *ptr = data; ptr<data+dataLen;++ptr){
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	3302      	adds	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <DeviceTransmit+0x50>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3e8      	bcc.n	80009ea <DeviceTransmit+0x12>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 8000a18:	2104      	movs	r1, #4
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <DeviceTransmit+0x54>)
 8000a1c:	f004 fbd4 	bl	80051c8 <HAL_TIM_PWM_Stop>
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	200015ec 	.word	0x200015ec

08000a30 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000a36:	f001 ff95 	bl	8002964 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000a3a:	f000 f88f 	bl	8000b5c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000a3e:	f000 fbb9 	bl	80011b4 <MX_GPIO_Init>
  MX_SPI2_Init();
 8000a42:	f000 f977 	bl	8000d34 <MX_SPI2_Init>
  MX_TIM2_Init();
 8000a46:	f000 f9fd 	bl	8000e44 <MX_TIM2_Init>
  MX_USART1_UART_Init();
 8000a4a:	f000 fb89 	bl	8001160 <MX_USART1_UART_Init>
  MX_I2C1_Init();
 8000a4e:	f000 f943 	bl	8000cd8 <MX_I2C1_Init>
  MX_TIM5_Init();
 8000a52:	f000 fb37 	bl	80010c4 <MX_TIM5_Init>
  MX_TIM1_Init();
 8000a56:	f000 f9a3 	bl	8000da0 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000a5a:	f000 fa63 	bl	8000f24 <MX_TIM3_Init>
  MX_TIM4_Init();
 8000a5e:	f000 fad7 	bl	8001010 <MX_TIM4_Init>
  MX_ADC1_Init();
 8000a62:	f000 f8e7 	bl	8000c34 <MX_ADC1_Init>
  /* USER CODE BEGIN 2 */
  init_default_controller(&controller);
 8000a66:	4835      	ldr	r0, [pc, #212]	; (8000b3c <main+0x10c>)
 8000a68:	f7ff febe 	bl	80007e8 <init_default_controller>
  init_displays();
 8000a6c:	f001 f98e 	bl	8001d8c <init_displays>
  HAL_TIM_Base_Start_IT(&htim5);
 8000a70:	4833      	ldr	r0, [pc, #204]	; (8000b40 <main+0x110>)
 8000a72:	f004 fa47 	bl	8004f04 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000a76:	2108      	movs	r1, #8
 8000a78:	4832      	ldr	r0, [pc, #200]	; (8000b44 <main+0x114>)
 8000a7a:	f004 faf5 	bl	8005068 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000a7e:	2104      	movs	r1, #4
 8000a80:	4831      	ldr	r0, [pc, #196]	; (8000b48 <main+0x118>)
 8000a82:	f004 faf1 	bl	8005068 <HAL_TIM_PWM_Start>
  //HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //Starts timer 2
  __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2,50);
 8000a86:	4b31      	ldr	r3, [pc, #196]	; (8000b4c <main+0x11c>)
 8000a88:	681b      	ldr	r3, [r3, #0]
 8000a8a:	2232      	movs	r2, #50	; 0x32
 8000a8c:	639a      	str	r2, [r3, #56]	; 0x38
  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 999); // Adjust LED Brightness
 8000a8e:	4b2e      	ldr	r3, [pc, #184]	; (8000b48 <main+0x118>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a96:	639a      	str	r2, [r3, #56]	; 0x38
  initialize_buttons();
 8000a98:	f7ff fd3c 	bl	8000514 <initialize_buttons>
  //update_buttons();
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  display_menu(main_menu, 1, 0);
 8000a9c:	2200      	movs	r2, #0
 8000a9e:	2101      	movs	r1, #1
 8000aa0:	2000      	movs	r0, #0
 8000aa2:	f000 fcc7 	bl	8001434 <display_menu>
  uint8_t pressed_button = 0;
 8000aa6:	2300      	movs	r3, #0
 8000aa8:	72fb      	strb	r3, [r7, #11]
  while (1)
  {
	  if (button) {
 8000aaa:	4b29      	ldr	r3, [pc, #164]	; (8000b50 <main+0x120>)
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	2b00      	cmp	r3, #0
 8000ab0:	d00b      	beq.n	8000aca <main+0x9a>
		  pressed_button = button;
 8000ab2:	4b27      	ldr	r3, [pc, #156]	; (8000b50 <main+0x120>)
 8000ab4:	781b      	ldrb	r3, [r3, #0]
 8000ab6:	72fb      	strb	r3, [r7, #11]
		  while(button);
 8000ab8:	bf00      	nop
 8000aba:	4b25      	ldr	r3, [pc, #148]	; (8000b50 <main+0x120>)
 8000abc:	781b      	ldrb	r3, [r3, #0]
 8000abe:	2b00      	cmp	r3, #0
 8000ac0:	d1fb      	bne.n	8000aba <main+0x8a>
		  button_pressed(pressed_button);
 8000ac2:	7afb      	ldrb	r3, [r7, #11]
 8000ac4:	4618      	mov	r0, r3
 8000ac6:	f000 fe87 	bl	80017d8 <button_pressed>
	  }
	  if(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13)){
 8000aca:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ace:	4821      	ldr	r0, [pc, #132]	; (8000b54 <main+0x124>)
 8000ad0:	f002 fe22 	bl	8003718 <HAL_GPIO_ReadPin>
 8000ad4:	4603      	mov	r3, r0
 8000ad6:	2b00      	cmp	r3, #0
 8000ad8:	d113      	bne.n	8000b02 <main+0xd2>
		  while(!HAL_GPIO_ReadPin(GPIOC,GPIO_PIN_13));
 8000ada:	bf00      	nop
 8000adc:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000ae0:	481c      	ldr	r0, [pc, #112]	; (8000b54 <main+0x124>)
 8000ae2:	f002 fe19 	bl	8003718 <HAL_GPIO_ReadPin>
 8000ae6:	4603      	mov	r3, r0
 8000ae8:	2b00      	cmp	r3, #0
 8000aea:	d0f7      	beq.n	8000adc <main+0xac>
		  for(int i =0; i<2;++i)
 8000aec:	2300      	movs	r3, #0
 8000aee:	60fb      	str	r3, [r7, #12]
 8000af0:	e004      	b.n	8000afc <main+0xcc>
			  GlobalTransmit();
 8000af2:	f7ff ff45 	bl	8000980 <GlobalTransmit>
		  for(int i =0; i<2;++i)
 8000af6:	68fb      	ldr	r3, [r7, #12]
 8000af8:	3301      	adds	r3, #1
 8000afa:	60fb      	str	r3, [r7, #12]
 8000afc:	68fb      	ldr	r3, [r7, #12]
 8000afe:	2b01      	cmp	r3, #1
 8000b00:	ddf7      	ble.n	8000af2 <main+0xc2>
	  }
	  //ADC testing code
	  uint32_t ADC_VAL;
	  HAL_ADC_Start(&hadc1);//start conversion
 8000b02:	4815      	ldr	r0, [pc, #84]	; (8000b58 <main+0x128>)
 8000b04:	f002 f808 	bl	8002b18 <HAL_ADC_Start>
	  HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF);//wait for conversion to finish
 8000b08:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000b0c:	4812      	ldr	r0, [pc, #72]	; (8000b58 <main+0x128>)
 8000b0e:	f002 f8b7 	bl	8002c80 <HAL_ADC_PollForConversion>
	  ADC_VAL = HAL_ADC_GetValue(&hadc1);//retrieve value
 8000b12:	4811      	ldr	r0, [pc, #68]	; (8000b58 <main+0x128>)
 8000b14:	f002 f93f 	bl	8002d96 <HAL_ADC_GetValue>
 8000b18:	6078      	str	r0, [r7, #4]

	  /*if(ADC_VAL < 500){
		  //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 200); // Adjust LED Brightness
	  }*/
	  if(ADC_VAL > 1900){
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	f240 726c 	movw	r2, #1900	; 0x76c
 8000b20:	4293      	cmp	r3, r2
 8000b22:	d905      	bls.n	8000b30 <main+0x100>
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1999); // Adjust LED Brightness
 8000b24:	4b08      	ldr	r3, [pc, #32]	; (8000b48 <main+0x118>)
 8000b26:	681b      	ldr	r3, [r3, #0]
 8000b28:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000b2c:	639a      	str	r2, [r3, #56]	; 0x38
 8000b2e:	e7bc      	b.n	8000aaa <main+0x7a>
	  }
	  else{
		  __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, ADC_VAL+20); // Adjust LED Brightness
 8000b30:	4b05      	ldr	r3, [pc, #20]	; (8000b48 <main+0x118>)
 8000b32:	681b      	ldr	r3, [r3, #0]
 8000b34:	687a      	ldr	r2, [r7, #4]
 8000b36:	3214      	adds	r2, #20
 8000b38:	639a      	str	r2, [r3, #56]	; 0x38
  {
 8000b3a:	e7b6      	b.n	8000aaa <main+0x7a>
 8000b3c:	2000170c 	.word	0x2000170c
 8000b40:	2000167c 	.word	0x2000167c
 8000b44:	200015a4 	.word	0x200015a4
 8000b48:	20001634 	.word	0x20001634
 8000b4c:	200015ec 	.word	0x200015ec
 8000b50:	20001709 	.word	0x20001709
 8000b54:	40020800 	.word	0x40020800
 8000b58:	20001468 	.word	0x20001468

08000b5c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000b5c:	b580      	push	{r7, lr}
 8000b5e:	b094      	sub	sp, #80	; 0x50
 8000b60:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000b62:	f107 0320 	add.w	r3, r7, #32
 8000b66:	2230      	movs	r2, #48	; 0x30
 8000b68:	2100      	movs	r1, #0
 8000b6a:	4618      	mov	r0, r3
 8000b6c:	f006 f8e2 	bl	8006d34 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000b70:	f107 030c 	add.w	r3, r7, #12
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b80:	2300      	movs	r3, #0
 8000b82:	60bb      	str	r3, [r7, #8]
 8000b84:	4b29      	ldr	r3, [pc, #164]	; (8000c2c <SystemClock_Config+0xd0>)
 8000b86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b88:	4a28      	ldr	r2, [pc, #160]	; (8000c2c <SystemClock_Config+0xd0>)
 8000b8a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b8e:	6413      	str	r3, [r2, #64]	; 0x40
 8000b90:	4b26      	ldr	r3, [pc, #152]	; (8000c2c <SystemClock_Config+0xd0>)
 8000b92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b94:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b98:	60bb      	str	r3, [r7, #8]
 8000b9a:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000b9c:	2300      	movs	r3, #0
 8000b9e:	607b      	str	r3, [r7, #4]
 8000ba0:	4b23      	ldr	r3, [pc, #140]	; (8000c30 <SystemClock_Config+0xd4>)
 8000ba2:	681b      	ldr	r3, [r3, #0]
 8000ba4:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ba8:	4a21      	ldr	r2, [pc, #132]	; (8000c30 <SystemClock_Config+0xd4>)
 8000baa:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000bae:	6013      	str	r3, [r2, #0]
 8000bb0:	4b1f      	ldr	r3, [pc, #124]	; (8000c30 <SystemClock_Config+0xd4>)
 8000bb2:	681b      	ldr	r3, [r3, #0]
 8000bb4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000bb8:	607b      	str	r3, [r7, #4]
 8000bba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bbc:	2302      	movs	r3, #2
 8000bbe:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bc0:	2301      	movs	r3, #1
 8000bc2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bc4:	2310      	movs	r3, #16
 8000bc6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bc8:	2302      	movs	r3, #2
 8000bca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000bcc:	2300      	movs	r3, #0
 8000bce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 8000bd0:	2310      	movs	r3, #16
 8000bd2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000bd4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000bd8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000bda:	2304      	movs	r3, #4
 8000bdc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 8000bde:	2307      	movs	r3, #7
 8000be0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000be2:	f107 0320 	add.w	r3, r7, #32
 8000be6:	4618      	mov	r0, r3
 8000be8:	f003 fa14 	bl	8004014 <HAL_RCC_OscConfig>
 8000bec:	4603      	mov	r3, r0
 8000bee:	2b00      	cmp	r3, #0
 8000bf0:	d001      	beq.n	8000bf6 <SystemClock_Config+0x9a>
  {
    Error_Handler();
 8000bf2:	f000 fc19 	bl	8001428 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000bf6:	230f      	movs	r3, #15
 8000bf8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000bfa:	2302      	movs	r3, #2
 8000bfc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000bfe:	2300      	movs	r3, #0
 8000c00:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c02:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000c06:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c0c:	f107 030c 	add.w	r3, r7, #12
 8000c10:	2102      	movs	r1, #2
 8000c12:	4618      	mov	r0, r3
 8000c14:	f003 fc76 	bl	8004504 <HAL_RCC_ClockConfig>
 8000c18:	4603      	mov	r3, r0
 8000c1a:	2b00      	cmp	r3, #0
 8000c1c:	d001      	beq.n	8000c22 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8000c1e:	f000 fc03 	bl	8001428 <Error_Handler>
  }
}
 8000c22:	bf00      	nop
 8000c24:	3750      	adds	r7, #80	; 0x50
 8000c26:	46bd      	mov	sp, r7
 8000c28:	bd80      	pop	{r7, pc}
 8000c2a:	bf00      	nop
 8000c2c:	40023800 	.word	0x40023800
 8000c30:	40007000 	.word	0x40007000

08000c34 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	b084      	sub	sp, #16
 8000c38:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000c3a:	463b      	mov	r3, r7
 8000c3c:	2200      	movs	r2, #0
 8000c3e:	601a      	str	r2, [r3, #0]
 8000c40:	605a      	str	r2, [r3, #4]
 8000c42:	609a      	str	r2, [r3, #8]
 8000c44:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000c46:	4b21      	ldr	r3, [pc, #132]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c48:	4a21      	ldr	r2, [pc, #132]	; (8000cd0 <MX_ADC1_Init+0x9c>)
 8000c4a:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000c4c:	4b1f      	ldr	r3, [pc, #124]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c4e:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000c52:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000c54:	4b1d      	ldr	r3, [pc, #116]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c56:	2200      	movs	r2, #0
 8000c58:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 8000c5a:	4b1c      	ldr	r3, [pc, #112]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c5c:	2200      	movs	r2, #0
 8000c5e:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000c60:	4b1a      	ldr	r3, [pc, #104]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c62:	2200      	movs	r2, #0
 8000c64:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000c66:	4b19      	ldr	r3, [pc, #100]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c68:	2200      	movs	r2, #0
 8000c6a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000c6e:	4b17      	ldr	r3, [pc, #92]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c70:	2200      	movs	r2, #0
 8000c72:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000c74:	4b15      	ldr	r3, [pc, #84]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c76:	4a17      	ldr	r2, [pc, #92]	; (8000cd4 <MX_ADC1_Init+0xa0>)
 8000c78:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000c7a:	4b14      	ldr	r3, [pc, #80]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c7c:	2200      	movs	r2, #0
 8000c7e:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 8000c80:	4b12      	ldr	r3, [pc, #72]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c82:	2201      	movs	r2, #1
 8000c84:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 8000c86:	4b11      	ldr	r3, [pc, #68]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000c8e:	4b0f      	ldr	r3, [pc, #60]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c90:	2201      	movs	r2, #1
 8000c92:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000c94:	480d      	ldr	r0, [pc, #52]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000c96:	f001 fefb 	bl	8002a90 <HAL_ADC_Init>
 8000c9a:	4603      	mov	r3, r0
 8000c9c:	2b00      	cmp	r3, #0
 8000c9e:	d001      	beq.n	8000ca4 <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000ca0:	f000 fbc2 	bl	8001428 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_4;
 8000ca4:	2304      	movs	r3, #4
 8000ca6:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8000ca8:	2301      	movs	r3, #1
 8000caa:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000cac:	2302      	movs	r3, #2
 8000cae:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000cb0:	463b      	mov	r3, r7
 8000cb2:	4619      	mov	r1, r3
 8000cb4:	4805      	ldr	r0, [pc, #20]	; (8000ccc <MX_ADC1_Init+0x98>)
 8000cb6:	f002 f87b 	bl	8002db0 <HAL_ADC_ConfigChannel>
 8000cba:	4603      	mov	r3, r0
 8000cbc:	2b00      	cmp	r3, #0
 8000cbe:	d001      	beq.n	8000cc4 <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000cc0:	f000 fbb2 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000cc4:	bf00      	nop
 8000cc6:	3710      	adds	r7, #16
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20001468 	.word	0x20001468
 8000cd0:	40012000 	.word	0x40012000
 8000cd4:	0f000001 	.word	0x0f000001

08000cd8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8000cd8:	b580      	push	{r7, lr}
 8000cda:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cdc:	4b12      	ldr	r3, [pc, #72]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cde:	4a13      	ldr	r2, [pc, #76]	; (8000d2c <MX_I2C1_Init+0x54>)
 8000ce0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8000ce2:	4b11      	ldr	r3, [pc, #68]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000ce4:	4a12      	ldr	r2, [pc, #72]	; (8000d30 <MX_I2C1_Init+0x58>)
 8000ce6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000ce8:	4b0f      	ldr	r3, [pc, #60]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cea:	2200      	movs	r2, #0
 8000cec:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8000cee:	4b0e      	ldr	r3, [pc, #56]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cf0:	2200      	movs	r2, #0
 8000cf2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cf4:	4b0c      	ldr	r3, [pc, #48]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cf6:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000cfa:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cfc:	4b0a      	ldr	r3, [pc, #40]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8000d02:	4b09      	ldr	r3, [pc, #36]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d08:	4b07      	ldr	r3, [pc, #28]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d0e:	4b06      	ldr	r3, [pc, #24]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d10:	2200      	movs	r2, #0
 8000d12:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000d14:	4804      	ldr	r0, [pc, #16]	; (8000d28 <MX_I2C1_Init+0x50>)
 8000d16:	f002 fd31 	bl	800377c <HAL_I2C_Init>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8000d20:	f000 fb82 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d24:	bf00      	nop
 8000d26:	bd80      	pop	{r7, pc}
 8000d28:	200014b0 	.word	0x200014b0
 8000d2c:	40005400 	.word	0x40005400
 8000d30:	000186a0 	.word	0x000186a0

08000d34 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000d38:	4b17      	ldr	r3, [pc, #92]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d3a:	4a18      	ldr	r2, [pc, #96]	; (8000d9c <MX_SPI2_Init+0x68>)
 8000d3c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8000d3e:	4b16      	ldr	r3, [pc, #88]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d40:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000d44:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000d46:	4b14      	ldr	r3, [pc, #80]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d48:	2200      	movs	r2, #0
 8000d4a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8000d4c:	4b12      	ldr	r3, [pc, #72]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d4e:	2200      	movs	r2, #0
 8000d50:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000d52:	4b11      	ldr	r3, [pc, #68]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d54:	2200      	movs	r2, #0
 8000d56:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000d58:	4b0f      	ldr	r3, [pc, #60]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d5a:	2200      	movs	r2, #0
 8000d5c:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000d5e:	4b0e      	ldr	r3, [pc, #56]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d60:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000d64:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000d66:	4b0c      	ldr	r3, [pc, #48]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d68:	2230      	movs	r2, #48	; 0x30
 8000d6a:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000d6c:	4b0a      	ldr	r3, [pc, #40]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8000d72:	4b09      	ldr	r3, [pc, #36]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d74:	2200      	movs	r2, #0
 8000d76:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000d78:	4b07      	ldr	r3, [pc, #28]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d7a:	2200      	movs	r2, #0
 8000d7c:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 8000d7e:	4b06      	ldr	r3, [pc, #24]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d80:	220a      	movs	r2, #10
 8000d82:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 8000d84:	4804      	ldr	r0, [pc, #16]	; (8000d98 <MX_SPI2_Init+0x64>)
 8000d86:	f003 fddd 	bl	8004944 <HAL_SPI_Init>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 8000d90:	f000 fb4a 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 8000d94:	bf00      	nop
 8000d96:	bd80      	pop	{r7, pc}
 8000d98:	20001504 	.word	0x20001504
 8000d9c:	40003800 	.word	0x40003800

08000da0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	b086      	sub	sp, #24
 8000da4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000da6:	f107 0308 	add.w	r3, r7, #8
 8000daa:	2200      	movs	r2, #0
 8000dac:	601a      	str	r2, [r3, #0]
 8000dae:	605a      	str	r2, [r3, #4]
 8000db0:	609a      	str	r2, [r3, #8]
 8000db2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000db4:	463b      	mov	r3, r7
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8000dbc:	4b1f      	ldr	r3, [pc, #124]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000dbe:	4a20      	ldr	r2, [pc, #128]	; (8000e40 <MX_TIM1_Init+0xa0>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 1869;
 8000dc2:	4b1e      	ldr	r3, [pc, #120]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000dc4:	f240 724d 	movw	r2, #1869	; 0x74d
 8000dc8:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dca:	4b1c      	ldr	r3, [pc, #112]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000dcc:	2200      	movs	r2, #0
 8000dce:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 65535;
 8000dd0:	4b1a      	ldr	r3, [pc, #104]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000dd2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8000dd6:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd8:	4b18      	ldr	r3, [pc, #96]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000dda:	2200      	movs	r2, #0
 8000ddc:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 8000dde:	4b17      	ldr	r3, [pc, #92]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000de0:	2200      	movs	r2, #0
 8000de2:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000de4:	4b15      	ldr	r3, [pc, #84]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000de6:	2200      	movs	r2, #0
 8000de8:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 8000dea:	4814      	ldr	r0, [pc, #80]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000dec:	f004 f83a 	bl	8004e64 <HAL_TIM_Base_Init>
 8000df0:	4603      	mov	r3, r0
 8000df2:	2b00      	cmp	r3, #0
 8000df4:	d001      	beq.n	8000dfa <MX_TIM1_Init+0x5a>
  {
    Error_Handler();
 8000df6:	f000 fb17 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000dfa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000dfe:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8000e00:	f107 0308 	add.w	r3, r7, #8
 8000e04:	4619      	mov	r1, r3
 8000e06:	480d      	ldr	r0, [pc, #52]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000e08:	f004 feca 	bl	8005ba0 <HAL_TIM_ConfigClockSource>
 8000e0c:	4603      	mov	r3, r0
 8000e0e:	2b00      	cmp	r3, #0
 8000e10:	d001      	beq.n	8000e16 <MX_TIM1_Init+0x76>
  {
    Error_Handler();
 8000e12:	f000 fb09 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e16:	2300      	movs	r3, #0
 8000e18:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e1a:	2300      	movs	r3, #0
 8000e1c:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8000e1e:	463b      	mov	r3, r7
 8000e20:	4619      	mov	r1, r3
 8000e22:	4806      	ldr	r0, [pc, #24]	; (8000e3c <MX_TIM1_Init+0x9c>)
 8000e24:	f005 fb96 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8000e28:	4603      	mov	r3, r0
 8000e2a:	2b00      	cmp	r3, #0
 8000e2c:	d001      	beq.n	8000e32 <MX_TIM1_Init+0x92>
  {
    Error_Handler();
 8000e2e:	f000 fafb 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8000e32:	bf00      	nop
 8000e34:	3718      	adds	r7, #24
 8000e36:	46bd      	mov	sp, r7
 8000e38:	bd80      	pop	{r7, pc}
 8000e3a:	bf00      	nop
 8000e3c:	2000155c 	.word	0x2000155c
 8000e40:	40010000 	.word	0x40010000

08000e44 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e44:	b580      	push	{r7, lr}
 8000e46:	b08a      	sub	sp, #40	; 0x28
 8000e48:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e4a:	f107 0318 	add.w	r3, r7, #24
 8000e4e:	2200      	movs	r2, #0
 8000e50:	601a      	str	r2, [r3, #0]
 8000e52:	605a      	str	r2, [r3, #4]
 8000e54:	609a      	str	r2, [r3, #8]
 8000e56:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e58:	f107 0310 	add.w	r3, r7, #16
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	601a      	str	r2, [r3, #0]
 8000e60:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8000e62:	463b      	mov	r3, r7
 8000e64:	2200      	movs	r2, #0
 8000e66:	601a      	str	r2, [r3, #0]
 8000e68:	605a      	str	r2, [r3, #4]
 8000e6a:	609a      	str	r2, [r3, #8]
 8000e6c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e6e:	4b2c      	ldr	r3, [pc, #176]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000e70:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8000e74:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 1869;
 8000e76:	4b2a      	ldr	r3, [pc, #168]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000e78:	f240 724d 	movw	r2, #1869	; 0x74d
 8000e7c:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000e7e:	4b28      	ldr	r3, [pc, #160]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000e80:	2200      	movs	r2, #0
 8000e82:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 999;
 8000e84:	4b26      	ldr	r3, [pc, #152]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000e86:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000e8a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000e8c:	4b24      	ldr	r3, [pc, #144]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000e8e:	2200      	movs	r2, #0
 8000e90:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000e92:	4b23      	ldr	r3, [pc, #140]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000e94:	2200      	movs	r2, #0
 8000e96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000e98:	4821      	ldr	r0, [pc, #132]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000e9a:	f003 ffe3 	bl	8004e64 <HAL_TIM_Base_Init>
 8000e9e:	4603      	mov	r3, r0
 8000ea0:	2b00      	cmp	r3, #0
 8000ea2:	d001      	beq.n	8000ea8 <MX_TIM2_Init+0x64>
  {
    Error_Handler();
 8000ea4:	f000 fac0 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ea8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000eac:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000eae:	f107 0318 	add.w	r3, r7, #24
 8000eb2:	4619      	mov	r1, r3
 8000eb4:	481a      	ldr	r0, [pc, #104]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000eb6:	f004 fe73 	bl	8005ba0 <HAL_TIM_ConfigClockSource>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_TIM2_Init+0x80>
  {
    Error_Handler();
 8000ec0:	f000 fab2 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8000ec4:	4816      	ldr	r0, [pc, #88]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000ec6:	f004 f9e3 	bl	8005290 <HAL_TIM_IC_Init>
 8000eca:	4603      	mov	r3, r0
 8000ecc:	2b00      	cmp	r3, #0
 8000ece:	d001      	beq.n	8000ed4 <MX_TIM2_Init+0x90>
  {
    Error_Handler();
 8000ed0:	f000 faaa 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ed4:	2300      	movs	r3, #0
 8000ed6:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ed8:	2300      	movs	r3, #0
 8000eda:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000edc:	f107 0310 	add.w	r3, r7, #16
 8000ee0:	4619      	mov	r1, r3
 8000ee2:	480f      	ldr	r0, [pc, #60]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000ee4:	f005 fb36 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8000ee8:	4603      	mov	r3, r0
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <MX_TIM2_Init+0xae>
  {
    Error_Handler();
 8000eee:	f000 fa9b 	bl	8001428 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8000ef2:	230a      	movs	r3, #10
 8000ef4:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8000ef6:	2301      	movs	r3, #1
 8000ef8:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8000efa:	2300      	movs	r3, #0
 8000efc:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8000efe:	2300      	movs	r3, #0
 8000f00:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8000f02:	463b      	mov	r3, r7
 8000f04:	2200      	movs	r2, #0
 8000f06:	4619      	mov	r1, r3
 8000f08:	4805      	ldr	r0, [pc, #20]	; (8000f20 <MX_TIM2_Init+0xdc>)
 8000f0a:	f004 fceb 	bl	80058e4 <HAL_TIM_IC_ConfigChannel>
 8000f0e:	4603      	mov	r3, r0
 8000f10:	2b00      	cmp	r3, #0
 8000f12:	d001      	beq.n	8000f18 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 8000f14:	f000 fa88 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000f18:	bf00      	nop
 8000f1a:	3728      	adds	r7, #40	; 0x28
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	200015a4 	.word	0x200015a4

08000f24 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b08e      	sub	sp, #56	; 0x38
 8000f28:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f2a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f38:	f107 0320 	add.w	r3, r7, #32
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	601a      	str	r2, [r3, #0]
 8000f40:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f42:	1d3b      	adds	r3, r7, #4
 8000f44:	2200      	movs	r2, #0
 8000f46:	601a      	str	r2, [r3, #0]
 8000f48:	605a      	str	r2, [r3, #4]
 8000f4a:	609a      	str	r2, [r3, #8]
 8000f4c:	60da      	str	r2, [r3, #12]
 8000f4e:	611a      	str	r2, [r3, #16]
 8000f50:	615a      	str	r2, [r3, #20]
 8000f52:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f54:	4b2c      	ldr	r3, [pc, #176]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f56:	4a2d      	ldr	r2, [pc, #180]	; (800100c <MX_TIM3_Init+0xe8>)
 8000f58:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 21;
 8000f5a:	4b2b      	ldr	r3, [pc, #172]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f5c:	2215      	movs	r2, #21
 8000f5e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f60:	4b29      	ldr	r3, [pc, #164]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f62:	2200      	movs	r2, #0
 8000f64:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 100;
 8000f66:	4b28      	ldr	r3, [pc, #160]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f68:	2264      	movs	r2, #100	; 0x64
 8000f6a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f6c:	4b26      	ldr	r3, [pc, #152]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f6e:	2200      	movs	r2, #0
 8000f70:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f72:	4b25      	ldr	r3, [pc, #148]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000f78:	4823      	ldr	r0, [pc, #140]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f7a:	f003 ff73 	bl	8004e64 <HAL_TIM_Base_Init>
 8000f7e:	4603      	mov	r3, r0
 8000f80:	2b00      	cmp	r3, #0
 8000f82:	d001      	beq.n	8000f88 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000f84:	f000 fa50 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f88:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000f8c:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000f8e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8000f92:	4619      	mov	r1, r3
 8000f94:	481c      	ldr	r0, [pc, #112]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000f96:	f004 fe03 	bl	8005ba0 <HAL_TIM_ConfigClockSource>
 8000f9a:	4603      	mov	r3, r0
 8000f9c:	2b00      	cmp	r3, #0
 8000f9e:	d001      	beq.n	8000fa4 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000fa0:	f000 fa42 	bl	8001428 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fa4:	4818      	ldr	r0, [pc, #96]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000fa6:	f004 f80f 	bl	8004fc8 <HAL_TIM_PWM_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000fb0:	f000 fa3a 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fb4:	2300      	movs	r3, #0
 8000fb6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fb8:	2300      	movs	r3, #0
 8000fba:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fbc:	f107 0320 	add.w	r3, r7, #32
 8000fc0:	4619      	mov	r1, r3
 8000fc2:	4811      	ldr	r0, [pc, #68]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000fc4:	f005 fac6 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d001      	beq.n	8000fd2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000fce:	f000 fa2b 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000fd2:	2360      	movs	r3, #96	; 0x60
 8000fd4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fd6:	2300      	movs	r3, #0
 8000fd8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fda:	2300      	movs	r3, #0
 8000fdc:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fde:	2300      	movs	r3, #0
 8000fe0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000fe2:	1d3b      	adds	r3, r7, #4
 8000fe4:	2204      	movs	r2, #4
 8000fe6:	4619      	mov	r1, r3
 8000fe8:	4807      	ldr	r0, [pc, #28]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000fea:	f004 fd17 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 8000fee:	4603      	mov	r3, r0
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d001      	beq.n	8000ff8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000ff4:	f000 fa18 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000ff8:	4803      	ldr	r0, [pc, #12]	; (8001008 <MX_TIM3_Init+0xe4>)
 8000ffa:	f001 fb4f 	bl	800269c <HAL_TIM_MspPostInit>

}
 8000ffe:	bf00      	nop
 8001000:	3738      	adds	r7, #56	; 0x38
 8001002:	46bd      	mov	sp, r7
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	200015ec 	.word	0x200015ec
 800100c:	40000400 	.word	0x40000400

08001010 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b08a      	sub	sp, #40	; 0x28
 8001014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001016:	f107 0320 	add.w	r3, r7, #32
 800101a:	2200      	movs	r2, #0
 800101c:	601a      	str	r2, [r3, #0]
 800101e:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001020:	1d3b      	adds	r3, r7, #4
 8001022:	2200      	movs	r2, #0
 8001024:	601a      	str	r2, [r3, #0]
 8001026:	605a      	str	r2, [r3, #4]
 8001028:	609a      	str	r2, [r3, #8]
 800102a:	60da      	str	r2, [r3, #12]
 800102c:	611a      	str	r2, [r3, #16]
 800102e:	615a      	str	r2, [r3, #20]
 8001030:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8001032:	4b22      	ldr	r3, [pc, #136]	; (80010bc <MX_TIM4_Init+0xac>)
 8001034:	4a22      	ldr	r2, [pc, #136]	; (80010c0 <MX_TIM4_Init+0xb0>)
 8001036:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 511;
 8001038:	4b20      	ldr	r3, [pc, #128]	; (80010bc <MX_TIM4_Init+0xac>)
 800103a:	f240 12ff 	movw	r2, #511	; 0x1ff
 800103e:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001040:	4b1e      	ldr	r3, [pc, #120]	; (80010bc <MX_TIM4_Init+0xac>)
 8001042:	2200      	movs	r2, #0
 8001044:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1999;
 8001046:	4b1d      	ldr	r3, [pc, #116]	; (80010bc <MX_TIM4_Init+0xac>)
 8001048:	f240 72cf 	movw	r2, #1999	; 0x7cf
 800104c:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800104e:	4b1b      	ldr	r3, [pc, #108]	; (80010bc <MX_TIM4_Init+0xac>)
 8001050:	2200      	movs	r2, #0
 8001052:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001054:	4b19      	ldr	r3, [pc, #100]	; (80010bc <MX_TIM4_Init+0xac>)
 8001056:	2200      	movs	r2, #0
 8001058:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 800105a:	4818      	ldr	r0, [pc, #96]	; (80010bc <MX_TIM4_Init+0xac>)
 800105c:	f003 ffb4 	bl	8004fc8 <HAL_TIM_PWM_Init>
 8001060:	4603      	mov	r3, r0
 8001062:	2b00      	cmp	r3, #0
 8001064:	d001      	beq.n	800106a <MX_TIM4_Init+0x5a>
  {
    Error_Handler();
 8001066:	f000 f9df 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800106a:	2300      	movs	r3, #0
 800106c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800106e:	2300      	movs	r3, #0
 8001070:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001072:	f107 0320 	add.w	r3, r7, #32
 8001076:	4619      	mov	r1, r3
 8001078:	4810      	ldr	r0, [pc, #64]	; (80010bc <MX_TIM4_Init+0xac>)
 800107a:	f005 fa6b 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d001      	beq.n	8001088 <MX_TIM4_Init+0x78>
  {
    Error_Handler();
 8001084:	f000 f9d0 	bl	8001428 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM2;
 8001088:	2370      	movs	r3, #112	; 0x70
 800108a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800108c:	2300      	movs	r3, #0
 800108e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001090:	2300      	movs	r3, #0
 8001092:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001094:	2300      	movs	r3, #0
 8001096:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001098:	1d3b      	adds	r3, r7, #4
 800109a:	2204      	movs	r2, #4
 800109c:	4619      	mov	r1, r3
 800109e:	4807      	ldr	r0, [pc, #28]	; (80010bc <MX_TIM4_Init+0xac>)
 80010a0:	f004 fcbc 	bl	8005a1c <HAL_TIM_PWM_ConfigChannel>
 80010a4:	4603      	mov	r3, r0
 80010a6:	2b00      	cmp	r3, #0
 80010a8:	d001      	beq.n	80010ae <MX_TIM4_Init+0x9e>
  {
    Error_Handler();
 80010aa:	f000 f9bd 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 80010ae:	4803      	ldr	r0, [pc, #12]	; (80010bc <MX_TIM4_Init+0xac>)
 80010b0:	f001 faf4 	bl	800269c <HAL_TIM_MspPostInit>

}
 80010b4:	bf00      	nop
 80010b6:	3728      	adds	r7, #40	; 0x28
 80010b8:	46bd      	mov	sp, r7
 80010ba:	bd80      	pop	{r7, pc}
 80010bc:	20001634 	.word	0x20001634
 80010c0:	40000800 	.word	0x40000800

080010c4 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b086      	sub	sp, #24
 80010c8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010ca:	f107 0308 	add.w	r3, r7, #8
 80010ce:	2200      	movs	r2, #0
 80010d0:	601a      	str	r2, [r3, #0]
 80010d2:	605a      	str	r2, [r3, #4]
 80010d4:	609a      	str	r2, [r3, #8]
 80010d6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d8:	463b      	mov	r3, r7
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 80010e0:	4b1d      	ldr	r3, [pc, #116]	; (8001158 <MX_TIM5_Init+0x94>)
 80010e2:	4a1e      	ldr	r2, [pc, #120]	; (800115c <MX_TIM5_Init+0x98>)
 80010e4:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 83;
 80010e6:	4b1c      	ldr	r3, [pc, #112]	; (8001158 <MX_TIM5_Init+0x94>)
 80010e8:	2253      	movs	r2, #83	; 0x53
 80010ea:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010ec:	4b1a      	ldr	r3, [pc, #104]	; (8001158 <MX_TIM5_Init+0x94>)
 80010ee:	2200      	movs	r2, #0
 80010f0:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 49999;
 80010f2:	4b19      	ldr	r3, [pc, #100]	; (8001158 <MX_TIM5_Init+0x94>)
 80010f4:	f24c 324f 	movw	r2, #49999	; 0xc34f
 80010f8:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010fa:	4b17      	ldr	r3, [pc, #92]	; (8001158 <MX_TIM5_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001100:	4b15      	ldr	r3, [pc, #84]	; (8001158 <MX_TIM5_Init+0x94>)
 8001102:	2280      	movs	r2, #128	; 0x80
 8001104:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 8001106:	4814      	ldr	r0, [pc, #80]	; (8001158 <MX_TIM5_Init+0x94>)
 8001108:	f003 feac 	bl	8004e64 <HAL_TIM_Base_Init>
 800110c:	4603      	mov	r3, r0
 800110e:	2b00      	cmp	r3, #0
 8001110:	d001      	beq.n	8001116 <MX_TIM5_Init+0x52>
  {
    Error_Handler();
 8001112:	f000 f989 	bl	8001428 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001116:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800111a:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 800111c:	f107 0308 	add.w	r3, r7, #8
 8001120:	4619      	mov	r1, r3
 8001122:	480d      	ldr	r0, [pc, #52]	; (8001158 <MX_TIM5_Init+0x94>)
 8001124:	f004 fd3c 	bl	8005ba0 <HAL_TIM_ConfigClockSource>
 8001128:	4603      	mov	r3, r0
 800112a:	2b00      	cmp	r3, #0
 800112c:	d001      	beq.n	8001132 <MX_TIM5_Init+0x6e>
  {
    Error_Handler();
 800112e:	f000 f97b 	bl	8001428 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001132:	2300      	movs	r3, #0
 8001134:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001136:	2300      	movs	r3, #0
 8001138:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800113a:	463b      	mov	r3, r7
 800113c:	4619      	mov	r1, r3
 800113e:	4806      	ldr	r0, [pc, #24]	; (8001158 <MX_TIM5_Init+0x94>)
 8001140:	f005 fa08 	bl	8006554 <HAL_TIMEx_MasterConfigSynchronization>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM5_Init+0x8a>
  {
    Error_Handler();
 800114a:	f000 f96d 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 800114e:	bf00      	nop
 8001150:	3718      	adds	r7, #24
 8001152:	46bd      	mov	sp, r7
 8001154:	bd80      	pop	{r7, pc}
 8001156:	bf00      	nop
 8001158:	2000167c 	.word	0x2000167c
 800115c:	40000c00 	.word	0x40000c00

08001160 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8001160:	b580      	push	{r7, lr}
 8001162:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8001164:	4b11      	ldr	r3, [pc, #68]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001166:	4a12      	ldr	r2, [pc, #72]	; (80011b0 <MX_USART1_UART_Init+0x50>)
 8001168:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 9600;
 800116a:	4b10      	ldr	r3, [pc, #64]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800116c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001170:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8001172:	4b0e      	ldr	r3, [pc, #56]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001174:	2200      	movs	r2, #0
 8001176:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8001178:	4b0c      	ldr	r3, [pc, #48]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800117a:	2200      	movs	r2, #0
 800117c:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800117e:	4b0b      	ldr	r3, [pc, #44]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001180:	2200      	movs	r2, #0
 8001182:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8001184:	4b09      	ldr	r3, [pc, #36]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001186:	220c      	movs	r2, #12
 8001188:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800118a:	4b08      	ldr	r3, [pc, #32]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 800118c:	2200      	movs	r2, #0
 800118e:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8001190:	4b06      	ldr	r3, [pc, #24]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001192:	2200      	movs	r2, #0
 8001194:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8001196:	4805      	ldr	r0, [pc, #20]	; (80011ac <MX_USART1_UART_Init+0x4c>)
 8001198:	f005 fa5e 	bl	8006658 <HAL_UART_Init>
 800119c:	4603      	mov	r3, r0
 800119e:	2b00      	cmp	r3, #0
 80011a0:	d001      	beq.n	80011a6 <MX_USART1_UART_Init+0x46>
  {
    Error_Handler();
 80011a2:	f000 f941 	bl	8001428 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80011a6:	bf00      	nop
 80011a8:	bd80      	pop	{r7, pc}
 80011aa:	bf00      	nop
 80011ac:	200016c4 	.word	0x200016c4
 80011b0:	40011000 	.word	0x40011000

080011b4 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b088      	sub	sp, #32
 80011b8:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	2200      	movs	r2, #0
 80011c0:	601a      	str	r2, [r3, #0]
 80011c2:	605a      	str	r2, [r3, #4]
 80011c4:	609a      	str	r2, [r3, #8]
 80011c6:	60da      	str	r2, [r3, #12]
 80011c8:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80011ca:	2300      	movs	r3, #0
 80011cc:	60bb      	str	r3, [r7, #8]
 80011ce:	4b44      	ldr	r3, [pc, #272]	; (80012e0 <MX_GPIO_Init+0x12c>)
 80011d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011d2:	4a43      	ldr	r2, [pc, #268]	; (80012e0 <MX_GPIO_Init+0x12c>)
 80011d4:	f043 0304 	orr.w	r3, r3, #4
 80011d8:	6313      	str	r3, [r2, #48]	; 0x30
 80011da:	4b41      	ldr	r3, [pc, #260]	; (80012e0 <MX_GPIO_Init+0x12c>)
 80011dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011de:	f003 0304 	and.w	r3, r3, #4
 80011e2:	60bb      	str	r3, [r7, #8]
 80011e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80011e6:	2300      	movs	r3, #0
 80011e8:	607b      	str	r3, [r7, #4]
 80011ea:	4b3d      	ldr	r3, [pc, #244]	; (80012e0 <MX_GPIO_Init+0x12c>)
 80011ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011ee:	4a3c      	ldr	r2, [pc, #240]	; (80012e0 <MX_GPIO_Init+0x12c>)
 80011f0:	f043 0301 	orr.w	r3, r3, #1
 80011f4:	6313      	str	r3, [r2, #48]	; 0x30
 80011f6:	4b3a      	ldr	r3, [pc, #232]	; (80012e0 <MX_GPIO_Init+0x12c>)
 80011f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80011fa:	f003 0301 	and.w	r3, r3, #1
 80011fe:	607b      	str	r3, [r7, #4]
 8001200:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001202:	2300      	movs	r3, #0
 8001204:	603b      	str	r3, [r7, #0]
 8001206:	4b36      	ldr	r3, [pc, #216]	; (80012e0 <MX_GPIO_Init+0x12c>)
 8001208:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800120a:	4a35      	ldr	r2, [pc, #212]	; (80012e0 <MX_GPIO_Init+0x12c>)
 800120c:	f043 0302 	orr.w	r3, r3, #2
 8001210:	6313      	str	r3, [r2, #48]	; 0x30
 8001212:	4b33      	ldr	r3, [pc, #204]	; (80012e0 <MX_GPIO_Init+0x12c>)
 8001214:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001216:	f003 0302 	and.w	r3, r3, #2
 800121a:	603b      	str	r3, [r7, #0]
 800121c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 800121e:	2200      	movs	r2, #0
 8001220:	21e3      	movs	r1, #227	; 0xe3
 8001222:	4830      	ldr	r0, [pc, #192]	; (80012e4 <MX_GPIO_Init+0x130>)
 8001224:	f002 fa90 	bl	8003748 <HAL_GPIO_WritePin>
                          |GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8001228:	2200      	movs	r2, #0
 800122a:	2140      	movs	r1, #64	; 0x40
 800122c:	482e      	ldr	r0, [pc, #184]	; (80012e8 <MX_GPIO_Init+0x134>)
 800122e:	f002 fa8b 	bl	8003748 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001232:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001236:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001238:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800123c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001242:	f107 030c 	add.w	r3, r7, #12
 8001246:	4619      	mov	r1, r3
 8001248:	4828      	ldr	r0, [pc, #160]	; (80012ec <MX_GPIO_Init+0x138>)
 800124a:	f002 f8e1 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA0 PA1 LD2_Pin PA6
                           PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|LD2_Pin|GPIO_PIN_6
 800124e:	23e3      	movs	r3, #227	; 0xe3
 8001250:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001252:	2301      	movs	r3, #1
 8001254:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001256:	2300      	movs	r3, #0
 8001258:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800125a:	2300      	movs	r3, #0
 800125c:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	4619      	mov	r1, r3
 8001264:	481f      	ldr	r0, [pc, #124]	; (80012e4 <MX_GPIO_Init+0x130>)
 8001266:	f002 f8d3 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2 PA3 */
  GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800126a:	230c      	movs	r3, #12
 800126c:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800126e:	2302      	movs	r3, #2
 8001270:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001272:	2300      	movs	r3, #0
 8001274:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001276:	2303      	movs	r3, #3
 8001278:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800127a:	2307      	movs	r3, #7
 800127c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800127e:	f107 030c 	add.w	r3, r7, #12
 8001282:	4619      	mov	r1, r3
 8001284:	4817      	ldr	r0, [pc, #92]	; (80012e4 <MX_GPIO_Init+0x130>)
 8001286:	f002 f8c3 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC6 PC8 */
  GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_8;
 800128a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800128e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001290:	2300      	movs	r3, #0
 8001292:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001294:	2300      	movs	r3, #0
 8001296:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001298:	f107 030c 	add.w	r3, r7, #12
 800129c:	4619      	mov	r1, r3
 800129e:	4813      	ldr	r0, [pc, #76]	; (80012ec <MX_GPIO_Init+0x138>)
 80012a0:	f002 f8b6 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB3 PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80012a4:	2338      	movs	r3, #56	; 0x38
 80012a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80012a8:	2300      	movs	r3, #0
 80012aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012ac:	2301      	movs	r3, #1
 80012ae:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012b0:	f107 030c 	add.w	r3, r7, #12
 80012b4:	4619      	mov	r1, r3
 80012b6:	480c      	ldr	r0, [pc, #48]	; (80012e8 <MX_GPIO_Init+0x134>)
 80012b8:	f002 f8aa 	bl	8003410 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 80012bc:	2340      	movs	r3, #64	; 0x40
 80012be:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80012c0:	2301      	movs	r3, #1
 80012c2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80012c4:	2300      	movs	r3, #0
 80012c6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80012c8:	2300      	movs	r3, #0
 80012ca:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80012cc:	f107 030c 	add.w	r3, r7, #12
 80012d0:	4619      	mov	r1, r3
 80012d2:	4805      	ldr	r0, [pc, #20]	; (80012e8 <MX_GPIO_Init+0x134>)
 80012d4:	f002 f89c 	bl	8003410 <HAL_GPIO_Init>

}
 80012d8:	bf00      	nop
 80012da:	3720      	adds	r7, #32
 80012dc:	46bd      	mov	sp, r7
 80012de:	bd80      	pop	{r7, pc}
 80012e0:	40023800 	.word	0x40023800
 80012e4:	40020000 	.word	0x40020000
 80012e8:	40020400 	.word	0x40020400
 80012ec:	40020800 	.word	0x40020800

080012f0 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b082      	sub	sp, #8
 80012f4:	af00      	add	r7, sp, #0
 80012f6:	6078      	str	r0, [r7, #4]
	// 50ms Poll Button Timer
	if (htim == &htim5 )
 80012f8:	687b      	ldr	r3, [r7, #4]
 80012fa:	4a45      	ldr	r2, [pc, #276]	; (8001410 <HAL_TIM_PeriodElapsedCallback+0x120>)
 80012fc:	4293      	cmp	r3, r2
 80012fe:	f040 8082 	bne.w	8001406 <HAL_TIM_PeriodElapsedCallback+0x116>
		// Count the number of times the interrupt fires for flashing
		static uint8_t i = 0;
		// Set high if the button has been released, low while pressed
		static uint8_t released = 1;

		button = poll_buttons();
 8001302:	f7ff f9ef 	bl	80006e4 <poll_buttons>
 8001306:	4603      	mov	r3, r0
 8001308:	461a      	mov	r2, r3
 800130a:	4b42      	ldr	r3, [pc, #264]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800130c:	701a      	strb	r2, [r3, #0]
		// If a new button is pressed
		if (button && released) {
 800130e:	4b41      	ldr	r3, [pc, #260]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001310:	781b      	ldrb	r3, [r3, #0]
 8001312:	2b00      	cmp	r3, #0
 8001314:	d01b      	beq.n	800134e <HAL_TIM_PeriodElapsedCallback+0x5e>
 8001316:	4b40      	ldr	r3, [pc, #256]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001318:	781b      	ldrb	r3, [r3, #0]
 800131a:	2b00      	cmp	r3, #0
 800131c:	d017      	beq.n	800134e <HAL_TIM_PeriodElapsedCallback+0x5e>
			// Turn on Button Light
			if (current_menu != settings_menu) enable_all_buttons();
 800131e:	4b3f      	ldr	r3, [pc, #252]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001320:	781b      	ldrb	r3, [r3, #0]
 8001322:	2b01      	cmp	r3, #1
 8001324:	d001      	beq.n	800132a <HAL_TIM_PeriodElapsedCallback+0x3a>
 8001326:	f7ff f995 	bl	8000654 <enable_all_buttons>
			disable_button(button);
 800132a:	4b3a      	ldr	r3, [pc, #232]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800132c:	781b      	ldrb	r3, [r3, #0]
 800132e:	4618      	mov	r0, r3
 8001330:	f7ff f930 	bl	8000594 <disable_button>
			// Invert display
			update_buttons();
 8001334:	f7ff f9b8 	bl	80006a8 <update_buttons>

			last_pressed = button;
 8001338:	4b36      	ldr	r3, [pc, #216]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800133a:	781a      	ldrb	r2, [r3, #0]
 800133c:	4b38      	ldr	r3, [pc, #224]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800133e:	701a      	strb	r2, [r3, #0]
			released = 0;
 8001340:	4b35      	ldr	r3, [pc, #212]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001342:	2200      	movs	r2, #0
 8001344:	701a      	strb	r2, [r3, #0]
			i = 0; // Reset counter
 8001346:	4b37      	ldr	r3, [pc, #220]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001348:	2200      	movs	r2, #0
 800134a:	701a      	strb	r2, [r3, #0]
				// clear the last pressed button and stop flashing
				last_pressed = 0;
			}
		}
	}
}
 800134c:	e05b      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x116>
		} else if (!button && last_pressed) {
 800134e:	4b31      	ldr	r3, [pc, #196]	; (8001414 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8001350:	781b      	ldrb	r3, [r3, #0]
 8001352:	2b00      	cmp	r3, #0
 8001354:	d157      	bne.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x116>
 8001356:	4b32      	ldr	r3, [pc, #200]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	2b00      	cmp	r3, #0
 800135c:	d053      	beq.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x116>
			released = 1;
 800135e:	4b2e      	ldr	r3, [pc, #184]	; (8001418 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8001360:	2201      	movs	r2, #1
 8001362:	701a      	strb	r2, [r3, #0]
			++i;
 8001364:	4b2f      	ldr	r3, [pc, #188]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001366:	781b      	ldrb	r3, [r3, #0]
 8001368:	3301      	adds	r3, #1
 800136a:	b2da      	uxtb	r2, r3
 800136c:	4b2d      	ldr	r3, [pc, #180]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800136e:	701a      	strb	r2, [r3, #0]
			if (!(i % 4)) {
 8001370:	4b2c      	ldr	r3, [pc, #176]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001372:	781b      	ldrb	r3, [r3, #0]
 8001374:	f003 0303 	and.w	r3, r3, #3
 8001378:	b2db      	uxtb	r3, r3
 800137a:	2b00      	cmp	r3, #0
 800137c:	d11b      	bne.n	80013b6 <HAL_TIM_PeriodElapsedCallback+0xc6>
				if ((current_menu != awaiting_menu) && ((current_menu != settings_menu) || (last_pressed == 1 || last_pressed == 2 || last_pressed == 9)))
 800137e:	4b27      	ldr	r3, [pc, #156]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001380:	781b      	ldrb	r3, [r3, #0]
 8001382:	2b05      	cmp	r3, #5
 8001384:	d014      	beq.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0xc0>
 8001386:	4b25      	ldr	r3, [pc, #148]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8001388:	781b      	ldrb	r3, [r3, #0]
 800138a:	2b01      	cmp	r3, #1
 800138c:	d10b      	bne.n	80013a6 <HAL_TIM_PeriodElapsedCallback+0xb6>
 800138e:	4b24      	ldr	r3, [pc, #144]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001390:	781b      	ldrb	r3, [r3, #0]
 8001392:	2b01      	cmp	r3, #1
 8001394:	d007      	beq.n	80013a6 <HAL_TIM_PeriodElapsedCallback+0xb6>
 8001396:	4b22      	ldr	r3, [pc, #136]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001398:	781b      	ldrb	r3, [r3, #0]
 800139a:	2b02      	cmp	r3, #2
 800139c:	d003      	beq.n	80013a6 <HAL_TIM_PeriodElapsedCallback+0xb6>
 800139e:	4b20      	ldr	r3, [pc, #128]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	2b09      	cmp	r3, #9
 80013a4:	d104      	bne.n	80013b0 <HAL_TIM_PeriodElapsedCallback+0xc0>
					toggle_button(last_pressed);
 80013a6:	4b1e      	ldr	r3, [pc, #120]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013a8:	781b      	ldrb	r3, [r3, #0]
 80013aa:	4618      	mov	r0, r3
 80013ac:	f7ff f922 	bl	80005f4 <toggle_button>
				update_buttons();
 80013b0:	f7ff f97a 	bl	80006a8 <update_buttons>
}
 80013b4:	e027      	b.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x116>
			else if (i > BUTTON_FLASH_DURATION / 50) {
 80013b6:	4b1b      	ldr	r3, [pc, #108]	; (8001424 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	2b0c      	cmp	r3, #12
 80013bc:	d923      	bls.n	8001406 <HAL_TIM_PeriodElapsedCallback+0x116>
				if ((current_menu != awaiting_menu) && ((current_menu != settings_menu) || last_pressed == 1 || last_pressed == 2 || last_pressed == 9))
 80013be:	4b17      	ldr	r3, [pc, #92]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80013c0:	781b      	ldrb	r3, [r3, #0]
 80013c2:	2b05      	cmp	r3, #5
 80013c4:	d015      	beq.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x102>
 80013c6:	4b15      	ldr	r3, [pc, #84]	; (800141c <HAL_TIM_PeriodElapsedCallback+0x12c>)
 80013c8:	781b      	ldrb	r3, [r3, #0]
 80013ca:	2b01      	cmp	r3, #1
 80013cc:	d10b      	bne.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0xf6>
 80013ce:	4b14      	ldr	r3, [pc, #80]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	2b01      	cmp	r3, #1
 80013d4:	d007      	beq.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0xf6>
 80013d6:	4b12      	ldr	r3, [pc, #72]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013d8:	781b      	ldrb	r3, [r3, #0]
 80013da:	2b02      	cmp	r3, #2
 80013dc:	d003      	beq.n	80013e6 <HAL_TIM_PeriodElapsedCallback+0xf6>
 80013de:	4b10      	ldr	r3, [pc, #64]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013e0:	781b      	ldrb	r3, [r3, #0]
 80013e2:	2b09      	cmp	r3, #9
 80013e4:	d105      	bne.n	80013f2 <HAL_TIM_PeriodElapsedCallback+0x102>
					enable_button(last_pressed);
 80013e6:	4b0e      	ldr	r3, [pc, #56]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013e8:	781b      	ldrb	r3, [r3, #0]
 80013ea:	4618      	mov	r0, r3
 80013ec:	f7ff f8a0 	bl	8000530 <enable_button>
 80013f0:	e004      	b.n	80013fc <HAL_TIM_PeriodElapsedCallback+0x10c>
				else disable_button(last_pressed);
 80013f2:	4b0b      	ldr	r3, [pc, #44]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 80013f4:	781b      	ldrb	r3, [r3, #0]
 80013f6:	4618      	mov	r0, r3
 80013f8:	f7ff f8cc 	bl	8000594 <disable_button>
				update_buttons();
 80013fc:	f7ff f954 	bl	80006a8 <update_buttons>
				last_pressed = 0;
 8001400:	4b07      	ldr	r3, [pc, #28]	; (8001420 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001402:	2200      	movs	r2, #0
 8001404:	701a      	strb	r2, [r3, #0]
}
 8001406:	bf00      	nop
 8001408:	3708      	adds	r7, #8
 800140a:	46bd      	mov	sp, r7
 800140c:	bd80      	pop	{r7, pc}
 800140e:	bf00      	nop
 8001410:	2000167c 	.word	0x2000167c
 8001414:	20001709 	.word	0x20001709
 8001418:	20000008 	.word	0x20000008
 800141c:	20001708 	.word	0x20001708
 8001420:	20015ac9 	.word	0x20015ac9
 8001424:	20015aca 	.word	0x20015aca

08001428 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001428:	b480      	push	{r7}
 800142a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800142c:	b672      	cpsid	i
}
 800142e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001430:	e7fe      	b.n	8001430 <Error_Handler+0x8>
	...

08001434 <display_menu>:
extern void GlobalTransmit(uint16_t [dataLen]);

// Store Menu Commands
static char menu_commands[9][11];

void display_menu(Menu menu, uint8_t page, uint8_t device) {
 8001434:	b590      	push	{r4, r7, lr}
 8001436:	b087      	sub	sp, #28
 8001438:	af00      	add	r7, sp, #0
 800143a:	4603      	mov	r3, r0
 800143c:	71fb      	strb	r3, [r7, #7]
 800143e:	460b      	mov	r3, r1
 8001440:	71bb      	strb	r3, [r7, #6]
 8001442:	4613      	mov	r3, r2
 8001444:	717b      	strb	r3, [r7, #5]
	if (!page) return;
 8001446:	79bb      	ldrb	r3, [r7, #6]
 8001448:	2b00      	cmp	r3, #0
 800144a:	f000 81bb 	beq.w	80017c4 <display_menu+0x390>
	current_menu = menu;
 800144e:	4aae      	ldr	r2, [pc, #696]	; (8001708 <display_menu+0x2d4>)
 8001450:	79fb      	ldrb	r3, [r7, #7]
 8001452:	7013      	strb	r3, [r2, #0]
	current_page = page;
 8001454:	4aad      	ldr	r2, [pc, #692]	; (800170c <display_menu+0x2d8>)
 8001456:	79bb      	ldrb	r3, [r7, #6]
 8001458:	7013      	strb	r3, [r2, #0]
	switch(menu) {
 800145a:	79fb      	ldrb	r3, [r7, #7]
 800145c:	2b05      	cmp	r3, #5
 800145e:	f200 8194 	bhi.w	800178a <display_menu+0x356>
 8001462:	a201      	add	r2, pc, #4	; (adr r2, 8001468 <display_menu+0x34>)
 8001464:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001468:	08001481 	.word	0x08001481
 800146c:	080014fb 	.word	0x080014fb
 8001470:	0800154b 	.word	0x0800154b
 8001474:	080015c7 	.word	0x080015c7
 8001478:	0800163f 	.word	0x0800163f
 800147c:	080016b7 	.word	0x080016b7
	case main_menu:
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001480:	79bb      	ldrb	r3, [r7, #6]
 8001482:	2b03      	cmp	r3, #3
 8001484:	f200 81a0 	bhi.w	80017c8 <display_menu+0x394>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 8001488:	2300      	movs	r3, #0
 800148a:	75fb      	strb	r3, [r7, #23]
 800148c:	e01e      	b.n	80014cc <display_menu+0x98>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 800148e:	7dfa      	ldrb	r2, [r7, #23]
 8001490:	4613      	mov	r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	4413      	add	r3, r2
 8001496:	005b      	lsls	r3, r3, #1
 8001498:	4413      	add	r3, r2
 800149a:	4a9d      	ldr	r2, [pc, #628]	; (8001710 <display_menu+0x2dc>)
 800149c:	1898      	adds	r0, r3, r2
 800149e:	7df9      	ldrb	r1, [r7, #23]
 80014a0:	4b9a      	ldr	r3, [pc, #616]	; (800170c <display_menu+0x2d8>)
 80014a2:	781b      	ldrb	r3, [r3, #0]
 80014a4:	1e5a      	subs	r2, r3, #1
 80014a6:	4613      	mov	r3, r2
 80014a8:	005b      	lsls	r3, r3, #1
 80014aa:	4413      	add	r3, r2
 80014ac:	005b      	lsls	r3, r3, #1
 80014ae:	440b      	add	r3, r1
 80014b0:	f241 022c 	movw	r2, #4140	; 0x102c
 80014b4:	fb02 f303 	mul.w	r3, r2, r3
 80014b8:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 80014bc:	4a95      	ldr	r2, [pc, #596]	; (8001714 <display_menu+0x2e0>)
 80014be:	4413      	add	r3, r2
 80014c0:	4619      	mov	r1, r3
 80014c2:	f005 fc4e 	bl	8006d62 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 80014c6:	7dfb      	ldrb	r3, [r7, #23]
 80014c8:	3301      	adds	r3, #1
 80014ca:	75fb      	strb	r3, [r7, #23]
 80014cc:	7dfb      	ldrb	r3, [r7, #23]
 80014ce:	2b05      	cmp	r3, #5
 80014d0:	d9dd      	bls.n	800148e <display_menu+0x5a>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 80014d2:	4a91      	ldr	r2, [pc, #580]	; (8001718 <display_menu+0x2e4>)
 80014d4:	4b91      	ldr	r3, [pc, #580]	; (800171c <display_menu+0x2e8>)
 80014d6:	cb03      	ldmia	r3!, {r0, r1}
 80014d8:	6010      	str	r0, [r2, #0]
 80014da:	6051      	str	r1, [r2, #4]
 80014dc:	881b      	ldrh	r3, [r3, #0]
 80014de:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Settings");
 80014e0:	4a8f      	ldr	r2, [pc, #572]	; (8001720 <display_menu+0x2ec>)
 80014e2:	4b90      	ldr	r3, [pc, #576]	; (8001724 <display_menu+0x2f0>)
 80014e4:	cb03      	ldmia	r3!, {r0, r1}
 80014e6:	6010      	str	r0, [r2, #0]
 80014e8:	6051      	str	r1, [r2, #4]
 80014ea:	781b      	ldrb	r3, [r3, #0]
 80014ec:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 80014ee:	4b8e      	ldr	r3, [pc, #568]	; (8001728 <display_menu+0x2f4>)
 80014f0:	4a8e      	ldr	r2, [pc, #568]	; (800172c <display_menu+0x2f8>)
 80014f2:	ca07      	ldmia	r2, {r0, r1, r2}
 80014f4:	c303      	stmia	r3!, {r0, r1}
 80014f6:	801a      	strh	r2, [r3, #0]
		break;
 80014f8:	e147      	b.n	800178a <display_menu+0x356>
	case settings_menu:
		strcpy(menu_commands[0], "PC Connect");
 80014fa:	4b85      	ldr	r3, [pc, #532]	; (8001710 <display_menu+0x2dc>)
 80014fc:	4a8c      	ldr	r2, [pc, #560]	; (8001730 <display_menu+0x2fc>)
 80014fe:	ca07      	ldmia	r2, {r0, r1, r2}
 8001500:	c303      	stmia	r3!, {r0, r1}
 8001502:	801a      	strh	r2, [r3, #0]
 8001504:	3302      	adds	r3, #2
 8001506:	0c12      	lsrs	r2, r2, #16
 8001508:	701a      	strb	r2, [r3, #0]
		strcpy(menu_commands[1], "Learn Cmd");
 800150a:	4a8a      	ldr	r2, [pc, #552]	; (8001734 <display_menu+0x300>)
 800150c:	4b8a      	ldr	r3, [pc, #552]	; (8001738 <display_menu+0x304>)
 800150e:	cb03      	ldmia	r3!, {r0, r1}
 8001510:	6010      	str	r0, [r2, #0]
 8001512:	6051      	str	r1, [r2, #4]
 8001514:	881b      	ldrh	r3, [r3, #0]
 8001516:	8113      	strh	r3, [r2, #8]
		for (uint8_t i = 2; i <= 7; ++i) {
 8001518:	2302      	movs	r3, #2
 800151a:	75bb      	strb	r3, [r7, #22]
 800151c:	e00c      	b.n	8001538 <display_menu+0x104>
			menu_commands[i][0] = '\0';
 800151e:	7dba      	ldrb	r2, [r7, #22]
 8001520:	497b      	ldr	r1, [pc, #492]	; (8001710 <display_menu+0x2dc>)
 8001522:	4613      	mov	r3, r2
 8001524:	009b      	lsls	r3, r3, #2
 8001526:	4413      	add	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	440b      	add	r3, r1
 800152e:	2200      	movs	r2, #0
 8001530:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 2; i <= 7; ++i) {
 8001532:	7dbb      	ldrb	r3, [r7, #22]
 8001534:	3301      	adds	r3, #1
 8001536:	75bb      	strb	r3, [r7, #22]
 8001538:	7dbb      	ldrb	r3, [r7, #22]
 800153a:	2b07      	cmp	r3, #7
 800153c:	d9ef      	bls.n	800151e <display_menu+0xea>
		}
		strcpy(menu_commands[8], "Main Menu");
 800153e:	4b7a      	ldr	r3, [pc, #488]	; (8001728 <display_menu+0x2f4>)
 8001540:	4a7e      	ldr	r2, [pc, #504]	; (800173c <display_menu+0x308>)
 8001542:	ca07      	ldmia	r2, {r0, r1, r2}
 8001544:	c303      	stmia	r3!, {r0, r1}
 8001546:	801a      	strh	r2, [r3, #0]
		break;
 8001548:	e11f      	b.n	800178a <display_menu+0x356>
	case device_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 800154a:	2300      	movs	r3, #0
 800154c:	757b      	strb	r3, [r7, #21]
 800154e:	e023      	b.n	8001598 <display_menu+0x164>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 8001550:	7d7a      	ldrb	r2, [r7, #21]
 8001552:	4613      	mov	r3, r2
 8001554:	009b      	lsls	r3, r3, #2
 8001556:	4413      	add	r3, r2
 8001558:	005b      	lsls	r3, r3, #1
 800155a:	4413      	add	r3, r2
 800155c:	4a6c      	ldr	r2, [pc, #432]	; (8001710 <display_menu+0x2dc>)
 800155e:	189c      	adds	r4, r3, r2
 8001560:	7979      	ldrb	r1, [r7, #5]
 8001562:	7d78      	ldrb	r0, [r7, #21]
 8001564:	4b69      	ldr	r3, [pc, #420]	; (800170c <display_menu+0x2d8>)
 8001566:	781b      	ldrb	r3, [r3, #0]
 8001568:	1e5a      	subs	r2, r3, #1
 800156a:	4613      	mov	r3, r2
 800156c:	005b      	lsls	r3, r3, #1
 800156e:	4413      	add	r3, r2
 8001570:	005b      	lsls	r3, r3, #1
 8001572:	4403      	add	r3, r0
 8001574:	22ac      	movs	r2, #172	; 0xac
 8001576:	fb03 f202 	mul.w	r2, r3, r2
 800157a:	f241 032c 	movw	r3, #4140	; 0x102c
 800157e:	fb01 f303 	mul.w	r3, r1, r3
 8001582:	4413      	add	r3, r2
 8001584:	33a0      	adds	r3, #160	; 0xa0
 8001586:	4a63      	ldr	r2, [pc, #396]	; (8001714 <display_menu+0x2e0>)
 8001588:	4413      	add	r3, r2
 800158a:	4619      	mov	r1, r3
 800158c:	4620      	mov	r0, r4
 800158e:	f005 fbe8 	bl	8006d62 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001592:	7d7b      	ldrb	r3, [r7, #21]
 8001594:	3301      	adds	r3, #1
 8001596:	757b      	strb	r3, [r7, #21]
 8001598:	7d7b      	ldrb	r3, [r7, #21]
 800159a:	2b05      	cmp	r3, #5
 800159c:	d9d8      	bls.n	8001550 <display_menu+0x11c>
		}
		strcpy(menu_commands[6], "Prev Page");
 800159e:	4a5e      	ldr	r2, [pc, #376]	; (8001718 <display_menu+0x2e4>)
 80015a0:	4b5e      	ldr	r3, [pc, #376]	; (800171c <display_menu+0x2e8>)
 80015a2:	cb03      	ldmia	r3!, {r0, r1}
 80015a4:	6010      	str	r0, [r2, #0]
 80015a6:	6051      	str	r1, [r2, #4]
 80015a8:	881b      	ldrh	r3, [r3, #0]
 80015aa:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Main Menu");
 80015ac:	4a5c      	ldr	r2, [pc, #368]	; (8001720 <display_menu+0x2ec>)
 80015ae:	4b63      	ldr	r3, [pc, #396]	; (800173c <display_menu+0x308>)
 80015b0:	cb03      	ldmia	r3!, {r0, r1}
 80015b2:	6010      	str	r0, [r2, #0]
 80015b4:	6051      	str	r1, [r2, #4]
 80015b6:	881b      	ldrh	r3, [r3, #0]
 80015b8:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 80015ba:	4b5b      	ldr	r3, [pc, #364]	; (8001728 <display_menu+0x2f4>)
 80015bc:	4a5b      	ldr	r2, [pc, #364]	; (800172c <display_menu+0x2f8>)
 80015be:	ca07      	ldmia	r2, {r0, r1, r2}
 80015c0:	c303      	stmia	r3!, {r0, r1}
 80015c2:	801a      	strh	r2, [r3, #0]
		break;
 80015c4:	e0e1      	b.n	800178a <display_menu+0x356>
	case learn_device_menu:
		if (page > MAIN_MENU_PAGE_COUNT) return;
 80015c6:	79bb      	ldrb	r3, [r7, #6]
 80015c8:	2b03      	cmp	r3, #3
 80015ca:	f200 80ff 	bhi.w	80017cc <display_menu+0x398>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 80015ce:	2300      	movs	r3, #0
 80015d0:	753b      	strb	r3, [r7, #20]
 80015d2:	e01e      	b.n	8001612 <display_menu+0x1de>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 80015d4:	7d3a      	ldrb	r2, [r7, #20]
 80015d6:	4613      	mov	r3, r2
 80015d8:	009b      	lsls	r3, r3, #2
 80015da:	4413      	add	r3, r2
 80015dc:	005b      	lsls	r3, r3, #1
 80015de:	4413      	add	r3, r2
 80015e0:	4a4b      	ldr	r2, [pc, #300]	; (8001710 <display_menu+0x2dc>)
 80015e2:	1898      	adds	r0, r3, r2
 80015e4:	7d39      	ldrb	r1, [r7, #20]
 80015e6:	4b49      	ldr	r3, [pc, #292]	; (800170c <display_menu+0x2d8>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	1e5a      	subs	r2, r3, #1
 80015ec:	4613      	mov	r3, r2
 80015ee:	005b      	lsls	r3, r3, #1
 80015f0:	4413      	add	r3, r2
 80015f2:	005b      	lsls	r3, r3, #1
 80015f4:	440b      	add	r3, r1
 80015f6:	f241 022c 	movw	r2, #4140	; 0x102c
 80015fa:	fb02 f303 	mul.w	r3, r2, r3
 80015fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001602:	4a44      	ldr	r2, [pc, #272]	; (8001714 <display_menu+0x2e0>)
 8001604:	4413      	add	r3, r2
 8001606:	4619      	mov	r1, r3
 8001608:	f005 fbab 	bl	8006d62 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 800160c:	7d3b      	ldrb	r3, [r7, #20]
 800160e:	3301      	adds	r3, #1
 8001610:	753b      	strb	r3, [r7, #20]
 8001612:	7d3b      	ldrb	r3, [r7, #20]
 8001614:	2b05      	cmp	r3, #5
 8001616:	d9dd      	bls.n	80015d4 <display_menu+0x1a0>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 8001618:	4a3f      	ldr	r2, [pc, #252]	; (8001718 <display_menu+0x2e4>)
 800161a:	4b40      	ldr	r3, [pc, #256]	; (800171c <display_menu+0x2e8>)
 800161c:	cb03      	ldmia	r3!, {r0, r1}
 800161e:	6010      	str	r0, [r2, #0]
 8001620:	6051      	str	r1, [r2, #4]
 8001622:	881b      	ldrh	r3, [r3, #0]
 8001624:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Quit");
 8001626:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <display_menu+0x2ec>)
 8001628:	4a45      	ldr	r2, [pc, #276]	; (8001740 <display_menu+0x30c>)
 800162a:	6810      	ldr	r0, [r2, #0]
 800162c:	6018      	str	r0, [r3, #0]
 800162e:	7912      	ldrb	r2, [r2, #4]
 8001630:	711a      	strb	r2, [r3, #4]
		strcpy(menu_commands[8], "Next Page");
 8001632:	4b3d      	ldr	r3, [pc, #244]	; (8001728 <display_menu+0x2f4>)
 8001634:	4a3d      	ldr	r2, [pc, #244]	; (800172c <display_menu+0x2f8>)
 8001636:	ca07      	ldmia	r2, {r0, r1, r2}
 8001638:	c303      	stmia	r3!, {r0, r1}
 800163a:	801a      	strh	r2, [r3, #0]
		break;
 800163c:	e0a5      	b.n	800178a <display_menu+0x356>
	case learn_command_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 800163e:	2300      	movs	r3, #0
 8001640:	74fb      	strb	r3, [r7, #19]
 8001642:	e023      	b.n	800168c <display_menu+0x258>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 8001644:	7cfa      	ldrb	r2, [r7, #19]
 8001646:	4613      	mov	r3, r2
 8001648:	009b      	lsls	r3, r3, #2
 800164a:	4413      	add	r3, r2
 800164c:	005b      	lsls	r3, r3, #1
 800164e:	4413      	add	r3, r2
 8001650:	4a2f      	ldr	r2, [pc, #188]	; (8001710 <display_menu+0x2dc>)
 8001652:	189c      	adds	r4, r3, r2
 8001654:	7979      	ldrb	r1, [r7, #5]
 8001656:	7cf8      	ldrb	r0, [r7, #19]
 8001658:	4b2c      	ldr	r3, [pc, #176]	; (800170c <display_menu+0x2d8>)
 800165a:	781b      	ldrb	r3, [r3, #0]
 800165c:	1e5a      	subs	r2, r3, #1
 800165e:	4613      	mov	r3, r2
 8001660:	005b      	lsls	r3, r3, #1
 8001662:	4413      	add	r3, r2
 8001664:	005b      	lsls	r3, r3, #1
 8001666:	4403      	add	r3, r0
 8001668:	22ac      	movs	r2, #172	; 0xac
 800166a:	fb03 f202 	mul.w	r2, r3, r2
 800166e:	f241 032c 	movw	r3, #4140	; 0x102c
 8001672:	fb01 f303 	mul.w	r3, r1, r3
 8001676:	4413      	add	r3, r2
 8001678:	33a0      	adds	r3, #160	; 0xa0
 800167a:	4a26      	ldr	r2, [pc, #152]	; (8001714 <display_menu+0x2e0>)
 800167c:	4413      	add	r3, r2
 800167e:	4619      	mov	r1, r3
 8001680:	4620      	mov	r0, r4
 8001682:	f005 fb6e 	bl	8006d62 <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001686:	7cfb      	ldrb	r3, [r7, #19]
 8001688:	3301      	adds	r3, #1
 800168a:	74fb      	strb	r3, [r7, #19]
 800168c:	7cfb      	ldrb	r3, [r7, #19]
 800168e:	2b05      	cmp	r3, #5
 8001690:	d9d8      	bls.n	8001644 <display_menu+0x210>
		}
		strcpy(menu_commands[6], "Prev Page");
 8001692:	4a21      	ldr	r2, [pc, #132]	; (8001718 <display_menu+0x2e4>)
 8001694:	4b21      	ldr	r3, [pc, #132]	; (800171c <display_menu+0x2e8>)
 8001696:	cb03      	ldmia	r3!, {r0, r1}
 8001698:	6010      	str	r0, [r2, #0]
 800169a:	6051      	str	r1, [r2, #4]
 800169c:	881b      	ldrh	r3, [r3, #0]
 800169e:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Devices");
 80016a0:	4a1f      	ldr	r2, [pc, #124]	; (8001720 <display_menu+0x2ec>)
 80016a2:	4b28      	ldr	r3, [pc, #160]	; (8001744 <display_menu+0x310>)
 80016a4:	cb03      	ldmia	r3!, {r0, r1}
 80016a6:	6010      	str	r0, [r2, #0]
 80016a8:	6051      	str	r1, [r2, #4]
		strcpy(menu_commands[8], "Next Page");
 80016aa:	4b1f      	ldr	r3, [pc, #124]	; (8001728 <display_menu+0x2f4>)
 80016ac:	4a1f      	ldr	r2, [pc, #124]	; (800172c <display_menu+0x2f8>)
 80016ae:	ca07      	ldmia	r2, {r0, r1, r2}
 80016b0:	c303      	stmia	r3!, {r0, r1}
 80016b2:	801a      	strh	r2, [r3, #0]
		break;
 80016b4:	e069      	b.n	800178a <display_menu+0x356>
	case awaiting_menu:
		strcpy(menu_commands[0], "Press");
 80016b6:	4b16      	ldr	r3, [pc, #88]	; (8001710 <display_menu+0x2dc>)
 80016b8:	4a23      	ldr	r2, [pc, #140]	; (8001748 <display_menu+0x314>)
 80016ba:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016be:	6018      	str	r0, [r3, #0]
 80016c0:	3304      	adds	r3, #4
 80016c2:	8019      	strh	r1, [r3, #0]
		strcpy(menu_commands[1], "Button");
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <display_menu+0x300>)
 80016c6:	4a21      	ldr	r2, [pc, #132]	; (800174c <display_menu+0x318>)
 80016c8:	6810      	ldr	r0, [r2, #0]
 80016ca:	6018      	str	r0, [r3, #0]
 80016cc:	8891      	ldrh	r1, [r2, #4]
 80016ce:	7992      	ldrb	r2, [r2, #6]
 80016d0:	8099      	strh	r1, [r3, #4]
 80016d2:	719a      	strb	r2, [r3, #6]
		strcpy(menu_commands[2], "On");
 80016d4:	4b1e      	ldr	r3, [pc, #120]	; (8001750 <display_menu+0x31c>)
 80016d6:	4a1f      	ldr	r2, [pc, #124]	; (8001754 <display_menu+0x320>)
 80016d8:	8811      	ldrh	r1, [r2, #0]
 80016da:	7892      	ldrb	r2, [r2, #2]
 80016dc:	8019      	strh	r1, [r3, #0]
 80016de:	709a      	strb	r2, [r3, #2]
		strcpy(menu_commands[3], "External");
 80016e0:	4a1d      	ldr	r2, [pc, #116]	; (8001758 <display_menu+0x324>)
 80016e2:	4b1e      	ldr	r3, [pc, #120]	; (800175c <display_menu+0x328>)
 80016e4:	cb03      	ldmia	r3!, {r0, r1}
 80016e6:	6010      	str	r0, [r2, #0]
 80016e8:	6051      	str	r1, [r2, #4]
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[4], "Remote");
 80016ee:	4b1c      	ldr	r3, [pc, #112]	; (8001760 <display_menu+0x32c>)
 80016f0:	4a1c      	ldr	r2, [pc, #112]	; (8001764 <display_menu+0x330>)
 80016f2:	e892 0003 	ldmia.w	r2, {r0, r1}
 80016f6:	6018      	str	r0, [r3, #0]
 80016f8:	3304      	adds	r3, #4
 80016fa:	8019      	strh	r1, [r3, #0]
 80016fc:	3302      	adds	r3, #2
 80016fe:	0c0a      	lsrs	r2, r1, #16
 8001700:	701a      	strb	r2, [r3, #0]
		for(int i = 5; i<=8; ++i){
 8001702:	2305      	movs	r3, #5
 8001704:	60fb      	str	r3, [r7, #12]
 8001706:	e03c      	b.n	8001782 <display_menu+0x34e>
 8001708:	20001708 	.word	0x20001708
 800170c:	20015acb 	.word	0x20015acb
 8001710:	20015acc 	.word	0x20015acc
 8001714:	2000170c 	.word	0x2000170c
 8001718:	20015b0e 	.word	0x20015b0e
 800171c:	08006e2c 	.word	0x08006e2c
 8001720:	20015b19 	.word	0x20015b19
 8001724:	08006e38 	.word	0x08006e38
 8001728:	20015b24 	.word	0x20015b24
 800172c:	08006e44 	.word	0x08006e44
 8001730:	08006e50 	.word	0x08006e50
 8001734:	20015ad7 	.word	0x20015ad7
 8001738:	08006e5c 	.word	0x08006e5c
 800173c:	08006e68 	.word	0x08006e68
 8001740:	08006e74 	.word	0x08006e74
 8001744:	08006e7c 	.word	0x08006e7c
 8001748:	08006e84 	.word	0x08006e84
 800174c:	08006e8c 	.word	0x08006e8c
 8001750:	20015ae2 	.word	0x20015ae2
 8001754:	08006e94 	.word	0x08006e94
 8001758:	20015aed 	.word	0x20015aed
 800175c:	08006e98 	.word	0x08006e98
 8001760:	20015af8 	.word	0x20015af8
 8001764:	08006ea4 	.word	0x08006ea4
			menu_commands[i][0]= '\0';
 8001768:	491a      	ldr	r1, [pc, #104]	; (80017d4 <display_menu+0x3a0>)
 800176a:	68fa      	ldr	r2, [r7, #12]
 800176c:	4613      	mov	r3, r2
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	4413      	add	r3, r2
 8001772:	005b      	lsls	r3, r3, #1
 8001774:	4413      	add	r3, r2
 8001776:	440b      	add	r3, r1
 8001778:	2200      	movs	r2, #0
 800177a:	701a      	strb	r2, [r3, #0]
		for(int i = 5; i<=8; ++i){
 800177c:	68fb      	ldr	r3, [r7, #12]
 800177e:	3301      	adds	r3, #1
 8001780:	60fb      	str	r3, [r7, #12]
 8001782:	68fb      	ldr	r3, [r7, #12]
 8001784:	2b08      	cmp	r3, #8
 8001786:	ddef      	ble.n	8001768 <display_menu+0x334>
		}
		break;
 8001788:	bf00      	nop
	}
	for (uint8_t i = 1; i <= 9; ++i) {
 800178a:	2301      	movs	r3, #1
 800178c:	72fb      	strb	r3, [r7, #11]
 800178e:	e015      	b.n	80017bc <display_menu+0x388>
		erase_buffer();
 8001790:	f000 fc6a 	bl	8002068 <erase_buffer>
		draw_string(menu_commands[i-1], white);
 8001794:	7afb      	ldrb	r3, [r7, #11]
 8001796:	1e5a      	subs	r2, r3, #1
 8001798:	4613      	mov	r3, r2
 800179a:	009b      	lsls	r3, r3, #2
 800179c:	4413      	add	r3, r2
 800179e:	005b      	lsls	r3, r3, #1
 80017a0:	4413      	add	r3, r2
 80017a2:	4a0c      	ldr	r2, [pc, #48]	; (80017d4 <display_menu+0x3a0>)
 80017a4:	4413      	add	r3, r2
 80017a6:	2101      	movs	r1, #1
 80017a8:	4618      	mov	r0, r3
 80017aa:	f000 fd62 	bl	8002272 <draw_string>
		update_display(i);
 80017ae:	7afb      	ldrb	r3, [r7, #11]
 80017b0:	4618      	mov	r0, r3
 80017b2:	f000 fb65 	bl	8001e80 <update_display>
	for (uint8_t i = 1; i <= 9; ++i) {
 80017b6:	7afb      	ldrb	r3, [r7, #11]
 80017b8:	3301      	adds	r3, #1
 80017ba:	72fb      	strb	r3, [r7, #11]
 80017bc:	7afb      	ldrb	r3, [r7, #11]
 80017be:	2b09      	cmp	r3, #9
 80017c0:	d9e6      	bls.n	8001790 <display_menu+0x35c>
 80017c2:	e004      	b.n	80017ce <display_menu+0x39a>
	if (!page) return;
 80017c4:	bf00      	nop
 80017c6:	e002      	b.n	80017ce <display_menu+0x39a>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 80017c8:	bf00      	nop
 80017ca:	e000      	b.n	80017ce <display_menu+0x39a>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 80017cc:	bf00      	nop
	}
}
 80017ce:	371c      	adds	r7, #28
 80017d0:	46bd      	mov	sp, r7
 80017d2:	bd90      	pop	{r4, r7, pc}
 80017d4:	20015acc 	.word	0x20015acc

080017d8 <button_pressed>:

void button_pressed(uint8_t button) {
 80017d8:	b580      	push	{r7, lr}
 80017da:	b084      	sub	sp, #16
 80017dc:	af00      	add	r7, sp, #0
 80017de:	4603      	mov	r3, r0
 80017e0:	71fb      	strb	r3, [r7, #7]
	static uint8_t in_device_menu = 0;
	static uint8_t active_device;
	if (!button || button > 9) return;
 80017e2:	79fb      	ldrb	r3, [r7, #7]
 80017e4:	2b00      	cmp	r3, #0
 80017e6:	f000 81f1 	beq.w	8001bcc <button_pressed+0x3f4>
 80017ea:	79fb      	ldrb	r3, [r7, #7]
 80017ec:	2b09      	cmp	r3, #9
 80017ee:	f200 81ed 	bhi.w	8001bcc <button_pressed+0x3f4>

	switch(current_menu) {
 80017f2:	4ba6      	ldr	r3, [pc, #664]	; (8001a8c <button_pressed+0x2b4>)
 80017f4:	781b      	ldrb	r3, [r3, #0]
 80017f6:	2b04      	cmp	r3, #4
 80017f8:	f200 81ea 	bhi.w	8001bd0 <button_pressed+0x3f8>
 80017fc:	a201      	add	r2, pc, #4	; (adr r2, 8001804 <button_pressed+0x2c>)
 80017fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001802:	bf00      	nop
 8001804:	08001819 	.word	0x08001819
 8001808:	080018df 	.word	0x080018df
 800180c:	08001929 	.word	0x08001929
 8001810:	08001a0f 	.word	0x08001a0f
 8001814:	08001ae9 	.word	0x08001ae9
	case main_menu:
		switch(button) {
 8001818:	79fb      	ldrb	r3, [r7, #7]
 800181a:	2b09      	cmp	r3, #9
 800181c:	d02b      	beq.n	8001876 <button_pressed+0x9e>
 800181e:	2b09      	cmp	r3, #9
 8001820:	dc39      	bgt.n	8001896 <button_pressed+0xbe>
 8001822:	2b07      	cmp	r3, #7
 8001824:	d002      	beq.n	800182c <button_pressed+0x54>
 8001826:	2b08      	cmp	r3, #8
 8001828:	d010      	beq.n	800184c <button_pressed+0x74>
 800182a:	e034      	b.n	8001896 <button_pressed+0xbe>
		case 7: // Previous
			display_menu(main_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 800182c:	4b98      	ldr	r3, [pc, #608]	; (8001a90 <button_pressed+0x2b8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	2b01      	cmp	r3, #1
 8001832:	d004      	beq.n	800183e <button_pressed+0x66>
 8001834:	4b96      	ldr	r3, [pc, #600]	; (8001a90 <button_pressed+0x2b8>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	3b01      	subs	r3, #1
 800183a:	b2db      	uxtb	r3, r3
 800183c:	e000      	b.n	8001840 <button_pressed+0x68>
 800183e:	2303      	movs	r3, #3
 8001840:	2200      	movs	r2, #0
 8001842:	4619      	mov	r1, r3
 8001844:	2000      	movs	r0, #0
 8001846:	f7ff fdf5 	bl	8001434 <display_menu>
			break;
 800184a:	e044      	b.n	80018d6 <button_pressed+0xfe>
		case 8: // Settings
			display_menu(settings_menu, 1, 0);
 800184c:	2200      	movs	r2, #0
 800184e:	2101      	movs	r1, #1
 8001850:	2001      	movs	r0, #1
 8001852:	f7ff fdef 	bl	8001434 <display_menu>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001856:	2303      	movs	r3, #3
 8001858:	73fb      	strb	r3, [r7, #15]
 800185a:	e006      	b.n	800186a <button_pressed+0x92>
				disable_button(i);
 800185c:	7bfb      	ldrb	r3, [r7, #15]
 800185e:	4618      	mov	r0, r3
 8001860:	f7fe fe98 	bl	8000594 <disable_button>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	3301      	adds	r3, #1
 8001868:	73fb      	strb	r3, [r7, #15]
 800186a:	7bfb      	ldrb	r3, [r7, #15]
 800186c:	2b08      	cmp	r3, #8
 800186e:	d9f5      	bls.n	800185c <button_pressed+0x84>
			}
			update_buttons();
 8001870:	f7fe ff1a 	bl	80006a8 <update_buttons>
			break;
 8001874:	e02f      	b.n	80018d6 <button_pressed+0xfe>
		case 9: // Next
			display_menu(main_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 8001876:	4b86      	ldr	r3, [pc, #536]	; (8001a90 <button_pressed+0x2b8>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b03      	cmp	r3, #3
 800187c:	d004      	beq.n	8001888 <button_pressed+0xb0>
 800187e:	4b84      	ldr	r3, [pc, #528]	; (8001a90 <button_pressed+0x2b8>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	3301      	adds	r3, #1
 8001884:	b2db      	uxtb	r3, r3
 8001886:	e000      	b.n	800188a <button_pressed+0xb2>
 8001888:	2301      	movs	r3, #1
 800188a:	2200      	movs	r2, #0
 800188c:	4619      	mov	r1, r3
 800188e:	2000      	movs	r0, #0
 8001890:	f7ff fdd0 	bl	8001434 <display_menu>
			break;
 8001894:	e01f      	b.n	80018d6 <button_pressed+0xfe>
		default: // Device Selected
			active_device =  button - 1 + (6 * (current_page - 1));
 8001896:	4b7e      	ldr	r3, [pc, #504]	; (8001a90 <button_pressed+0x2b8>)
 8001898:	781b      	ldrb	r3, [r3, #0]
 800189a:	461a      	mov	r2, r3
 800189c:	0052      	lsls	r2, r2, #1
 800189e:	4413      	add	r3, r2
 80018a0:	005b      	lsls	r3, r3, #1
 80018a2:	b2da      	uxtb	r2, r3
 80018a4:	79fb      	ldrb	r3, [r7, #7]
 80018a6:	4413      	add	r3, r2
 80018a8:	b2db      	uxtb	r3, r3
 80018aa:	3b07      	subs	r3, #7
 80018ac:	b2da      	uxtb	r2, r3
 80018ae:	4b79      	ldr	r3, [pc, #484]	; (8001a94 <button_pressed+0x2bc>)
 80018b0:	701a      	strb	r2, [r3, #0]
			display_menu(device_menu, 1, button - 1 + (6 * (current_page - 1)));
 80018b2:	4b77      	ldr	r3, [pc, #476]	; (8001a90 <button_pressed+0x2b8>)
 80018b4:	781b      	ldrb	r3, [r3, #0]
 80018b6:	461a      	mov	r2, r3
 80018b8:	0052      	lsls	r2, r2, #1
 80018ba:	4413      	add	r3, r2
 80018bc:	005b      	lsls	r3, r3, #1
 80018be:	b2da      	uxtb	r2, r3
 80018c0:	79fb      	ldrb	r3, [r7, #7]
 80018c2:	4413      	add	r3, r2
 80018c4:	b2db      	uxtb	r3, r3
 80018c6:	3b07      	subs	r3, #7
 80018c8:	b2db      	uxtb	r3, r3
 80018ca:	461a      	mov	r2, r3
 80018cc:	2101      	movs	r1, #1
 80018ce:	2002      	movs	r0, #2
 80018d0:	f7ff fdb0 	bl	8001434 <display_menu>
			break;
 80018d4:	bf00      	nop
		}
		in_device_menu = 0;
 80018d6:	4b70      	ldr	r3, [pc, #448]	; (8001a98 <button_pressed+0x2c0>)
 80018d8:	2200      	movs	r2, #0
 80018da:	701a      	strb	r2, [r3, #0]
		break;
 80018dc:	e179      	b.n	8001bd2 <button_pressed+0x3fa>

	case settings_menu:
		switch(button) {
 80018de:	79fb      	ldrb	r3, [r7, #7]
 80018e0:	2b09      	cmp	r3, #9
 80018e2:	d011      	beq.n	8001908 <button_pressed+0x130>
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	dc17      	bgt.n	8001918 <button_pressed+0x140>
 80018e8:	2b01      	cmp	r3, #1
 80018ea:	d002      	beq.n	80018f2 <button_pressed+0x11a>
 80018ec:	2b02      	cmp	r3, #2
 80018ee:	d003      	beq.n	80018f8 <button_pressed+0x120>
		case 9: // Main Menu
			display_menu(main_menu, 1, 0);
			enable_all_buttons();
			break;
		default:
			break;
 80018f0:	e012      	b.n	8001918 <button_pressed+0x140>
			init_xbee_communication();
 80018f2:	f7fe fff3 	bl	80008dc <init_xbee_communication>
			break;
 80018f6:	e010      	b.n	800191a <button_pressed+0x142>
			display_menu(learn_device_menu, 1, 0);
 80018f8:	2200      	movs	r2, #0
 80018fa:	2101      	movs	r1, #1
 80018fc:	2003      	movs	r0, #3
 80018fe:	f7ff fd99 	bl	8001434 <display_menu>
			enable_all_buttons();
 8001902:	f7fe fea7 	bl	8000654 <enable_all_buttons>
			break;
 8001906:	e008      	b.n	800191a <button_pressed+0x142>
			display_menu(main_menu, 1, 0);
 8001908:	2200      	movs	r2, #0
 800190a:	2101      	movs	r1, #1
 800190c:	2000      	movs	r0, #0
 800190e:	f7ff fd91 	bl	8001434 <display_menu>
			enable_all_buttons();
 8001912:	f7fe fe9f 	bl	8000654 <enable_all_buttons>
			break;
 8001916:	e000      	b.n	800191a <button_pressed+0x142>
			break;
 8001918:	bf00      	nop
		}
		in_device_menu = 0;
 800191a:	4b5f      	ldr	r3, [pc, #380]	; (8001a98 <button_pressed+0x2c0>)
 800191c:	2200      	movs	r2, #0
 800191e:	701a      	strb	r2, [r3, #0]
		active_device = 0;
 8001920:	4b5c      	ldr	r3, [pc, #368]	; (8001a94 <button_pressed+0x2bc>)
 8001922:	2200      	movs	r2, #0
 8001924:	701a      	strb	r2, [r3, #0]
		break;
 8001926:	e154      	b.n	8001bd2 <button_pressed+0x3fa>

	case device_menu:
		switch(button) {
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	2b09      	cmp	r3, #9
 800192c:	d02e      	beq.n	800198c <button_pressed+0x1b4>
 800192e:	2b09      	cmp	r3, #9
 8001930:	dc4e      	bgt.n	80019d0 <button_pressed+0x1f8>
 8001932:	2b07      	cmp	r3, #7
 8001934:	d002      	beq.n	800193c <button_pressed+0x164>
 8001936:	2b08      	cmp	r3, #8
 8001938:	d022      	beq.n	8001980 <button_pressed+0x1a8>
 800193a:	e049      	b.n	80019d0 <button_pressed+0x1f8>
		case 7: // Previous Page
			display_menu(
					device_menu,
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 800193c:	4b54      	ldr	r3, [pc, #336]	; (8001a90 <button_pressed+0x2b8>)
 800193e:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001940:	2b01      	cmp	r3, #1
 8001942:	d004      	beq.n	800194e <button_pressed+0x176>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8001944:	4b52      	ldr	r3, [pc, #328]	; (8001a90 <button_pressed+0x2b8>)
 8001946:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001948:	3b01      	subs	r3, #1
 800194a:	b2d9      	uxtb	r1, r3
 800194c:	e000      	b.n	8001950 <button_pressed+0x178>
 800194e:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001950:	4b51      	ldr	r3, [pc, #324]	; (8001a98 <button_pressed+0x2c0>)
 8001952:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001954:	2b00      	cmp	r3, #0
 8001956:	d10c      	bne.n	8001972 <button_pressed+0x19a>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001958:	4b4d      	ldr	r3, [pc, #308]	; (8001a90 <button_pressed+0x2b8>)
 800195a:	781b      	ldrb	r3, [r3, #0]
 800195c:	461a      	mov	r2, r3
 800195e:	0052      	lsls	r2, r2, #1
 8001960:	4413      	add	r3, r2
 8001962:	005b      	lsls	r3, r3, #1
 8001964:	b2da      	uxtb	r2, r3
 8001966:	79fb      	ldrb	r3, [r7, #7]
 8001968:	4413      	add	r3, r2
 800196a:	b2db      	uxtb	r3, r3
			display_menu(
 800196c:	3b06      	subs	r3, #6
 800196e:	b2db      	uxtb	r3, r3
 8001970:	e001      	b.n	8001976 <button_pressed+0x19e>
 8001972:	4b47      	ldr	r3, [pc, #284]	; (8001a90 <button_pressed+0x2b8>)
 8001974:	781b      	ldrb	r3, [r3, #0]
 8001976:	461a      	mov	r2, r3
 8001978:	2002      	movs	r0, #2
 800197a:	f7ff fd5b 	bl	8001434 <display_menu>
			);
			break;
 800197e:	e042      	b.n	8001a06 <button_pressed+0x22e>
		case 8: // Main Menu
			display_menu(main_menu, 1, 0);
 8001980:	2200      	movs	r2, #0
 8001982:	2101      	movs	r1, #1
 8001984:	2000      	movs	r0, #0
 8001986:	f7ff fd55 	bl	8001434 <display_menu>
			break;
 800198a:	e03c      	b.n	8001a06 <button_pressed+0x22e>
		case 9: // Next Page
			display_menu(
					device_menu,
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 800198c:	4b40      	ldr	r3, [pc, #256]	; (8001a90 <button_pressed+0x2b8>)
 800198e:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001990:	2b04      	cmp	r3, #4
 8001992:	d004      	beq.n	800199e <button_pressed+0x1c6>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001994:	4b3e      	ldr	r3, [pc, #248]	; (8001a90 <button_pressed+0x2b8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001998:	3301      	adds	r3, #1
 800199a:	b2d9      	uxtb	r1, r3
 800199c:	e000      	b.n	80019a0 <button_pressed+0x1c8>
 800199e:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button -1 + (6 * (current_page - 1)))
 80019a0:	4b3d      	ldr	r3, [pc, #244]	; (8001a98 <button_pressed+0x2c0>)
 80019a2:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 80019a4:	2b00      	cmp	r3, #0
 80019a6:	d10c      	bne.n	80019c2 <button_pressed+0x1ea>
					in_device_menu ? current_page : (button -1 + (6 * (current_page - 1)))
 80019a8:	4b39      	ldr	r3, [pc, #228]	; (8001a90 <button_pressed+0x2b8>)
 80019aa:	781b      	ldrb	r3, [r3, #0]
 80019ac:	461a      	mov	r2, r3
 80019ae:	0052      	lsls	r2, r2, #1
 80019b0:	4413      	add	r3, r2
 80019b2:	005b      	lsls	r3, r3, #1
 80019b4:	b2da      	uxtb	r2, r3
 80019b6:	79fb      	ldrb	r3, [r7, #7]
 80019b8:	4413      	add	r3, r2
 80019ba:	b2db      	uxtb	r3, r3
			display_menu(
 80019bc:	3b07      	subs	r3, #7
 80019be:	b2db      	uxtb	r3, r3
 80019c0:	e001      	b.n	80019c6 <button_pressed+0x1ee>
 80019c2:	4b33      	ldr	r3, [pc, #204]	; (8001a90 <button_pressed+0x2b8>)
 80019c4:	781b      	ldrb	r3, [r3, #0]
 80019c6:	461a      	mov	r2, r3
 80019c8:	2002      	movs	r0, #2
 80019ca:	f7ff fd33 	bl	8001434 <display_menu>
			);
			break;
 80019ce:	e01a      	b.n	8001a06 <button_pressed+0x22e>
		default: // Transmit IR Signal based on button!
			DeviceTransmit(controller.devices[active_device].commands[button - 1 + (6 * (current_page - 1))].Data);
 80019d0:	4b30      	ldr	r3, [pc, #192]	; (8001a94 <button_pressed+0x2bc>)
 80019d2:	781b      	ldrb	r3, [r3, #0]
 80019d4:	4618      	mov	r0, r3
 80019d6:	79fb      	ldrb	r3, [r7, #7]
 80019d8:	1e59      	subs	r1, r3, #1
 80019da:	4b2d      	ldr	r3, [pc, #180]	; (8001a90 <button_pressed+0x2b8>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	1e5a      	subs	r2, r3, #1
 80019e0:	4613      	mov	r3, r2
 80019e2:	005b      	lsls	r3, r3, #1
 80019e4:	4413      	add	r3, r2
 80019e6:	005b      	lsls	r3, r3, #1
 80019e8:	440b      	add	r3, r1
 80019ea:	22ac      	movs	r2, #172	; 0xac
 80019ec:	fb03 f202 	mul.w	r2, r3, r2
 80019f0:	f241 032c 	movw	r3, #4140	; 0x102c
 80019f4:	fb00 f303 	mul.w	r3, r0, r3
 80019f8:	4413      	add	r3, r2
 80019fa:	4a28      	ldr	r2, [pc, #160]	; (8001a9c <button_pressed+0x2c4>)
 80019fc:	4413      	add	r3, r2
 80019fe:	4618      	mov	r0, r3
 8001a00:	f7fe ffea 	bl	80009d8 <DeviceTransmit>
			break;
 8001a04:	bf00      	nop
		}
		in_device_menu = 1;
 8001a06:	4b24      	ldr	r3, [pc, #144]	; (8001a98 <button_pressed+0x2c0>)
 8001a08:	2201      	movs	r2, #1
 8001a0a:	701a      	strb	r2, [r3, #0]
		break;
 8001a0c:	e0e1      	b.n	8001bd2 <button_pressed+0x3fa>
	case learn_device_menu:
		switch(button) {
 8001a0e:	79fb      	ldrb	r3, [r7, #7]
 8001a10:	2b09      	cmp	r3, #9
 8001a12:	d02b      	beq.n	8001a6c <button_pressed+0x294>
 8001a14:	2b09      	cmp	r3, #9
 8001a16:	dc43      	bgt.n	8001aa0 <button_pressed+0x2c8>
 8001a18:	2b07      	cmp	r3, #7
 8001a1a:	d002      	beq.n	8001a22 <button_pressed+0x24a>
 8001a1c:	2b08      	cmp	r3, #8
 8001a1e:	d010      	beq.n	8001a42 <button_pressed+0x26a>
 8001a20:	e03e      	b.n	8001aa0 <button_pressed+0x2c8>
		case 7: // Previous
			display_menu(learn_device_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 8001a22:	4b1b      	ldr	r3, [pc, #108]	; (8001a90 <button_pressed+0x2b8>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b01      	cmp	r3, #1
 8001a28:	d004      	beq.n	8001a34 <button_pressed+0x25c>
 8001a2a:	4b19      	ldr	r3, [pc, #100]	; (8001a90 <button_pressed+0x2b8>)
 8001a2c:	781b      	ldrb	r3, [r3, #0]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	b2db      	uxtb	r3, r3
 8001a32:	e000      	b.n	8001a36 <button_pressed+0x25e>
 8001a34:	2303      	movs	r3, #3
 8001a36:	2200      	movs	r2, #0
 8001a38:	4619      	mov	r1, r3
 8001a3a:	2003      	movs	r0, #3
 8001a3c:	f7ff fcfa 	bl	8001434 <display_menu>
			break;
 8001a40:	e04e      	b.n	8001ae0 <button_pressed+0x308>
		case 8: // Settings
			display_menu(settings_menu, 1, 0);
 8001a42:	2200      	movs	r2, #0
 8001a44:	2101      	movs	r1, #1
 8001a46:	2001      	movs	r0, #1
 8001a48:	f7ff fcf4 	bl	8001434 <display_menu>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001a4c:	2303      	movs	r3, #3
 8001a4e:	73bb      	strb	r3, [r7, #14]
 8001a50:	e006      	b.n	8001a60 <button_pressed+0x288>
				disable_button(i);
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	4618      	mov	r0, r3
 8001a56:	f7fe fd9d 	bl	8000594 <disable_button>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001a5a:	7bbb      	ldrb	r3, [r7, #14]
 8001a5c:	3301      	adds	r3, #1
 8001a5e:	73bb      	strb	r3, [r7, #14]
 8001a60:	7bbb      	ldrb	r3, [r7, #14]
 8001a62:	2b08      	cmp	r3, #8
 8001a64:	d9f5      	bls.n	8001a52 <button_pressed+0x27a>
			}
			update_buttons();
 8001a66:	f7fe fe1f 	bl	80006a8 <update_buttons>
			break;
 8001a6a:	e039      	b.n	8001ae0 <button_pressed+0x308>
		case 9: // Next
			display_menu(learn_device_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 8001a6c:	4b08      	ldr	r3, [pc, #32]	; (8001a90 <button_pressed+0x2b8>)
 8001a6e:	781b      	ldrb	r3, [r3, #0]
 8001a70:	2b03      	cmp	r3, #3
 8001a72:	d004      	beq.n	8001a7e <button_pressed+0x2a6>
 8001a74:	4b06      	ldr	r3, [pc, #24]	; (8001a90 <button_pressed+0x2b8>)
 8001a76:	781b      	ldrb	r3, [r3, #0]
 8001a78:	3301      	adds	r3, #1
 8001a7a:	b2db      	uxtb	r3, r3
 8001a7c:	e000      	b.n	8001a80 <button_pressed+0x2a8>
 8001a7e:	2301      	movs	r3, #1
 8001a80:	2200      	movs	r2, #0
 8001a82:	4619      	mov	r1, r3
 8001a84:	2003      	movs	r0, #3
 8001a86:	f7ff fcd5 	bl	8001434 <display_menu>
			break;
 8001a8a:	e029      	b.n	8001ae0 <button_pressed+0x308>
 8001a8c:	20001708 	.word	0x20001708
 8001a90:	20015acb 	.word	0x20015acb
 8001a94:	20015b2f 	.word	0x20015b2f
 8001a98:	20015b30 	.word	0x20015b30
 8001a9c:	2000170c 	.word	0x2000170c
		default: // Device Selected
			active_device =  button - 1 + (6 * (current_page - 1));
 8001aa0:	4b4d      	ldr	r3, [pc, #308]	; (8001bd8 <button_pressed+0x400>)
 8001aa2:	781b      	ldrb	r3, [r3, #0]
 8001aa4:	461a      	mov	r2, r3
 8001aa6:	0052      	lsls	r2, r2, #1
 8001aa8:	4413      	add	r3, r2
 8001aaa:	005b      	lsls	r3, r3, #1
 8001aac:	b2da      	uxtb	r2, r3
 8001aae:	79fb      	ldrb	r3, [r7, #7]
 8001ab0:	4413      	add	r3, r2
 8001ab2:	b2db      	uxtb	r3, r3
 8001ab4:	3b07      	subs	r3, #7
 8001ab6:	b2da      	uxtb	r2, r3
 8001ab8:	4b48      	ldr	r3, [pc, #288]	; (8001bdc <button_pressed+0x404>)
 8001aba:	701a      	strb	r2, [r3, #0]
			display_menu(learn_command_menu, 1, button - 1 + (6 * (current_page - 1)));
 8001abc:	4b46      	ldr	r3, [pc, #280]	; (8001bd8 <button_pressed+0x400>)
 8001abe:	781b      	ldrb	r3, [r3, #0]
 8001ac0:	461a      	mov	r2, r3
 8001ac2:	0052      	lsls	r2, r2, #1
 8001ac4:	4413      	add	r3, r2
 8001ac6:	005b      	lsls	r3, r3, #1
 8001ac8:	b2da      	uxtb	r2, r3
 8001aca:	79fb      	ldrb	r3, [r7, #7]
 8001acc:	4413      	add	r3, r2
 8001ace:	b2db      	uxtb	r3, r3
 8001ad0:	3b07      	subs	r3, #7
 8001ad2:	b2db      	uxtb	r3, r3
 8001ad4:	461a      	mov	r2, r3
 8001ad6:	2101      	movs	r1, #1
 8001ad8:	2004      	movs	r0, #4
 8001ada:	f7ff fcab 	bl	8001434 <display_menu>
			break;
 8001ade:	bf00      	nop
		}
		in_device_menu = 0;	
 8001ae0:	4b3f      	ldr	r3, [pc, #252]	; (8001be0 <button_pressed+0x408>)
 8001ae2:	2200      	movs	r2, #0
 8001ae4:	701a      	strb	r2, [r3, #0]
		break;
 8001ae6:	e074      	b.n	8001bd2 <button_pressed+0x3fa>
	case learn_command_menu:
		switch(button) {
 8001ae8:	79fb      	ldrb	r3, [r7, #7]
 8001aea:	2b09      	cmp	r3, #9
 8001aec:	d02e      	beq.n	8001b4c <button_pressed+0x374>
 8001aee:	2b09      	cmp	r3, #9
 8001af0:	dc4e      	bgt.n	8001b90 <button_pressed+0x3b8>
 8001af2:	2b07      	cmp	r3, #7
 8001af4:	d002      	beq.n	8001afc <button_pressed+0x324>
 8001af6:	2b08      	cmp	r3, #8
 8001af8:	d022      	beq.n	8001b40 <button_pressed+0x368>
 8001afa:	e049      	b.n	8001b90 <button_pressed+0x3b8>
		case 7: // Previous Page
			display_menu(
					learn_command_menu,
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8001afc:	4b36      	ldr	r3, [pc, #216]	; (8001bd8 <button_pressed+0x400>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001b00:	2b01      	cmp	r3, #1
 8001b02:	d004      	beq.n	8001b0e <button_pressed+0x336>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8001b04:	4b34      	ldr	r3, [pc, #208]	; (8001bd8 <button_pressed+0x400>)
 8001b06:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001b08:	3b01      	subs	r3, #1
 8001b0a:	b2d9      	uxtb	r1, r3
 8001b0c:	e000      	b.n	8001b10 <button_pressed+0x338>
 8001b0e:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8001b10:	4b33      	ldr	r3, [pc, #204]	; (8001be0 <button_pressed+0x408>)
 8001b12:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001b14:	2b00      	cmp	r3, #0
 8001b16:	d10c      	bne.n	8001b32 <button_pressed+0x35a>
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8001b18:	4b2f      	ldr	r3, [pc, #188]	; (8001bd8 <button_pressed+0x400>)
 8001b1a:	781b      	ldrb	r3, [r3, #0]
 8001b1c:	461a      	mov	r2, r3
 8001b1e:	0052      	lsls	r2, r2, #1
 8001b20:	4413      	add	r3, r2
 8001b22:	005b      	lsls	r3, r3, #1
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	79fb      	ldrb	r3, [r7, #7]
 8001b28:	4413      	add	r3, r2
 8001b2a:	b2db      	uxtb	r3, r3
			display_menu(
 8001b2c:	3b07      	subs	r3, #7
 8001b2e:	b2db      	uxtb	r3, r3
 8001b30:	e001      	b.n	8001b36 <button_pressed+0x35e>
 8001b32:	4b29      	ldr	r3, [pc, #164]	; (8001bd8 <button_pressed+0x400>)
 8001b34:	781b      	ldrb	r3, [r3, #0]
 8001b36:	461a      	mov	r2, r3
 8001b38:	2004      	movs	r0, #4
 8001b3a:	f7ff fc7b 	bl	8001434 <display_menu>
			);
			break;
 8001b3e:	e041      	b.n	8001bc4 <button_pressed+0x3ec>
		case 8: // Main Menu
			display_menu(learn_device_menu, 1, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2101      	movs	r1, #1
 8001b44:	2003      	movs	r0, #3
 8001b46:	f7ff fc75 	bl	8001434 <display_menu>
			break;
 8001b4a:	e03b      	b.n	8001bc4 <button_pressed+0x3ec>
		case 9: // Next Page
			display_menu(
					learn_command_menu,
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001b4c:	4b22      	ldr	r3, [pc, #136]	; (8001bd8 <button_pressed+0x400>)
 8001b4e:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001b50:	2b04      	cmp	r3, #4
 8001b52:	d004      	beq.n	8001b5e <button_pressed+0x386>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001b54:	4b20      	ldr	r3, [pc, #128]	; (8001bd8 <button_pressed+0x400>)
 8001b56:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001b58:	3301      	adds	r3, #1
 8001b5a:	b2d9      	uxtb	r1, r3
 8001b5c:	e000      	b.n	8001b60 <button_pressed+0x388>
 8001b5e:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8001b60:	4b1f      	ldr	r3, [pc, #124]	; (8001be0 <button_pressed+0x408>)
 8001b62:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001b64:	2b00      	cmp	r3, #0
 8001b66:	d10c      	bne.n	8001b82 <button_pressed+0x3aa>
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8001b68:	4b1b      	ldr	r3, [pc, #108]	; (8001bd8 <button_pressed+0x400>)
 8001b6a:	781b      	ldrb	r3, [r3, #0]
 8001b6c:	461a      	mov	r2, r3
 8001b6e:	0052      	lsls	r2, r2, #1
 8001b70:	4413      	add	r3, r2
 8001b72:	005b      	lsls	r3, r3, #1
 8001b74:	b2da      	uxtb	r2, r3
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	4413      	add	r3, r2
 8001b7a:	b2db      	uxtb	r3, r3
			display_menu(
 8001b7c:	3b07      	subs	r3, #7
 8001b7e:	b2db      	uxtb	r3, r3
 8001b80:	e001      	b.n	8001b86 <button_pressed+0x3ae>
 8001b82:	4b15      	ldr	r3, [pc, #84]	; (8001bd8 <button_pressed+0x400>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	461a      	mov	r2, r3
 8001b88:	2004      	movs	r0, #4
 8001b8a:	f7ff fc53 	bl	8001434 <display_menu>
			);
			break;
 8001b8e:	e019      	b.n	8001bc4 <button_pressed+0x3ec>
		default: // Learn IR Signal based on button!
			disable_all_buttons();
 8001b90:	f7fe fd75 	bl	800067e <disable_all_buttons>
			update_buttons();
 8001b94:	f7fe fd88 	bl	80006a8 <update_buttons>
			display_menu(awaiting_menu,1,0);
 8001b98:	2200      	movs	r2, #0
 8001b9a:	2101      	movs	r1, #1
 8001b9c:	2005      	movs	r0, #5
 8001b9e:	f7ff fc49 	bl	8001434 <display_menu>
			Learn_command(button - 1 + (6 * (current_page - 1)),active_device);
 8001ba2:	79fb      	ldrb	r3, [r7, #7]
 8001ba4:	1e59      	subs	r1, r3, #1
 8001ba6:	4b0c      	ldr	r3, [pc, #48]	; (8001bd8 <button_pressed+0x400>)
 8001ba8:	781b      	ldrb	r3, [r3, #0]
 8001baa:	1e5a      	subs	r2, r3, #1
 8001bac:	4613      	mov	r3, r2
 8001bae:	005b      	lsls	r3, r3, #1
 8001bb0:	4413      	add	r3, r2
 8001bb2:	005b      	lsls	r3, r3, #1
 8001bb4:	440b      	add	r3, r1
 8001bb6:	4a09      	ldr	r2, [pc, #36]	; (8001bdc <button_pressed+0x404>)
 8001bb8:	7812      	ldrb	r2, [r2, #0]
 8001bba:	4611      	mov	r1, r2
 8001bbc:	4618      	mov	r0, r3
 8001bbe:	f000 f811 	bl	8001be4 <Learn_command>
			break;
 8001bc2:	bf00      	nop
		}
		in_device_menu = 1;
 8001bc4:	4b06      	ldr	r3, [pc, #24]	; (8001be0 <button_pressed+0x408>)
 8001bc6:	2201      	movs	r2, #1
 8001bc8:	701a      	strb	r2, [r3, #0]
		break;
 8001bca:	e002      	b.n	8001bd2 <button_pressed+0x3fa>
	if (!button || button > 9) return;
 8001bcc:	bf00      	nop
 8001bce:	e000      	b.n	8001bd2 <button_pressed+0x3fa>
	default:	
		break;
 8001bd0:	bf00      	nop
	}
}
 8001bd2:	3710      	adds	r7, #16
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	20015acb 	.word	0x20015acb
 8001bdc:	20015b2f 	.word	0x20015b2f
 8001be0:	20015b30 	.word	0x20015b30

08001be4 <Learn_command>:
void Learn_command(uint8_t com,uint8_t device){	
 8001be4:	b590      	push	{r4, r7, lr}
 8001be6:	b085      	sub	sp, #20
 8001be8:	af00      	add	r7, sp, #0
 8001bea:	4603      	mov	r3, r0
 8001bec:	460a      	mov	r2, r1
 8001bee:	71fb      	strb	r3, [r7, #7]
 8001bf0:	4613      	mov	r3, r2
 8001bf2:	71bb      	strb	r3, [r7, #6]
	received = 0;
 8001bf4:	4b1b      	ldr	r3, [pc, #108]	; (8001c64 <Learn_command+0x80>)
 8001bf6:	2200      	movs	r2, #0
 8001bf8:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //starts timer 2;
 8001bfa:	2100      	movs	r1, #0
 8001bfc:	481a      	ldr	r0, [pc, #104]	; (8001c68 <Learn_command+0x84>)
 8001bfe:	f003 fba1 	bl	8005344 <HAL_TIM_IC_Start_IT>
	while(!received);
 8001c02:	bf00      	nop
 8001c04:	4b17      	ldr	r3, [pc, #92]	; (8001c64 <Learn_command+0x80>)
 8001c06:	781b      	ldrb	r3, [r3, #0]
 8001c08:	2b00      	cmp	r3, #0
 8001c0a:	d0fb      	beq.n	8001c04 <Learn_command+0x20>
	//writeback
	for(uint32_t i= 0; i<dataLen;++i)
 8001c0c:	2300      	movs	r3, #0
 8001c0e:	60fb      	str	r3, [r7, #12]
 8001c10:	e016      	b.n	8001c40 <Learn_command+0x5c>
		controller.devices[device].commands[com].Data[i] = data[i];
 8001c12:	79bb      	ldrb	r3, [r7, #6]
 8001c14:	79fa      	ldrb	r2, [r7, #7]
 8001c16:	4815      	ldr	r0, [pc, #84]	; (8001c6c <Learn_command+0x88>)
 8001c18:	68f9      	ldr	r1, [r7, #12]
 8001c1a:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
 8001c1e:	4914      	ldr	r1, [pc, #80]	; (8001c70 <Learn_command+0x8c>)
 8001c20:	2056      	movs	r0, #86	; 0x56
 8001c22:	fb00 f202 	mul.w	r2, r0, r2
 8001c26:	f640 0016 	movw	r0, #2070	; 0x816
 8001c2a:	fb00 f303 	mul.w	r3, r0, r3
 8001c2e:	441a      	add	r2, r3
 8001c30:	68fb      	ldr	r3, [r7, #12]
 8001c32:	4413      	add	r3, r2
 8001c34:	4622      	mov	r2, r4
 8001c36:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i= 0; i<dataLen;++i)
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	3301      	adds	r3, #1
 8001c3e:	60fb      	str	r3, [r7, #12]
 8001c40:	4b0c      	ldr	r3, [pc, #48]	; (8001c74 <Learn_command+0x90>)
 8001c42:	681b      	ldr	r3, [r3, #0]
 8001c44:	68fa      	ldr	r2, [r7, #12]
 8001c46:	429a      	cmp	r2, r3
 8001c48:	d3e3      	bcc.n	8001c12 <Learn_command+0x2e>
	enable_all_buttons();
 8001c4a:	f7fe fd03 	bl	8000654 <enable_all_buttons>
	update_buttons();
 8001c4e:	f7fe fd2b 	bl	80006a8 <update_buttons>
	display_menu(main_menu,1,0);
 8001c52:	2200      	movs	r2, #0
 8001c54:	2101      	movs	r1, #1
 8001c56:	2000      	movs	r0, #0
 8001c58:	f7ff fbec 	bl	8001434 <display_menu>
}
 8001c5c:	bf00      	nop
 8001c5e:	3714      	adds	r7, #20
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd90      	pop	{r4, r7, pc}
 8001c64:	20015ac8 	.word	0x20015ac8
 8001c68:	200015a4 	.word	0x200015a4
 8001c6c:	20015a28 	.word	0x20015a28
 8001c70:	2000170c 	.word	0x2000170c
 8001c74:	20000004 	.word	0x20000004

08001c78 <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 8001c78:	b580      	push	{r7, lr}
 8001c7a:	b084      	sub	sp, #16
 8001c7c:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 8001c7e:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 8001c82:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 8001c84:	1d3a      	adds	r2, r7, #4
 8001c86:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001c8a:	9300      	str	r3, [sp, #0]
 8001c8c:	2302      	movs	r3, #2
 8001c8e:	21a2      	movs	r1, #162	; 0xa2
 8001c90:	4803      	ldr	r0, [pc, #12]	; (8001ca0 <disable_OLED_EEPROM_writes+0x28>)
 8001c92:	f001 feb7 	bl	8003a04 <HAL_I2C_Master_Transmit>
}
 8001c96:	bf00      	nop
 8001c98:	3708      	adds	r7, #8
 8001c9a:	46bd      	mov	sp, r7
 8001c9c:	bd80      	pop	{r7, pc}
 8001c9e:	bf00      	nop
 8001ca0:	200014b0 	.word	0x200014b0

08001ca4 <drop_all_CS>:

void drop_all_CS(void) {
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 8001caa:	4b0a      	ldr	r3, [pc, #40]	; (8001cd4 <drop_all_CS+0x30>)
 8001cac:	2200      	movs	r2, #0
 8001cae:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 8001cb0:	4b08      	ldr	r3, [pc, #32]	; (8001cd4 <drop_all_CS+0x30>)
 8001cb2:	2200      	movs	r2, #0
 8001cb4:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8001cb6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cba:	9300      	str	r3, [sp, #0]
 8001cbc:	2303      	movs	r3, #3
 8001cbe:	4a05      	ldr	r2, [pc, #20]	; (8001cd4 <drop_all_CS+0x30>)
 8001cc0:	21a2      	movs	r1, #162	; 0xa2
 8001cc2:	4805      	ldr	r0, [pc, #20]	; (8001cd8 <drop_all_CS+0x34>)
 8001cc4:	f001 fe9e 	bl	8003a04 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001cc8:	2001      	movs	r0, #1
 8001cca:	f000 febd 	bl	8002a48 <HAL_Delay>
}
 8001cce:	bf00      	nop
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}
 8001cd4:	20001418 	.word	0x20001418
 8001cd8:	200014b0 	.word	0x200014b0

08001cdc <raise_all_CS>:

void raise_all_CS(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	b082      	sub	sp, #8
 8001ce0:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 8001ce2:	4b09      	ldr	r3, [pc, #36]	; (8001d08 <raise_all_CS+0x2c>)
 8001ce4:	22ff      	movs	r2, #255	; 0xff
 8001ce6:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8001ce8:	4b07      	ldr	r3, [pc, #28]	; (8001d08 <raise_all_CS+0x2c>)
 8001cea:	2201      	movs	r2, #1
 8001cec:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 8001cee:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001cf2:	9300      	str	r3, [sp, #0]
 8001cf4:	2303      	movs	r3, #3
 8001cf6:	4a04      	ldr	r2, [pc, #16]	; (8001d08 <raise_all_CS+0x2c>)
 8001cf8:	21a2      	movs	r1, #162	; 0xa2
 8001cfa:	4804      	ldr	r0, [pc, #16]	; (8001d0c <raise_all_CS+0x30>)
 8001cfc:	f001 fe82 	bl	8003a04 <HAL_I2C_Master_Transmit>
}
 8001d00:	bf00      	nop
 8001d02:	46bd      	mov	sp, r7
 8001d04:	bd80      	pop	{r7, pc}
 8001d06:	bf00      	nop
 8001d08:	20001418 	.word	0x20001418
 8001d0c:	200014b0 	.word	0x200014b0

08001d10 <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 8001d10:	b580      	push	{r7, lr}
 8001d12:	b084      	sub	sp, #16
 8001d14:	af02      	add	r7, sp, #8
 8001d16:	4603      	mov	r3, r0
 8001d18:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 8001d1a:	4b1a      	ldr	r3, [pc, #104]	; (8001d84 <drop_CS+0x74>)
 8001d1c:	22ff      	movs	r2, #255	; 0xff
 8001d1e:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8001d20:	4b18      	ldr	r3, [pc, #96]	; (8001d84 <drop_CS+0x74>)
 8001d22:	2201      	movs	r2, #1
 8001d24:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 8001d26:	79fb      	ldrb	r3, [r7, #7]
 8001d28:	2b09      	cmp	r3, #9
 8001d2a:	d107      	bne.n	8001d3c <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 8001d2c:	4b15      	ldr	r3, [pc, #84]	; (8001d84 <drop_CS+0x74>)
 8001d2e:	789b      	ldrb	r3, [r3, #2]
 8001d30:	f023 0301 	bic.w	r3, r3, #1
 8001d34:	b2da      	uxtb	r2, r3
 8001d36:	4b13      	ldr	r3, [pc, #76]	; (8001d84 <drop_CS+0x74>)
 8001d38:	709a      	strb	r2, [r3, #2]
 8001d3a:	e012      	b.n	8001d62 <drop_CS+0x52>
	} else if (display <= 8) {
 8001d3c:	79fb      	ldrb	r3, [r7, #7]
 8001d3e:	2b08      	cmp	r3, #8
 8001d40:	d80f      	bhi.n	8001d62 <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 8001d42:	4b10      	ldr	r3, [pc, #64]	; (8001d84 <drop_CS+0x74>)
 8001d44:	785b      	ldrb	r3, [r3, #1]
 8001d46:	b25a      	sxtb	r2, r3
 8001d48:	79fb      	ldrb	r3, [r7, #7]
 8001d4a:	3b01      	subs	r3, #1
 8001d4c:	2101      	movs	r1, #1
 8001d4e:	fa01 f303 	lsl.w	r3, r1, r3
 8001d52:	b25b      	sxtb	r3, r3
 8001d54:	43db      	mvns	r3, r3
 8001d56:	b25b      	sxtb	r3, r3
 8001d58:	4013      	ands	r3, r2
 8001d5a:	b25b      	sxtb	r3, r3
 8001d5c:	b2da      	uxtb	r2, r3
 8001d5e:	4b09      	ldr	r3, [pc, #36]	; (8001d84 <drop_CS+0x74>)
 8001d60:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 8001d62:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001d66:	9300      	str	r3, [sp, #0]
 8001d68:	2303      	movs	r3, #3
 8001d6a:	4a06      	ldr	r2, [pc, #24]	; (8001d84 <drop_CS+0x74>)
 8001d6c:	21a2      	movs	r1, #162	; 0xa2
 8001d6e:	4806      	ldr	r0, [pc, #24]	; (8001d88 <drop_CS+0x78>)
 8001d70:	f001 fe48 	bl	8003a04 <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 8001d74:	2001      	movs	r0, #1
 8001d76:	f000 fe67 	bl	8002a48 <HAL_Delay>
}
 8001d7a:	bf00      	nop
 8001d7c:	3708      	adds	r7, #8
 8001d7e:	46bd      	mov	sp, r7
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20001418 	.word	0x20001418
 8001d88:	200014b0 	.word	0x200014b0

08001d8c <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b082      	sub	sp, #8
 8001d90:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8001d92:	4b37      	ldr	r3, [pc, #220]	; (8001e70 <init_displays+0xe4>)
 8001d94:	681b      	ldr	r3, [r3, #0]
 8001d96:	4a36      	ldr	r2, [pc, #216]	; (8001e70 <init_displays+0xe4>)
 8001d98:	f023 0301 	bic.w	r3, r3, #1
 8001d9c:	6013      	str	r3, [r2, #0]
	disable_OLED_EEPROM_writes();
 8001d9e:	f7ff ff6b 	bl	8001c78 <disable_OLED_EEPROM_writes>
	raise_all_CS();
 8001da2:	f7ff ff9b 	bl	8001cdc <raise_all_CS>
	DC_HIGH();
 8001da6:	2201      	movs	r2, #1
 8001da8:	2101      	movs	r1, #1
 8001daa:	4832      	ldr	r0, [pc, #200]	; (8001e74 <init_displays+0xe8>)
 8001dac:	f001 fccc 	bl	8003748 <HAL_GPIO_WritePin>
	RST_HIGH();
 8001db0:	2201      	movs	r2, #1
 8001db2:	2102      	movs	r1, #2
 8001db4:	482f      	ldr	r0, [pc, #188]	; (8001e74 <init_displays+0xe8>)
 8001db6:	f001 fcc7 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 8001dba:	200a      	movs	r0, #10
 8001dbc:	f000 fe44 	bl	8002a48 <HAL_Delay>
	RST_LOW();
 8001dc0:	2200      	movs	r2, #0
 8001dc2:	2102      	movs	r1, #2
 8001dc4:	482b      	ldr	r0, [pc, #172]	; (8001e74 <init_displays+0xe8>)
 8001dc6:	f001 fcbf 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 8001dca:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001dce:	2201      	movs	r2, #1
 8001dd0:	4929      	ldr	r1, [pc, #164]	; (8001e78 <init_displays+0xec>)
 8001dd2:	482a      	ldr	r0, [pc, #168]	; (8001e7c <init_displays+0xf0>)
 8001dd4:	f002 fe3f 	bl	8004a56 <HAL_SPI_Transmit>
	HAL_Delay(10);
 8001dd8:	200a      	movs	r0, #10
 8001dda:	f000 fe35 	bl	8002a48 <HAL_Delay>
	RST_HIGH();
 8001dde:	2201      	movs	r2, #1
 8001de0:	2102      	movs	r1, #2
 8001de2:	4824      	ldr	r0, [pc, #144]	; (8001e74 <init_displays+0xe8>)
 8001de4:	f001 fcb0 	bl	8003748 <HAL_GPIO_WritePin>

	DC_LOW();
 8001de8:	2200      	movs	r2, #0
 8001dea:	2101      	movs	r1, #1
 8001dec:	4821      	ldr	r0, [pc, #132]	; (8001e74 <init_displays+0xe8>)
 8001dee:	f001 fcab 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001df2:	2001      	movs	r0, #1
 8001df4:	f000 fe28 	bl	8002a48 <HAL_Delay>

	drop_all_CS();
 8001df8:	f7ff ff54 	bl	8001ca4 <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	71fb      	strb	r3, [r7, #7]
 8001e00:	e002      	b.n	8001e08 <init_displays+0x7c>
 8001e02:	79fb      	ldrb	r3, [r7, #7]
 8001e04:	3301      	adds	r3, #1
 8001e06:	71fb      	strb	r3, [r7, #7]
 8001e08:	79fb      	ldrb	r3, [r7, #7]
 8001e0a:	2b4f      	cmp	r3, #79	; 0x4f
 8001e0c:	d9f9      	bls.n	8001e02 <init_displays+0x76>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8001e0e:	2300      	movs	r3, #0
 8001e10:	80bb      	strh	r3, [r7, #4]
 8001e12:	e014      	b.n	8001e3e <init_displays+0xb2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 8001e14:	88bb      	ldrh	r3, [r7, #4]
 8001e16:	4a18      	ldr	r2, [pc, #96]	; (8001e78 <init_displays+0xec>)
 8001e18:	1899      	adds	r1, r3, r2
 8001e1a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001e1e:	2201      	movs	r2, #1
 8001e20:	4816      	ldr	r0, [pc, #88]	; (8001e7c <init_displays+0xf0>)
 8001e22:	f002 fe18 	bl	8004a56 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001e26:	2300      	movs	r3, #0
 8001e28:	70fb      	strb	r3, [r7, #3]
 8001e2a:	e002      	b.n	8001e32 <init_displays+0xa6>
 8001e2c:	78fb      	ldrb	r3, [r7, #3]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	70fb      	strb	r3, [r7, #3]
 8001e32:	78fb      	ldrb	r3, [r7, #3]
 8001e34:	2b09      	cmp	r3, #9
 8001e36:	d9f9      	bls.n	8001e2c <init_displays+0xa0>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8001e38:	88bb      	ldrh	r3, [r7, #4]
 8001e3a:	3301      	adds	r3, #1
 8001e3c:	80bb      	strh	r3, [r7, #4]
 8001e3e:	88bb      	ldrh	r3, [r7, #4]
 8001e40:	2b19      	cmp	r3, #25
 8001e42:	d9e7      	bls.n	8001e14 <init_displays+0x88>
	}

	raise_all_CS();
 8001e44:	f7ff ff4a 	bl	8001cdc <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 8001e48:	2201      	movs	r2, #1
 8001e4a:	2101      	movs	r1, #1
 8001e4c:	4809      	ldr	r0, [pc, #36]	; (8001e74 <init_displays+0xe8>)
 8001e4e:	f001 fc7b 	bl	8003748 <HAL_GPIO_WritePin>
	START_BUTTON_POLL();
 8001e52:	4b07      	ldr	r3, [pc, #28]	; (8001e70 <init_displays+0xe4>)
 8001e54:	681b      	ldr	r3, [r3, #0]
 8001e56:	4a06      	ldr	r2, [pc, #24]	; (8001e70 <init_displays+0xe4>)
 8001e58:	f043 0301 	orr.w	r3, r3, #1
 8001e5c:	6013      	str	r3, [r2, #0]
	erase_buffer();
 8001e5e:	f000 f903 	bl	8002068 <erase_buffer>
	update_all_displays();
 8001e62:	f000 f889 	bl	8001f78 <update_all_displays>
}
 8001e66:	bf00      	nop
 8001e68:	3708      	adds	r7, #8
 8001e6a:	46bd      	mov	sp, r7
 8001e6c:	bd80      	pop	{r7, pc}
 8001e6e:	bf00      	nop
 8001e70:	40000c00 	.word	0x40000c00
 8001e74:	40020000 	.word	0x40020000
 8001e78:	2000141c 	.word	0x2000141c
 8001e7c:	20001504 	.word	0x20001504

08001e80 <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b086      	sub	sp, #24
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	4603      	mov	r3, r0
 8001e88:	71fb      	strb	r3, [r7, #7]
	STOP_BUTTON_POLL();
 8001e8a:	4b36      	ldr	r3, [pc, #216]	; (8001f64 <update_display+0xe4>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	4a35      	ldr	r2, [pc, #212]	; (8001f64 <update_display+0xe4>)
 8001e90:	f023 0301 	bic.w	r3, r3, #1
 8001e94:	6013      	str	r3, [r2, #0]
	DC_LOW();
 8001e96:	2200      	movs	r2, #0
 8001e98:	2101      	movs	r1, #1
 8001e9a:	4833      	ldr	r0, [pc, #204]	; (8001f68 <update_display+0xe8>)
 8001e9c:	f001 fc54 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001ea0:	2001      	movs	r0, #1
 8001ea2:	f000 fdd1 	bl	8002a48 <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 8001ea6:	79fb      	ldrb	r3, [r7, #7]
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	f7ff ff31 	bl	8001d10 <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001eae:	2300      	movs	r3, #0
 8001eb0:	75fb      	strb	r3, [r7, #23]
 8001eb2:	e002      	b.n	8001eba <update_display+0x3a>
 8001eb4:	7dfb      	ldrb	r3, [r7, #23]
 8001eb6:	3301      	adds	r3, #1
 8001eb8:	75fb      	strb	r3, [r7, #23]
 8001eba:	7dfb      	ldrb	r3, [r7, #23]
 8001ebc:	2b4f      	cmp	r3, #79	; 0x4f
 8001ebe:	d9f9      	bls.n	8001eb4 <update_display+0x34>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001ec0:	2300      	movs	r3, #0
 8001ec2:	82bb      	strh	r3, [r7, #20]
 8001ec4:	e014      	b.n	8001ef0 <update_display+0x70>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8001ec6:	8abb      	ldrh	r3, [r7, #20]
 8001ec8:	4a28      	ldr	r2, [pc, #160]	; (8001f6c <update_display+0xec>)
 8001eca:	1899      	adds	r1, r3, r2
 8001ecc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001ed0:	2201      	movs	r2, #1
 8001ed2:	4827      	ldr	r0, [pc, #156]	; (8001f70 <update_display+0xf0>)
 8001ed4:	f002 fdbf 	bl	8004a56 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001ed8:	2300      	movs	r3, #0
 8001eda:	74fb      	strb	r3, [r7, #19]
 8001edc:	e002      	b.n	8001ee4 <update_display+0x64>
 8001ede:	7cfb      	ldrb	r3, [r7, #19]
 8001ee0:	3301      	adds	r3, #1
 8001ee2:	74fb      	strb	r3, [r7, #19]
 8001ee4:	7cfb      	ldrb	r3, [r7, #19]
 8001ee6:	2b09      	cmp	r3, #9
 8001ee8:	d9f9      	bls.n	8001ede <update_display+0x5e>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001eea:	8abb      	ldrh	r3, [r7, #20]
 8001eec:	3301      	adds	r3, #1
 8001eee:	82bb      	strh	r3, [r7, #20]
 8001ef0:	8abb      	ldrh	r3, [r7, #20]
 8001ef2:	2b05      	cmp	r3, #5
 8001ef4:	d9e7      	bls.n	8001ec6 <update_display+0x46>
	}

	DC_HIGH();
 8001ef6:	2201      	movs	r2, #1
 8001ef8:	2101      	movs	r1, #1
 8001efa:	481b      	ldr	r0, [pc, #108]	; (8001f68 <update_display+0xe8>)
 8001efc:	f001 fc24 	bl	8003748 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001f00:	2300      	movs	r3, #0
 8001f02:	74bb      	strb	r3, [r7, #18]
 8001f04:	e002      	b.n	8001f0c <update_display+0x8c>
 8001f06:	7cbb      	ldrb	r3, [r7, #18]
 8001f08:	3301      	adds	r3, #1
 8001f0a:	74bb      	strb	r3, [r7, #18]
 8001f0c:	7cbb      	ldrb	r3, [r7, #18]
 8001f0e:	2b4f      	cmp	r3, #79	; 0x4f
 8001f10:	d9f9      	bls.n	8001f06 <update_display+0x86>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001f12:	2300      	movs	r3, #0
 8001f14:	823b      	strh	r3, [r7, #16]
 8001f16:	e014      	b.n	8001f42 <update_display+0xc2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8001f18:	8a3b      	ldrh	r3, [r7, #16]
 8001f1a:	4a16      	ldr	r2, [pc, #88]	; (8001f74 <update_display+0xf4>)
 8001f1c:	1899      	adds	r1, r3, r2
 8001f1e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001f22:	2201      	movs	r2, #1
 8001f24:	4812      	ldr	r0, [pc, #72]	; (8001f70 <update_display+0xf0>)
 8001f26:	f002 fd96 	bl	8004a56 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8001f2a:	2300      	movs	r3, #0
 8001f2c:	73fb      	strb	r3, [r7, #15]
 8001f2e:	e002      	b.n	8001f36 <update_display+0xb6>
 8001f30:	7bfb      	ldrb	r3, [r7, #15]
 8001f32:	3301      	adds	r3, #1
 8001f34:	73fb      	strb	r3, [r7, #15]
 8001f36:	7bfb      	ldrb	r3, [r7, #15]
 8001f38:	2b09      	cmp	r3, #9
 8001f3a:	d9f9      	bls.n	8001f30 <update_display+0xb0>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8001f3c:	8a3b      	ldrh	r3, [r7, #16]
 8001f3e:	3301      	adds	r3, #1
 8001f40:	823b      	strh	r3, [r7, #16]
 8001f42:	8a3b      	ldrh	r3, [r7, #16]
 8001f44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8001f48:	d3e6      	bcc.n	8001f18 <update_display+0x98>
	}

	raise_all_CS();
 8001f4a:	f7ff fec7 	bl	8001cdc <raise_all_CS>
	START_BUTTON_POLL();
 8001f4e:	4b05      	ldr	r3, [pc, #20]	; (8001f64 <update_display+0xe4>)
 8001f50:	681b      	ldr	r3, [r3, #0]
 8001f52:	4a04      	ldr	r2, [pc, #16]	; (8001f64 <update_display+0xe4>)
 8001f54:	f043 0301 	orr.w	r3, r3, #1
 8001f58:	6013      	str	r3, [r2, #0]
}
 8001f5a:	bf00      	nop
 8001f5c:	3718      	adds	r7, #24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40000c00 	.word	0x40000c00
 8001f68:	40020000 	.word	0x40020000
 8001f6c:	20001438 	.word	0x20001438
 8001f70:	20001504 	.word	0x20001504
 8001f74:	20015b34 	.word	0x20015b34

08001f78 <update_all_displays>:

void update_all_displays() {
 8001f78:	b580      	push	{r7, lr}
 8001f7a:	b084      	sub	sp, #16
 8001f7c:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <update_all_displays+0xdc>)
 8001f80:	681b      	ldr	r3, [r3, #0]
 8001f82:	4a34      	ldr	r2, [pc, #208]	; (8002054 <update_all_displays+0xdc>)
 8001f84:	f023 0301 	bic.w	r3, r3, #1
 8001f88:	6013      	str	r3, [r2, #0]
	DC_LOW();
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	2101      	movs	r1, #1
 8001f8e:	4832      	ldr	r0, [pc, #200]	; (8002058 <update_all_displays+0xe0>)
 8001f90:	f001 fbda 	bl	8003748 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001f94:	2001      	movs	r0, #1
 8001f96:	f000 fd57 	bl	8002a48 <HAL_Delay>
	drop_all_CS();
 8001f9a:	f7ff fe83 	bl	8001ca4 <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	73fb      	strb	r3, [r7, #15]
 8001fa2:	e002      	b.n	8001faa <update_all_displays+0x32>
 8001fa4:	7bfb      	ldrb	r3, [r7, #15]
 8001fa6:	3301      	adds	r3, #1
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	7bfb      	ldrb	r3, [r7, #15]
 8001fac:	2b4f      	cmp	r3, #79	; 0x4f
 8001fae:	d9f9      	bls.n	8001fa4 <update_all_displays+0x2c>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001fb0:	2300      	movs	r3, #0
 8001fb2:	81bb      	strh	r3, [r7, #12]
 8001fb4:	e014      	b.n	8001fe0 <update_all_displays+0x68>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 8001fb6:	89bb      	ldrh	r3, [r7, #12]
 8001fb8:	4a28      	ldr	r2, [pc, #160]	; (800205c <update_all_displays+0xe4>)
 8001fba:	1899      	adds	r1, r3, r2
 8001fbc:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8001fc0:	2201      	movs	r2, #1
 8001fc2:	4827      	ldr	r0, [pc, #156]	; (8002060 <update_all_displays+0xe8>)
 8001fc4:	f002 fd47 	bl	8004a56 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 8001fc8:	2300      	movs	r3, #0
 8001fca:	72fb      	strb	r3, [r7, #11]
 8001fcc:	e002      	b.n	8001fd4 <update_all_displays+0x5c>
 8001fce:	7afb      	ldrb	r3, [r7, #11]
 8001fd0:	3301      	adds	r3, #1
 8001fd2:	72fb      	strb	r3, [r7, #11]
 8001fd4:	7afb      	ldrb	r3, [r7, #11]
 8001fd6:	2b09      	cmp	r3, #9
 8001fd8:	d9f9      	bls.n	8001fce <update_all_displays+0x56>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 8001fda:	89bb      	ldrh	r3, [r7, #12]
 8001fdc:	3301      	adds	r3, #1
 8001fde:	81bb      	strh	r3, [r7, #12]
 8001fe0:	89bb      	ldrh	r3, [r7, #12]
 8001fe2:	2b05      	cmp	r3, #5
 8001fe4:	d9e7      	bls.n	8001fb6 <update_all_displays+0x3e>
	}

	DC_HIGH();
 8001fe6:	2201      	movs	r2, #1
 8001fe8:	2101      	movs	r1, #1
 8001fea:	481b      	ldr	r0, [pc, #108]	; (8002058 <update_all_displays+0xe0>)
 8001fec:	f001 fbac 	bl	8003748 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 8001ff0:	2300      	movs	r3, #0
 8001ff2:	72bb      	strb	r3, [r7, #10]
 8001ff4:	e002      	b.n	8001ffc <update_all_displays+0x84>
 8001ff6:	7abb      	ldrb	r3, [r7, #10]
 8001ff8:	3301      	adds	r3, #1
 8001ffa:	72bb      	strb	r3, [r7, #10]
 8001ffc:	7abb      	ldrb	r3, [r7, #10]
 8001ffe:	2b4f      	cmp	r3, #79	; 0x4f
 8002000:	d9f9      	bls.n	8001ff6 <update_all_displays+0x7e>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002002:	2300      	movs	r3, #0
 8002004:	813b      	strh	r3, [r7, #8]
 8002006:	e014      	b.n	8002032 <update_all_displays+0xba>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	4a16      	ldr	r2, [pc, #88]	; (8002064 <update_all_displays+0xec>)
 800200c:	1899      	adds	r1, r3, r2
 800200e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002012:	2201      	movs	r2, #1
 8002014:	4812      	ldr	r0, [pc, #72]	; (8002060 <update_all_displays+0xe8>)
 8002016:	f002 fd1e 	bl	8004a56 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 800201a:	2300      	movs	r3, #0
 800201c:	71fb      	strb	r3, [r7, #7]
 800201e:	e002      	b.n	8002026 <update_all_displays+0xae>
 8002020:	79fb      	ldrb	r3, [r7, #7]
 8002022:	3301      	adds	r3, #1
 8002024:	71fb      	strb	r3, [r7, #7]
 8002026:	79fb      	ldrb	r3, [r7, #7]
 8002028:	2b09      	cmp	r3, #9
 800202a:	d9f9      	bls.n	8002020 <update_all_displays+0xa8>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 800202c:	893b      	ldrh	r3, [r7, #8]
 800202e:	3301      	adds	r3, #1
 8002030:	813b      	strh	r3, [r7, #8]
 8002032:	893b      	ldrh	r3, [r7, #8]
 8002034:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002038:	d3e6      	bcc.n	8002008 <update_all_displays+0x90>
	}
	raise_all_CS();
 800203a:	f7ff fe4f 	bl	8001cdc <raise_all_CS>
	START_BUTTON_POLL();
 800203e:	4b05      	ldr	r3, [pc, #20]	; (8002054 <update_all_displays+0xdc>)
 8002040:	681b      	ldr	r3, [r3, #0]
 8002042:	4a04      	ldr	r2, [pc, #16]	; (8002054 <update_all_displays+0xdc>)
 8002044:	f043 0301 	orr.w	r3, r3, #1
 8002048:	6013      	str	r3, [r2, #0]
}
 800204a:	bf00      	nop
 800204c:	3710      	adds	r7, #16
 800204e:	46bd      	mov	sp, r7
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	40000c00 	.word	0x40000c00
 8002058:	40020000 	.word	0x40020000
 800205c:	20001438 	.word	0x20001438
 8002060:	20001504 	.word	0x20001504
 8002064:	20015b34 	.word	0x20015b34

08002068 <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 8002068:	b480      	push	{r7}
 800206a:	b083      	sub	sp, #12
 800206c:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 800206e:	2300      	movs	r3, #0
 8002070:	80fb      	strh	r3, [r7, #6]
 8002072:	e006      	b.n	8002082 <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 8002074:	88fb      	ldrh	r3, [r7, #6]
 8002076:	4a08      	ldr	r2, [pc, #32]	; (8002098 <erase_buffer+0x30>)
 8002078:	2100      	movs	r1, #0
 800207a:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 800207c:	88fb      	ldrh	r3, [r7, #6]
 800207e:	3301      	adds	r3, #1
 8002080:	80fb      	strh	r3, [r7, #6]
 8002082:	88fb      	ldrh	r3, [r7, #6]
 8002084:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002088:	d3f4      	bcc.n	8002074 <erase_buffer+0xc>
	}
}
 800208a:	bf00      	nop
 800208c:	bf00      	nop
 800208e:	370c      	adds	r7, #12
 8002090:	46bd      	mov	sp, r7
 8002092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002096:	4770      	bx	lr
 8002098:	20015b34 	.word	0x20015b34

0800209c <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 800209c:	b480      	push	{r7}
 800209e:	b083      	sub	sp, #12
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	4603      	mov	r3, r0
 80020a4:	71fb      	strb	r3, [r7, #7]
 80020a6:	460b      	mov	r3, r1
 80020a8:	71bb      	strb	r3, [r7, #6]
 80020aa:	4613      	mov	r3, r2
 80020ac:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 80020ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b2:	2b00      	cmp	r3, #0
 80020b4:	db3d      	blt.n	8002132 <draw_pixel+0x96>
 80020b6:	79bb      	ldrb	r3, [r7, #6]
 80020b8:	2b1f      	cmp	r3, #31
 80020ba:	d83a      	bhi.n	8002132 <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 80020bc:	797b      	ldrb	r3, [r7, #5]
 80020be:	2b00      	cmp	r3, #0
 80020c0:	d01a      	beq.n	80020f8 <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 80020c2:	79fa      	ldrb	r2, [r7, #7]
 80020c4:	79bb      	ldrb	r3, [r7, #6]
 80020c6:	08db      	lsrs	r3, r3, #3
 80020c8:	b2d8      	uxtb	r0, r3
 80020ca:	4603      	mov	r3, r0
 80020cc:	01db      	lsls	r3, r3, #7
 80020ce:	4413      	add	r3, r2
 80020d0:	4a1b      	ldr	r2, [pc, #108]	; (8002140 <draw_pixel+0xa4>)
 80020d2:	5cd3      	ldrb	r3, [r2, r3]
 80020d4:	b25a      	sxtb	r2, r3
 80020d6:	79bb      	ldrb	r3, [r7, #6]
 80020d8:	f003 0307 	and.w	r3, r3, #7
 80020dc:	2101      	movs	r1, #1
 80020de:	fa01 f303 	lsl.w	r3, r1, r3
 80020e2:	b25b      	sxtb	r3, r3
 80020e4:	4313      	orrs	r3, r2
 80020e6:	b259      	sxtb	r1, r3
 80020e8:	79fa      	ldrb	r2, [r7, #7]
 80020ea:	4603      	mov	r3, r0
 80020ec:	01db      	lsls	r3, r3, #7
 80020ee:	4413      	add	r3, r2
 80020f0:	b2c9      	uxtb	r1, r1
 80020f2:	4a13      	ldr	r2, [pc, #76]	; (8002140 <draw_pixel+0xa4>)
 80020f4:	54d1      	strb	r1, [r2, r3]
 80020f6:	e01d      	b.n	8002134 <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 80020f8:	79fa      	ldrb	r2, [r7, #7]
 80020fa:	79bb      	ldrb	r3, [r7, #6]
 80020fc:	08db      	lsrs	r3, r3, #3
 80020fe:	b2d8      	uxtb	r0, r3
 8002100:	4603      	mov	r3, r0
 8002102:	01db      	lsls	r3, r3, #7
 8002104:	4413      	add	r3, r2
 8002106:	4a0e      	ldr	r2, [pc, #56]	; (8002140 <draw_pixel+0xa4>)
 8002108:	5cd3      	ldrb	r3, [r2, r3]
 800210a:	b25a      	sxtb	r2, r3
 800210c:	79bb      	ldrb	r3, [r7, #6]
 800210e:	f003 0307 	and.w	r3, r3, #7
 8002112:	2101      	movs	r1, #1
 8002114:	fa01 f303 	lsl.w	r3, r1, r3
 8002118:	b25b      	sxtb	r3, r3
 800211a:	43db      	mvns	r3, r3
 800211c:	b25b      	sxtb	r3, r3
 800211e:	4013      	ands	r3, r2
 8002120:	b259      	sxtb	r1, r3
 8002122:	79fa      	ldrb	r2, [r7, #7]
 8002124:	4603      	mov	r3, r0
 8002126:	01db      	lsls	r3, r3, #7
 8002128:	4413      	add	r3, r2
 800212a:	b2c9      	uxtb	r1, r1
 800212c:	4a04      	ldr	r2, [pc, #16]	; (8002140 <draw_pixel+0xa4>)
 800212e:	54d1      	strb	r1, [r2, r3]
 8002130:	e000      	b.n	8002134 <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 8002132:	bf00      	nop
	}
}
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr
 800213e:	bf00      	nop
 8002140:	20015b34 	.word	0x20015b34

08002144 <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 8002144:	b590      	push	{r4, r7, lr}
 8002146:	b085      	sub	sp, #20
 8002148:	af02      	add	r7, sp, #8
 800214a:	4604      	mov	r4, r0
 800214c:	4608      	mov	r0, r1
 800214e:	4611      	mov	r1, r2
 8002150:	461a      	mov	r2, r3
 8002152:	4623      	mov	r3, r4
 8002154:	71fb      	strb	r3, [r7, #7]
 8002156:	4603      	mov	r3, r0
 8002158:	71bb      	strb	r3, [r7, #6]
 800215a:	460b      	mov	r3, r1
 800215c:	717b      	strb	r3, [r7, #5]
 800215e:	4613      	mov	r3, r2
 8002160:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 8002162:	79fb      	ldrb	r3, [r7, #7]
 8002164:	2b1f      	cmp	r3, #31
 8002166:	d913      	bls.n	8002190 <draw_char+0x4c>
 8002168:	79fb      	ldrb	r3, [r7, #7]
 800216a:	2b7e      	cmp	r3, #126	; 0x7e
 800216c:	d810      	bhi.n	8002190 <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 800216e:	79fb      	ldrb	r3, [r7, #7]
 8002170:	3b20      	subs	r3, #32
 8002172:	2236      	movs	r2, #54	; 0x36
 8002174:	fb02 f303 	mul.w	r3, r2, r3
 8002178:	4a07      	ldr	r2, [pc, #28]	; (8002198 <draw_char+0x54>)
 800217a:	1898      	adds	r0, r3, r2
 800217c:	797a      	ldrb	r2, [r7, #5]
 800217e:	79b9      	ldrb	r1, [r7, #6]
 8002180:	793b      	ldrb	r3, [r7, #4]
 8002182:	9301      	str	r3, [sp, #4]
 8002184:	231b      	movs	r3, #27
 8002186:	9300      	str	r3, [sp, #0]
 8002188:	230c      	movs	r3, #12
 800218a:	f000 f807 	bl	800219c <draw_bmp>
 800218e:	e000      	b.n	8002192 <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 8002190:	bf00      	nop
}
 8002192:	370c      	adds	r7, #12
 8002194:	46bd      	mov	sp, r7
 8002196:	bd90      	pop	{r4, r7, pc}
 8002198:	2000000c 	.word	0x2000000c

0800219c <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 800219c:	b580      	push	{r7, lr}
 800219e:	b084      	sub	sp, #16
 80021a0:	af00      	add	r7, sp, #0
 80021a2:	6078      	str	r0, [r7, #4]
 80021a4:	4608      	mov	r0, r1
 80021a6:	4611      	mov	r1, r2
 80021a8:	461a      	mov	r2, r3
 80021aa:	4603      	mov	r3, r0
 80021ac:	70fb      	strb	r3, [r7, #3]
 80021ae:	460b      	mov	r3, r1
 80021b0:	70bb      	strb	r3, [r7, #2]
 80021b2:	4613      	mov	r3, r2
 80021b4:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 80021b6:	787b      	ldrb	r3, [r7, #1]
 80021b8:	3307      	adds	r3, #7
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	da00      	bge.n	80021c0 <draw_bmp+0x24>
 80021be:	3307      	adds	r3, #7
 80021c0:	10db      	asrs	r3, r3, #3
 80021c2:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 80021c4:	2300      	movs	r3, #0
 80021c6:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 80021c8:	2300      	movs	r3, #0
 80021ca:	81bb      	strh	r3, [r7, #12]
 80021cc:	e047      	b.n	800225e <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 80021ce:	2300      	movs	r3, #0
 80021d0:	817b      	strh	r3, [r7, #10]
 80021d2:	e036      	b.n	8002242 <draw_bmp+0xa6>
			if (i & 7)
 80021d4:	897b      	ldrh	r3, [r7, #10]
 80021d6:	f003 0307 	and.w	r3, r3, #7
 80021da:	2b00      	cmp	r3, #0
 80021dc:	d003      	beq.n	80021e6 <draw_bmp+0x4a>
				b <<= 1;
 80021de:	7bfb      	ldrb	r3, [r7, #15]
 80021e0:	005b      	lsls	r3, r3, #1
 80021e2:	73fb      	strb	r3, [r7, #15]
 80021e4:	e012      	b.n	800220c <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 80021e6:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80021ea:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80021ee:	fb03 f202 	mul.w	r2, r3, r2
 80021f2:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	da00      	bge.n	80021fc <draw_bmp+0x60>
 80021fa:	3307      	adds	r3, #7
 80021fc:	10db      	asrs	r3, r3, #3
 80021fe:	b21b      	sxth	r3, r3
 8002200:	4413      	add	r3, r2
 8002202:	461a      	mov	r2, r3
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	4413      	add	r3, r2
 8002208:	781b      	ldrb	r3, [r3, #0]
 800220a:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 800220c:	897b      	ldrh	r3, [r7, #10]
 800220e:	b2da      	uxtb	r2, r3
 8002210:	78fb      	ldrb	r3, [r7, #3]
 8002212:	4413      	add	r3, r2
 8002214:	b2d8      	uxtb	r0, r3
 8002216:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800221a:	2b00      	cmp	r3, #0
 800221c:	db06      	blt.n	800222c <draw_bmp+0x90>
 800221e:	7f3b      	ldrb	r3, [r7, #28]
 8002220:	2b00      	cmp	r3, #0
 8002222:	bf0c      	ite	eq
 8002224:	2301      	moveq	r3, #1
 8002226:	2300      	movne	r3, #0
 8002228:	b2db      	uxtb	r3, r3
 800222a:	e000      	b.n	800222e <draw_bmp+0x92>
 800222c:	7f3b      	ldrb	r3, [r7, #28]
 800222e:	78b9      	ldrb	r1, [r7, #2]
 8002230:	461a      	mov	r2, r3
 8002232:	f7ff ff33 	bl	800209c <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 8002236:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800223a:	b29b      	uxth	r3, r3
 800223c:	3301      	adds	r3, #1
 800223e:	b29b      	uxth	r3, r3
 8002240:	817b      	strh	r3, [r7, #10]
 8002242:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002246:	787b      	ldrb	r3, [r7, #1]
 8002248:	429a      	cmp	r2, r3
 800224a:	dbc3      	blt.n	80021d4 <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 800224c:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002250:	b29b      	uxth	r3, r3
 8002252:	3301      	adds	r3, #1
 8002254:	b29b      	uxth	r3, r3
 8002256:	81bb      	strh	r3, [r7, #12]
 8002258:	78bb      	ldrb	r3, [r7, #2]
 800225a:	3301      	adds	r3, #1
 800225c:	70bb      	strb	r3, [r7, #2]
 800225e:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 8002262:	7e3b      	ldrb	r3, [r7, #24]
 8002264:	429a      	cmp	r2, r3
 8002266:	dbb2      	blt.n	80021ce <draw_bmp+0x32>
		}
	}
}
 8002268:	bf00      	nop
 800226a:	bf00      	nop
 800226c:	3710      	adds	r7, #16
 800226e:	46bd      	mov	sp, r7
 8002270:	bd80      	pop	{r7, pc}

08002272 <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 8002272:	b580      	push	{r7, lr}
 8002274:	b084      	sub	sp, #16
 8002276:	af00      	add	r7, sp, #0
 8002278:	6078      	str	r0, [r7, #4]
 800227a:	460b      	mov	r3, r1
 800227c:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 800227e:	6878      	ldr	r0, [r7, #4]
 8002280:	f7fd ffa8 	bl	80001d4 <strlen>
 8002284:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 8002286:	68fb      	ldr	r3, [r7, #12]
 8002288:	2b00      	cmp	r3, #0
 800228a:	d02c      	beq.n	80022e6 <draw_string+0x74>
 800228c:	68fb      	ldr	r3, [r7, #12]
 800228e:	2b0a      	cmp	r3, #10
 8002290:	d829      	bhi.n	80022e6 <draw_string+0x74>

    uint8_t x = DISPLAY_WIDTH/2;
 8002292:	2340      	movs	r3, #64	; 0x40
 8002294:	72fb      	strb	r3, [r7, #11]
    if (len%2) {
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	f003 0301 	and.w	r3, r3, #1
 800229c:	2b00      	cmp	r3, #0
 800229e:	d005      	beq.n	80022ac <draw_string+0x3a>
        x -= FONT_WIDTH/2;
 80022a0:	7afb      	ldrb	r3, [r7, #11]
 80022a2:	3b06      	subs	r3, #6
 80022a4:	72fb      	strb	r3, [r7, #11]
        len -= 1;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	3b01      	subs	r3, #1
 80022aa:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 80022ac:	68fa      	ldr	r2, [r7, #12]
 80022ae:	4613      	mov	r3, r2
 80022b0:	005b      	lsls	r3, r3, #1
 80022b2:	4413      	add	r3, r2
 80022b4:	009b      	lsls	r3, r3, #2
 80022b6:	085b      	lsrs	r3, r3, #1
 80022b8:	b2db      	uxtb	r3, r3
 80022ba:	7afa      	ldrb	r2, [r7, #11]
 80022bc:	1ad3      	subs	r3, r2, r3
 80022be:	72fb      	strb	r3, [r7, #11]

    while(*str) {
 80022c0:	e00c      	b.n	80022dc <draw_string+0x6a>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	7818      	ldrb	r0, [r3, #0]
 80022c6:	78fb      	ldrb	r3, [r7, #3]
 80022c8:	7af9      	ldrb	r1, [r7, #11]
 80022ca:	2203      	movs	r2, #3
 80022cc:	f7ff ff3a 	bl	8002144 <draw_char>
        x += FONT_WIDTH;
 80022d0:	7afb      	ldrb	r3, [r7, #11]
 80022d2:	330c      	adds	r3, #12
 80022d4:	72fb      	strb	r3, [r7, #11]
        ++str;
 80022d6:	687b      	ldr	r3, [r7, #4]
 80022d8:	3301      	adds	r3, #1
 80022da:	607b      	str	r3, [r7, #4]
    while(*str) {
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d1ee      	bne.n	80022c2 <draw_string+0x50>
 80022e4:	e000      	b.n	80022e8 <draw_string+0x76>
    if (len <= 0 || len > 10) return;
 80022e6:	bf00      	nop
    }
}
 80022e8:	3710      	adds	r7, #16
 80022ea:	46bd      	mov	sp, r7
 80022ec:	bd80      	pop	{r7, pc}
	...

080022f0 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80022f0:	b580      	push	{r7, lr}
 80022f2:	b082      	sub	sp, #8
 80022f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80022f6:	2300      	movs	r3, #0
 80022f8:	607b      	str	r3, [r7, #4]
 80022fa:	4b10      	ldr	r3, [pc, #64]	; (800233c <HAL_MspInit+0x4c>)
 80022fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80022fe:	4a0f      	ldr	r2, [pc, #60]	; (800233c <HAL_MspInit+0x4c>)
 8002300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002304:	6453      	str	r3, [r2, #68]	; 0x44
 8002306:	4b0d      	ldr	r3, [pc, #52]	; (800233c <HAL_MspInit+0x4c>)
 8002308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800230a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800230e:	607b      	str	r3, [r7, #4]
 8002310:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002312:	2300      	movs	r3, #0
 8002314:	603b      	str	r3, [r7, #0]
 8002316:	4b09      	ldr	r3, [pc, #36]	; (800233c <HAL_MspInit+0x4c>)
 8002318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800231a:	4a08      	ldr	r2, [pc, #32]	; (800233c <HAL_MspInit+0x4c>)
 800231c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002320:	6413      	str	r3, [r2, #64]	; 0x40
 8002322:	4b06      	ldr	r3, [pc, #24]	; (800233c <HAL_MspInit+0x4c>)
 8002324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002326:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800232a:	603b      	str	r3, [r7, #0]
 800232c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800232e:	2007      	movs	r0, #7
 8002330:	f001 f82c 	bl	800338c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002334:	bf00      	nop
 8002336:	3708      	adds	r7, #8
 8002338:	46bd      	mov	sp, r7
 800233a:	bd80      	pop	{r7, pc}
 800233c:	40023800 	.word	0x40023800

08002340 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b08a      	sub	sp, #40	; 0x28
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002348:	f107 0314 	add.w	r3, r7, #20
 800234c:	2200      	movs	r2, #0
 800234e:	601a      	str	r2, [r3, #0]
 8002350:	605a      	str	r2, [r3, #4]
 8002352:	609a      	str	r2, [r3, #8]
 8002354:	60da      	str	r2, [r3, #12]
 8002356:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4a17      	ldr	r2, [pc, #92]	; (80023bc <HAL_ADC_MspInit+0x7c>)
 800235e:	4293      	cmp	r3, r2
 8002360:	d127      	bne.n	80023b2 <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8002362:	2300      	movs	r3, #0
 8002364:	613b      	str	r3, [r7, #16]
 8002366:	4b16      	ldr	r3, [pc, #88]	; (80023c0 <HAL_ADC_MspInit+0x80>)
 8002368:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800236a:	4a15      	ldr	r2, [pc, #84]	; (80023c0 <HAL_ADC_MspInit+0x80>)
 800236c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002370:	6453      	str	r3, [r2, #68]	; 0x44
 8002372:	4b13      	ldr	r3, [pc, #76]	; (80023c0 <HAL_ADC_MspInit+0x80>)
 8002374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002376:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800237a:	613b      	str	r3, [r7, #16]
 800237c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800237e:	2300      	movs	r3, #0
 8002380:	60fb      	str	r3, [r7, #12]
 8002382:	4b0f      	ldr	r3, [pc, #60]	; (80023c0 <HAL_ADC_MspInit+0x80>)
 8002384:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002386:	4a0e      	ldr	r2, [pc, #56]	; (80023c0 <HAL_ADC_MspInit+0x80>)
 8002388:	f043 0301 	orr.w	r3, r3, #1
 800238c:	6313      	str	r3, [r2, #48]	; 0x30
 800238e:	4b0c      	ldr	r3, [pc, #48]	; (80023c0 <HAL_ADC_MspInit+0x80>)
 8002390:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002392:	f003 0301 	and.w	r3, r3, #1
 8002396:	60fb      	str	r3, [r7, #12]
 8002398:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800239a:	2310      	movs	r3, #16
 800239c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800239e:	2303      	movs	r3, #3
 80023a0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80023a2:	2300      	movs	r3, #0
 80023a4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80023a6:	f107 0314 	add.w	r3, r7, #20
 80023aa:	4619      	mov	r1, r3
 80023ac:	4805      	ldr	r0, [pc, #20]	; (80023c4 <HAL_ADC_MspInit+0x84>)
 80023ae:	f001 f82f 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80023b2:	bf00      	nop
 80023b4:	3728      	adds	r7, #40	; 0x28
 80023b6:	46bd      	mov	sp, r7
 80023b8:	bd80      	pop	{r7, pc}
 80023ba:	bf00      	nop
 80023bc:	40012000 	.word	0x40012000
 80023c0:	40023800 	.word	0x40023800
 80023c4:	40020000 	.word	0x40020000

080023c8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80023c8:	b580      	push	{r7, lr}
 80023ca:	b08a      	sub	sp, #40	; 0x28
 80023cc:	af00      	add	r7, sp, #0
 80023ce:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023d0:	f107 0314 	add.w	r3, r7, #20
 80023d4:	2200      	movs	r2, #0
 80023d6:	601a      	str	r2, [r3, #0]
 80023d8:	605a      	str	r2, [r3, #4]
 80023da:	609a      	str	r2, [r3, #8]
 80023dc:	60da      	str	r2, [r3, #12]
 80023de:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4a19      	ldr	r2, [pc, #100]	; (800244c <HAL_I2C_MspInit+0x84>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d12c      	bne.n	8002444 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80023ea:	2300      	movs	r3, #0
 80023ec:	613b      	str	r3, [r7, #16]
 80023ee:	4b18      	ldr	r3, [pc, #96]	; (8002450 <HAL_I2C_MspInit+0x88>)
 80023f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023f2:	4a17      	ldr	r2, [pc, #92]	; (8002450 <HAL_I2C_MspInit+0x88>)
 80023f4:	f043 0302 	orr.w	r3, r3, #2
 80023f8:	6313      	str	r3, [r2, #48]	; 0x30
 80023fa:	4b15      	ldr	r3, [pc, #84]	; (8002450 <HAL_I2C_MspInit+0x88>)
 80023fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80023fe:	f003 0302 	and.w	r3, r3, #2
 8002402:	613b      	str	r3, [r7, #16]
 8002404:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002406:	f44f 7340 	mov.w	r3, #768	; 0x300
 800240a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800240c:	2312      	movs	r3, #18
 800240e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002410:	2300      	movs	r3, #0
 8002412:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002414:	2303      	movs	r3, #3
 8002416:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002418:	2304      	movs	r3, #4
 800241a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800241c:	f107 0314 	add.w	r3, r7, #20
 8002420:	4619      	mov	r1, r3
 8002422:	480c      	ldr	r0, [pc, #48]	; (8002454 <HAL_I2C_MspInit+0x8c>)
 8002424:	f000 fff4 	bl	8003410 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002428:	2300      	movs	r3, #0
 800242a:	60fb      	str	r3, [r7, #12]
 800242c:	4b08      	ldr	r3, [pc, #32]	; (8002450 <HAL_I2C_MspInit+0x88>)
 800242e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002430:	4a07      	ldr	r2, [pc, #28]	; (8002450 <HAL_I2C_MspInit+0x88>)
 8002432:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002436:	6413      	str	r3, [r2, #64]	; 0x40
 8002438:	4b05      	ldr	r3, [pc, #20]	; (8002450 <HAL_I2C_MspInit+0x88>)
 800243a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800243c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002440:	60fb      	str	r3, [r7, #12]
 8002442:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002444:	bf00      	nop
 8002446:	3728      	adds	r7, #40	; 0x28
 8002448:	46bd      	mov	sp, r7
 800244a:	bd80      	pop	{r7, pc}
 800244c:	40005400 	.word	0x40005400
 8002450:	40023800 	.word	0x40023800
 8002454:	40020400 	.word	0x40020400

08002458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b08a      	sub	sp, #40	; 0x28
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0314 	add.w	r3, r7, #20
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
 800246e:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	4a28      	ldr	r2, [pc, #160]	; (8002518 <HAL_SPI_MspInit+0xc0>)
 8002476:	4293      	cmp	r3, r2
 8002478:	d14a      	bne.n	8002510 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 800247a:	2300      	movs	r3, #0
 800247c:	613b      	str	r3, [r7, #16]
 800247e:	4b27      	ldr	r3, [pc, #156]	; (800251c <HAL_SPI_MspInit+0xc4>)
 8002480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002482:	4a26      	ldr	r2, [pc, #152]	; (800251c <HAL_SPI_MspInit+0xc4>)
 8002484:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002488:	6413      	str	r3, [r2, #64]	; 0x40
 800248a:	4b24      	ldr	r3, [pc, #144]	; (800251c <HAL_SPI_MspInit+0xc4>)
 800248c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800248e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002492:	613b      	str	r3, [r7, #16]
 8002494:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002496:	2300      	movs	r3, #0
 8002498:	60fb      	str	r3, [r7, #12]
 800249a:	4b20      	ldr	r3, [pc, #128]	; (800251c <HAL_SPI_MspInit+0xc4>)
 800249c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800249e:	4a1f      	ldr	r2, [pc, #124]	; (800251c <HAL_SPI_MspInit+0xc4>)
 80024a0:	f043 0304 	orr.w	r3, r3, #4
 80024a4:	6313      	str	r3, [r2, #48]	; 0x30
 80024a6:	4b1d      	ldr	r3, [pc, #116]	; (800251c <HAL_SPI_MspInit+0xc4>)
 80024a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024aa:	f003 0304 	and.w	r3, r3, #4
 80024ae:	60fb      	str	r3, [r7, #12]
 80024b0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80024b2:	2300      	movs	r3, #0
 80024b4:	60bb      	str	r3, [r7, #8]
 80024b6:	4b19      	ldr	r3, [pc, #100]	; (800251c <HAL_SPI_MspInit+0xc4>)
 80024b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024ba:	4a18      	ldr	r2, [pc, #96]	; (800251c <HAL_SPI_MspInit+0xc4>)
 80024bc:	f043 0302 	orr.w	r3, r3, #2
 80024c0:	6313      	str	r3, [r2, #48]	; 0x30
 80024c2:	4b16      	ldr	r3, [pc, #88]	; (800251c <HAL_SPI_MspInit+0xc4>)
 80024c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80024c6:	f003 0302 	and.w	r3, r3, #2
 80024ca:	60bb      	str	r3, [r7, #8]
 80024cc:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80024ce:	2308      	movs	r3, #8
 80024d0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024d2:	2302      	movs	r3, #2
 80024d4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024d6:	2300      	movs	r3, #0
 80024d8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024da:	2303      	movs	r3, #3
 80024dc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80024de:	2305      	movs	r3, #5
 80024e0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80024e2:	f107 0314 	add.w	r3, r7, #20
 80024e6:	4619      	mov	r1, r3
 80024e8:	480d      	ldr	r0, [pc, #52]	; (8002520 <HAL_SPI_MspInit+0xc8>)
 80024ea:	f000 ff91 	bl	8003410 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 80024ee:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80024f2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024f4:	2302      	movs	r3, #2
 80024f6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024f8:	2300      	movs	r3, #0
 80024fa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024fc:	2303      	movs	r3, #3
 80024fe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002500:	2305      	movs	r3, #5
 8002502:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002504:	f107 0314 	add.w	r3, r7, #20
 8002508:	4619      	mov	r1, r3
 800250a:	4806      	ldr	r0, [pc, #24]	; (8002524 <HAL_SPI_MspInit+0xcc>)
 800250c:	f000 ff80 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 8002510:	bf00      	nop
 8002512:	3728      	adds	r7, #40	; 0x28
 8002514:	46bd      	mov	sp, r7
 8002516:	bd80      	pop	{r7, pc}
 8002518:	40003800 	.word	0x40003800
 800251c:	40023800 	.word	0x40023800
 8002520:	40020800 	.word	0x40020800
 8002524:	40020400 	.word	0x40020400

08002528 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b08c      	sub	sp, #48	; 0x30
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002530:	f107 031c 	add.w	r3, r7, #28
 8002534:	2200      	movs	r2, #0
 8002536:	601a      	str	r2, [r3, #0]
 8002538:	605a      	str	r2, [r3, #4]
 800253a:	609a      	str	r2, [r3, #8]
 800253c:	60da      	str	r2, [r3, #12]
 800253e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	681b      	ldr	r3, [r3, #0]
 8002544:	4a3f      	ldr	r2, [pc, #252]	; (8002644 <HAL_TIM_Base_MspInit+0x11c>)
 8002546:	4293      	cmp	r3, r2
 8002548:	d10e      	bne.n	8002568 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800254a:	2300      	movs	r3, #0
 800254c:	61bb      	str	r3, [r7, #24]
 800254e:	4b3e      	ldr	r3, [pc, #248]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 8002550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002552:	4a3d      	ldr	r2, [pc, #244]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 8002554:	f043 0301 	orr.w	r3, r3, #1
 8002558:	6453      	str	r3, [r2, #68]	; 0x44
 800255a:	4b3b      	ldr	r3, [pc, #236]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 800255c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800255e:	f003 0301 	and.w	r3, r3, #1
 8002562:	61bb      	str	r3, [r7, #24]
 8002564:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002566:	e069      	b.n	800263c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002570:	d135      	bne.n	80025de <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002572:	2300      	movs	r3, #0
 8002574:	617b      	str	r3, [r7, #20]
 8002576:	4b34      	ldr	r3, [pc, #208]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a33      	ldr	r2, [pc, #204]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 800257c:	f043 0301 	orr.w	r3, r3, #1
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b31      	ldr	r3, [pc, #196]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f003 0301 	and.w	r3, r3, #1
 800258a:	617b      	str	r3, [r7, #20]
 800258c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	2300      	movs	r3, #0
 8002590:	613b      	str	r3, [r7, #16]
 8002592:	4b2d      	ldr	r3, [pc, #180]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 8002594:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002596:	4a2c      	ldr	r2, [pc, #176]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 8002598:	f043 0301 	orr.w	r3, r3, #1
 800259c:	6313      	str	r3, [r2, #48]	; 0x30
 800259e:	4b2a      	ldr	r3, [pc, #168]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 80025a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025a2:	f003 0301 	and.w	r3, r3, #1
 80025a6:	613b      	str	r3, [r7, #16]
 80025a8:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 80025aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80025ae:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025b0:	2302      	movs	r3, #2
 80025b2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80025b4:	2300      	movs	r3, #0
 80025b6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025b8:	2300      	movs	r3, #0
 80025ba:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80025bc:	2301      	movs	r3, #1
 80025be:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c0:	f107 031c 	add.w	r3, r7, #28
 80025c4:	4619      	mov	r1, r3
 80025c6:	4821      	ldr	r0, [pc, #132]	; (800264c <HAL_TIM_Base_MspInit+0x124>)
 80025c8:	f000 ff22 	bl	8003410 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80025cc:	2200      	movs	r2, #0
 80025ce:	2100      	movs	r1, #0
 80025d0:	201c      	movs	r0, #28
 80025d2:	f000 fee6 	bl	80033a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80025d6:	201c      	movs	r0, #28
 80025d8:	f000 feff 	bl	80033da <HAL_NVIC_EnableIRQ>
}
 80025dc:	e02e      	b.n	800263c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	4a1b      	ldr	r2, [pc, #108]	; (8002650 <HAL_TIM_Base_MspInit+0x128>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d10e      	bne.n	8002606 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80025e8:	2300      	movs	r3, #0
 80025ea:	60fb      	str	r3, [r7, #12]
 80025ec:	4b16      	ldr	r3, [pc, #88]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 80025ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025f0:	4a15      	ldr	r2, [pc, #84]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 80025f2:	f043 0302 	orr.w	r3, r3, #2
 80025f6:	6413      	str	r3, [r2, #64]	; 0x40
 80025f8:	4b13      	ldr	r3, [pc, #76]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 80025fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80025fc:	f003 0302 	and.w	r3, r3, #2
 8002600:	60fb      	str	r3, [r7, #12]
 8002602:	68fb      	ldr	r3, [r7, #12]
}
 8002604:	e01a      	b.n	800263c <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	681b      	ldr	r3, [r3, #0]
 800260a:	4a12      	ldr	r2, [pc, #72]	; (8002654 <HAL_TIM_Base_MspInit+0x12c>)
 800260c:	4293      	cmp	r3, r2
 800260e:	d115      	bne.n	800263c <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002610:	2300      	movs	r3, #0
 8002612:	60bb      	str	r3, [r7, #8]
 8002614:	4b0c      	ldr	r3, [pc, #48]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 8002616:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002618:	4a0b      	ldr	r2, [pc, #44]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 800261a:	f043 0308 	orr.w	r3, r3, #8
 800261e:	6413      	str	r3, [r2, #64]	; 0x40
 8002620:	4b09      	ldr	r3, [pc, #36]	; (8002648 <HAL_TIM_Base_MspInit+0x120>)
 8002622:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002624:	f003 0308 	and.w	r3, r3, #8
 8002628:	60bb      	str	r3, [r7, #8]
 800262a:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 800262c:	2200      	movs	r2, #0
 800262e:	2100      	movs	r1, #0
 8002630:	2032      	movs	r0, #50	; 0x32
 8002632:	f000 feb6 	bl	80033a2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002636:	2032      	movs	r0, #50	; 0x32
 8002638:	f000 fecf 	bl	80033da <HAL_NVIC_EnableIRQ>
}
 800263c:	bf00      	nop
 800263e:	3730      	adds	r7, #48	; 0x30
 8002640:	46bd      	mov	sp, r7
 8002642:	bd80      	pop	{r7, pc}
 8002644:	40010000 	.word	0x40010000
 8002648:	40023800 	.word	0x40023800
 800264c:	40020000 	.word	0x40020000
 8002650:	40000400 	.word	0x40000400
 8002654:	40000c00 	.word	0x40000c00

08002658 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002658:	b480      	push	{r7}
 800265a:	b085      	sub	sp, #20
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	4a0b      	ldr	r2, [pc, #44]	; (8002694 <HAL_TIM_PWM_MspInit+0x3c>)
 8002666:	4293      	cmp	r3, r2
 8002668:	d10d      	bne.n	8002686 <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800266a:	2300      	movs	r3, #0
 800266c:	60fb      	str	r3, [r7, #12]
 800266e:	4b0a      	ldr	r3, [pc, #40]	; (8002698 <HAL_TIM_PWM_MspInit+0x40>)
 8002670:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002672:	4a09      	ldr	r2, [pc, #36]	; (8002698 <HAL_TIM_PWM_MspInit+0x40>)
 8002674:	f043 0304 	orr.w	r3, r3, #4
 8002678:	6413      	str	r3, [r2, #64]	; 0x40
 800267a:	4b07      	ldr	r3, [pc, #28]	; (8002698 <HAL_TIM_PWM_MspInit+0x40>)
 800267c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800267e:	f003 0304 	and.w	r3, r3, #4
 8002682:	60fb      	str	r3, [r7, #12]
 8002684:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002686:	bf00      	nop
 8002688:	3714      	adds	r7, #20
 800268a:	46bd      	mov	sp, r7
 800268c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002690:	4770      	bx	lr
 8002692:	bf00      	nop
 8002694:	40000800 	.word	0x40000800
 8002698:	40023800 	.word	0x40023800

0800269c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800269c:	b580      	push	{r7, lr}
 800269e:	b08a      	sub	sp, #40	; 0x28
 80026a0:	af00      	add	r7, sp, #0
 80026a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80026a4:	f107 0314 	add.w	r3, r7, #20
 80026a8:	2200      	movs	r2, #0
 80026aa:	601a      	str	r2, [r3, #0]
 80026ac:	605a      	str	r2, [r3, #4]
 80026ae:	609a      	str	r2, [r3, #8]
 80026b0:	60da      	str	r2, [r3, #12]
 80026b2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	681b      	ldr	r3, [r3, #0]
 80026b8:	4a24      	ldr	r2, [pc, #144]	; (800274c <HAL_TIM_MspPostInit+0xb0>)
 80026ba:	4293      	cmp	r3, r2
 80026bc:	d11e      	bne.n	80026fc <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80026be:	2300      	movs	r3, #0
 80026c0:	613b      	str	r3, [r7, #16]
 80026c2:	4b23      	ldr	r3, [pc, #140]	; (8002750 <HAL_TIM_MspPostInit+0xb4>)
 80026c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026c6:	4a22      	ldr	r2, [pc, #136]	; (8002750 <HAL_TIM_MspPostInit+0xb4>)
 80026c8:	f043 0304 	orr.w	r3, r3, #4
 80026cc:	6313      	str	r3, [r2, #48]	; 0x30
 80026ce:	4b20      	ldr	r3, [pc, #128]	; (8002750 <HAL_TIM_MspPostInit+0xb4>)
 80026d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026d2:	f003 0304 	and.w	r3, r3, #4
 80026d6:	613b      	str	r3, [r7, #16]
 80026d8:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 80026da:	2380      	movs	r3, #128	; 0x80
 80026dc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026de:	2302      	movs	r3, #2
 80026e0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026e2:	2300      	movs	r3, #0
 80026e4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026e6:	2300      	movs	r3, #0
 80026e8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80026ea:	2302      	movs	r3, #2
 80026ec:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80026ee:	f107 0314 	add.w	r3, r7, #20
 80026f2:	4619      	mov	r1, r3
 80026f4:	4817      	ldr	r0, [pc, #92]	; (8002754 <HAL_TIM_MspPostInit+0xb8>)
 80026f6:	f000 fe8b 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 80026fa:	e022      	b.n	8002742 <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	681b      	ldr	r3, [r3, #0]
 8002700:	4a15      	ldr	r2, [pc, #84]	; (8002758 <HAL_TIM_MspPostInit+0xbc>)
 8002702:	4293      	cmp	r3, r2
 8002704:	d11d      	bne.n	8002742 <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002706:	2300      	movs	r3, #0
 8002708:	60fb      	str	r3, [r7, #12]
 800270a:	4b11      	ldr	r3, [pc, #68]	; (8002750 <HAL_TIM_MspPostInit+0xb4>)
 800270c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800270e:	4a10      	ldr	r2, [pc, #64]	; (8002750 <HAL_TIM_MspPostInit+0xb4>)
 8002710:	f043 0302 	orr.w	r3, r3, #2
 8002714:	6313      	str	r3, [r2, #48]	; 0x30
 8002716:	4b0e      	ldr	r3, [pc, #56]	; (8002750 <HAL_TIM_MspPostInit+0xb4>)
 8002718:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800271a:	f003 0302 	and.w	r3, r3, #2
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002722:	2380      	movs	r3, #128	; 0x80
 8002724:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002726:	2302      	movs	r3, #2
 8002728:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800272a:	2300      	movs	r3, #0
 800272c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800272e:	2300      	movs	r3, #0
 8002730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002732:	2302      	movs	r3, #2
 8002734:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002736:	f107 0314 	add.w	r3, r7, #20
 800273a:	4619      	mov	r1, r3
 800273c:	4807      	ldr	r0, [pc, #28]	; (800275c <HAL_TIM_MspPostInit+0xc0>)
 800273e:	f000 fe67 	bl	8003410 <HAL_GPIO_Init>
}
 8002742:	bf00      	nop
 8002744:	3728      	adds	r7, #40	; 0x28
 8002746:	46bd      	mov	sp, r7
 8002748:	bd80      	pop	{r7, pc}
 800274a:	bf00      	nop
 800274c:	40000400 	.word	0x40000400
 8002750:	40023800 	.word	0x40023800
 8002754:	40020800 	.word	0x40020800
 8002758:	40000800 	.word	0x40000800
 800275c:	40020400 	.word	0x40020400

08002760 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002760:	b580      	push	{r7, lr}
 8002762:	b08a      	sub	sp, #40	; 0x28
 8002764:	af00      	add	r7, sp, #0
 8002766:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002768:	f107 0314 	add.w	r3, r7, #20
 800276c:	2200      	movs	r2, #0
 800276e:	601a      	str	r2, [r3, #0]
 8002770:	605a      	str	r2, [r3, #4]
 8002772:	609a      	str	r2, [r3, #8]
 8002774:	60da      	str	r2, [r3, #12]
 8002776:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	4a19      	ldr	r2, [pc, #100]	; (80027e4 <HAL_UART_MspInit+0x84>)
 800277e:	4293      	cmp	r3, r2
 8002780:	d12c      	bne.n	80027dc <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002782:	2300      	movs	r3, #0
 8002784:	613b      	str	r3, [r7, #16]
 8002786:	4b18      	ldr	r3, [pc, #96]	; (80027e8 <HAL_UART_MspInit+0x88>)
 8002788:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800278a:	4a17      	ldr	r2, [pc, #92]	; (80027e8 <HAL_UART_MspInit+0x88>)
 800278c:	f043 0310 	orr.w	r3, r3, #16
 8002790:	6453      	str	r3, [r2, #68]	; 0x44
 8002792:	4b15      	ldr	r3, [pc, #84]	; (80027e8 <HAL_UART_MspInit+0x88>)
 8002794:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002796:	f003 0310 	and.w	r3, r3, #16
 800279a:	613b      	str	r3, [r7, #16]
 800279c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800279e:	2300      	movs	r3, #0
 80027a0:	60fb      	str	r3, [r7, #12]
 80027a2:	4b11      	ldr	r3, [pc, #68]	; (80027e8 <HAL_UART_MspInit+0x88>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	4a10      	ldr	r2, [pc, #64]	; (80027e8 <HAL_UART_MspInit+0x88>)
 80027a8:	f043 0301 	orr.w	r3, r3, #1
 80027ac:	6313      	str	r3, [r2, #48]	; 0x30
 80027ae:	4b0e      	ldr	r3, [pc, #56]	; (80027e8 <HAL_UART_MspInit+0x88>)
 80027b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027b2:	f003 0301 	and.w	r3, r3, #1
 80027b6:	60fb      	str	r3, [r7, #12]
 80027b8:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 80027ba:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 80027be:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027c0:	2302      	movs	r3, #2
 80027c2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c4:	2300      	movs	r3, #0
 80027c6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027c8:	2303      	movs	r3, #3
 80027ca:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 80027cc:	2307      	movs	r3, #7
 80027ce:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027d0:	f107 0314 	add.w	r3, r7, #20
 80027d4:	4619      	mov	r1, r3
 80027d6:	4805      	ldr	r0, [pc, #20]	; (80027ec <HAL_UART_MspInit+0x8c>)
 80027d8:	f000 fe1a 	bl	8003410 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 80027dc:	bf00      	nop
 80027de:	3728      	adds	r7, #40	; 0x28
 80027e0:	46bd      	mov	sp, r7
 80027e2:	bd80      	pop	{r7, pc}
 80027e4:	40011000 	.word	0x40011000
 80027e8:	40023800 	.word	0x40023800
 80027ec:	40020000 	.word	0x40020000

080027f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80027f0:	b480      	push	{r7}
 80027f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80027f4:	e7fe      	b.n	80027f4 <NMI_Handler+0x4>

080027f6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80027f6:	b480      	push	{r7}
 80027f8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80027fa:	e7fe      	b.n	80027fa <HardFault_Handler+0x4>

080027fc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80027fc:	b480      	push	{r7}
 80027fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002800:	e7fe      	b.n	8002800 <MemManage_Handler+0x4>

08002802 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002802:	b480      	push	{r7}
 8002804:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002806:	e7fe      	b.n	8002806 <BusFault_Handler+0x4>

08002808 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002808:	b480      	push	{r7}
 800280a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800280c:	e7fe      	b.n	800280c <UsageFault_Handler+0x4>

0800280e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800280e:	b480      	push	{r7}
 8002810:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002812:	bf00      	nop
 8002814:	46bd      	mov	sp, r7
 8002816:	f85d 7b04 	ldr.w	r7, [sp], #4
 800281a:	4770      	bx	lr

0800281c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800281c:	b480      	push	{r7}
 800281e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002820:	bf00      	nop
 8002822:	46bd      	mov	sp, r7
 8002824:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002828:	4770      	bx	lr

0800282a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800282a:	b480      	push	{r7}
 800282c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800282e:	bf00      	nop
 8002830:	46bd      	mov	sp, r7
 8002832:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002836:	4770      	bx	lr

08002838 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002838:	b580      	push	{r7, lr}
 800283a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800283c:	f000 f8e4 	bl	8002a08 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002840:	bf00      	nop
 8002842:	bd80      	pop	{r7, pc}

08002844 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002844:	b580      	push	{r7, lr}
 8002846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8002848:	481d      	ldr	r0, [pc, #116]	; (80028c0 <TIM2_IRQHandler+0x7c>)
 800284a:	f002 ff43 	bl	80056d4 <HAL_TIM_IRQHandler>
	if(firsttime){
 800284e:	4b1d      	ldr	r3, [pc, #116]	; (80028c4 <TIM2_IRQHandler+0x80>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d00d      	beq.n	8002872 <TIM2_IRQHandler+0x2e>
		firsttime =0;
 8002856:	4b1b      	ldr	r3, [pc, #108]	; (80028c4 <TIM2_IRQHandler+0x80>)
 8002858:	2200      	movs	r2, #0
 800285a:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = 0;
 800285c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002860:	2200      	movs	r2, #0
 8002862:	625a      	str	r2, [r3, #36]	; 0x24
		index = 0;
 8002864:	4b18      	ldr	r3, [pc, #96]	; (80028c8 <TIM2_IRQHandler+0x84>)
 8002866:	2200      	movs	r2, #0
 8002868:	601a      	str	r2, [r3, #0]
		HAL_TIM_IRQHandler(&htim2);
 800286a:	4815      	ldr	r0, [pc, #84]	; (80028c0 <TIM2_IRQHandler+0x7c>)
 800286c:	f002 ff32 	bl	80056d4 <HAL_TIM_IRQHandler>
		return;
 8002870:	e024      	b.n	80028bc <TIM2_IRQHandler+0x78>
	}
	data[index] = TIM2->CNT;
 8002872:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002876:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002878:	4b13      	ldr	r3, [pc, #76]	; (80028c8 <TIM2_IRQHandler+0x84>)
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	b291      	uxth	r1, r2
 800287e:	4a13      	ldr	r2, [pc, #76]	; (80028cc <TIM2_IRQHandler+0x88>)
 8002880:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TIM2->CNT =0;
 8002884:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002888:	2200      	movs	r2, #0
 800288a:	625a      	str	r2, [r3, #36]	; 0x24
	index++;
 800288c:	4b0e      	ldr	r3, [pc, #56]	; (80028c8 <TIM2_IRQHandler+0x84>)
 800288e:	681b      	ldr	r3, [r3, #0]
 8002890:	3301      	adds	r3, #1
 8002892:	4a0d      	ldr	r2, [pc, #52]	; (80028c8 <TIM2_IRQHandler+0x84>)
 8002894:	6013      	str	r3, [r2, #0]
	if(index == dataLen){
 8002896:	4b0c      	ldr	r3, [pc, #48]	; (80028c8 <TIM2_IRQHandler+0x84>)
 8002898:	681a      	ldr	r2, [r3, #0]
 800289a:	4b0d      	ldr	r3, [pc, #52]	; (80028d0 <TIM2_IRQHandler+0x8c>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	429a      	cmp	r2, r3
 80028a0:	d109      	bne.n	80028b6 <TIM2_IRQHandler+0x72>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);		//Transmit();
 80028a2:	2100      	movs	r1, #0
 80028a4:	4806      	ldr	r0, [pc, #24]	; (80028c0 <TIM2_IRQHandler+0x7c>)
 80028a6:	f002 fe67 	bl	8005578 <HAL_TIM_IC_Stop_IT>
    firsttime = 1;
 80028aa:	4b06      	ldr	r3, [pc, #24]	; (80028c4 <TIM2_IRQHandler+0x80>)
 80028ac:	2201      	movs	r2, #1
 80028ae:	701a      	strb	r2, [r3, #0]
    received = 1;
 80028b0:	4b08      	ldr	r3, [pc, #32]	; (80028d4 <TIM2_IRQHandler+0x90>)
 80028b2:	2201      	movs	r2, #1
 80028b4:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028b6:	4802      	ldr	r0, [pc, #8]	; (80028c0 <TIM2_IRQHandler+0x7c>)
 80028b8:	f002 ff0c 	bl	80056d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	200015a4 	.word	0x200015a4
 80028c4:	2000143e 	.word	0x2000143e
 80028c8:	20015d34 	.word	0x20015d34
 80028cc:	20015a28 	.word	0x20015a28
 80028d0:	20000004 	.word	0x20000004
 80028d4:	20015ac8 	.word	0x20015ac8

080028d8 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM5_IRQHandler+0x10>)
 80028de:	f002 fef9 	bl	80056d4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	2000167c 	.word	0x2000167c

080028ec <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80028ec:	b480      	push	{r7}
 80028ee:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80028f0:	4b06      	ldr	r3, [pc, #24]	; (800290c <SystemInit+0x20>)
 80028f2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80028f6:	4a05      	ldr	r2, [pc, #20]	; (800290c <SystemInit+0x20>)
 80028f8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80028fc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002900:	bf00      	nop
 8002902:	46bd      	mov	sp, r7
 8002904:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002908:	4770      	bx	lr
 800290a:	bf00      	nop
 800290c:	e000ed00 	.word	0xe000ed00

08002910 <Reset_Handler>:
 8002910:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002948 <LoopFillZerobss+0x12>
 8002914:	480d      	ldr	r0, [pc, #52]	; (800294c <LoopFillZerobss+0x16>)
 8002916:	490e      	ldr	r1, [pc, #56]	; (8002950 <LoopFillZerobss+0x1a>)
 8002918:	4a0e      	ldr	r2, [pc, #56]	; (8002954 <LoopFillZerobss+0x1e>)
 800291a:	2300      	movs	r3, #0
 800291c:	e002      	b.n	8002924 <LoopCopyDataInit>

0800291e <CopyDataInit>:
 800291e:	58d4      	ldr	r4, [r2, r3]
 8002920:	50c4      	str	r4, [r0, r3]
 8002922:	3304      	adds	r3, #4

08002924 <LoopCopyDataInit>:
 8002924:	18c4      	adds	r4, r0, r3
 8002926:	428c      	cmp	r4, r1
 8002928:	d3f9      	bcc.n	800291e <CopyDataInit>
 800292a:	4a0b      	ldr	r2, [pc, #44]	; (8002958 <LoopFillZerobss+0x22>)
 800292c:	4c0b      	ldr	r4, [pc, #44]	; (800295c <LoopFillZerobss+0x26>)
 800292e:	2300      	movs	r3, #0
 8002930:	e001      	b.n	8002936 <LoopFillZerobss>

08002932 <FillZerobss>:
 8002932:	6013      	str	r3, [r2, #0]
 8002934:	3204      	adds	r2, #4

08002936 <LoopFillZerobss>:
 8002936:	42a2      	cmp	r2, r4
 8002938:	d3fb      	bcc.n	8002932 <FillZerobss>
 800293a:	f7ff ffd7 	bl	80028ec <SystemInit>
 800293e:	f004 f9bb 	bl	8006cb8 <__libc_init_array>
 8002942:	f7fe f875 	bl	8000a30 <main>
 8002946:	4770      	bx	lr
 8002948:	20018000 	.word	0x20018000
 800294c:	20000000 	.word	0x20000000
 8002950:	2000144c 	.word	0x2000144c
 8002954:	08006efc 	.word	0x08006efc
 8002958:	2000144c 	.word	0x2000144c
 800295c:	20015d3c 	.word	0x20015d3c

08002960 <ADC_IRQHandler>:
 8002960:	e7fe      	b.n	8002960 <ADC_IRQHandler>
	...

08002964 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002968:	4b0e      	ldr	r3, [pc, #56]	; (80029a4 <HAL_Init+0x40>)
 800296a:	681b      	ldr	r3, [r3, #0]
 800296c:	4a0d      	ldr	r2, [pc, #52]	; (80029a4 <HAL_Init+0x40>)
 800296e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002972:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002974:	4b0b      	ldr	r3, [pc, #44]	; (80029a4 <HAL_Init+0x40>)
 8002976:	681b      	ldr	r3, [r3, #0]
 8002978:	4a0a      	ldr	r2, [pc, #40]	; (80029a4 <HAL_Init+0x40>)
 800297a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800297e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002980:	4b08      	ldr	r3, [pc, #32]	; (80029a4 <HAL_Init+0x40>)
 8002982:	681b      	ldr	r3, [r3, #0]
 8002984:	4a07      	ldr	r2, [pc, #28]	; (80029a4 <HAL_Init+0x40>)
 8002986:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800298a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800298c:	2003      	movs	r0, #3
 800298e:	f000 fcfd 	bl	800338c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002992:	2000      	movs	r0, #0
 8002994:	f000 f808 	bl	80029a8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002998:	f7ff fcaa 	bl	80022f0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800299c:	2300      	movs	r3, #0
}
 800299e:	4618      	mov	r0, r3
 80029a0:	bd80      	pop	{r7, pc}
 80029a2:	bf00      	nop
 80029a4:	40023c00 	.word	0x40023c00

080029a8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029a8:	b580      	push	{r7, lr}
 80029aa:	b082      	sub	sp, #8
 80029ac:	af00      	add	r7, sp, #0
 80029ae:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029b0:	4b12      	ldr	r3, [pc, #72]	; (80029fc <HAL_InitTick+0x54>)
 80029b2:	681a      	ldr	r2, [r3, #0]
 80029b4:	4b12      	ldr	r3, [pc, #72]	; (8002a00 <HAL_InitTick+0x58>)
 80029b6:	781b      	ldrb	r3, [r3, #0]
 80029b8:	4619      	mov	r1, r3
 80029ba:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029be:	fbb3 f3f1 	udiv	r3, r3, r1
 80029c2:	fbb2 f3f3 	udiv	r3, r2, r3
 80029c6:	4618      	mov	r0, r3
 80029c8:	f000 fd15 	bl	80033f6 <HAL_SYSTICK_Config>
 80029cc:	4603      	mov	r3, r0
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	d001      	beq.n	80029d6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029d2:	2301      	movs	r3, #1
 80029d4:	e00e      	b.n	80029f4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	2b0f      	cmp	r3, #15
 80029da:	d80a      	bhi.n	80029f2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029dc:	2200      	movs	r2, #0
 80029de:	6879      	ldr	r1, [r7, #4]
 80029e0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80029e4:	f000 fcdd 	bl	80033a2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80029e8:	4a06      	ldr	r2, [pc, #24]	; (8002a04 <HAL_InitTick+0x5c>)
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80029ee:	2300      	movs	r3, #0
 80029f0:	e000      	b.n	80029f4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80029f2:	2301      	movs	r3, #1
}
 80029f4:	4618      	mov	r0, r3
 80029f6:	3708      	adds	r7, #8
 80029f8:	46bd      	mov	sp, r7
 80029fa:	bd80      	pop	{r7, pc}
 80029fc:	20001440 	.word	0x20001440
 8002a00:	20001448 	.word	0x20001448
 8002a04:	20001444 	.word	0x20001444

08002a08 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a08:	b480      	push	{r7}
 8002a0a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a0c:	4b06      	ldr	r3, [pc, #24]	; (8002a28 <HAL_IncTick+0x20>)
 8002a0e:	781b      	ldrb	r3, [r3, #0]
 8002a10:	461a      	mov	r2, r3
 8002a12:	4b06      	ldr	r3, [pc, #24]	; (8002a2c <HAL_IncTick+0x24>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4413      	add	r3, r2
 8002a18:	4a04      	ldr	r2, [pc, #16]	; (8002a2c <HAL_IncTick+0x24>)
 8002a1a:	6013      	str	r3, [r2, #0]
}
 8002a1c:	bf00      	nop
 8002a1e:	46bd      	mov	sp, r7
 8002a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a24:	4770      	bx	lr
 8002a26:	bf00      	nop
 8002a28:	20001448 	.word	0x20001448
 8002a2c:	20015d38 	.word	0x20015d38

08002a30 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a30:	b480      	push	{r7}
 8002a32:	af00      	add	r7, sp, #0
  return uwTick;
 8002a34:	4b03      	ldr	r3, [pc, #12]	; (8002a44 <HAL_GetTick+0x14>)
 8002a36:	681b      	ldr	r3, [r3, #0]
}
 8002a38:	4618      	mov	r0, r3
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	20015d38 	.word	0x20015d38

08002a48 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002a48:	b580      	push	{r7, lr}
 8002a4a:	b084      	sub	sp, #16
 8002a4c:	af00      	add	r7, sp, #0
 8002a4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002a50:	f7ff ffee 	bl	8002a30 <HAL_GetTick>
 8002a54:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002a56:	687b      	ldr	r3, [r7, #4]
 8002a58:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002a5a:	68fb      	ldr	r3, [r7, #12]
 8002a5c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002a60:	d005      	beq.n	8002a6e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002a62:	4b0a      	ldr	r3, [pc, #40]	; (8002a8c <HAL_Delay+0x44>)
 8002a64:	781b      	ldrb	r3, [r3, #0]
 8002a66:	461a      	mov	r2, r3
 8002a68:	68fb      	ldr	r3, [r7, #12]
 8002a6a:	4413      	add	r3, r2
 8002a6c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002a6e:	bf00      	nop
 8002a70:	f7ff ffde 	bl	8002a30 <HAL_GetTick>
 8002a74:	4602      	mov	r2, r0
 8002a76:	68bb      	ldr	r3, [r7, #8]
 8002a78:	1ad3      	subs	r3, r2, r3
 8002a7a:	68fa      	ldr	r2, [r7, #12]
 8002a7c:	429a      	cmp	r2, r3
 8002a7e:	d8f7      	bhi.n	8002a70 <HAL_Delay+0x28>
  {
  }
}
 8002a80:	bf00      	nop
 8002a82:	bf00      	nop
 8002a84:	3710      	adds	r7, #16
 8002a86:	46bd      	mov	sp, r7
 8002a88:	bd80      	pop	{r7, pc}
 8002a8a:	bf00      	nop
 8002a8c:	20001448 	.word	0x20001448

08002a90 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b084      	sub	sp, #16
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002a98:	2300      	movs	r3, #0
 8002a9a:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002a9c:	687b      	ldr	r3, [r7, #4]
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d101      	bne.n	8002aa6 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002aa2:	2301      	movs	r3, #1
 8002aa4:	e033      	b.n	8002b0e <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002aa6:	687b      	ldr	r3, [r7, #4]
 8002aa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d109      	bne.n	8002ac2 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002aae:	6878      	ldr	r0, [r7, #4]
 8002ab0:	f7ff fc46 	bl	8002340 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	2200      	movs	r2, #0
 8002ab8:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	2200      	movs	r2, #0
 8002abe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac6:	f003 0310 	and.w	r3, r3, #16
 8002aca:	2b00      	cmp	r3, #0
 8002acc:	d118      	bne.n	8002b00 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002ace:	687b      	ldr	r3, [r7, #4]
 8002ad0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ad2:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002ad6:	f023 0302 	bic.w	r3, r3, #2
 8002ada:	f043 0202 	orr.w	r2, r3, #2
 8002ade:	687b      	ldr	r3, [r7, #4]
 8002ae0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002ae2:	6878      	ldr	r0, [r7, #4]
 8002ae4:	f000 fa86 	bl	8002ff4 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2200      	movs	r2, #0
 8002aec:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af2:	f023 0303 	bic.w	r3, r3, #3
 8002af6:	f043 0201 	orr.w	r2, r3, #1
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	641a      	str	r2, [r3, #64]	; 0x40
 8002afe:	e001      	b.n	8002b04 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002b00:	2301      	movs	r3, #1
 8002b02:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	2200      	movs	r2, #0
 8002b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002b0c:	7bfb      	ldrb	r3, [r7, #15]
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3710      	adds	r7, #16
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}
	...

08002b18 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b085      	sub	sp, #20
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002b20:	2300      	movs	r3, #0
 8002b22:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002b2a:	2b01      	cmp	r3, #1
 8002b2c:	d101      	bne.n	8002b32 <HAL_ADC_Start+0x1a>
 8002b2e:	2302      	movs	r3, #2
 8002b30:	e097      	b.n	8002c62 <HAL_ADC_Start+0x14a>
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2201      	movs	r2, #1
 8002b36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002b3a:	687b      	ldr	r3, [r7, #4]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	689b      	ldr	r3, [r3, #8]
 8002b40:	f003 0301 	and.w	r3, r3, #1
 8002b44:	2b01      	cmp	r3, #1
 8002b46:	d018      	beq.n	8002b7a <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	689a      	ldr	r2, [r3, #8]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f042 0201 	orr.w	r2, r2, #1
 8002b56:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8002b58:	4b45      	ldr	r3, [pc, #276]	; (8002c70 <HAL_ADC_Start+0x158>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a45      	ldr	r2, [pc, #276]	; (8002c74 <HAL_ADC_Start+0x15c>)
 8002b5e:	fba2 2303 	umull	r2, r3, r2, r3
 8002b62:	0c9a      	lsrs	r2, r3, #18
 8002b64:	4613      	mov	r3, r2
 8002b66:	005b      	lsls	r3, r3, #1
 8002b68:	4413      	add	r3, r2
 8002b6a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b6c:	e002      	b.n	8002b74 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	3b01      	subs	r3, #1
 8002b72:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8002b74:	68bb      	ldr	r3, [r7, #8]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d1f9      	bne.n	8002b6e <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	681b      	ldr	r3, [r3, #0]
 8002b7e:	689b      	ldr	r3, [r3, #8]
 8002b80:	f003 0301 	and.w	r3, r3, #1
 8002b84:	2b01      	cmp	r3, #1
 8002b86:	d15f      	bne.n	8002c48 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b8c:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8002b90:	f023 0301 	bic.w	r3, r3, #1
 8002b94:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d007      	beq.n	8002bba <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bae:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8002bb2:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bbe:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002bc2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002bc6:	d106      	bne.n	8002bd6 <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002bcc:	f023 0206 	bic.w	r2, r3, #6
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	645a      	str	r2, [r3, #68]	; 0x44
 8002bd4:	e002      	b.n	8002bdc <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2200      	movs	r2, #0
 8002bda:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2200      	movs	r2, #0
 8002be0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002be4:	4b24      	ldr	r3, [pc, #144]	; (8002c78 <HAL_ADC_Start+0x160>)
 8002be6:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	681b      	ldr	r3, [r3, #0]
 8002bec:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8002bf0:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8002bf2:	68fb      	ldr	r3, [r7, #12]
 8002bf4:	685b      	ldr	r3, [r3, #4]
 8002bf6:	f003 031f 	and.w	r3, r3, #31
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d10f      	bne.n	8002c1e <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	689b      	ldr	r3, [r3, #8]
 8002c04:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d129      	bne.n	8002c60 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	689a      	ldr	r2, [r3, #8]
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	e020      	b.n	8002c60 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	4a16      	ldr	r2, [pc, #88]	; (8002c7c <HAL_ADC_Start+0x164>)
 8002c24:	4293      	cmp	r3, r2
 8002c26:	d11b      	bne.n	8002c60 <HAL_ADC_Start+0x148>
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	681b      	ldr	r3, [r3, #0]
 8002c2c:	689b      	ldr	r3, [r3, #8]
 8002c2e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d114      	bne.n	8002c60 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8002c36:	687b      	ldr	r3, [r7, #4]
 8002c38:	681b      	ldr	r3, [r3, #0]
 8002c3a:	689a      	ldr	r2, [r3, #8]
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8002c44:	609a      	str	r2, [r3, #8]
 8002c46:	e00b      	b.n	8002c60 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002c48:	687b      	ldr	r3, [r7, #4]
 8002c4a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c4c:	f043 0210 	orr.w	r2, r3, #16
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c58:	f043 0201 	orr.w	r2, r3, #1
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8002c60:	2300      	movs	r3, #0
}
 8002c62:	4618      	mov	r0, r3
 8002c64:	3714      	adds	r7, #20
 8002c66:	46bd      	mov	sp, r7
 8002c68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c6c:	4770      	bx	lr
 8002c6e:	bf00      	nop
 8002c70:	20001440 	.word	0x20001440
 8002c74:	431bde83 	.word	0x431bde83
 8002c78:	40012300 	.word	0x40012300
 8002c7c:	40012000 	.word	0x40012000

08002c80 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8002c80:	b580      	push	{r7, lr}
 8002c82:	b084      	sub	sp, #16
 8002c84:	af00      	add	r7, sp, #0
 8002c86:	6078      	str	r0, [r7, #4]
 8002c88:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8002c8a:	2300      	movs	r3, #0
 8002c8c:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	689b      	ldr	r3, [r3, #8]
 8002c94:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002c98:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002c9c:	d113      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8002ca8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002cac:	d10b      	bne.n	8002cc6 <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cb2:	f043 0220 	orr.w	r2, r3, #32
 8002cb6:	687b      	ldr	r3, [r7, #4]
 8002cb8:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8002cba:	687b      	ldr	r3, [r7, #4]
 8002cbc:	2200      	movs	r2, #0
 8002cbe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 8002cc2:	2301      	movs	r3, #1
 8002cc4:	e063      	b.n	8002d8e <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 8002cc6:	f7ff feb3 	bl	8002a30 <HAL_GetTick>
 8002cca:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002ccc:	e021      	b.n	8002d12 <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8002cce:	683b      	ldr	r3, [r7, #0]
 8002cd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002cd4:	d01d      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 8002cd6:	683b      	ldr	r3, [r7, #0]
 8002cd8:	2b00      	cmp	r3, #0
 8002cda:	d007      	beq.n	8002cec <HAL_ADC_PollForConversion+0x6c>
 8002cdc:	f7ff fea8 	bl	8002a30 <HAL_GetTick>
 8002ce0:	4602      	mov	r2, r0
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	683a      	ldr	r2, [r7, #0]
 8002ce8:	429a      	cmp	r2, r3
 8002cea:	d212      	bcs.n	8002d12 <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f003 0302 	and.w	r3, r3, #2
 8002cf6:	2b02      	cmp	r3, #2
 8002cf8:	d00b      	beq.n	8002d12 <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 8002cfa:	687b      	ldr	r3, [r7, #4]
 8002cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfe:	f043 0204 	orr.w	r2, r3, #4
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 8002d06:	687b      	ldr	r3, [r7, #4]
 8002d08:	2200      	movs	r2, #0
 8002d0a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8002d0e:	2303      	movs	r3, #3
 8002d10:	e03d      	b.n	8002d8e <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8002d12:	687b      	ldr	r3, [r7, #4]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681b      	ldr	r3, [r3, #0]
 8002d18:	f003 0302 	and.w	r3, r3, #2
 8002d1c:	2b02      	cmp	r3, #2
 8002d1e:	d1d6      	bne.n	8002cce <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8002d20:	687b      	ldr	r3, [r7, #4]
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	f06f 0212 	mvn.w	r2, #18
 8002d28:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d2e:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8002d32:	687b      	ldr	r3, [r7, #4]
 8002d34:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	689b      	ldr	r3, [r3, #8]
 8002d3c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8002d40:	2b00      	cmp	r3, #0
 8002d42:	d123      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d11f      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d52:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8002d56:	2b00      	cmp	r3, #0
 8002d58:	d006      	beq.n	8002d68 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8002d5a:	687b      	ldr	r3, [r7, #4]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8002d64:	2b00      	cmp	r3, #0
 8002d66:	d111      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d6c:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d78:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d105      	bne.n	8002d8c <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d84:	f043 0201 	orr.w	r2, r3, #1
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8002d8c:	2300      	movs	r3, #0
}
 8002d8e:	4618      	mov	r0, r3
 8002d90:	3710      	adds	r7, #16
 8002d92:	46bd      	mov	sp, r7
 8002d94:	bd80      	pop	{r7, pc}

08002d96 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8002d96:	b480      	push	{r7}
 8002d98:	b083      	sub	sp, #12
 8002d9a:	af00      	add	r7, sp, #0
 8002d9c:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8002d9e:	687b      	ldr	r3, [r7, #4]
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 8002da4:	4618      	mov	r0, r3
 8002da6:	370c      	adds	r7, #12
 8002da8:	46bd      	mov	sp, r7
 8002daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dae:	4770      	bx	lr

08002db0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b085      	sub	sp, #20
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	6078      	str	r0, [r7, #4]
 8002db8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8002dba:	2300      	movs	r3, #0
 8002dbc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002dc4:	2b01      	cmp	r3, #1
 8002dc6:	d101      	bne.n	8002dcc <HAL_ADC_ConfigChannel+0x1c>
 8002dc8:	2302      	movs	r3, #2
 8002dca:	e105      	b.n	8002fd8 <HAL_ADC_ConfigChannel+0x228>
 8002dcc:	687b      	ldr	r3, [r7, #4]
 8002dce:	2201      	movs	r2, #1
 8002dd0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	2b09      	cmp	r3, #9
 8002dda:	d925      	bls.n	8002e28 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	68d9      	ldr	r1, [r3, #12]
 8002de2:	683b      	ldr	r3, [r7, #0]
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	461a      	mov	r2, r3
 8002dea:	4613      	mov	r3, r2
 8002dec:	005b      	lsls	r3, r3, #1
 8002dee:	4413      	add	r3, r2
 8002df0:	3b1e      	subs	r3, #30
 8002df2:	2207      	movs	r2, #7
 8002df4:	fa02 f303 	lsl.w	r3, r2, r3
 8002df8:	43da      	mvns	r2, r3
 8002dfa:	687b      	ldr	r3, [r7, #4]
 8002dfc:	681b      	ldr	r3, [r3, #0]
 8002dfe:	400a      	ands	r2, r1
 8002e00:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68d9      	ldr	r1, [r3, #12]
 8002e08:	683b      	ldr	r3, [r7, #0]
 8002e0a:	689a      	ldr	r2, [r3, #8]
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	681b      	ldr	r3, [r3, #0]
 8002e10:	b29b      	uxth	r3, r3
 8002e12:	4618      	mov	r0, r3
 8002e14:	4603      	mov	r3, r0
 8002e16:	005b      	lsls	r3, r3, #1
 8002e18:	4403      	add	r3, r0
 8002e1a:	3b1e      	subs	r3, #30
 8002e1c:	409a      	lsls	r2, r3
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	60da      	str	r2, [r3, #12]
 8002e26:	e022      	b.n	8002e6e <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	6919      	ldr	r1, [r3, #16]
 8002e2e:	683b      	ldr	r3, [r7, #0]
 8002e30:	681b      	ldr	r3, [r3, #0]
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	461a      	mov	r2, r3
 8002e36:	4613      	mov	r3, r2
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	4413      	add	r3, r2
 8002e3c:	2207      	movs	r2, #7
 8002e3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e42:	43da      	mvns	r2, r3
 8002e44:	687b      	ldr	r3, [r7, #4]
 8002e46:	681b      	ldr	r3, [r3, #0]
 8002e48:	400a      	ands	r2, r1
 8002e4a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8002e4c:	687b      	ldr	r3, [r7, #4]
 8002e4e:	681b      	ldr	r3, [r3, #0]
 8002e50:	6919      	ldr	r1, [r3, #16]
 8002e52:	683b      	ldr	r3, [r7, #0]
 8002e54:	689a      	ldr	r2, [r3, #8]
 8002e56:	683b      	ldr	r3, [r7, #0]
 8002e58:	681b      	ldr	r3, [r3, #0]
 8002e5a:	b29b      	uxth	r3, r3
 8002e5c:	4618      	mov	r0, r3
 8002e5e:	4603      	mov	r3, r0
 8002e60:	005b      	lsls	r3, r3, #1
 8002e62:	4403      	add	r3, r0
 8002e64:	409a      	lsls	r2, r3
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	681b      	ldr	r3, [r3, #0]
 8002e6a:	430a      	orrs	r2, r1
 8002e6c:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	2b06      	cmp	r3, #6
 8002e74:	d824      	bhi.n	8002ec0 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8002e76:	687b      	ldr	r3, [r7, #4]
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	685a      	ldr	r2, [r3, #4]
 8002e80:	4613      	mov	r3, r2
 8002e82:	009b      	lsls	r3, r3, #2
 8002e84:	4413      	add	r3, r2
 8002e86:	3b05      	subs	r3, #5
 8002e88:	221f      	movs	r2, #31
 8002e8a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8e:	43da      	mvns	r2, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	400a      	ands	r2, r1
 8002e96:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8002e98:	687b      	ldr	r3, [r7, #4]
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8002e9e:	683b      	ldr	r3, [r7, #0]
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	b29b      	uxth	r3, r3
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	683b      	ldr	r3, [r7, #0]
 8002ea8:	685a      	ldr	r2, [r3, #4]
 8002eaa:	4613      	mov	r3, r2
 8002eac:	009b      	lsls	r3, r3, #2
 8002eae:	4413      	add	r3, r2
 8002eb0:	3b05      	subs	r3, #5
 8002eb2:	fa00 f203 	lsl.w	r2, r0, r3
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	430a      	orrs	r2, r1
 8002ebc:	635a      	str	r2, [r3, #52]	; 0x34
 8002ebe:	e04c      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	2b0c      	cmp	r3, #12
 8002ec6:	d824      	bhi.n	8002f12 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ece:	683b      	ldr	r3, [r7, #0]
 8002ed0:	685a      	ldr	r2, [r3, #4]
 8002ed2:	4613      	mov	r3, r2
 8002ed4:	009b      	lsls	r3, r3, #2
 8002ed6:	4413      	add	r3, r2
 8002ed8:	3b23      	subs	r3, #35	; 0x23
 8002eda:	221f      	movs	r2, #31
 8002edc:	fa02 f303 	lsl.w	r3, r2, r3
 8002ee0:	43da      	mvns	r2, r3
 8002ee2:	687b      	ldr	r3, [r7, #4]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	400a      	ands	r2, r1
 8002ee8:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ef0:	683b      	ldr	r3, [r7, #0]
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	b29b      	uxth	r3, r3
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	683b      	ldr	r3, [r7, #0]
 8002efa:	685a      	ldr	r2, [r3, #4]
 8002efc:	4613      	mov	r3, r2
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	4413      	add	r3, r2
 8002f02:	3b23      	subs	r3, #35	; 0x23
 8002f04:	fa00 f203 	lsl.w	r2, r0, r3
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	631a      	str	r2, [r3, #48]	; 0x30
 8002f10:	e023      	b.n	8002f5a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8002f12:	687b      	ldr	r3, [r7, #4]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	685a      	ldr	r2, [r3, #4]
 8002f1c:	4613      	mov	r3, r2
 8002f1e:	009b      	lsls	r3, r3, #2
 8002f20:	4413      	add	r3, r2
 8002f22:	3b41      	subs	r3, #65	; 0x41
 8002f24:	221f      	movs	r2, #31
 8002f26:	fa02 f303 	lsl.w	r3, r2, r3
 8002f2a:	43da      	mvns	r2, r3
 8002f2c:	687b      	ldr	r3, [r7, #4]
 8002f2e:	681b      	ldr	r3, [r3, #0]
 8002f30:	400a      	ands	r2, r1
 8002f32:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8002f34:	687b      	ldr	r3, [r7, #4]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8002f3a:	683b      	ldr	r3, [r7, #0]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	b29b      	uxth	r3, r3
 8002f40:	4618      	mov	r0, r3
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	685a      	ldr	r2, [r3, #4]
 8002f46:	4613      	mov	r3, r2
 8002f48:	009b      	lsls	r3, r3, #2
 8002f4a:	4413      	add	r3, r2
 8002f4c:	3b41      	subs	r3, #65	; 0x41
 8002f4e:	fa00 f203 	lsl.w	r2, r0, r3
 8002f52:	687b      	ldr	r3, [r7, #4]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	430a      	orrs	r2, r1
 8002f58:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002f5a:	4b22      	ldr	r3, [pc, #136]	; (8002fe4 <HAL_ADC_ConfigChannel+0x234>)
 8002f5c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8002f5e:	687b      	ldr	r3, [r7, #4]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a21      	ldr	r2, [pc, #132]	; (8002fe8 <HAL_ADC_ConfigChannel+0x238>)
 8002f64:	4293      	cmp	r3, r2
 8002f66:	d109      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1cc>
 8002f68:	683b      	ldr	r3, [r7, #0]
 8002f6a:	681b      	ldr	r3, [r3, #0]
 8002f6c:	2b12      	cmp	r3, #18
 8002f6e:	d105      	bne.n	8002f7c <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	685b      	ldr	r3, [r3, #4]
 8002f74:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8002f78:	68fb      	ldr	r3, [r7, #12]
 8002f7a:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8002f7c:	687b      	ldr	r3, [r7, #4]
 8002f7e:	681b      	ldr	r3, [r3, #0]
 8002f80:	4a19      	ldr	r2, [pc, #100]	; (8002fe8 <HAL_ADC_ConfigChannel+0x238>)
 8002f82:	4293      	cmp	r3, r2
 8002f84:	d123      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	2b10      	cmp	r3, #16
 8002f8c:	d003      	beq.n	8002f96 <HAL_ADC_ConfigChannel+0x1e6>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	2b11      	cmp	r3, #17
 8002f94:	d11b      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	685b      	ldr	r3, [r3, #4]
 8002f9a:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8002f9e:	68fb      	ldr	r3, [r7, #12]
 8002fa0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8002fa2:	683b      	ldr	r3, [r7, #0]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2b10      	cmp	r3, #16
 8002fa8:	d111      	bne.n	8002fce <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8002faa:	4b10      	ldr	r3, [pc, #64]	; (8002fec <HAL_ADC_ConfigChannel+0x23c>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4a10      	ldr	r2, [pc, #64]	; (8002ff0 <HAL_ADC_ConfigChannel+0x240>)
 8002fb0:	fba2 2303 	umull	r2, r3, r2, r3
 8002fb4:	0c9a      	lsrs	r2, r3, #18
 8002fb6:	4613      	mov	r3, r2
 8002fb8:	009b      	lsls	r3, r3, #2
 8002fba:	4413      	add	r3, r2
 8002fbc:	005b      	lsls	r3, r3, #1
 8002fbe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc0:	e002      	b.n	8002fc8 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8002fc2:	68bb      	ldr	r3, [r7, #8]
 8002fc4:	3b01      	subs	r3, #1
 8002fc6:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8002fc8:	68bb      	ldr	r3, [r7, #8]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f9      	bne.n	8002fc2 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	2200      	movs	r2, #0
 8002fd2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8002fd6:	2300      	movs	r3, #0
}
 8002fd8:	4618      	mov	r0, r3
 8002fda:	3714      	adds	r7, #20
 8002fdc:	46bd      	mov	sp, r7
 8002fde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe2:	4770      	bx	lr
 8002fe4:	40012300 	.word	0x40012300
 8002fe8:	40012000 	.word	0x40012000
 8002fec:	20001440 	.word	0x20001440
 8002ff0:	431bde83 	.word	0x431bde83

08002ff4 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b085      	sub	sp, #20
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8002ffc:	4b79      	ldr	r3, [pc, #484]	; (80031e4 <ADC_Init+0x1f0>)
 8002ffe:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	685b      	ldr	r3, [r3, #4]
 8003004:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003008:	68fb      	ldr	r3, [r7, #12]
 800300a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	685a      	ldr	r2, [r3, #4]
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	685b      	ldr	r3, [r3, #4]
 8003014:	431a      	orrs	r2, r3
 8003016:	68fb      	ldr	r3, [r7, #12]
 8003018:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	685a      	ldr	r2, [r3, #4]
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003028:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800302a:	687b      	ldr	r3, [r7, #4]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	6859      	ldr	r1, [r3, #4]
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	021a      	lsls	r2, r3, #8
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	430a      	orrs	r2, r1
 800303c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800303e:	687b      	ldr	r3, [r7, #4]
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	685a      	ldr	r2, [r3, #4]
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800304c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800304e:	687b      	ldr	r3, [r7, #4]
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	6859      	ldr	r1, [r3, #4]
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	689a      	ldr	r2, [r3, #8]
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	430a      	orrs	r2, r1
 800305e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	689a      	ldr	r2, [r3, #8]
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800306e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	6899      	ldr	r1, [r3, #8]
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	68da      	ldr	r2, [r3, #12]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	430a      	orrs	r2, r1
 8003080:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003086:	4a58      	ldr	r2, [pc, #352]	; (80031e8 <ADC_Init+0x1f4>)
 8003088:	4293      	cmp	r3, r2
 800308a:	d022      	beq.n	80030d2 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	689a      	ldr	r2, [r3, #8]
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	681b      	ldr	r3, [r3, #0]
 8003096:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 800309a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	6899      	ldr	r1, [r3, #8]
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	430a      	orrs	r2, r1
 80030ac:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030bc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	6899      	ldr	r1, [r3, #8]
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	430a      	orrs	r2, r1
 80030ce:	609a      	str	r2, [r3, #8]
 80030d0:	e00f      	b.n	80030f2 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	689a      	ldr	r2, [r3, #8]
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80030e0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	689a      	ldr	r2, [r3, #8]
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80030f0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 80030f2:	687b      	ldr	r3, [r7, #4]
 80030f4:	681b      	ldr	r3, [r3, #0]
 80030f6:	689a      	ldr	r2, [r3, #8]
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f022 0202 	bic.w	r2, r2, #2
 8003100:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	6899      	ldr	r1, [r3, #8]
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	7e1b      	ldrb	r3, [r3, #24]
 800310c:	005a      	lsls	r2, r3, #1
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	430a      	orrs	r2, r1
 8003114:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	f893 3020 	ldrb.w	r3, [r3, #32]
 800311c:	2b00      	cmp	r3, #0
 800311e:	d01b      	beq.n	8003158 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	685a      	ldr	r2, [r3, #4]
 8003126:	687b      	ldr	r3, [r7, #4]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800312e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003130:	687b      	ldr	r3, [r7, #4]
 8003132:	681b      	ldr	r3, [r3, #0]
 8003134:	685a      	ldr	r2, [r3, #4]
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800313e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	6859      	ldr	r1, [r3, #4]
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800314a:	3b01      	subs	r3, #1
 800314c:	035a      	lsls	r2, r3, #13
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	430a      	orrs	r2, r1
 8003154:	605a      	str	r2, [r3, #4]
 8003156:	e007      	b.n	8003168 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003158:	687b      	ldr	r3, [r7, #4]
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	685a      	ldr	r2, [r3, #4]
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003166:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003176:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	69db      	ldr	r3, [r3, #28]
 8003182:	3b01      	subs	r3, #1
 8003184:	051a      	lsls	r2, r3, #20
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	430a      	orrs	r2, r1
 800318c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	689a      	ldr	r2, [r3, #8]
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 800319c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	6899      	ldr	r1, [r3, #8]
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80031aa:	025a      	lsls	r2, r3, #9
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	689a      	ldr	r2, [r3, #8]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80031c2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	6899      	ldr	r1, [r3, #8]
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	695b      	ldr	r3, [r3, #20]
 80031ce:	029a      	lsls	r2, r3, #10
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	609a      	str	r2, [r3, #8]
}
 80031d8:	bf00      	nop
 80031da:	3714      	adds	r7, #20
 80031dc:	46bd      	mov	sp, r7
 80031de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e2:	4770      	bx	lr
 80031e4:	40012300 	.word	0x40012300
 80031e8:	0f000001 	.word	0x0f000001

080031ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b085      	sub	sp, #20
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	f003 0307 	and.w	r3, r3, #7
 80031fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80031fc:	4b0c      	ldr	r3, [pc, #48]	; (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003202:	68ba      	ldr	r2, [r7, #8]
 8003204:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003208:	4013      	ands	r3, r2
 800320a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800320c:	68fb      	ldr	r3, [r7, #12]
 800320e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003210:	68bb      	ldr	r3, [r7, #8]
 8003212:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003214:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003218:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800321c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800321e:	4a04      	ldr	r2, [pc, #16]	; (8003230 <__NVIC_SetPriorityGrouping+0x44>)
 8003220:	68bb      	ldr	r3, [r7, #8]
 8003222:	60d3      	str	r3, [r2, #12]
}
 8003224:	bf00      	nop
 8003226:	3714      	adds	r7, #20
 8003228:	46bd      	mov	sp, r7
 800322a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800322e:	4770      	bx	lr
 8003230:	e000ed00 	.word	0xe000ed00

08003234 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003234:	b480      	push	{r7}
 8003236:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003238:	4b04      	ldr	r3, [pc, #16]	; (800324c <__NVIC_GetPriorityGrouping+0x18>)
 800323a:	68db      	ldr	r3, [r3, #12]
 800323c:	0a1b      	lsrs	r3, r3, #8
 800323e:	f003 0307 	and.w	r3, r3, #7
}
 8003242:	4618      	mov	r0, r3
 8003244:	46bd      	mov	sp, r7
 8003246:	f85d 7b04 	ldr.w	r7, [sp], #4
 800324a:	4770      	bx	lr
 800324c:	e000ed00 	.word	0xe000ed00

08003250 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003250:	b480      	push	{r7}
 8003252:	b083      	sub	sp, #12
 8003254:	af00      	add	r7, sp, #0
 8003256:	4603      	mov	r3, r0
 8003258:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800325a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800325e:	2b00      	cmp	r3, #0
 8003260:	db0b      	blt.n	800327a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003262:	79fb      	ldrb	r3, [r7, #7]
 8003264:	f003 021f 	and.w	r2, r3, #31
 8003268:	4907      	ldr	r1, [pc, #28]	; (8003288 <__NVIC_EnableIRQ+0x38>)
 800326a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800326e:	095b      	lsrs	r3, r3, #5
 8003270:	2001      	movs	r0, #1
 8003272:	fa00 f202 	lsl.w	r2, r0, r2
 8003276:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
 8003286:	bf00      	nop
 8003288:	e000e100 	.word	0xe000e100

0800328c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800328c:	b480      	push	{r7}
 800328e:	b083      	sub	sp, #12
 8003290:	af00      	add	r7, sp, #0
 8003292:	4603      	mov	r3, r0
 8003294:	6039      	str	r1, [r7, #0]
 8003296:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003298:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800329c:	2b00      	cmp	r3, #0
 800329e:	db0a      	blt.n	80032b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	b2da      	uxtb	r2, r3
 80032a4:	490c      	ldr	r1, [pc, #48]	; (80032d8 <__NVIC_SetPriority+0x4c>)
 80032a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80032aa:	0112      	lsls	r2, r2, #4
 80032ac:	b2d2      	uxtb	r2, r2
 80032ae:	440b      	add	r3, r1
 80032b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80032b4:	e00a      	b.n	80032cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80032b6:	683b      	ldr	r3, [r7, #0]
 80032b8:	b2da      	uxtb	r2, r3
 80032ba:	4908      	ldr	r1, [pc, #32]	; (80032dc <__NVIC_SetPriority+0x50>)
 80032bc:	79fb      	ldrb	r3, [r7, #7]
 80032be:	f003 030f 	and.w	r3, r3, #15
 80032c2:	3b04      	subs	r3, #4
 80032c4:	0112      	lsls	r2, r2, #4
 80032c6:	b2d2      	uxtb	r2, r2
 80032c8:	440b      	add	r3, r1
 80032ca:	761a      	strb	r2, [r3, #24]
}
 80032cc:	bf00      	nop
 80032ce:	370c      	adds	r7, #12
 80032d0:	46bd      	mov	sp, r7
 80032d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032d6:	4770      	bx	lr
 80032d8:	e000e100 	.word	0xe000e100
 80032dc:	e000ed00 	.word	0xe000ed00

080032e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80032e0:	b480      	push	{r7}
 80032e2:	b089      	sub	sp, #36	; 0x24
 80032e4:	af00      	add	r7, sp, #0
 80032e6:	60f8      	str	r0, [r7, #12]
 80032e8:	60b9      	str	r1, [r7, #8]
 80032ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 0307 	and.w	r3, r3, #7
 80032f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032f4:	69fb      	ldr	r3, [r7, #28]
 80032f6:	f1c3 0307 	rsb	r3, r3, #7
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	bf28      	it	cs
 80032fe:	2304      	movcs	r3, #4
 8003300:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003302:	69fb      	ldr	r3, [r7, #28]
 8003304:	3304      	adds	r3, #4
 8003306:	2b06      	cmp	r3, #6
 8003308:	d902      	bls.n	8003310 <NVIC_EncodePriority+0x30>
 800330a:	69fb      	ldr	r3, [r7, #28]
 800330c:	3b03      	subs	r3, #3
 800330e:	e000      	b.n	8003312 <NVIC_EncodePriority+0x32>
 8003310:	2300      	movs	r3, #0
 8003312:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003314:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003318:	69bb      	ldr	r3, [r7, #24]
 800331a:	fa02 f303 	lsl.w	r3, r2, r3
 800331e:	43da      	mvns	r2, r3
 8003320:	68bb      	ldr	r3, [r7, #8]
 8003322:	401a      	ands	r2, r3
 8003324:	697b      	ldr	r3, [r7, #20]
 8003326:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003328:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800332c:	697b      	ldr	r3, [r7, #20]
 800332e:	fa01 f303 	lsl.w	r3, r1, r3
 8003332:	43d9      	mvns	r1, r3
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003338:	4313      	orrs	r3, r2
         );
}
 800333a:	4618      	mov	r0, r3
 800333c:	3724      	adds	r7, #36	; 0x24
 800333e:	46bd      	mov	sp, r7
 8003340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003344:	4770      	bx	lr
	...

08003348 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003348:	b580      	push	{r7, lr}
 800334a:	b082      	sub	sp, #8
 800334c:	af00      	add	r7, sp, #0
 800334e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	3b01      	subs	r3, #1
 8003354:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003358:	d301      	bcc.n	800335e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800335a:	2301      	movs	r3, #1
 800335c:	e00f      	b.n	800337e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800335e:	4a0a      	ldr	r2, [pc, #40]	; (8003388 <SysTick_Config+0x40>)
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	3b01      	subs	r3, #1
 8003364:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003366:	210f      	movs	r1, #15
 8003368:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 800336c:	f7ff ff8e 	bl	800328c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003370:	4b05      	ldr	r3, [pc, #20]	; (8003388 <SysTick_Config+0x40>)
 8003372:	2200      	movs	r2, #0
 8003374:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003376:	4b04      	ldr	r3, [pc, #16]	; (8003388 <SysTick_Config+0x40>)
 8003378:	2207      	movs	r2, #7
 800337a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3708      	adds	r7, #8
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	e000e010 	.word	0xe000e010

0800338c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800338c:	b580      	push	{r7, lr}
 800338e:	b082      	sub	sp, #8
 8003390:	af00      	add	r7, sp, #0
 8003392:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003394:	6878      	ldr	r0, [r7, #4]
 8003396:	f7ff ff29 	bl	80031ec <__NVIC_SetPriorityGrouping>
}
 800339a:	bf00      	nop
 800339c:	3708      	adds	r7, #8
 800339e:	46bd      	mov	sp, r7
 80033a0:	bd80      	pop	{r7, pc}

080033a2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80033a2:	b580      	push	{r7, lr}
 80033a4:	b086      	sub	sp, #24
 80033a6:	af00      	add	r7, sp, #0
 80033a8:	4603      	mov	r3, r0
 80033aa:	60b9      	str	r1, [r7, #8]
 80033ac:	607a      	str	r2, [r7, #4]
 80033ae:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80033b0:	2300      	movs	r3, #0
 80033b2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80033b4:	f7ff ff3e 	bl	8003234 <__NVIC_GetPriorityGrouping>
 80033b8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80033ba:	687a      	ldr	r2, [r7, #4]
 80033bc:	68b9      	ldr	r1, [r7, #8]
 80033be:	6978      	ldr	r0, [r7, #20]
 80033c0:	f7ff ff8e 	bl	80032e0 <NVIC_EncodePriority>
 80033c4:	4602      	mov	r2, r0
 80033c6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80033ca:	4611      	mov	r1, r2
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7ff ff5d 	bl	800328c <__NVIC_SetPriority>
}
 80033d2:	bf00      	nop
 80033d4:	3718      	adds	r7, #24
 80033d6:	46bd      	mov	sp, r7
 80033d8:	bd80      	pop	{r7, pc}

080033da <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80033da:	b580      	push	{r7, lr}
 80033dc:	b082      	sub	sp, #8
 80033de:	af00      	add	r7, sp, #0
 80033e0:	4603      	mov	r3, r0
 80033e2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80033e4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7ff ff31 	bl	8003250 <__NVIC_EnableIRQ>
}
 80033ee:	bf00      	nop
 80033f0:	3708      	adds	r7, #8
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bd80      	pop	{r7, pc}

080033f6 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033f6:	b580      	push	{r7, lr}
 80033f8:	b082      	sub	sp, #8
 80033fa:	af00      	add	r7, sp, #0
 80033fc:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033fe:	6878      	ldr	r0, [r7, #4]
 8003400:	f7ff ffa2 	bl	8003348 <SysTick_Config>
 8003404:	4603      	mov	r3, r0
}
 8003406:	4618      	mov	r0, r3
 8003408:	3708      	adds	r7, #8
 800340a:	46bd      	mov	sp, r7
 800340c:	bd80      	pop	{r7, pc}
	...

08003410 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003410:	b480      	push	{r7}
 8003412:	b089      	sub	sp, #36	; 0x24
 8003414:	af00      	add	r7, sp, #0
 8003416:	6078      	str	r0, [r7, #4]
 8003418:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800341a:	2300      	movs	r3, #0
 800341c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800341e:	2300      	movs	r3, #0
 8003420:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003422:	2300      	movs	r3, #0
 8003424:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003426:	2300      	movs	r3, #0
 8003428:	61fb      	str	r3, [r7, #28]
 800342a:	e159      	b.n	80036e0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800342c:	2201      	movs	r2, #1
 800342e:	69fb      	ldr	r3, [r7, #28]
 8003430:	fa02 f303 	lsl.w	r3, r2, r3
 8003434:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	4013      	ands	r3, r2
 800343e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003440:	693a      	ldr	r2, [r7, #16]
 8003442:	697b      	ldr	r3, [r7, #20]
 8003444:	429a      	cmp	r2, r3
 8003446:	f040 8148 	bne.w	80036da <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	685b      	ldr	r3, [r3, #4]
 800344e:	f003 0303 	and.w	r3, r3, #3
 8003452:	2b01      	cmp	r3, #1
 8003454:	d005      	beq.n	8003462 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003456:	683b      	ldr	r3, [r7, #0]
 8003458:	685b      	ldr	r3, [r3, #4]
 800345a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800345e:	2b02      	cmp	r3, #2
 8003460:	d130      	bne.n	80034c4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	689b      	ldr	r3, [r3, #8]
 8003466:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003468:	69fb      	ldr	r3, [r7, #28]
 800346a:	005b      	lsls	r3, r3, #1
 800346c:	2203      	movs	r2, #3
 800346e:	fa02 f303 	lsl.w	r3, r2, r3
 8003472:	43db      	mvns	r3, r3
 8003474:	69ba      	ldr	r2, [r7, #24]
 8003476:	4013      	ands	r3, r2
 8003478:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	68da      	ldr	r2, [r3, #12]
 800347e:	69fb      	ldr	r3, [r7, #28]
 8003480:	005b      	lsls	r3, r3, #1
 8003482:	fa02 f303 	lsl.w	r3, r2, r3
 8003486:	69ba      	ldr	r2, [r7, #24]
 8003488:	4313      	orrs	r3, r2
 800348a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	69ba      	ldr	r2, [r7, #24]
 8003490:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	685b      	ldr	r3, [r3, #4]
 8003496:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003498:	2201      	movs	r2, #1
 800349a:	69fb      	ldr	r3, [r7, #28]
 800349c:	fa02 f303 	lsl.w	r3, r2, r3
 80034a0:	43db      	mvns	r3, r3
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	4013      	ands	r3, r2
 80034a6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	091b      	lsrs	r3, r3, #4
 80034ae:	f003 0201 	and.w	r2, r3, #1
 80034b2:	69fb      	ldr	r3, [r7, #28]
 80034b4:	fa02 f303 	lsl.w	r3, r2, r3
 80034b8:	69ba      	ldr	r2, [r7, #24]
 80034ba:	4313      	orrs	r3, r2
 80034bc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	69ba      	ldr	r2, [r7, #24]
 80034c2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80034c4:	683b      	ldr	r3, [r7, #0]
 80034c6:	685b      	ldr	r3, [r3, #4]
 80034c8:	f003 0303 	and.w	r3, r3, #3
 80034cc:	2b03      	cmp	r3, #3
 80034ce:	d017      	beq.n	8003500 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80034d0:	687b      	ldr	r3, [r7, #4]
 80034d2:	68db      	ldr	r3, [r3, #12]
 80034d4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80034d6:	69fb      	ldr	r3, [r7, #28]
 80034d8:	005b      	lsls	r3, r3, #1
 80034da:	2203      	movs	r2, #3
 80034dc:	fa02 f303 	lsl.w	r3, r2, r3
 80034e0:	43db      	mvns	r3, r3
 80034e2:	69ba      	ldr	r2, [r7, #24]
 80034e4:	4013      	ands	r3, r2
 80034e6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80034e8:	683b      	ldr	r3, [r7, #0]
 80034ea:	689a      	ldr	r2, [r3, #8]
 80034ec:	69fb      	ldr	r3, [r7, #28]
 80034ee:	005b      	lsls	r3, r3, #1
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	69ba      	ldr	r2, [r7, #24]
 80034f6:	4313      	orrs	r3, r2
 80034f8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	69ba      	ldr	r2, [r7, #24]
 80034fe:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003500:	683b      	ldr	r3, [r7, #0]
 8003502:	685b      	ldr	r3, [r3, #4]
 8003504:	f003 0303 	and.w	r3, r3, #3
 8003508:	2b02      	cmp	r3, #2
 800350a:	d123      	bne.n	8003554 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800350c:	69fb      	ldr	r3, [r7, #28]
 800350e:	08da      	lsrs	r2, r3, #3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	3208      	adds	r2, #8
 8003514:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003518:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800351a:	69fb      	ldr	r3, [r7, #28]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	009b      	lsls	r3, r3, #2
 8003522:	220f      	movs	r2, #15
 8003524:	fa02 f303 	lsl.w	r3, r2, r3
 8003528:	43db      	mvns	r3, r3
 800352a:	69ba      	ldr	r2, [r7, #24]
 800352c:	4013      	ands	r3, r2
 800352e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	691a      	ldr	r2, [r3, #16]
 8003534:	69fb      	ldr	r3, [r7, #28]
 8003536:	f003 0307 	and.w	r3, r3, #7
 800353a:	009b      	lsls	r3, r3, #2
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	69ba      	ldr	r2, [r7, #24]
 8003542:	4313      	orrs	r3, r2
 8003544:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003546:	69fb      	ldr	r3, [r7, #28]
 8003548:	08da      	lsrs	r2, r3, #3
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	3208      	adds	r2, #8
 800354e:	69b9      	ldr	r1, [r7, #24]
 8003550:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	005b      	lsls	r3, r3, #1
 800355e:	2203      	movs	r2, #3
 8003560:	fa02 f303 	lsl.w	r3, r2, r3
 8003564:	43db      	mvns	r3, r3
 8003566:	69ba      	ldr	r2, [r7, #24]
 8003568:	4013      	ands	r3, r2
 800356a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	685b      	ldr	r3, [r3, #4]
 8003570:	f003 0203 	and.w	r2, r3, #3
 8003574:	69fb      	ldr	r3, [r7, #28]
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	fa02 f303 	lsl.w	r3, r2, r3
 800357c:	69ba      	ldr	r2, [r7, #24]
 800357e:	4313      	orrs	r3, r2
 8003580:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	69ba      	ldr	r2, [r7, #24]
 8003586:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	685b      	ldr	r3, [r3, #4]
 800358c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003590:	2b00      	cmp	r3, #0
 8003592:	f000 80a2 	beq.w	80036da <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003596:	2300      	movs	r3, #0
 8003598:	60fb      	str	r3, [r7, #12]
 800359a:	4b57      	ldr	r3, [pc, #348]	; (80036f8 <HAL_GPIO_Init+0x2e8>)
 800359c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800359e:	4a56      	ldr	r2, [pc, #344]	; (80036f8 <HAL_GPIO_Init+0x2e8>)
 80035a0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80035a4:	6453      	str	r3, [r2, #68]	; 0x44
 80035a6:	4b54      	ldr	r3, [pc, #336]	; (80036f8 <HAL_GPIO_Init+0x2e8>)
 80035a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80035aa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80035ae:	60fb      	str	r3, [r7, #12]
 80035b0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80035b2:	4a52      	ldr	r2, [pc, #328]	; (80036fc <HAL_GPIO_Init+0x2ec>)
 80035b4:	69fb      	ldr	r3, [r7, #28]
 80035b6:	089b      	lsrs	r3, r3, #2
 80035b8:	3302      	adds	r3, #2
 80035ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80035be:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80035c0:	69fb      	ldr	r3, [r7, #28]
 80035c2:	f003 0303 	and.w	r3, r3, #3
 80035c6:	009b      	lsls	r3, r3, #2
 80035c8:	220f      	movs	r2, #15
 80035ca:	fa02 f303 	lsl.w	r3, r2, r3
 80035ce:	43db      	mvns	r3, r3
 80035d0:	69ba      	ldr	r2, [r7, #24]
 80035d2:	4013      	ands	r3, r2
 80035d4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	4a49      	ldr	r2, [pc, #292]	; (8003700 <HAL_GPIO_Init+0x2f0>)
 80035da:	4293      	cmp	r3, r2
 80035dc:	d019      	beq.n	8003612 <HAL_GPIO_Init+0x202>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	4a48      	ldr	r2, [pc, #288]	; (8003704 <HAL_GPIO_Init+0x2f4>)
 80035e2:	4293      	cmp	r3, r2
 80035e4:	d013      	beq.n	800360e <HAL_GPIO_Init+0x1fe>
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	4a47      	ldr	r2, [pc, #284]	; (8003708 <HAL_GPIO_Init+0x2f8>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00d      	beq.n	800360a <HAL_GPIO_Init+0x1fa>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	4a46      	ldr	r2, [pc, #280]	; (800370c <HAL_GPIO_Init+0x2fc>)
 80035f2:	4293      	cmp	r3, r2
 80035f4:	d007      	beq.n	8003606 <HAL_GPIO_Init+0x1f6>
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	4a45      	ldr	r2, [pc, #276]	; (8003710 <HAL_GPIO_Init+0x300>)
 80035fa:	4293      	cmp	r3, r2
 80035fc:	d101      	bne.n	8003602 <HAL_GPIO_Init+0x1f2>
 80035fe:	2304      	movs	r3, #4
 8003600:	e008      	b.n	8003614 <HAL_GPIO_Init+0x204>
 8003602:	2307      	movs	r3, #7
 8003604:	e006      	b.n	8003614 <HAL_GPIO_Init+0x204>
 8003606:	2303      	movs	r3, #3
 8003608:	e004      	b.n	8003614 <HAL_GPIO_Init+0x204>
 800360a:	2302      	movs	r3, #2
 800360c:	e002      	b.n	8003614 <HAL_GPIO_Init+0x204>
 800360e:	2301      	movs	r3, #1
 8003610:	e000      	b.n	8003614 <HAL_GPIO_Init+0x204>
 8003612:	2300      	movs	r3, #0
 8003614:	69fa      	ldr	r2, [r7, #28]
 8003616:	f002 0203 	and.w	r2, r2, #3
 800361a:	0092      	lsls	r2, r2, #2
 800361c:	4093      	lsls	r3, r2
 800361e:	69ba      	ldr	r2, [r7, #24]
 8003620:	4313      	orrs	r3, r2
 8003622:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003624:	4935      	ldr	r1, [pc, #212]	; (80036fc <HAL_GPIO_Init+0x2ec>)
 8003626:	69fb      	ldr	r3, [r7, #28]
 8003628:	089b      	lsrs	r3, r3, #2
 800362a:	3302      	adds	r3, #2
 800362c:	69ba      	ldr	r2, [r7, #24]
 800362e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003632:	4b38      	ldr	r3, [pc, #224]	; (8003714 <HAL_GPIO_Init+0x304>)
 8003634:	689b      	ldr	r3, [r3, #8]
 8003636:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003638:	693b      	ldr	r3, [r7, #16]
 800363a:	43db      	mvns	r3, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4013      	ands	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003642:	683b      	ldr	r3, [r7, #0]
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800364a:	2b00      	cmp	r3, #0
 800364c:	d003      	beq.n	8003656 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800364e:	69ba      	ldr	r2, [r7, #24]
 8003650:	693b      	ldr	r3, [r7, #16]
 8003652:	4313      	orrs	r3, r2
 8003654:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003656:	4a2f      	ldr	r2, [pc, #188]	; (8003714 <HAL_GPIO_Init+0x304>)
 8003658:	69bb      	ldr	r3, [r7, #24]
 800365a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800365c:	4b2d      	ldr	r3, [pc, #180]	; (8003714 <HAL_GPIO_Init+0x304>)
 800365e:	68db      	ldr	r3, [r3, #12]
 8003660:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003662:	693b      	ldr	r3, [r7, #16]
 8003664:	43db      	mvns	r3, r3
 8003666:	69ba      	ldr	r2, [r7, #24]
 8003668:	4013      	ands	r3, r2
 800366a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800366c:	683b      	ldr	r3, [r7, #0]
 800366e:	685b      	ldr	r3, [r3, #4]
 8003670:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003674:	2b00      	cmp	r3, #0
 8003676:	d003      	beq.n	8003680 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003678:	69ba      	ldr	r2, [r7, #24]
 800367a:	693b      	ldr	r3, [r7, #16]
 800367c:	4313      	orrs	r3, r2
 800367e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003680:	4a24      	ldr	r2, [pc, #144]	; (8003714 <HAL_GPIO_Init+0x304>)
 8003682:	69bb      	ldr	r3, [r7, #24]
 8003684:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003686:	4b23      	ldr	r3, [pc, #140]	; (8003714 <HAL_GPIO_Init+0x304>)
 8003688:	685b      	ldr	r3, [r3, #4]
 800368a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800368c:	693b      	ldr	r3, [r7, #16]
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003696:	683b      	ldr	r3, [r7, #0]
 8003698:	685b      	ldr	r3, [r3, #4]
 800369a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d003      	beq.n	80036aa <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80036a2:	69ba      	ldr	r2, [r7, #24]
 80036a4:	693b      	ldr	r3, [r7, #16]
 80036a6:	4313      	orrs	r3, r2
 80036a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80036aa:	4a1a      	ldr	r2, [pc, #104]	; (8003714 <HAL_GPIO_Init+0x304>)
 80036ac:	69bb      	ldr	r3, [r7, #24]
 80036ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80036b0:	4b18      	ldr	r3, [pc, #96]	; (8003714 <HAL_GPIO_Init+0x304>)
 80036b2:	681b      	ldr	r3, [r3, #0]
 80036b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036b6:	693b      	ldr	r3, [r7, #16]
 80036b8:	43db      	mvns	r3, r3
 80036ba:	69ba      	ldr	r2, [r7, #24]
 80036bc:	4013      	ands	r3, r2
 80036be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80036c0:	683b      	ldr	r3, [r7, #0]
 80036c2:	685b      	ldr	r3, [r3, #4]
 80036c4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80036c8:	2b00      	cmp	r3, #0
 80036ca:	d003      	beq.n	80036d4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80036cc:	69ba      	ldr	r2, [r7, #24]
 80036ce:	693b      	ldr	r3, [r7, #16]
 80036d0:	4313      	orrs	r3, r2
 80036d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80036d4:	4a0f      	ldr	r2, [pc, #60]	; (8003714 <HAL_GPIO_Init+0x304>)
 80036d6:	69bb      	ldr	r3, [r7, #24]
 80036d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80036da:	69fb      	ldr	r3, [r7, #28]
 80036dc:	3301      	adds	r3, #1
 80036de:	61fb      	str	r3, [r7, #28]
 80036e0:	69fb      	ldr	r3, [r7, #28]
 80036e2:	2b0f      	cmp	r3, #15
 80036e4:	f67f aea2 	bls.w	800342c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80036e8:	bf00      	nop
 80036ea:	bf00      	nop
 80036ec:	3724      	adds	r7, #36	; 0x24
 80036ee:	46bd      	mov	sp, r7
 80036f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f4:	4770      	bx	lr
 80036f6:	bf00      	nop
 80036f8:	40023800 	.word	0x40023800
 80036fc:	40013800 	.word	0x40013800
 8003700:	40020000 	.word	0x40020000
 8003704:	40020400 	.word	0x40020400
 8003708:	40020800 	.word	0x40020800
 800370c:	40020c00 	.word	0x40020c00
 8003710:	40021000 	.word	0x40021000
 8003714:	40013c00 	.word	0x40013c00

08003718 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003718:	b480      	push	{r7}
 800371a:	b085      	sub	sp, #20
 800371c:	af00      	add	r7, sp, #0
 800371e:	6078      	str	r0, [r7, #4]
 8003720:	460b      	mov	r3, r1
 8003722:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	691a      	ldr	r2, [r3, #16]
 8003728:	887b      	ldrh	r3, [r7, #2]
 800372a:	4013      	ands	r3, r2
 800372c:	2b00      	cmp	r3, #0
 800372e:	d002      	beq.n	8003736 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003730:	2301      	movs	r3, #1
 8003732:	73fb      	strb	r3, [r7, #15]
 8003734:	e001      	b.n	800373a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003736:	2300      	movs	r3, #0
 8003738:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800373a:	7bfb      	ldrb	r3, [r7, #15]
}
 800373c:	4618      	mov	r0, r3
 800373e:	3714      	adds	r7, #20
 8003740:	46bd      	mov	sp, r7
 8003742:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003746:	4770      	bx	lr

08003748 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	460b      	mov	r3, r1
 8003752:	807b      	strh	r3, [r7, #2]
 8003754:	4613      	mov	r3, r2
 8003756:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003758:	787b      	ldrb	r3, [r7, #1]
 800375a:	2b00      	cmp	r3, #0
 800375c:	d003      	beq.n	8003766 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800375e:	887a      	ldrh	r2, [r7, #2]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003764:	e003      	b.n	800376e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003766:	887b      	ldrh	r3, [r7, #2]
 8003768:	041a      	lsls	r2, r3, #16
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	619a      	str	r2, [r3, #24]
}
 800376e:	bf00      	nop
 8003770:	370c      	adds	r7, #12
 8003772:	46bd      	mov	sp, r7
 8003774:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003778:	4770      	bx	lr
	...

0800377c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800377c:	b580      	push	{r7, lr}
 800377e:	b084      	sub	sp, #16
 8003780:	af00      	add	r7, sp, #0
 8003782:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2b00      	cmp	r3, #0
 8003788:	d101      	bne.n	800378e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800378a:	2301      	movs	r3, #1
 800378c:	e12b      	b.n	80039e6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003794:	b2db      	uxtb	r3, r3
 8003796:	2b00      	cmp	r3, #0
 8003798:	d106      	bne.n	80037a8 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800379a:	687b      	ldr	r3, [r7, #4]
 800379c:	2200      	movs	r2, #0
 800379e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f7fe fe10 	bl	80023c8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2224      	movs	r2, #36	; 0x24
 80037ac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	681a      	ldr	r2, [r3, #0]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f022 0201 	bic.w	r2, r2, #1
 80037be:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	681a      	ldr	r2, [r3, #0]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80037ce:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	681a      	ldr	r2, [r3, #0]
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	681b      	ldr	r3, [r3, #0]
 80037da:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80037de:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80037e0:	f001 f888 	bl	80048f4 <HAL_RCC_GetPCLK1Freq>
 80037e4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	685b      	ldr	r3, [r3, #4]
 80037ea:	4a81      	ldr	r2, [pc, #516]	; (80039f0 <HAL_I2C_Init+0x274>)
 80037ec:	4293      	cmp	r3, r2
 80037ee:	d807      	bhi.n	8003800 <HAL_I2C_Init+0x84>
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	4a80      	ldr	r2, [pc, #512]	; (80039f4 <HAL_I2C_Init+0x278>)
 80037f4:	4293      	cmp	r3, r2
 80037f6:	bf94      	ite	ls
 80037f8:	2301      	movls	r3, #1
 80037fa:	2300      	movhi	r3, #0
 80037fc:	b2db      	uxtb	r3, r3
 80037fe:	e006      	b.n	800380e <HAL_I2C_Init+0x92>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	4a7d      	ldr	r2, [pc, #500]	; (80039f8 <HAL_I2C_Init+0x27c>)
 8003804:	4293      	cmp	r3, r2
 8003806:	bf94      	ite	ls
 8003808:	2301      	movls	r3, #1
 800380a:	2300      	movhi	r3, #0
 800380c:	b2db      	uxtb	r3, r3
 800380e:	2b00      	cmp	r3, #0
 8003810:	d001      	beq.n	8003816 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003812:	2301      	movs	r3, #1
 8003814:	e0e7      	b.n	80039e6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003816:	68fb      	ldr	r3, [r7, #12]
 8003818:	4a78      	ldr	r2, [pc, #480]	; (80039fc <HAL_I2C_Init+0x280>)
 800381a:	fba2 2303 	umull	r2, r3, r2, r3
 800381e:	0c9b      	lsrs	r3, r3, #18
 8003820:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	68ba      	ldr	r2, [r7, #8]
 8003832:	430a      	orrs	r2, r1
 8003834:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	6a1b      	ldr	r3, [r3, #32]
 800383c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	685b      	ldr	r3, [r3, #4]
 8003844:	4a6a      	ldr	r2, [pc, #424]	; (80039f0 <HAL_I2C_Init+0x274>)
 8003846:	4293      	cmp	r3, r2
 8003848:	d802      	bhi.n	8003850 <HAL_I2C_Init+0xd4>
 800384a:	68bb      	ldr	r3, [r7, #8]
 800384c:	3301      	adds	r3, #1
 800384e:	e009      	b.n	8003864 <HAL_I2C_Init+0xe8>
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003856:	fb02 f303 	mul.w	r3, r2, r3
 800385a:	4a69      	ldr	r2, [pc, #420]	; (8003a00 <HAL_I2C_Init+0x284>)
 800385c:	fba2 2303 	umull	r2, r3, r2, r3
 8003860:	099b      	lsrs	r3, r3, #6
 8003862:	3301      	adds	r3, #1
 8003864:	687a      	ldr	r2, [r7, #4]
 8003866:	6812      	ldr	r2, [r2, #0]
 8003868:	430b      	orrs	r3, r1
 800386a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	69db      	ldr	r3, [r3, #28]
 8003872:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003876:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800387a:	687b      	ldr	r3, [r7, #4]
 800387c:	685b      	ldr	r3, [r3, #4]
 800387e:	495c      	ldr	r1, [pc, #368]	; (80039f0 <HAL_I2C_Init+0x274>)
 8003880:	428b      	cmp	r3, r1
 8003882:	d819      	bhi.n	80038b8 <HAL_I2C_Init+0x13c>
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	1e59      	subs	r1, r3, #1
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	685b      	ldr	r3, [r3, #4]
 800388c:	005b      	lsls	r3, r3, #1
 800388e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003892:	1c59      	adds	r1, r3, #1
 8003894:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003898:	400b      	ands	r3, r1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d00a      	beq.n	80038b4 <HAL_I2C_Init+0x138>
 800389e:	68fb      	ldr	r3, [r7, #12]
 80038a0:	1e59      	subs	r1, r3, #1
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	685b      	ldr	r3, [r3, #4]
 80038a6:	005b      	lsls	r3, r3, #1
 80038a8:	fbb1 f3f3 	udiv	r3, r1, r3
 80038ac:	3301      	adds	r3, #1
 80038ae:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038b2:	e051      	b.n	8003958 <HAL_I2C_Init+0x1dc>
 80038b4:	2304      	movs	r3, #4
 80038b6:	e04f      	b.n	8003958 <HAL_I2C_Init+0x1dc>
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	689b      	ldr	r3, [r3, #8]
 80038bc:	2b00      	cmp	r3, #0
 80038be:	d111      	bne.n	80038e4 <HAL_I2C_Init+0x168>
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	1e58      	subs	r0, r3, #1
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	6859      	ldr	r1, [r3, #4]
 80038c8:	460b      	mov	r3, r1
 80038ca:	005b      	lsls	r3, r3, #1
 80038cc:	440b      	add	r3, r1
 80038ce:	fbb0 f3f3 	udiv	r3, r0, r3
 80038d2:	3301      	adds	r3, #1
 80038d4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80038d8:	2b00      	cmp	r3, #0
 80038da:	bf0c      	ite	eq
 80038dc:	2301      	moveq	r3, #1
 80038de:	2300      	movne	r3, #0
 80038e0:	b2db      	uxtb	r3, r3
 80038e2:	e012      	b.n	800390a <HAL_I2C_Init+0x18e>
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	1e58      	subs	r0, r3, #1
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6859      	ldr	r1, [r3, #4]
 80038ec:	460b      	mov	r3, r1
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	440b      	add	r3, r1
 80038f2:	0099      	lsls	r1, r3, #2
 80038f4:	440b      	add	r3, r1
 80038f6:	fbb0 f3f3 	udiv	r3, r0, r3
 80038fa:	3301      	adds	r3, #1
 80038fc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003900:	2b00      	cmp	r3, #0
 8003902:	bf0c      	ite	eq
 8003904:	2301      	moveq	r3, #1
 8003906:	2300      	movne	r3, #0
 8003908:	b2db      	uxtb	r3, r3
 800390a:	2b00      	cmp	r3, #0
 800390c:	d001      	beq.n	8003912 <HAL_I2C_Init+0x196>
 800390e:	2301      	movs	r3, #1
 8003910:	e022      	b.n	8003958 <HAL_I2C_Init+0x1dc>
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	2b00      	cmp	r3, #0
 8003918:	d10e      	bne.n	8003938 <HAL_I2C_Init+0x1bc>
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1e58      	subs	r0, r3, #1
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	6859      	ldr	r1, [r3, #4]
 8003922:	460b      	mov	r3, r1
 8003924:	005b      	lsls	r3, r3, #1
 8003926:	440b      	add	r3, r1
 8003928:	fbb0 f3f3 	udiv	r3, r0, r3
 800392c:	3301      	adds	r3, #1
 800392e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003932:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003936:	e00f      	b.n	8003958 <HAL_I2C_Init+0x1dc>
 8003938:	68fb      	ldr	r3, [r7, #12]
 800393a:	1e58      	subs	r0, r3, #1
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	6859      	ldr	r1, [r3, #4]
 8003940:	460b      	mov	r3, r1
 8003942:	009b      	lsls	r3, r3, #2
 8003944:	440b      	add	r3, r1
 8003946:	0099      	lsls	r1, r3, #2
 8003948:	440b      	add	r3, r1
 800394a:	fbb0 f3f3 	udiv	r3, r0, r3
 800394e:	3301      	adds	r3, #1
 8003950:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003954:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003958:	6879      	ldr	r1, [r7, #4]
 800395a:	6809      	ldr	r1, [r1, #0]
 800395c:	4313      	orrs	r3, r2
 800395e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	69da      	ldr	r2, [r3, #28]
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	6a1b      	ldr	r3, [r3, #32]
 8003972:	431a      	orrs	r2, r3
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	689b      	ldr	r3, [r3, #8]
 8003982:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003986:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800398a:	687a      	ldr	r2, [r7, #4]
 800398c:	6911      	ldr	r1, [r2, #16]
 800398e:	687a      	ldr	r2, [r7, #4]
 8003990:	68d2      	ldr	r2, [r2, #12]
 8003992:	4311      	orrs	r1, r2
 8003994:	687a      	ldr	r2, [r7, #4]
 8003996:	6812      	ldr	r2, [r2, #0]
 8003998:	430b      	orrs	r3, r1
 800399a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	68db      	ldr	r3, [r3, #12]
 80039a2:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	695a      	ldr	r2, [r3, #20]
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	431a      	orrs	r2, r3
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	430a      	orrs	r2, r1
 80039b6:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	687b      	ldr	r3, [r7, #4]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	2220      	movs	r2, #32
 80039d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	2200      	movs	r2, #0
 80039da:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	2200      	movs	r2, #0
 80039e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80039e4:	2300      	movs	r3, #0
}
 80039e6:	4618      	mov	r0, r3
 80039e8:	3710      	adds	r7, #16
 80039ea:	46bd      	mov	sp, r7
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	000186a0 	.word	0x000186a0
 80039f4:	001e847f 	.word	0x001e847f
 80039f8:	003d08ff 	.word	0x003d08ff
 80039fc:	431bde83 	.word	0x431bde83
 8003a00:	10624dd3 	.word	0x10624dd3

08003a04 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b088      	sub	sp, #32
 8003a08:	af02      	add	r7, sp, #8
 8003a0a:	60f8      	str	r0, [r7, #12]
 8003a0c:	607a      	str	r2, [r7, #4]
 8003a0e:	461a      	mov	r2, r3
 8003a10:	460b      	mov	r3, r1
 8003a12:	817b      	strh	r3, [r7, #10]
 8003a14:	4613      	mov	r3, r2
 8003a16:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a18:	f7ff f80a 	bl	8002a30 <HAL_GetTick>
 8003a1c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a24:	b2db      	uxtb	r3, r3
 8003a26:	2b20      	cmp	r3, #32
 8003a28:	f040 80e0 	bne.w	8003bec <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a2c:	697b      	ldr	r3, [r7, #20]
 8003a2e:	9300      	str	r3, [sp, #0]
 8003a30:	2319      	movs	r3, #25
 8003a32:	2201      	movs	r2, #1
 8003a34:	4970      	ldr	r1, [pc, #448]	; (8003bf8 <HAL_I2C_Master_Transmit+0x1f4>)
 8003a36:	68f8      	ldr	r0, [r7, #12]
 8003a38:	f000 f964 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003a3c:	4603      	mov	r3, r0
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d001      	beq.n	8003a46 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003a42:	2302      	movs	r3, #2
 8003a44:	e0d3      	b.n	8003bee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003a4c:	2b01      	cmp	r3, #1
 8003a4e:	d101      	bne.n	8003a54 <HAL_I2C_Master_Transmit+0x50>
 8003a50:	2302      	movs	r3, #2
 8003a52:	e0cc      	b.n	8003bee <HAL_I2C_Master_Transmit+0x1ea>
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	f003 0301 	and.w	r3, r3, #1
 8003a66:	2b01      	cmp	r3, #1
 8003a68:	d007      	beq.n	8003a7a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	681a      	ldr	r2, [r3, #0]
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f042 0201 	orr.w	r2, r2, #1
 8003a78:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	68fb      	ldr	r3, [r7, #12]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a88:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2221      	movs	r2, #33	; 0x21
 8003a8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	2210      	movs	r2, #16
 8003a96:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003a9a:	68fb      	ldr	r3, [r7, #12]
 8003a9c:	2200      	movs	r2, #0
 8003a9e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	687a      	ldr	r2, [r7, #4]
 8003aa4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	893a      	ldrh	r2, [r7, #8]
 8003aaa:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ab0:	b29a      	uxth	r2, r3
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	4a50      	ldr	r2, [pc, #320]	; (8003bfc <HAL_I2C_Master_Transmit+0x1f8>)
 8003aba:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003abc:	8979      	ldrh	r1, [r7, #10]
 8003abe:	697b      	ldr	r3, [r7, #20]
 8003ac0:	6a3a      	ldr	r2, [r7, #32]
 8003ac2:	68f8      	ldr	r0, [r7, #12]
 8003ac4:	f000 f89c 	bl	8003c00 <I2C_MasterRequestWrite>
 8003ac8:	4603      	mov	r3, r0
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d001      	beq.n	8003ad2 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003ace:	2301      	movs	r3, #1
 8003ad0:	e08d      	b.n	8003bee <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003ad2:	2300      	movs	r3, #0
 8003ad4:	613b      	str	r3, [r7, #16]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	695b      	ldr	r3, [r3, #20]
 8003adc:	613b      	str	r3, [r7, #16]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	699b      	ldr	r3, [r3, #24]
 8003ae4:	613b      	str	r3, [r7, #16]
 8003ae6:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003ae8:	e066      	b.n	8003bb8 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003aea:	697a      	ldr	r2, [r7, #20]
 8003aec:	6a39      	ldr	r1, [r7, #32]
 8003aee:	68f8      	ldr	r0, [r7, #12]
 8003af0:	f000 f9de 	bl	8003eb0 <I2C_WaitOnTXEFlagUntilTimeout>
 8003af4:	4603      	mov	r3, r0
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d00d      	beq.n	8003b16 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003afe:	2b04      	cmp	r3, #4
 8003b00:	d107      	bne.n	8003b12 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	681a      	ldr	r2, [r3, #0]
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	681b      	ldr	r3, [r3, #0]
 8003b0c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003b10:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003b12:	2301      	movs	r3, #1
 8003b14:	e06b      	b.n	8003bee <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b16:	68fb      	ldr	r3, [r7, #12]
 8003b18:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b1a:	781a      	ldrb	r2, [r3, #0]
 8003b1c:	68fb      	ldr	r3, [r7, #12]
 8003b1e:	681b      	ldr	r3, [r3, #0]
 8003b20:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b26:	1c5a      	adds	r2, r3, #1
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b30:	b29b      	uxth	r3, r3
 8003b32:	3b01      	subs	r3, #1
 8003b34:	b29a      	uxth	r2, r3
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003b3a:	68fb      	ldr	r3, [r7, #12]
 8003b3c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b3e:	3b01      	subs	r3, #1
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	695b      	ldr	r3, [r3, #20]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_I2C_Master_Transmit+0x188>
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d017      	beq.n	8003b8c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b60:	781a      	ldrb	r2, [r3, #0]
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b6c:	1c5a      	adds	r2, r3, #1
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003b72:	68fb      	ldr	r3, [r7, #12]
 8003b74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b76:	b29b      	uxth	r3, r3
 8003b78:	3b01      	subs	r3, #1
 8003b7a:	b29a      	uxth	r2, r3
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8003b80:	68fb      	ldr	r3, [r7, #12]
 8003b82:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003b84:	3b01      	subs	r3, #1
 8003b86:	b29a      	uxth	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b8c:	697a      	ldr	r2, [r7, #20]
 8003b8e:	6a39      	ldr	r1, [r7, #32]
 8003b90:	68f8      	ldr	r0, [r7, #12]
 8003b92:	f000 f9ce 	bl	8003f32 <I2C_WaitOnBTFFlagUntilTimeout>
 8003b96:	4603      	mov	r3, r0
 8003b98:	2b00      	cmp	r3, #0
 8003b9a:	d00d      	beq.n	8003bb8 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b9c:	68fb      	ldr	r3, [r7, #12]
 8003b9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ba0:	2b04      	cmp	r3, #4
 8003ba2:	d107      	bne.n	8003bb4 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ba4:	68fb      	ldr	r3, [r7, #12]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	681a      	ldr	r2, [r3, #0]
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bb2:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003bb4:	2301      	movs	r3, #1
 8003bb6:	e01a      	b.n	8003bee <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bbc:	2b00      	cmp	r3, #0
 8003bbe:	d194      	bne.n	8003aea <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003bce:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2220      	movs	r2, #32
 8003bd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003bd8:	68fb      	ldr	r3, [r7, #12]
 8003bda:	2200      	movs	r2, #0
 8003bdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	2200      	movs	r2, #0
 8003be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8003be8:	2300      	movs	r3, #0
 8003bea:	e000      	b.n	8003bee <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003bec:	2302      	movs	r3, #2
  }
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3718      	adds	r7, #24
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	bd80      	pop	{r7, pc}
 8003bf6:	bf00      	nop
 8003bf8:	00100002 	.word	0x00100002
 8003bfc:	ffff0000 	.word	0xffff0000

08003c00 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003c00:	b580      	push	{r7, lr}
 8003c02:	b088      	sub	sp, #32
 8003c04:	af02      	add	r7, sp, #8
 8003c06:	60f8      	str	r0, [r7, #12]
 8003c08:	607a      	str	r2, [r7, #4]
 8003c0a:	603b      	str	r3, [r7, #0]
 8003c0c:	460b      	mov	r3, r1
 8003c0e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003c14:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003c16:	697b      	ldr	r3, [r7, #20]
 8003c18:	2b08      	cmp	r3, #8
 8003c1a:	d006      	beq.n	8003c2a <I2C_MasterRequestWrite+0x2a>
 8003c1c:	697b      	ldr	r3, [r7, #20]
 8003c1e:	2b01      	cmp	r3, #1
 8003c20:	d003      	beq.n	8003c2a <I2C_MasterRequestWrite+0x2a>
 8003c22:	697b      	ldr	r3, [r7, #20]
 8003c24:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c28:	d108      	bne.n	8003c3c <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	681a      	ldr	r2, [r3, #0]
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c38:	601a      	str	r2, [r3, #0]
 8003c3a:	e00b      	b.n	8003c54 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c40:	2b12      	cmp	r3, #18
 8003c42:	d107      	bne.n	8003c54 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	681a      	ldr	r2, [r3, #0]
 8003c4a:	68fb      	ldr	r3, [r7, #12]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003c52:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003c54:	683b      	ldr	r3, [r7, #0]
 8003c56:	9300      	str	r3, [sp, #0]
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2200      	movs	r2, #0
 8003c5c:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8003c60:	68f8      	ldr	r0, [r7, #12]
 8003c62:	f000 f84f 	bl	8003d04 <I2C_WaitOnFlagUntilTimeout>
 8003c66:	4603      	mov	r3, r0
 8003c68:	2b00      	cmp	r3, #0
 8003c6a:	d00d      	beq.n	8003c88 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003c6c:	68fb      	ldr	r3, [r7, #12]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c76:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003c7a:	d103      	bne.n	8003c84 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8003c82:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8003c84:	2303      	movs	r3, #3
 8003c86:	e035      	b.n	8003cf4 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	691b      	ldr	r3, [r3, #16]
 8003c8c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8003c90:	d108      	bne.n	8003ca4 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003c92:	897b      	ldrh	r3, [r7, #10]
 8003c94:	b2db      	uxtb	r3, r3
 8003c96:	461a      	mov	r2, r3
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8003ca0:	611a      	str	r2, [r3, #16]
 8003ca2:	e01b      	b.n	8003cdc <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003ca4:	897b      	ldrh	r3, [r7, #10]
 8003ca6:	11db      	asrs	r3, r3, #7
 8003ca8:	b2db      	uxtb	r3, r3
 8003caa:	f003 0306 	and.w	r3, r3, #6
 8003cae:	b2db      	uxtb	r3, r3
 8003cb0:	f063 030f 	orn	r3, r3, #15
 8003cb4:	b2da      	uxtb	r2, r3
 8003cb6:	68fb      	ldr	r3, [r7, #12]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003cbc:	683b      	ldr	r3, [r7, #0]
 8003cbe:	687a      	ldr	r2, [r7, #4]
 8003cc0:	490e      	ldr	r1, [pc, #56]	; (8003cfc <I2C_MasterRequestWrite+0xfc>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f000 f875 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
 8003cd0:	e010      	b.n	8003cf4 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003cd2:	897b      	ldrh	r3, [r7, #10]
 8003cd4:	b2da      	uxtb	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	687a      	ldr	r2, [r7, #4]
 8003ce0:	4907      	ldr	r1, [pc, #28]	; (8003d00 <I2C_MasterRequestWrite+0x100>)
 8003ce2:	68f8      	ldr	r0, [r7, #12]
 8003ce4:	f000 f865 	bl	8003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ce8:	4603      	mov	r3, r0
 8003cea:	2b00      	cmp	r3, #0
 8003cec:	d001      	beq.n	8003cf2 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003cee:	2301      	movs	r3, #1
 8003cf0:	e000      	b.n	8003cf4 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3718      	adds	r7, #24
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}
 8003cfc:	00010008 	.word	0x00010008
 8003d00:	00010002 	.word	0x00010002

08003d04 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003d04:	b580      	push	{r7, lr}
 8003d06:	b084      	sub	sp, #16
 8003d08:	af00      	add	r7, sp, #0
 8003d0a:	60f8      	str	r0, [r7, #12]
 8003d0c:	60b9      	str	r1, [r7, #8]
 8003d0e:	603b      	str	r3, [r7, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d14:	e025      	b.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d16:	683b      	ldr	r3, [r7, #0]
 8003d18:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003d1c:	d021      	beq.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d1e:	f7fe fe87 	bl	8002a30 <HAL_GetTick>
 8003d22:	4602      	mov	r2, r0
 8003d24:	69bb      	ldr	r3, [r7, #24]
 8003d26:	1ad3      	subs	r3, r2, r3
 8003d28:	683a      	ldr	r2, [r7, #0]
 8003d2a:	429a      	cmp	r2, r3
 8003d2c:	d302      	bcc.n	8003d34 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003d2e:	683b      	ldr	r3, [r7, #0]
 8003d30:	2b00      	cmp	r3, #0
 8003d32:	d116      	bne.n	8003d62 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	2200      	movs	r2, #0
 8003d38:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	2220      	movs	r2, #32
 8003d3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	2200      	movs	r2, #0
 8003d46:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003d4e:	f043 0220 	orr.w	r2, r3, #32
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003d56:	68fb      	ldr	r3, [r7, #12]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e023      	b.n	8003daa <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003d62:	68bb      	ldr	r3, [r7, #8]
 8003d64:	0c1b      	lsrs	r3, r3, #16
 8003d66:	b2db      	uxtb	r3, r3
 8003d68:	2b01      	cmp	r3, #1
 8003d6a:	d10d      	bne.n	8003d88 <I2C_WaitOnFlagUntilTimeout+0x84>
 8003d6c:	68fb      	ldr	r3, [r7, #12]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	695b      	ldr	r3, [r3, #20]
 8003d72:	43da      	mvns	r2, r3
 8003d74:	68bb      	ldr	r3, [r7, #8]
 8003d76:	4013      	ands	r3, r2
 8003d78:	b29b      	uxth	r3, r3
 8003d7a:	2b00      	cmp	r3, #0
 8003d7c:	bf0c      	ite	eq
 8003d7e:	2301      	moveq	r3, #1
 8003d80:	2300      	movne	r3, #0
 8003d82:	b2db      	uxtb	r3, r3
 8003d84:	461a      	mov	r2, r3
 8003d86:	e00c      	b.n	8003da2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	681b      	ldr	r3, [r3, #0]
 8003d8c:	699b      	ldr	r3, [r3, #24]
 8003d8e:	43da      	mvns	r2, r3
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4013      	ands	r3, r2
 8003d94:	b29b      	uxth	r3, r3
 8003d96:	2b00      	cmp	r3, #0
 8003d98:	bf0c      	ite	eq
 8003d9a:	2301      	moveq	r3, #1
 8003d9c:	2300      	movne	r3, #0
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	461a      	mov	r2, r3
 8003da2:	79fb      	ldrb	r3, [r7, #7]
 8003da4:	429a      	cmp	r2, r3
 8003da6:	d0b6      	beq.n	8003d16 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003da8:	2300      	movs	r3, #0
}
 8003daa:	4618      	mov	r0, r3
 8003dac:	3710      	adds	r7, #16
 8003dae:	46bd      	mov	sp, r7
 8003db0:	bd80      	pop	{r7, pc}

08003db2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003db2:	b580      	push	{r7, lr}
 8003db4:	b084      	sub	sp, #16
 8003db6:	af00      	add	r7, sp, #0
 8003db8:	60f8      	str	r0, [r7, #12]
 8003dba:	60b9      	str	r1, [r7, #8]
 8003dbc:	607a      	str	r2, [r7, #4]
 8003dbe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003dc0:	e051      	b.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	695b      	ldr	r3, [r3, #20]
 8003dc8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003dcc:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003dd0:	d123      	bne.n	8003e1a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	681a      	ldr	r2, [r3, #0]
 8003dd8:	68fb      	ldr	r3, [r7, #12]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003de0:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003dea:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	2200      	movs	r2, #0
 8003df0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	2220      	movs	r2, #32
 8003df6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2200      	movs	r2, #0
 8003dfe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e06:	f043 0204 	orr.w	r2, r3, #4
 8003e0a:	68fb      	ldr	r3, [r7, #12]
 8003e0c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8003e16:	2301      	movs	r3, #1
 8003e18:	e046      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003e20:	d021      	beq.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e22:	f7fe fe05 	bl	8002a30 <HAL_GetTick>
 8003e26:	4602      	mov	r2, r0
 8003e28:	683b      	ldr	r3, [r7, #0]
 8003e2a:	1ad3      	subs	r3, r2, r3
 8003e2c:	687a      	ldr	r2, [r7, #4]
 8003e2e:	429a      	cmp	r2, r3
 8003e30:	d302      	bcc.n	8003e38 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b00      	cmp	r3, #0
 8003e36:	d116      	bne.n	8003e66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	2220      	movs	r2, #32
 8003e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003e52:	f043 0220 	orr.w	r2, r3, #32
 8003e56:	68fb      	ldr	r3, [r7, #12]
 8003e58:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003e5a:	68fb      	ldr	r3, [r7, #12]
 8003e5c:	2200      	movs	r2, #0
 8003e5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003e62:	2301      	movs	r3, #1
 8003e64:	e020      	b.n	8003ea8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003e66:	68bb      	ldr	r3, [r7, #8]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	b2db      	uxtb	r3, r3
 8003e6c:	2b01      	cmp	r3, #1
 8003e6e:	d10c      	bne.n	8003e8a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	695b      	ldr	r3, [r3, #20]
 8003e76:	43da      	mvns	r2, r3
 8003e78:	68bb      	ldr	r3, [r7, #8]
 8003e7a:	4013      	ands	r3, r2
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	bf14      	ite	ne
 8003e82:	2301      	movne	r3, #1
 8003e84:	2300      	moveq	r3, #0
 8003e86:	b2db      	uxtb	r3, r3
 8003e88:	e00b      	b.n	8003ea2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	681b      	ldr	r3, [r3, #0]
 8003e8e:	699b      	ldr	r3, [r3, #24]
 8003e90:	43da      	mvns	r2, r3
 8003e92:	68bb      	ldr	r3, [r7, #8]
 8003e94:	4013      	ands	r3, r2
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	2b00      	cmp	r3, #0
 8003e9a:	bf14      	ite	ne
 8003e9c:	2301      	movne	r3, #1
 8003e9e:	2300      	moveq	r3, #0
 8003ea0:	b2db      	uxtb	r3, r3
 8003ea2:	2b00      	cmp	r3, #0
 8003ea4:	d18d      	bne.n	8003dc2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
}
 8003ea8:	4618      	mov	r0, r3
 8003eaa:	3710      	adds	r7, #16
 8003eac:	46bd      	mov	sp, r7
 8003eae:	bd80      	pop	{r7, pc}

08003eb0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb0:	b580      	push	{r7, lr}
 8003eb2:	b084      	sub	sp, #16
 8003eb4:	af00      	add	r7, sp, #0
 8003eb6:	60f8      	str	r0, [r7, #12]
 8003eb8:	60b9      	str	r1, [r7, #8]
 8003eba:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003ebc:	e02d      	b.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003ebe:	68f8      	ldr	r0, [r7, #12]
 8003ec0:	f000 f878 	bl	8003fb4 <I2C_IsAcknowledgeFailed>
 8003ec4:	4603      	mov	r3, r0
 8003ec6:	2b00      	cmp	r3, #0
 8003ec8:	d001      	beq.n	8003ece <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003eca:	2301      	movs	r3, #1
 8003ecc:	e02d      	b.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ece:	68bb      	ldr	r3, [r7, #8]
 8003ed0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003ed4:	d021      	beq.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ed6:	f7fe fdab 	bl	8002a30 <HAL_GetTick>
 8003eda:	4602      	mov	r2, r0
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	1ad3      	subs	r3, r2, r3
 8003ee0:	68ba      	ldr	r2, [r7, #8]
 8003ee2:	429a      	cmp	r2, r3
 8003ee4:	d302      	bcc.n	8003eec <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d116      	bne.n	8003f1a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	2220      	movs	r2, #32
 8003ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2200      	movs	r2, #0
 8003efe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	f043 0220 	orr.w	r2, r3, #32
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f0e:	68fb      	ldr	r3, [r7, #12]
 8003f10:	2200      	movs	r2, #0
 8003f12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f16:	2301      	movs	r3, #1
 8003f18:	e007      	b.n	8003f2a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	681b      	ldr	r3, [r3, #0]
 8003f1e:	695b      	ldr	r3, [r3, #20]
 8003f20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003f24:	2b80      	cmp	r3, #128	; 0x80
 8003f26:	d1ca      	bne.n	8003ebe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003f28:	2300      	movs	r3, #0
}
 8003f2a:	4618      	mov	r0, r3
 8003f2c:	3710      	adds	r7, #16
 8003f2e:	46bd      	mov	sp, r7
 8003f30:	bd80      	pop	{r7, pc}

08003f32 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003f32:	b580      	push	{r7, lr}
 8003f34:	b084      	sub	sp, #16
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	60f8      	str	r0, [r7, #12]
 8003f3a:	60b9      	str	r1, [r7, #8]
 8003f3c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f3e:	e02d      	b.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 f837 	bl	8003fb4 <I2C_IsAcknowledgeFailed>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e02d      	b.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003f50:	68bb      	ldr	r3, [r7, #8]
 8003f52:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003f56:	d021      	beq.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003f58:	f7fe fd6a 	bl	8002a30 <HAL_GetTick>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	1ad3      	subs	r3, r2, r3
 8003f62:	68ba      	ldr	r2, [r7, #8]
 8003f64:	429a      	cmp	r2, r3
 8003f66:	d302      	bcc.n	8003f6e <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d116      	bne.n	8003f9c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	2200      	movs	r2, #0
 8003f72:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2220      	movs	r2, #32
 8003f78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2200      	movs	r2, #0
 8003f80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f88:	f043 0220 	orr.w	r2, r3, #32
 8003f8c:	68fb      	ldr	r3, [r7, #12]
 8003f8e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003f90:	68fb      	ldr	r3, [r7, #12]
 8003f92:	2200      	movs	r2, #0
 8003f94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003f98:	2301      	movs	r3, #1
 8003f9a:	e007      	b.n	8003fac <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	695b      	ldr	r3, [r3, #20]
 8003fa2:	f003 0304 	and.w	r3, r3, #4
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d1ca      	bne.n	8003f40 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3710      	adds	r7, #16
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}

08003fb4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003fb4:	b480      	push	{r7}
 8003fb6:	b083      	sub	sp, #12
 8003fb8:	af00      	add	r7, sp, #0
 8003fba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	695b      	ldr	r3, [r3, #20]
 8003fc2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003fc6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003fca:	d11b      	bne.n	8004004 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003fd4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	2220      	movs	r2, #32
 8003fe0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ff0:	f043 0204 	orr.w	r2, r3, #4
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	2200      	movs	r2, #0
 8003ffc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004000:	2301      	movs	r3, #1
 8004002:	e000      	b.n	8004006 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004004:	2300      	movs	r3, #0
}
 8004006:	4618      	mov	r0, r3
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004010:	4770      	bx	lr
	...

08004014 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b086      	sub	sp, #24
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	2b00      	cmp	r3, #0
 8004020:	d101      	bne.n	8004026 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004022:	2301      	movs	r3, #1
 8004024:	e267      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b00      	cmp	r3, #0
 8004030:	d075      	beq.n	800411e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004032:	4b88      	ldr	r3, [pc, #544]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004034:	689b      	ldr	r3, [r3, #8]
 8004036:	f003 030c 	and.w	r3, r3, #12
 800403a:	2b04      	cmp	r3, #4
 800403c:	d00c      	beq.n	8004058 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800403e:	4b85      	ldr	r3, [pc, #532]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004046:	2b08      	cmp	r3, #8
 8004048:	d112      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800404a:	4b82      	ldr	r3, [pc, #520]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800404c:	685b      	ldr	r3, [r3, #4]
 800404e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004052:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004056:	d10b      	bne.n	8004070 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004058:	4b7e      	ldr	r3, [pc, #504]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004060:	2b00      	cmp	r3, #0
 8004062:	d05b      	beq.n	800411c <HAL_RCC_OscConfig+0x108>
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	685b      	ldr	r3, [r3, #4]
 8004068:	2b00      	cmp	r3, #0
 800406a:	d157      	bne.n	800411c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800406c:	2301      	movs	r3, #1
 800406e:	e242      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685b      	ldr	r3, [r3, #4]
 8004074:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004078:	d106      	bne.n	8004088 <HAL_RCC_OscConfig+0x74>
 800407a:	4b76      	ldr	r3, [pc, #472]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	4a75      	ldr	r2, [pc, #468]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004080:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004084:	6013      	str	r3, [r2, #0]
 8004086:	e01d      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	685b      	ldr	r3, [r3, #4]
 800408c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004090:	d10c      	bne.n	80040ac <HAL_RCC_OscConfig+0x98>
 8004092:	4b70      	ldr	r3, [pc, #448]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4a6f      	ldr	r2, [pc, #444]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004098:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800409c:	6013      	str	r3, [r2, #0]
 800409e:	4b6d      	ldr	r3, [pc, #436]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	4a6c      	ldr	r2, [pc, #432]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80040a8:	6013      	str	r3, [r2, #0]
 80040aa:	e00b      	b.n	80040c4 <HAL_RCC_OscConfig+0xb0>
 80040ac:	4b69      	ldr	r3, [pc, #420]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ae:	681b      	ldr	r3, [r3, #0]
 80040b0:	4a68      	ldr	r2, [pc, #416]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040b2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80040b6:	6013      	str	r3, [r2, #0]
 80040b8:	4b66      	ldr	r3, [pc, #408]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	4a65      	ldr	r2, [pc, #404]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040be:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80040c2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	685b      	ldr	r3, [r3, #4]
 80040c8:	2b00      	cmp	r3, #0
 80040ca:	d013      	beq.n	80040f4 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040cc:	f7fe fcb0 	bl	8002a30 <HAL_GetTick>
 80040d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040d2:	e008      	b.n	80040e6 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040d4:	f7fe fcac 	bl	8002a30 <HAL_GetTick>
 80040d8:	4602      	mov	r2, r0
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	1ad3      	subs	r3, r2, r3
 80040de:	2b64      	cmp	r3, #100	; 0x64
 80040e0:	d901      	bls.n	80040e6 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80040e2:	2303      	movs	r3, #3
 80040e4:	e207      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80040e6:	4b5b      	ldr	r3, [pc, #364]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80040e8:	681b      	ldr	r3, [r3, #0]
 80040ea:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d0f0      	beq.n	80040d4 <HAL_RCC_OscConfig+0xc0>
 80040f2:	e014      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80040f4:	f7fe fc9c 	bl	8002a30 <HAL_GetTick>
 80040f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80040fa:	e008      	b.n	800410e <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80040fc:	f7fe fc98 	bl	8002a30 <HAL_GetTick>
 8004100:	4602      	mov	r2, r0
 8004102:	693b      	ldr	r3, [r7, #16]
 8004104:	1ad3      	subs	r3, r2, r3
 8004106:	2b64      	cmp	r3, #100	; 0x64
 8004108:	d901      	bls.n	800410e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800410a:	2303      	movs	r3, #3
 800410c:	e1f3      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800410e:	4b51      	ldr	r3, [pc, #324]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004116:	2b00      	cmp	r3, #0
 8004118:	d1f0      	bne.n	80040fc <HAL_RCC_OscConfig+0xe8>
 800411a:	e000      	b.n	800411e <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800411c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	f003 0302 	and.w	r3, r3, #2
 8004126:	2b00      	cmp	r3, #0
 8004128:	d063      	beq.n	80041f2 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800412a:	4b4a      	ldr	r3, [pc, #296]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	f003 030c 	and.w	r3, r3, #12
 8004132:	2b00      	cmp	r3, #0
 8004134:	d00b      	beq.n	800414e <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004136:	4b47      	ldr	r3, [pc, #284]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004138:	689b      	ldr	r3, [r3, #8]
 800413a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800413e:	2b08      	cmp	r3, #8
 8004140:	d11c      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004142:	4b44      	ldr	r3, [pc, #272]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004144:	685b      	ldr	r3, [r3, #4]
 8004146:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800414a:	2b00      	cmp	r3, #0
 800414c:	d116      	bne.n	800417c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800414e:	4b41      	ldr	r3, [pc, #260]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004150:	681b      	ldr	r3, [r3, #0]
 8004152:	f003 0302 	and.w	r3, r3, #2
 8004156:	2b00      	cmp	r3, #0
 8004158:	d005      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	68db      	ldr	r3, [r3, #12]
 800415e:	2b01      	cmp	r3, #1
 8004160:	d001      	beq.n	8004166 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004162:	2301      	movs	r3, #1
 8004164:	e1c7      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004166:	4b3b      	ldr	r3, [pc, #236]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	691b      	ldr	r3, [r3, #16]
 8004172:	00db      	lsls	r3, r3, #3
 8004174:	4937      	ldr	r1, [pc, #220]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004176:	4313      	orrs	r3, r2
 8004178:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800417a:	e03a      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	68db      	ldr	r3, [r3, #12]
 8004180:	2b00      	cmp	r3, #0
 8004182:	d020      	beq.n	80041c6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004184:	4b34      	ldr	r3, [pc, #208]	; (8004258 <HAL_RCC_OscConfig+0x244>)
 8004186:	2201      	movs	r2, #1
 8004188:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800418a:	f7fe fc51 	bl	8002a30 <HAL_GetTick>
 800418e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004190:	e008      	b.n	80041a4 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004192:	f7fe fc4d 	bl	8002a30 <HAL_GetTick>
 8004196:	4602      	mov	r2, r0
 8004198:	693b      	ldr	r3, [r7, #16]
 800419a:	1ad3      	subs	r3, r2, r3
 800419c:	2b02      	cmp	r3, #2
 800419e:	d901      	bls.n	80041a4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80041a0:	2303      	movs	r3, #3
 80041a2:	e1a8      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80041a4:	4b2b      	ldr	r3, [pc, #172]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f003 0302 	and.w	r3, r3, #2
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d0f0      	beq.n	8004192 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80041b0:	4b28      	ldr	r3, [pc, #160]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80041b8:	687b      	ldr	r3, [r7, #4]
 80041ba:	691b      	ldr	r3, [r3, #16]
 80041bc:	00db      	lsls	r3, r3, #3
 80041be:	4925      	ldr	r1, [pc, #148]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041c0:	4313      	orrs	r3, r2
 80041c2:	600b      	str	r3, [r1, #0]
 80041c4:	e015      	b.n	80041f2 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80041c6:	4b24      	ldr	r3, [pc, #144]	; (8004258 <HAL_RCC_OscConfig+0x244>)
 80041c8:	2200      	movs	r2, #0
 80041ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80041cc:	f7fe fc30 	bl	8002a30 <HAL_GetTick>
 80041d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041d2:	e008      	b.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80041d4:	f7fe fc2c 	bl	8002a30 <HAL_GetTick>
 80041d8:	4602      	mov	r2, r0
 80041da:	693b      	ldr	r3, [r7, #16]
 80041dc:	1ad3      	subs	r3, r2, r3
 80041de:	2b02      	cmp	r3, #2
 80041e0:	d901      	bls.n	80041e6 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80041e2:	2303      	movs	r3, #3
 80041e4:	e187      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80041e6:	4b1b      	ldr	r3, [pc, #108]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 80041e8:	681b      	ldr	r3, [r3, #0]
 80041ea:	f003 0302 	and.w	r3, r3, #2
 80041ee:	2b00      	cmp	r3, #0
 80041f0:	d1f0      	bne.n	80041d4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	f003 0308 	and.w	r3, r3, #8
 80041fa:	2b00      	cmp	r3, #0
 80041fc:	d036      	beq.n	800426c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	695b      	ldr	r3, [r3, #20]
 8004202:	2b00      	cmp	r3, #0
 8004204:	d016      	beq.n	8004234 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004206:	4b15      	ldr	r3, [pc, #84]	; (800425c <HAL_RCC_OscConfig+0x248>)
 8004208:	2201      	movs	r2, #1
 800420a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800420c:	f7fe fc10 	bl	8002a30 <HAL_GetTick>
 8004210:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004212:	e008      	b.n	8004226 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004214:	f7fe fc0c 	bl	8002a30 <HAL_GetTick>
 8004218:	4602      	mov	r2, r0
 800421a:	693b      	ldr	r3, [r7, #16]
 800421c:	1ad3      	subs	r3, r2, r3
 800421e:	2b02      	cmp	r3, #2
 8004220:	d901      	bls.n	8004226 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004222:	2303      	movs	r3, #3
 8004224:	e167      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004226:	4b0b      	ldr	r3, [pc, #44]	; (8004254 <HAL_RCC_OscConfig+0x240>)
 8004228:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800422a:	f003 0302 	and.w	r3, r3, #2
 800422e:	2b00      	cmp	r3, #0
 8004230:	d0f0      	beq.n	8004214 <HAL_RCC_OscConfig+0x200>
 8004232:	e01b      	b.n	800426c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004234:	4b09      	ldr	r3, [pc, #36]	; (800425c <HAL_RCC_OscConfig+0x248>)
 8004236:	2200      	movs	r2, #0
 8004238:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800423a:	f7fe fbf9 	bl	8002a30 <HAL_GetTick>
 800423e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004240:	e00e      	b.n	8004260 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004242:	f7fe fbf5 	bl	8002a30 <HAL_GetTick>
 8004246:	4602      	mov	r2, r0
 8004248:	693b      	ldr	r3, [r7, #16]
 800424a:	1ad3      	subs	r3, r2, r3
 800424c:	2b02      	cmp	r3, #2
 800424e:	d907      	bls.n	8004260 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004250:	2303      	movs	r3, #3
 8004252:	e150      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004254:	40023800 	.word	0x40023800
 8004258:	42470000 	.word	0x42470000
 800425c:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004260:	4b88      	ldr	r3, [pc, #544]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004262:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004264:	f003 0302 	and.w	r3, r3, #2
 8004268:	2b00      	cmp	r3, #0
 800426a:	d1ea      	bne.n	8004242 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f003 0304 	and.w	r3, r3, #4
 8004274:	2b00      	cmp	r3, #0
 8004276:	f000 8097 	beq.w	80043a8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800427a:	2300      	movs	r3, #0
 800427c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800427e:	4b81      	ldr	r3, [pc, #516]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004282:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004286:	2b00      	cmp	r3, #0
 8004288:	d10f      	bne.n	80042aa <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800428a:	2300      	movs	r3, #0
 800428c:	60bb      	str	r3, [r7, #8]
 800428e:	4b7d      	ldr	r3, [pc, #500]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004292:	4a7c      	ldr	r2, [pc, #496]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004294:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004298:	6413      	str	r3, [r2, #64]	; 0x40
 800429a:	4b7a      	ldr	r3, [pc, #488]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800429c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800429e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042a2:	60bb      	str	r3, [r7, #8]
 80042a4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80042a6:	2301      	movs	r3, #1
 80042a8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042aa:	4b77      	ldr	r3, [pc, #476]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d118      	bne.n	80042e8 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80042b6:	4b74      	ldr	r3, [pc, #464]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	4a73      	ldr	r2, [pc, #460]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042bc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80042c0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80042c2:	f7fe fbb5 	bl	8002a30 <HAL_GetTick>
 80042c6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042c8:	e008      	b.n	80042dc <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80042ca:	f7fe fbb1 	bl	8002a30 <HAL_GetTick>
 80042ce:	4602      	mov	r2, r0
 80042d0:	693b      	ldr	r3, [r7, #16]
 80042d2:	1ad3      	subs	r3, r2, r3
 80042d4:	2b02      	cmp	r3, #2
 80042d6:	d901      	bls.n	80042dc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80042d8:	2303      	movs	r3, #3
 80042da:	e10c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80042dc:	4b6a      	ldr	r3, [pc, #424]	; (8004488 <HAL_RCC_OscConfig+0x474>)
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d0f0      	beq.n	80042ca <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	689b      	ldr	r3, [r3, #8]
 80042ec:	2b01      	cmp	r3, #1
 80042ee:	d106      	bne.n	80042fe <HAL_RCC_OscConfig+0x2ea>
 80042f0:	4b64      	ldr	r3, [pc, #400]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80042f4:	4a63      	ldr	r2, [pc, #396]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80042f6:	f043 0301 	orr.w	r3, r3, #1
 80042fa:	6713      	str	r3, [r2, #112]	; 0x70
 80042fc:	e01c      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	2b05      	cmp	r3, #5
 8004304:	d10c      	bne.n	8004320 <HAL_RCC_OscConfig+0x30c>
 8004306:	4b5f      	ldr	r3, [pc, #380]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004308:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800430a:	4a5e      	ldr	r2, [pc, #376]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800430c:	f043 0304 	orr.w	r3, r3, #4
 8004310:	6713      	str	r3, [r2, #112]	; 0x70
 8004312:	4b5c      	ldr	r3, [pc, #368]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004314:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004316:	4a5b      	ldr	r2, [pc, #364]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004318:	f043 0301 	orr.w	r3, r3, #1
 800431c:	6713      	str	r3, [r2, #112]	; 0x70
 800431e:	e00b      	b.n	8004338 <HAL_RCC_OscConfig+0x324>
 8004320:	4b58      	ldr	r3, [pc, #352]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004322:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004324:	4a57      	ldr	r2, [pc, #348]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004326:	f023 0301 	bic.w	r3, r3, #1
 800432a:	6713      	str	r3, [r2, #112]	; 0x70
 800432c:	4b55      	ldr	r3, [pc, #340]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800432e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004330:	4a54      	ldr	r2, [pc, #336]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004332:	f023 0304 	bic.w	r3, r3, #4
 8004336:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	689b      	ldr	r3, [r3, #8]
 800433c:	2b00      	cmp	r3, #0
 800433e:	d015      	beq.n	800436c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004340:	f7fe fb76 	bl	8002a30 <HAL_GetTick>
 8004344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004346:	e00a      	b.n	800435e <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004348:	f7fe fb72 	bl	8002a30 <HAL_GetTick>
 800434c:	4602      	mov	r2, r0
 800434e:	693b      	ldr	r3, [r7, #16]
 8004350:	1ad3      	subs	r3, r2, r3
 8004352:	f241 3288 	movw	r2, #5000	; 0x1388
 8004356:	4293      	cmp	r3, r2
 8004358:	d901      	bls.n	800435e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800435a:	2303      	movs	r3, #3
 800435c:	e0cb      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800435e:	4b49      	ldr	r3, [pc, #292]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004362:	f003 0302 	and.w	r3, r3, #2
 8004366:	2b00      	cmp	r3, #0
 8004368:	d0ee      	beq.n	8004348 <HAL_RCC_OscConfig+0x334>
 800436a:	e014      	b.n	8004396 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800436c:	f7fe fb60 	bl	8002a30 <HAL_GetTick>
 8004370:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004372:	e00a      	b.n	800438a <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004374:	f7fe fb5c 	bl	8002a30 <HAL_GetTick>
 8004378:	4602      	mov	r2, r0
 800437a:	693b      	ldr	r3, [r7, #16]
 800437c:	1ad3      	subs	r3, r2, r3
 800437e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004382:	4293      	cmp	r3, r2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e0b5      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800438a:	4b3e      	ldr	r3, [pc, #248]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800438c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800438e:	f003 0302 	and.w	r3, r3, #2
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1ee      	bne.n	8004374 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004396:	7dfb      	ldrb	r3, [r7, #23]
 8004398:	2b01      	cmp	r3, #1
 800439a:	d105      	bne.n	80043a8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800439c:	4b39      	ldr	r3, [pc, #228]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800439e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043a0:	4a38      	ldr	r2, [pc, #224]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043a2:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80043a6:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	f000 80a1 	beq.w	80044f4 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80043b2:	4b34      	ldr	r3, [pc, #208]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043b4:	689b      	ldr	r3, [r3, #8]
 80043b6:	f003 030c 	and.w	r3, r3, #12
 80043ba:	2b08      	cmp	r3, #8
 80043bc:	d05c      	beq.n	8004478 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	699b      	ldr	r3, [r3, #24]
 80043c2:	2b02      	cmp	r3, #2
 80043c4:	d141      	bne.n	800444a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80043c6:	4b31      	ldr	r3, [pc, #196]	; (800448c <HAL_RCC_OscConfig+0x478>)
 80043c8:	2200      	movs	r2, #0
 80043ca:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80043cc:	f7fe fb30 	bl	8002a30 <HAL_GetTick>
 80043d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043d2:	e008      	b.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80043d4:	f7fe fb2c 	bl	8002a30 <HAL_GetTick>
 80043d8:	4602      	mov	r2, r0
 80043da:	693b      	ldr	r3, [r7, #16]
 80043dc:	1ad3      	subs	r3, r2, r3
 80043de:	2b02      	cmp	r3, #2
 80043e0:	d901      	bls.n	80043e6 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80043e2:	2303      	movs	r3, #3
 80043e4:	e087      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80043e6:	4b27      	ldr	r3, [pc, #156]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80043ee:	2b00      	cmp	r3, #0
 80043f0:	d1f0      	bne.n	80043d4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	69da      	ldr	r2, [r3, #28]
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	6a1b      	ldr	r3, [r3, #32]
 80043fa:	431a      	orrs	r2, r3
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004400:	019b      	lsls	r3, r3, #6
 8004402:	431a      	orrs	r2, r3
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004408:	085b      	lsrs	r3, r3, #1
 800440a:	3b01      	subs	r3, #1
 800440c:	041b      	lsls	r3, r3, #16
 800440e:	431a      	orrs	r2, r3
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004414:	061b      	lsls	r3, r3, #24
 8004416:	491b      	ldr	r1, [pc, #108]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 8004418:	4313      	orrs	r3, r2
 800441a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800441c:	4b1b      	ldr	r3, [pc, #108]	; (800448c <HAL_RCC_OscConfig+0x478>)
 800441e:	2201      	movs	r2, #1
 8004420:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004422:	f7fe fb05 	bl	8002a30 <HAL_GetTick>
 8004426:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004428:	e008      	b.n	800443c <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800442a:	f7fe fb01 	bl	8002a30 <HAL_GetTick>
 800442e:	4602      	mov	r2, r0
 8004430:	693b      	ldr	r3, [r7, #16]
 8004432:	1ad3      	subs	r3, r2, r3
 8004434:	2b02      	cmp	r3, #2
 8004436:	d901      	bls.n	800443c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004438:	2303      	movs	r3, #3
 800443a:	e05c      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800443c:	4b11      	ldr	r3, [pc, #68]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d0f0      	beq.n	800442a <HAL_RCC_OscConfig+0x416>
 8004448:	e054      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800444a:	4b10      	ldr	r3, [pc, #64]	; (800448c <HAL_RCC_OscConfig+0x478>)
 800444c:	2200      	movs	r2, #0
 800444e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004450:	f7fe faee 	bl	8002a30 <HAL_GetTick>
 8004454:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004456:	e008      	b.n	800446a <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004458:	f7fe faea 	bl	8002a30 <HAL_GetTick>
 800445c:	4602      	mov	r2, r0
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	1ad3      	subs	r3, r2, r3
 8004462:	2b02      	cmp	r3, #2
 8004464:	d901      	bls.n	800446a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004466:	2303      	movs	r3, #3
 8004468:	e045      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800446a:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_RCC_OscConfig+0x470>)
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004472:	2b00      	cmp	r3, #0
 8004474:	d1f0      	bne.n	8004458 <HAL_RCC_OscConfig+0x444>
 8004476:	e03d      	b.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	2b01      	cmp	r3, #1
 800447e:	d107      	bne.n	8004490 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004480:	2301      	movs	r3, #1
 8004482:	e038      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
 8004484:	40023800 	.word	0x40023800
 8004488:	40007000 	.word	0x40007000
 800448c:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004490:	4b1b      	ldr	r3, [pc, #108]	; (8004500 <HAL_RCC_OscConfig+0x4ec>)
 8004492:	685b      	ldr	r3, [r3, #4]
 8004494:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	699b      	ldr	r3, [r3, #24]
 800449a:	2b01      	cmp	r3, #1
 800449c:	d028      	beq.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800449e:	68fb      	ldr	r3, [r7, #12]
 80044a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80044a8:	429a      	cmp	r2, r3
 80044aa:	d121      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80044b6:	429a      	cmp	r2, r3
 80044b8:	d11a      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044ba:	68fa      	ldr	r2, [r7, #12]
 80044bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80044c0:	4013      	ands	r3, r2
 80044c2:	687a      	ldr	r2, [r7, #4]
 80044c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80044c6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80044c8:	4293      	cmp	r3, r2
 80044ca:	d111      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80044d6:	085b      	lsrs	r3, r3, #1
 80044d8:	3b01      	subs	r3, #1
 80044da:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80044dc:	429a      	cmp	r2, r3
 80044de:	d107      	bne.n	80044f0 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044ea:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80044ec:	429a      	cmp	r2, r3
 80044ee:	d001      	beq.n	80044f4 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80044f0:	2301      	movs	r3, #1
 80044f2:	e000      	b.n	80044f6 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80044f4:	2300      	movs	r3, #0
}
 80044f6:	4618      	mov	r0, r3
 80044f8:	3718      	adds	r7, #24
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bd80      	pop	{r7, pc}
 80044fe:	bf00      	nop
 8004500:	40023800 	.word	0x40023800

08004504 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004504:	b580      	push	{r7, lr}
 8004506:	b084      	sub	sp, #16
 8004508:	af00      	add	r7, sp, #0
 800450a:	6078      	str	r0, [r7, #4]
 800450c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	2b00      	cmp	r3, #0
 8004512:	d101      	bne.n	8004518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004514:	2301      	movs	r3, #1
 8004516:	e0cc      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8004518:	4b68      	ldr	r3, [pc, #416]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	f003 0307 	and.w	r3, r3, #7
 8004520:	683a      	ldr	r2, [r7, #0]
 8004522:	429a      	cmp	r2, r3
 8004524:	d90c      	bls.n	8004540 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004526:	4b65      	ldr	r3, [pc, #404]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004528:	683a      	ldr	r2, [r7, #0]
 800452a:	b2d2      	uxtb	r2, r2
 800452c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800452e:	4b63      	ldr	r3, [pc, #396]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004530:	681b      	ldr	r3, [r3, #0]
 8004532:	f003 0307 	and.w	r3, r3, #7
 8004536:	683a      	ldr	r2, [r7, #0]
 8004538:	429a      	cmp	r2, r3
 800453a:	d001      	beq.n	8004540 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800453c:	2301      	movs	r3, #1
 800453e:	e0b8      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	681b      	ldr	r3, [r3, #0]
 8004544:	f003 0302 	and.w	r3, r3, #2
 8004548:	2b00      	cmp	r3, #0
 800454a:	d020      	beq.n	800458e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f003 0304 	and.w	r3, r3, #4
 8004554:	2b00      	cmp	r3, #0
 8004556:	d005      	beq.n	8004564 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004558:	4b59      	ldr	r3, [pc, #356]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455a:	689b      	ldr	r3, [r3, #8]
 800455c:	4a58      	ldr	r2, [pc, #352]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800455e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8004562:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	f003 0308 	and.w	r3, r3, #8
 800456c:	2b00      	cmp	r3, #0
 800456e:	d005      	beq.n	800457c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004570:	4b53      	ldr	r3, [pc, #332]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004572:	689b      	ldr	r3, [r3, #8]
 8004574:	4a52      	ldr	r2, [pc, #328]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004576:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800457a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800457c:	4b50      	ldr	r3, [pc, #320]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800457e:	689b      	ldr	r3, [r3, #8]
 8004580:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	689b      	ldr	r3, [r3, #8]
 8004588:	494d      	ldr	r1, [pc, #308]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800458a:	4313      	orrs	r3, r2
 800458c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	681b      	ldr	r3, [r3, #0]
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d044      	beq.n	8004624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800459a:	687b      	ldr	r3, [r7, #4]
 800459c:	685b      	ldr	r3, [r3, #4]
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d107      	bne.n	80045b2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80045a2:	4b47      	ldr	r3, [pc, #284]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a4:	681b      	ldr	r3, [r3, #0]
 80045a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d119      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ae:	2301      	movs	r3, #1
 80045b0:	e07f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	685b      	ldr	r3, [r3, #4]
 80045b6:	2b02      	cmp	r3, #2
 80045b8:	d003      	beq.n	80045c2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80045be:	2b03      	cmp	r3, #3
 80045c0:	d107      	bne.n	80045d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80045c2:	4b3f      	ldr	r3, [pc, #252]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d109      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045ce:	2301      	movs	r3, #1
 80045d0:	e06f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80045d2:	4b3b      	ldr	r3, [pc, #236]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f003 0302 	and.w	r3, r3, #2
 80045da:	2b00      	cmp	r3, #0
 80045dc:	d101      	bne.n	80045e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	e067      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80045e2:	4b37      	ldr	r3, [pc, #220]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045e4:	689b      	ldr	r3, [r3, #8]
 80045e6:	f023 0203 	bic.w	r2, r3, #3
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	685b      	ldr	r3, [r3, #4]
 80045ee:	4934      	ldr	r1, [pc, #208]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 80045f0:	4313      	orrs	r3, r2
 80045f2:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80045f4:	f7fe fa1c 	bl	8002a30 <HAL_GetTick>
 80045f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80045fa:	e00a      	b.n	8004612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80045fc:	f7fe fa18 	bl	8002a30 <HAL_GetTick>
 8004600:	4602      	mov	r2, r0
 8004602:	68fb      	ldr	r3, [r7, #12]
 8004604:	1ad3      	subs	r3, r2, r3
 8004606:	f241 3288 	movw	r2, #5000	; 0x1388
 800460a:	4293      	cmp	r3, r2
 800460c:	d901      	bls.n	8004612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800460e:	2303      	movs	r3, #3
 8004610:	e04f      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004612:	4b2b      	ldr	r3, [pc, #172]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004614:	689b      	ldr	r3, [r3, #8]
 8004616:	f003 020c 	and.w	r2, r3, #12
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	685b      	ldr	r3, [r3, #4]
 800461e:	009b      	lsls	r3, r3, #2
 8004620:	429a      	cmp	r2, r3
 8004622:	d1eb      	bne.n	80045fc <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8004624:	4b25      	ldr	r3, [pc, #148]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004626:	681b      	ldr	r3, [r3, #0]
 8004628:	f003 0307 	and.w	r3, r3, #7
 800462c:	683a      	ldr	r2, [r7, #0]
 800462e:	429a      	cmp	r2, r3
 8004630:	d20c      	bcs.n	800464c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004632:	4b22      	ldr	r3, [pc, #136]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 8004634:	683a      	ldr	r2, [r7, #0]
 8004636:	b2d2      	uxtb	r2, r2
 8004638:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800463a:	4b20      	ldr	r3, [pc, #128]	; (80046bc <HAL_RCC_ClockConfig+0x1b8>)
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f003 0307 	and.w	r3, r3, #7
 8004642:	683a      	ldr	r2, [r7, #0]
 8004644:	429a      	cmp	r2, r3
 8004646:	d001      	beq.n	800464c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004648:	2301      	movs	r3, #1
 800464a:	e032      	b.n	80046b2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	f003 0304 	and.w	r3, r3, #4
 8004654:	2b00      	cmp	r3, #0
 8004656:	d008      	beq.n	800466a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004658:	4b19      	ldr	r3, [pc, #100]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 800465a:	689b      	ldr	r3, [r3, #8]
 800465c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	68db      	ldr	r3, [r3, #12]
 8004664:	4916      	ldr	r1, [pc, #88]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004666:	4313      	orrs	r3, r2
 8004668:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	f003 0308 	and.w	r3, r3, #8
 8004672:	2b00      	cmp	r3, #0
 8004674:	d009      	beq.n	800468a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004676:	4b12      	ldr	r3, [pc, #72]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004678:	689b      	ldr	r3, [r3, #8]
 800467a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	691b      	ldr	r3, [r3, #16]
 8004682:	00db      	lsls	r3, r3, #3
 8004684:	490e      	ldr	r1, [pc, #56]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004686:	4313      	orrs	r3, r2
 8004688:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800468a:	f000 f821 	bl	80046d0 <HAL_RCC_GetSysClockFreq>
 800468e:	4602      	mov	r2, r0
 8004690:	4b0b      	ldr	r3, [pc, #44]	; (80046c0 <HAL_RCC_ClockConfig+0x1bc>)
 8004692:	689b      	ldr	r3, [r3, #8]
 8004694:	091b      	lsrs	r3, r3, #4
 8004696:	f003 030f 	and.w	r3, r3, #15
 800469a:	490a      	ldr	r1, [pc, #40]	; (80046c4 <HAL_RCC_ClockConfig+0x1c0>)
 800469c:	5ccb      	ldrb	r3, [r1, r3]
 800469e:	fa22 f303 	lsr.w	r3, r2, r3
 80046a2:	4a09      	ldr	r2, [pc, #36]	; (80046c8 <HAL_RCC_ClockConfig+0x1c4>)
 80046a4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80046a6:	4b09      	ldr	r3, [pc, #36]	; (80046cc <HAL_RCC_ClockConfig+0x1c8>)
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	4618      	mov	r0, r3
 80046ac:	f7fe f97c 	bl	80029a8 <HAL_InitTick>

  return HAL_OK;
 80046b0:	2300      	movs	r3, #0
}
 80046b2:	4618      	mov	r0, r3
 80046b4:	3710      	adds	r7, #16
 80046b6:	46bd      	mov	sp, r7
 80046b8:	bd80      	pop	{r7, pc}
 80046ba:	bf00      	nop
 80046bc:	40023c00 	.word	0x40023c00
 80046c0:	40023800 	.word	0x40023800
 80046c4:	08006eac 	.word	0x08006eac
 80046c8:	20001440 	.word	0x20001440
 80046cc:	20001444 	.word	0x20001444

080046d0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80046d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80046d4:	b094      	sub	sp, #80	; 0x50
 80046d6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80046d8:	2300      	movs	r3, #0
 80046da:	647b      	str	r3, [r7, #68]	; 0x44
 80046dc:	2300      	movs	r3, #0
 80046de:	64fb      	str	r3, [r7, #76]	; 0x4c
 80046e0:	2300      	movs	r3, #0
 80046e2:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 80046e4:	2300      	movs	r3, #0
 80046e6:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80046e8:	4b79      	ldr	r3, [pc, #484]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80046ea:	689b      	ldr	r3, [r3, #8]
 80046ec:	f003 030c 	and.w	r3, r3, #12
 80046f0:	2b08      	cmp	r3, #8
 80046f2:	d00d      	beq.n	8004710 <HAL_RCC_GetSysClockFreq+0x40>
 80046f4:	2b08      	cmp	r3, #8
 80046f6:	f200 80e1 	bhi.w	80048bc <HAL_RCC_GetSysClockFreq+0x1ec>
 80046fa:	2b00      	cmp	r3, #0
 80046fc:	d002      	beq.n	8004704 <HAL_RCC_GetSysClockFreq+0x34>
 80046fe:	2b04      	cmp	r3, #4
 8004700:	d003      	beq.n	800470a <HAL_RCC_GetSysClockFreq+0x3a>
 8004702:	e0db      	b.n	80048bc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004704:	4b73      	ldr	r3, [pc, #460]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004706:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8004708:	e0db      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800470a:	4b73      	ldr	r3, [pc, #460]	; (80048d8 <HAL_RCC_GetSysClockFreq+0x208>)
 800470c:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800470e:	e0d8      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004710:	4b6f      	ldr	r3, [pc, #444]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8004718:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800471a:	4b6d      	ldr	r3, [pc, #436]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 800471c:	685b      	ldr	r3, [r3, #4]
 800471e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004722:	2b00      	cmp	r3, #0
 8004724:	d063      	beq.n	80047ee <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004726:	4b6a      	ldr	r3, [pc, #424]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004728:	685b      	ldr	r3, [r3, #4]
 800472a:	099b      	lsrs	r3, r3, #6
 800472c:	2200      	movs	r2, #0
 800472e:	63bb      	str	r3, [r7, #56]	; 0x38
 8004730:	63fa      	str	r2, [r7, #60]	; 0x3c
 8004732:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004734:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004738:	633b      	str	r3, [r7, #48]	; 0x30
 800473a:	2300      	movs	r3, #0
 800473c:	637b      	str	r3, [r7, #52]	; 0x34
 800473e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8004742:	4622      	mov	r2, r4
 8004744:	462b      	mov	r3, r5
 8004746:	f04f 0000 	mov.w	r0, #0
 800474a:	f04f 0100 	mov.w	r1, #0
 800474e:	0159      	lsls	r1, r3, #5
 8004750:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004754:	0150      	lsls	r0, r2, #5
 8004756:	4602      	mov	r2, r0
 8004758:	460b      	mov	r3, r1
 800475a:	4621      	mov	r1, r4
 800475c:	1a51      	subs	r1, r2, r1
 800475e:	6139      	str	r1, [r7, #16]
 8004760:	4629      	mov	r1, r5
 8004762:	eb63 0301 	sbc.w	r3, r3, r1
 8004766:	617b      	str	r3, [r7, #20]
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004774:	4659      	mov	r1, fp
 8004776:	018b      	lsls	r3, r1, #6
 8004778:	4651      	mov	r1, sl
 800477a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800477e:	4651      	mov	r1, sl
 8004780:	018a      	lsls	r2, r1, #6
 8004782:	4651      	mov	r1, sl
 8004784:	ebb2 0801 	subs.w	r8, r2, r1
 8004788:	4659      	mov	r1, fp
 800478a:	eb63 0901 	sbc.w	r9, r3, r1
 800478e:	f04f 0200 	mov.w	r2, #0
 8004792:	f04f 0300 	mov.w	r3, #0
 8004796:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800479a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800479e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80047a2:	4690      	mov	r8, r2
 80047a4:	4699      	mov	r9, r3
 80047a6:	4623      	mov	r3, r4
 80047a8:	eb18 0303 	adds.w	r3, r8, r3
 80047ac:	60bb      	str	r3, [r7, #8]
 80047ae:	462b      	mov	r3, r5
 80047b0:	eb49 0303 	adc.w	r3, r9, r3
 80047b4:	60fb      	str	r3, [r7, #12]
 80047b6:	f04f 0200 	mov.w	r2, #0
 80047ba:	f04f 0300 	mov.w	r3, #0
 80047be:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80047c2:	4629      	mov	r1, r5
 80047c4:	024b      	lsls	r3, r1, #9
 80047c6:	4621      	mov	r1, r4
 80047c8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80047cc:	4621      	mov	r1, r4
 80047ce:	024a      	lsls	r2, r1, #9
 80047d0:	4610      	mov	r0, r2
 80047d2:	4619      	mov	r1, r3
 80047d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80047d6:	2200      	movs	r2, #0
 80047d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80047da:	62fa      	str	r2, [r7, #44]	; 0x2c
 80047dc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80047e0:	f7fb fd00 	bl	80001e4 <__aeabi_uldivmod>
 80047e4:	4602      	mov	r2, r0
 80047e6:	460b      	mov	r3, r1
 80047e8:	4613      	mov	r3, r2
 80047ea:	64fb      	str	r3, [r7, #76]	; 0x4c
 80047ec:	e058      	b.n	80048a0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80047ee:	4b38      	ldr	r3, [pc, #224]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047f0:	685b      	ldr	r3, [r3, #4]
 80047f2:	099b      	lsrs	r3, r3, #6
 80047f4:	2200      	movs	r2, #0
 80047f6:	4618      	mov	r0, r3
 80047f8:	4611      	mov	r1, r2
 80047fa:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80047fe:	623b      	str	r3, [r7, #32]
 8004800:	2300      	movs	r3, #0
 8004802:	627b      	str	r3, [r7, #36]	; 0x24
 8004804:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004808:	4642      	mov	r2, r8
 800480a:	464b      	mov	r3, r9
 800480c:	f04f 0000 	mov.w	r0, #0
 8004810:	f04f 0100 	mov.w	r1, #0
 8004814:	0159      	lsls	r1, r3, #5
 8004816:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800481a:	0150      	lsls	r0, r2, #5
 800481c:	4602      	mov	r2, r0
 800481e:	460b      	mov	r3, r1
 8004820:	4641      	mov	r1, r8
 8004822:	ebb2 0a01 	subs.w	sl, r2, r1
 8004826:	4649      	mov	r1, r9
 8004828:	eb63 0b01 	sbc.w	fp, r3, r1
 800482c:	f04f 0200 	mov.w	r2, #0
 8004830:	f04f 0300 	mov.w	r3, #0
 8004834:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004838:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800483c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004840:	ebb2 040a 	subs.w	r4, r2, sl
 8004844:	eb63 050b 	sbc.w	r5, r3, fp
 8004848:	f04f 0200 	mov.w	r2, #0
 800484c:	f04f 0300 	mov.w	r3, #0
 8004850:	00eb      	lsls	r3, r5, #3
 8004852:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004856:	00e2      	lsls	r2, r4, #3
 8004858:	4614      	mov	r4, r2
 800485a:	461d      	mov	r5, r3
 800485c:	4643      	mov	r3, r8
 800485e:	18e3      	adds	r3, r4, r3
 8004860:	603b      	str	r3, [r7, #0]
 8004862:	464b      	mov	r3, r9
 8004864:	eb45 0303 	adc.w	r3, r5, r3
 8004868:	607b      	str	r3, [r7, #4]
 800486a:	f04f 0200 	mov.w	r2, #0
 800486e:	f04f 0300 	mov.w	r3, #0
 8004872:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004876:	4629      	mov	r1, r5
 8004878:	028b      	lsls	r3, r1, #10
 800487a:	4621      	mov	r1, r4
 800487c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8004880:	4621      	mov	r1, r4
 8004882:	028a      	lsls	r2, r1, #10
 8004884:	4610      	mov	r0, r2
 8004886:	4619      	mov	r1, r3
 8004888:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800488a:	2200      	movs	r2, #0
 800488c:	61bb      	str	r3, [r7, #24]
 800488e:	61fa      	str	r2, [r7, #28]
 8004890:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004894:	f7fb fca6 	bl	80001e4 <__aeabi_uldivmod>
 8004898:	4602      	mov	r2, r0
 800489a:	460b      	mov	r3, r1
 800489c:	4613      	mov	r3, r2
 800489e:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80048a0:	4b0b      	ldr	r3, [pc, #44]	; (80048d0 <HAL_RCC_GetSysClockFreq+0x200>)
 80048a2:	685b      	ldr	r3, [r3, #4]
 80048a4:	0c1b      	lsrs	r3, r3, #16
 80048a6:	f003 0303 	and.w	r3, r3, #3
 80048aa:	3301      	adds	r3, #1
 80048ac:	005b      	lsls	r3, r3, #1
 80048ae:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80048b0:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80048b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80048b4:	fbb2 f3f3 	udiv	r3, r2, r3
 80048b8:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048ba:	e002      	b.n	80048c2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80048bc:	4b05      	ldr	r3, [pc, #20]	; (80048d4 <HAL_RCC_GetSysClockFreq+0x204>)
 80048be:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80048c0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80048c2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 80048c4:	4618      	mov	r0, r3
 80048c6:	3750      	adds	r7, #80	; 0x50
 80048c8:	46bd      	mov	sp, r7
 80048ca:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80048ce:	bf00      	nop
 80048d0:	40023800 	.word	0x40023800
 80048d4:	00f42400 	.word	0x00f42400
 80048d8:	007a1200 	.word	0x007a1200

080048dc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80048dc:	b480      	push	{r7}
 80048de:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80048e0:	4b03      	ldr	r3, [pc, #12]	; (80048f0 <HAL_RCC_GetHCLKFreq+0x14>)
 80048e2:	681b      	ldr	r3, [r3, #0]
}
 80048e4:	4618      	mov	r0, r3
 80048e6:	46bd      	mov	sp, r7
 80048e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ec:	4770      	bx	lr
 80048ee:	bf00      	nop
 80048f0:	20001440 	.word	0x20001440

080048f4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80048f4:	b580      	push	{r7, lr}
 80048f6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80048f8:	f7ff fff0 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 80048fc:	4602      	mov	r2, r0
 80048fe:	4b05      	ldr	r3, [pc, #20]	; (8004914 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004900:	689b      	ldr	r3, [r3, #8]
 8004902:	0a9b      	lsrs	r3, r3, #10
 8004904:	f003 0307 	and.w	r3, r3, #7
 8004908:	4903      	ldr	r1, [pc, #12]	; (8004918 <HAL_RCC_GetPCLK1Freq+0x24>)
 800490a:	5ccb      	ldrb	r3, [r1, r3]
 800490c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004910:	4618      	mov	r0, r3
 8004912:	bd80      	pop	{r7, pc}
 8004914:	40023800 	.word	0x40023800
 8004918:	08006ebc 	.word	0x08006ebc

0800491c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800491c:	b580      	push	{r7, lr}
 800491e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8004920:	f7ff ffdc 	bl	80048dc <HAL_RCC_GetHCLKFreq>
 8004924:	4602      	mov	r2, r0
 8004926:	4b05      	ldr	r3, [pc, #20]	; (800493c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004928:	689b      	ldr	r3, [r3, #8]
 800492a:	0b5b      	lsrs	r3, r3, #13
 800492c:	f003 0307 	and.w	r3, r3, #7
 8004930:	4903      	ldr	r1, [pc, #12]	; (8004940 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004932:	5ccb      	ldrb	r3, [r1, r3]
 8004934:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004938:	4618      	mov	r0, r3
 800493a:	bd80      	pop	{r7, pc}
 800493c:	40023800 	.word	0x40023800
 8004940:	08006ebc 	.word	0x08006ebc

08004944 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8004944:	b580      	push	{r7, lr}
 8004946:	b082      	sub	sp, #8
 8004948:	af00      	add	r7, sp, #0
 800494a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2b00      	cmp	r3, #0
 8004950:	d101      	bne.n	8004956 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	e07b      	b.n	8004a4e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800495a:	2b00      	cmp	r3, #0
 800495c:	d108      	bne.n	8004970 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004966:	d009      	beq.n	800497c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	2200      	movs	r2, #0
 800496c:	61da      	str	r2, [r3, #28]
 800496e:	e005      	b.n	800497c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2200      	movs	r2, #0
 800497a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b00      	cmp	r3, #0
 800498c:	d106      	bne.n	800499c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	2200      	movs	r2, #0
 8004992:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8004996:	6878      	ldr	r0, [r7, #4]
 8004998:	f7fd fd5e 	bl	8002458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	2202      	movs	r2, #2
 80049a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	681b      	ldr	r3, [r3, #0]
 80049a8:	681a      	ldr	r2, [r3, #0]
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80049b2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	689b      	ldr	r3, [r3, #8]
 80049c0:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 80049c4:	431a      	orrs	r2, r3
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	68db      	ldr	r3, [r3, #12]
 80049ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049ce:	431a      	orrs	r2, r3
 80049d0:	687b      	ldr	r3, [r7, #4]
 80049d2:	691b      	ldr	r3, [r3, #16]
 80049d4:	f003 0302 	and.w	r3, r3, #2
 80049d8:	431a      	orrs	r2, r3
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	695b      	ldr	r3, [r3, #20]
 80049de:	f003 0301 	and.w	r3, r3, #1
 80049e2:	431a      	orrs	r2, r3
 80049e4:	687b      	ldr	r3, [r7, #4]
 80049e6:	699b      	ldr	r3, [r3, #24]
 80049e8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80049ec:	431a      	orrs	r2, r3
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	69db      	ldr	r3, [r3, #28]
 80049f2:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80049f6:	431a      	orrs	r2, r3
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	6a1b      	ldr	r3, [r3, #32]
 80049fc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004a00:	ea42 0103 	orr.w	r1, r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004a08:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	430a      	orrs	r2, r1
 8004a12:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	699b      	ldr	r3, [r3, #24]
 8004a18:	0c1b      	lsrs	r3, r3, #16
 8004a1a:	f003 0104 	and.w	r1, r3, #4
 8004a1e:	687b      	ldr	r3, [r7, #4]
 8004a20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a22:	f003 0210 	and.w	r2, r3, #16
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	430a      	orrs	r2, r1
 8004a2c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	69da      	ldr	r2, [r3, #28]
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a3c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	2200      	movs	r2, #0
 8004a42:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	2201      	movs	r2, #1
 8004a48:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8004a4c:	2300      	movs	r3, #0
}
 8004a4e:	4618      	mov	r0, r3
 8004a50:	3708      	adds	r7, #8
 8004a52:	46bd      	mov	sp, r7
 8004a54:	bd80      	pop	{r7, pc}

08004a56 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004a56:	b580      	push	{r7, lr}
 8004a58:	b088      	sub	sp, #32
 8004a5a:	af00      	add	r7, sp, #0
 8004a5c:	60f8      	str	r0, [r7, #12]
 8004a5e:	60b9      	str	r1, [r7, #8]
 8004a60:	603b      	str	r3, [r7, #0]
 8004a62:	4613      	mov	r3, r2
 8004a64:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8004a66:	2300      	movs	r3, #0
 8004a68:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8004a70:	2b01      	cmp	r3, #1
 8004a72:	d101      	bne.n	8004a78 <HAL_SPI_Transmit+0x22>
 8004a74:	2302      	movs	r3, #2
 8004a76:	e126      	b.n	8004cc6 <HAL_SPI_Transmit+0x270>
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004a80:	f7fd ffd6 	bl	8002a30 <HAL_GetTick>
 8004a84:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8004a86:	88fb      	ldrh	r3, [r7, #6]
 8004a88:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8004a8a:	68fb      	ldr	r3, [r7, #12]
 8004a8c:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004a90:	b2db      	uxtb	r3, r3
 8004a92:	2b01      	cmp	r3, #1
 8004a94:	d002      	beq.n	8004a9c <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8004a96:	2302      	movs	r3, #2
 8004a98:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004a9a:	e10b      	b.n	8004cb4 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 8004a9c:	68bb      	ldr	r3, [r7, #8]
 8004a9e:	2b00      	cmp	r3, #0
 8004aa0:	d002      	beq.n	8004aa8 <HAL_SPI_Transmit+0x52>
 8004aa2:	88fb      	ldrh	r3, [r7, #6]
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d102      	bne.n	8004aae <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8004aa8:	2301      	movs	r3, #1
 8004aaa:	77fb      	strb	r3, [r7, #31]
    goto error;
 8004aac:	e102      	b.n	8004cb4 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8004aae:	68fb      	ldr	r3, [r7, #12]
 8004ab0:	2203      	movs	r2, #3
 8004ab2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004ab6:	68fb      	ldr	r3, [r7, #12]
 8004ab8:	2200      	movs	r2, #0
 8004aba:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	68ba      	ldr	r2, [r7, #8]
 8004ac0:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	88fa      	ldrh	r2, [r7, #6]
 8004ac6:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	88fa      	ldrh	r2, [r7, #6]
 8004acc:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8004ace:	68fb      	ldr	r3, [r7, #12]
 8004ad0:	2200      	movs	r2, #0
 8004ad2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	2200      	movs	r2, #0
 8004ad8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	2200      	movs	r2, #0
 8004ade:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8004ae0:	68fb      	ldr	r3, [r7, #12]
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8004ae6:	68fb      	ldr	r3, [r7, #12]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004aec:	68fb      	ldr	r3, [r7, #12]
 8004aee:	689b      	ldr	r3, [r3, #8]
 8004af0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004af4:	d10f      	bne.n	8004b16 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8004af6:	68fb      	ldr	r3, [r7, #12]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	681a      	ldr	r2, [r3, #0]
 8004afc:	68fb      	ldr	r3, [r7, #12]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004b04:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8004b06:	68fb      	ldr	r3, [r7, #12]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	681a      	ldr	r2, [r3, #0]
 8004b0c:	68fb      	ldr	r3, [r7, #12]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004b14:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b20:	2b40      	cmp	r3, #64	; 0x40
 8004b22:	d007      	beq.n	8004b34 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004b24:	68fb      	ldr	r3, [r7, #12]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	681a      	ldr	r2, [r3, #0]
 8004b2a:	68fb      	ldr	r3, [r7, #12]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8004b32:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	68db      	ldr	r3, [r3, #12]
 8004b38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3c:	d14b      	bne.n	8004bd6 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004b3e:	68fb      	ldr	r3, [r7, #12]
 8004b40:	685b      	ldr	r3, [r3, #4]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d002      	beq.n	8004b4c <HAL_SPI_Transmit+0xf6>
 8004b46:	8afb      	ldrh	r3, [r7, #22]
 8004b48:	2b01      	cmp	r3, #1
 8004b4a:	d13e      	bne.n	8004bca <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b50:	881a      	ldrh	r2, [r3, #0]
 8004b52:	68fb      	ldr	r3, [r7, #12]
 8004b54:	681b      	ldr	r3, [r3, #0]
 8004b56:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b58:	68fb      	ldr	r3, [r7, #12]
 8004b5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b5c:	1c9a      	adds	r2, r3, #2
 8004b5e:	68fb      	ldr	r3, [r7, #12]
 8004b60:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b66:	b29b      	uxth	r3, r3
 8004b68:	3b01      	subs	r3, #1
 8004b6a:	b29a      	uxth	r2, r3
 8004b6c:	68fb      	ldr	r3, [r7, #12]
 8004b6e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8004b70:	e02b      	b.n	8004bca <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004b72:	68fb      	ldr	r3, [r7, #12]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	689b      	ldr	r3, [r3, #8]
 8004b78:	f003 0302 	and.w	r3, r3, #2
 8004b7c:	2b02      	cmp	r3, #2
 8004b7e:	d112      	bne.n	8004ba6 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b84:	881a      	ldrh	r2, [r3, #0]
 8004b86:	68fb      	ldr	r3, [r7, #12]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004b90:	1c9a      	adds	r2, r3, #2
 8004b92:	68fb      	ldr	r3, [r7, #12]
 8004b94:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004b96:	68fb      	ldr	r3, [r7, #12]
 8004b98:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004b9a:	b29b      	uxth	r3, r3
 8004b9c:	3b01      	subs	r3, #1
 8004b9e:	b29a      	uxth	r2, r3
 8004ba0:	68fb      	ldr	r3, [r7, #12]
 8004ba2:	86da      	strh	r2, [r3, #54]	; 0x36
 8004ba4:	e011      	b.n	8004bca <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004ba6:	f7fd ff43 	bl	8002a30 <HAL_GetTick>
 8004baa:	4602      	mov	r2, r0
 8004bac:	69bb      	ldr	r3, [r7, #24]
 8004bae:	1ad3      	subs	r3, r2, r3
 8004bb0:	683a      	ldr	r2, [r7, #0]
 8004bb2:	429a      	cmp	r2, r3
 8004bb4:	d803      	bhi.n	8004bbe <HAL_SPI_Transmit+0x168>
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004bbc:	d102      	bne.n	8004bc4 <HAL_SPI_Transmit+0x16e>
 8004bbe:	683b      	ldr	r3, [r7, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d102      	bne.n	8004bca <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8004bc4:	2303      	movs	r3, #3
 8004bc6:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004bc8:	e074      	b.n	8004cb4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004bce:	b29b      	uxth	r3, r3
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d1ce      	bne.n	8004b72 <HAL_SPI_Transmit+0x11c>
 8004bd4:	e04c      	b.n	8004c70 <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8004bd6:	68fb      	ldr	r3, [r7, #12]
 8004bd8:	685b      	ldr	r3, [r3, #4]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d002      	beq.n	8004be4 <HAL_SPI_Transmit+0x18e>
 8004bde:	8afb      	ldrh	r3, [r7, #22]
 8004be0:	2b01      	cmp	r3, #1
 8004be2:	d140      	bne.n	8004c66 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	330c      	adds	r3, #12
 8004bee:	7812      	ldrb	r2, [r2, #0]
 8004bf0:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004bf6:	1c5a      	adds	r2, r3, #1
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8004bfc:	68fb      	ldr	r3, [r7, #12]
 8004bfe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c00:	b29b      	uxth	r3, r3
 8004c02:	3b01      	subs	r3, #1
 8004c04:	b29a      	uxth	r2, r3
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8004c0a:	e02c      	b.n	8004c66 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	681b      	ldr	r3, [r3, #0]
 8004c10:	689b      	ldr	r3, [r3, #8]
 8004c12:	f003 0302 	and.w	r3, r3, #2
 8004c16:	2b02      	cmp	r3, #2
 8004c18:	d113      	bne.n	8004c42 <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	330c      	adds	r3, #12
 8004c24:	7812      	ldrb	r2, [r2, #0]
 8004c26:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8004c28:	68fb      	ldr	r3, [r7, #12]
 8004c2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004c2c:	1c5a      	adds	r2, r3, #1
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004c32:	68fb      	ldr	r3, [r7, #12]
 8004c34:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c36:	b29b      	uxth	r3, r3
 8004c38:	3b01      	subs	r3, #1
 8004c3a:	b29a      	uxth	r2, r3
 8004c3c:	68fb      	ldr	r3, [r7, #12]
 8004c3e:	86da      	strh	r2, [r3, #54]	; 0x36
 8004c40:	e011      	b.n	8004c66 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8004c42:	f7fd fef5 	bl	8002a30 <HAL_GetTick>
 8004c46:	4602      	mov	r2, r0
 8004c48:	69bb      	ldr	r3, [r7, #24]
 8004c4a:	1ad3      	subs	r3, r2, r3
 8004c4c:	683a      	ldr	r2, [r7, #0]
 8004c4e:	429a      	cmp	r2, r3
 8004c50:	d803      	bhi.n	8004c5a <HAL_SPI_Transmit+0x204>
 8004c52:	683b      	ldr	r3, [r7, #0]
 8004c54:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004c58:	d102      	bne.n	8004c60 <HAL_SPI_Transmit+0x20a>
 8004c5a:	683b      	ldr	r3, [r7, #0]
 8004c5c:	2b00      	cmp	r3, #0
 8004c5e:	d102      	bne.n	8004c66 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 8004c60:	2303      	movs	r3, #3
 8004c62:	77fb      	strb	r3, [r7, #31]
          goto error;
 8004c64:	e026      	b.n	8004cb4 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004c6a:	b29b      	uxth	r3, r3
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d1cd      	bne.n	8004c0c <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004c70:	69ba      	ldr	r2, [r7, #24]
 8004c72:	6839      	ldr	r1, [r7, #0]
 8004c74:	68f8      	ldr	r0, [r7, #12]
 8004c76:	f000 f8b3 	bl	8004de0 <SPI_EndRxTxTransaction>
 8004c7a:	4603      	mov	r3, r0
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d002      	beq.n	8004c86 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004c80:	68fb      	ldr	r3, [r7, #12]
 8004c82:	2220      	movs	r2, #32
 8004c84:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004c86:	68fb      	ldr	r3, [r7, #12]
 8004c88:	689b      	ldr	r3, [r3, #8]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d10a      	bne.n	8004ca4 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8004c8e:	2300      	movs	r3, #0
 8004c90:	613b      	str	r3, [r7, #16]
 8004c92:	68fb      	ldr	r3, [r7, #12]
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	68db      	ldr	r3, [r3, #12]
 8004c98:	613b      	str	r3, [r7, #16]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	689b      	ldr	r3, [r3, #8]
 8004ca0:	613b      	str	r3, [r7, #16]
 8004ca2:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d002      	beq.n	8004cb2 <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	77fb      	strb	r3, [r7, #31]
 8004cb0:	e000      	b.n	8004cb4 <HAL_SPI_Transmit+0x25e>
  }

error:
 8004cb2:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8004cb4:	68fb      	ldr	r3, [r7, #12]
 8004cb6:	2201      	movs	r2, #1
 8004cb8:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8004cc4:	7ffb      	ldrb	r3, [r7, #31]
}
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	3720      	adds	r7, #32
 8004cca:	46bd      	mov	sp, r7
 8004ccc:	bd80      	pop	{r7, pc}
	...

08004cd0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004cd0:	b580      	push	{r7, lr}
 8004cd2:	b088      	sub	sp, #32
 8004cd4:	af00      	add	r7, sp, #0
 8004cd6:	60f8      	str	r0, [r7, #12]
 8004cd8:	60b9      	str	r1, [r7, #8]
 8004cda:	603b      	str	r3, [r7, #0]
 8004cdc:	4613      	mov	r3, r2
 8004cde:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004ce0:	f7fd fea6 	bl	8002a30 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ce8:	1a9b      	subs	r3, r3, r2
 8004cea:	683a      	ldr	r2, [r7, #0]
 8004cec:	4413      	add	r3, r2
 8004cee:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004cf0:	f7fd fe9e 	bl	8002a30 <HAL_GetTick>
 8004cf4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004cf6:	4b39      	ldr	r3, [pc, #228]	; (8004ddc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004cf8:	681b      	ldr	r3, [r3, #0]
 8004cfa:	015b      	lsls	r3, r3, #5
 8004cfc:	0d1b      	lsrs	r3, r3, #20
 8004cfe:	69fa      	ldr	r2, [r7, #28]
 8004d00:	fb02 f303 	mul.w	r3, r2, r3
 8004d04:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004d06:	e054      	b.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004d08:	683b      	ldr	r3, [r7, #0]
 8004d0a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004d0e:	d050      	beq.n	8004db2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004d10:	f7fd fe8e 	bl	8002a30 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	69bb      	ldr	r3, [r7, #24]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	69fa      	ldr	r2, [r7, #28]
 8004d1c:	429a      	cmp	r2, r3
 8004d1e:	d902      	bls.n	8004d26 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004d20:	69fb      	ldr	r3, [r7, #28]
 8004d22:	2b00      	cmp	r3, #0
 8004d24:	d13d      	bne.n	8004da2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	681b      	ldr	r3, [r3, #0]
 8004d2a:	685a      	ldr	r2, [r3, #4]
 8004d2c:	68fb      	ldr	r3, [r7, #12]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8004d34:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004d36:	68fb      	ldr	r3, [r7, #12]
 8004d38:	685b      	ldr	r3, [r3, #4]
 8004d3a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004d3e:	d111      	bne.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004d40:	68fb      	ldr	r3, [r7, #12]
 8004d42:	689b      	ldr	r3, [r3, #8]
 8004d44:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004d48:	d004      	beq.n	8004d54 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004d52:	d107      	bne.n	8004d64 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	681b      	ldr	r3, [r3, #0]
 8004d58:	681a      	ldr	r2, [r3, #0]
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	681b      	ldr	r3, [r3, #0]
 8004d5e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004d62:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d68:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004d6c:	d10f      	bne.n	8004d8e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8004d6e:	68fb      	ldr	r3, [r7, #12]
 8004d70:	681b      	ldr	r3, [r3, #0]
 8004d72:	681a      	ldr	r2, [r3, #0]
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	681b      	ldr	r3, [r3, #0]
 8004d78:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8004d7c:	601a      	str	r2, [r3, #0]
 8004d7e:	68fb      	ldr	r3, [r7, #12]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	681a      	ldr	r2, [r3, #0]
 8004d84:	68fb      	ldr	r3, [r7, #12]
 8004d86:	681b      	ldr	r3, [r3, #0]
 8004d88:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004d8c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8004d8e:	68fb      	ldr	r3, [r7, #12]
 8004d90:	2201      	movs	r2, #1
 8004d92:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	2200      	movs	r2, #0
 8004d9a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8004d9e:	2303      	movs	r3, #3
 8004da0:	e017      	b.n	8004dd2 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004da2:	697b      	ldr	r3, [r7, #20]
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d101      	bne.n	8004dac <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004da8:	2300      	movs	r3, #0
 8004daa:	61fb      	str	r3, [r7, #28]
      }
      count--;
 8004dac:	697b      	ldr	r3, [r7, #20]
 8004dae:	3b01      	subs	r3, #1
 8004db0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	689a      	ldr	r2, [r3, #8]
 8004db8:	68bb      	ldr	r3, [r7, #8]
 8004dba:	4013      	ands	r3, r2
 8004dbc:	68ba      	ldr	r2, [r7, #8]
 8004dbe:	429a      	cmp	r2, r3
 8004dc0:	bf0c      	ite	eq
 8004dc2:	2301      	moveq	r3, #1
 8004dc4:	2300      	movne	r3, #0
 8004dc6:	b2db      	uxtb	r3, r3
 8004dc8:	461a      	mov	r2, r3
 8004dca:	79fb      	ldrb	r3, [r7, #7]
 8004dcc:	429a      	cmp	r2, r3
 8004dce:	d19b      	bne.n	8004d08 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004dd0:	2300      	movs	r3, #0
}
 8004dd2:	4618      	mov	r0, r3
 8004dd4:	3720      	adds	r7, #32
 8004dd6:	46bd      	mov	sp, r7
 8004dd8:	bd80      	pop	{r7, pc}
 8004dda:	bf00      	nop
 8004ddc:	20001440 	.word	0x20001440

08004de0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004de0:	b580      	push	{r7, lr}
 8004de2:	b088      	sub	sp, #32
 8004de4:	af02      	add	r7, sp, #8
 8004de6:	60f8      	str	r0, [r7, #12]
 8004de8:	60b9      	str	r1, [r7, #8]
 8004dea:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004dec:	4b1b      	ldr	r3, [pc, #108]	; (8004e5c <SPI_EndRxTxTransaction+0x7c>)
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	4a1b      	ldr	r2, [pc, #108]	; (8004e60 <SPI_EndRxTxTransaction+0x80>)
 8004df2:	fba2 2303 	umull	r2, r3, r2, r3
 8004df6:	0d5b      	lsrs	r3, r3, #21
 8004df8:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8004dfc:	fb02 f303 	mul.w	r3, r2, r3
 8004e00:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	685b      	ldr	r3, [r3, #4]
 8004e06:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004e0a:	d112      	bne.n	8004e32 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	9300      	str	r3, [sp, #0]
 8004e10:	68bb      	ldr	r3, [r7, #8]
 8004e12:	2200      	movs	r2, #0
 8004e14:	2180      	movs	r1, #128	; 0x80
 8004e16:	68f8      	ldr	r0, [r7, #12]
 8004e18:	f7ff ff5a 	bl	8004cd0 <SPI_WaitFlagStateUntilTimeout>
 8004e1c:	4603      	mov	r3, r0
 8004e1e:	2b00      	cmp	r3, #0
 8004e20:	d016      	beq.n	8004e50 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004e22:	68fb      	ldr	r3, [r7, #12]
 8004e24:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e26:	f043 0220 	orr.w	r2, r3, #32
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8004e2e:	2303      	movs	r3, #3
 8004e30:	e00f      	b.n	8004e52 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004e32:	697b      	ldr	r3, [r7, #20]
 8004e34:	2b00      	cmp	r3, #0
 8004e36:	d00a      	beq.n	8004e4e <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8004e38:	697b      	ldr	r3, [r7, #20]
 8004e3a:	3b01      	subs	r3, #1
 8004e3c:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004e3e:	68fb      	ldr	r3, [r7, #12]
 8004e40:	681b      	ldr	r3, [r3, #0]
 8004e42:	689b      	ldr	r3, [r3, #8]
 8004e44:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004e48:	2b80      	cmp	r3, #128	; 0x80
 8004e4a:	d0f2      	beq.n	8004e32 <SPI_EndRxTxTransaction+0x52>
 8004e4c:	e000      	b.n	8004e50 <SPI_EndRxTxTransaction+0x70>
        break;
 8004e4e:	bf00      	nop
  }

  return HAL_OK;
 8004e50:	2300      	movs	r3, #0
}
 8004e52:	4618      	mov	r0, r3
 8004e54:	3718      	adds	r7, #24
 8004e56:	46bd      	mov	sp, r7
 8004e58:	bd80      	pop	{r7, pc}
 8004e5a:	bf00      	nop
 8004e5c:	20001440 	.word	0x20001440
 8004e60:	165e9f81 	.word	0x165e9f81

08004e64 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b082      	sub	sp, #8
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004e6c:	687b      	ldr	r3, [r7, #4]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d101      	bne.n	8004e76 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004e72:	2301      	movs	r3, #1
 8004e74:	e041      	b.n	8004efa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	b2db      	uxtb	r3, r3
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d106      	bne.n	8004e90 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	2200      	movs	r2, #0
 8004e86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8004e8a:	6878      	ldr	r0, [r7, #4]
 8004e8c:	f7fd fb4c 	bl	8002528 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004e90:	687b      	ldr	r3, [r7, #4]
 8004e92:	2202      	movs	r2, #2
 8004e94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004e98:	687b      	ldr	r3, [r7, #4]
 8004e9a:	681a      	ldr	r2, [r3, #0]
 8004e9c:	687b      	ldr	r3, [r7, #4]
 8004e9e:	3304      	adds	r3, #4
 8004ea0:	4619      	mov	r1, r3
 8004ea2:	4610      	mov	r0, r2
 8004ea4:	f000 ff6c 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	2201      	movs	r2, #1
 8004eac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2201      	movs	r2, #1
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8004eb8:	687b      	ldr	r3, [r7, #4]
 8004eba:	2201      	movs	r2, #1
 8004ebc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	2201      	movs	r2, #1
 8004ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	2201      	movs	r2, #1
 8004ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004ed0:	687b      	ldr	r3, [r7, #4]
 8004ed2:	2201      	movs	r2, #1
 8004ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2201      	movs	r2, #1
 8004edc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	2201      	movs	r2, #1
 8004ee4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8004ee8:	687b      	ldr	r3, [r7, #4]
 8004eea:	2201      	movs	r2, #1
 8004eec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	2201      	movs	r2, #1
 8004ef4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8004ef8:	2300      	movs	r3, #0
}
 8004efa:	4618      	mov	r0, r3
 8004efc:	3708      	adds	r7, #8
 8004efe:	46bd      	mov	sp, r7
 8004f00:	bd80      	pop	{r7, pc}
	...

08004f04 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8004f04:	b480      	push	{r7}
 8004f06:	b085      	sub	sp, #20
 8004f08:	af00      	add	r7, sp, #0
 8004f0a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f12:	b2db      	uxtb	r3, r3
 8004f14:	2b01      	cmp	r3, #1
 8004f16:	d001      	beq.n	8004f1c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004f18:	2301      	movs	r3, #1
 8004f1a:	e044      	b.n	8004fa6 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	2202      	movs	r2, #2
 8004f20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	68da      	ldr	r2, [r3, #12]
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f042 0201 	orr.w	r2, r2, #1
 8004f32:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	681b      	ldr	r3, [r3, #0]
 8004f38:	4a1e      	ldr	r2, [pc, #120]	; (8004fb4 <HAL_TIM_Base_Start_IT+0xb0>)
 8004f3a:	4293      	cmp	r3, r2
 8004f3c:	d018      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x6c>
 8004f3e:	687b      	ldr	r3, [r7, #4]
 8004f40:	681b      	ldr	r3, [r3, #0]
 8004f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004f46:	d013      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x6c>
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	681b      	ldr	r3, [r3, #0]
 8004f4c:	4a1a      	ldr	r2, [pc, #104]	; (8004fb8 <HAL_TIM_Base_Start_IT+0xb4>)
 8004f4e:	4293      	cmp	r3, r2
 8004f50:	d00e      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x6c>
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4a19      	ldr	r2, [pc, #100]	; (8004fbc <HAL_TIM_Base_Start_IT+0xb8>)
 8004f58:	4293      	cmp	r3, r2
 8004f5a:	d009      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x6c>
 8004f5c:	687b      	ldr	r3, [r7, #4]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	4a17      	ldr	r2, [pc, #92]	; (8004fc0 <HAL_TIM_Base_Start_IT+0xbc>)
 8004f62:	4293      	cmp	r3, r2
 8004f64:	d004      	beq.n	8004f70 <HAL_TIM_Base_Start_IT+0x6c>
 8004f66:	687b      	ldr	r3, [r7, #4]
 8004f68:	681b      	ldr	r3, [r3, #0]
 8004f6a:	4a16      	ldr	r2, [pc, #88]	; (8004fc4 <HAL_TIM_Base_Start_IT+0xc0>)
 8004f6c:	4293      	cmp	r3, r2
 8004f6e:	d111      	bne.n	8004f94 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004f70:	687b      	ldr	r3, [r7, #4]
 8004f72:	681b      	ldr	r3, [r3, #0]
 8004f74:	689b      	ldr	r3, [r3, #8]
 8004f76:	f003 0307 	and.w	r3, r3, #7
 8004f7a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	2b06      	cmp	r3, #6
 8004f80:	d010      	beq.n	8004fa4 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	681a      	ldr	r2, [r3, #0]
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	681b      	ldr	r3, [r3, #0]
 8004f8c:	f042 0201 	orr.w	r2, r2, #1
 8004f90:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004f92:	e007      	b.n	8004fa4 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	681a      	ldr	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f042 0201 	orr.w	r2, r2, #1
 8004fa2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004fa4:	2300      	movs	r3, #0
}
 8004fa6:	4618      	mov	r0, r3
 8004fa8:	3714      	adds	r7, #20
 8004faa:	46bd      	mov	sp, r7
 8004fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fb0:	4770      	bx	lr
 8004fb2:	bf00      	nop
 8004fb4:	40010000 	.word	0x40010000
 8004fb8:	40000400 	.word	0x40000400
 8004fbc:	40000800 	.word	0x40000800
 8004fc0:	40000c00 	.word	0x40000c00
 8004fc4:	40014000 	.word	0x40014000

08004fc8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b082      	sub	sp, #8
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	2b00      	cmp	r3, #0
 8004fd4:	d101      	bne.n	8004fda <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8004fd6:	2301      	movs	r3, #1
 8004fd8:	e041      	b.n	800505e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004fe0:	b2db      	uxtb	r3, r3
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d106      	bne.n	8004ff4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f7fd fb32 	bl	8002658 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2202      	movs	r2, #2
 8004ff8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004ffc:	687b      	ldr	r3, [r7, #4]
 8004ffe:	681a      	ldr	r2, [r3, #0]
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	3304      	adds	r3, #4
 8005004:	4619      	mov	r1, r3
 8005006:	4610      	mov	r0, r2
 8005008:	f000 feba 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	2201      	movs	r2, #1
 8005010:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	2201      	movs	r2, #1
 8005018:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	2201      	movs	r2, #1
 8005020:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	2201      	movs	r2, #1
 8005028:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800502c:	687b      	ldr	r3, [r7, #4]
 800502e:	2201      	movs	r2, #1
 8005030:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	2201      	movs	r2, #1
 8005038:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2201      	movs	r2, #1
 8005040:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	2201      	movs	r2, #1
 8005048:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	2201      	movs	r2, #1
 8005050:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	2201      	movs	r2, #1
 8005058:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800505c:	2300      	movs	r3, #0
}
 800505e:	4618      	mov	r0, r3
 8005060:	3708      	adds	r7, #8
 8005062:	46bd      	mov	sp, r7
 8005064:	bd80      	pop	{r7, pc}
	...

08005068 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005068:	b580      	push	{r7, lr}
 800506a:	b084      	sub	sp, #16
 800506c:	af00      	add	r7, sp, #0
 800506e:	6078      	str	r0, [r7, #4]
 8005070:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005072:	683b      	ldr	r3, [r7, #0]
 8005074:	2b00      	cmp	r3, #0
 8005076:	d109      	bne.n	800508c <HAL_TIM_PWM_Start+0x24>
 8005078:	687b      	ldr	r3, [r7, #4]
 800507a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800507e:	b2db      	uxtb	r3, r3
 8005080:	2b01      	cmp	r3, #1
 8005082:	bf14      	ite	ne
 8005084:	2301      	movne	r3, #1
 8005086:	2300      	moveq	r3, #0
 8005088:	b2db      	uxtb	r3, r3
 800508a:	e022      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 800508c:	683b      	ldr	r3, [r7, #0]
 800508e:	2b04      	cmp	r3, #4
 8005090:	d109      	bne.n	80050a6 <HAL_TIM_PWM_Start+0x3e>
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005098:	b2db      	uxtb	r3, r3
 800509a:	2b01      	cmp	r3, #1
 800509c:	bf14      	ite	ne
 800509e:	2301      	movne	r3, #1
 80050a0:	2300      	moveq	r3, #0
 80050a2:	b2db      	uxtb	r3, r3
 80050a4:	e015      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	2b08      	cmp	r3, #8
 80050aa:	d109      	bne.n	80050c0 <HAL_TIM_PWM_Start+0x58>
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80050b2:	b2db      	uxtb	r3, r3
 80050b4:	2b01      	cmp	r3, #1
 80050b6:	bf14      	ite	ne
 80050b8:	2301      	movne	r3, #1
 80050ba:	2300      	moveq	r3, #0
 80050bc:	b2db      	uxtb	r3, r3
 80050be:	e008      	b.n	80050d2 <HAL_TIM_PWM_Start+0x6a>
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80050c6:	b2db      	uxtb	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	bf14      	ite	ne
 80050cc:	2301      	movne	r3, #1
 80050ce:	2300      	moveq	r3, #0
 80050d0:	b2db      	uxtb	r3, r3
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e068      	b.n	80051ac <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d104      	bne.n	80050ea <HAL_TIM_PWM_Start+0x82>
 80050e0:	687b      	ldr	r3, [r7, #4]
 80050e2:	2202      	movs	r2, #2
 80050e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80050e8:	e013      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	2b04      	cmp	r3, #4
 80050ee:	d104      	bne.n	80050fa <HAL_TIM_PWM_Start+0x92>
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	2202      	movs	r2, #2
 80050f4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80050f8:	e00b      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 80050fa:	683b      	ldr	r3, [r7, #0]
 80050fc:	2b08      	cmp	r3, #8
 80050fe:	d104      	bne.n	800510a <HAL_TIM_PWM_Start+0xa2>
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2202      	movs	r2, #2
 8005104:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005108:	e003      	b.n	8005112 <HAL_TIM_PWM_Start+0xaa>
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	2202      	movs	r2, #2
 800510e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	2201      	movs	r2, #1
 8005118:	6839      	ldr	r1, [r7, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f001 f9f4 	bl	8006508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	4a23      	ldr	r2, [pc, #140]	; (80051b4 <HAL_TIM_PWM_Start+0x14c>)
 8005126:	4293      	cmp	r3, r2
 8005128:	d107      	bne.n	800513a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005130:	687b      	ldr	r3, [r7, #4]
 8005132:	681b      	ldr	r3, [r3, #0]
 8005134:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005138:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a1d      	ldr	r2, [pc, #116]	; (80051b4 <HAL_TIM_PWM_Start+0x14c>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d018      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 8005144:	687b      	ldr	r3, [r7, #4]
 8005146:	681b      	ldr	r3, [r3, #0]
 8005148:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800514c:	d013      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	4a19      	ldr	r2, [pc, #100]	; (80051b8 <HAL_TIM_PWM_Start+0x150>)
 8005154:	4293      	cmp	r3, r2
 8005156:	d00e      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 8005158:	687b      	ldr	r3, [r7, #4]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	4a17      	ldr	r2, [pc, #92]	; (80051bc <HAL_TIM_PWM_Start+0x154>)
 800515e:	4293      	cmp	r3, r2
 8005160:	d009      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	4a16      	ldr	r2, [pc, #88]	; (80051c0 <HAL_TIM_PWM_Start+0x158>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d004      	beq.n	8005176 <HAL_TIM_PWM_Start+0x10e>
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4a14      	ldr	r2, [pc, #80]	; (80051c4 <HAL_TIM_PWM_Start+0x15c>)
 8005172:	4293      	cmp	r3, r2
 8005174:	d111      	bne.n	800519a <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	689b      	ldr	r3, [r3, #8]
 800517c:	f003 0307 	and.w	r3, r3, #7
 8005180:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005182:	68fb      	ldr	r3, [r7, #12]
 8005184:	2b06      	cmp	r3, #6
 8005186:	d010      	beq.n	80051aa <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	681a      	ldr	r2, [r3, #0]
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	f042 0201 	orr.w	r2, r2, #1
 8005196:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005198:	e007      	b.n	80051aa <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	681a      	ldr	r2, [r3, #0]
 80051a0:	687b      	ldr	r3, [r7, #4]
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f042 0201 	orr.w	r2, r2, #1
 80051a8:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80051aa:	2300      	movs	r3, #0
}
 80051ac:	4618      	mov	r0, r3
 80051ae:	3710      	adds	r7, #16
 80051b0:	46bd      	mov	sp, r7
 80051b2:	bd80      	pop	{r7, pc}
 80051b4:	40010000 	.word	0x40010000
 80051b8:	40000400 	.word	0x40000400
 80051bc:	40000800 	.word	0x40000800
 80051c0:	40000c00 	.word	0x40000c00
 80051c4:	40014000 	.word	0x40014000

080051c8 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	b082      	sub	sp, #8
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 80051d2:	687b      	ldr	r3, [r7, #4]
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	2200      	movs	r2, #0
 80051d8:	6839      	ldr	r1, [r7, #0]
 80051da:	4618      	mov	r0, r3
 80051dc:	f001 f994 	bl	8006508 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80051e0:	687b      	ldr	r3, [r7, #4]
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	4a29      	ldr	r2, [pc, #164]	; (800528c <HAL_TIM_PWM_Stop+0xc4>)
 80051e6:	4293      	cmp	r3, r2
 80051e8:	d117      	bne.n	800521a <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	6a1a      	ldr	r2, [r3, #32]
 80051f0:	f241 1311 	movw	r3, #4369	; 0x1111
 80051f4:	4013      	ands	r3, r2
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d10f      	bne.n	800521a <HAL_TIM_PWM_Stop+0x52>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	681b      	ldr	r3, [r3, #0]
 80051fe:	6a1a      	ldr	r2, [r3, #32]
 8005200:	f240 4344 	movw	r3, #1092	; 0x444
 8005204:	4013      	ands	r3, r2
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <HAL_TIM_PWM_Stop+0x52>
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005210:	687b      	ldr	r3, [r7, #4]
 8005212:	681b      	ldr	r3, [r3, #0]
 8005214:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005218:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 800521a:	687b      	ldr	r3, [r7, #4]
 800521c:	681b      	ldr	r3, [r3, #0]
 800521e:	6a1a      	ldr	r2, [r3, #32]
 8005220:	f241 1311 	movw	r3, #4369	; 0x1111
 8005224:	4013      	ands	r3, r2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d10f      	bne.n	800524a <HAL_TIM_PWM_Stop+0x82>
 800522a:	687b      	ldr	r3, [r7, #4]
 800522c:	681b      	ldr	r3, [r3, #0]
 800522e:	6a1a      	ldr	r2, [r3, #32]
 8005230:	f240 4344 	movw	r3, #1092	; 0x444
 8005234:	4013      	ands	r3, r2
 8005236:	2b00      	cmp	r3, #0
 8005238:	d107      	bne.n	800524a <HAL_TIM_PWM_Stop+0x82>
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	681b      	ldr	r3, [r3, #0]
 800523e:	681a      	ldr	r2, [r3, #0]
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	f022 0201 	bic.w	r2, r2, #1
 8005248:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800524a:	683b      	ldr	r3, [r7, #0]
 800524c:	2b00      	cmp	r3, #0
 800524e:	d104      	bne.n	800525a <HAL_TIM_PWM_Stop+0x92>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	2201      	movs	r2, #1
 8005254:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005258:	e013      	b.n	8005282 <HAL_TIM_PWM_Stop+0xba>
 800525a:	683b      	ldr	r3, [r7, #0]
 800525c:	2b04      	cmp	r3, #4
 800525e:	d104      	bne.n	800526a <HAL_TIM_PWM_Stop+0xa2>
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	2201      	movs	r2, #1
 8005264:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005268:	e00b      	b.n	8005282 <HAL_TIM_PWM_Stop+0xba>
 800526a:	683b      	ldr	r3, [r7, #0]
 800526c:	2b08      	cmp	r3, #8
 800526e:	d104      	bne.n	800527a <HAL_TIM_PWM_Stop+0xb2>
 8005270:	687b      	ldr	r3, [r7, #4]
 8005272:	2201      	movs	r2, #1
 8005274:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005278:	e003      	b.n	8005282 <HAL_TIM_PWM_Stop+0xba>
 800527a:	687b      	ldr	r3, [r7, #4]
 800527c:	2201      	movs	r2, #1
 800527e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005282:	2300      	movs	r3, #0
}
 8005284:	4618      	mov	r0, r3
 8005286:	3708      	adds	r7, #8
 8005288:	46bd      	mov	sp, r7
 800528a:	bd80      	pop	{r7, pc}
 800528c:	40010000 	.word	0x40010000

08005290 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005290:	b580      	push	{r7, lr}
 8005292:	b082      	sub	sp, #8
 8005294:	af00      	add	r7, sp, #0
 8005296:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2b00      	cmp	r3, #0
 800529c:	d101      	bne.n	80052a2 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800529e:	2301      	movs	r3, #1
 80052a0:	e041      	b.n	8005326 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80052a2:	687b      	ldr	r3, [r7, #4]
 80052a4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052a8:	b2db      	uxtb	r3, r3
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d106      	bne.n	80052bc <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80052b6:	6878      	ldr	r0, [r7, #4]
 80052b8:	f000 f839 	bl	800532e <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	2202      	movs	r2, #2
 80052c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80052c4:	687b      	ldr	r3, [r7, #4]
 80052c6:	681a      	ldr	r2, [r3, #0]
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	3304      	adds	r3, #4
 80052cc:	4619      	mov	r1, r3
 80052ce:	4610      	mov	r0, r2
 80052d0:	f000 fd56 	bl	8005d80 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80052d4:	687b      	ldr	r3, [r7, #4]
 80052d6:	2201      	movs	r2, #1
 80052d8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2201      	movs	r2, #1
 80052e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2201      	movs	r2, #1
 80052e8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	2201      	movs	r2, #1
 80052f0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80052f4:	687b      	ldr	r3, [r7, #4]
 80052f6:	2201      	movs	r2, #1
 80052f8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	2201      	movs	r2, #1
 8005300:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	2201      	movs	r2, #1
 8005308:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	2201      	movs	r2, #1
 8005310:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	2201      	movs	r2, #1
 8005318:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800531c:	687b      	ldr	r3, [r7, #4]
 800531e:	2201      	movs	r2, #1
 8005320:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005324:	2300      	movs	r3, #0
}
 8005326:	4618      	mov	r0, r3
 8005328:	3708      	adds	r7, #8
 800532a:	46bd      	mov	sp, r7
 800532c:	bd80      	pop	{r7, pc}

0800532e <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800532e:	b480      	push	{r7}
 8005330:	b083      	sub	sp, #12
 8005332:	af00      	add	r7, sp, #0
 8005334:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005336:	bf00      	nop
 8005338:	370c      	adds	r7, #12
 800533a:	46bd      	mov	sp, r7
 800533c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005340:	4770      	bx	lr
	...

08005344 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005344:	b580      	push	{r7, lr}
 8005346:	b084      	sub	sp, #16
 8005348:	af00      	add	r7, sp, #0
 800534a:	6078      	str	r0, [r7, #4]
 800534c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800534e:	2300      	movs	r3, #0
 8005350:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005352:	683b      	ldr	r3, [r7, #0]
 8005354:	2b00      	cmp	r3, #0
 8005356:	d104      	bne.n	8005362 <HAL_TIM_IC_Start_IT+0x1e>
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800535e:	b2db      	uxtb	r3, r3
 8005360:	e013      	b.n	800538a <HAL_TIM_IC_Start_IT+0x46>
 8005362:	683b      	ldr	r3, [r7, #0]
 8005364:	2b04      	cmp	r3, #4
 8005366:	d104      	bne.n	8005372 <HAL_TIM_IC_Start_IT+0x2e>
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800536e:	b2db      	uxtb	r3, r3
 8005370:	e00b      	b.n	800538a <HAL_TIM_IC_Start_IT+0x46>
 8005372:	683b      	ldr	r3, [r7, #0]
 8005374:	2b08      	cmp	r3, #8
 8005376:	d104      	bne.n	8005382 <HAL_TIM_IC_Start_IT+0x3e>
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800537e:	b2db      	uxtb	r3, r3
 8005380:	e003      	b.n	800538a <HAL_TIM_IC_Start_IT+0x46>
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005388:	b2db      	uxtb	r3, r3
 800538a:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 800538c:	683b      	ldr	r3, [r7, #0]
 800538e:	2b00      	cmp	r3, #0
 8005390:	d104      	bne.n	800539c <HAL_TIM_IC_Start_IT+0x58>
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005398:	b2db      	uxtb	r3, r3
 800539a:	e013      	b.n	80053c4 <HAL_TIM_IC_Start_IT+0x80>
 800539c:	683b      	ldr	r3, [r7, #0]
 800539e:	2b04      	cmp	r3, #4
 80053a0:	d104      	bne.n	80053ac <HAL_TIM_IC_Start_IT+0x68>
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80053a8:	b2db      	uxtb	r3, r3
 80053aa:	e00b      	b.n	80053c4 <HAL_TIM_IC_Start_IT+0x80>
 80053ac:	683b      	ldr	r3, [r7, #0]
 80053ae:	2b08      	cmp	r3, #8
 80053b0:	d104      	bne.n	80053bc <HAL_TIM_IC_Start_IT+0x78>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80053b8:	b2db      	uxtb	r3, r3
 80053ba:	e003      	b.n	80053c4 <HAL_TIM_IC_Start_IT+0x80>
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80053c2:	b2db      	uxtb	r3, r3
 80053c4:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 80053c6:	7bbb      	ldrb	r3, [r7, #14]
 80053c8:	2b01      	cmp	r3, #1
 80053ca:	d102      	bne.n	80053d2 <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 80053cc:	7b7b      	ldrb	r3, [r7, #13]
 80053ce:	2b01      	cmp	r3, #1
 80053d0:	d001      	beq.n	80053d6 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 80053d2:	2301      	movs	r3, #1
 80053d4:	e0c2      	b.n	800555c <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80053d6:	683b      	ldr	r3, [r7, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d104      	bne.n	80053e6 <HAL_TIM_IC_Start_IT+0xa2>
 80053dc:	687b      	ldr	r3, [r7, #4]
 80053de:	2202      	movs	r2, #2
 80053e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80053e4:	e013      	b.n	800540e <HAL_TIM_IC_Start_IT+0xca>
 80053e6:	683b      	ldr	r3, [r7, #0]
 80053e8:	2b04      	cmp	r3, #4
 80053ea:	d104      	bne.n	80053f6 <HAL_TIM_IC_Start_IT+0xb2>
 80053ec:	687b      	ldr	r3, [r7, #4]
 80053ee:	2202      	movs	r2, #2
 80053f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80053f4:	e00b      	b.n	800540e <HAL_TIM_IC_Start_IT+0xca>
 80053f6:	683b      	ldr	r3, [r7, #0]
 80053f8:	2b08      	cmp	r3, #8
 80053fa:	d104      	bne.n	8005406 <HAL_TIM_IC_Start_IT+0xc2>
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2202      	movs	r2, #2
 8005400:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005404:	e003      	b.n	800540e <HAL_TIM_IC_Start_IT+0xca>
 8005406:	687b      	ldr	r3, [r7, #4]
 8005408:	2202      	movs	r2, #2
 800540a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800540e:	683b      	ldr	r3, [r7, #0]
 8005410:	2b00      	cmp	r3, #0
 8005412:	d104      	bne.n	800541e <HAL_TIM_IC_Start_IT+0xda>
 8005414:	687b      	ldr	r3, [r7, #4]
 8005416:	2202      	movs	r2, #2
 8005418:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800541c:	e013      	b.n	8005446 <HAL_TIM_IC_Start_IT+0x102>
 800541e:	683b      	ldr	r3, [r7, #0]
 8005420:	2b04      	cmp	r3, #4
 8005422:	d104      	bne.n	800542e <HAL_TIM_IC_Start_IT+0xea>
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	2202      	movs	r2, #2
 8005428:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800542c:	e00b      	b.n	8005446 <HAL_TIM_IC_Start_IT+0x102>
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	2b08      	cmp	r3, #8
 8005432:	d104      	bne.n	800543e <HAL_TIM_IC_Start_IT+0xfa>
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	2202      	movs	r2, #2
 8005438:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800543c:	e003      	b.n	8005446 <HAL_TIM_IC_Start_IT+0x102>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	2202      	movs	r2, #2
 8005442:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	2b0c      	cmp	r3, #12
 800544a:	d841      	bhi.n	80054d0 <HAL_TIM_IC_Start_IT+0x18c>
 800544c:	a201      	add	r2, pc, #4	; (adr r2, 8005454 <HAL_TIM_IC_Start_IT+0x110>)
 800544e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005452:	bf00      	nop
 8005454:	08005489 	.word	0x08005489
 8005458:	080054d1 	.word	0x080054d1
 800545c:	080054d1 	.word	0x080054d1
 8005460:	080054d1 	.word	0x080054d1
 8005464:	0800549b 	.word	0x0800549b
 8005468:	080054d1 	.word	0x080054d1
 800546c:	080054d1 	.word	0x080054d1
 8005470:	080054d1 	.word	0x080054d1
 8005474:	080054ad 	.word	0x080054ad
 8005478:	080054d1 	.word	0x080054d1
 800547c:	080054d1 	.word	0x080054d1
 8005480:	080054d1 	.word	0x080054d1
 8005484:	080054bf 	.word	0x080054bf
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	68da      	ldr	r2, [r3, #12]
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
 8005492:	f042 0202 	orr.w	r2, r2, #2
 8005496:	60da      	str	r2, [r3, #12]
      break;
 8005498:	e01d      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	681b      	ldr	r3, [r3, #0]
 800549e:	68da      	ldr	r2, [r3, #12]
 80054a0:	687b      	ldr	r3, [r7, #4]
 80054a2:	681b      	ldr	r3, [r3, #0]
 80054a4:	f042 0204 	orr.w	r2, r2, #4
 80054a8:	60da      	str	r2, [r3, #12]
      break;
 80054aa:	e014      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	68da      	ldr	r2, [r3, #12]
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	f042 0208 	orr.w	r2, r2, #8
 80054ba:	60da      	str	r2, [r3, #12]
      break;
 80054bc:	e00b      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	681b      	ldr	r3, [r3, #0]
 80054c2:	68da      	ldr	r2, [r3, #12]
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	681b      	ldr	r3, [r3, #0]
 80054c8:	f042 0210 	orr.w	r2, r2, #16
 80054cc:	60da      	str	r2, [r3, #12]
      break;
 80054ce:	e002      	b.n	80054d6 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
      break;
 80054d4:	bf00      	nop
  }

  if (status == HAL_OK)
 80054d6:	7bfb      	ldrb	r3, [r7, #15]
 80054d8:	2b00      	cmp	r3, #0
 80054da:	d13e      	bne.n	800555a <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	2201      	movs	r2, #1
 80054e2:	6839      	ldr	r1, [r7, #0]
 80054e4:	4618      	mov	r0, r3
 80054e6:	f001 f80f 	bl	8006508 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a1d      	ldr	r2, [pc, #116]	; (8005564 <HAL_TIM_IC_Start_IT+0x220>)
 80054f0:	4293      	cmp	r3, r2
 80054f2:	d018      	beq.n	8005526 <HAL_TIM_IC_Start_IT+0x1e2>
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	681b      	ldr	r3, [r3, #0]
 80054f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80054fc:	d013      	beq.n	8005526 <HAL_TIM_IC_Start_IT+0x1e2>
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	4a19      	ldr	r2, [pc, #100]	; (8005568 <HAL_TIM_IC_Start_IT+0x224>)
 8005504:	4293      	cmp	r3, r2
 8005506:	d00e      	beq.n	8005526 <HAL_TIM_IC_Start_IT+0x1e2>
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	681b      	ldr	r3, [r3, #0]
 800550c:	4a17      	ldr	r2, [pc, #92]	; (800556c <HAL_TIM_IC_Start_IT+0x228>)
 800550e:	4293      	cmp	r3, r2
 8005510:	d009      	beq.n	8005526 <HAL_TIM_IC_Start_IT+0x1e2>
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	681b      	ldr	r3, [r3, #0]
 8005516:	4a16      	ldr	r2, [pc, #88]	; (8005570 <HAL_TIM_IC_Start_IT+0x22c>)
 8005518:	4293      	cmp	r3, r2
 800551a:	d004      	beq.n	8005526 <HAL_TIM_IC_Start_IT+0x1e2>
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	681b      	ldr	r3, [r3, #0]
 8005520:	4a14      	ldr	r2, [pc, #80]	; (8005574 <HAL_TIM_IC_Start_IT+0x230>)
 8005522:	4293      	cmp	r3, r2
 8005524:	d111      	bne.n	800554a <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	689b      	ldr	r3, [r3, #8]
 800552c:	f003 0307 	and.w	r3, r3, #7
 8005530:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005532:	68bb      	ldr	r3, [r7, #8]
 8005534:	2b06      	cmp	r3, #6
 8005536:	d010      	beq.n	800555a <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	681b      	ldr	r3, [r3, #0]
 800553c:	681a      	ldr	r2, [r3, #0]
 800553e:	687b      	ldr	r3, [r7, #4]
 8005540:	681b      	ldr	r3, [r3, #0]
 8005542:	f042 0201 	orr.w	r2, r2, #1
 8005546:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005548:	e007      	b.n	800555a <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	681a      	ldr	r2, [r3, #0]
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	681b      	ldr	r3, [r3, #0]
 8005554:	f042 0201 	orr.w	r2, r2, #1
 8005558:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 800555a:	7bfb      	ldrb	r3, [r7, #15]
}
 800555c:	4618      	mov	r0, r3
 800555e:	3710      	adds	r7, #16
 8005560:	46bd      	mov	sp, r7
 8005562:	bd80      	pop	{r7, pc}
 8005564:	40010000 	.word	0x40010000
 8005568:	40000400 	.word	0x40000400
 800556c:	40000800 	.word	0x40000800
 8005570:	40000c00 	.word	0x40000c00
 8005574:	40014000 	.word	0x40014000

08005578 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b084      	sub	sp, #16
 800557c:	af00      	add	r7, sp, #0
 800557e:	6078      	str	r0, [r7, #4]
 8005580:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005582:	2300      	movs	r3, #0
 8005584:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 8005586:	683b      	ldr	r3, [r7, #0]
 8005588:	2b0c      	cmp	r3, #12
 800558a:	d841      	bhi.n	8005610 <HAL_TIM_IC_Stop_IT+0x98>
 800558c:	a201      	add	r2, pc, #4	; (adr r2, 8005594 <HAL_TIM_IC_Stop_IT+0x1c>)
 800558e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005592:	bf00      	nop
 8005594:	080055c9 	.word	0x080055c9
 8005598:	08005611 	.word	0x08005611
 800559c:	08005611 	.word	0x08005611
 80055a0:	08005611 	.word	0x08005611
 80055a4:	080055db 	.word	0x080055db
 80055a8:	08005611 	.word	0x08005611
 80055ac:	08005611 	.word	0x08005611
 80055b0:	08005611 	.word	0x08005611
 80055b4:	080055ed 	.word	0x080055ed
 80055b8:	08005611 	.word	0x08005611
 80055bc:	08005611 	.word	0x08005611
 80055c0:	08005611 	.word	0x08005611
 80055c4:	080055ff 	.word	0x080055ff
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	68da      	ldr	r2, [r3, #12]
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f022 0202 	bic.w	r2, r2, #2
 80055d6:	60da      	str	r2, [r3, #12]
      break;
 80055d8:	e01d      	b.n	8005616 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	68da      	ldr	r2, [r3, #12]
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	681b      	ldr	r3, [r3, #0]
 80055e4:	f022 0204 	bic.w	r2, r2, #4
 80055e8:	60da      	str	r2, [r3, #12]
      break;
 80055ea:	e014      	b.n	8005616 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 80055ec:	687b      	ldr	r3, [r7, #4]
 80055ee:	681b      	ldr	r3, [r3, #0]
 80055f0:	68da      	ldr	r2, [r3, #12]
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	f022 0208 	bic.w	r2, r2, #8
 80055fa:	60da      	str	r2, [r3, #12]
      break;
 80055fc:	e00b      	b.n	8005616 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	68da      	ldr	r2, [r3, #12]
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	681b      	ldr	r3, [r3, #0]
 8005608:	f022 0210 	bic.w	r2, r2, #16
 800560c:	60da      	str	r2, [r3, #12]
      break;
 800560e:	e002      	b.n	8005616 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 8005610:	2301      	movs	r3, #1
 8005612:	73fb      	strb	r3, [r7, #15]
      break;
 8005614:	bf00      	nop
  }

  if (status == HAL_OK)
 8005616:	7bfb      	ldrb	r3, [r7, #15]
 8005618:	2b00      	cmp	r3, #0
 800561a:	d156      	bne.n	80056ca <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	2200      	movs	r2, #0
 8005622:	6839      	ldr	r1, [r7, #0]
 8005624:	4618      	mov	r0, r3
 8005626:	f000 ff6f 	bl	8006508 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	681b      	ldr	r3, [r3, #0]
 800562e:	6a1a      	ldr	r2, [r3, #32]
 8005630:	f241 1311 	movw	r3, #4369	; 0x1111
 8005634:	4013      	ands	r3, r2
 8005636:	2b00      	cmp	r3, #0
 8005638:	d10f      	bne.n	800565a <HAL_TIM_IC_Stop_IT+0xe2>
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	681b      	ldr	r3, [r3, #0]
 800563e:	6a1a      	ldr	r2, [r3, #32]
 8005640:	f240 4344 	movw	r3, #1092	; 0x444
 8005644:	4013      	ands	r3, r2
 8005646:	2b00      	cmp	r3, #0
 8005648:	d107      	bne.n	800565a <HAL_TIM_IC_Stop_IT+0xe2>
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	681b      	ldr	r3, [r3, #0]
 800564e:	681a      	ldr	r2, [r3, #0]
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	f022 0201 	bic.w	r2, r2, #1
 8005658:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 800565a:	683b      	ldr	r3, [r7, #0]
 800565c:	2b00      	cmp	r3, #0
 800565e:	d104      	bne.n	800566a <HAL_TIM_IC_Stop_IT+0xf2>
 8005660:	687b      	ldr	r3, [r7, #4]
 8005662:	2201      	movs	r2, #1
 8005664:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005668:	e013      	b.n	8005692 <HAL_TIM_IC_Stop_IT+0x11a>
 800566a:	683b      	ldr	r3, [r7, #0]
 800566c:	2b04      	cmp	r3, #4
 800566e:	d104      	bne.n	800567a <HAL_TIM_IC_Stop_IT+0x102>
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	2201      	movs	r2, #1
 8005674:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005678:	e00b      	b.n	8005692 <HAL_TIM_IC_Stop_IT+0x11a>
 800567a:	683b      	ldr	r3, [r7, #0]
 800567c:	2b08      	cmp	r3, #8
 800567e:	d104      	bne.n	800568a <HAL_TIM_IC_Stop_IT+0x112>
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	2201      	movs	r2, #1
 8005684:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005688:	e003      	b.n	8005692 <HAL_TIM_IC_Stop_IT+0x11a>
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	2201      	movs	r2, #1
 800568e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005692:	683b      	ldr	r3, [r7, #0]
 8005694:	2b00      	cmp	r3, #0
 8005696:	d104      	bne.n	80056a2 <HAL_TIM_IC_Stop_IT+0x12a>
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	2201      	movs	r2, #1
 800569c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80056a0:	e013      	b.n	80056ca <HAL_TIM_IC_Stop_IT+0x152>
 80056a2:	683b      	ldr	r3, [r7, #0]
 80056a4:	2b04      	cmp	r3, #4
 80056a6:	d104      	bne.n	80056b2 <HAL_TIM_IC_Stop_IT+0x13a>
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2201      	movs	r2, #1
 80056ac:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80056b0:	e00b      	b.n	80056ca <HAL_TIM_IC_Stop_IT+0x152>
 80056b2:	683b      	ldr	r3, [r7, #0]
 80056b4:	2b08      	cmp	r3, #8
 80056b6:	d104      	bne.n	80056c2 <HAL_TIM_IC_Stop_IT+0x14a>
 80056b8:	687b      	ldr	r3, [r7, #4]
 80056ba:	2201      	movs	r2, #1
 80056bc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80056c0:	e003      	b.n	80056ca <HAL_TIM_IC_Stop_IT+0x152>
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	2201      	movs	r2, #1
 80056c6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 80056ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80056cc:	4618      	mov	r0, r3
 80056ce:	3710      	adds	r7, #16
 80056d0:	46bd      	mov	sp, r7
 80056d2:	bd80      	pop	{r7, pc}

080056d4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80056d4:	b580      	push	{r7, lr}
 80056d6:	b082      	sub	sp, #8
 80056d8:	af00      	add	r7, sp, #0
 80056da:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	691b      	ldr	r3, [r3, #16]
 80056e2:	f003 0302 	and.w	r3, r3, #2
 80056e6:	2b02      	cmp	r3, #2
 80056e8:	d122      	bne.n	8005730 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80056ea:	687b      	ldr	r3, [r7, #4]
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	68db      	ldr	r3, [r3, #12]
 80056f0:	f003 0302 	and.w	r3, r3, #2
 80056f4:	2b02      	cmp	r3, #2
 80056f6:	d11b      	bne.n	8005730 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	f06f 0202 	mvn.w	r2, #2
 8005700:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2201      	movs	r2, #1
 8005706:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	681b      	ldr	r3, [r3, #0]
 800570c:	699b      	ldr	r3, [r3, #24]
 800570e:	f003 0303 	and.w	r3, r3, #3
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 fb13 	bl	8005d42 <HAL_TIM_IC_CaptureCallback>
 800571c:	e005      	b.n	800572a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 fb05 	bl	8005d2e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005724:	6878      	ldr	r0, [r7, #4]
 8005726:	f000 fb16 	bl	8005d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	2200      	movs	r2, #0
 800572e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	691b      	ldr	r3, [r3, #16]
 8005736:	f003 0304 	and.w	r3, r3, #4
 800573a:	2b04      	cmp	r3, #4
 800573c:	d122      	bne.n	8005784 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	68db      	ldr	r3, [r3, #12]
 8005744:	f003 0304 	and.w	r3, r3, #4
 8005748:	2b04      	cmp	r3, #4
 800574a:	d11b      	bne.n	8005784 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f06f 0204 	mvn.w	r2, #4
 8005754:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	2202      	movs	r2, #2
 800575a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	699b      	ldr	r3, [r3, #24]
 8005762:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005766:	2b00      	cmp	r3, #0
 8005768:	d003      	beq.n	8005772 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f000 fae9 	bl	8005d42 <HAL_TIM_IC_CaptureCallback>
 8005770:	e005      	b.n	800577e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005772:	6878      	ldr	r0, [r7, #4]
 8005774:	f000 fadb 	bl	8005d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005778:	6878      	ldr	r0, [r7, #4]
 800577a:	f000 faec 	bl	8005d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	2200      	movs	r2, #0
 8005782:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	681b      	ldr	r3, [r3, #0]
 8005788:	691b      	ldr	r3, [r3, #16]
 800578a:	f003 0308 	and.w	r3, r3, #8
 800578e:	2b08      	cmp	r3, #8
 8005790:	d122      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	681b      	ldr	r3, [r3, #0]
 8005796:	68db      	ldr	r3, [r3, #12]
 8005798:	f003 0308 	and.w	r3, r3, #8
 800579c:	2b08      	cmp	r3, #8
 800579e:	d11b      	bne.n	80057d8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	681b      	ldr	r3, [r3, #0]
 80057a4:	f06f 0208 	mvn.w	r2, #8
 80057a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	2204      	movs	r2, #4
 80057ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	69db      	ldr	r3, [r3, #28]
 80057b6:	f003 0303 	and.w	r3, r3, #3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	d003      	beq.n	80057c6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80057be:	6878      	ldr	r0, [r7, #4]
 80057c0:	f000 fabf 	bl	8005d42 <HAL_TIM_IC_CaptureCallback>
 80057c4:	e005      	b.n	80057d2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80057c6:	6878      	ldr	r0, [r7, #4]
 80057c8:	f000 fab1 	bl	8005d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80057cc:	6878      	ldr	r0, [r7, #4]
 80057ce:	f000 fac2 	bl	8005d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	2200      	movs	r2, #0
 80057d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	691b      	ldr	r3, [r3, #16]
 80057de:	f003 0310 	and.w	r3, r3, #16
 80057e2:	2b10      	cmp	r3, #16
 80057e4:	d122      	bne.n	800582c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	68db      	ldr	r3, [r3, #12]
 80057ec:	f003 0310 	and.w	r3, r3, #16
 80057f0:	2b10      	cmp	r3, #16
 80057f2:	d11b      	bne.n	800582c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80057f4:	687b      	ldr	r3, [r7, #4]
 80057f6:	681b      	ldr	r3, [r3, #0]
 80057f8:	f06f 0210 	mvn.w	r2, #16
 80057fc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80057fe:	687b      	ldr	r3, [r7, #4]
 8005800:	2208      	movs	r2, #8
 8005802:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	681b      	ldr	r3, [r3, #0]
 8005808:	69db      	ldr	r3, [r3, #28]
 800580a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005812:	6878      	ldr	r0, [r7, #4]
 8005814:	f000 fa95 	bl	8005d42 <HAL_TIM_IC_CaptureCallback>
 8005818:	e005      	b.n	8005826 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800581a:	6878      	ldr	r0, [r7, #4]
 800581c:	f000 fa87 	bl	8005d2e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005820:	6878      	ldr	r0, [r7, #4]
 8005822:	f000 fa98 	bl	8005d56 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2200      	movs	r2, #0
 800582a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	691b      	ldr	r3, [r3, #16]
 8005832:	f003 0301 	and.w	r3, r3, #1
 8005836:	2b01      	cmp	r3, #1
 8005838:	d10e      	bne.n	8005858 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	68db      	ldr	r3, [r3, #12]
 8005840:	f003 0301 	and.w	r3, r3, #1
 8005844:	2b01      	cmp	r3, #1
 8005846:	d107      	bne.n	8005858 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	f06f 0201 	mvn.w	r2, #1
 8005850:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005852:	6878      	ldr	r0, [r7, #4]
 8005854:	f7fb fd4c 	bl	80012f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	691b      	ldr	r3, [r3, #16]
 800585e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005862:	2b80      	cmp	r3, #128	; 0x80
 8005864:	d10e      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005866:	687b      	ldr	r3, [r7, #4]
 8005868:	681b      	ldr	r3, [r3, #0]
 800586a:	68db      	ldr	r3, [r3, #12]
 800586c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005870:	2b80      	cmp	r3, #128	; 0x80
 8005872:	d107      	bne.n	8005884 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800587c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800587e:	6878      	ldr	r0, [r7, #4]
 8005880:	f000 fee0 	bl	8006644 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	691b      	ldr	r3, [r3, #16]
 800588a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800588e:	2b40      	cmp	r3, #64	; 0x40
 8005890:	d10e      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005892:	687b      	ldr	r3, [r7, #4]
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	68db      	ldr	r3, [r3, #12]
 8005898:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800589c:	2b40      	cmp	r3, #64	; 0x40
 800589e:	d107      	bne.n	80058b0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80058a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80058aa:	6878      	ldr	r0, [r7, #4]
 80058ac:	f000 fa5d 	bl	8005d6a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	691b      	ldr	r3, [r3, #16]
 80058b6:	f003 0320 	and.w	r3, r3, #32
 80058ba:	2b20      	cmp	r3, #32
 80058bc:	d10e      	bne.n	80058dc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f003 0320 	and.w	r3, r3, #32
 80058c8:	2b20      	cmp	r3, #32
 80058ca:	d107      	bne.n	80058dc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	681b      	ldr	r3, [r3, #0]
 80058d0:	f06f 0220 	mvn.w	r2, #32
 80058d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80058d6:	6878      	ldr	r0, [r7, #4]
 80058d8:	f000 feaa 	bl	8006630 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80058dc:	bf00      	nop
 80058de:	3708      	adds	r7, #8
 80058e0:	46bd      	mov	sp, r7
 80058e2:	bd80      	pop	{r7, pc}

080058e4 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 80058e4:	b580      	push	{r7, lr}
 80058e6:	b086      	sub	sp, #24
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	60f8      	str	r0, [r7, #12]
 80058ec:	60b9      	str	r1, [r7, #8]
 80058ee:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80058f0:	2300      	movs	r3, #0
 80058f2:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80058fa:	2b01      	cmp	r3, #1
 80058fc:	d101      	bne.n	8005902 <HAL_TIM_IC_ConfigChannel+0x1e>
 80058fe:	2302      	movs	r3, #2
 8005900:	e088      	b.n	8005a14 <HAL_TIM_IC_ConfigChannel+0x130>
 8005902:	68fb      	ldr	r3, [r7, #12]
 8005904:	2201      	movs	r2, #1
 8005906:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d11b      	bne.n	8005948 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005910:	68fb      	ldr	r3, [r7, #12]
 8005912:	6818      	ldr	r0, [r3, #0]
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	6819      	ldr	r1, [r3, #0]
 8005918:	68bb      	ldr	r3, [r7, #8]
 800591a:	685a      	ldr	r2, [r3, #4]
 800591c:	68bb      	ldr	r3, [r7, #8]
 800591e:	68db      	ldr	r3, [r3, #12]
 8005920:	f000 fc3a 	bl	8006198 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005924:	68fb      	ldr	r3, [r7, #12]
 8005926:	681b      	ldr	r3, [r3, #0]
 8005928:	699a      	ldr	r2, [r3, #24]
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	f022 020c 	bic.w	r2, r2, #12
 8005932:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	6999      	ldr	r1, [r3, #24]
 800593a:	68bb      	ldr	r3, [r7, #8]
 800593c:	689a      	ldr	r2, [r3, #8]
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	681b      	ldr	r3, [r3, #0]
 8005942:	430a      	orrs	r2, r1
 8005944:	619a      	str	r2, [r3, #24]
 8005946:	e060      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	2b04      	cmp	r3, #4
 800594c:	d11c      	bne.n	8005988 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	6818      	ldr	r0, [r3, #0]
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	6819      	ldr	r1, [r3, #0]
 8005956:	68bb      	ldr	r3, [r7, #8]
 8005958:	685a      	ldr	r2, [r3, #4]
 800595a:	68bb      	ldr	r3, [r7, #8]
 800595c:	68db      	ldr	r3, [r3, #12]
 800595e:	f000 fcb2 	bl	80062c6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005962:	68fb      	ldr	r3, [r7, #12]
 8005964:	681b      	ldr	r3, [r3, #0]
 8005966:	699a      	ldr	r2, [r3, #24]
 8005968:	68fb      	ldr	r3, [r7, #12]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005970:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005972:	68fb      	ldr	r3, [r7, #12]
 8005974:	681b      	ldr	r3, [r3, #0]
 8005976:	6999      	ldr	r1, [r3, #24]
 8005978:	68bb      	ldr	r3, [r7, #8]
 800597a:	689b      	ldr	r3, [r3, #8]
 800597c:	021a      	lsls	r2, r3, #8
 800597e:	68fb      	ldr	r3, [r7, #12]
 8005980:	681b      	ldr	r3, [r3, #0]
 8005982:	430a      	orrs	r2, r1
 8005984:	619a      	str	r2, [r3, #24]
 8005986:	e040      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	2b08      	cmp	r3, #8
 800598c:	d11b      	bne.n	80059c6 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800598e:	68fb      	ldr	r3, [r7, #12]
 8005990:	6818      	ldr	r0, [r3, #0]
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	6819      	ldr	r1, [r3, #0]
 8005996:	68bb      	ldr	r3, [r7, #8]
 8005998:	685a      	ldr	r2, [r3, #4]
 800599a:	68bb      	ldr	r3, [r7, #8]
 800599c:	68db      	ldr	r3, [r3, #12]
 800599e:	f000 fcff 	bl	80063a0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80059a2:	68fb      	ldr	r3, [r7, #12]
 80059a4:	681b      	ldr	r3, [r3, #0]
 80059a6:	69da      	ldr	r2, [r3, #28]
 80059a8:	68fb      	ldr	r3, [r7, #12]
 80059aa:	681b      	ldr	r3, [r3, #0]
 80059ac:	f022 020c 	bic.w	r2, r2, #12
 80059b0:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80059b2:	68fb      	ldr	r3, [r7, #12]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	69d9      	ldr	r1, [r3, #28]
 80059b8:	68bb      	ldr	r3, [r7, #8]
 80059ba:	689a      	ldr	r2, [r3, #8]
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	430a      	orrs	r2, r1
 80059c2:	61da      	str	r2, [r3, #28]
 80059c4:	e021      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 80059c6:	687b      	ldr	r3, [r7, #4]
 80059c8:	2b0c      	cmp	r3, #12
 80059ca:	d11c      	bne.n	8005a06 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	6818      	ldr	r0, [r3, #0]
 80059d0:	68bb      	ldr	r3, [r7, #8]
 80059d2:	6819      	ldr	r1, [r3, #0]
 80059d4:	68bb      	ldr	r3, [r7, #8]
 80059d6:	685a      	ldr	r2, [r3, #4]
 80059d8:	68bb      	ldr	r3, [r7, #8]
 80059da:	68db      	ldr	r3, [r3, #12]
 80059dc:	f000 fd1c 	bl	8006418 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 80059e0:	68fb      	ldr	r3, [r7, #12]
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	69da      	ldr	r2, [r3, #28]
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	681b      	ldr	r3, [r3, #0]
 80059ea:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80059ee:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80059f0:	68fb      	ldr	r3, [r7, #12]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	69d9      	ldr	r1, [r3, #28]
 80059f6:	68bb      	ldr	r3, [r7, #8]
 80059f8:	689b      	ldr	r3, [r3, #8]
 80059fa:	021a      	lsls	r2, r3, #8
 80059fc:	68fb      	ldr	r3, [r7, #12]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	430a      	orrs	r2, r1
 8005a02:	61da      	str	r2, [r3, #28]
 8005a04:	e001      	b.n	8005a0a <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005a06:	2301      	movs	r3, #1
 8005a08:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005a0a:	68fb      	ldr	r3, [r7, #12]
 8005a0c:	2200      	movs	r2, #0
 8005a0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005a12:	7dfb      	ldrb	r3, [r7, #23]
}
 8005a14:	4618      	mov	r0, r3
 8005a16:	3718      	adds	r7, #24
 8005a18:	46bd      	mov	sp, r7
 8005a1a:	bd80      	pop	{r7, pc}

08005a1c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005a1c:	b580      	push	{r7, lr}
 8005a1e:	b086      	sub	sp, #24
 8005a20:	af00      	add	r7, sp, #0
 8005a22:	60f8      	str	r0, [r7, #12]
 8005a24:	60b9      	str	r1, [r7, #8]
 8005a26:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005a28:	2300      	movs	r3, #0
 8005a2a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8005a36:	2302      	movs	r3, #2
 8005a38:	e0ae      	b.n	8005b98 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8005a3a:	68fb      	ldr	r3, [r7, #12]
 8005a3c:	2201      	movs	r2, #1
 8005a3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	2b0c      	cmp	r3, #12
 8005a46:	f200 809f 	bhi.w	8005b88 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8005a4a:	a201      	add	r2, pc, #4	; (adr r2, 8005a50 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8005a4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a50:	08005a85 	.word	0x08005a85
 8005a54:	08005b89 	.word	0x08005b89
 8005a58:	08005b89 	.word	0x08005b89
 8005a5c:	08005b89 	.word	0x08005b89
 8005a60:	08005ac5 	.word	0x08005ac5
 8005a64:	08005b89 	.word	0x08005b89
 8005a68:	08005b89 	.word	0x08005b89
 8005a6c:	08005b89 	.word	0x08005b89
 8005a70:	08005b07 	.word	0x08005b07
 8005a74:	08005b89 	.word	0x08005b89
 8005a78:	08005b89 	.word	0x08005b89
 8005a7c:	08005b89 	.word	0x08005b89
 8005a80:	08005b47 	.word	0x08005b47
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005a84:	68fb      	ldr	r3, [r7, #12]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	68b9      	ldr	r1, [r7, #8]
 8005a8a:	4618      	mov	r0, r3
 8005a8c:	f000 f9f8 	bl	8005e80 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005a90:	68fb      	ldr	r3, [r7, #12]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	699a      	ldr	r2, [r3, #24]
 8005a96:	68fb      	ldr	r3, [r7, #12]
 8005a98:	681b      	ldr	r3, [r3, #0]
 8005a9a:	f042 0208 	orr.w	r2, r2, #8
 8005a9e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005aa0:	68fb      	ldr	r3, [r7, #12]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	699a      	ldr	r2, [r3, #24]
 8005aa6:	68fb      	ldr	r3, [r7, #12]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	f022 0204 	bic.w	r2, r2, #4
 8005aae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	681b      	ldr	r3, [r3, #0]
 8005ab4:	6999      	ldr	r1, [r3, #24]
 8005ab6:	68bb      	ldr	r3, [r7, #8]
 8005ab8:	691a      	ldr	r2, [r3, #16]
 8005aba:	68fb      	ldr	r3, [r7, #12]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	430a      	orrs	r2, r1
 8005ac0:	619a      	str	r2, [r3, #24]
      break;
 8005ac2:	e064      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ac4:	68fb      	ldr	r3, [r7, #12]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	68b9      	ldr	r1, [r7, #8]
 8005aca:	4618      	mov	r0, r3
 8005acc:	f000 fa3e 	bl	8005f4c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	699a      	ldr	r2, [r3, #24]
 8005ad6:	68fb      	ldr	r3, [r7, #12]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ade:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	681b      	ldr	r3, [r3, #0]
 8005ae4:	699a      	ldr	r2, [r3, #24]
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005aee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005af0:	68fb      	ldr	r3, [r7, #12]
 8005af2:	681b      	ldr	r3, [r3, #0]
 8005af4:	6999      	ldr	r1, [r3, #24]
 8005af6:	68bb      	ldr	r3, [r7, #8]
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	021a      	lsls	r2, r3, #8
 8005afc:	68fb      	ldr	r3, [r7, #12]
 8005afe:	681b      	ldr	r3, [r3, #0]
 8005b00:	430a      	orrs	r2, r1
 8005b02:	619a      	str	r2, [r3, #24]
      break;
 8005b04:	e043      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005b06:	68fb      	ldr	r3, [r7, #12]
 8005b08:	681b      	ldr	r3, [r3, #0]
 8005b0a:	68b9      	ldr	r1, [r7, #8]
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f000 fa89 	bl	8006024 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005b12:	68fb      	ldr	r3, [r7, #12]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	69da      	ldr	r2, [r3, #28]
 8005b18:	68fb      	ldr	r3, [r7, #12]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	f042 0208 	orr.w	r2, r2, #8
 8005b20:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005b22:	68fb      	ldr	r3, [r7, #12]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	69da      	ldr	r2, [r3, #28]
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	f022 0204 	bic.w	r2, r2, #4
 8005b30:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	69d9      	ldr	r1, [r3, #28]
 8005b38:	68bb      	ldr	r3, [r7, #8]
 8005b3a:	691a      	ldr	r2, [r3, #16]
 8005b3c:	68fb      	ldr	r3, [r7, #12]
 8005b3e:	681b      	ldr	r3, [r3, #0]
 8005b40:	430a      	orrs	r2, r1
 8005b42:	61da      	str	r2, [r3, #28]
      break;
 8005b44:	e023      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005b46:	68fb      	ldr	r3, [r7, #12]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	68b9      	ldr	r1, [r7, #8]
 8005b4c:	4618      	mov	r0, r3
 8005b4e:	f000 fad3 	bl	80060f8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005b52:	68fb      	ldr	r3, [r7, #12]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	69da      	ldr	r2, [r3, #28]
 8005b58:	68fb      	ldr	r3, [r7, #12]
 8005b5a:	681b      	ldr	r3, [r3, #0]
 8005b5c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005b62:	68fb      	ldr	r3, [r7, #12]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	69da      	ldr	r2, [r3, #28]
 8005b68:	68fb      	ldr	r3, [r7, #12]
 8005b6a:	681b      	ldr	r3, [r3, #0]
 8005b6c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005b72:	68fb      	ldr	r3, [r7, #12]
 8005b74:	681b      	ldr	r3, [r3, #0]
 8005b76:	69d9      	ldr	r1, [r3, #28]
 8005b78:	68bb      	ldr	r3, [r7, #8]
 8005b7a:	691b      	ldr	r3, [r3, #16]
 8005b7c:	021a      	lsls	r2, r3, #8
 8005b7e:	68fb      	ldr	r3, [r7, #12]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	430a      	orrs	r2, r1
 8005b84:	61da      	str	r2, [r3, #28]
      break;
 8005b86:	e002      	b.n	8005b8e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	75fb      	strb	r3, [r7, #23]
      break;
 8005b8c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	2200      	movs	r2, #0
 8005b92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005b96:	7dfb      	ldrb	r3, [r7, #23]
}
 8005b98:	4618      	mov	r0, r3
 8005b9a:	3718      	adds	r7, #24
 8005b9c:	46bd      	mov	sp, r7
 8005b9e:	bd80      	pop	{r7, pc}

08005ba0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005ba0:	b580      	push	{r7, lr}
 8005ba2:	b084      	sub	sp, #16
 8005ba4:	af00      	add	r7, sp, #0
 8005ba6:	6078      	str	r0, [r7, #4]
 8005ba8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005baa:	2300      	movs	r3, #0
 8005bac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005bb4:	2b01      	cmp	r3, #1
 8005bb6:	d101      	bne.n	8005bbc <HAL_TIM_ConfigClockSource+0x1c>
 8005bb8:	2302      	movs	r3, #2
 8005bba:	e0b4      	b.n	8005d26 <HAL_TIM_ConfigClockSource+0x186>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2202      	movs	r2, #2
 8005bc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	689b      	ldr	r3, [r3, #8]
 8005bd2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005bd4:	68bb      	ldr	r3, [r7, #8]
 8005bd6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005bda:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005bdc:	68bb      	ldr	r3, [r7, #8]
 8005bde:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005be2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005be4:	687b      	ldr	r3, [r7, #4]
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	68ba      	ldr	r2, [r7, #8]
 8005bea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bf4:	d03e      	beq.n	8005c74 <HAL_TIM_ConfigClockSource+0xd4>
 8005bf6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005bfa:	f200 8087 	bhi.w	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005bfe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c02:	f000 8086 	beq.w	8005d12 <HAL_TIM_ConfigClockSource+0x172>
 8005c06:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005c0a:	d87f      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c0c:	2b70      	cmp	r3, #112	; 0x70
 8005c0e:	d01a      	beq.n	8005c46 <HAL_TIM_ConfigClockSource+0xa6>
 8005c10:	2b70      	cmp	r3, #112	; 0x70
 8005c12:	d87b      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c14:	2b60      	cmp	r3, #96	; 0x60
 8005c16:	d050      	beq.n	8005cba <HAL_TIM_ConfigClockSource+0x11a>
 8005c18:	2b60      	cmp	r3, #96	; 0x60
 8005c1a:	d877      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c1c:	2b50      	cmp	r3, #80	; 0x50
 8005c1e:	d03c      	beq.n	8005c9a <HAL_TIM_ConfigClockSource+0xfa>
 8005c20:	2b50      	cmp	r3, #80	; 0x50
 8005c22:	d873      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c24:	2b40      	cmp	r3, #64	; 0x40
 8005c26:	d058      	beq.n	8005cda <HAL_TIM_ConfigClockSource+0x13a>
 8005c28:	2b40      	cmp	r3, #64	; 0x40
 8005c2a:	d86f      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c2c:	2b30      	cmp	r3, #48	; 0x30
 8005c2e:	d064      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x15a>
 8005c30:	2b30      	cmp	r3, #48	; 0x30
 8005c32:	d86b      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c34:	2b20      	cmp	r3, #32
 8005c36:	d060      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x15a>
 8005c38:	2b20      	cmp	r3, #32
 8005c3a:	d867      	bhi.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d05c      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x15a>
 8005c40:	2b10      	cmp	r3, #16
 8005c42:	d05a      	beq.n	8005cfa <HAL_TIM_ConfigClockSource+0x15a>
 8005c44:	e062      	b.n	8005d0c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	6818      	ldr	r0, [r3, #0]
 8005c4a:	683b      	ldr	r3, [r7, #0]
 8005c4c:	6899      	ldr	r1, [r3, #8]
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	685a      	ldr	r2, [r3, #4]
 8005c52:	683b      	ldr	r3, [r7, #0]
 8005c54:	68db      	ldr	r3, [r3, #12]
 8005c56:	f000 fc37 	bl	80064c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	689b      	ldr	r3, [r3, #8]
 8005c60:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005c62:	68bb      	ldr	r3, [r7, #8]
 8005c64:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005c68:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005c6a:	687b      	ldr	r3, [r7, #4]
 8005c6c:	681b      	ldr	r3, [r3, #0]
 8005c6e:	68ba      	ldr	r2, [r7, #8]
 8005c70:	609a      	str	r2, [r3, #8]
      break;
 8005c72:	e04f      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	6818      	ldr	r0, [r3, #0]
 8005c78:	683b      	ldr	r3, [r7, #0]
 8005c7a:	6899      	ldr	r1, [r3, #8]
 8005c7c:	683b      	ldr	r3, [r7, #0]
 8005c7e:	685a      	ldr	r2, [r3, #4]
 8005c80:	683b      	ldr	r3, [r7, #0]
 8005c82:	68db      	ldr	r3, [r3, #12]
 8005c84:	f000 fc20 	bl	80064c8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	689a      	ldr	r2, [r3, #8]
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	681b      	ldr	r3, [r3, #0]
 8005c92:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005c96:	609a      	str	r2, [r3, #8]
      break;
 8005c98:	e03c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	6818      	ldr	r0, [r3, #0]
 8005c9e:	683b      	ldr	r3, [r7, #0]
 8005ca0:	6859      	ldr	r1, [r3, #4]
 8005ca2:	683b      	ldr	r3, [r7, #0]
 8005ca4:	68db      	ldr	r3, [r3, #12]
 8005ca6:	461a      	mov	r2, r3
 8005ca8:	f000 fade 	bl	8006268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	2150      	movs	r1, #80	; 0x50
 8005cb2:	4618      	mov	r0, r3
 8005cb4:	f000 fbed 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005cb8:	e02c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	6818      	ldr	r0, [r3, #0]
 8005cbe:	683b      	ldr	r3, [r7, #0]
 8005cc0:	6859      	ldr	r1, [r3, #4]
 8005cc2:	683b      	ldr	r3, [r7, #0]
 8005cc4:	68db      	ldr	r3, [r3, #12]
 8005cc6:	461a      	mov	r2, r3
 8005cc8:	f000 fb3a 	bl	8006340 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	2160      	movs	r1, #96	; 0x60
 8005cd2:	4618      	mov	r0, r3
 8005cd4:	f000 fbdd 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005cd8:	e01c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	6818      	ldr	r0, [r3, #0]
 8005cde:	683b      	ldr	r3, [r7, #0]
 8005ce0:	6859      	ldr	r1, [r3, #4]
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	68db      	ldr	r3, [r3, #12]
 8005ce6:	461a      	mov	r2, r3
 8005ce8:	f000 fabe 	bl	8006268 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	2140      	movs	r1, #64	; 0x40
 8005cf2:	4618      	mov	r0, r3
 8005cf4:	f000 fbcd 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005cf8:	e00c      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681a      	ldr	r2, [r3, #0]
 8005cfe:	683b      	ldr	r3, [r7, #0]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4619      	mov	r1, r3
 8005d04:	4610      	mov	r0, r2
 8005d06:	f000 fbc4 	bl	8006492 <TIM_ITRx_SetConfig>
      break;
 8005d0a:	e003      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	73fb      	strb	r3, [r7, #15]
      break;
 8005d10:	e000      	b.n	8005d14 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005d12:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005d14:	687b      	ldr	r3, [r7, #4]
 8005d16:	2201      	movs	r2, #1
 8005d18:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	2200      	movs	r2, #0
 8005d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d24:	7bfb      	ldrb	r3, [r7, #15]
}
 8005d26:	4618      	mov	r0, r3
 8005d28:	3710      	adds	r7, #16
 8005d2a:	46bd      	mov	sp, r7
 8005d2c:	bd80      	pop	{r7, pc}

08005d2e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005d2e:	b480      	push	{r7}
 8005d30:	b083      	sub	sp, #12
 8005d32:	af00      	add	r7, sp, #0
 8005d34:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005d36:	bf00      	nop
 8005d38:	370c      	adds	r7, #12
 8005d3a:	46bd      	mov	sp, r7
 8005d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d40:	4770      	bx	lr

08005d42 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005d42:	b480      	push	{r7}
 8005d44:	b083      	sub	sp, #12
 8005d46:	af00      	add	r7, sp, #0
 8005d48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005d4a:	bf00      	nop
 8005d4c:	370c      	adds	r7, #12
 8005d4e:	46bd      	mov	sp, r7
 8005d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d54:	4770      	bx	lr

08005d56 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005d56:	b480      	push	{r7}
 8005d58:	b083      	sub	sp, #12
 8005d5a:	af00      	add	r7, sp, #0
 8005d5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005d5e:	bf00      	nop
 8005d60:	370c      	adds	r7, #12
 8005d62:	46bd      	mov	sp, r7
 8005d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d68:	4770      	bx	lr

08005d6a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005d6a:	b480      	push	{r7}
 8005d6c:	b083      	sub	sp, #12
 8005d6e:	af00      	add	r7, sp, #0
 8005d70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005d72:	bf00      	nop
 8005d74:	370c      	adds	r7, #12
 8005d76:	46bd      	mov	sp, r7
 8005d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d7c:	4770      	bx	lr
	...

08005d80 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005d80:	b480      	push	{r7}
 8005d82:	b085      	sub	sp, #20
 8005d84:	af00      	add	r7, sp, #0
 8005d86:	6078      	str	r0, [r7, #4]
 8005d88:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	681b      	ldr	r3, [r3, #0]
 8005d8e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	4a34      	ldr	r2, [pc, #208]	; (8005e64 <TIM_Base_SetConfig+0xe4>)
 8005d94:	4293      	cmp	r3, r2
 8005d96:	d00f      	beq.n	8005db8 <TIM_Base_SetConfig+0x38>
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d9e:	d00b      	beq.n	8005db8 <TIM_Base_SetConfig+0x38>
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	4a31      	ldr	r2, [pc, #196]	; (8005e68 <TIM_Base_SetConfig+0xe8>)
 8005da4:	4293      	cmp	r3, r2
 8005da6:	d007      	beq.n	8005db8 <TIM_Base_SetConfig+0x38>
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	4a30      	ldr	r2, [pc, #192]	; (8005e6c <TIM_Base_SetConfig+0xec>)
 8005dac:	4293      	cmp	r3, r2
 8005dae:	d003      	beq.n	8005db8 <TIM_Base_SetConfig+0x38>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	4a2f      	ldr	r2, [pc, #188]	; (8005e70 <TIM_Base_SetConfig+0xf0>)
 8005db4:	4293      	cmp	r3, r2
 8005db6:	d108      	bne.n	8005dca <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005db8:	68fb      	ldr	r3, [r7, #12]
 8005dba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005dbe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005dc0:	683b      	ldr	r3, [r7, #0]
 8005dc2:	685b      	ldr	r3, [r3, #4]
 8005dc4:	68fa      	ldr	r2, [r7, #12]
 8005dc6:	4313      	orrs	r3, r2
 8005dc8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	4a25      	ldr	r2, [pc, #148]	; (8005e64 <TIM_Base_SetConfig+0xe4>)
 8005dce:	4293      	cmp	r3, r2
 8005dd0:	d01b      	beq.n	8005e0a <TIM_Base_SetConfig+0x8a>
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005dd8:	d017      	beq.n	8005e0a <TIM_Base_SetConfig+0x8a>
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	4a22      	ldr	r2, [pc, #136]	; (8005e68 <TIM_Base_SetConfig+0xe8>)
 8005dde:	4293      	cmp	r3, r2
 8005de0:	d013      	beq.n	8005e0a <TIM_Base_SetConfig+0x8a>
 8005de2:	687b      	ldr	r3, [r7, #4]
 8005de4:	4a21      	ldr	r2, [pc, #132]	; (8005e6c <TIM_Base_SetConfig+0xec>)
 8005de6:	4293      	cmp	r3, r2
 8005de8:	d00f      	beq.n	8005e0a <TIM_Base_SetConfig+0x8a>
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	4a20      	ldr	r2, [pc, #128]	; (8005e70 <TIM_Base_SetConfig+0xf0>)
 8005dee:	4293      	cmp	r3, r2
 8005df0:	d00b      	beq.n	8005e0a <TIM_Base_SetConfig+0x8a>
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	4a1f      	ldr	r2, [pc, #124]	; (8005e74 <TIM_Base_SetConfig+0xf4>)
 8005df6:	4293      	cmp	r3, r2
 8005df8:	d007      	beq.n	8005e0a <TIM_Base_SetConfig+0x8a>
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	4a1e      	ldr	r2, [pc, #120]	; (8005e78 <TIM_Base_SetConfig+0xf8>)
 8005dfe:	4293      	cmp	r3, r2
 8005e00:	d003      	beq.n	8005e0a <TIM_Base_SetConfig+0x8a>
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	4a1d      	ldr	r2, [pc, #116]	; (8005e7c <TIM_Base_SetConfig+0xfc>)
 8005e06:	4293      	cmp	r3, r2
 8005e08:	d108      	bne.n	8005e1c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005e0a:	68fb      	ldr	r3, [r7, #12]
 8005e0c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e10:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005e12:	683b      	ldr	r3, [r7, #0]
 8005e14:	68db      	ldr	r3, [r3, #12]
 8005e16:	68fa      	ldr	r2, [r7, #12]
 8005e18:	4313      	orrs	r3, r2
 8005e1a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005e1c:	68fb      	ldr	r3, [r7, #12]
 8005e1e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005e22:	683b      	ldr	r3, [r7, #0]
 8005e24:	695b      	ldr	r3, [r3, #20]
 8005e26:	4313      	orrs	r3, r2
 8005e28:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	68fa      	ldr	r2, [r7, #12]
 8005e2e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005e30:	683b      	ldr	r3, [r7, #0]
 8005e32:	689a      	ldr	r2, [r3, #8]
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005e38:	683b      	ldr	r3, [r7, #0]
 8005e3a:	681a      	ldr	r2, [r3, #0]
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	4a08      	ldr	r2, [pc, #32]	; (8005e64 <TIM_Base_SetConfig+0xe4>)
 8005e44:	4293      	cmp	r3, r2
 8005e46:	d103      	bne.n	8005e50 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8005e48:	683b      	ldr	r3, [r7, #0]
 8005e4a:	691a      	ldr	r2, [r3, #16]
 8005e4c:	687b      	ldr	r3, [r7, #4]
 8005e4e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	615a      	str	r2, [r3, #20]
}
 8005e56:	bf00      	nop
 8005e58:	3714      	adds	r7, #20
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e60:	4770      	bx	lr
 8005e62:	bf00      	nop
 8005e64:	40010000 	.word	0x40010000
 8005e68:	40000400 	.word	0x40000400
 8005e6c:	40000800 	.word	0x40000800
 8005e70:	40000c00 	.word	0x40000c00
 8005e74:	40014000 	.word	0x40014000
 8005e78:	40014400 	.word	0x40014400
 8005e7c:	40014800 	.word	0x40014800

08005e80 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005e80:	b480      	push	{r7}
 8005e82:	b087      	sub	sp, #28
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	6a1b      	ldr	r3, [r3, #32]
 8005e8e:	f023 0201 	bic.w	r2, r3, #1
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	6a1b      	ldr	r3, [r3, #32]
 8005e9a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005e9c:	687b      	ldr	r3, [r7, #4]
 8005e9e:	685b      	ldr	r3, [r3, #4]
 8005ea0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	699b      	ldr	r3, [r3, #24]
 8005ea6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8005ea8:	68fb      	ldr	r3, [r7, #12]
 8005eaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005eae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8005eb0:	68fb      	ldr	r3, [r7, #12]
 8005eb2:	f023 0303 	bic.w	r3, r3, #3
 8005eb6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8005eb8:	683b      	ldr	r3, [r7, #0]
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	68fa      	ldr	r2, [r7, #12]
 8005ebe:	4313      	orrs	r3, r2
 8005ec0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8005ec2:	697b      	ldr	r3, [r7, #20]
 8005ec4:	f023 0302 	bic.w	r3, r3, #2
 8005ec8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8005eca:	683b      	ldr	r3, [r7, #0]
 8005ecc:	689b      	ldr	r3, [r3, #8]
 8005ece:	697a      	ldr	r2, [r7, #20]
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	4a1c      	ldr	r2, [pc, #112]	; (8005f48 <TIM_OC1_SetConfig+0xc8>)
 8005ed8:	4293      	cmp	r3, r2
 8005eda:	d10c      	bne.n	8005ef6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8005edc:	697b      	ldr	r3, [r7, #20]
 8005ede:	f023 0308 	bic.w	r3, r3, #8
 8005ee2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8005ee4:	683b      	ldr	r3, [r7, #0]
 8005ee6:	68db      	ldr	r3, [r3, #12]
 8005ee8:	697a      	ldr	r2, [r7, #20]
 8005eea:	4313      	orrs	r3, r2
 8005eec:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8005eee:	697b      	ldr	r3, [r7, #20]
 8005ef0:	f023 0304 	bic.w	r3, r3, #4
 8005ef4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005ef6:	687b      	ldr	r3, [r7, #4]
 8005ef8:	4a13      	ldr	r2, [pc, #76]	; (8005f48 <TIM_OC1_SetConfig+0xc8>)
 8005efa:	4293      	cmp	r3, r2
 8005efc:	d111      	bne.n	8005f22 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8005efe:	693b      	ldr	r3, [r7, #16]
 8005f00:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8005f04:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8005f06:	693b      	ldr	r3, [r7, #16]
 8005f08:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8005f0c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8005f0e:	683b      	ldr	r3, [r7, #0]
 8005f10:	695b      	ldr	r3, [r3, #20]
 8005f12:	693a      	ldr	r2, [r7, #16]
 8005f14:	4313      	orrs	r3, r2
 8005f16:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8005f18:	683b      	ldr	r3, [r7, #0]
 8005f1a:	699b      	ldr	r3, [r3, #24]
 8005f1c:	693a      	ldr	r2, [r7, #16]
 8005f1e:	4313      	orrs	r3, r2
 8005f20:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005f22:	687b      	ldr	r3, [r7, #4]
 8005f24:	693a      	ldr	r2, [r7, #16]
 8005f26:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	68fa      	ldr	r2, [r7, #12]
 8005f2c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8005f2e:	683b      	ldr	r3, [r7, #0]
 8005f30:	685a      	ldr	r2, [r3, #4]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	697a      	ldr	r2, [r7, #20]
 8005f3a:	621a      	str	r2, [r3, #32]
}
 8005f3c:	bf00      	nop
 8005f3e:	371c      	adds	r7, #28
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr
 8005f48:	40010000 	.word	0x40010000

08005f4c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8005f4c:	b480      	push	{r7}
 8005f4e:	b087      	sub	sp, #28
 8005f50:	af00      	add	r7, sp, #0
 8005f52:	6078      	str	r0, [r7, #4]
 8005f54:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	6a1b      	ldr	r3, [r3, #32]
 8005f5a:	f023 0210 	bic.w	r2, r3, #16
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	6a1b      	ldr	r3, [r3, #32]
 8005f66:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	685b      	ldr	r3, [r3, #4]
 8005f6c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	699b      	ldr	r3, [r3, #24]
 8005f72:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8005f7a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005f82:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8005f84:	683b      	ldr	r3, [r7, #0]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	021b      	lsls	r3, r3, #8
 8005f8a:	68fa      	ldr	r2, [r7, #12]
 8005f8c:	4313      	orrs	r3, r2
 8005f8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8005f90:	697b      	ldr	r3, [r7, #20]
 8005f92:	f023 0320 	bic.w	r3, r3, #32
 8005f96:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8005f98:	683b      	ldr	r3, [r7, #0]
 8005f9a:	689b      	ldr	r3, [r3, #8]
 8005f9c:	011b      	lsls	r3, r3, #4
 8005f9e:	697a      	ldr	r2, [r7, #20]
 8005fa0:	4313      	orrs	r3, r2
 8005fa2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	4a1e      	ldr	r2, [pc, #120]	; (8006020 <TIM_OC2_SetConfig+0xd4>)
 8005fa8:	4293      	cmp	r3, r2
 8005faa:	d10d      	bne.n	8005fc8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8005fac:	697b      	ldr	r3, [r7, #20]
 8005fae:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8005fb2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8005fb4:	683b      	ldr	r3, [r7, #0]
 8005fb6:	68db      	ldr	r3, [r3, #12]
 8005fb8:	011b      	lsls	r3, r3, #4
 8005fba:	697a      	ldr	r2, [r7, #20]
 8005fbc:	4313      	orrs	r3, r2
 8005fbe:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8005fc0:	697b      	ldr	r3, [r7, #20]
 8005fc2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8005fc6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	4a15      	ldr	r2, [pc, #84]	; (8006020 <TIM_OC2_SetConfig+0xd4>)
 8005fcc:	4293      	cmp	r3, r2
 8005fce:	d113      	bne.n	8005ff8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8005fd0:	693b      	ldr	r3, [r7, #16]
 8005fd2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8005fd6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8005fd8:	693b      	ldr	r3, [r7, #16]
 8005fda:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005fde:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8005fe0:	683b      	ldr	r3, [r7, #0]
 8005fe2:	695b      	ldr	r3, [r3, #20]
 8005fe4:	009b      	lsls	r3, r3, #2
 8005fe6:	693a      	ldr	r2, [r7, #16]
 8005fe8:	4313      	orrs	r3, r2
 8005fea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8005fec:	683b      	ldr	r3, [r7, #0]
 8005fee:	699b      	ldr	r3, [r3, #24]
 8005ff0:	009b      	lsls	r3, r3, #2
 8005ff2:	693a      	ldr	r2, [r7, #16]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	693a      	ldr	r2, [r7, #16]
 8005ffc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	68fa      	ldr	r2, [r7, #12]
 8006002:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006004:	683b      	ldr	r3, [r7, #0]
 8006006:	685a      	ldr	r2, [r3, #4]
 8006008:	687b      	ldr	r3, [r7, #4]
 800600a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	697a      	ldr	r2, [r7, #20]
 8006010:	621a      	str	r2, [r3, #32]
}
 8006012:	bf00      	nop
 8006014:	371c      	adds	r7, #28
 8006016:	46bd      	mov	sp, r7
 8006018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800601c:	4770      	bx	lr
 800601e:	bf00      	nop
 8006020:	40010000 	.word	0x40010000

08006024 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006024:	b480      	push	{r7}
 8006026:	b087      	sub	sp, #28
 8006028:	af00      	add	r7, sp, #0
 800602a:	6078      	str	r0, [r7, #4]
 800602c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	6a1b      	ldr	r3, [r3, #32]
 8006032:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	6a1b      	ldr	r3, [r3, #32]
 800603e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	685b      	ldr	r3, [r3, #4]
 8006044:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	69db      	ldr	r3, [r3, #28]
 800604a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006052:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006054:	68fb      	ldr	r3, [r7, #12]
 8006056:	f023 0303 	bic.w	r3, r3, #3
 800605a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	68fa      	ldr	r2, [r7, #12]
 8006062:	4313      	orrs	r3, r2
 8006064:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006066:	697b      	ldr	r3, [r7, #20]
 8006068:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800606c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800606e:	683b      	ldr	r3, [r7, #0]
 8006070:	689b      	ldr	r3, [r3, #8]
 8006072:	021b      	lsls	r3, r3, #8
 8006074:	697a      	ldr	r2, [r7, #20]
 8006076:	4313      	orrs	r3, r2
 8006078:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	4a1d      	ldr	r2, [pc, #116]	; (80060f4 <TIM_OC3_SetConfig+0xd0>)
 800607e:	4293      	cmp	r3, r2
 8006080:	d10d      	bne.n	800609e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006082:	697b      	ldr	r3, [r7, #20]
 8006084:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006088:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800608a:	683b      	ldr	r3, [r7, #0]
 800608c:	68db      	ldr	r3, [r3, #12]
 800608e:	021b      	lsls	r3, r3, #8
 8006090:	697a      	ldr	r2, [r7, #20]
 8006092:	4313      	orrs	r3, r2
 8006094:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006096:	697b      	ldr	r3, [r7, #20]
 8006098:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800609c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	4a14      	ldr	r2, [pc, #80]	; (80060f4 <TIM_OC3_SetConfig+0xd0>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d113      	bne.n	80060ce <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80060a6:	693b      	ldr	r3, [r7, #16]
 80060a8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80060ac:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80060ae:	693b      	ldr	r3, [r7, #16]
 80060b0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80060b4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80060b6:	683b      	ldr	r3, [r7, #0]
 80060b8:	695b      	ldr	r3, [r3, #20]
 80060ba:	011b      	lsls	r3, r3, #4
 80060bc:	693a      	ldr	r2, [r7, #16]
 80060be:	4313      	orrs	r3, r2
 80060c0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	699b      	ldr	r3, [r3, #24]
 80060c6:	011b      	lsls	r3, r3, #4
 80060c8:	693a      	ldr	r2, [r7, #16]
 80060ca:	4313      	orrs	r3, r2
 80060cc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060ce:	687b      	ldr	r3, [r7, #4]
 80060d0:	693a      	ldr	r2, [r7, #16]
 80060d2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	68fa      	ldr	r2, [r7, #12]
 80060d8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80060da:	683b      	ldr	r3, [r7, #0]
 80060dc:	685a      	ldr	r2, [r3, #4]
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	697a      	ldr	r2, [r7, #20]
 80060e6:	621a      	str	r2, [r3, #32]
}
 80060e8:	bf00      	nop
 80060ea:	371c      	adds	r7, #28
 80060ec:	46bd      	mov	sp, r7
 80060ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060f2:	4770      	bx	lr
 80060f4:	40010000 	.word	0x40010000

080060f8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80060f8:	b480      	push	{r7}
 80060fa:	b087      	sub	sp, #28
 80060fc:	af00      	add	r7, sp, #0
 80060fe:	6078      	str	r0, [r7, #4]
 8006100:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006102:	687b      	ldr	r3, [r7, #4]
 8006104:	6a1b      	ldr	r3, [r3, #32]
 8006106:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	6a1b      	ldr	r3, [r3, #32]
 8006112:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	685b      	ldr	r3, [r3, #4]
 8006118:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	69db      	ldr	r3, [r3, #28]
 800611e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006120:	68fb      	ldr	r3, [r7, #12]
 8006122:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006126:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006128:	68fb      	ldr	r3, [r7, #12]
 800612a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800612e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006130:	683b      	ldr	r3, [r7, #0]
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	021b      	lsls	r3, r3, #8
 8006136:	68fa      	ldr	r2, [r7, #12]
 8006138:	4313      	orrs	r3, r2
 800613a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800613c:	693b      	ldr	r3, [r7, #16]
 800613e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006142:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006144:	683b      	ldr	r3, [r7, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	031b      	lsls	r3, r3, #12
 800614a:	693a      	ldr	r2, [r7, #16]
 800614c:	4313      	orrs	r3, r2
 800614e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	4a10      	ldr	r2, [pc, #64]	; (8006194 <TIM_OC4_SetConfig+0x9c>)
 8006154:	4293      	cmp	r3, r2
 8006156:	d109      	bne.n	800616c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006158:	697b      	ldr	r3, [r7, #20]
 800615a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800615e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	695b      	ldr	r3, [r3, #20]
 8006164:	019b      	lsls	r3, r3, #6
 8006166:	697a      	ldr	r2, [r7, #20]
 8006168:	4313      	orrs	r3, r2
 800616a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	697a      	ldr	r2, [r7, #20]
 8006170:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006172:	687b      	ldr	r3, [r7, #4]
 8006174:	68fa      	ldr	r2, [r7, #12]
 8006176:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006178:	683b      	ldr	r3, [r7, #0]
 800617a:	685a      	ldr	r2, [r3, #4]
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	693a      	ldr	r2, [r7, #16]
 8006184:	621a      	str	r2, [r3, #32]
}
 8006186:	bf00      	nop
 8006188:	371c      	adds	r7, #28
 800618a:	46bd      	mov	sp, r7
 800618c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006190:	4770      	bx	lr
 8006192:	bf00      	nop
 8006194:	40010000 	.word	0x40010000

08006198 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006198:	b480      	push	{r7}
 800619a:	b087      	sub	sp, #28
 800619c:	af00      	add	r7, sp, #0
 800619e:	60f8      	str	r0, [r7, #12]
 80061a0:	60b9      	str	r1, [r7, #8]
 80061a2:	607a      	str	r2, [r7, #4]
 80061a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80061a6:	68fb      	ldr	r3, [r7, #12]
 80061a8:	6a1b      	ldr	r3, [r3, #32]
 80061aa:	f023 0201 	bic.w	r2, r3, #1
 80061ae:	68fb      	ldr	r3, [r7, #12]
 80061b0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b2:	68fb      	ldr	r3, [r7, #12]
 80061b4:	699b      	ldr	r3, [r3, #24]
 80061b6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	6a1b      	ldr	r3, [r3, #32]
 80061bc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80061be:	68fb      	ldr	r3, [r7, #12]
 80061c0:	4a24      	ldr	r2, [pc, #144]	; (8006254 <TIM_TI1_SetConfig+0xbc>)
 80061c2:	4293      	cmp	r3, r2
 80061c4:	d013      	beq.n	80061ee <TIM_TI1_SetConfig+0x56>
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80061cc:	d00f      	beq.n	80061ee <TIM_TI1_SetConfig+0x56>
 80061ce:	68fb      	ldr	r3, [r7, #12]
 80061d0:	4a21      	ldr	r2, [pc, #132]	; (8006258 <TIM_TI1_SetConfig+0xc0>)
 80061d2:	4293      	cmp	r3, r2
 80061d4:	d00b      	beq.n	80061ee <TIM_TI1_SetConfig+0x56>
 80061d6:	68fb      	ldr	r3, [r7, #12]
 80061d8:	4a20      	ldr	r2, [pc, #128]	; (800625c <TIM_TI1_SetConfig+0xc4>)
 80061da:	4293      	cmp	r3, r2
 80061dc:	d007      	beq.n	80061ee <TIM_TI1_SetConfig+0x56>
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	4a1f      	ldr	r2, [pc, #124]	; (8006260 <TIM_TI1_SetConfig+0xc8>)
 80061e2:	4293      	cmp	r3, r2
 80061e4:	d003      	beq.n	80061ee <TIM_TI1_SetConfig+0x56>
 80061e6:	68fb      	ldr	r3, [r7, #12]
 80061e8:	4a1e      	ldr	r2, [pc, #120]	; (8006264 <TIM_TI1_SetConfig+0xcc>)
 80061ea:	4293      	cmp	r3, r2
 80061ec:	d101      	bne.n	80061f2 <TIM_TI1_SetConfig+0x5a>
 80061ee:	2301      	movs	r3, #1
 80061f0:	e000      	b.n	80061f4 <TIM_TI1_SetConfig+0x5c>
 80061f2:	2300      	movs	r3, #0
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d008      	beq.n	800620a <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80061f8:	697b      	ldr	r3, [r7, #20]
 80061fa:	f023 0303 	bic.w	r3, r3, #3
 80061fe:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006200:	697a      	ldr	r2, [r7, #20]
 8006202:	687b      	ldr	r3, [r7, #4]
 8006204:	4313      	orrs	r3, r2
 8006206:	617b      	str	r3, [r7, #20]
 8006208:	e003      	b.n	8006212 <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800620a:	697b      	ldr	r3, [r7, #20]
 800620c:	f043 0301 	orr.w	r3, r3, #1
 8006210:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006212:	697b      	ldr	r3, [r7, #20]
 8006214:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006218:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800621a:	683b      	ldr	r3, [r7, #0]
 800621c:	011b      	lsls	r3, r3, #4
 800621e:	b2db      	uxtb	r3, r3
 8006220:	697a      	ldr	r2, [r7, #20]
 8006222:	4313      	orrs	r3, r2
 8006224:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006226:	693b      	ldr	r3, [r7, #16]
 8006228:	f023 030a 	bic.w	r3, r3, #10
 800622c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800622e:	68bb      	ldr	r3, [r7, #8]
 8006230:	f003 030a 	and.w	r3, r3, #10
 8006234:	693a      	ldr	r2, [r7, #16]
 8006236:	4313      	orrs	r3, r2
 8006238:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800623a:	68fb      	ldr	r3, [r7, #12]
 800623c:	697a      	ldr	r2, [r7, #20]
 800623e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	693a      	ldr	r2, [r7, #16]
 8006244:	621a      	str	r2, [r3, #32]
}
 8006246:	bf00      	nop
 8006248:	371c      	adds	r7, #28
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr
 8006252:	bf00      	nop
 8006254:	40010000 	.word	0x40010000
 8006258:	40000400 	.word	0x40000400
 800625c:	40000800 	.word	0x40000800
 8006260:	40000c00 	.word	0x40000c00
 8006264:	40014000 	.word	0x40014000

08006268 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006268:	b480      	push	{r7}
 800626a:	b087      	sub	sp, #28
 800626c:	af00      	add	r7, sp, #0
 800626e:	60f8      	str	r0, [r7, #12]
 8006270:	60b9      	str	r1, [r7, #8]
 8006272:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006274:	68fb      	ldr	r3, [r7, #12]
 8006276:	6a1b      	ldr	r3, [r3, #32]
 8006278:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800627a:	68fb      	ldr	r3, [r7, #12]
 800627c:	6a1b      	ldr	r3, [r3, #32]
 800627e:	f023 0201 	bic.w	r2, r3, #1
 8006282:	68fb      	ldr	r3, [r7, #12]
 8006284:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	699b      	ldr	r3, [r3, #24]
 800628a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006292:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800629e:	697b      	ldr	r3, [r7, #20]
 80062a0:	f023 030a 	bic.w	r3, r3, #10
 80062a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80062a6:	697a      	ldr	r2, [r7, #20]
 80062a8:	68bb      	ldr	r3, [r7, #8]
 80062aa:	4313      	orrs	r3, r2
 80062ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80062ae:	68fb      	ldr	r3, [r7, #12]
 80062b0:	693a      	ldr	r2, [r7, #16]
 80062b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80062b4:	68fb      	ldr	r3, [r7, #12]
 80062b6:	697a      	ldr	r2, [r7, #20]
 80062b8:	621a      	str	r2, [r3, #32]
}
 80062ba:	bf00      	nop
 80062bc:	371c      	adds	r7, #28
 80062be:	46bd      	mov	sp, r7
 80062c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c4:	4770      	bx	lr

080062c6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062c6:	b480      	push	{r7}
 80062c8:	b087      	sub	sp, #28
 80062ca:	af00      	add	r7, sp, #0
 80062cc:	60f8      	str	r0, [r7, #12]
 80062ce:	60b9      	str	r1, [r7, #8]
 80062d0:	607a      	str	r2, [r7, #4]
 80062d2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	6a1b      	ldr	r3, [r3, #32]
 80062d8:	f023 0210 	bic.w	r2, r3, #16
 80062dc:	68fb      	ldr	r3, [r7, #12]
 80062de:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80062e0:	68fb      	ldr	r3, [r7, #12]
 80062e2:	699b      	ldr	r3, [r3, #24]
 80062e4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80062e6:	68fb      	ldr	r3, [r7, #12]
 80062e8:	6a1b      	ldr	r3, [r3, #32]
 80062ea:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80062ec:	697b      	ldr	r3, [r7, #20]
 80062ee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80062f2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	021b      	lsls	r3, r3, #8
 80062f8:	697a      	ldr	r2, [r7, #20]
 80062fa:	4313      	orrs	r3, r2
 80062fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80062fe:	697b      	ldr	r3, [r7, #20]
 8006300:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006304:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006306:	683b      	ldr	r3, [r7, #0]
 8006308:	031b      	lsls	r3, r3, #12
 800630a:	b29b      	uxth	r3, r3
 800630c:	697a      	ldr	r2, [r7, #20]
 800630e:	4313      	orrs	r3, r2
 8006310:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006312:	693b      	ldr	r3, [r7, #16]
 8006314:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006318:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800631a:	68bb      	ldr	r3, [r7, #8]
 800631c:	011b      	lsls	r3, r3, #4
 800631e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006322:	693a      	ldr	r2, [r7, #16]
 8006324:	4313      	orrs	r3, r2
 8006326:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006328:	68fb      	ldr	r3, [r7, #12]
 800632a:	697a      	ldr	r2, [r7, #20]
 800632c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	693a      	ldr	r2, [r7, #16]
 8006332:	621a      	str	r2, [r3, #32]
}
 8006334:	bf00      	nop
 8006336:	371c      	adds	r7, #28
 8006338:	46bd      	mov	sp, r7
 800633a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800633e:	4770      	bx	lr

08006340 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006340:	b480      	push	{r7}
 8006342:	b087      	sub	sp, #28
 8006344:	af00      	add	r7, sp, #0
 8006346:	60f8      	str	r0, [r7, #12]
 8006348:	60b9      	str	r1, [r7, #8]
 800634a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800634c:	68fb      	ldr	r3, [r7, #12]
 800634e:	6a1b      	ldr	r3, [r3, #32]
 8006350:	f023 0210 	bic.w	r2, r3, #16
 8006354:	68fb      	ldr	r3, [r7, #12]
 8006356:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006358:	68fb      	ldr	r3, [r7, #12]
 800635a:	699b      	ldr	r3, [r3, #24]
 800635c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6a1b      	ldr	r3, [r3, #32]
 8006362:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006364:	697b      	ldr	r3, [r7, #20]
 8006366:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800636a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	031b      	lsls	r3, r3, #12
 8006370:	697a      	ldr	r2, [r7, #20]
 8006372:	4313      	orrs	r3, r2
 8006374:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006376:	693b      	ldr	r3, [r7, #16]
 8006378:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800637c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800637e:	68bb      	ldr	r3, [r7, #8]
 8006380:	011b      	lsls	r3, r3, #4
 8006382:	693a      	ldr	r2, [r7, #16]
 8006384:	4313      	orrs	r3, r2
 8006386:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	697a      	ldr	r2, [r7, #20]
 800638c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	693a      	ldr	r2, [r7, #16]
 8006392:	621a      	str	r2, [r3, #32]
}
 8006394:	bf00      	nop
 8006396:	371c      	adds	r7, #28
 8006398:	46bd      	mov	sp, r7
 800639a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800639e:	4770      	bx	lr

080063a0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80063a0:	b480      	push	{r7}
 80063a2:	b087      	sub	sp, #28
 80063a4:	af00      	add	r7, sp, #0
 80063a6:	60f8      	str	r0, [r7, #12]
 80063a8:	60b9      	str	r1, [r7, #8]
 80063aa:	607a      	str	r2, [r7, #4]
 80063ac:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80063ae:	68fb      	ldr	r3, [r7, #12]
 80063b0:	6a1b      	ldr	r3, [r3, #32]
 80063b2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	69db      	ldr	r3, [r3, #28]
 80063be:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6a1b      	ldr	r3, [r3, #32]
 80063c4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80063c6:	697b      	ldr	r3, [r7, #20]
 80063c8:	f023 0303 	bic.w	r3, r3, #3
 80063cc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80063ce:	697a      	ldr	r2, [r7, #20]
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	4313      	orrs	r3, r2
 80063d4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80063d6:	697b      	ldr	r3, [r7, #20]
 80063d8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80063dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80063de:	683b      	ldr	r3, [r7, #0]
 80063e0:	011b      	lsls	r3, r3, #4
 80063e2:	b2db      	uxtb	r3, r3
 80063e4:	697a      	ldr	r2, [r7, #20]
 80063e6:	4313      	orrs	r3, r2
 80063e8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80063ea:	693b      	ldr	r3, [r7, #16]
 80063ec:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80063f0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80063f2:	68bb      	ldr	r3, [r7, #8]
 80063f4:	021b      	lsls	r3, r3, #8
 80063f6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80063fa:	693a      	ldr	r2, [r7, #16]
 80063fc:	4313      	orrs	r3, r2
 80063fe:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006400:	68fb      	ldr	r3, [r7, #12]
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	693a      	ldr	r2, [r7, #16]
 800640a:	621a      	str	r2, [r3, #32]
}
 800640c:	bf00      	nop
 800640e:	371c      	adds	r7, #28
 8006410:	46bd      	mov	sp, r7
 8006412:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006416:	4770      	bx	lr

08006418 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006418:	b480      	push	{r7}
 800641a:	b087      	sub	sp, #28
 800641c:	af00      	add	r7, sp, #0
 800641e:	60f8      	str	r0, [r7, #12]
 8006420:	60b9      	str	r1, [r7, #8]
 8006422:	607a      	str	r2, [r7, #4]
 8006424:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006426:	68fb      	ldr	r3, [r7, #12]
 8006428:	6a1b      	ldr	r3, [r3, #32]
 800642a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800642e:	68fb      	ldr	r3, [r7, #12]
 8006430:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006432:	68fb      	ldr	r3, [r7, #12]
 8006434:	69db      	ldr	r3, [r3, #28]
 8006436:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006438:	68fb      	ldr	r3, [r7, #12]
 800643a:	6a1b      	ldr	r3, [r3, #32]
 800643c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800643e:	697b      	ldr	r3, [r7, #20]
 8006440:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006444:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	021b      	lsls	r3, r3, #8
 800644a:	697a      	ldr	r2, [r7, #20]
 800644c:	4313      	orrs	r3, r2
 800644e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006456:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006458:	683b      	ldr	r3, [r7, #0]
 800645a:	031b      	lsls	r3, r3, #12
 800645c:	b29b      	uxth	r3, r3
 800645e:	697a      	ldr	r2, [r7, #20]
 8006460:	4313      	orrs	r3, r2
 8006462:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006464:	693b      	ldr	r3, [r7, #16]
 8006466:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800646a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800646c:	68bb      	ldr	r3, [r7, #8]
 800646e:	031b      	lsls	r3, r3, #12
 8006470:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006474:	693a      	ldr	r2, [r7, #16]
 8006476:	4313      	orrs	r3, r2
 8006478:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	697a      	ldr	r2, [r7, #20]
 800647e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006480:	68fb      	ldr	r3, [r7, #12]
 8006482:	693a      	ldr	r2, [r7, #16]
 8006484:	621a      	str	r2, [r3, #32]
}
 8006486:	bf00      	nop
 8006488:	371c      	adds	r7, #28
 800648a:	46bd      	mov	sp, r7
 800648c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006490:	4770      	bx	lr

08006492 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006492:	b480      	push	{r7}
 8006494:	b085      	sub	sp, #20
 8006496:	af00      	add	r7, sp, #0
 8006498:	6078      	str	r0, [r7, #4]
 800649a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	689b      	ldr	r3, [r3, #8]
 80064a0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80064a8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80064aa:	683a      	ldr	r2, [r7, #0]
 80064ac:	68fb      	ldr	r3, [r7, #12]
 80064ae:	4313      	orrs	r3, r2
 80064b0:	f043 0307 	orr.w	r3, r3, #7
 80064b4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	68fa      	ldr	r2, [r7, #12]
 80064ba:	609a      	str	r2, [r3, #8]
}
 80064bc:	bf00      	nop
 80064be:	3714      	adds	r7, #20
 80064c0:	46bd      	mov	sp, r7
 80064c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064c6:	4770      	bx	lr

080064c8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80064c8:	b480      	push	{r7}
 80064ca:	b087      	sub	sp, #28
 80064cc:	af00      	add	r7, sp, #0
 80064ce:	60f8      	str	r0, [r7, #12]
 80064d0:	60b9      	str	r1, [r7, #8]
 80064d2:	607a      	str	r2, [r7, #4]
 80064d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80064dc:	697b      	ldr	r3, [r7, #20]
 80064de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80064e2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80064e4:	683b      	ldr	r3, [r7, #0]
 80064e6:	021a      	lsls	r2, r3, #8
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	431a      	orrs	r2, r3
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	4313      	orrs	r3, r2
 80064f0:	697a      	ldr	r2, [r7, #20]
 80064f2:	4313      	orrs	r3, r2
 80064f4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80064f6:	68fb      	ldr	r3, [r7, #12]
 80064f8:	697a      	ldr	r2, [r7, #20]
 80064fa:	609a      	str	r2, [r3, #8]
}
 80064fc:	bf00      	nop
 80064fe:	371c      	adds	r7, #28
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006508:	b480      	push	{r7}
 800650a:	b087      	sub	sp, #28
 800650c:	af00      	add	r7, sp, #0
 800650e:	60f8      	str	r0, [r7, #12]
 8006510:	60b9      	str	r1, [r7, #8]
 8006512:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	f003 031f 	and.w	r3, r3, #31
 800651a:	2201      	movs	r2, #1
 800651c:	fa02 f303 	lsl.w	r3, r2, r3
 8006520:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	6a1a      	ldr	r2, [r3, #32]
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	43db      	mvns	r3, r3
 800652a:	401a      	ands	r2, r3
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	6a1a      	ldr	r2, [r3, #32]
 8006534:	68bb      	ldr	r3, [r7, #8]
 8006536:	f003 031f 	and.w	r3, r3, #31
 800653a:	6879      	ldr	r1, [r7, #4]
 800653c:	fa01 f303 	lsl.w	r3, r1, r3
 8006540:	431a      	orrs	r2, r3
 8006542:	68fb      	ldr	r3, [r7, #12]
 8006544:	621a      	str	r2, [r3, #32]
}
 8006546:	bf00      	nop
 8006548:	371c      	adds	r7, #28
 800654a:	46bd      	mov	sp, r7
 800654c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006550:	4770      	bx	lr
	...

08006554 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006554:	b480      	push	{r7}
 8006556:	b085      	sub	sp, #20
 8006558:	af00      	add	r7, sp, #0
 800655a:	6078      	str	r0, [r7, #4]
 800655c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006564:	2b01      	cmp	r3, #1
 8006566:	d101      	bne.n	800656c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006568:	2302      	movs	r3, #2
 800656a:	e050      	b.n	800660e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	2201      	movs	r2, #1
 8006570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2202      	movs	r2, #2
 8006578:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	681b      	ldr	r3, [r3, #0]
 8006580:	685b      	ldr	r3, [r3, #4]
 8006582:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006592:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006594:	683b      	ldr	r3, [r7, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68fa      	ldr	r2, [r7, #12]
 800659a:	4313      	orrs	r3, r2
 800659c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	68fa      	ldr	r2, [r7, #12]
 80065a4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80065a6:	687b      	ldr	r3, [r7, #4]
 80065a8:	681b      	ldr	r3, [r3, #0]
 80065aa:	4a1c      	ldr	r2, [pc, #112]	; (800661c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80065ac:	4293      	cmp	r3, r2
 80065ae:	d018      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065b0:	687b      	ldr	r3, [r7, #4]
 80065b2:	681b      	ldr	r3, [r3, #0]
 80065b4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80065b8:	d013      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	4a18      	ldr	r2, [pc, #96]	; (8006620 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80065c0:	4293      	cmp	r3, r2
 80065c2:	d00e      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	681b      	ldr	r3, [r3, #0]
 80065c8:	4a16      	ldr	r2, [pc, #88]	; (8006624 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80065ca:	4293      	cmp	r3, r2
 80065cc:	d009      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065ce:	687b      	ldr	r3, [r7, #4]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	4a15      	ldr	r2, [pc, #84]	; (8006628 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80065d4:	4293      	cmp	r3, r2
 80065d6:	d004      	beq.n	80065e2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80065d8:	687b      	ldr	r3, [r7, #4]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	4a13      	ldr	r2, [pc, #76]	; (800662c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80065de:	4293      	cmp	r3, r2
 80065e0:	d10c      	bne.n	80065fc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80065e2:	68bb      	ldr	r3, [r7, #8]
 80065e4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80065e8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80065ea:	683b      	ldr	r3, [r7, #0]
 80065ec:	685b      	ldr	r3, [r3, #4]
 80065ee:	68ba      	ldr	r2, [r7, #8]
 80065f0:	4313      	orrs	r3, r2
 80065f2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	681b      	ldr	r3, [r3, #0]
 80065f8:	68ba      	ldr	r2, [r7, #8]
 80065fa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2200      	movs	r2, #0
 8006608:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800660c:	2300      	movs	r3, #0
}
 800660e:	4618      	mov	r0, r3
 8006610:	3714      	adds	r7, #20
 8006612:	46bd      	mov	sp, r7
 8006614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006618:	4770      	bx	lr
 800661a:	bf00      	nop
 800661c:	40010000 	.word	0x40010000
 8006620:	40000400 	.word	0x40000400
 8006624:	40000800 	.word	0x40000800
 8006628:	40000c00 	.word	0x40000c00
 800662c:	40014000 	.word	0x40014000

08006630 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006630:	b480      	push	{r7}
 8006632:	b083      	sub	sp, #12
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006638:	bf00      	nop
 800663a:	370c      	adds	r7, #12
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006644:	b480      	push	{r7}
 8006646:	b083      	sub	sp, #12
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800664c:	bf00      	nop
 800664e:	370c      	adds	r7, #12
 8006650:	46bd      	mov	sp, r7
 8006652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006656:	4770      	bx	lr

08006658 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b082      	sub	sp, #8
 800665c:	af00      	add	r7, sp, #0
 800665e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2b00      	cmp	r3, #0
 8006664:	d101      	bne.n	800666a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006666:	2301      	movs	r3, #1
 8006668:	e03f      	b.n	80066ea <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800666a:	687b      	ldr	r3, [r7, #4]
 800666c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006670:	b2db      	uxtb	r3, r3
 8006672:	2b00      	cmp	r3, #0
 8006674:	d106      	bne.n	8006684 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	2200      	movs	r2, #0
 800667a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800667e:	6878      	ldr	r0, [r7, #4]
 8006680:	f7fc f86e 	bl	8002760 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	2224      	movs	r2, #36	; 0x24
 8006688:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	681b      	ldr	r3, [r3, #0]
 8006690:	68da      	ldr	r2, [r3, #12]
 8006692:	687b      	ldr	r3, [r7, #4]
 8006694:	681b      	ldr	r3, [r3, #0]
 8006696:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800669a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800669c:	6878      	ldr	r0, [r7, #4]
 800669e:	f000 f897 	bl	80067d0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691a      	ldr	r2, [r3, #16]
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80066b0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	681b      	ldr	r3, [r3, #0]
 80066b6:	695a      	ldr	r2, [r3, #20]
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80066c0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	68da      	ldr	r2, [r3, #12]
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80066d0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	2200      	movs	r2, #0
 80066d6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	2220      	movs	r2, #32
 80066dc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	2220      	movs	r2, #32
 80066e4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80066e8:	2300      	movs	r3, #0
}
 80066ea:	4618      	mov	r0, r3
 80066ec:	3708      	adds	r7, #8
 80066ee:	46bd      	mov	sp, r7
 80066f0:	bd80      	pop	{r7, pc}

080066f2 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066f2:	b580      	push	{r7, lr}
 80066f4:	b084      	sub	sp, #16
 80066f6:	af00      	add	r7, sp, #0
 80066f8:	60f8      	str	r0, [r7, #12]
 80066fa:	60b9      	str	r1, [r7, #8]
 80066fc:	4613      	mov	r3, r2
 80066fe:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006700:	68fb      	ldr	r3, [r7, #12]
 8006702:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006706:	b2db      	uxtb	r3, r3
 8006708:	2b20      	cmp	r3, #32
 800670a:	d11d      	bne.n	8006748 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 800670c:	68bb      	ldr	r3, [r7, #8]
 800670e:	2b00      	cmp	r3, #0
 8006710:	d002      	beq.n	8006718 <HAL_UART_Receive_IT+0x26>
 8006712:	88fb      	ldrh	r3, [r7, #6]
 8006714:	2b00      	cmp	r3, #0
 8006716:	d101      	bne.n	800671c <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006718:	2301      	movs	r3, #1
 800671a:	e016      	b.n	800674a <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006722:	2b01      	cmp	r3, #1
 8006724:	d101      	bne.n	800672a <HAL_UART_Receive_IT+0x38>
 8006726:	2302      	movs	r3, #2
 8006728:	e00f      	b.n	800674a <HAL_UART_Receive_IT+0x58>
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	2201      	movs	r2, #1
 800672e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006732:	68fb      	ldr	r3, [r7, #12]
 8006734:	2200      	movs	r2, #0
 8006736:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	461a      	mov	r2, r3
 800673c:	68b9      	ldr	r1, [r7, #8]
 800673e:	68f8      	ldr	r0, [r7, #12]
 8006740:	f000 f807 	bl	8006752 <UART_Start_Receive_IT>
 8006744:	4603      	mov	r3, r0
 8006746:	e000      	b.n	800674a <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006748:	2302      	movs	r3, #2
  }
}
 800674a:	4618      	mov	r0, r3
 800674c:	3710      	adds	r7, #16
 800674e:	46bd      	mov	sp, r7
 8006750:	bd80      	pop	{r7, pc}

08006752 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006752:	b480      	push	{r7}
 8006754:	b085      	sub	sp, #20
 8006756:	af00      	add	r7, sp, #0
 8006758:	60f8      	str	r0, [r7, #12]
 800675a:	60b9      	str	r1, [r7, #8]
 800675c:	4613      	mov	r3, r2
 800675e:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	68ba      	ldr	r2, [r7, #8]
 8006764:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006766:	68fb      	ldr	r3, [r7, #12]
 8006768:	88fa      	ldrh	r2, [r7, #6]
 800676a:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	88fa      	ldrh	r2, [r7, #6]
 8006770:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006772:	68fb      	ldr	r3, [r7, #12]
 8006774:	2200      	movs	r2, #0
 8006776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006778:	68fb      	ldr	r3, [r7, #12]
 800677a:	2222      	movs	r2, #34	; 0x22
 800677c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006780:	68fb      	ldr	r3, [r7, #12]
 8006782:	2200      	movs	r2, #0
 8006784:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006788:	68fb      	ldr	r3, [r7, #12]
 800678a:	691b      	ldr	r3, [r3, #16]
 800678c:	2b00      	cmp	r3, #0
 800678e:	d007      	beq.n	80067a0 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006790:	68fb      	ldr	r3, [r7, #12]
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	68da      	ldr	r2, [r3, #12]
 8006796:	68fb      	ldr	r3, [r7, #12]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800679e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80067a0:	68fb      	ldr	r3, [r7, #12]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	695a      	ldr	r2, [r3, #20]
 80067a6:	68fb      	ldr	r3, [r7, #12]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	f042 0201 	orr.w	r2, r2, #1
 80067ae:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80067b0:	68fb      	ldr	r3, [r7, #12]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	68da      	ldr	r2, [r3, #12]
 80067b6:	68fb      	ldr	r3, [r7, #12]
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f042 0220 	orr.w	r2, r2, #32
 80067be:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80067c0:	2300      	movs	r3, #0
}
 80067c2:	4618      	mov	r0, r3
 80067c4:	3714      	adds	r7, #20
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
	...

080067d0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80067d0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80067d4:	b0c0      	sub	sp, #256	; 0x100
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80067dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067e0:	681b      	ldr	r3, [r3, #0]
 80067e2:	691b      	ldr	r3, [r3, #16]
 80067e4:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80067e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067ec:	68d9      	ldr	r1, [r3, #12]
 80067ee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067f2:	681a      	ldr	r2, [r3, #0]
 80067f4:	ea40 0301 	orr.w	r3, r0, r1
 80067f8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80067fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80067fe:	689a      	ldr	r2, [r3, #8]
 8006800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006804:	691b      	ldr	r3, [r3, #16]
 8006806:	431a      	orrs	r2, r3
 8006808:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800680c:	695b      	ldr	r3, [r3, #20]
 800680e:	431a      	orrs	r2, r3
 8006810:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006814:	69db      	ldr	r3, [r3, #28]
 8006816:	4313      	orrs	r3, r2
 8006818:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800681c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006820:	681b      	ldr	r3, [r3, #0]
 8006822:	68db      	ldr	r3, [r3, #12]
 8006824:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006828:	f021 010c 	bic.w	r1, r1, #12
 800682c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006830:	681a      	ldr	r2, [r3, #0]
 8006832:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8006836:	430b      	orrs	r3, r1
 8006838:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800683a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800683e:	681b      	ldr	r3, [r3, #0]
 8006840:	695b      	ldr	r3, [r3, #20]
 8006842:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006846:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800684a:	6999      	ldr	r1, [r3, #24]
 800684c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006850:	681a      	ldr	r2, [r3, #0]
 8006852:	ea40 0301 	orr.w	r3, r0, r1
 8006856:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800685c:	681a      	ldr	r2, [r3, #0]
 800685e:	4b8f      	ldr	r3, [pc, #572]	; (8006a9c <UART_SetConfig+0x2cc>)
 8006860:	429a      	cmp	r2, r3
 8006862:	d005      	beq.n	8006870 <UART_SetConfig+0xa0>
 8006864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006868:	681a      	ldr	r2, [r3, #0]
 800686a:	4b8d      	ldr	r3, [pc, #564]	; (8006aa0 <UART_SetConfig+0x2d0>)
 800686c:	429a      	cmp	r2, r3
 800686e:	d104      	bne.n	800687a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006870:	f7fe f854 	bl	800491c <HAL_RCC_GetPCLK2Freq>
 8006874:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8006878:	e003      	b.n	8006882 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800687a:	f7fe f83b 	bl	80048f4 <HAL_RCC_GetPCLK1Freq>
 800687e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006882:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006886:	69db      	ldr	r3, [r3, #28]
 8006888:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800688c:	f040 810c 	bne.w	8006aa8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006890:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006894:	2200      	movs	r2, #0
 8006896:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800689a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800689e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80068a2:	4622      	mov	r2, r4
 80068a4:	462b      	mov	r3, r5
 80068a6:	1891      	adds	r1, r2, r2
 80068a8:	65b9      	str	r1, [r7, #88]	; 0x58
 80068aa:	415b      	adcs	r3, r3
 80068ac:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068ae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068b2:	4621      	mov	r1, r4
 80068b4:	eb12 0801 	adds.w	r8, r2, r1
 80068b8:	4629      	mov	r1, r5
 80068ba:	eb43 0901 	adc.w	r9, r3, r1
 80068be:	f04f 0200 	mov.w	r2, #0
 80068c2:	f04f 0300 	mov.w	r3, #0
 80068c6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80068ca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80068ce:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80068d2:	4690      	mov	r8, r2
 80068d4:	4699      	mov	r9, r3
 80068d6:	4623      	mov	r3, r4
 80068d8:	eb18 0303 	adds.w	r3, r8, r3
 80068dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80068e0:	462b      	mov	r3, r5
 80068e2:	eb49 0303 	adc.w	r3, r9, r3
 80068e6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80068ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80068ee:	685b      	ldr	r3, [r3, #4]
 80068f0:	2200      	movs	r2, #0
 80068f2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80068f6:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80068fa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80068fe:	460b      	mov	r3, r1
 8006900:	18db      	adds	r3, r3, r3
 8006902:	653b      	str	r3, [r7, #80]	; 0x50
 8006904:	4613      	mov	r3, r2
 8006906:	eb42 0303 	adc.w	r3, r2, r3
 800690a:	657b      	str	r3, [r7, #84]	; 0x54
 800690c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8006910:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8006914:	f7f9 fc66 	bl	80001e4 <__aeabi_uldivmod>
 8006918:	4602      	mov	r2, r0
 800691a:	460b      	mov	r3, r1
 800691c:	4b61      	ldr	r3, [pc, #388]	; (8006aa4 <UART_SetConfig+0x2d4>)
 800691e:	fba3 2302 	umull	r2, r3, r3, r2
 8006922:	095b      	lsrs	r3, r3, #5
 8006924:	011c      	lsls	r4, r3, #4
 8006926:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800692a:	2200      	movs	r2, #0
 800692c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006930:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8006934:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8006938:	4642      	mov	r2, r8
 800693a:	464b      	mov	r3, r9
 800693c:	1891      	adds	r1, r2, r2
 800693e:	64b9      	str	r1, [r7, #72]	; 0x48
 8006940:	415b      	adcs	r3, r3
 8006942:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006944:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8006948:	4641      	mov	r1, r8
 800694a:	eb12 0a01 	adds.w	sl, r2, r1
 800694e:	4649      	mov	r1, r9
 8006950:	eb43 0b01 	adc.w	fp, r3, r1
 8006954:	f04f 0200 	mov.w	r2, #0
 8006958:	f04f 0300 	mov.w	r3, #0
 800695c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006960:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006964:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006968:	4692      	mov	sl, r2
 800696a:	469b      	mov	fp, r3
 800696c:	4643      	mov	r3, r8
 800696e:	eb1a 0303 	adds.w	r3, sl, r3
 8006972:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006976:	464b      	mov	r3, r9
 8006978:	eb4b 0303 	adc.w	r3, fp, r3
 800697c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8006980:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006984:	685b      	ldr	r3, [r3, #4]
 8006986:	2200      	movs	r2, #0
 8006988:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800698c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8006990:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8006994:	460b      	mov	r3, r1
 8006996:	18db      	adds	r3, r3, r3
 8006998:	643b      	str	r3, [r7, #64]	; 0x40
 800699a:	4613      	mov	r3, r2
 800699c:	eb42 0303 	adc.w	r3, r2, r3
 80069a0:	647b      	str	r3, [r7, #68]	; 0x44
 80069a2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069a6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80069aa:	f7f9 fc1b 	bl	80001e4 <__aeabi_uldivmod>
 80069ae:	4602      	mov	r2, r0
 80069b0:	460b      	mov	r3, r1
 80069b2:	4611      	mov	r1, r2
 80069b4:	4b3b      	ldr	r3, [pc, #236]	; (8006aa4 <UART_SetConfig+0x2d4>)
 80069b6:	fba3 2301 	umull	r2, r3, r3, r1
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2264      	movs	r2, #100	; 0x64
 80069be:	fb02 f303 	mul.w	r3, r2, r3
 80069c2:	1acb      	subs	r3, r1, r3
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80069ca:	4b36      	ldr	r3, [pc, #216]	; (8006aa4 <UART_SetConfig+0x2d4>)
 80069cc:	fba3 2302 	umull	r2, r3, r3, r2
 80069d0:	095b      	lsrs	r3, r3, #5
 80069d2:	005b      	lsls	r3, r3, #1
 80069d4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069d8:	441c      	add	r4, r3
 80069da:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80069de:	2200      	movs	r2, #0
 80069e0:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069e4:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80069e8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80069ec:	4642      	mov	r2, r8
 80069ee:	464b      	mov	r3, r9
 80069f0:	1891      	adds	r1, r2, r2
 80069f2:	63b9      	str	r1, [r7, #56]	; 0x38
 80069f4:	415b      	adcs	r3, r3
 80069f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069f8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069fc:	4641      	mov	r1, r8
 80069fe:	1851      	adds	r1, r2, r1
 8006a00:	6339      	str	r1, [r7, #48]	; 0x30
 8006a02:	4649      	mov	r1, r9
 8006a04:	414b      	adcs	r3, r1
 8006a06:	637b      	str	r3, [r7, #52]	; 0x34
 8006a08:	f04f 0200 	mov.w	r2, #0
 8006a0c:	f04f 0300 	mov.w	r3, #0
 8006a10:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8006a14:	4659      	mov	r1, fp
 8006a16:	00cb      	lsls	r3, r1, #3
 8006a18:	4651      	mov	r1, sl
 8006a1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006a1e:	4651      	mov	r1, sl
 8006a20:	00ca      	lsls	r2, r1, #3
 8006a22:	4610      	mov	r0, r2
 8006a24:	4619      	mov	r1, r3
 8006a26:	4603      	mov	r3, r0
 8006a28:	4642      	mov	r2, r8
 8006a2a:	189b      	adds	r3, r3, r2
 8006a2c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a30:	464b      	mov	r3, r9
 8006a32:	460a      	mov	r2, r1
 8006a34:	eb42 0303 	adc.w	r3, r2, r3
 8006a38:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a40:	685b      	ldr	r3, [r3, #4]
 8006a42:	2200      	movs	r2, #0
 8006a44:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8006a48:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8006a4c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8006a50:	460b      	mov	r3, r1
 8006a52:	18db      	adds	r3, r3, r3
 8006a54:	62bb      	str	r3, [r7, #40]	; 0x28
 8006a56:	4613      	mov	r3, r2
 8006a58:	eb42 0303 	adc.w	r3, r2, r3
 8006a5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006a5e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006a62:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a66:	f7f9 fbbd 	bl	80001e4 <__aeabi_uldivmod>
 8006a6a:	4602      	mov	r2, r0
 8006a6c:	460b      	mov	r3, r1
 8006a6e:	4b0d      	ldr	r3, [pc, #52]	; (8006aa4 <UART_SetConfig+0x2d4>)
 8006a70:	fba3 1302 	umull	r1, r3, r3, r2
 8006a74:	095b      	lsrs	r3, r3, #5
 8006a76:	2164      	movs	r1, #100	; 0x64
 8006a78:	fb01 f303 	mul.w	r3, r1, r3
 8006a7c:	1ad3      	subs	r3, r2, r3
 8006a7e:	00db      	lsls	r3, r3, #3
 8006a80:	3332      	adds	r3, #50	; 0x32
 8006a82:	4a08      	ldr	r2, [pc, #32]	; (8006aa4 <UART_SetConfig+0x2d4>)
 8006a84:	fba2 2303 	umull	r2, r3, r2, r3
 8006a88:	095b      	lsrs	r3, r3, #5
 8006a8a:	f003 0207 	and.w	r2, r3, #7
 8006a8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006a92:	681b      	ldr	r3, [r3, #0]
 8006a94:	4422      	add	r2, r4
 8006a96:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006a98:	e105      	b.n	8006ca6 <UART_SetConfig+0x4d6>
 8006a9a:	bf00      	nop
 8006a9c:	40011000 	.word	0x40011000
 8006aa0:	40011400 	.word	0x40011400
 8006aa4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006aa8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006aac:	2200      	movs	r2, #0
 8006aae:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8006ab2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8006ab6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8006aba:	4642      	mov	r2, r8
 8006abc:	464b      	mov	r3, r9
 8006abe:	1891      	adds	r1, r2, r2
 8006ac0:	6239      	str	r1, [r7, #32]
 8006ac2:	415b      	adcs	r3, r3
 8006ac4:	627b      	str	r3, [r7, #36]	; 0x24
 8006ac6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006aca:	4641      	mov	r1, r8
 8006acc:	1854      	adds	r4, r2, r1
 8006ace:	4649      	mov	r1, r9
 8006ad0:	eb43 0501 	adc.w	r5, r3, r1
 8006ad4:	f04f 0200 	mov.w	r2, #0
 8006ad8:	f04f 0300 	mov.w	r3, #0
 8006adc:	00eb      	lsls	r3, r5, #3
 8006ade:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006ae2:	00e2      	lsls	r2, r4, #3
 8006ae4:	4614      	mov	r4, r2
 8006ae6:	461d      	mov	r5, r3
 8006ae8:	4643      	mov	r3, r8
 8006aea:	18e3      	adds	r3, r4, r3
 8006aec:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8006af0:	464b      	mov	r3, r9
 8006af2:	eb45 0303 	adc.w	r3, r5, r3
 8006af6:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006afa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006afe:	685b      	ldr	r3, [r3, #4]
 8006b00:	2200      	movs	r2, #0
 8006b02:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8006b06:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006b0a:	f04f 0200 	mov.w	r2, #0
 8006b0e:	f04f 0300 	mov.w	r3, #0
 8006b12:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8006b16:	4629      	mov	r1, r5
 8006b18:	008b      	lsls	r3, r1, #2
 8006b1a:	4621      	mov	r1, r4
 8006b1c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006b20:	4621      	mov	r1, r4
 8006b22:	008a      	lsls	r2, r1, #2
 8006b24:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006b28:	f7f9 fb5c 	bl	80001e4 <__aeabi_uldivmod>
 8006b2c:	4602      	mov	r2, r0
 8006b2e:	460b      	mov	r3, r1
 8006b30:	4b60      	ldr	r3, [pc, #384]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006b32:	fba3 2302 	umull	r2, r3, r3, r2
 8006b36:	095b      	lsrs	r3, r3, #5
 8006b38:	011c      	lsls	r4, r3, #4
 8006b3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006b3e:	2200      	movs	r2, #0
 8006b40:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8006b44:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8006b48:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8006b4c:	4642      	mov	r2, r8
 8006b4e:	464b      	mov	r3, r9
 8006b50:	1891      	adds	r1, r2, r2
 8006b52:	61b9      	str	r1, [r7, #24]
 8006b54:	415b      	adcs	r3, r3
 8006b56:	61fb      	str	r3, [r7, #28]
 8006b58:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006b5c:	4641      	mov	r1, r8
 8006b5e:	1851      	adds	r1, r2, r1
 8006b60:	6139      	str	r1, [r7, #16]
 8006b62:	4649      	mov	r1, r9
 8006b64:	414b      	adcs	r3, r1
 8006b66:	617b      	str	r3, [r7, #20]
 8006b68:	f04f 0200 	mov.w	r2, #0
 8006b6c:	f04f 0300 	mov.w	r3, #0
 8006b70:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006b74:	4659      	mov	r1, fp
 8006b76:	00cb      	lsls	r3, r1, #3
 8006b78:	4651      	mov	r1, sl
 8006b7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b7e:	4651      	mov	r1, sl
 8006b80:	00ca      	lsls	r2, r1, #3
 8006b82:	4610      	mov	r0, r2
 8006b84:	4619      	mov	r1, r3
 8006b86:	4603      	mov	r3, r0
 8006b88:	4642      	mov	r2, r8
 8006b8a:	189b      	adds	r3, r3, r2
 8006b8c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8006b90:	464b      	mov	r3, r9
 8006b92:	460a      	mov	r2, r1
 8006b94:	eb42 0303 	adc.w	r3, r2, r3
 8006b98:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8006b9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ba0:	685b      	ldr	r3, [r3, #4]
 8006ba2:	2200      	movs	r2, #0
 8006ba4:	67bb      	str	r3, [r7, #120]	; 0x78
 8006ba6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8006ba8:	f04f 0200 	mov.w	r2, #0
 8006bac:	f04f 0300 	mov.w	r3, #0
 8006bb0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8006bb4:	4649      	mov	r1, r9
 8006bb6:	008b      	lsls	r3, r1, #2
 8006bb8:	4641      	mov	r1, r8
 8006bba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006bbe:	4641      	mov	r1, r8
 8006bc0:	008a      	lsls	r2, r1, #2
 8006bc2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8006bc6:	f7f9 fb0d 	bl	80001e4 <__aeabi_uldivmod>
 8006bca:	4602      	mov	r2, r0
 8006bcc:	460b      	mov	r3, r1
 8006bce:	4b39      	ldr	r3, [pc, #228]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006bd0:	fba3 1302 	umull	r1, r3, r3, r2
 8006bd4:	095b      	lsrs	r3, r3, #5
 8006bd6:	2164      	movs	r1, #100	; 0x64
 8006bd8:	fb01 f303 	mul.w	r3, r1, r3
 8006bdc:	1ad3      	subs	r3, r2, r3
 8006bde:	011b      	lsls	r3, r3, #4
 8006be0:	3332      	adds	r3, #50	; 0x32
 8006be2:	4a34      	ldr	r2, [pc, #208]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006be4:	fba2 2303 	umull	r2, r3, r2, r3
 8006be8:	095b      	lsrs	r3, r3, #5
 8006bea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006bee:	441c      	add	r4, r3
 8006bf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8006bf4:	2200      	movs	r2, #0
 8006bf6:	673b      	str	r3, [r7, #112]	; 0x70
 8006bf8:	677a      	str	r2, [r7, #116]	; 0x74
 8006bfa:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8006bfe:	4642      	mov	r2, r8
 8006c00:	464b      	mov	r3, r9
 8006c02:	1891      	adds	r1, r2, r2
 8006c04:	60b9      	str	r1, [r7, #8]
 8006c06:	415b      	adcs	r3, r3
 8006c08:	60fb      	str	r3, [r7, #12]
 8006c0a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006c0e:	4641      	mov	r1, r8
 8006c10:	1851      	adds	r1, r2, r1
 8006c12:	6039      	str	r1, [r7, #0]
 8006c14:	4649      	mov	r1, r9
 8006c16:	414b      	adcs	r3, r1
 8006c18:	607b      	str	r3, [r7, #4]
 8006c1a:	f04f 0200 	mov.w	r2, #0
 8006c1e:	f04f 0300 	mov.w	r3, #0
 8006c22:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006c26:	4659      	mov	r1, fp
 8006c28:	00cb      	lsls	r3, r1, #3
 8006c2a:	4651      	mov	r1, sl
 8006c2c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c30:	4651      	mov	r1, sl
 8006c32:	00ca      	lsls	r2, r1, #3
 8006c34:	4610      	mov	r0, r2
 8006c36:	4619      	mov	r1, r3
 8006c38:	4603      	mov	r3, r0
 8006c3a:	4642      	mov	r2, r8
 8006c3c:	189b      	adds	r3, r3, r2
 8006c3e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006c40:	464b      	mov	r3, r9
 8006c42:	460a      	mov	r2, r1
 8006c44:	eb42 0303 	adc.w	r3, r2, r3
 8006c48:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006c4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006c4e:	685b      	ldr	r3, [r3, #4]
 8006c50:	2200      	movs	r2, #0
 8006c52:	663b      	str	r3, [r7, #96]	; 0x60
 8006c54:	667a      	str	r2, [r7, #100]	; 0x64
 8006c56:	f04f 0200 	mov.w	r2, #0
 8006c5a:	f04f 0300 	mov.w	r3, #0
 8006c5e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8006c62:	4649      	mov	r1, r9
 8006c64:	008b      	lsls	r3, r1, #2
 8006c66:	4641      	mov	r1, r8
 8006c68:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c6c:	4641      	mov	r1, r8
 8006c6e:	008a      	lsls	r2, r1, #2
 8006c70:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8006c74:	f7f9 fab6 	bl	80001e4 <__aeabi_uldivmod>
 8006c78:	4602      	mov	r2, r0
 8006c7a:	460b      	mov	r3, r1
 8006c7c:	4b0d      	ldr	r3, [pc, #52]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006c7e:	fba3 1302 	umull	r1, r3, r3, r2
 8006c82:	095b      	lsrs	r3, r3, #5
 8006c84:	2164      	movs	r1, #100	; 0x64
 8006c86:	fb01 f303 	mul.w	r3, r1, r3
 8006c8a:	1ad3      	subs	r3, r2, r3
 8006c8c:	011b      	lsls	r3, r3, #4
 8006c8e:	3332      	adds	r3, #50	; 0x32
 8006c90:	4a08      	ldr	r2, [pc, #32]	; (8006cb4 <UART_SetConfig+0x4e4>)
 8006c92:	fba2 2303 	umull	r2, r3, r2, r3
 8006c96:	095b      	lsrs	r3, r3, #5
 8006c98:	f003 020f 	and.w	r2, r3, #15
 8006c9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	4422      	add	r2, r4
 8006ca4:	609a      	str	r2, [r3, #8]
}
 8006ca6:	bf00      	nop
 8006ca8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8006cac:	46bd      	mov	sp, r7
 8006cae:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006cb2:	bf00      	nop
 8006cb4:	51eb851f 	.word	0x51eb851f

08006cb8 <__libc_init_array>:
 8006cb8:	b570      	push	{r4, r5, r6, lr}
 8006cba:	4d0d      	ldr	r5, [pc, #52]	; (8006cf0 <__libc_init_array+0x38>)
 8006cbc:	4c0d      	ldr	r4, [pc, #52]	; (8006cf4 <__libc_init_array+0x3c>)
 8006cbe:	1b64      	subs	r4, r4, r5
 8006cc0:	10a4      	asrs	r4, r4, #2
 8006cc2:	2600      	movs	r6, #0
 8006cc4:	42a6      	cmp	r6, r4
 8006cc6:	d109      	bne.n	8006cdc <__libc_init_array+0x24>
 8006cc8:	4d0b      	ldr	r5, [pc, #44]	; (8006cf8 <__libc_init_array+0x40>)
 8006cca:	4c0c      	ldr	r4, [pc, #48]	; (8006cfc <__libc_init_array+0x44>)
 8006ccc:	f000 f894 	bl	8006df8 <_init>
 8006cd0:	1b64      	subs	r4, r4, r5
 8006cd2:	10a4      	asrs	r4, r4, #2
 8006cd4:	2600      	movs	r6, #0
 8006cd6:	42a6      	cmp	r6, r4
 8006cd8:	d105      	bne.n	8006ce6 <__libc_init_array+0x2e>
 8006cda:	bd70      	pop	{r4, r5, r6, pc}
 8006cdc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006ce0:	4798      	blx	r3
 8006ce2:	3601      	adds	r6, #1
 8006ce4:	e7ee      	b.n	8006cc4 <__libc_init_array+0xc>
 8006ce6:	f855 3b04 	ldr.w	r3, [r5], #4
 8006cea:	4798      	blx	r3
 8006cec:	3601      	adds	r6, #1
 8006cee:	e7f2      	b.n	8006cd6 <__libc_init_array+0x1e>
 8006cf0:	08006ef4 	.word	0x08006ef4
 8006cf4:	08006ef4 	.word	0x08006ef4
 8006cf8:	08006ef4 	.word	0x08006ef4
 8006cfc:	08006ef8 	.word	0x08006ef8

08006d00 <__itoa>:
 8006d00:	1e93      	subs	r3, r2, #2
 8006d02:	2b22      	cmp	r3, #34	; 0x22
 8006d04:	b510      	push	{r4, lr}
 8006d06:	460c      	mov	r4, r1
 8006d08:	d904      	bls.n	8006d14 <__itoa+0x14>
 8006d0a:	2300      	movs	r3, #0
 8006d0c:	700b      	strb	r3, [r1, #0]
 8006d0e:	461c      	mov	r4, r3
 8006d10:	4620      	mov	r0, r4
 8006d12:	bd10      	pop	{r4, pc}
 8006d14:	2a0a      	cmp	r2, #10
 8006d16:	d109      	bne.n	8006d2c <__itoa+0x2c>
 8006d18:	2800      	cmp	r0, #0
 8006d1a:	da07      	bge.n	8006d2c <__itoa+0x2c>
 8006d1c:	232d      	movs	r3, #45	; 0x2d
 8006d1e:	700b      	strb	r3, [r1, #0]
 8006d20:	4240      	negs	r0, r0
 8006d22:	2101      	movs	r1, #1
 8006d24:	4421      	add	r1, r4
 8006d26:	f000 f825 	bl	8006d74 <__utoa>
 8006d2a:	e7f1      	b.n	8006d10 <__itoa+0x10>
 8006d2c:	2100      	movs	r1, #0
 8006d2e:	e7f9      	b.n	8006d24 <__itoa+0x24>

08006d30 <itoa>:
 8006d30:	f7ff bfe6 	b.w	8006d00 <__itoa>

08006d34 <memset>:
 8006d34:	4402      	add	r2, r0
 8006d36:	4603      	mov	r3, r0
 8006d38:	4293      	cmp	r3, r2
 8006d3a:	d100      	bne.n	8006d3e <memset+0xa>
 8006d3c:	4770      	bx	lr
 8006d3e:	f803 1b01 	strb.w	r1, [r3], #1
 8006d42:	e7f9      	b.n	8006d38 <memset+0x4>

08006d44 <strcat>:
 8006d44:	b510      	push	{r4, lr}
 8006d46:	4602      	mov	r2, r0
 8006d48:	7814      	ldrb	r4, [r2, #0]
 8006d4a:	4613      	mov	r3, r2
 8006d4c:	3201      	adds	r2, #1
 8006d4e:	2c00      	cmp	r4, #0
 8006d50:	d1fa      	bne.n	8006d48 <strcat+0x4>
 8006d52:	3b01      	subs	r3, #1
 8006d54:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d58:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006d5c:	2a00      	cmp	r2, #0
 8006d5e:	d1f9      	bne.n	8006d54 <strcat+0x10>
 8006d60:	bd10      	pop	{r4, pc}

08006d62 <strcpy>:
 8006d62:	4603      	mov	r3, r0
 8006d64:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006d68:	f803 2b01 	strb.w	r2, [r3], #1
 8006d6c:	2a00      	cmp	r2, #0
 8006d6e:	d1f9      	bne.n	8006d64 <strcpy+0x2>
 8006d70:	4770      	bx	lr
	...

08006d74 <__utoa>:
 8006d74:	b5f0      	push	{r4, r5, r6, r7, lr}
 8006d76:	4c1f      	ldr	r4, [pc, #124]	; (8006df4 <__utoa+0x80>)
 8006d78:	b08b      	sub	sp, #44	; 0x2c
 8006d7a:	4605      	mov	r5, r0
 8006d7c:	460b      	mov	r3, r1
 8006d7e:	466e      	mov	r6, sp
 8006d80:	f104 0c20 	add.w	ip, r4, #32
 8006d84:	6820      	ldr	r0, [r4, #0]
 8006d86:	6861      	ldr	r1, [r4, #4]
 8006d88:	4637      	mov	r7, r6
 8006d8a:	c703      	stmia	r7!, {r0, r1}
 8006d8c:	3408      	adds	r4, #8
 8006d8e:	4564      	cmp	r4, ip
 8006d90:	463e      	mov	r6, r7
 8006d92:	d1f7      	bne.n	8006d84 <__utoa+0x10>
 8006d94:	7921      	ldrb	r1, [r4, #4]
 8006d96:	7139      	strb	r1, [r7, #4]
 8006d98:	1e91      	subs	r1, r2, #2
 8006d9a:	6820      	ldr	r0, [r4, #0]
 8006d9c:	6038      	str	r0, [r7, #0]
 8006d9e:	2922      	cmp	r1, #34	; 0x22
 8006da0:	f04f 0100 	mov.w	r1, #0
 8006da4:	d904      	bls.n	8006db0 <__utoa+0x3c>
 8006da6:	7019      	strb	r1, [r3, #0]
 8006da8:	460b      	mov	r3, r1
 8006daa:	4618      	mov	r0, r3
 8006dac:	b00b      	add	sp, #44	; 0x2c
 8006dae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006db0:	1e58      	subs	r0, r3, #1
 8006db2:	4684      	mov	ip, r0
 8006db4:	fbb5 f7f2 	udiv	r7, r5, r2
 8006db8:	fb02 5617 	mls	r6, r2, r7, r5
 8006dbc:	3628      	adds	r6, #40	; 0x28
 8006dbe:	446e      	add	r6, sp
 8006dc0:	460c      	mov	r4, r1
 8006dc2:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8006dc6:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8006dca:	462e      	mov	r6, r5
 8006dcc:	42b2      	cmp	r2, r6
 8006dce:	f101 0101 	add.w	r1, r1, #1
 8006dd2:	463d      	mov	r5, r7
 8006dd4:	d9ee      	bls.n	8006db4 <__utoa+0x40>
 8006dd6:	2200      	movs	r2, #0
 8006dd8:	545a      	strb	r2, [r3, r1]
 8006dda:	1919      	adds	r1, r3, r4
 8006ddc:	1aa5      	subs	r5, r4, r2
 8006dde:	42aa      	cmp	r2, r5
 8006de0:	dae3      	bge.n	8006daa <__utoa+0x36>
 8006de2:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8006de6:	780e      	ldrb	r6, [r1, #0]
 8006de8:	7006      	strb	r6, [r0, #0]
 8006dea:	3201      	adds	r2, #1
 8006dec:	f801 5901 	strb.w	r5, [r1], #-1
 8006df0:	e7f4      	b.n	8006ddc <__utoa+0x68>
 8006df2:	bf00      	nop
 8006df4:	08006ec4 	.word	0x08006ec4

08006df8 <_init>:
 8006df8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006dfa:	bf00      	nop
 8006dfc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006dfe:	bc08      	pop	{r3}
 8006e00:	469e      	mov	lr, r3
 8006e02:	4770      	bx	lr

08006e04 <_fini>:
 8006e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006e06:	bf00      	nop
 8006e08:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006e0a:	bc08      	pop	{r3}
 8006e0c:	469e      	mov	lr, r3
 8006e0e:	4770      	bx	lr
