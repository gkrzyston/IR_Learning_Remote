
IRLM.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000077b8  08000194  08000194  00010194  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000000f4  0800794c  0800794c  0001794c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007a40  08007a40  00021450  2**0
                  CONTENTS
  4 .ARM          00000008  08007a40  08007a40  00017a40  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007a48  08007a48  00021450  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007a48  08007a48  00017a48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007a4c  08007a4c  00017a4c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00001450  20000000  08007a50  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0001496c  20001450  08008ea0  00021450  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20015dbc  08008ea0  00025dbc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00021450  2**0
                  CONTENTS, READONLY
 12 .debug_info   000161aa  00000000  00000000  00021480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002bb1  00000000  00000000  0003762a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001348  00000000  00000000  0003a1e0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00001268  00000000  00000000  0003b528  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ae6  00000000  00000000  0003c790  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001721f  00000000  00000000  00055276  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009ce67  00000000  00000000  0006c495  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000050  00000000  00000000  001092fc  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005380  00000000  00000000  0010934c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000194 <__do_global_dtors_aux>:
 8000194:	b510      	push	{r4, lr}
 8000196:	4c05      	ldr	r4, [pc, #20]	; (80001ac <__do_global_dtors_aux+0x18>)
 8000198:	7823      	ldrb	r3, [r4, #0]
 800019a:	b933      	cbnz	r3, 80001aa <__do_global_dtors_aux+0x16>
 800019c:	4b04      	ldr	r3, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x1c>)
 800019e:	b113      	cbz	r3, 80001a6 <__do_global_dtors_aux+0x12>
 80001a0:	4804      	ldr	r0, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x20>)
 80001a2:	f3af 8000 	nop.w
 80001a6:	2301      	movs	r3, #1
 80001a8:	7023      	strb	r3, [r4, #0]
 80001aa:	bd10      	pop	{r4, pc}
 80001ac:	20001450 	.word	0x20001450
 80001b0:	00000000 	.word	0x00000000
 80001b4:	08007934 	.word	0x08007934

080001b8 <frame_dummy>:
 80001b8:	b508      	push	{r3, lr}
 80001ba:	4b03      	ldr	r3, [pc, #12]	; (80001c8 <frame_dummy+0x10>)
 80001bc:	b11b      	cbz	r3, 80001c6 <frame_dummy+0xe>
 80001be:	4903      	ldr	r1, [pc, #12]	; (80001cc <frame_dummy+0x14>)
 80001c0:	4803      	ldr	r0, [pc, #12]	; (80001d0 <frame_dummy+0x18>)
 80001c2:	f3af 8000 	nop.w
 80001c6:	bd08      	pop	{r3, pc}
 80001c8:	00000000 	.word	0x00000000
 80001cc:	20001454 	.word	0x20001454
 80001d0:	08007934 	.word	0x08007934

080001d4 <strlen>:
 80001d4:	4603      	mov	r3, r0
 80001d6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001da:	2a00      	cmp	r2, #0
 80001dc:	d1fb      	bne.n	80001d6 <strlen+0x2>
 80001de:	1a18      	subs	r0, r3, r0
 80001e0:	3801      	subs	r0, #1
 80001e2:	4770      	bx	lr

080001e4 <__aeabi_uldivmod>:
 80001e4:	b953      	cbnz	r3, 80001fc <__aeabi_uldivmod+0x18>
 80001e6:	b94a      	cbnz	r2, 80001fc <__aeabi_uldivmod+0x18>
 80001e8:	2900      	cmp	r1, #0
 80001ea:	bf08      	it	eq
 80001ec:	2800      	cmpeq	r0, #0
 80001ee:	bf1c      	itt	ne
 80001f0:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 80001f4:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 80001f8:	f000 b974 	b.w	80004e4 <__aeabi_idiv0>
 80001fc:	f1ad 0c08 	sub.w	ip, sp, #8
 8000200:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000204:	f000 f806 	bl	8000214 <__udivmoddi4>
 8000208:	f8dd e004 	ldr.w	lr, [sp, #4]
 800020c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000210:	b004      	add	sp, #16
 8000212:	4770      	bx	lr

08000214 <__udivmoddi4>:
 8000214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000218:	9d08      	ldr	r5, [sp, #32]
 800021a:	4604      	mov	r4, r0
 800021c:	468e      	mov	lr, r1
 800021e:	2b00      	cmp	r3, #0
 8000220:	d14d      	bne.n	80002be <__udivmoddi4+0xaa>
 8000222:	428a      	cmp	r2, r1
 8000224:	4694      	mov	ip, r2
 8000226:	d969      	bls.n	80002fc <__udivmoddi4+0xe8>
 8000228:	fab2 f282 	clz	r2, r2
 800022c:	b152      	cbz	r2, 8000244 <__udivmoddi4+0x30>
 800022e:	fa01 f302 	lsl.w	r3, r1, r2
 8000232:	f1c2 0120 	rsb	r1, r2, #32
 8000236:	fa20 f101 	lsr.w	r1, r0, r1
 800023a:	fa0c fc02 	lsl.w	ip, ip, r2
 800023e:	ea41 0e03 	orr.w	lr, r1, r3
 8000242:	4094      	lsls	r4, r2
 8000244:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000248:	0c21      	lsrs	r1, r4, #16
 800024a:	fbbe f6f8 	udiv	r6, lr, r8
 800024e:	fa1f f78c 	uxth.w	r7, ip
 8000252:	fb08 e316 	mls	r3, r8, r6, lr
 8000256:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800025a:	fb06 f107 	mul.w	r1, r6, r7
 800025e:	4299      	cmp	r1, r3
 8000260:	d90a      	bls.n	8000278 <__udivmoddi4+0x64>
 8000262:	eb1c 0303 	adds.w	r3, ip, r3
 8000266:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 800026a:	f080 811f 	bcs.w	80004ac <__udivmoddi4+0x298>
 800026e:	4299      	cmp	r1, r3
 8000270:	f240 811c 	bls.w	80004ac <__udivmoddi4+0x298>
 8000274:	3e02      	subs	r6, #2
 8000276:	4463      	add	r3, ip
 8000278:	1a5b      	subs	r3, r3, r1
 800027a:	b2a4      	uxth	r4, r4
 800027c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000280:	fb08 3310 	mls	r3, r8, r0, r3
 8000284:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000288:	fb00 f707 	mul.w	r7, r0, r7
 800028c:	42a7      	cmp	r7, r4
 800028e:	d90a      	bls.n	80002a6 <__udivmoddi4+0x92>
 8000290:	eb1c 0404 	adds.w	r4, ip, r4
 8000294:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000298:	f080 810a 	bcs.w	80004b0 <__udivmoddi4+0x29c>
 800029c:	42a7      	cmp	r7, r4
 800029e:	f240 8107 	bls.w	80004b0 <__udivmoddi4+0x29c>
 80002a2:	4464      	add	r4, ip
 80002a4:	3802      	subs	r0, #2
 80002a6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002aa:	1be4      	subs	r4, r4, r7
 80002ac:	2600      	movs	r6, #0
 80002ae:	b11d      	cbz	r5, 80002b8 <__udivmoddi4+0xa4>
 80002b0:	40d4      	lsrs	r4, r2
 80002b2:	2300      	movs	r3, #0
 80002b4:	e9c5 4300 	strd	r4, r3, [r5]
 80002b8:	4631      	mov	r1, r6
 80002ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002be:	428b      	cmp	r3, r1
 80002c0:	d909      	bls.n	80002d6 <__udivmoddi4+0xc2>
 80002c2:	2d00      	cmp	r5, #0
 80002c4:	f000 80ef 	beq.w	80004a6 <__udivmoddi4+0x292>
 80002c8:	2600      	movs	r6, #0
 80002ca:	e9c5 0100 	strd	r0, r1, [r5]
 80002ce:	4630      	mov	r0, r6
 80002d0:	4631      	mov	r1, r6
 80002d2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002d6:	fab3 f683 	clz	r6, r3
 80002da:	2e00      	cmp	r6, #0
 80002dc:	d14a      	bne.n	8000374 <__udivmoddi4+0x160>
 80002de:	428b      	cmp	r3, r1
 80002e0:	d302      	bcc.n	80002e8 <__udivmoddi4+0xd4>
 80002e2:	4282      	cmp	r2, r0
 80002e4:	f200 80f9 	bhi.w	80004da <__udivmoddi4+0x2c6>
 80002e8:	1a84      	subs	r4, r0, r2
 80002ea:	eb61 0303 	sbc.w	r3, r1, r3
 80002ee:	2001      	movs	r0, #1
 80002f0:	469e      	mov	lr, r3
 80002f2:	2d00      	cmp	r5, #0
 80002f4:	d0e0      	beq.n	80002b8 <__udivmoddi4+0xa4>
 80002f6:	e9c5 4e00 	strd	r4, lr, [r5]
 80002fa:	e7dd      	b.n	80002b8 <__udivmoddi4+0xa4>
 80002fc:	b902      	cbnz	r2, 8000300 <__udivmoddi4+0xec>
 80002fe:	deff      	udf	#255	; 0xff
 8000300:	fab2 f282 	clz	r2, r2
 8000304:	2a00      	cmp	r2, #0
 8000306:	f040 8092 	bne.w	800042e <__udivmoddi4+0x21a>
 800030a:	eba1 010c 	sub.w	r1, r1, ip
 800030e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000312:	fa1f fe8c 	uxth.w	lr, ip
 8000316:	2601      	movs	r6, #1
 8000318:	0c20      	lsrs	r0, r4, #16
 800031a:	fbb1 f3f7 	udiv	r3, r1, r7
 800031e:	fb07 1113 	mls	r1, r7, r3, r1
 8000322:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000326:	fb0e f003 	mul.w	r0, lr, r3
 800032a:	4288      	cmp	r0, r1
 800032c:	d908      	bls.n	8000340 <__udivmoddi4+0x12c>
 800032e:	eb1c 0101 	adds.w	r1, ip, r1
 8000332:	f103 38ff 	add.w	r8, r3, #4294967295	; 0xffffffff
 8000336:	d202      	bcs.n	800033e <__udivmoddi4+0x12a>
 8000338:	4288      	cmp	r0, r1
 800033a:	f200 80cb 	bhi.w	80004d4 <__udivmoddi4+0x2c0>
 800033e:	4643      	mov	r3, r8
 8000340:	1a09      	subs	r1, r1, r0
 8000342:	b2a4      	uxth	r4, r4
 8000344:	fbb1 f0f7 	udiv	r0, r1, r7
 8000348:	fb07 1110 	mls	r1, r7, r0, r1
 800034c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000350:	fb0e fe00 	mul.w	lr, lr, r0
 8000354:	45a6      	cmp	lr, r4
 8000356:	d908      	bls.n	800036a <__udivmoddi4+0x156>
 8000358:	eb1c 0404 	adds.w	r4, ip, r4
 800035c:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000360:	d202      	bcs.n	8000368 <__udivmoddi4+0x154>
 8000362:	45a6      	cmp	lr, r4
 8000364:	f200 80bb 	bhi.w	80004de <__udivmoddi4+0x2ca>
 8000368:	4608      	mov	r0, r1
 800036a:	eba4 040e 	sub.w	r4, r4, lr
 800036e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000372:	e79c      	b.n	80002ae <__udivmoddi4+0x9a>
 8000374:	f1c6 0720 	rsb	r7, r6, #32
 8000378:	40b3      	lsls	r3, r6
 800037a:	fa22 fc07 	lsr.w	ip, r2, r7
 800037e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000382:	fa20 f407 	lsr.w	r4, r0, r7
 8000386:	fa01 f306 	lsl.w	r3, r1, r6
 800038a:	431c      	orrs	r4, r3
 800038c:	40f9      	lsrs	r1, r7
 800038e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000392:	fa00 f306 	lsl.w	r3, r0, r6
 8000396:	fbb1 f8f9 	udiv	r8, r1, r9
 800039a:	0c20      	lsrs	r0, r4, #16
 800039c:	fa1f fe8c 	uxth.w	lr, ip
 80003a0:	fb09 1118 	mls	r1, r9, r8, r1
 80003a4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 80003a8:	fb08 f00e 	mul.w	r0, r8, lr
 80003ac:	4288      	cmp	r0, r1
 80003ae:	fa02 f206 	lsl.w	r2, r2, r6
 80003b2:	d90b      	bls.n	80003cc <__udivmoddi4+0x1b8>
 80003b4:	eb1c 0101 	adds.w	r1, ip, r1
 80003b8:	f108 3aff 	add.w	sl, r8, #4294967295	; 0xffffffff
 80003bc:	f080 8088 	bcs.w	80004d0 <__udivmoddi4+0x2bc>
 80003c0:	4288      	cmp	r0, r1
 80003c2:	f240 8085 	bls.w	80004d0 <__udivmoddi4+0x2bc>
 80003c6:	f1a8 0802 	sub.w	r8, r8, #2
 80003ca:	4461      	add	r1, ip
 80003cc:	1a09      	subs	r1, r1, r0
 80003ce:	b2a4      	uxth	r4, r4
 80003d0:	fbb1 f0f9 	udiv	r0, r1, r9
 80003d4:	fb09 1110 	mls	r1, r9, r0, r1
 80003d8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003dc:	fb00 fe0e 	mul.w	lr, r0, lr
 80003e0:	458e      	cmp	lr, r1
 80003e2:	d908      	bls.n	80003f6 <__udivmoddi4+0x1e2>
 80003e4:	eb1c 0101 	adds.w	r1, ip, r1
 80003e8:	f100 34ff 	add.w	r4, r0, #4294967295	; 0xffffffff
 80003ec:	d26c      	bcs.n	80004c8 <__udivmoddi4+0x2b4>
 80003ee:	458e      	cmp	lr, r1
 80003f0:	d96a      	bls.n	80004c8 <__udivmoddi4+0x2b4>
 80003f2:	3802      	subs	r0, #2
 80003f4:	4461      	add	r1, ip
 80003f6:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003fa:	fba0 9402 	umull	r9, r4, r0, r2
 80003fe:	eba1 010e 	sub.w	r1, r1, lr
 8000402:	42a1      	cmp	r1, r4
 8000404:	46c8      	mov	r8, r9
 8000406:	46a6      	mov	lr, r4
 8000408:	d356      	bcc.n	80004b8 <__udivmoddi4+0x2a4>
 800040a:	d053      	beq.n	80004b4 <__udivmoddi4+0x2a0>
 800040c:	b15d      	cbz	r5, 8000426 <__udivmoddi4+0x212>
 800040e:	ebb3 0208 	subs.w	r2, r3, r8
 8000412:	eb61 010e 	sbc.w	r1, r1, lr
 8000416:	fa01 f707 	lsl.w	r7, r1, r7
 800041a:	fa22 f306 	lsr.w	r3, r2, r6
 800041e:	40f1      	lsrs	r1, r6
 8000420:	431f      	orrs	r7, r3
 8000422:	e9c5 7100 	strd	r7, r1, [r5]
 8000426:	2600      	movs	r6, #0
 8000428:	4631      	mov	r1, r6
 800042a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800042e:	f1c2 0320 	rsb	r3, r2, #32
 8000432:	40d8      	lsrs	r0, r3
 8000434:	fa0c fc02 	lsl.w	ip, ip, r2
 8000438:	fa21 f303 	lsr.w	r3, r1, r3
 800043c:	4091      	lsls	r1, r2
 800043e:	4301      	orrs	r1, r0
 8000440:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000444:	fa1f fe8c 	uxth.w	lr, ip
 8000448:	fbb3 f0f7 	udiv	r0, r3, r7
 800044c:	fb07 3610 	mls	r6, r7, r0, r3
 8000450:	0c0b      	lsrs	r3, r1, #16
 8000452:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000456:	fb00 f60e 	mul.w	r6, r0, lr
 800045a:	429e      	cmp	r6, r3
 800045c:	fa04 f402 	lsl.w	r4, r4, r2
 8000460:	d908      	bls.n	8000474 <__udivmoddi4+0x260>
 8000462:	eb1c 0303 	adds.w	r3, ip, r3
 8000466:	f100 38ff 	add.w	r8, r0, #4294967295	; 0xffffffff
 800046a:	d22f      	bcs.n	80004cc <__udivmoddi4+0x2b8>
 800046c:	429e      	cmp	r6, r3
 800046e:	d92d      	bls.n	80004cc <__udivmoddi4+0x2b8>
 8000470:	3802      	subs	r0, #2
 8000472:	4463      	add	r3, ip
 8000474:	1b9b      	subs	r3, r3, r6
 8000476:	b289      	uxth	r1, r1
 8000478:	fbb3 f6f7 	udiv	r6, r3, r7
 800047c:	fb07 3316 	mls	r3, r7, r6, r3
 8000480:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000484:	fb06 f30e 	mul.w	r3, r6, lr
 8000488:	428b      	cmp	r3, r1
 800048a:	d908      	bls.n	800049e <__udivmoddi4+0x28a>
 800048c:	eb1c 0101 	adds.w	r1, ip, r1
 8000490:	f106 38ff 	add.w	r8, r6, #4294967295	; 0xffffffff
 8000494:	d216      	bcs.n	80004c4 <__udivmoddi4+0x2b0>
 8000496:	428b      	cmp	r3, r1
 8000498:	d914      	bls.n	80004c4 <__udivmoddi4+0x2b0>
 800049a:	3e02      	subs	r6, #2
 800049c:	4461      	add	r1, ip
 800049e:	1ac9      	subs	r1, r1, r3
 80004a0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 80004a4:	e738      	b.n	8000318 <__udivmoddi4+0x104>
 80004a6:	462e      	mov	r6, r5
 80004a8:	4628      	mov	r0, r5
 80004aa:	e705      	b.n	80002b8 <__udivmoddi4+0xa4>
 80004ac:	4606      	mov	r6, r0
 80004ae:	e6e3      	b.n	8000278 <__udivmoddi4+0x64>
 80004b0:	4618      	mov	r0, r3
 80004b2:	e6f8      	b.n	80002a6 <__udivmoddi4+0x92>
 80004b4:	454b      	cmp	r3, r9
 80004b6:	d2a9      	bcs.n	800040c <__udivmoddi4+0x1f8>
 80004b8:	ebb9 0802 	subs.w	r8, r9, r2
 80004bc:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004c0:	3801      	subs	r0, #1
 80004c2:	e7a3      	b.n	800040c <__udivmoddi4+0x1f8>
 80004c4:	4646      	mov	r6, r8
 80004c6:	e7ea      	b.n	800049e <__udivmoddi4+0x28a>
 80004c8:	4620      	mov	r0, r4
 80004ca:	e794      	b.n	80003f6 <__udivmoddi4+0x1e2>
 80004cc:	4640      	mov	r0, r8
 80004ce:	e7d1      	b.n	8000474 <__udivmoddi4+0x260>
 80004d0:	46d0      	mov	r8, sl
 80004d2:	e77b      	b.n	80003cc <__udivmoddi4+0x1b8>
 80004d4:	3b02      	subs	r3, #2
 80004d6:	4461      	add	r1, ip
 80004d8:	e732      	b.n	8000340 <__udivmoddi4+0x12c>
 80004da:	4630      	mov	r0, r6
 80004dc:	e709      	b.n	80002f2 <__udivmoddi4+0xde>
 80004de:	4464      	add	r4, ip
 80004e0:	3802      	subs	r0, #2
 80004e2:	e742      	b.n	800036a <__udivmoddi4+0x156>

080004e4 <__aeabi_idiv0>:
 80004e4:	4770      	bx	lr
 80004e6:	bf00      	nop

080004e8 <disable_button_EEPROM_writes>:
extern I2C_HandleTypeDef hi2c1;

static uint8_t io_ctrl_1 = 0xFF;
static uint8_t io_ctrl_2 = 0x01;

void disable_button_EEPROM_writes(void) {
 80004e8:	b580      	push	{r7, lr}
 80004ea:	b084      	sub	sp, #16
 80004ec:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 80004ee:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 80004f2:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 2, HAL_MAX_DELAY);
 80004f4:	1d3a      	adds	r2, r7, #4
 80004f6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80004fa:	9300      	str	r3, [sp, #0]
 80004fc:	2302      	movs	r3, #2
 80004fe:	21a0      	movs	r1, #160	; 0xa0
 8000500:	4803      	ldr	r0, [pc, #12]	; (8000510 <disable_button_EEPROM_writes+0x28>)
 8000502:	f003 fcd3 	bl	8003eac <HAL_I2C_Master_Transmit>
}
 8000506:	bf00      	nop
 8000508:	3708      	adds	r7, #8
 800050a:	46bd      	mov	sp, r7
 800050c:	bd80      	pop	{r7, pc}
 800050e:	bf00      	nop
 8000510:	200014d8 	.word	0x200014d8

08000514 <initialize_buttons>:

// Initialize Buttons
void initialize_buttons(void) {
 8000514:	b580      	push	{r7, lr}
 8000516:	af00      	add	r7, sp, #0
	disable_button_EEPROM_writes();
 8000518:	f7ff ffe6 	bl	80004e8 <disable_button_EEPROM_writes>
	enable_all_buttons();
 800051c:	f000 f89a 	bl	8000654 <enable_all_buttons>
	update_buttons();
 8000520:	f000 f8c2 	bl	80006a8 <update_buttons>
	HAL_Delay(1);
 8000524:	2001      	movs	r0, #1
 8000526:	f002 fce3 	bl	8002ef0 <HAL_Delay>
}
 800052a:	bf00      	nop
 800052c:	bd80      	pop	{r7, pc}
	...

08000530 <enable_button>:

// Enable a button (1 indexed, left-to-right, top-to-bottom)
void enable_button(uint8_t button) {
 8000530:	b480      	push	{r7}
 8000532:	b083      	sub	sp, #12
 8000534:	af00      	add	r7, sp, #0
 8000536:	4603      	mov	r3, r0
 8000538:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800053a:	79fb      	ldrb	r3, [r7, #7]
 800053c:	2b00      	cmp	r3, #0
 800053e:	d01e      	beq.n	800057e <enable_button+0x4e>
	// Set IO Reg to 0 to enable the button
	if (button == 9) {
 8000540:	79fb      	ldrb	r3, [r7, #7]
 8000542:	2b09      	cmp	r3, #9
 8000544:	d107      	bne.n	8000556 <enable_button+0x26>
		io_ctrl_2 &= ~(0b1);
 8000546:	4b11      	ldr	r3, [pc, #68]	; (800058c <enable_button+0x5c>)
 8000548:	781b      	ldrb	r3, [r3, #0]
 800054a:	f023 0301 	bic.w	r3, r3, #1
 800054e:	b2da      	uxtb	r2, r3
 8000550:	4b0e      	ldr	r3, [pc, #56]	; (800058c <enable_button+0x5c>)
 8000552:	701a      	strb	r2, [r3, #0]
 8000554:	e014      	b.n	8000580 <enable_button+0x50>
	} else if (button <= 8) {
 8000556:	79fb      	ldrb	r3, [r7, #7]
 8000558:	2b08      	cmp	r3, #8
 800055a:	d811      	bhi.n	8000580 <enable_button+0x50>
		io_ctrl_1 &= ~(0b1 << (button - 1));
 800055c:	79fb      	ldrb	r3, [r7, #7]
 800055e:	3b01      	subs	r3, #1
 8000560:	2201      	movs	r2, #1
 8000562:	fa02 f303 	lsl.w	r3, r2, r3
 8000566:	b25b      	sxtb	r3, r3
 8000568:	43db      	mvns	r3, r3
 800056a:	b25a      	sxtb	r2, r3
 800056c:	4b08      	ldr	r3, [pc, #32]	; (8000590 <enable_button+0x60>)
 800056e:	781b      	ldrb	r3, [r3, #0]
 8000570:	b25b      	sxtb	r3, r3
 8000572:	4013      	ands	r3, r2
 8000574:	b25b      	sxtb	r3, r3
 8000576:	b2da      	uxtb	r2, r3
 8000578:	4b05      	ldr	r3, [pc, #20]	; (8000590 <enable_button+0x60>)
 800057a:	701a      	strb	r2, [r3, #0]
 800057c:	e000      	b.n	8000580 <enable_button+0x50>
	if (!button) return;
 800057e:	bf00      	nop
	}
}
 8000580:	370c      	adds	r7, #12
 8000582:	46bd      	mov	sp, r7
 8000584:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000588:	4770      	bx	lr
 800058a:	bf00      	nop
 800058c:	20000001 	.word	0x20000001
 8000590:	20000000 	.word	0x20000000

08000594 <disable_button>:

// Disable a button (1 indexed, left-to-right, top-to-bottom)
void disable_button(uint8_t button) {
 8000594:	b480      	push	{r7}
 8000596:	b083      	sub	sp, #12
 8000598:	af00      	add	r7, sp, #0
 800059a:	4603      	mov	r3, r0
 800059c:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 800059e:	79fb      	ldrb	r3, [r7, #7]
 80005a0:	2b00      	cmp	r3, #0
 80005a2:	d01c      	beq.n	80005de <disable_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 80005a4:	79fb      	ldrb	r3, [r7, #7]
 80005a6:	2b09      	cmp	r3, #9
 80005a8:	d107      	bne.n	80005ba <disable_button+0x26>
		io_ctrl_2 |= 0b1;
 80005aa:	4b10      	ldr	r3, [pc, #64]	; (80005ec <disable_button+0x58>)
 80005ac:	781b      	ldrb	r3, [r3, #0]
 80005ae:	f043 0301 	orr.w	r3, r3, #1
 80005b2:	b2da      	uxtb	r2, r3
 80005b4:	4b0d      	ldr	r3, [pc, #52]	; (80005ec <disable_button+0x58>)
 80005b6:	701a      	strb	r2, [r3, #0]
 80005b8:	e012      	b.n	80005e0 <disable_button+0x4c>
	} else if (button <= 8) {
 80005ba:	79fb      	ldrb	r3, [r7, #7]
 80005bc:	2b08      	cmp	r3, #8
 80005be:	d80f      	bhi.n	80005e0 <disable_button+0x4c>
		io_ctrl_1 |= 0b1 << (button - 1);
 80005c0:	79fb      	ldrb	r3, [r7, #7]
 80005c2:	3b01      	subs	r3, #1
 80005c4:	2201      	movs	r2, #1
 80005c6:	fa02 f303 	lsl.w	r3, r2, r3
 80005ca:	b25a      	sxtb	r2, r3
 80005cc:	4b08      	ldr	r3, [pc, #32]	; (80005f0 <disable_button+0x5c>)
 80005ce:	781b      	ldrb	r3, [r3, #0]
 80005d0:	b25b      	sxtb	r3, r3
 80005d2:	4313      	orrs	r3, r2
 80005d4:	b25b      	sxtb	r3, r3
 80005d6:	b2da      	uxtb	r2, r3
 80005d8:	4b05      	ldr	r3, [pc, #20]	; (80005f0 <disable_button+0x5c>)
 80005da:	701a      	strb	r2, [r3, #0]
 80005dc:	e000      	b.n	80005e0 <disable_button+0x4c>
	if (!button) return;
 80005de:	bf00      	nop
	}
}
 80005e0:	370c      	adds	r7, #12
 80005e2:	46bd      	mov	sp, r7
 80005e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005e8:	4770      	bx	lr
 80005ea:	bf00      	nop
 80005ec:	20000001 	.word	0x20000001
 80005f0:	20000000 	.word	0x20000000

080005f4 <toggle_button>:

// Toggle a button (1 indexed, left-to-right, top-to-bottom)
void toggle_button(uint8_t button) {
 80005f4:	b480      	push	{r7}
 80005f6:	b083      	sub	sp, #12
 80005f8:	af00      	add	r7, sp, #0
 80005fa:	4603      	mov	r3, r0
 80005fc:	71fb      	strb	r3, [r7, #7]
	if (!button) return;
 80005fe:	79fb      	ldrb	r3, [r7, #7]
 8000600:	2b00      	cmp	r3, #0
 8000602:	d01c      	beq.n	800063e <toggle_button+0x4a>
	// Set IO Reg to 1 to disable the button
	if (button == 9) {
 8000604:	79fb      	ldrb	r3, [r7, #7]
 8000606:	2b09      	cmp	r3, #9
 8000608:	d107      	bne.n	800061a <toggle_button+0x26>
		io_ctrl_2 ^= 0b1;
 800060a:	4b10      	ldr	r3, [pc, #64]	; (800064c <toggle_button+0x58>)
 800060c:	781b      	ldrb	r3, [r3, #0]
 800060e:	f083 0301 	eor.w	r3, r3, #1
 8000612:	b2da      	uxtb	r2, r3
 8000614:	4b0d      	ldr	r3, [pc, #52]	; (800064c <toggle_button+0x58>)
 8000616:	701a      	strb	r2, [r3, #0]
 8000618:	e012      	b.n	8000640 <toggle_button+0x4c>
	} else if (button <= 8) {
 800061a:	79fb      	ldrb	r3, [r7, #7]
 800061c:	2b08      	cmp	r3, #8
 800061e:	d80f      	bhi.n	8000640 <toggle_button+0x4c>
		io_ctrl_1 ^= 0b1 << (button - 1);
 8000620:	79fb      	ldrb	r3, [r7, #7]
 8000622:	3b01      	subs	r3, #1
 8000624:	2201      	movs	r2, #1
 8000626:	fa02 f303 	lsl.w	r3, r2, r3
 800062a:	b25a      	sxtb	r2, r3
 800062c:	4b08      	ldr	r3, [pc, #32]	; (8000650 <toggle_button+0x5c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	b25b      	sxtb	r3, r3
 8000632:	4053      	eors	r3, r2
 8000634:	b25b      	sxtb	r3, r3
 8000636:	b2da      	uxtb	r2, r3
 8000638:	4b05      	ldr	r3, [pc, #20]	; (8000650 <toggle_button+0x5c>)
 800063a:	701a      	strb	r2, [r3, #0]
 800063c:	e000      	b.n	8000640 <toggle_button+0x4c>
	if (!button) return;
 800063e:	bf00      	nop
	}
}
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000001 	.word	0x20000001
 8000650:	20000000 	.word	0x20000000

08000654 <enable_all_buttons>:

// Enable all of the buttons
void enable_all_buttons(void) {
 8000654:	b580      	push	{r7, lr}
 8000656:	b082      	sub	sp, #8
 8000658:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 800065a:	2301      	movs	r3, #1
 800065c:	71fb      	strb	r3, [r7, #7]
 800065e:	e006      	b.n	800066e <enable_all_buttons+0x1a>
		enable_button(i);
 8000660:	79fb      	ldrb	r3, [r7, #7]
 8000662:	4618      	mov	r0, r3
 8000664:	f7ff ff64 	bl	8000530 <enable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000668:	79fb      	ldrb	r3, [r7, #7]
 800066a:	3301      	adds	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
 800066e:	79fb      	ldrb	r3, [r7, #7]
 8000670:	2b09      	cmp	r3, #9
 8000672:	d9f5      	bls.n	8000660 <enable_all_buttons+0xc>
	}
}
 8000674:	bf00      	nop
 8000676:	bf00      	nop
 8000678:	3708      	adds	r7, #8
 800067a:	46bd      	mov	sp, r7
 800067c:	bd80      	pop	{r7, pc}

0800067e <disable_all_buttons>:

// Disable all of the buttons
void disable_all_buttons(void) {
 800067e:	b580      	push	{r7, lr}
 8000680:	b082      	sub	sp, #8
 8000682:	af00      	add	r7, sp, #0
	for (uint8_t i = 1; i <= 9; ++i) {
 8000684:	2301      	movs	r3, #1
 8000686:	71fb      	strb	r3, [r7, #7]
 8000688:	e006      	b.n	8000698 <disable_all_buttons+0x1a>
		disable_button(i);
 800068a:	79fb      	ldrb	r3, [r7, #7]
 800068c:	4618      	mov	r0, r3
 800068e:	f7ff ff81 	bl	8000594 <disable_button>
	for (uint8_t i = 1; i <= 9; ++i) {
 8000692:	79fb      	ldrb	r3, [r7, #7]
 8000694:	3301      	adds	r3, #1
 8000696:	71fb      	strb	r3, [r7, #7]
 8000698:	79fb      	ldrb	r3, [r7, #7]
 800069a:	2b09      	cmp	r3, #9
 800069c:	d9f5      	bls.n	800068a <disable_all_buttons+0xc>
	}
}
 800069e:	bf00      	nop
 80006a0:	bf00      	nop
 80006a2:	3708      	adds	r7, #8
 80006a4:	46bd      	mov	sp, r7
 80006a6:	bd80      	pop	{r7, pc}

080006a8 <update_buttons>:
		toggle_button(i);
	}
}

// Write the updated button configuration to the remote
void update_buttons(void) {
 80006a8:	b580      	push	{r7, lr}
 80006aa:	b084      	sub	sp, #16
 80006ac:	af02      	add	r7, sp, #8
	uint8_t buf[] = {IO_CTRL_REG_1, io_ctrl_1, io_ctrl_2};
 80006ae:	23f2      	movs	r3, #242	; 0xf2
 80006b0:	713b      	strb	r3, [r7, #4]
 80006b2:	4b09      	ldr	r3, [pc, #36]	; (80006d8 <update_buttons+0x30>)
 80006b4:	781b      	ldrb	r3, [r3, #0]
 80006b6:	717b      	strb	r3, [r7, #5]
 80006b8:	4b08      	ldr	r3, [pc, #32]	; (80006dc <update_buttons+0x34>)
 80006ba:	781b      	ldrb	r3, [r3, #0]
 80006bc:	71bb      	strb	r3, [r7, #6]
	HAL_I2C_Master_Transmit(&hi2c1, PX1_ADDR, buf, 3, HAL_MAX_DELAY);
 80006be:	1d3a      	adds	r2, r7, #4
 80006c0:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80006c4:	9300      	str	r3, [sp, #0]
 80006c6:	2303      	movs	r3, #3
 80006c8:	21a0      	movs	r1, #160	; 0xa0
 80006ca:	4805      	ldr	r0, [pc, #20]	; (80006e0 <update_buttons+0x38>)
 80006cc:	f003 fbee 	bl	8003eac <HAL_I2C_Master_Transmit>
}
 80006d0:	bf00      	nop
 80006d2:	3708      	adds	r7, #8
 80006d4:	46bd      	mov	sp, r7
 80006d6:	bd80      	pop	{r7, pc}
 80006d8:	20000000 	.word	0x20000000
 80006dc:	20000001 	.word	0x20000001
 80006e0:	200014d8 	.word	0x200014d8

080006e4 <poll_buttons>:

// Poll buttons, returns the first pressed button
// or zero if no button is pressed
uint8_t poll_buttons(void) {
 80006e4:	b580      	push	{r7, lr}
 80006e6:	af00      	add	r7, sp, #0
	C1_HIGH();
 80006e8:	2201      	movs	r2, #1
 80006ea:	2180      	movs	r1, #128	; 0x80
 80006ec:	483c      	ldr	r0, [pc, #240]	; (80007e0 <poll_buttons+0xfc>)
 80006ee:	f003 fa7f 	bl	8003bf0 <HAL_GPIO_WritePin>
	C2_HIGH();
 80006f2:	2201      	movs	r2, #1
 80006f4:	2140      	movs	r1, #64	; 0x40
 80006f6:	483a      	ldr	r0, [pc, #232]	; (80007e0 <poll_buttons+0xfc>)
 80006f8:	f003 fa7a 	bl	8003bf0 <HAL_GPIO_WritePin>
	C0_LOW();
 80006fc:	2200      	movs	r2, #0
 80006fe:	2140      	movs	r1, #64	; 0x40
 8000700:	4838      	ldr	r0, [pc, #224]	; (80007e4 <poll_buttons+0x100>)
 8000702:	f003 fa75 	bl	8003bf0 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 1;
 8000706:	2108      	movs	r1, #8
 8000708:	4836      	ldr	r0, [pc, #216]	; (80007e4 <poll_buttons+0x100>)
 800070a:	f003 fa59 	bl	8003bc0 <HAL_GPIO_ReadPin>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d101      	bne.n	8000718 <poll_buttons+0x34>
 8000714:	2301      	movs	r3, #1
 8000716:	e061      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 4;
 8000718:	2120      	movs	r1, #32
 800071a:	4832      	ldr	r0, [pc, #200]	; (80007e4 <poll_buttons+0x100>)
 800071c:	f003 fa50 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000720:	4603      	mov	r3, r0
 8000722:	2b00      	cmp	r3, #0
 8000724:	d101      	bne.n	800072a <poll_buttons+0x46>
 8000726:	2304      	movs	r3, #4
 8000728:	e058      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 7;
 800072a:	2110      	movs	r1, #16
 800072c:	482d      	ldr	r0, [pc, #180]	; (80007e4 <poll_buttons+0x100>)
 800072e:	f003 fa47 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000732:	4603      	mov	r3, r0
 8000734:	2b00      	cmp	r3, #0
 8000736:	d101      	bne.n	800073c <poll_buttons+0x58>
 8000738:	2307      	movs	r3, #7
 800073a:	e04f      	b.n	80007dc <poll_buttons+0xf8>
	C0_HIGH();
 800073c:	2201      	movs	r2, #1
 800073e:	2140      	movs	r1, #64	; 0x40
 8000740:	4828      	ldr	r0, [pc, #160]	; (80007e4 <poll_buttons+0x100>)
 8000742:	f003 fa55 	bl	8003bf0 <HAL_GPIO_WritePin>

	C1_LOW();
 8000746:	2200      	movs	r2, #0
 8000748:	2180      	movs	r1, #128	; 0x80
 800074a:	4825      	ldr	r0, [pc, #148]	; (80007e0 <poll_buttons+0xfc>)
 800074c:	f003 fa50 	bl	8003bf0 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 2;
 8000750:	2108      	movs	r1, #8
 8000752:	4824      	ldr	r0, [pc, #144]	; (80007e4 <poll_buttons+0x100>)
 8000754:	f003 fa34 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000758:	4603      	mov	r3, r0
 800075a:	2b00      	cmp	r3, #0
 800075c:	d101      	bne.n	8000762 <poll_buttons+0x7e>
 800075e:	2302      	movs	r3, #2
 8000760:	e03c      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 5;
 8000762:	2120      	movs	r1, #32
 8000764:	481f      	ldr	r0, [pc, #124]	; (80007e4 <poll_buttons+0x100>)
 8000766:	f003 fa2b 	bl	8003bc0 <HAL_GPIO_ReadPin>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d101      	bne.n	8000774 <poll_buttons+0x90>
 8000770:	2305      	movs	r3, #5
 8000772:	e033      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 8;
 8000774:	2110      	movs	r1, #16
 8000776:	481b      	ldr	r0, [pc, #108]	; (80007e4 <poll_buttons+0x100>)
 8000778:	f003 fa22 	bl	8003bc0 <HAL_GPIO_ReadPin>
 800077c:	4603      	mov	r3, r0
 800077e:	2b00      	cmp	r3, #0
 8000780:	d101      	bne.n	8000786 <poll_buttons+0xa2>
 8000782:	2308      	movs	r3, #8
 8000784:	e02a      	b.n	80007dc <poll_buttons+0xf8>
	C1_HIGH();
 8000786:	2201      	movs	r2, #1
 8000788:	2180      	movs	r1, #128	; 0x80
 800078a:	4815      	ldr	r0, [pc, #84]	; (80007e0 <poll_buttons+0xfc>)
 800078c:	f003 fa30 	bl	8003bf0 <HAL_GPIO_WritePin>

	C2_LOW();
 8000790:	2200      	movs	r2, #0
 8000792:	2140      	movs	r1, #64	; 0x40
 8000794:	4812      	ldr	r0, [pc, #72]	; (80007e0 <poll_buttons+0xfc>)
 8000796:	f003 fa2b 	bl	8003bf0 <HAL_GPIO_WritePin>
	if (!R0_READ()) return 3;
 800079a:	2108      	movs	r1, #8
 800079c:	4811      	ldr	r0, [pc, #68]	; (80007e4 <poll_buttons+0x100>)
 800079e:	f003 fa0f 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80007a2:	4603      	mov	r3, r0
 80007a4:	2b00      	cmp	r3, #0
 80007a6:	d101      	bne.n	80007ac <poll_buttons+0xc8>
 80007a8:	2303      	movs	r3, #3
 80007aa:	e017      	b.n	80007dc <poll_buttons+0xf8>
	if (!R1_READ()) return 6;
 80007ac:	2120      	movs	r1, #32
 80007ae:	480d      	ldr	r0, [pc, #52]	; (80007e4 <poll_buttons+0x100>)
 80007b0:	f003 fa06 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80007b4:	4603      	mov	r3, r0
 80007b6:	2b00      	cmp	r3, #0
 80007b8:	d101      	bne.n	80007be <poll_buttons+0xda>
 80007ba:	2306      	movs	r3, #6
 80007bc:	e00e      	b.n	80007dc <poll_buttons+0xf8>
	if (!R2_READ()) return 9;
 80007be:	2110      	movs	r1, #16
 80007c0:	4808      	ldr	r0, [pc, #32]	; (80007e4 <poll_buttons+0x100>)
 80007c2:	f003 f9fd 	bl	8003bc0 <HAL_GPIO_ReadPin>
 80007c6:	4603      	mov	r3, r0
 80007c8:	2b00      	cmp	r3, #0
 80007ca:	d101      	bne.n	80007d0 <poll_buttons+0xec>
 80007cc:	2309      	movs	r3, #9
 80007ce:	e005      	b.n	80007dc <poll_buttons+0xf8>
	C2_HIGH();
 80007d0:	2201      	movs	r2, #1
 80007d2:	2140      	movs	r1, #64	; 0x40
 80007d4:	4802      	ldr	r0, [pc, #8]	; (80007e0 <poll_buttons+0xfc>)
 80007d6:	f003 fa0b 	bl	8003bf0 <HAL_GPIO_WritePin>

	return 0;
 80007da:	2300      	movs	r3, #0
}
 80007dc:	4618      	mov	r0, r3
 80007de:	bd80      	pop	{r7, pc}
 80007e0:	40020000 	.word	0x40020000
 80007e4:	40020400 	.word	0x40020400

080007e8 <init_default_controller>:

extern UART_HandleTypeDef huart1;
extern Controller controller;
extern unsigned char UART1_rxBuffer[8192];

void init_default_controller() {
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b084      	sub	sp, #16
 80007ec:	af00      	add	r7, sp, #0
	char device_number[3];
	char cmd_number[3];
	for (uint8_t i = 0; i < 18; ++i) {
 80007ee:	2300      	movs	r3, #0
 80007f0:	73fb      	strb	r3, [r7, #15]
 80007f2:	e05f      	b.n	80008b4 <init_default_controller+0xcc>
		strcpy(controller.devices[i].name, "Device ");
 80007f4:	7bfb      	ldrb	r3, [r7, #15]
 80007f6:	f241 022c 	movw	r2, #4140	; 0x102c
 80007fa:	fb02 f303 	mul.w	r3, r2, r3
 80007fe:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000802:	4a33      	ldr	r2, [pc, #204]	; (80008d0 <init_default_controller+0xe8>)
 8000804:	4413      	add	r3, r2
 8000806:	4933      	ldr	r1, [pc, #204]	; (80008d4 <init_default_controller+0xec>)
 8000808:	461a      	mov	r2, r3
 800080a:	460b      	mov	r3, r1
 800080c:	cb03      	ldmia	r3!, {r0, r1}
 800080e:	6010      	str	r0, [r2, #0]
 8000810:	6051      	str	r1, [r2, #4]
		itoa(i + 1, device_number, 10);
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	3301      	adds	r3, #1
 8000816:	f107 0108 	add.w	r1, r7, #8
 800081a:	220a      	movs	r2, #10
 800081c:	4618      	mov	r0, r3
 800081e:	f007 f825 	bl	800786c <itoa>
		strcat(controller.devices[i].name, device_number);
 8000822:	7bfb      	ldrb	r3, [r7, #15]
 8000824:	f241 022c 	movw	r2, #4140	; 0x102c
 8000828:	fb02 f303 	mul.w	r3, r2, r3
 800082c:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8000830:	4a27      	ldr	r2, [pc, #156]	; (80008d0 <init_default_controller+0xe8>)
 8000832:	4413      	add	r3, r2
 8000834:	f107 0208 	add.w	r2, r7, #8
 8000838:	4611      	mov	r1, r2
 800083a:	4618      	mov	r0, r3
 800083c:	f007 f820 	bl	8007880 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 8000840:	2300      	movs	r3, #0
 8000842:	73bb      	strb	r3, [r7, #14]
 8000844:	e030      	b.n	80008a8 <init_default_controller+0xc0>
			strcpy(controller.devices[i].commands[j].desc, "Command ");
 8000846:	7bfb      	ldrb	r3, [r7, #15]
 8000848:	7bba      	ldrb	r2, [r7, #14]
 800084a:	21ac      	movs	r1, #172	; 0xac
 800084c:	fb01 f202 	mul.w	r2, r1, r2
 8000850:	f241 012c 	movw	r1, #4140	; 0x102c
 8000854:	fb01 f303 	mul.w	r3, r1, r3
 8000858:	4413      	add	r3, r2
 800085a:	33a0      	adds	r3, #160	; 0xa0
 800085c:	4a1c      	ldr	r2, [pc, #112]	; (80008d0 <init_default_controller+0xe8>)
 800085e:	4413      	add	r3, r2
 8000860:	491d      	ldr	r1, [pc, #116]	; (80008d8 <init_default_controller+0xf0>)
 8000862:	461a      	mov	r2, r3
 8000864:	460b      	mov	r3, r1
 8000866:	cb03      	ldmia	r3!, {r0, r1}
 8000868:	6010      	str	r0, [r2, #0]
 800086a:	6051      	str	r1, [r2, #4]
 800086c:	781b      	ldrb	r3, [r3, #0]
 800086e:	7213      	strb	r3, [r2, #8]
			itoa(j + 1, cmd_number, 10);
 8000870:	7bbb      	ldrb	r3, [r7, #14]
 8000872:	3301      	adds	r3, #1
 8000874:	1d39      	adds	r1, r7, #4
 8000876:	220a      	movs	r2, #10
 8000878:	4618      	mov	r0, r3
 800087a:	f006 fff7 	bl	800786c <itoa>
			strcat(controller.devices[i].commands[j].desc, cmd_number);
 800087e:	7bfb      	ldrb	r3, [r7, #15]
 8000880:	7bba      	ldrb	r2, [r7, #14]
 8000882:	21ac      	movs	r1, #172	; 0xac
 8000884:	fb01 f202 	mul.w	r2, r1, r2
 8000888:	f241 012c 	movw	r1, #4140	; 0x102c
 800088c:	fb01 f303 	mul.w	r3, r1, r3
 8000890:	4413      	add	r3, r2
 8000892:	33a0      	adds	r3, #160	; 0xa0
 8000894:	4a0e      	ldr	r2, [pc, #56]	; (80008d0 <init_default_controller+0xe8>)
 8000896:	4413      	add	r3, r2
 8000898:	1d3a      	adds	r2, r7, #4
 800089a:	4611      	mov	r1, r2
 800089c:	4618      	mov	r0, r3
 800089e:	f006 ffef 	bl	8007880 <strcat>
		for (uint8_t j = 0; j < 24; ++j) {
 80008a2:	7bbb      	ldrb	r3, [r7, #14]
 80008a4:	3301      	adds	r3, #1
 80008a6:	73bb      	strb	r3, [r7, #14]
 80008a8:	7bbb      	ldrb	r3, [r7, #14]
 80008aa:	2b17      	cmp	r3, #23
 80008ac:	d9cb      	bls.n	8000846 <init_default_controller+0x5e>
	for (uint8_t i = 0; i < 18; ++i) {
 80008ae:	7bfb      	ldrb	r3, [r7, #15]
 80008b0:	3301      	adds	r3, #1
 80008b2:	73fb      	strb	r3, [r7, #15]
 80008b4:	7bfb      	ldrb	r3, [r7, #15]
 80008b6:	2b11      	cmp	r3, #17
 80008b8:	d99c      	bls.n	80007f4 <init_default_controller+0xc>
		}
	}
	controller.num_devices = 18;
 80008ba:	4b05      	ldr	r3, [pc, #20]	; (80008d0 <init_default_controller+0xe8>)
 80008bc:	f503 3390 	add.w	r3, r3, #73728	; 0x12000
 80008c0:	2212      	movs	r2, #18
 80008c2:	f883 2318 	strb.w	r2, [r3, #792]	; 0x318
}
 80008c6:	bf00      	nop
 80008c8:	3710      	adds	r7, #16
 80008ca:	46bd      	mov	sp, r7
 80008cc:	bd80      	pop	{r7, pc}
 80008ce:	bf00      	nop
 80008d0:	20001788 	.word	0x20001788
 80008d4:	08007954 	.word	0x08007954
 80008d8:	0800795c 	.word	0x0800795c

080008dc <init_xbee_communication>:

void init_xbee_communication() {
 80008dc:	b580      	push	{r7, lr}
 80008de:	af00      	add	r7, sp, #0
	HAL_UART_Receive_IT(&huart1, UART1_rxBuffer, 1);
 80008e0:	2201      	movs	r2, #1
 80008e2:	4903      	ldr	r1, [pc, #12]	; (80008f0 <init_xbee_communication+0x14>)
 80008e4:	4803      	ldr	r0, [pc, #12]	; (80008f4 <init_xbee_communication+0x18>)
 80008e6:	f006 fca2 	bl	800722e <HAL_UART_Receive_IT>
}
 80008ea:	bf00      	nop
 80008ec:	bd80      	pop	{r7, pc}
 80008ee:	bf00      	nop
 80008f0:	20013aa4 	.word	0x20013aa4
 80008f4:	20001740 	.word	0x20001740

080008f8 <Toggle>:
#include "main.h"
#include "stm32f4xx_hal.h"
extern uint16_t data[];
extern uint32_t dataLen;
extern TIM_HandleTypeDef htim3;
void Toggle(int on){
 80008f8:	b580      	push	{r7, lr}
 80008fa:	b082      	sub	sp, #8
 80008fc:	af00      	add	r7, sp, #0
 80008fe:	6078      	str	r0, [r7, #4]
	if(!on){
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	2b00      	cmp	r3, #0
 8000904:	d104      	bne.n	8000910 <Toggle+0x18>
		HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_2);
 8000906:	2104      	movs	r1, #4
 8000908:	4805      	ldr	r0, [pc, #20]	; (8000920 <Toggle+0x28>)
 800090a:	f005 f94b 	bl	8005ba4 <HAL_TIM_PWM_Start>
	}
	else{
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
	}
}
 800090e:	e003      	b.n	8000918 <Toggle+0x20>
		HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 8000910:	2104      	movs	r1, #4
 8000912:	4803      	ldr	r0, [pc, #12]	; (8000920 <Toggle+0x28>)
 8000914:	f005 f9f6 	bl	8005d04 <HAL_TIM_PWM_Stop>
}
 8000918:	bf00      	nop
 800091a:	3708      	adds	r7, #8
 800091c:	46bd      	mov	sp, r7
 800091e:	bd80      	pop	{r7, pc}
 8000920:	20001668 	.word	0x20001668

08000924 <Delay>:
void Delay(uint16_t delay){
 8000924:	b480      	push	{r7}
 8000926:	b083      	sub	sp, #12
 8000928:	af00      	add	r7, sp, #0
 800092a:	4603      	mov	r3, r0
 800092c:	80fb      	strh	r3, [r7, #6]
	/*Adapted from:
	https://hackaday.com/2020/12/11/bare-metal-stm32-blinky-and-the-secret-of-delay-functions/#:~:text=On%20an%20STM32%20MCU%2C%20we,also%20have%20to%20use%20interrupts
	Example 4
	*/
	if(delay == 0)
 800092e:	88fb      	ldrh	r3, [r7, #6]
 8000930:	2b00      	cmp	r3, #0
 8000932:	d01c      	beq.n	800096e <Delay+0x4a>
			return;
	TIM1->SR = 0;
 8000934:	4b11      	ldr	r3, [pc, #68]	; (800097c <Delay+0x58>)
 8000936:	2200      	movs	r2, #0
 8000938:	611a      	str	r2, [r3, #16]
	TIM1->ARR = delay;
 800093a:	4a10      	ldr	r2, [pc, #64]	; (800097c <Delay+0x58>)
 800093c:	88fb      	ldrh	r3, [r7, #6]
 800093e:	62d3      	str	r3, [r2, #44]	; 0x2c
	TIM1->CNT = 0;
 8000940:	4b0e      	ldr	r3, [pc, #56]	; (800097c <Delay+0x58>)
 8000942:	2200      	movs	r2, #0
 8000944:	625a      	str	r2, [r3, #36]	; 0x24
	TIM1->CR1 |= 1; //enables timer 1
 8000946:	4b0d      	ldr	r3, [pc, #52]	; (800097c <Delay+0x58>)
 8000948:	681b      	ldr	r3, [r3, #0]
 800094a:	4a0c      	ldr	r2, [pc, #48]	; (800097c <Delay+0x58>)
 800094c:	f043 0301 	orr.w	r3, r3, #1
 8000950:	6013      	str	r3, [r2, #0]
	while(!(TIM1->SR & TIM_SR_UIF));
 8000952:	bf00      	nop
 8000954:	4b09      	ldr	r3, [pc, #36]	; (800097c <Delay+0x58>)
 8000956:	691b      	ldr	r3, [r3, #16]
 8000958:	f003 0301 	and.w	r3, r3, #1
 800095c:	2b00      	cmp	r3, #0
 800095e:	d0f9      	beq.n	8000954 <Delay+0x30>
	TIM1->CR1 &= ~(1); //disables timer 1
 8000960:	4b06      	ldr	r3, [pc, #24]	; (800097c <Delay+0x58>)
 8000962:	681b      	ldr	r3, [r3, #0]
 8000964:	4a05      	ldr	r2, [pc, #20]	; (800097c <Delay+0x58>)
 8000966:	f023 0301 	bic.w	r3, r3, #1
 800096a:	6013      	str	r3, [r2, #0]
 800096c:	e000      	b.n	8000970 <Delay+0x4c>
			return;
 800096e:	bf00      	nop
}
 8000970:	370c      	adds	r7, #12
 8000972:	46bd      	mov	sp, r7
 8000974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000978:	4770      	bx	lr
 800097a:	bf00      	nop
 800097c:	40010000 	.word	0x40010000

08000980 <GlobalTransmit>:
void GlobalTransmit(){
 8000980:	b580      	push	{r7, lr}
 8000982:	b082      	sub	sp, #8
 8000984:	af00      	add	r7, sp, #0
	int on = 0;
 8000986:	2300      	movs	r3, #0
 8000988:	607b      	str	r3, [r7, #4]
	for(size_t i = 0; i<dataLen;++i){
 800098a:	2300      	movs	r3, #0
 800098c:	603b      	str	r3, [r7, #0]
 800098e:	e010      	b.n	80009b2 <GlobalTransmit+0x32>
		Toggle(on);
 8000990:	6878      	ldr	r0, [r7, #4]
 8000992:	f7ff ffb1 	bl	80008f8 <Toggle>
		on^=1;
 8000996:	687b      	ldr	r3, [r7, #4]
 8000998:	f083 0301 	eor.w	r3, r3, #1
 800099c:	607b      	str	r3, [r7, #4]
		Delay(data[i]);
 800099e:	4a0b      	ldr	r2, [pc, #44]	; (80009cc <GlobalTransmit+0x4c>)
 80009a0:	683b      	ldr	r3, [r7, #0]
 80009a2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80009a6:	4618      	mov	r0, r3
 80009a8:	f7ff ffbc 	bl	8000924 <Delay>
	for(size_t i = 0; i<dataLen;++i){
 80009ac:	683b      	ldr	r3, [r7, #0]
 80009ae:	3301      	adds	r3, #1
 80009b0:	603b      	str	r3, [r7, #0]
 80009b2:	4b07      	ldr	r3, [pc, #28]	; (80009d0 <GlobalTransmit+0x50>)
 80009b4:	681b      	ldr	r3, [r3, #0]
 80009b6:	683a      	ldr	r2, [r7, #0]
 80009b8:	429a      	cmp	r2, r3
 80009ba:	d3e9      	bcc.n	8000990 <GlobalTransmit+0x10>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 80009bc:	2104      	movs	r1, #4
 80009be:	4805      	ldr	r0, [pc, #20]	; (80009d4 <GlobalTransmit+0x54>)
 80009c0:	f005 f9a0 	bl	8005d04 <HAL_TIM_PWM_Stop>
}
 80009c4:	bf00      	nop
 80009c6:	3708      	adds	r7, #8
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	20015aa4 	.word	0x20015aa4
 80009d0:	20000004 	.word	0x20000004
 80009d4:	20001668 	.word	0x20001668

080009d8 <DeviceTransmit>:
void DeviceTransmit(uint16_t data[dataLen]){
 80009d8:	b580      	push	{r7, lr}
 80009da:	b084      	sub	sp, #16
 80009dc:	af00      	add	r7, sp, #0
 80009de:	6078      	str	r0, [r7, #4]
	int on =0;
 80009e0:	2300      	movs	r3, #0
 80009e2:	60fb      	str	r3, [r7, #12]
	for(uint16_t *ptr = data; ptr<data+dataLen;++ptr){
 80009e4:	687b      	ldr	r3, [r7, #4]
 80009e6:	60bb      	str	r3, [r7, #8]
 80009e8:	e00e      	b.n	8000a08 <DeviceTransmit+0x30>
		Toggle(on);
 80009ea:	68f8      	ldr	r0, [r7, #12]
 80009ec:	f7ff ff84 	bl	80008f8 <Toggle>
		on^=1;
 80009f0:	68fb      	ldr	r3, [r7, #12]
 80009f2:	f083 0301 	eor.w	r3, r3, #1
 80009f6:	60fb      	str	r3, [r7, #12]
		Delay(*ptr);
 80009f8:	68bb      	ldr	r3, [r7, #8]
 80009fa:	881b      	ldrh	r3, [r3, #0]
 80009fc:	4618      	mov	r0, r3
 80009fe:	f7ff ff91 	bl	8000924 <Delay>
	for(uint16_t *ptr = data; ptr<data+dataLen;++ptr){
 8000a02:	68bb      	ldr	r3, [r7, #8]
 8000a04:	3302      	adds	r3, #2
 8000a06:	60bb      	str	r3, [r7, #8]
 8000a08:	4b07      	ldr	r3, [pc, #28]	; (8000a28 <DeviceTransmit+0x50>)
 8000a0a:	681b      	ldr	r3, [r3, #0]
 8000a0c:	005b      	lsls	r3, r3, #1
 8000a0e:	687a      	ldr	r2, [r7, #4]
 8000a10:	4413      	add	r3, r2
 8000a12:	68ba      	ldr	r2, [r7, #8]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	d3e8      	bcc.n	80009ea <DeviceTransmit+0x12>
	}
	HAL_TIM_PWM_Stop(&htim3,TIM_CHANNEL_2);
 8000a18:	2104      	movs	r1, #4
 8000a1a:	4804      	ldr	r0, [pc, #16]	; (8000a2c <DeviceTransmit+0x54>)
 8000a1c:	f005 f972 	bl	8005d04 <HAL_TIM_PWM_Stop>
}
 8000a20:	bf00      	nop
 8000a22:	3710      	adds	r7, #16
 8000a24:	46bd      	mov	sp, r7
 8000a26:	bd80      	pop	{r7, pc}
 8000a28:	20000004 	.word	0x20000004
 8000a2c:	20001668 	.word	0x20001668

08000a30 <poll_accel>:
int16_t xyz_old[3];
int16_t xyz[3];
int cycles_still = 0;


void poll_accel(){
 8000a30:	b580      	push	{r7, lr}
 8000a32:	b084      	sub	sp, #16
 8000a34:	af02      	add	r7, sp, #8
	 buff[0] =  (uint8_t)X;
 8000a36:	4b24      	ldr	r3, [pc, #144]	; (8000ac8 <poll_accel+0x98>)
 8000a38:	2228      	movs	r2, #40	; 0x28
 8000a3a:	701a      	strb	r2, [r3, #0]
	buff[0] |= 1 << 7;
 8000a3c:	4b22      	ldr	r3, [pc, #136]	; (8000ac8 <poll_accel+0x98>)
 8000a3e:	781b      	ldrb	r3, [r3, #0]
 8000a40:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8000a44:	b2da      	uxtb	r2, r3
 8000a46:	4b20      	ldr	r3, [pc, #128]	; (8000ac8 <poll_accel+0x98>)
 8000a48:	701a      	strb	r2, [r3, #0]


	HAL_StatusTypeDef transmitStatus = HAL_I2C_Master_Transmit(&hi2c3, ACC_WRITE, &buff[0], 1, 1000);
 8000a4a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a4e:	9300      	str	r3, [sp, #0]
 8000a50:	2301      	movs	r3, #1
 8000a52:	4a1d      	ldr	r2, [pc, #116]	; (8000ac8 <poll_accel+0x98>)
 8000a54:	2132      	movs	r1, #50	; 0x32
 8000a56:	481d      	ldr	r0, [pc, #116]	; (8000acc <poll_accel+0x9c>)
 8000a58:	f003 fa28 	bl	8003eac <HAL_I2C_Master_Transmit>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	71fb      	strb	r3, [r7, #7]

	HAL_StatusTypeDef receiveStatus = HAL_I2C_Master_Receive(&hi2c3, ACC_READ, &buff[0], 6, 1000);
 8000a60:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000a64:	9300      	str	r3, [sp, #0]
 8000a66:	2306      	movs	r3, #6
 8000a68:	4a17      	ldr	r2, [pc, #92]	; (8000ac8 <poll_accel+0x98>)
 8000a6a:	2133      	movs	r1, #51	; 0x33
 8000a6c:	4817      	ldr	r0, [pc, #92]	; (8000acc <poll_accel+0x9c>)
 8000a6e:	f003 fb1b 	bl	80040a8 <HAL_I2C_Master_Receive>
 8000a72:	4603      	mov	r3, r0
 8000a74:	71bb      	strb	r3, [r7, #6]

	int16_t x = ((int16_t) buff[1] << 8) | (buff[0]);
 8000a76:	4b14      	ldr	r3, [pc, #80]	; (8000ac8 <poll_accel+0x98>)
 8000a78:	785b      	ldrb	r3, [r3, #1]
 8000a7a:	021b      	lsls	r3, r3, #8
 8000a7c:	b21a      	sxth	r2, r3
 8000a7e:	4b12      	ldr	r3, [pc, #72]	; (8000ac8 <poll_accel+0x98>)
 8000a80:	781b      	ldrb	r3, [r3, #0]
 8000a82:	b21b      	sxth	r3, r3
 8000a84:	4313      	orrs	r3, r2
 8000a86:	80bb      	strh	r3, [r7, #4]
	int16_t y = ((int16_t) buff[3] << 8) | (buff[2]);
 8000a88:	4b0f      	ldr	r3, [pc, #60]	; (8000ac8 <poll_accel+0x98>)
 8000a8a:	78db      	ldrb	r3, [r3, #3]
 8000a8c:	021b      	lsls	r3, r3, #8
 8000a8e:	b21a      	sxth	r2, r3
 8000a90:	4b0d      	ldr	r3, [pc, #52]	; (8000ac8 <poll_accel+0x98>)
 8000a92:	789b      	ldrb	r3, [r3, #2]
 8000a94:	b21b      	sxth	r3, r3
 8000a96:	4313      	orrs	r3, r2
 8000a98:	807b      	strh	r3, [r7, #2]
	int16_t z = ((int16_t) buff[5] << 8) | (buff[4]);
 8000a9a:	4b0b      	ldr	r3, [pc, #44]	; (8000ac8 <poll_accel+0x98>)
 8000a9c:	795b      	ldrb	r3, [r3, #5]
 8000a9e:	021b      	lsls	r3, r3, #8
 8000aa0:	b21a      	sxth	r2, r3
 8000aa2:	4b09      	ldr	r3, [pc, #36]	; (8000ac8 <poll_accel+0x98>)
 8000aa4:	791b      	ldrb	r3, [r3, #4]
 8000aa6:	b21b      	sxth	r3, r3
 8000aa8:	4313      	orrs	r3, r2
 8000aaa:	803b      	strh	r3, [r7, #0]
	 xyz[0] = x;
 8000aac:	4a08      	ldr	r2, [pc, #32]	; (8000ad0 <poll_accel+0xa0>)
 8000aae:	88bb      	ldrh	r3, [r7, #4]
 8000ab0:	8013      	strh	r3, [r2, #0]
	 xyz[1] = y;
 8000ab2:	4a07      	ldr	r2, [pc, #28]	; (8000ad0 <poll_accel+0xa0>)
 8000ab4:	887b      	ldrh	r3, [r7, #2]
 8000ab6:	8053      	strh	r3, [r2, #2]
	 xyz[2] = z;
 8000ab8:	4a05      	ldr	r2, [pc, #20]	; (8000ad0 <poll_accel+0xa0>)
 8000aba:	883b      	ldrh	r3, [r7, #0]
 8000abc:	8093      	strh	r3, [r2, #4]
}
 8000abe:	bf00      	nop
 8000ac0:	3708      	adds	r7, #8
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bd80      	pop	{r7, pc}
 8000ac6:	bf00      	nop
 8000ac8:	20001470 	.word	0x20001470
 8000acc:	2000152c 	.word	0x2000152c
 8000ad0:	20001484 	.word	0x20001484

08000ad4 <accel_init>:

void accel_init(){
 8000ad4:	b580      	push	{r7, lr}
 8000ad6:	b084      	sub	sp, #16
 8000ad8:	af02      	add	r7, sp, #8
	 buff[0] = (uint8_t)CR1;
 8000ada:	4b1c      	ldr	r3, [pc, #112]	; (8000b4c <accel_init+0x78>)
 8000adc:	2220      	movs	r2, #32
 8000ade:	701a      	strb	r2, [r3, #0]
	  buff[1] = (uint8_t)CR1_VAL;
 8000ae0:	4b1a      	ldr	r3, [pc, #104]	; (8000b4c <accel_init+0x78>)
 8000ae2:	223f      	movs	r2, #63	; 0x3f
 8000ae4:	705a      	strb	r2, [r3, #1]
	  HAL_StatusTypeDef tStat = HAL_I2C_Master_Transmit(&hi2c3, ACC_WRITE, &buff[0], 2, 1000);
 8000ae6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aea:	9300      	str	r3, [sp, #0]
 8000aec:	2302      	movs	r3, #2
 8000aee:	4a17      	ldr	r2, [pc, #92]	; (8000b4c <accel_init+0x78>)
 8000af0:	2132      	movs	r1, #50	; 0x32
 8000af2:	4817      	ldr	r0, [pc, #92]	; (8000b50 <accel_init+0x7c>)
 8000af4:	f003 f9da 	bl	8003eac <HAL_I2C_Master_Transmit>
 8000af8:	4603      	mov	r3, r0
 8000afa:	71fb      	strb	r3, [r7, #7]
	  HAL_StatusTypeDef rStat = HAL_I2C_Master_Receive(&hi2c3, ACC_READ, &buff[0], 1, 1000);
 8000afc:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b00:	9300      	str	r3, [sp, #0]
 8000b02:	2301      	movs	r3, #1
 8000b04:	4a11      	ldr	r2, [pc, #68]	; (8000b4c <accel_init+0x78>)
 8000b06:	2133      	movs	r1, #51	; 0x33
 8000b08:	4811      	ldr	r0, [pc, #68]	; (8000b50 <accel_init+0x7c>)
 8000b0a:	f003 facd 	bl	80040a8 <HAL_I2C_Master_Receive>
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71bb      	strb	r3, [r7, #6]

	  buff[0] = (uint8_t)CR4;
 8000b12:	4b0e      	ldr	r3, [pc, #56]	; (8000b4c <accel_init+0x78>)
 8000b14:	2223      	movs	r2, #35	; 0x23
 8000b16:	701a      	strb	r2, [r3, #0]
	  	  buff[1] = (uint8_t)CR4_VAL;
 8000b18:	4b0c      	ldr	r3, [pc, #48]	; (8000b4c <accel_init+0x78>)
 8000b1a:	2208      	movs	r2, #8
 8000b1c:	705a      	strb	r2, [r3, #1]
	  	  HAL_I2C_Master_Transmit(&hi2c3, ACC_WRITE, &buff[0], 2, 1000);
 8000b1e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b22:	9300      	str	r3, [sp, #0]
 8000b24:	2302      	movs	r3, #2
 8000b26:	4a09      	ldr	r2, [pc, #36]	; (8000b4c <accel_init+0x78>)
 8000b28:	2132      	movs	r1, #50	; 0x32
 8000b2a:	4809      	ldr	r0, [pc, #36]	; (8000b50 <accel_init+0x7c>)
 8000b2c:	f003 f9be 	bl	8003eac <HAL_I2C_Master_Transmit>
	  	  HAL_I2C_Master_Receive(&hi2c3, ACC_READ, &buff[0], 1, 1000);
 8000b30:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000b34:	9300      	str	r3, [sp, #0]
 8000b36:	2301      	movs	r3, #1
 8000b38:	4a04      	ldr	r2, [pc, #16]	; (8000b4c <accel_init+0x78>)
 8000b3a:	2133      	movs	r1, #51	; 0x33
 8000b3c:	4804      	ldr	r0, [pc, #16]	; (8000b50 <accel_init+0x7c>)
 8000b3e:	f003 fab3 	bl	80040a8 <HAL_I2C_Master_Receive>
}
 8000b42:	bf00      	nop
 8000b44:	3708      	adds	r7, #8
 8000b46:	46bd      	mov	sp, r7
 8000b48:	bd80      	pop	{r7, pc}
 8000b4a:	bf00      	nop
 8000b4c:	20001470 	.word	0x20001470
 8000b50:	2000152c 	.word	0x2000152c

08000b54 <AccelInit>:
void AccelInit(){
 8000b54:	b580      	push	{r7, lr}
 8000b56:	af00      	add	r7, sp, #0
    accel_init();
 8000b58:	f7ff ffbc 	bl	8000ad4 <accel_init>
    poll_accel();
 8000b5c:	f7ff ff68 	bl	8000a30 <poll_accel>
    poll_accel();
 8000b60:	f7ff ff66 	bl	8000a30 <poll_accel>
}
 8000b64:	bf00      	nop
 8000b66:	bd80      	pop	{r7, pc}

08000b68 <resetCounter>:
void resetCounter(){
 8000b68:	b480      	push	{r7}
 8000b6a:	af00      	add	r7, sp, #0
    cycles_still = 0;
 8000b6c:	4b03      	ldr	r3, [pc, #12]	; (8000b7c <resetCounter+0x14>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
}
 8000b72:	bf00      	nop
 8000b74:	46bd      	mov	sp, r7
 8000b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b7a:	4770      	bx	lr
 8000b7c:	2000148c 	.word	0x2000148c

08000b80 <poll>:

int poll(){
 8000b80:	b580      	push	{r7, lr}
 8000b82:	af00      	add	r7, sp, #0
    if(!Awake){
 8000b84:	4b34      	ldr	r3, [pc, #208]	; (8000c58 <poll+0xd8>)
 8000b86:	681b      	ldr	r3, [r3, #0]
 8000b88:	2b00      	cmp	r3, #0
 8000b8a:	d125      	bne.n	8000bd8 <poll+0x58>
	  		poll_accel();
 8000b8c:	f7ff ff50 	bl	8000a30 <poll_accel>
	  		 if ((abs(xyz[2] - xyz_old[2]) > ONthreshold)){
 8000b90:	4b32      	ldr	r3, [pc, #200]	; (8000c5c <poll+0xdc>)
 8000b92:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b96:	461a      	mov	r2, r3
 8000b98:	4b31      	ldr	r3, [pc, #196]	; (8000c60 <poll+0xe0>)
 8000b9a:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000b9e:	1ad3      	subs	r3, r2, r3
 8000ba0:	2b00      	cmp	r3, #0
 8000ba2:	bfb8      	it	lt
 8000ba4:	425b      	neglt	r3, r3
 8000ba6:	f240 22bd 	movw	r2, #701	; 0x2bd
 8000baa:	4293      	cmp	r3, r2
 8000bac:	dd02      	ble.n	8000bb4 <poll+0x34>
	  			Awake = 1;
 8000bae:	4b2a      	ldr	r3, [pc, #168]	; (8000c58 <poll+0xd8>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	601a      	str	r2, [r3, #0]
	  		 }
	  		 xyz_old[0] = xyz[0];
 8000bb4:	4b29      	ldr	r3, [pc, #164]	; (8000c5c <poll+0xdc>)
 8000bb6:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000bba:	4b29      	ldr	r3, [pc, #164]	; (8000c60 <poll+0xe0>)
 8000bbc:	801a      	strh	r2, [r3, #0]
	  		 xyz_old[1] = xyz[1];
 8000bbe:	4b27      	ldr	r3, [pc, #156]	; (8000c5c <poll+0xdc>)
 8000bc0:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000bc4:	4b26      	ldr	r3, [pc, #152]	; (8000c60 <poll+0xe0>)
 8000bc6:	805a      	strh	r2, [r3, #2]
	  		 xyz_old[2] = xyz[2];
 8000bc8:	4b24      	ldr	r3, [pc, #144]	; (8000c5c <poll+0xdc>)
 8000bca:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000bce:	4b24      	ldr	r3, [pc, #144]	; (8000c60 <poll+0xe0>)
 8000bd0:	809a      	strh	r2, [r3, #4]
	  		 resetCounter();
 8000bd2:	f7ff ffc9 	bl	8000b68 <resetCounter>
 8000bd6:	e03a      	b.n	8000c4e <poll+0xce>
	  	}
    else{
        poll_accel();
 8000bd8:	f7ff ff2a 	bl	8000a30 <poll_accel>
        if ((abs(xyz[2] - xyz_old[2]) < OFFthreshold)){
 8000bdc:	4b1f      	ldr	r3, [pc, #124]	; (8000c5c <poll+0xdc>)
 8000bde:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000be2:	461a      	mov	r2, r3
 8000be4:	4b1e      	ldr	r3, [pc, #120]	; (8000c60 <poll+0xe0>)
 8000be6:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bea:	1ad3      	subs	r3, r2, r3
 8000bec:	4a1d      	ldr	r2, [pc, #116]	; (8000c64 <poll+0xe4>)
 8000bee:	4293      	cmp	r3, r2
 8000bf0:	db1b      	blt.n	8000c2a <poll+0xaa>
 8000bf2:	4b1a      	ldr	r3, [pc, #104]	; (8000c5c <poll+0xdc>)
 8000bf4:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000bf8:	461a      	mov	r2, r3
 8000bfa:	4b19      	ldr	r3, [pc, #100]	; (8000c60 <poll+0xe0>)
 8000bfc:	f9b3 3004 	ldrsh.w	r3, [r3, #4]
 8000c00:	1ad3      	subs	r3, r2, r3
 8000c02:	f240 5213 	movw	r2, #1299	; 0x513
 8000c06:	4293      	cmp	r3, r2
 8000c08:	dc0f      	bgt.n	8000c2a <poll+0xaa>
            cycles_still++;
 8000c0a:	4b17      	ldr	r3, [pc, #92]	; (8000c68 <poll+0xe8>)
 8000c0c:	681b      	ldr	r3, [r3, #0]
 8000c0e:	3301      	adds	r3, #1
 8000c10:	4a15      	ldr	r2, [pc, #84]	; (8000c68 <poll+0xe8>)
 8000c12:	6013      	str	r3, [r2, #0]
                if(cycles_still > 20*timeout){
 8000c14:	4b14      	ldr	r3, [pc, #80]	; (8000c68 <poll+0xe8>)
 8000c16:	681b      	ldr	r3, [r3, #0]
 8000c18:	2b3c      	cmp	r3, #60	; 0x3c
 8000c1a:	dd09      	ble.n	8000c30 <poll+0xb0>
                    Awake = 0;
 8000c1c:	4b0e      	ldr	r3, [pc, #56]	; (8000c58 <poll+0xd8>)
 8000c1e:	2200      	movs	r2, #0
 8000c20:	601a      	str	r2, [r3, #0]
                    cycles_still = 0;
 8000c22:	4b11      	ldr	r3, [pc, #68]	; (8000c68 <poll+0xe8>)
 8000c24:	2200      	movs	r2, #0
 8000c26:	601a      	str	r2, [r3, #0]
                if(cycles_still > 20*timeout){
 8000c28:	e002      	b.n	8000c30 <poll+0xb0>
                }
        }
        else{
            cycles_still = 0;
 8000c2a:	4b0f      	ldr	r3, [pc, #60]	; (8000c68 <poll+0xe8>)
 8000c2c:	2200      	movs	r2, #0
 8000c2e:	601a      	str	r2, [r3, #0]
        }
        xyz_old[0] = xyz[0];
 8000c30:	4b0a      	ldr	r3, [pc, #40]	; (8000c5c <poll+0xdc>)
 8000c32:	f9b3 2000 	ldrsh.w	r2, [r3]
 8000c36:	4b0a      	ldr	r3, [pc, #40]	; (8000c60 <poll+0xe0>)
 8000c38:	801a      	strh	r2, [r3, #0]
        xyz_old[1] = xyz[1];
 8000c3a:	4b08      	ldr	r3, [pc, #32]	; (8000c5c <poll+0xdc>)
 8000c3c:	f9b3 2002 	ldrsh.w	r2, [r3, #2]
 8000c40:	4b07      	ldr	r3, [pc, #28]	; (8000c60 <poll+0xe0>)
 8000c42:	805a      	strh	r2, [r3, #2]
        xyz_old[2] = xyz[2];
 8000c44:	4b05      	ldr	r3, [pc, #20]	; (8000c5c <poll+0xdc>)
 8000c46:	f9b3 2004 	ldrsh.w	r2, [r3, #4]
 8000c4a:	4b05      	ldr	r3, [pc, #20]	; (8000c60 <poll+0xe0>)
 8000c4c:	809a      	strh	r2, [r3, #4]
    }
    return Awake;
 8000c4e:	4b02      	ldr	r3, [pc, #8]	; (8000c58 <poll+0xd8>)
 8000c50:	681b      	ldr	r3, [r3, #0]
}
 8000c52:	4618      	mov	r0, r3
 8000c54:	bd80      	pop	{r7, pc}
 8000c56:	bf00      	nop
 8000c58:	2000146c 	.word	0x2000146c
 8000c5c:	20001484 	.word	0x20001484
 8000c60:	2000147c 	.word	0x2000147c
 8000c64:	fffffaed 	.word	0xfffffaed
 8000c68:	2000148c 	.word	0x2000148c

08000c6c <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
    /* USER CODE END 1 */

    /* MCU Configuration--------------------------------------------------------*/

    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
    HAL_Init();
 8000c72:	f002 f8cb 	bl	8002e0c <HAL_Init>
    /* USER CODE BEGIN Init */

    /* USER CODE END Init */

    /* Configure the system clock */
    SystemClock_Config();
 8000c76:	f000 f8ed 	bl	8000e54 <SystemClock_Config>
    /* USER CODE BEGIN SysInit */

    /* USER CODE END SysInit */

    /* Initialize all configured peripherals */
    MX_GPIO_Init();
 8000c7a:	f000 fc45 	bl	8001508 <MX_GPIO_Init>
    MX_SPI2_Init();
 8000c7e:	f000 fa03 	bl	8001088 <MX_SPI2_Init>
    MX_TIM2_Init();
 8000c82:	f000 fa89 	bl	8001198 <MX_TIM2_Init>
    MX_USART1_UART_Init();
 8000c86:	f000 fc15 	bl	80014b4 <MX_USART1_UART_Init>
    MX_I2C1_Init();
 8000c8a:	f000 f9a1 	bl	8000fd0 <MX_I2C1_Init>
    MX_TIM5_Init();
 8000c8e:	f000 fbc3 	bl	8001418 <MX_TIM5_Init>
    MX_TIM1_Init();
 8000c92:	f000 fa2f 	bl	80010f4 <MX_TIM1_Init>
    MX_TIM3_Init();
 8000c96:	f000 faef 	bl	8001278 <MX_TIM3_Init>
    MX_TIM4_Init();
 8000c9a:	f000 fb63 	bl	8001364 <MX_TIM4_Init>
    MX_ADC1_Init();
 8000c9e:	f000 f945 	bl	8000f2c <MX_ADC1_Init>
    MX_I2C3_Init();
 8000ca2:	f000 f9c3 	bl	800102c <MX_I2C3_Init>
    /* USER CODE BEGIN 2 */
    init_default_controller(&controller);
 8000ca6:	485f      	ldr	r0, [pc, #380]	; (8000e24 <main+0x1b8>)
 8000ca8:	f7ff fd9e 	bl	80007e8 <init_default_controller>
    init_displays();
 8000cac:	f001 fa6a 	bl	8002184 <init_displays>
    AccelInit();
 8000cb0:	f7ff ff50 	bl	8000b54 <AccelInit>
    HAL_TIM_Base_Start_IT(&htim5);
 8000cb4:	485c      	ldr	r0, [pc, #368]	; (8000e28 <main+0x1bc>)
 8000cb6:	f004 fec3 	bl	8005a40 <HAL_TIM_Base_Start_IT>
    HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_3);
 8000cba:	2108      	movs	r1, #8
 8000cbc:	485b      	ldr	r0, [pc, #364]	; (8000e2c <main+0x1c0>)
 8000cbe:	f004 ff71 	bl	8005ba4 <HAL_TIM_PWM_Start>
    HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
 8000cc2:	2104      	movs	r1, #4
 8000cc4:	485a      	ldr	r0, [pc, #360]	; (8000e30 <main+0x1c4>)
 8000cc6:	f004 ff6d 	bl	8005ba4 <HAL_TIM_PWM_Start>
    // HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //Starts timer 2
    __HAL_TIM_SET_COMPARE(&htim3, TIM_CHANNEL_2, 50);
 8000cca:	4b5a      	ldr	r3, [pc, #360]	; (8000e34 <main+0x1c8>)
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	2232      	movs	r2, #50	; 0x32
 8000cd0:	639a      	str	r2, [r3, #56]	; 0x38
    __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 999); // Adjust LED Brightness
 8000cd2:	4b57      	ldr	r3, [pc, #348]	; (8000e30 <main+0x1c4>)
 8000cd4:	681b      	ldr	r3, [r3, #0]
 8000cd6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cda:	639a      	str	r2, [r3, #56]	; 0x38
    initialize_buttons();
 8000cdc:	f7ff fc1a 	bl	8000514 <initialize_buttons>
    // update_buttons();
    /* USER CODE END 2 */

    /* Infinite loop */
    /* USER CODE BEGIN WHILE */
    display_menu(main_menu, 1, 0);
 8000ce0:	2200      	movs	r2, #0
 8000ce2:	2101      	movs	r1, #1
 8000ce4:	2000      	movs	r0, #0
 8000ce6:	f000 fd5b 	bl	80017a0 <display_menu>
    uint8_t pressed_button = 0;
 8000cea:	2300      	movs	r3, #0
 8000cec:	72fb      	strb	r3, [r7, #11]

    while (1)
    {   
        if(!awake && button){
 8000cee:	4b52      	ldr	r3, [pc, #328]	; (8000e38 <main+0x1cc>)
 8000cf0:	681b      	ldr	r3, [r3, #0]
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	d105      	bne.n	8000d02 <main+0x96>
 8000cf6:	4b51      	ldr	r3, [pc, #324]	; (8000e3c <main+0x1d0>)
 8000cf8:	781b      	ldrb	r3, [r3, #0]
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <main+0x96>
            resetCounter();
 8000cfe:	f7ff ff33 	bl	8000b68 <resetCounter>
        }
        if (!timeoutoff && wakeup)
 8000d02:	4b4f      	ldr	r3, [pc, #316]	; (8000e40 <main+0x1d4>)
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	d10f      	bne.n	8000d2a <main+0xbe>
 8000d0a:	4b4e      	ldr	r3, [pc, #312]	; (8000e44 <main+0x1d8>)
 8000d0c:	781b      	ldrb	r3, [r3, #0]
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d00b      	beq.n	8000d2a <main+0xbe>
        {
            enable_all_buttons();
 8000d12:	f7ff fc9f 	bl	8000654 <enable_all_buttons>
            update_buttons();
 8000d16:	f7ff fcc7 	bl	80006a8 <update_buttons>
            display_menu(main_menu,1,0);
 8000d1a:	2200      	movs	r2, #0
 8000d1c:	2101      	movs	r1, #1
 8000d1e:	2000      	movs	r0, #0
 8000d20:	f000 fd3e 	bl	80017a0 <display_menu>
            wakeup = 0;
 8000d24:	4b47      	ldr	r3, [pc, #284]	; (8000e44 <main+0x1d8>)
 8000d26:	2200      	movs	r2, #0
 8000d28:	701a      	strb	r2, [r3, #0]
        }
        if (!timeoutoff && pollnow)
 8000d2a:	4b45      	ldr	r3, [pc, #276]	; (8000e40 <main+0x1d4>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d11e      	bne.n	8000d70 <main+0x104>
 8000d32:	4b45      	ldr	r3, [pc, #276]	; (8000e48 <main+0x1dc>)
 8000d34:	781b      	ldrb	r3, [r3, #0]
 8000d36:	2b00      	cmp	r3, #0
 8000d38:	d01a      	beq.n	8000d70 <main+0x104>
        {
            uint8_t awakeBefore = awake;
 8000d3a:	4b3f      	ldr	r3, [pc, #252]	; (8000e38 <main+0x1cc>)
 8000d3c:	681b      	ldr	r3, [r3, #0]
 8000d3e:	72bb      	strb	r3, [r7, #10]
            awake = poll();
 8000d40:	f7ff ff1e 	bl	8000b80 <poll>
 8000d44:	4603      	mov	r3, r0
 8000d46:	461a      	mov	r2, r3
 8000d48:	4b3b      	ldr	r3, [pc, #236]	; (8000e38 <main+0x1cc>)
 8000d4a:	601a      	str	r2, [r3, #0]
            wakeup = (awakeBefore != awake && awake) ? 1 : 0;
 8000d4c:	7aba      	ldrb	r2, [r7, #10]
 8000d4e:	4b3a      	ldr	r3, [pc, #232]	; (8000e38 <main+0x1cc>)
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	429a      	cmp	r2, r3
 8000d54:	d005      	beq.n	8000d62 <main+0xf6>
 8000d56:	4b38      	ldr	r3, [pc, #224]	; (8000e38 <main+0x1cc>)
 8000d58:	681b      	ldr	r3, [r3, #0]
 8000d5a:	2b00      	cmp	r3, #0
 8000d5c:	d001      	beq.n	8000d62 <main+0xf6>
 8000d5e:	2301      	movs	r3, #1
 8000d60:	e000      	b.n	8000d64 <main+0xf8>
 8000d62:	2300      	movs	r3, #0
 8000d64:	b2da      	uxtb	r2, r3
 8000d66:	4b37      	ldr	r3, [pc, #220]	; (8000e44 <main+0x1d8>)
 8000d68:	701a      	strb	r2, [r3, #0]
            pollnow = 0;
 8000d6a:	4b37      	ldr	r3, [pc, #220]	; (8000e48 <main+0x1dc>)
 8000d6c:	2200      	movs	r2, #0
 8000d6e:	701a      	strb	r2, [r3, #0]
        }
        // update awake status
        if (!awake && !timeoutoff)
 8000d70:	4b31      	ldr	r3, [pc, #196]	; (8000e38 <main+0x1cc>)
 8000d72:	681b      	ldr	r3, [r3, #0]
 8000d74:	2b00      	cmp	r3, #0
 8000d76:	d10c      	bne.n	8000d92 <main+0x126>
 8000d78:	4b31      	ldr	r3, [pc, #196]	; (8000e40 <main+0x1d4>)
 8000d7a:	781b      	ldrb	r3, [r3, #0]
 8000d7c:	2b00      	cmp	r3, #0
 8000d7e:	d108      	bne.n	8000d92 <main+0x126>
        {
            erase_buffer();
 8000d80:	f001 fb6e 	bl	8002460 <erase_buffer>
            update_all_displays();
 8000d84:	f001 faf4 	bl	8002370 <update_all_displays>
            disable_all_buttons();
 8000d88:	f7ff fc79 	bl	800067e <disable_all_buttons>
            update_buttons();
 8000d8c:	f7ff fc8c 	bl	80006a8 <update_buttons>
 8000d90:	e047      	b.n	8000e22 <main+0x1b6>
        }
        else
        {
            if (button)
 8000d92:	4b2a      	ldr	r3, [pc, #168]	; (8000e3c <main+0x1d0>)
 8000d94:	781b      	ldrb	r3, [r3, #0]
 8000d96:	2b00      	cmp	r3, #0
 8000d98:	d00b      	beq.n	8000db2 <main+0x146>
            {
                pressed_button = button;
 8000d9a:	4b28      	ldr	r3, [pc, #160]	; (8000e3c <main+0x1d0>)
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	72fb      	strb	r3, [r7, #11]
                while (button)
 8000da0:	bf00      	nop
 8000da2:	4b26      	ldr	r3, [pc, #152]	; (8000e3c <main+0x1d0>)
 8000da4:	781b      	ldrb	r3, [r3, #0]
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	d1fb      	bne.n	8000da2 <main+0x136>
                    ;
                button_pressed(pressed_button);
 8000daa:	7afb      	ldrb	r3, [r7, #11]
 8000dac:	4618      	mov	r0, r3
 8000dae:	f000 fee5 	bl	8001b7c <button_pressed>
            }
            if (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000db2:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000db6:	4825      	ldr	r0, [pc, #148]	; (8000e4c <main+0x1e0>)
 8000db8:	f002 ff02 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000dbc:	4603      	mov	r3, r0
 8000dbe:	2b00      	cmp	r3, #0
 8000dc0:	d113      	bne.n	8000dea <main+0x17e>
            {
                while (!HAL_GPIO_ReadPin(GPIOC, GPIO_PIN_13))
 8000dc2:	bf00      	nop
 8000dc4:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8000dc8:	4820      	ldr	r0, [pc, #128]	; (8000e4c <main+0x1e0>)
 8000dca:	f002 fef9 	bl	8003bc0 <HAL_GPIO_ReadPin>
 8000dce:	4603      	mov	r3, r0
 8000dd0:	2b00      	cmp	r3, #0
 8000dd2:	d0f7      	beq.n	8000dc4 <main+0x158>
                    ;
                for (int i = 0; i < 2; ++i)
 8000dd4:	2300      	movs	r3, #0
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e004      	b.n	8000de4 <main+0x178>
                    GlobalTransmit();
 8000dda:	f7ff fdd1 	bl	8000980 <GlobalTransmit>
                for (int i = 0; i < 2; ++i)
 8000dde:	68fb      	ldr	r3, [r7, #12]
 8000de0:	3301      	adds	r3, #1
 8000de2:	60fb      	str	r3, [r7, #12]
 8000de4:	68fb      	ldr	r3, [r7, #12]
 8000de6:	2b01      	cmp	r3, #1
 8000de8:	ddf7      	ble.n	8000dda <main+0x16e>
            }
            // ADC testing code
            uint32_t ADC_VAL;
            HAL_ADC_Start(&hadc1);                         // start conversion
 8000dea:	4819      	ldr	r0, [pc, #100]	; (8000e50 <main+0x1e4>)
 8000dec:	f002 f8e8 	bl	8002fc0 <HAL_ADC_Start>
            HAL_ADC_PollForConversion(&hadc1, 0xFFFFFFFF); // wait for conversion to finish
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8000df4:	4816      	ldr	r0, [pc, #88]	; (8000e50 <main+0x1e4>)
 8000df6:	f002 f997 	bl	8003128 <HAL_ADC_PollForConversion>
            ADC_VAL = HAL_ADC_GetValue(&hadc1);            // retrieve value
 8000dfa:	4815      	ldr	r0, [pc, #84]	; (8000e50 <main+0x1e4>)
 8000dfc:	f002 fa1f 	bl	800323e <HAL_ADC_GetValue>
 8000e00:	6078      	str	r0, [r7, #4]

            /*if(ADC_VAL < 500){
                //__HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 200); // Adjust LED Brightness
            }*/
            if (ADC_VAL > 1900)
 8000e02:	687b      	ldr	r3, [r7, #4]
 8000e04:	f240 726c 	movw	r2, #1900	; 0x76c
 8000e08:	4293      	cmp	r3, r2
 8000e0a:	d905      	bls.n	8000e18 <main+0x1ac>
            {
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, 1999); // Adjust LED Brightness
 8000e0c:	4b08      	ldr	r3, [pc, #32]	; (8000e30 <main+0x1c4>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	f240 72cf 	movw	r2, #1999	; 0x7cf
 8000e14:	639a      	str	r2, [r3, #56]	; 0x38
 8000e16:	e76a      	b.n	8000cee <main+0x82>
            }
            else
            {
                __HAL_TIM_SET_COMPARE(&htim4, TIM_CHANNEL_2, ADC_VAL + 20); // Adjust LED Brightness
 8000e18:	4b05      	ldr	r3, [pc, #20]	; (8000e30 <main+0x1c4>)
 8000e1a:	681b      	ldr	r3, [r3, #0]
 8000e1c:	687a      	ldr	r2, [r7, #4]
 8000e1e:	3214      	adds	r2, #20
 8000e20:	639a      	str	r2, [r3, #56]	; 0x38
        if(!awake && button){
 8000e22:	e764      	b.n	8000cee <main+0x82>
 8000e24:	20001788 	.word	0x20001788
 8000e28:	200016f8 	.word	0x200016f8
 8000e2c:	20001620 	.word	0x20001620
 8000e30:	200016b0 	.word	0x200016b0
 8000e34:	20001668 	.word	0x20001668
 8000e38:	20000008 	.word	0x20000008
 8000e3c:	20001785 	.word	0x20001785
 8000e40:	20015b47 	.word	0x20015b47
 8000e44:	20015b46 	.word	0x20015b46
 8000e48:	20015b45 	.word	0x20015b45
 8000e4c:	40020800 	.word	0x40020800
 8000e50:	20001490 	.word	0x20001490

08000e54 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b094      	sub	sp, #80	; 0x50
 8000e58:	af00      	add	r7, sp, #0
    RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e5a:	f107 0320 	add.w	r3, r7, #32
 8000e5e:	2230      	movs	r2, #48	; 0x30
 8000e60:	2100      	movs	r1, #0
 8000e62:	4618      	mov	r0, r3
 8000e64:	f006 fd04 	bl	8007870 <memset>
    RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e68:	f107 030c 	add.w	r3, r7, #12
 8000e6c:	2200      	movs	r2, #0
 8000e6e:	601a      	str	r2, [r3, #0]
 8000e70:	605a      	str	r2, [r3, #4]
 8000e72:	609a      	str	r2, [r3, #8]
 8000e74:	60da      	str	r2, [r3, #12]
 8000e76:	611a      	str	r2, [r3, #16]

    /** Configure the main internal regulator output voltage
     */
    __HAL_RCC_PWR_CLK_ENABLE();
 8000e78:	2300      	movs	r3, #0
 8000e7a:	60bb      	str	r3, [r7, #8]
 8000e7c:	4b29      	ldr	r3, [pc, #164]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e7e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e80:	4a28      	ldr	r2, [pc, #160]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e82:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000e86:	6413      	str	r3, [r2, #64]	; 0x40
 8000e88:	4b26      	ldr	r3, [pc, #152]	; (8000f24 <SystemClock_Config+0xd0>)
 8000e8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000e8c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000e90:	60bb      	str	r3, [r7, #8]
 8000e92:	68bb      	ldr	r3, [r7, #8]
    __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8000e94:	2300      	movs	r3, #0
 8000e96:	607b      	str	r3, [r7, #4]
 8000e98:	4b23      	ldr	r3, [pc, #140]	; (8000f28 <SystemClock_Config+0xd4>)
 8000e9a:	681b      	ldr	r3, [r3, #0]
 8000e9c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000ea0:	4a21      	ldr	r2, [pc, #132]	; (8000f28 <SystemClock_Config+0xd4>)
 8000ea2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8000ea6:	6013      	str	r3, [r2, #0]
 8000ea8:	4b1f      	ldr	r3, [pc, #124]	; (8000f28 <SystemClock_Config+0xd4>)
 8000eaa:	681b      	ldr	r3, [r3, #0]
 8000eac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000eb0:	607b      	str	r3, [r7, #4]
 8000eb2:	687b      	ldr	r3, [r7, #4]

    /** Initializes the RCC Oscillators according to the specified parameters
     * in the RCC_OscInitTypeDef structure.
     */
    RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000eb4:	2302      	movs	r3, #2
 8000eb6:	623b      	str	r3, [r7, #32]
    RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000eb8:	2301      	movs	r3, #1
 8000eba:	62fb      	str	r3, [r7, #44]	; 0x2c
    RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000ebc:	2310      	movs	r3, #16
 8000ebe:	633b      	str	r3, [r7, #48]	; 0x30
    RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000ec0:	2302      	movs	r3, #2
 8000ec2:	63bb      	str	r3, [r7, #56]	; 0x38
    RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000ec4:	2300      	movs	r3, #0
 8000ec6:	63fb      	str	r3, [r7, #60]	; 0x3c
    RCC_OscInitStruct.PLL.PLLM = 16;
 8000ec8:	2310      	movs	r3, #16
 8000eca:	643b      	str	r3, [r7, #64]	; 0x40
    RCC_OscInitStruct.PLL.PLLN = 336;
 8000ecc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8000ed0:	647b      	str	r3, [r7, #68]	; 0x44
    RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8000ed2:	2304      	movs	r3, #4
 8000ed4:	64bb      	str	r3, [r7, #72]	; 0x48
    RCC_OscInitStruct.PLL.PLLQ = 7;
 8000ed6:	2307      	movs	r3, #7
 8000ed8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000eda:	f107 0320 	add.w	r3, r7, #32
 8000ede:	4618      	mov	r0, r3
 8000ee0:	f003 fe36 	bl	8004b50 <HAL_RCC_OscConfig>
 8000ee4:	4603      	mov	r3, r0
 8000ee6:	2b00      	cmp	r3, #0
 8000ee8:	d001      	beq.n	8000eee <SystemClock_Config+0x9a>
    {
        Error_Handler();
 8000eea:	f000 fc53 	bl	8001794 <Error_Handler>
    }

    /** Initializes the CPU, AHB and APB buses clocks
     */
    RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8000eee:	230f      	movs	r3, #15
 8000ef0:	60fb      	str	r3, [r7, #12]
    RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000ef2:	2302      	movs	r3, #2
 8000ef4:	613b      	str	r3, [r7, #16]
    RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	617b      	str	r3, [r7, #20]
    RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000efa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000efe:	61bb      	str	r3, [r7, #24]
    RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000f00:	2300      	movs	r3, #0
 8000f02:	61fb      	str	r3, [r7, #28]

    if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000f04:	f107 030c 	add.w	r3, r7, #12
 8000f08:	2102      	movs	r1, #2
 8000f0a:	4618      	mov	r0, r3
 8000f0c:	f004 f898 	bl	8005040 <HAL_RCC_ClockConfig>
 8000f10:	4603      	mov	r3, r0
 8000f12:	2b00      	cmp	r3, #0
 8000f14:	d001      	beq.n	8000f1a <SystemClock_Config+0xc6>
    {
        Error_Handler();
 8000f16:	f000 fc3d 	bl	8001794 <Error_Handler>
    }
}
 8000f1a:	bf00      	nop
 8000f1c:	3750      	adds	r7, #80	; 0x50
 8000f1e:	46bd      	mov	sp, r7
 8000f20:	bd80      	pop	{r7, pc}
 8000f22:	bf00      	nop
 8000f24:	40023800 	.word	0x40023800
 8000f28:	40007000 	.word	0x40007000

08000f2c <MX_ADC1_Init>:
 * @brief ADC1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_ADC1_Init(void)
{
 8000f2c:	b580      	push	{r7, lr}
 8000f2e:	b084      	sub	sp, #16
 8000f30:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN ADC1_Init 0 */

    /* USER CODE END ADC1_Init 0 */

    ADC_ChannelConfTypeDef sConfig = {0};
 8000f32:	463b      	mov	r3, r7
 8000f34:	2200      	movs	r2, #0
 8000f36:	601a      	str	r2, [r3, #0]
 8000f38:	605a      	str	r2, [r3, #4]
 8000f3a:	609a      	str	r2, [r3, #8]
 8000f3c:	60da      	str	r2, [r3, #12]

    /* USER CODE END ADC1_Init 1 */

    /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
     */
    hadc1.Instance = ADC1;
 8000f3e:	4b21      	ldr	r3, [pc, #132]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f40:	4a21      	ldr	r2, [pc, #132]	; (8000fc8 <MX_ADC1_Init+0x9c>)
 8000f42:	601a      	str	r2, [r3, #0]
    hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV8;
 8000f44:	4b1f      	ldr	r3, [pc, #124]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f46:	f44f 3240 	mov.w	r2, #196608	; 0x30000
 8000f4a:	605a      	str	r2, [r3, #4]
    hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 8000f4c:	4b1d      	ldr	r3, [pc, #116]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f4e:	2200      	movs	r2, #0
 8000f50:	609a      	str	r2, [r3, #8]
    hadc1.Init.ScanConvMode = DISABLE;
 8000f52:	4b1c      	ldr	r3, [pc, #112]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f54:	2200      	movs	r2, #0
 8000f56:	611a      	str	r2, [r3, #16]
    hadc1.Init.ContinuousConvMode = DISABLE;
 8000f58:	4b1a      	ldr	r3, [pc, #104]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f5a:	2200      	movs	r2, #0
 8000f5c:	761a      	strb	r2, [r3, #24]
    hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000f5e:	4b19      	ldr	r3, [pc, #100]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f60:	2200      	movs	r2, #0
 8000f62:	f883 2020 	strb.w	r2, [r3, #32]
    hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000f66:	4b17      	ldr	r3, [pc, #92]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f68:	2200      	movs	r2, #0
 8000f6a:	62da      	str	r2, [r3, #44]	; 0x2c
    hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000f6c:	4b15      	ldr	r3, [pc, #84]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f6e:	4a17      	ldr	r2, [pc, #92]	; (8000fcc <MX_ADC1_Init+0xa0>)
 8000f70:	629a      	str	r2, [r3, #40]	; 0x28
    hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000f72:	4b14      	ldr	r3, [pc, #80]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	60da      	str	r2, [r3, #12]
    hadc1.Init.NbrOfConversion = 1;
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f7a:	2201      	movs	r2, #1
 8000f7c:	61da      	str	r2, [r3, #28]
    hadc1.Init.DMAContinuousRequests = DISABLE;
 8000f7e:	4b11      	ldr	r3, [pc, #68]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
    hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000f86:	4b0f      	ldr	r3, [pc, #60]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f88:	2201      	movs	r2, #1
 8000f8a:	615a      	str	r2, [r3, #20]
    if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000f8c:	480d      	ldr	r0, [pc, #52]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000f8e:	f001 ffd3 	bl	8002f38 <HAL_ADC_Init>
 8000f92:	4603      	mov	r3, r0
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d001      	beq.n	8000f9c <MX_ADC1_Init+0x70>
    {
        Error_Handler();
 8000f98:	f000 fbfc 	bl	8001794 <Error_Handler>
    }

    /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
     */
    sConfig.Channel = ADC_CHANNEL_4;
 8000f9c:	2304      	movs	r3, #4
 8000f9e:	603b      	str	r3, [r7, #0]
    sConfig.Rank = 1;
 8000fa0:	2301      	movs	r3, #1
 8000fa2:	607b      	str	r3, [r7, #4]
    sConfig.SamplingTime = ADC_SAMPLETIME_28CYCLES;
 8000fa4:	2302      	movs	r3, #2
 8000fa6:	60bb      	str	r3, [r7, #8]
    if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000fa8:	463b      	mov	r3, r7
 8000faa:	4619      	mov	r1, r3
 8000fac:	4805      	ldr	r0, [pc, #20]	; (8000fc4 <MX_ADC1_Init+0x98>)
 8000fae:	f002 f953 	bl	8003258 <HAL_ADC_ConfigChannel>
 8000fb2:	4603      	mov	r3, r0
 8000fb4:	2b00      	cmp	r3, #0
 8000fb6:	d001      	beq.n	8000fbc <MX_ADC1_Init+0x90>
    {
        Error_Handler();
 8000fb8:	f000 fbec 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN ADC1_Init 2 */

    /* USER CODE END ADC1_Init 2 */
}
 8000fbc:	bf00      	nop
 8000fbe:	3710      	adds	r7, #16
 8000fc0:	46bd      	mov	sp, r7
 8000fc2:	bd80      	pop	{r7, pc}
 8000fc4:	20001490 	.word	0x20001490
 8000fc8:	40012000 	.word	0x40012000
 8000fcc:	0f000001 	.word	0x0f000001

08000fd0 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8000fd0:	b580      	push	{r7, lr}
 8000fd2:	af00      	add	r7, sp, #0
    /* USER CODE END I2C1_Init 0 */

    /* USER CODE BEGIN I2C1_Init 1 */

    /* USER CODE END I2C1_Init 1 */
    hi2c1.Instance = I2C1;
 8000fd4:	4b12      	ldr	r3, [pc, #72]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fd6:	4a13      	ldr	r2, [pc, #76]	; (8001024 <MX_I2C1_Init+0x54>)
 8000fd8:	601a      	str	r2, [r3, #0]
    hi2c1.Init.ClockSpeed = 100000;
 8000fda:	4b11      	ldr	r3, [pc, #68]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fdc:	4a12      	ldr	r2, [pc, #72]	; (8001028 <MX_I2C1_Init+0x58>)
 8000fde:	605a      	str	r2, [r3, #4]
    hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8000fe0:	4b0f      	ldr	r3, [pc, #60]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fe2:	2200      	movs	r2, #0
 8000fe4:	609a      	str	r2, [r3, #8]
    hi2c1.Init.OwnAddress1 = 0;
 8000fe6:	4b0e      	ldr	r3, [pc, #56]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fe8:	2200      	movs	r2, #0
 8000fea:	60da      	str	r2, [r3, #12]
    hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000fec:	4b0c      	ldr	r3, [pc, #48]	; (8001020 <MX_I2C1_Init+0x50>)
 8000fee:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8000ff2:	611a      	str	r2, [r3, #16]
    hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000ff4:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <MX_I2C1_Init+0x50>)
 8000ff6:	2200      	movs	r2, #0
 8000ff8:	615a      	str	r2, [r3, #20]
    hi2c1.Init.OwnAddress2 = 0;
 8000ffa:	4b09      	ldr	r3, [pc, #36]	; (8001020 <MX_I2C1_Init+0x50>)
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	619a      	str	r2, [r3, #24]
    hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001000:	4b07      	ldr	r3, [pc, #28]	; (8001020 <MX_I2C1_Init+0x50>)
 8001002:	2200      	movs	r2, #0
 8001004:	61da      	str	r2, [r3, #28]
    hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001006:	4b06      	ldr	r3, [pc, #24]	; (8001020 <MX_I2C1_Init+0x50>)
 8001008:	2200      	movs	r2, #0
 800100a:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 800100c:	4804      	ldr	r0, [pc, #16]	; (8001020 <MX_I2C1_Init+0x50>)
 800100e:	f002 fe09 	bl	8003c24 <HAL_I2C_Init>
 8001012:	4603      	mov	r3, r0
 8001014:	2b00      	cmp	r3, #0
 8001016:	d001      	beq.n	800101c <MX_I2C1_Init+0x4c>
    {
        Error_Handler();
 8001018:	f000 fbbc 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN I2C1_Init 2 */

    /* USER CODE END I2C1_Init 2 */
}
 800101c:	bf00      	nop
 800101e:	bd80      	pop	{r7, pc}
 8001020:	200014d8 	.word	0x200014d8
 8001024:	40005400 	.word	0x40005400
 8001028:	000186a0 	.word	0x000186a0

0800102c <MX_I2C3_Init>:
 * @brief I2C3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C3_Init(void)
{
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    /* USER CODE END I2C3_Init 0 */

    /* USER CODE BEGIN I2C3_Init 1 */

    /* USER CODE END I2C3_Init 1 */
    hi2c3.Instance = I2C3;
 8001030:	4b12      	ldr	r3, [pc, #72]	; (800107c <MX_I2C3_Init+0x50>)
 8001032:	4a13      	ldr	r2, [pc, #76]	; (8001080 <MX_I2C3_Init+0x54>)
 8001034:	601a      	str	r2, [r3, #0]
    hi2c3.Init.ClockSpeed = 100000;
 8001036:	4b11      	ldr	r3, [pc, #68]	; (800107c <MX_I2C3_Init+0x50>)
 8001038:	4a12      	ldr	r2, [pc, #72]	; (8001084 <MX_I2C3_Init+0x58>)
 800103a:	605a      	str	r2, [r3, #4]
    hi2c3.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800103c:	4b0f      	ldr	r3, [pc, #60]	; (800107c <MX_I2C3_Init+0x50>)
 800103e:	2200      	movs	r2, #0
 8001040:	609a      	str	r2, [r3, #8]
    hi2c3.Init.OwnAddress1 = 0;
 8001042:	4b0e      	ldr	r3, [pc, #56]	; (800107c <MX_I2C3_Init+0x50>)
 8001044:	2200      	movs	r2, #0
 8001046:	60da      	str	r2, [r3, #12]
    hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001048:	4b0c      	ldr	r3, [pc, #48]	; (800107c <MX_I2C3_Init+0x50>)
 800104a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800104e:	611a      	str	r2, [r3, #16]
    hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001050:	4b0a      	ldr	r3, [pc, #40]	; (800107c <MX_I2C3_Init+0x50>)
 8001052:	2200      	movs	r2, #0
 8001054:	615a      	str	r2, [r3, #20]
    hi2c3.Init.OwnAddress2 = 0;
 8001056:	4b09      	ldr	r3, [pc, #36]	; (800107c <MX_I2C3_Init+0x50>)
 8001058:	2200      	movs	r2, #0
 800105a:	619a      	str	r2, [r3, #24]
    hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800105c:	4b07      	ldr	r3, [pc, #28]	; (800107c <MX_I2C3_Init+0x50>)
 800105e:	2200      	movs	r2, #0
 8001060:	61da      	str	r2, [r3, #28]
    hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001062:	4b06      	ldr	r3, [pc, #24]	; (800107c <MX_I2C3_Init+0x50>)
 8001064:	2200      	movs	r2, #0
 8001066:	621a      	str	r2, [r3, #32]
    if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8001068:	4804      	ldr	r0, [pc, #16]	; (800107c <MX_I2C3_Init+0x50>)
 800106a:	f002 fddb 	bl	8003c24 <HAL_I2C_Init>
 800106e:	4603      	mov	r3, r0
 8001070:	2b00      	cmp	r3, #0
 8001072:	d001      	beq.n	8001078 <MX_I2C3_Init+0x4c>
    {
        Error_Handler();
 8001074:	f000 fb8e 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN I2C3_Init 2 */

    /* USER CODE END I2C3_Init 2 */
}
 8001078:	bf00      	nop
 800107a:	bd80      	pop	{r7, pc}
 800107c:	2000152c 	.word	0x2000152c
 8001080:	40005c00 	.word	0x40005c00
 8001084:	000186a0 	.word	0x000186a0

08001088 <MX_SPI2_Init>:
 * @brief SPI2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI2_Init(void)
{
 8001088:	b580      	push	{r7, lr}
 800108a:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN SPI2_Init 1 */

    /* USER CODE END SPI2_Init 1 */
    /* SPI2 parameter configuration*/
    hspi2.Instance = SPI2;
 800108c:	4b17      	ldr	r3, [pc, #92]	; (80010ec <MX_SPI2_Init+0x64>)
 800108e:	4a18      	ldr	r2, [pc, #96]	; (80010f0 <MX_SPI2_Init+0x68>)
 8001090:	601a      	str	r2, [r3, #0]
    hspi2.Init.Mode = SPI_MODE_MASTER;
 8001092:	4b16      	ldr	r3, [pc, #88]	; (80010ec <MX_SPI2_Init+0x64>)
 8001094:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001098:	605a      	str	r2, [r3, #4]
    hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800109a:	4b14      	ldr	r3, [pc, #80]	; (80010ec <MX_SPI2_Init+0x64>)
 800109c:	2200      	movs	r2, #0
 800109e:	609a      	str	r2, [r3, #8]
    hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80010a0:	4b12      	ldr	r3, [pc, #72]	; (80010ec <MX_SPI2_Init+0x64>)
 80010a2:	2200      	movs	r2, #0
 80010a4:	60da      	str	r2, [r3, #12]
    hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80010a6:	4b11      	ldr	r3, [pc, #68]	; (80010ec <MX_SPI2_Init+0x64>)
 80010a8:	2200      	movs	r2, #0
 80010aa:	611a      	str	r2, [r3, #16]
    hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80010ac:	4b0f      	ldr	r3, [pc, #60]	; (80010ec <MX_SPI2_Init+0x64>)
 80010ae:	2200      	movs	r2, #0
 80010b0:	615a      	str	r2, [r3, #20]
    hspi2.Init.NSS = SPI_NSS_SOFT;
 80010b2:	4b0e      	ldr	r3, [pc, #56]	; (80010ec <MX_SPI2_Init+0x64>)
 80010b4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80010b8:	619a      	str	r2, [r3, #24]
    hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 80010ba:	4b0c      	ldr	r3, [pc, #48]	; (80010ec <MX_SPI2_Init+0x64>)
 80010bc:	2230      	movs	r2, #48	; 0x30
 80010be:	61da      	str	r2, [r3, #28]
    hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80010c0:	4b0a      	ldr	r3, [pc, #40]	; (80010ec <MX_SPI2_Init+0x64>)
 80010c2:	2200      	movs	r2, #0
 80010c4:	621a      	str	r2, [r3, #32]
    hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80010c6:	4b09      	ldr	r3, [pc, #36]	; (80010ec <MX_SPI2_Init+0x64>)
 80010c8:	2200      	movs	r2, #0
 80010ca:	625a      	str	r2, [r3, #36]	; 0x24
    hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80010cc:	4b07      	ldr	r3, [pc, #28]	; (80010ec <MX_SPI2_Init+0x64>)
 80010ce:	2200      	movs	r2, #0
 80010d0:	629a      	str	r2, [r3, #40]	; 0x28
    hspi2.Init.CRCPolynomial = 10;
 80010d2:	4b06      	ldr	r3, [pc, #24]	; (80010ec <MX_SPI2_Init+0x64>)
 80010d4:	220a      	movs	r2, #10
 80010d6:	62da      	str	r2, [r3, #44]	; 0x2c
    if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80010d8:	4804      	ldr	r0, [pc, #16]	; (80010ec <MX_SPI2_Init+0x64>)
 80010da:	f004 f9d1 	bl	8005480 <HAL_SPI_Init>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d001      	beq.n	80010e8 <MX_SPI2_Init+0x60>
    {
        Error_Handler();
 80010e4:	f000 fb56 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN SPI2_Init 2 */

    /* USER CODE END SPI2_Init 2 */
}
 80010e8:	bf00      	nop
 80010ea:	bd80      	pop	{r7, pc}
 80010ec:	20001580 	.word	0x20001580
 80010f0:	40003800 	.word	0x40003800

080010f4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b086      	sub	sp, #24
 80010f8:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM1_Init 0 */

    /* USER CODE END TIM1_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010fa:	f107 0308 	add.w	r3, r7, #8
 80010fe:	2200      	movs	r2, #0
 8001100:	601a      	str	r2, [r3, #0]
 8001102:	605a      	str	r2, [r3, #4]
 8001104:	609a      	str	r2, [r3, #8]
 8001106:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001108:	463b      	mov	r3, r7
 800110a:	2200      	movs	r2, #0
 800110c:	601a      	str	r2, [r3, #0]
 800110e:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM1_Init 1 */

    /* USER CODE END TIM1_Init 1 */
    htim1.Instance = TIM1;
 8001110:	4b1f      	ldr	r3, [pc, #124]	; (8001190 <MX_TIM1_Init+0x9c>)
 8001112:	4a20      	ldr	r2, [pc, #128]	; (8001194 <MX_TIM1_Init+0xa0>)
 8001114:	601a      	str	r2, [r3, #0]
    htim1.Init.Prescaler = 1869;
 8001116:	4b1e      	ldr	r3, [pc, #120]	; (8001190 <MX_TIM1_Init+0x9c>)
 8001118:	f240 724d 	movw	r2, #1869	; 0x74d
 800111c:	605a      	str	r2, [r3, #4]
    htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800111e:	4b1c      	ldr	r3, [pc, #112]	; (8001190 <MX_TIM1_Init+0x9c>)
 8001120:	2200      	movs	r2, #0
 8001122:	609a      	str	r2, [r3, #8]
    htim1.Init.Period = 65535;
 8001124:	4b1a      	ldr	r3, [pc, #104]	; (8001190 <MX_TIM1_Init+0x9c>)
 8001126:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800112a:	60da      	str	r2, [r3, #12]
    htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800112c:	4b18      	ldr	r3, [pc, #96]	; (8001190 <MX_TIM1_Init+0x9c>)
 800112e:	2200      	movs	r2, #0
 8001130:	611a      	str	r2, [r3, #16]
    htim1.Init.RepetitionCounter = 0;
 8001132:	4b17      	ldr	r3, [pc, #92]	; (8001190 <MX_TIM1_Init+0x9c>)
 8001134:	2200      	movs	r2, #0
 8001136:	615a      	str	r2, [r3, #20]
    htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001138:	4b15      	ldr	r3, [pc, #84]	; (8001190 <MX_TIM1_Init+0x9c>)
 800113a:	2200      	movs	r2, #0
 800113c:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 800113e:	4814      	ldr	r0, [pc, #80]	; (8001190 <MX_TIM1_Init+0x9c>)
 8001140:	f004 fc2e 	bl	80059a0 <HAL_TIM_Base_Init>
 8001144:	4603      	mov	r3, r0
 8001146:	2b00      	cmp	r3, #0
 8001148:	d001      	beq.n	800114e <MX_TIM1_Init+0x5a>
    {
        Error_Handler();
 800114a:	f000 fb23 	bl	8001794 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800114e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001152:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 8001154:	f107 0308 	add.w	r3, r7, #8
 8001158:	4619      	mov	r1, r3
 800115a:	480d      	ldr	r0, [pc, #52]	; (8001190 <MX_TIM1_Init+0x9c>)
 800115c:	f005 fabe 	bl	80066dc <HAL_TIM_ConfigClockSource>
 8001160:	4603      	mov	r3, r0
 8001162:	2b00      	cmp	r3, #0
 8001164:	d001      	beq.n	800116a <MX_TIM1_Init+0x76>
    {
        Error_Handler();
 8001166:	f000 fb15 	bl	8001794 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800116a:	2300      	movs	r3, #0
 800116c:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800116e:	2300      	movs	r3, #0
 8001170:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001172:	463b      	mov	r3, r7
 8001174:	4619      	mov	r1, r3
 8001176:	4806      	ldr	r0, [pc, #24]	; (8001190 <MX_TIM1_Init+0x9c>)
 8001178:	f005 ff8a 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 800117c:	4603      	mov	r3, r0
 800117e:	2b00      	cmp	r3, #0
 8001180:	d001      	beq.n	8001186 <MX_TIM1_Init+0x92>
    {
        Error_Handler();
 8001182:	f000 fb07 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN TIM1_Init 2 */

    /* USER CODE END TIM1_Init 2 */
}
 8001186:	bf00      	nop
 8001188:	3718      	adds	r7, #24
 800118a:	46bd      	mov	sp, r7
 800118c:	bd80      	pop	{r7, pc}
 800118e:	bf00      	nop
 8001190:	200015d8 	.word	0x200015d8
 8001194:	40010000 	.word	0x40010000

08001198 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001198:	b580      	push	{r7, lr}
 800119a:	b08a      	sub	sp, #40	; 0x28
 800119c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM2_Init 0 */

    /* USER CODE END TIM2_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800119e:	f107 0318 	add.w	r3, r7, #24
 80011a2:	2200      	movs	r2, #0
 80011a4:	601a      	str	r2, [r3, #0]
 80011a6:	605a      	str	r2, [r3, #4]
 80011a8:	609a      	str	r2, [r3, #8]
 80011aa:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 80011ac:	f107 0310 	add.w	r3, r7, #16
 80011b0:	2200      	movs	r2, #0
 80011b2:	601a      	str	r2, [r3, #0]
 80011b4:	605a      	str	r2, [r3, #4]
    TIM_IC_InitTypeDef sConfigIC = {0};
 80011b6:	463b      	mov	r3, r7
 80011b8:	2200      	movs	r2, #0
 80011ba:	601a      	str	r2, [r3, #0]
 80011bc:	605a      	str	r2, [r3, #4]
 80011be:	609a      	str	r2, [r3, #8]
 80011c0:	60da      	str	r2, [r3, #12]

    /* USER CODE BEGIN TIM2_Init 1 */

    /* USER CODE END TIM2_Init 1 */
    htim2.Instance = TIM2;
 80011c2:	4b2c      	ldr	r3, [pc, #176]	; (8001274 <MX_TIM2_Init+0xdc>)
 80011c4:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80011c8:	601a      	str	r2, [r3, #0]
    htim2.Init.Prescaler = 1869;
 80011ca:	4b2a      	ldr	r3, [pc, #168]	; (8001274 <MX_TIM2_Init+0xdc>)
 80011cc:	f240 724d 	movw	r2, #1869	; 0x74d
 80011d0:	605a      	str	r2, [r3, #4]
    htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80011d2:	4b28      	ldr	r3, [pc, #160]	; (8001274 <MX_TIM2_Init+0xdc>)
 80011d4:	2200      	movs	r2, #0
 80011d6:	609a      	str	r2, [r3, #8]
    htim2.Init.Period = 999;
 80011d8:	4b26      	ldr	r3, [pc, #152]	; (8001274 <MX_TIM2_Init+0xdc>)
 80011da:	f240 32e7 	movw	r2, #999	; 0x3e7
 80011de:	60da      	str	r2, [r3, #12]
    htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80011e0:	4b24      	ldr	r3, [pc, #144]	; (8001274 <MX_TIM2_Init+0xdc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	611a      	str	r2, [r3, #16]
    htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80011e6:	4b23      	ldr	r3, [pc, #140]	; (8001274 <MX_TIM2_Init+0xdc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80011ec:	4821      	ldr	r0, [pc, #132]	; (8001274 <MX_TIM2_Init+0xdc>)
 80011ee:	f004 fbd7 	bl	80059a0 <HAL_TIM_Base_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <MX_TIM2_Init+0x64>
    {
        Error_Handler();
 80011f8:	f000 facc 	bl	8001794 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80011fc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001200:	61bb      	str	r3, [r7, #24]
    if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001202:	f107 0318 	add.w	r3, r7, #24
 8001206:	4619      	mov	r1, r3
 8001208:	481a      	ldr	r0, [pc, #104]	; (8001274 <MX_TIM2_Init+0xdc>)
 800120a:	f005 fa67 	bl	80066dc <HAL_TIM_ConfigClockSource>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <MX_TIM2_Init+0x80>
    {
        Error_Handler();
 8001214:	f000 fabe 	bl	8001794 <Error_Handler>
    }
    if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8001218:	4816      	ldr	r0, [pc, #88]	; (8001274 <MX_TIM2_Init+0xdc>)
 800121a:	f004 fdd7 	bl	8005dcc <HAL_TIM_IC_Init>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <MX_TIM2_Init+0x90>
    {
        Error_Handler();
 8001224:	f000 fab6 	bl	8001794 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001228:	2300      	movs	r3, #0
 800122a:	613b      	str	r3, [r7, #16]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800122c:	2300      	movs	r3, #0
 800122e:	617b      	str	r3, [r7, #20]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001230:	f107 0310 	add.w	r3, r7, #16
 8001234:	4619      	mov	r1, r3
 8001236:	480f      	ldr	r0, [pc, #60]	; (8001274 <MX_TIM2_Init+0xdc>)
 8001238:	f005 ff2a 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 800123c:	4603      	mov	r3, r0
 800123e:	2b00      	cmp	r3, #0
 8001240:	d001      	beq.n	8001246 <MX_TIM2_Init+0xae>
    {
        Error_Handler();
 8001242:	f000 faa7 	bl	8001794 <Error_Handler>
    }
    sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_BOTHEDGE;
 8001246:	230a      	movs	r3, #10
 8001248:	603b      	str	r3, [r7, #0]
    sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 800124a:	2301      	movs	r3, #1
 800124c:	607b      	str	r3, [r7, #4]
    sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 800124e:	2300      	movs	r3, #0
 8001250:	60bb      	str	r3, [r7, #8]
    sConfigIC.ICFilter = 0;
 8001252:	2300      	movs	r3, #0
 8001254:	60fb      	str	r3, [r7, #12]
    if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8001256:	463b      	mov	r3, r7
 8001258:	2200      	movs	r2, #0
 800125a:	4619      	mov	r1, r3
 800125c:	4805      	ldr	r0, [pc, #20]	; (8001274 <MX_TIM2_Init+0xdc>)
 800125e:	f005 f8df 	bl	8006420 <HAL_TIM_IC_ConfigChannel>
 8001262:	4603      	mov	r3, r0
 8001264:	2b00      	cmp	r3, #0
 8001266:	d001      	beq.n	800126c <MX_TIM2_Init+0xd4>
    {
        Error_Handler();
 8001268:	f000 fa94 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN TIM2_Init 2 */

    /* USER CODE END TIM2_Init 2 */
}
 800126c:	bf00      	nop
 800126e:	3728      	adds	r7, #40	; 0x28
 8001270:	46bd      	mov	sp, r7
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20001620 	.word	0x20001620

08001278 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b08e      	sub	sp, #56	; 0x38
 800127c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM3_Init 0 */

    /* USER CODE END TIM3_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800127e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001282:	2200      	movs	r2, #0
 8001284:	601a      	str	r2, [r3, #0]
 8001286:	605a      	str	r2, [r3, #4]
 8001288:	609a      	str	r2, [r3, #8]
 800128a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800128c:	f107 0320 	add.w	r3, r7, #32
 8001290:	2200      	movs	r2, #0
 8001292:	601a      	str	r2, [r3, #0]
 8001294:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001296:	1d3b      	adds	r3, r7, #4
 8001298:	2200      	movs	r2, #0
 800129a:	601a      	str	r2, [r3, #0]
 800129c:	605a      	str	r2, [r3, #4]
 800129e:	609a      	str	r2, [r3, #8]
 80012a0:	60da      	str	r2, [r3, #12]
 80012a2:	611a      	str	r2, [r3, #16]
 80012a4:	615a      	str	r2, [r3, #20]
 80012a6:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM3_Init 1 */

    /* USER CODE END TIM3_Init 1 */
    htim3.Instance = TIM3;
 80012a8:	4b2c      	ldr	r3, [pc, #176]	; (800135c <MX_TIM3_Init+0xe4>)
 80012aa:	4a2d      	ldr	r2, [pc, #180]	; (8001360 <MX_TIM3_Init+0xe8>)
 80012ac:	601a      	str	r2, [r3, #0]
    htim3.Init.Prescaler = 21;
 80012ae:	4b2b      	ldr	r3, [pc, #172]	; (800135c <MX_TIM3_Init+0xe4>)
 80012b0:	2215      	movs	r2, #21
 80012b2:	605a      	str	r2, [r3, #4]
    htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012b4:	4b29      	ldr	r3, [pc, #164]	; (800135c <MX_TIM3_Init+0xe4>)
 80012b6:	2200      	movs	r2, #0
 80012b8:	609a      	str	r2, [r3, #8]
    htim3.Init.Period = 100;
 80012ba:	4b28      	ldr	r3, [pc, #160]	; (800135c <MX_TIM3_Init+0xe4>)
 80012bc:	2264      	movs	r2, #100	; 0x64
 80012be:	60da      	str	r2, [r3, #12]
    htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012c0:	4b26      	ldr	r3, [pc, #152]	; (800135c <MX_TIM3_Init+0xe4>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	611a      	str	r2, [r3, #16]
    htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c6:	4b25      	ldr	r3, [pc, #148]	; (800135c <MX_TIM3_Init+0xe4>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80012cc:	4823      	ldr	r0, [pc, #140]	; (800135c <MX_TIM3_Init+0xe4>)
 80012ce:	f004 fb67 	bl	80059a0 <HAL_TIM_Base_Init>
 80012d2:	4603      	mov	r3, r0
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d001      	beq.n	80012dc <MX_TIM3_Init+0x64>
    {
        Error_Handler();
 80012d8:	f000 fa5c 	bl	8001794 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80012dc:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80012e0:	62bb      	str	r3, [r7, #40]	; 0x28
    if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80012e2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80012e6:	4619      	mov	r1, r3
 80012e8:	481c      	ldr	r0, [pc, #112]	; (800135c <MX_TIM3_Init+0xe4>)
 80012ea:	f005 f9f7 	bl	80066dc <HAL_TIM_ConfigClockSource>
 80012ee:	4603      	mov	r3, r0
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d001      	beq.n	80012f8 <MX_TIM3_Init+0x80>
    {
        Error_Handler();
 80012f4:	f000 fa4e 	bl	8001794 <Error_Handler>
    }
    if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80012f8:	4818      	ldr	r0, [pc, #96]	; (800135c <MX_TIM3_Init+0xe4>)
 80012fa:	f004 fc03 	bl	8005b04 <HAL_TIM_PWM_Init>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <MX_TIM3_Init+0x90>
    {
        Error_Handler();
 8001304:	f000 fa46 	bl	8001794 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001308:	2300      	movs	r3, #0
 800130a:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800130c:	2300      	movs	r3, #0
 800130e:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001310:	f107 0320 	add.w	r3, r7, #32
 8001314:	4619      	mov	r1, r3
 8001316:	4811      	ldr	r0, [pc, #68]	; (800135c <MX_TIM3_Init+0xe4>)
 8001318:	f005 feba 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM3_Init+0xae>
    {
        Error_Handler();
 8001322:	f000 fa37 	bl	8001794 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001326:	2360      	movs	r3, #96	; 0x60
 8001328:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800132e:	2300      	movs	r3, #0
 8001330:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001332:	2300      	movs	r3, #0
 8001334:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8001336:	1d3b      	adds	r3, r7, #4
 8001338:	2204      	movs	r2, #4
 800133a:	4619      	mov	r1, r3
 800133c:	4807      	ldr	r0, [pc, #28]	; (800135c <MX_TIM3_Init+0xe4>)
 800133e:	f005 f90b 	bl	8006558 <HAL_TIM_PWM_ConfigChannel>
 8001342:	4603      	mov	r3, r0
 8001344:	2b00      	cmp	r3, #0
 8001346:	d001      	beq.n	800134c <MX_TIM3_Init+0xd4>
    {
        Error_Handler();
 8001348:	f000 fa24 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN TIM3_Init 2 */

    /* USER CODE END TIM3_Init 2 */
    HAL_TIM_MspPostInit(&htim3);
 800134c:	4803      	ldr	r0, [pc, #12]	; (800135c <MX_TIM3_Init+0xe4>)
 800134e:	f001 fbf9 	bl	8002b44 <HAL_TIM_MspPostInit>
}
 8001352:	bf00      	nop
 8001354:	3738      	adds	r7, #56	; 0x38
 8001356:	46bd      	mov	sp, r7
 8001358:	bd80      	pop	{r7, pc}
 800135a:	bf00      	nop
 800135c:	20001668 	.word	0x20001668
 8001360:	40000400 	.word	0x40000400

08001364 <MX_TIM4_Init>:
 * @brief TIM4 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM4_Init(void)
{
 8001364:	b580      	push	{r7, lr}
 8001366:	b08a      	sub	sp, #40	; 0x28
 8001368:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM4_Init 0 */

    /* USER CODE END TIM4_Init 0 */

    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800136a:	f107 0320 	add.w	r3, r7, #32
 800136e:	2200      	movs	r2, #0
 8001370:	601a      	str	r2, [r3, #0]
 8001372:	605a      	str	r2, [r3, #4]
    TIM_OC_InitTypeDef sConfigOC = {0};
 8001374:	1d3b      	adds	r3, r7, #4
 8001376:	2200      	movs	r2, #0
 8001378:	601a      	str	r2, [r3, #0]
 800137a:	605a      	str	r2, [r3, #4]
 800137c:	609a      	str	r2, [r3, #8]
 800137e:	60da      	str	r2, [r3, #12]
 8001380:	611a      	str	r2, [r3, #16]
 8001382:	615a      	str	r2, [r3, #20]
 8001384:	619a      	str	r2, [r3, #24]

    /* USER CODE BEGIN TIM4_Init 1 */

    /* USER CODE END TIM4_Init 1 */
    htim4.Instance = TIM4;
 8001386:	4b22      	ldr	r3, [pc, #136]	; (8001410 <MX_TIM4_Init+0xac>)
 8001388:	4a22      	ldr	r2, [pc, #136]	; (8001414 <MX_TIM4_Init+0xb0>)
 800138a:	601a      	str	r2, [r3, #0]
    htim4.Init.Prescaler = 511;
 800138c:	4b20      	ldr	r3, [pc, #128]	; (8001410 <MX_TIM4_Init+0xac>)
 800138e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8001392:	605a      	str	r2, [r3, #4]
    htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001394:	4b1e      	ldr	r3, [pc, #120]	; (8001410 <MX_TIM4_Init+0xac>)
 8001396:	2200      	movs	r2, #0
 8001398:	609a      	str	r2, [r3, #8]
    htim4.Init.Period = 1999;
 800139a:	4b1d      	ldr	r3, [pc, #116]	; (8001410 <MX_TIM4_Init+0xac>)
 800139c:	f240 72cf 	movw	r2, #1999	; 0x7cf
 80013a0:	60da      	str	r2, [r3, #12]
    htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a2:	4b1b      	ldr	r3, [pc, #108]	; (8001410 <MX_TIM4_Init+0xac>)
 80013a4:	2200      	movs	r2, #0
 80013a6:	611a      	str	r2, [r3, #16]
    htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013a8:	4b19      	ldr	r3, [pc, #100]	; (8001410 <MX_TIM4_Init+0xac>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80013ae:	4818      	ldr	r0, [pc, #96]	; (8001410 <MX_TIM4_Init+0xac>)
 80013b0:	f004 fba8 	bl	8005b04 <HAL_TIM_PWM_Init>
 80013b4:	4603      	mov	r3, r0
 80013b6:	2b00      	cmp	r3, #0
 80013b8:	d001      	beq.n	80013be <MX_TIM4_Init+0x5a>
    {
        Error_Handler();
 80013ba:	f000 f9eb 	bl	8001794 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013be:	2300      	movs	r3, #0
 80013c0:	623b      	str	r3, [r7, #32]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c2:	2300      	movs	r3, #0
 80013c4:	627b      	str	r3, [r7, #36]	; 0x24
    if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80013c6:	f107 0320 	add.w	r3, r7, #32
 80013ca:	4619      	mov	r1, r3
 80013cc:	4810      	ldr	r0, [pc, #64]	; (8001410 <MX_TIM4_Init+0xac>)
 80013ce:	f005 fe5f 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM4_Init+0x78>
    {
        Error_Handler();
 80013d8:	f000 f9dc 	bl	8001794 <Error_Handler>
    }
    sConfigOC.OCMode = TIM_OCMODE_PWM2;
 80013dc:	2370      	movs	r3, #112	; 0x70
 80013de:	607b      	str	r3, [r7, #4]
    sConfigOC.Pulse = 0;
 80013e0:	2300      	movs	r3, #0
 80013e2:	60bb      	str	r3, [r7, #8]
    sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80013e4:	2300      	movs	r3, #0
 80013e6:	60fb      	str	r3, [r7, #12]
    sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80013e8:	2300      	movs	r3, #0
 80013ea:	617b      	str	r3, [r7, #20]
    if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80013ec:	1d3b      	adds	r3, r7, #4
 80013ee:	2204      	movs	r2, #4
 80013f0:	4619      	mov	r1, r3
 80013f2:	4807      	ldr	r0, [pc, #28]	; (8001410 <MX_TIM4_Init+0xac>)
 80013f4:	f005 f8b0 	bl	8006558 <HAL_TIM_PWM_ConfigChannel>
 80013f8:	4603      	mov	r3, r0
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d001      	beq.n	8001402 <MX_TIM4_Init+0x9e>
    {
        Error_Handler();
 80013fe:	f000 f9c9 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN TIM4_Init 2 */

    /* USER CODE END TIM4_Init 2 */
    HAL_TIM_MspPostInit(&htim4);
 8001402:	4803      	ldr	r0, [pc, #12]	; (8001410 <MX_TIM4_Init+0xac>)
 8001404:	f001 fb9e 	bl	8002b44 <HAL_TIM_MspPostInit>
}
 8001408:	bf00      	nop
 800140a:	3728      	adds	r7, #40	; 0x28
 800140c:	46bd      	mov	sp, r7
 800140e:	bd80      	pop	{r7, pc}
 8001410:	200016b0 	.word	0x200016b0
 8001414:	40000800 	.word	0x40000800

08001418 <MX_TIM5_Init>:
 * @brief TIM5 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM5_Init(void)
{
 8001418:	b580      	push	{r7, lr}
 800141a:	b086      	sub	sp, #24
 800141c:	af00      	add	r7, sp, #0

    /* USER CODE BEGIN TIM5_Init 0 */

    /* USER CODE END TIM5_Init 0 */

    TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800141e:	f107 0308 	add.w	r3, r7, #8
 8001422:	2200      	movs	r2, #0
 8001424:	601a      	str	r2, [r3, #0]
 8001426:	605a      	str	r2, [r3, #4]
 8001428:	609a      	str	r2, [r3, #8]
 800142a:	60da      	str	r2, [r3, #12]
    TIM_MasterConfigTypeDef sMasterConfig = {0};
 800142c:	463b      	mov	r3, r7
 800142e:	2200      	movs	r2, #0
 8001430:	601a      	str	r2, [r3, #0]
 8001432:	605a      	str	r2, [r3, #4]

    /* USER CODE BEGIN TIM5_Init 1 */

    /* USER CODE END TIM5_Init 1 */
    htim5.Instance = TIM5;
 8001434:	4b1d      	ldr	r3, [pc, #116]	; (80014ac <MX_TIM5_Init+0x94>)
 8001436:	4a1e      	ldr	r2, [pc, #120]	; (80014b0 <MX_TIM5_Init+0x98>)
 8001438:	601a      	str	r2, [r3, #0]
    htim5.Init.Prescaler = 83;
 800143a:	4b1c      	ldr	r3, [pc, #112]	; (80014ac <MX_TIM5_Init+0x94>)
 800143c:	2253      	movs	r2, #83	; 0x53
 800143e:	605a      	str	r2, [r3, #4]
    htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001440:	4b1a      	ldr	r3, [pc, #104]	; (80014ac <MX_TIM5_Init+0x94>)
 8001442:	2200      	movs	r2, #0
 8001444:	609a      	str	r2, [r3, #8]
    htim5.Init.Period = 49999;
 8001446:	4b19      	ldr	r3, [pc, #100]	; (80014ac <MX_TIM5_Init+0x94>)
 8001448:	f24c 324f 	movw	r2, #49999	; 0xc34f
 800144c:	60da      	str	r2, [r3, #12]
    htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800144e:	4b17      	ldr	r3, [pc, #92]	; (80014ac <MX_TIM5_Init+0x94>)
 8001450:	2200      	movs	r2, #0
 8001452:	611a      	str	r2, [r3, #16]
    htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8001454:	4b15      	ldr	r3, [pc, #84]	; (80014ac <MX_TIM5_Init+0x94>)
 8001456:	2280      	movs	r2, #128	; 0x80
 8001458:	619a      	str	r2, [r3, #24]
    if (HAL_TIM_Base_Init(&htim5) != HAL_OK)
 800145a:	4814      	ldr	r0, [pc, #80]	; (80014ac <MX_TIM5_Init+0x94>)
 800145c:	f004 faa0 	bl	80059a0 <HAL_TIM_Base_Init>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM5_Init+0x52>
    {
        Error_Handler();
 8001466:	f000 f995 	bl	8001794 <Error_Handler>
    }
    sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146a:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800146e:	60bb      	str	r3, [r7, #8]
    if (HAL_TIM_ConfigClockSource(&htim5, &sClockSourceConfig) != HAL_OK)
 8001470:	f107 0308 	add.w	r3, r7, #8
 8001474:	4619      	mov	r1, r3
 8001476:	480d      	ldr	r0, [pc, #52]	; (80014ac <MX_TIM5_Init+0x94>)
 8001478:	f005 f930 	bl	80066dc <HAL_TIM_ConfigClockSource>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d001      	beq.n	8001486 <MX_TIM5_Init+0x6e>
    {
        Error_Handler();
 8001482:	f000 f987 	bl	8001794 <Error_Handler>
    }
    sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001486:	2300      	movs	r3, #0
 8001488:	603b      	str	r3, [r7, #0]
    sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800148a:	2300      	movs	r3, #0
 800148c:	607b      	str	r3, [r7, #4]
    if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 800148e:	463b      	mov	r3, r7
 8001490:	4619      	mov	r1, r3
 8001492:	4806      	ldr	r0, [pc, #24]	; (80014ac <MX_TIM5_Init+0x94>)
 8001494:	f005 fdfc 	bl	8007090 <HAL_TIMEx_MasterConfigSynchronization>
 8001498:	4603      	mov	r3, r0
 800149a:	2b00      	cmp	r3, #0
 800149c:	d001      	beq.n	80014a2 <MX_TIM5_Init+0x8a>
    {
        Error_Handler();
 800149e:	f000 f979 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN TIM5_Init 2 */

    /* USER CODE END TIM5_Init 2 */
}
 80014a2:	bf00      	nop
 80014a4:	3718      	adds	r7, #24
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bd80      	pop	{r7, pc}
 80014aa:	bf00      	nop
 80014ac:	200016f8 	.word	0x200016f8
 80014b0:	40000c00 	.word	0x40000c00

080014b4 <MX_USART1_UART_Init>:
 * @brief USART1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART1_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
    /* USER CODE END USART1_Init 0 */

    /* USER CODE BEGIN USART1_Init 1 */

    /* USER CODE END USART1_Init 1 */
    huart1.Instance = USART1;
 80014b8:	4b11      	ldr	r3, [pc, #68]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ba:	4a12      	ldr	r2, [pc, #72]	; (8001504 <MX_USART1_UART_Init+0x50>)
 80014bc:	601a      	str	r2, [r3, #0]
    huart1.Init.BaudRate = 9600;
 80014be:	4b10      	ldr	r3, [pc, #64]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014c0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80014c4:	605a      	str	r2, [r3, #4]
    huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80014c6:	4b0e      	ldr	r3, [pc, #56]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014c8:	2200      	movs	r2, #0
 80014ca:	609a      	str	r2, [r3, #8]
    huart1.Init.StopBits = UART_STOPBITS_1;
 80014cc:	4b0c      	ldr	r3, [pc, #48]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ce:	2200      	movs	r2, #0
 80014d0:	60da      	str	r2, [r3, #12]
    huart1.Init.Parity = UART_PARITY_NONE;
 80014d2:	4b0b      	ldr	r3, [pc, #44]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014d4:	2200      	movs	r2, #0
 80014d6:	611a      	str	r2, [r3, #16]
    huart1.Init.Mode = UART_MODE_TX_RX;
 80014d8:	4b09      	ldr	r3, [pc, #36]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014da:	220c      	movs	r2, #12
 80014dc:	615a      	str	r2, [r3, #20]
    huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014de:	4b08      	ldr	r3, [pc, #32]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014e0:	2200      	movs	r2, #0
 80014e2:	619a      	str	r2, [r3, #24]
    huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e4:	4b06      	ldr	r3, [pc, #24]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
    if (HAL_UART_Init(&huart1) != HAL_OK)
 80014ea:	4805      	ldr	r0, [pc, #20]	; (8001500 <MX_USART1_UART_Init+0x4c>)
 80014ec:	f005 fe52 	bl	8007194 <HAL_UART_Init>
 80014f0:	4603      	mov	r3, r0
 80014f2:	2b00      	cmp	r3, #0
 80014f4:	d001      	beq.n	80014fa <MX_USART1_UART_Init+0x46>
    {
        Error_Handler();
 80014f6:	f000 f94d 	bl	8001794 <Error_Handler>
    }
    /* USER CODE BEGIN USART1_Init 2 */

    /* USER CODE END USART1_Init 2 */
}
 80014fa:	bf00      	nop
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	20001740 	.word	0x20001740
 8001504:	40011000 	.word	0x40011000

08001508 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	b088      	sub	sp, #32
 800150c:	af00      	add	r7, sp, #0
    GPIO_InitTypeDef GPIO_InitStruct = {0};
 800150e:	f107 030c 	add.w	r3, r7, #12
 8001512:	2200      	movs	r2, #0
 8001514:	601a      	str	r2, [r3, #0]
 8001516:	605a      	str	r2, [r3, #4]
 8001518:	609a      	str	r2, [r3, #8]
 800151a:	60da      	str	r2, [r3, #12]
 800151c:	611a      	str	r2, [r3, #16]

    /* GPIO Ports Clock Enable */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800151e:	2300      	movs	r3, #0
 8001520:	60bb      	str	r3, [r7, #8]
 8001522:	4b44      	ldr	r3, [pc, #272]	; (8001634 <MX_GPIO_Init+0x12c>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	4a43      	ldr	r2, [pc, #268]	; (8001634 <MX_GPIO_Init+0x12c>)
 8001528:	f043 0304 	orr.w	r3, r3, #4
 800152c:	6313      	str	r3, [r2, #48]	; 0x30
 800152e:	4b41      	ldr	r3, [pc, #260]	; (8001634 <MX_GPIO_Init+0x12c>)
 8001530:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001532:	f003 0304 	and.w	r3, r3, #4
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	68bb      	ldr	r3, [r7, #8]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800153a:	2300      	movs	r3, #0
 800153c:	607b      	str	r3, [r7, #4]
 800153e:	4b3d      	ldr	r3, [pc, #244]	; (8001634 <MX_GPIO_Init+0x12c>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	4a3c      	ldr	r2, [pc, #240]	; (8001634 <MX_GPIO_Init+0x12c>)
 8001544:	f043 0301 	orr.w	r3, r3, #1
 8001548:	6313      	str	r3, [r2, #48]	; 0x30
 800154a:	4b3a      	ldr	r3, [pc, #232]	; (8001634 <MX_GPIO_Init+0x12c>)
 800154c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800154e:	f003 0301 	and.w	r3, r3, #1
 8001552:	607b      	str	r3, [r7, #4]
 8001554:	687b      	ldr	r3, [r7, #4]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001556:	2300      	movs	r3, #0
 8001558:	603b      	str	r3, [r7, #0]
 800155a:	4b36      	ldr	r3, [pc, #216]	; (8001634 <MX_GPIO_Init+0x12c>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	4a35      	ldr	r2, [pc, #212]	; (8001634 <MX_GPIO_Init+0x12c>)
 8001560:	f043 0302 	orr.w	r3, r3, #2
 8001564:	6313      	str	r3, [r2, #48]	; 0x30
 8001566:	4b33      	ldr	r3, [pc, #204]	; (8001634 <MX_GPIO_Init+0x12c>)
 8001568:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156a:	f003 0302 	and.w	r3, r3, #2
 800156e:	603b      	str	r3, [r7, #0]
 8001570:	683b      	ldr	r3, [r7, #0]

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOA, GPIO_PIN_0 | GPIO_PIN_1 | LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7, GPIO_PIN_RESET);
 8001572:	2200      	movs	r2, #0
 8001574:	21e3      	movs	r1, #227	; 0xe3
 8001576:	4830      	ldr	r0, [pc, #192]	; (8001638 <MX_GPIO_Init+0x130>)
 8001578:	f002 fb3a 	bl	8003bf0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin Output Level */
    HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 800157c:	2200      	movs	r2, #0
 800157e:	2140      	movs	r1, #64	; 0x40
 8001580:	482e      	ldr	r0, [pc, #184]	; (800163c <MX_GPIO_Init+0x134>)
 8001582:	f002 fb35 	bl	8003bf0 <HAL_GPIO_WritePin>

    /*Configure GPIO pin : B1_Pin */
    GPIO_InitStruct.Pin = B1_Pin;
 8001586:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800158a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800158c:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 8001590:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001592:	2300      	movs	r3, #0
 8001594:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001596:	f107 030c 	add.w	r3, r7, #12
 800159a:	4619      	mov	r1, r3
 800159c:	4828      	ldr	r0, [pc, #160]	; (8001640 <MX_GPIO_Init+0x138>)
 800159e:	f002 f98b 	bl	80038b8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA0 PA1 LD2_Pin PA6
                             PA7 */
    GPIO_InitStruct.Pin = GPIO_PIN_0 | GPIO_PIN_1 | LD2_Pin | GPIO_PIN_6 | GPIO_PIN_7;
 80015a2:	23e3      	movs	r3, #227	; 0xe3
 80015a4:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015a6:	2301      	movs	r3, #1
 80015a8:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015aa:	2300      	movs	r3, #0
 80015ac:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015ae:	2300      	movs	r3, #0
 80015b0:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015b2:	f107 030c 	add.w	r3, r7, #12
 80015b6:	4619      	mov	r1, r3
 80015b8:	481f      	ldr	r0, [pc, #124]	; (8001638 <MX_GPIO_Init+0x130>)
 80015ba:	f002 f97d 	bl	80038b8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PA2 PA3 */
    GPIO_InitStruct.Pin = GPIO_PIN_2 | GPIO_PIN_3;
 80015be:	230c      	movs	r3, #12
 80015c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015c2:	2302      	movs	r3, #2
 80015c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c6:	2300      	movs	r3, #0
 80015c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015ca:	2303      	movs	r3, #3
 80015cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80015ce:	2307      	movs	r3, #7
 80015d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015d2:	f107 030c 	add.w	r3, r7, #12
 80015d6:	4619      	mov	r1, r3
 80015d8:	4817      	ldr	r0, [pc, #92]	; (8001638 <MX_GPIO_Init+0x130>)
 80015da:	f002 f96d 	bl	80038b8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PC6 PC8 */
    GPIO_InitStruct.Pin = GPIO_PIN_6 | GPIO_PIN_8;
 80015de:	f44f 73a0 	mov.w	r3, #320	; 0x140
 80015e2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015e4:	2300      	movs	r3, #0
 80015e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015e8:	2300      	movs	r3, #0
 80015ea:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015ec:	f107 030c 	add.w	r3, r7, #12
 80015f0:	4619      	mov	r1, r3
 80015f2:	4813      	ldr	r0, [pc, #76]	; (8001640 <MX_GPIO_Init+0x138>)
 80015f4:	f002 f960 	bl	80038b8 <HAL_GPIO_Init>

    /*Configure GPIO pins : PB3 PB4 PB5 */
    GPIO_InitStruct.Pin = GPIO_PIN_3 | GPIO_PIN_4 | GPIO_PIN_5;
 80015f8:	2338      	movs	r3, #56	; 0x38
 80015fa:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80015fc:	2300      	movs	r3, #0
 80015fe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001600:	2301      	movs	r3, #1
 8001602:	617b      	str	r3, [r7, #20]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001604:	f107 030c 	add.w	r3, r7, #12
 8001608:	4619      	mov	r1, r3
 800160a:	480c      	ldr	r0, [pc, #48]	; (800163c <MX_GPIO_Init+0x134>)
 800160c:	f002 f954 	bl	80038b8 <HAL_GPIO_Init>

    /*Configure GPIO pin : PB6 */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001610:	2340      	movs	r3, #64	; 0x40
 8001612:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001614:	2301      	movs	r3, #1
 8001616:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001618:	2300      	movs	r3, #0
 800161a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800161c:	2300      	movs	r3, #0
 800161e:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001620:	f107 030c 	add.w	r3, r7, #12
 8001624:	4619      	mov	r1, r3
 8001626:	4805      	ldr	r0, [pc, #20]	; (800163c <MX_GPIO_Init+0x134>)
 8001628:	f002 f946 	bl	80038b8 <HAL_GPIO_Init>
}
 800162c:	bf00      	nop
 800162e:	3720      	adds	r7, #32
 8001630:	46bd      	mov	sp, r7
 8001632:	bd80      	pop	{r7, pc}
 8001634:	40023800 	.word	0x40023800
 8001638:	40020000 	.word	0x40020000
 800163c:	40020400 	.word	0x40020400
 8001640:	40020800 	.word	0x40020800

08001644 <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
// Callback: timer has rolled over
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001644:	b580      	push	{r7, lr}
 8001646:	b082      	sub	sp, #8
 8001648:	af00      	add	r7, sp, #0
 800164a:	6078      	str	r0, [r7, #4]
    // 50ms Poll Button Timer

    if (htim == &htim5)
 800164c:	687b      	ldr	r3, [r7, #4]
 800164e:	4a49      	ldr	r2, [pc, #292]	; (8001774 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8001650:	4293      	cmp	r3, r2
 8001652:	f040 808b 	bne.w	800176c <HAL_TIM_PeriodElapsedCallback+0x128>
        // Count the number of times the interrupt fires for flashing
        static uint8_t i = 0;
        // Set high if the button has been released, low while pressed
        static uint8_t released = 1;

        button = poll_buttons();
 8001656:	f7ff f845 	bl	80006e4 <poll_buttons>
 800165a:	4603      	mov	r3, r0
 800165c:	461a      	mov	r2, r3
 800165e:	4b46      	ldr	r3, [pc, #280]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001660:	701a      	strb	r2, [r3, #0]
        pollnow = 1;
 8001662:	4b46      	ldr	r3, [pc, #280]	; (800177c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8001664:	2201      	movs	r2, #1
 8001666:	701a      	strb	r2, [r3, #0]
        if (!awake)
 8001668:	4b45      	ldr	r3, [pc, #276]	; (8001780 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	2b00      	cmp	r3, #0
 800166e:	d07c      	beq.n	800176a <HAL_TIM_PeriodElapsedCallback+0x126>
            return;
        // If a new button is pressed
        if (button && released)
 8001670:	4b41      	ldr	r3, [pc, #260]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8001672:	781b      	ldrb	r3, [r3, #0]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d01b      	beq.n	80016b0 <HAL_TIM_PeriodElapsedCallback+0x6c>
 8001678:	4b42      	ldr	r3, [pc, #264]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x140>)
 800167a:	781b      	ldrb	r3, [r3, #0]
 800167c:	2b00      	cmp	r3, #0
 800167e:	d017      	beq.n	80016b0 <HAL_TIM_PeriodElapsedCallback+0x6c>
        {
            // Turn on Button Light
            if (current_menu != settings_menu)
 8001680:	4b41      	ldr	r3, [pc, #260]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001682:	781b      	ldrb	r3, [r3, #0]
 8001684:	2b01      	cmp	r3, #1
 8001686:	d001      	beq.n	800168c <HAL_TIM_PeriodElapsedCallback+0x48>
                enable_all_buttons();
 8001688:	f7fe ffe4 	bl	8000654 <enable_all_buttons>
            disable_button(button);
 800168c:	4b3a      	ldr	r3, [pc, #232]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	4618      	mov	r0, r3
 8001692:	f7fe ff7f 	bl	8000594 <disable_button>
            // Invert display
            update_buttons();
 8001696:	f7ff f807 	bl	80006a8 <update_buttons>

            last_pressed = button;
 800169a:	4b37      	ldr	r3, [pc, #220]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x134>)
 800169c:	781a      	ldrb	r2, [r3, #0]
 800169e:	4b3b      	ldr	r3, [pc, #236]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80016a0:	701a      	strb	r2, [r3, #0]
            released = 0;
 80016a2:	4b38      	ldr	r3, [pc, #224]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80016a4:	2200      	movs	r2, #0
 80016a6:	701a      	strb	r2, [r3, #0]
            i = 0; // Reset counter
 80016a8:	4b39      	ldr	r3, [pc, #228]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80016aa:	2200      	movs	r2, #0
 80016ac:	701a      	strb	r2, [r3, #0]
 80016ae:	e05d      	b.n	800176c <HAL_TIM_PeriodElapsedCallback+0x128>
        }
        else if (!button && last_pressed)
 80016b0:	4b31      	ldr	r3, [pc, #196]	; (8001778 <HAL_TIM_PeriodElapsedCallback+0x134>)
 80016b2:	781b      	ldrb	r3, [r3, #0]
 80016b4:	2b00      	cmp	r3, #0
 80016b6:	d159      	bne.n	800176c <HAL_TIM_PeriodElapsedCallback+0x128>
 80016b8:	4b34      	ldr	r3, [pc, #208]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80016ba:	781b      	ldrb	r3, [r3, #0]
 80016bc:	2b00      	cmp	r3, #0
 80016be:	d055      	beq.n	800176c <HAL_TIM_PeriodElapsedCallback+0x128>
        {
            // if no button is pressed, flash the last pressed
            // button until reaching BUTTON_FLASH_DURATION.
            released = 1;
 80016c0:	4b30      	ldr	r3, [pc, #192]	; (8001784 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80016c2:	2201      	movs	r2, #1
 80016c4:	701a      	strb	r2, [r3, #0]
            ++i;
 80016c6:	4b32      	ldr	r3, [pc, #200]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80016c8:	781b      	ldrb	r3, [r3, #0]
 80016ca:	3301      	adds	r3, #1
 80016cc:	b2da      	uxtb	r2, r3
 80016ce:	4b30      	ldr	r3, [pc, #192]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80016d0:	701a      	strb	r2, [r3, #0]
            if (!(i % 4))
 80016d2:	4b2f      	ldr	r3, [pc, #188]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 80016d4:	781b      	ldrb	r3, [r3, #0]
 80016d6:	f003 0303 	and.w	r3, r3, #3
 80016da:	b2db      	uxtb	r3, r3
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d11b      	bne.n	8001718 <HAL_TIM_PeriodElapsedCallback+0xd4>
            {
                // toggle every 200 ms
                if ((current_menu != awaiting_menu) && ((current_menu != settings_menu) || (last_pressed == 1 || last_pressed == 2 || last_pressed == 9)))
 80016e0:	4b29      	ldr	r3, [pc, #164]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	2b05      	cmp	r3, #5
 80016e6:	d014      	beq.n	8001712 <HAL_TIM_PeriodElapsedCallback+0xce>
 80016e8:	4b27      	ldr	r3, [pc, #156]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80016ea:	781b      	ldrb	r3, [r3, #0]
 80016ec:	2b01      	cmp	r3, #1
 80016ee:	d10b      	bne.n	8001708 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80016f0:	4b26      	ldr	r3, [pc, #152]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80016f2:	781b      	ldrb	r3, [r3, #0]
 80016f4:	2b01      	cmp	r3, #1
 80016f6:	d007      	beq.n	8001708 <HAL_TIM_PeriodElapsedCallback+0xc4>
 80016f8:	4b24      	ldr	r3, [pc, #144]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80016fa:	781b      	ldrb	r3, [r3, #0]
 80016fc:	2b02      	cmp	r3, #2
 80016fe:	d003      	beq.n	8001708 <HAL_TIM_PeriodElapsedCallback+0xc4>
 8001700:	4b22      	ldr	r3, [pc, #136]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001702:	781b      	ldrb	r3, [r3, #0]
 8001704:	2b09      	cmp	r3, #9
 8001706:	d104      	bne.n	8001712 <HAL_TIM_PeriodElapsedCallback+0xce>
                    toggle_button(last_pressed);
 8001708:	4b20      	ldr	r3, [pc, #128]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800170a:	781b      	ldrb	r3, [r3, #0]
 800170c:	4618      	mov	r0, r3
 800170e:	f7fe ff71 	bl	80005f4 <toggle_button>
                // invert display
                update_buttons();
 8001712:	f7fe ffc9 	bl	80006a8 <update_buttons>
 8001716:	e029      	b.n	800176c <HAL_TIM_PeriodElapsedCallback+0x128>
            }
            else if (i > BUTTON_FLASH_DURATION / 50)
 8001718:	4b1d      	ldr	r3, [pc, #116]	; (8001790 <HAL_TIM_PeriodElapsedCallback+0x14c>)
 800171a:	781b      	ldrb	r3, [r3, #0]
 800171c:	2b0c      	cmp	r3, #12
 800171e:	d925      	bls.n	800176c <HAL_TIM_PeriodElapsedCallback+0x128>
            {
                if ((current_menu != awaiting_menu) && ((current_menu != settings_menu) || last_pressed == 1 || last_pressed == 2 || last_pressed == 9))
 8001720:	4b19      	ldr	r3, [pc, #100]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x144>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b05      	cmp	r3, #5
 8001726:	d015      	beq.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x110>
 8001728:	4b17      	ldr	r3, [pc, #92]	; (8001788 <HAL_TIM_PeriodElapsedCallback+0x144>)
 800172a:	781b      	ldrb	r3, [r3, #0]
 800172c:	2b01      	cmp	r3, #1
 800172e:	d10b      	bne.n	8001748 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001730:	4b16      	ldr	r3, [pc, #88]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001732:	781b      	ldrb	r3, [r3, #0]
 8001734:	2b01      	cmp	r3, #1
 8001736:	d007      	beq.n	8001748 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001738:	4b14      	ldr	r3, [pc, #80]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800173a:	781b      	ldrb	r3, [r3, #0]
 800173c:	2b02      	cmp	r3, #2
 800173e:	d003      	beq.n	8001748 <HAL_TIM_PeriodElapsedCallback+0x104>
 8001740:	4b12      	ldr	r3, [pc, #72]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	2b09      	cmp	r3, #9
 8001746:	d105      	bne.n	8001754 <HAL_TIM_PeriodElapsedCallback+0x110>
                    enable_button(last_pressed);
 8001748:	4b10      	ldr	r3, [pc, #64]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	4618      	mov	r0, r3
 800174e:	f7fe feef 	bl	8000530 <enable_button>
 8001752:	e004      	b.n	800175e <HAL_TIM_PeriodElapsedCallback+0x11a>
                else
                    disable_button(last_pressed);
 8001754:	4b0d      	ldr	r3, [pc, #52]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001756:	781b      	ldrb	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe ff1b 	bl	8000594 <disable_button>
                update_buttons();
 800175e:	f7fe ffa3 	bl	80006a8 <update_buttons>
                // set display to not inverted
                // clear the last pressed button and stop flashing
                last_pressed = 0;
 8001762:	4b0a      	ldr	r3, [pc, #40]	; (800178c <HAL_TIM_PeriodElapsedCallback+0x148>)
 8001764:	2200      	movs	r2, #0
 8001766:	701a      	strb	r2, [r3, #0]
 8001768:	e000      	b.n	800176c <HAL_TIM_PeriodElapsedCallback+0x128>
            return;
 800176a:	bf00      	nop
            }
        }
    }
}
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	200016f8 	.word	0x200016f8
 8001778:	20001785 	.word	0x20001785
 800177c:	20015b45 	.word	0x20015b45
 8001780:	20000008 	.word	0x20000008
 8001784:	2000000c 	.word	0x2000000c
 8001788:	20001784 	.word	0x20001784
 800178c:	20015b48 	.word	0x20015b48
 8001790:	20015b49 	.word	0x20015b49

08001794 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8001794:	b480      	push	{r7}
 8001796:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001798:	b672      	cpsid	i
}
 800179a:	bf00      	nop
    /* USER CODE BEGIN Error_Handler_Debug */
    /* User can add his own implementation to report the HAL error return state */
    __disable_irq();
    while (1)
 800179c:	e7fe      	b.n	800179c <Error_Handler+0x8>
	...

080017a0 <display_menu>:
extern void GlobalTransmit(uint16_t [dataLen]);

// Store Menu Commands
static char menu_commands[9][11];

void display_menu(Menu menu, uint8_t page, uint8_t device) {
 80017a0:	b590      	push	{r4, r7, lr}
 80017a2:	b087      	sub	sp, #28
 80017a4:	af00      	add	r7, sp, #0
 80017a6:	4603      	mov	r3, r0
 80017a8:	71fb      	strb	r3, [r7, #7]
 80017aa:	460b      	mov	r3, r1
 80017ac:	71bb      	strb	r3, [r7, #6]
 80017ae:	4613      	mov	r3, r2
 80017b0:	717b      	strb	r3, [r7, #5]
	if (!page) return;
 80017b2:	79bb      	ldrb	r3, [r7, #6]
 80017b4:	2b00      	cmp	r3, #0
 80017b6:	f000 81c4 	beq.w	8001b42 <display_menu+0x3a2>
	current_menu = menu;
 80017ba:	4aa3      	ldr	r2, [pc, #652]	; (8001a48 <display_menu+0x2a8>)
 80017bc:	79fb      	ldrb	r3, [r7, #7]
 80017be:	7013      	strb	r3, [r2, #0]
	current_page = page;
 80017c0:	4aa2      	ldr	r2, [pc, #648]	; (8001a4c <display_menu+0x2ac>)
 80017c2:	79bb      	ldrb	r3, [r7, #6]
 80017c4:	7013      	strb	r3, [r2, #0]
	switch(menu) {
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	2b05      	cmp	r3, #5
 80017ca:	f200 819d 	bhi.w	8001b08 <display_menu+0x368>
 80017ce:	a201      	add	r2, pc, #4	; (adr r2, 80017d4 <display_menu+0x34>)
 80017d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80017d4:	080017ed 	.word	0x080017ed
 80017d8:	08001867 	.word	0x08001867
 80017dc:	080018dd 	.word	0x080018dd
 80017e0:	08001959 	.word	0x08001959
 80017e4:	080019d1 	.word	0x080019d1
 80017e8:	08001a95 	.word	0x08001a95
	case main_menu:
		if (page > MAIN_MENU_PAGE_COUNT) return;
 80017ec:	79bb      	ldrb	r3, [r7, #6]
 80017ee:	2b03      	cmp	r3, #3
 80017f0:	f200 81a9 	bhi.w	8001b46 <display_menu+0x3a6>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 80017f4:	2300      	movs	r3, #0
 80017f6:	75fb      	strb	r3, [r7, #23]
 80017f8:	e01e      	b.n	8001838 <display_menu+0x98>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 80017fa:	7dfa      	ldrb	r2, [r7, #23]
 80017fc:	4613      	mov	r3, r2
 80017fe:	009b      	lsls	r3, r3, #2
 8001800:	4413      	add	r3, r2
 8001802:	005b      	lsls	r3, r3, #1
 8001804:	4413      	add	r3, r2
 8001806:	4a92      	ldr	r2, [pc, #584]	; (8001a50 <display_menu+0x2b0>)
 8001808:	1898      	adds	r0, r3, r2
 800180a:	7df9      	ldrb	r1, [r7, #23]
 800180c:	4b8f      	ldr	r3, [pc, #572]	; (8001a4c <display_menu+0x2ac>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	1e5a      	subs	r2, r3, #1
 8001812:	4613      	mov	r3, r2
 8001814:	005b      	lsls	r3, r3, #1
 8001816:	4413      	add	r3, r2
 8001818:	005b      	lsls	r3, r3, #1
 800181a:	440b      	add	r3, r1
 800181c:	f241 022c 	movw	r2, #4140	; 0x102c
 8001820:	fb02 f303 	mul.w	r3, r2, r3
 8001824:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001828:	4a8a      	ldr	r2, [pc, #552]	; (8001a54 <display_menu+0x2b4>)
 800182a:	4413      	add	r3, r2
 800182c:	4619      	mov	r1, r3
 800182e:	f006 f836 	bl	800789e <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001832:	7dfb      	ldrb	r3, [r7, #23]
 8001834:	3301      	adds	r3, #1
 8001836:	75fb      	strb	r3, [r7, #23]
 8001838:	7dfb      	ldrb	r3, [r7, #23]
 800183a:	2b05      	cmp	r3, #5
 800183c:	d9dd      	bls.n	80017fa <display_menu+0x5a>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 800183e:	4a86      	ldr	r2, [pc, #536]	; (8001a58 <display_menu+0x2b8>)
 8001840:	4b86      	ldr	r3, [pc, #536]	; (8001a5c <display_menu+0x2bc>)
 8001842:	cb03      	ldmia	r3!, {r0, r1}
 8001844:	6010      	str	r0, [r2, #0]
 8001846:	6051      	str	r1, [r2, #4]
 8001848:	881b      	ldrh	r3, [r3, #0]
 800184a:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Settings");
 800184c:	4a84      	ldr	r2, [pc, #528]	; (8001a60 <display_menu+0x2c0>)
 800184e:	4b85      	ldr	r3, [pc, #532]	; (8001a64 <display_menu+0x2c4>)
 8001850:	cb03      	ldmia	r3!, {r0, r1}
 8001852:	6010      	str	r0, [r2, #0]
 8001854:	6051      	str	r1, [r2, #4]
 8001856:	781b      	ldrb	r3, [r3, #0]
 8001858:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 800185a:	4b83      	ldr	r3, [pc, #524]	; (8001a68 <display_menu+0x2c8>)
 800185c:	4a83      	ldr	r2, [pc, #524]	; (8001a6c <display_menu+0x2cc>)
 800185e:	ca07      	ldmia	r2, {r0, r1, r2}
 8001860:	c303      	stmia	r3!, {r0, r1}
 8001862:	801a      	strh	r2, [r3, #0]
		break;
 8001864:	e150      	b.n	8001b08 <display_menu+0x368>
	case settings_menu:
		strcpy(menu_commands[0], "PC Connect");
 8001866:	4b7a      	ldr	r3, [pc, #488]	; (8001a50 <display_menu+0x2b0>)
 8001868:	4a81      	ldr	r2, [pc, #516]	; (8001a70 <display_menu+0x2d0>)
 800186a:	ca07      	ldmia	r2, {r0, r1, r2}
 800186c:	c303      	stmia	r3!, {r0, r1}
 800186e:	801a      	strh	r2, [r3, #0]
 8001870:	3302      	adds	r3, #2
 8001872:	0c12      	lsrs	r2, r2, #16
 8001874:	701a      	strb	r2, [r3, #0]
		strcpy(menu_commands[1], "Learn Cmd");
 8001876:	4a7f      	ldr	r2, [pc, #508]	; (8001a74 <display_menu+0x2d4>)
 8001878:	4b7f      	ldr	r3, [pc, #508]	; (8001a78 <display_menu+0x2d8>)
 800187a:	cb03      	ldmia	r3!, {r0, r1}
 800187c:	6010      	str	r0, [r2, #0]
 800187e:	6051      	str	r1, [r2, #4]
 8001880:	881b      	ldrh	r3, [r3, #0]
 8001882:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[2],"TimeoutOn");
 8001884:	4a7d      	ldr	r2, [pc, #500]	; (8001a7c <display_menu+0x2dc>)
 8001886:	4b7e      	ldr	r3, [pc, #504]	; (8001a80 <display_menu+0x2e0>)
 8001888:	cb03      	ldmia	r3!, {r0, r1}
 800188a:	6010      	str	r0, [r2, #0]
 800188c:	6051      	str	r1, [r2, #4]
 800188e:	881b      	ldrh	r3, [r3, #0]
 8001890:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[3],"TimeoutOff");	
 8001892:	4b6f      	ldr	r3, [pc, #444]	; (8001a50 <display_menu+0x2b0>)
 8001894:	497b      	ldr	r1, [pc, #492]	; (8001a84 <display_menu+0x2e4>)
 8001896:	f103 0221 	add.w	r2, r3, #33	; 0x21
 800189a:	460b      	mov	r3, r1
 800189c:	cb03      	ldmia	r3!, {r0, r1}
 800189e:	6010      	str	r0, [r2, #0]
 80018a0:	6051      	str	r1, [r2, #4]
 80018a2:	8819      	ldrh	r1, [r3, #0]
 80018a4:	789b      	ldrb	r3, [r3, #2]
 80018a6:	8111      	strh	r1, [r2, #8]
 80018a8:	7293      	strb	r3, [r2, #10]
		for (uint8_t i = 4; i <= 7; ++i) {
 80018aa:	2304      	movs	r3, #4
 80018ac:	75bb      	strb	r3, [r7, #22]
 80018ae:	e00c      	b.n	80018ca <display_menu+0x12a>
			menu_commands[i][0] = '\0';
 80018b0:	7dba      	ldrb	r2, [r7, #22]
 80018b2:	4967      	ldr	r1, [pc, #412]	; (8001a50 <display_menu+0x2b0>)
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	4413      	add	r3, r2
 80018be:	440b      	add	r3, r1
 80018c0:	2200      	movs	r2, #0
 80018c2:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 4; i <= 7; ++i) {
 80018c4:	7dbb      	ldrb	r3, [r7, #22]
 80018c6:	3301      	adds	r3, #1
 80018c8:	75bb      	strb	r3, [r7, #22]
 80018ca:	7dbb      	ldrb	r3, [r7, #22]
 80018cc:	2b07      	cmp	r3, #7
 80018ce:	d9ef      	bls.n	80018b0 <display_menu+0x110>
		}
		strcpy(menu_commands[8], "Main Menu");
 80018d0:	4b65      	ldr	r3, [pc, #404]	; (8001a68 <display_menu+0x2c8>)
 80018d2:	4a6d      	ldr	r2, [pc, #436]	; (8001a88 <display_menu+0x2e8>)
 80018d4:	ca07      	ldmia	r2, {r0, r1, r2}
 80018d6:	c303      	stmia	r3!, {r0, r1}
 80018d8:	801a      	strh	r2, [r3, #0]
		break;
 80018da:	e115      	b.n	8001b08 <display_menu+0x368>
	case device_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 80018dc:	2300      	movs	r3, #0
 80018de:	757b      	strb	r3, [r7, #21]
 80018e0:	e023      	b.n	800192a <display_menu+0x18a>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 80018e2:	7d7a      	ldrb	r2, [r7, #21]
 80018e4:	4613      	mov	r3, r2
 80018e6:	009b      	lsls	r3, r3, #2
 80018e8:	4413      	add	r3, r2
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	4413      	add	r3, r2
 80018ee:	4a58      	ldr	r2, [pc, #352]	; (8001a50 <display_menu+0x2b0>)
 80018f0:	189c      	adds	r4, r3, r2
 80018f2:	7979      	ldrb	r1, [r7, #5]
 80018f4:	7d78      	ldrb	r0, [r7, #21]
 80018f6:	4b55      	ldr	r3, [pc, #340]	; (8001a4c <display_menu+0x2ac>)
 80018f8:	781b      	ldrb	r3, [r3, #0]
 80018fa:	1e5a      	subs	r2, r3, #1
 80018fc:	4613      	mov	r3, r2
 80018fe:	005b      	lsls	r3, r3, #1
 8001900:	4413      	add	r3, r2
 8001902:	005b      	lsls	r3, r3, #1
 8001904:	4403      	add	r3, r0
 8001906:	22ac      	movs	r2, #172	; 0xac
 8001908:	fb03 f202 	mul.w	r2, r3, r2
 800190c:	f241 032c 	movw	r3, #4140	; 0x102c
 8001910:	fb01 f303 	mul.w	r3, r1, r3
 8001914:	4413      	add	r3, r2
 8001916:	33a0      	adds	r3, #160	; 0xa0
 8001918:	4a4e      	ldr	r2, [pc, #312]	; (8001a54 <display_menu+0x2b4>)
 800191a:	4413      	add	r3, r2
 800191c:	4619      	mov	r1, r3
 800191e:	4620      	mov	r0, r4
 8001920:	f005 ffbd 	bl	800789e <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001924:	7d7b      	ldrb	r3, [r7, #21]
 8001926:	3301      	adds	r3, #1
 8001928:	757b      	strb	r3, [r7, #21]
 800192a:	7d7b      	ldrb	r3, [r7, #21]
 800192c:	2b05      	cmp	r3, #5
 800192e:	d9d8      	bls.n	80018e2 <display_menu+0x142>
		}
		strcpy(menu_commands[6], "Prev Page");
 8001930:	4a49      	ldr	r2, [pc, #292]	; (8001a58 <display_menu+0x2b8>)
 8001932:	4b4a      	ldr	r3, [pc, #296]	; (8001a5c <display_menu+0x2bc>)
 8001934:	cb03      	ldmia	r3!, {r0, r1}
 8001936:	6010      	str	r0, [r2, #0]
 8001938:	6051      	str	r1, [r2, #4]
 800193a:	881b      	ldrh	r3, [r3, #0]
 800193c:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Main Menu");
 800193e:	4a48      	ldr	r2, [pc, #288]	; (8001a60 <display_menu+0x2c0>)
 8001940:	4b51      	ldr	r3, [pc, #324]	; (8001a88 <display_menu+0x2e8>)
 8001942:	cb03      	ldmia	r3!, {r0, r1}
 8001944:	6010      	str	r0, [r2, #0]
 8001946:	6051      	str	r1, [r2, #4]
 8001948:	881b      	ldrh	r3, [r3, #0]
 800194a:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[8], "Next Page");
 800194c:	4b46      	ldr	r3, [pc, #280]	; (8001a68 <display_menu+0x2c8>)
 800194e:	4a47      	ldr	r2, [pc, #284]	; (8001a6c <display_menu+0x2cc>)
 8001950:	ca07      	ldmia	r2, {r0, r1, r2}
 8001952:	c303      	stmia	r3!, {r0, r1}
 8001954:	801a      	strh	r2, [r3, #0]
		break;
 8001956:	e0d7      	b.n	8001b08 <display_menu+0x368>
	case learn_device_menu:
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001958:	79bb      	ldrb	r3, [r7, #6]
 800195a:	2b03      	cmp	r3, #3
 800195c:	f200 80f5 	bhi.w	8001b4a <display_menu+0x3aa>
		//strcpy(cmd_buf, "Device ");
		//char device_number[3];
		for (uint8_t i = 0; i < 6; ++i) {
 8001960:	2300      	movs	r3, #0
 8001962:	753b      	strb	r3, [r7, #20]
 8001964:	e01e      	b.n	80019a4 <display_menu+0x204>
			strcpy(menu_commands[i], controller.devices[i + 6*(current_page - 1)].name);
 8001966:	7d3a      	ldrb	r2, [r7, #20]
 8001968:	4613      	mov	r3, r2
 800196a:	009b      	lsls	r3, r3, #2
 800196c:	4413      	add	r3, r2
 800196e:	005b      	lsls	r3, r3, #1
 8001970:	4413      	add	r3, r2
 8001972:	4a37      	ldr	r2, [pc, #220]	; (8001a50 <display_menu+0x2b0>)
 8001974:	1898      	adds	r0, r3, r2
 8001976:	7d39      	ldrb	r1, [r7, #20]
 8001978:	4b34      	ldr	r3, [pc, #208]	; (8001a4c <display_menu+0x2ac>)
 800197a:	781b      	ldrb	r3, [r3, #0]
 800197c:	1e5a      	subs	r2, r3, #1
 800197e:	4613      	mov	r3, r2
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	4413      	add	r3, r2
 8001984:	005b      	lsls	r3, r3, #1
 8001986:	440b      	add	r3, r1
 8001988:	f241 022c 	movw	r2, #4140	; 0x102c
 800198c:	fb02 f303 	mul.w	r3, r2, r3
 8001990:	f503 5381 	add.w	r3, r3, #4128	; 0x1020
 8001994:	4a2f      	ldr	r2, [pc, #188]	; (8001a54 <display_menu+0x2b4>)
 8001996:	4413      	add	r3, r2
 8001998:	4619      	mov	r1, r3
 800199a:	f005 ff80 	bl	800789e <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 800199e:	7d3b      	ldrb	r3, [r7, #20]
 80019a0:	3301      	adds	r3, #1
 80019a2:	753b      	strb	r3, [r7, #20]
 80019a4:	7d3b      	ldrb	r3, [r7, #20]
 80019a6:	2b05      	cmp	r3, #5
 80019a8:	d9dd      	bls.n	8001966 <display_menu+0x1c6>
			//itoa(i + (6 * (current_page - 1)), device_number, 10);
			//strcat(cmd_buf, device_number);
			//strcpy(menu_commands[i - 1], cmd_buf);
			//cmd_buf[7] = '\0';
		}
		strcpy(menu_commands[6], "Prev Page");
 80019aa:	4a2b      	ldr	r2, [pc, #172]	; (8001a58 <display_menu+0x2b8>)
 80019ac:	4b2b      	ldr	r3, [pc, #172]	; (8001a5c <display_menu+0x2bc>)
 80019ae:	cb03      	ldmia	r3!, {r0, r1}
 80019b0:	6010      	str	r0, [r2, #0]
 80019b2:	6051      	str	r1, [r2, #4]
 80019b4:	881b      	ldrh	r3, [r3, #0]
 80019b6:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Quit");
 80019b8:	4b29      	ldr	r3, [pc, #164]	; (8001a60 <display_menu+0x2c0>)
 80019ba:	4a34      	ldr	r2, [pc, #208]	; (8001a8c <display_menu+0x2ec>)
 80019bc:	6810      	ldr	r0, [r2, #0]
 80019be:	6018      	str	r0, [r3, #0]
 80019c0:	7912      	ldrb	r2, [r2, #4]
 80019c2:	711a      	strb	r2, [r3, #4]
		strcpy(menu_commands[8], "Next Page");
 80019c4:	4b28      	ldr	r3, [pc, #160]	; (8001a68 <display_menu+0x2c8>)
 80019c6:	4a29      	ldr	r2, [pc, #164]	; (8001a6c <display_menu+0x2cc>)
 80019c8:	ca07      	ldmia	r2, {r0, r1, r2}
 80019ca:	c303      	stmia	r3!, {r0, r1}
 80019cc:	801a      	strh	r2, [r3, #0]
		break;
 80019ce:	e09b      	b.n	8001b08 <display_menu+0x368>
	case learn_command_menu:
		for (uint8_t i = 0; i < 6; ++i) {
 80019d0:	2300      	movs	r3, #0
 80019d2:	74fb      	strb	r3, [r7, #19]
 80019d4:	e023      	b.n	8001a1e <display_menu+0x27e>
			strcpy(menu_commands[i], controller.devices[device].commands[i + 6 * (current_page - 1)].desc);
 80019d6:	7cfa      	ldrb	r2, [r7, #19]
 80019d8:	4613      	mov	r3, r2
 80019da:	009b      	lsls	r3, r3, #2
 80019dc:	4413      	add	r3, r2
 80019de:	005b      	lsls	r3, r3, #1
 80019e0:	4413      	add	r3, r2
 80019e2:	4a1b      	ldr	r2, [pc, #108]	; (8001a50 <display_menu+0x2b0>)
 80019e4:	189c      	adds	r4, r3, r2
 80019e6:	7979      	ldrb	r1, [r7, #5]
 80019e8:	7cf8      	ldrb	r0, [r7, #19]
 80019ea:	4b18      	ldr	r3, [pc, #96]	; (8001a4c <display_menu+0x2ac>)
 80019ec:	781b      	ldrb	r3, [r3, #0]
 80019ee:	1e5a      	subs	r2, r3, #1
 80019f0:	4613      	mov	r3, r2
 80019f2:	005b      	lsls	r3, r3, #1
 80019f4:	4413      	add	r3, r2
 80019f6:	005b      	lsls	r3, r3, #1
 80019f8:	4403      	add	r3, r0
 80019fa:	22ac      	movs	r2, #172	; 0xac
 80019fc:	fb03 f202 	mul.w	r2, r3, r2
 8001a00:	f241 032c 	movw	r3, #4140	; 0x102c
 8001a04:	fb01 f303 	mul.w	r3, r1, r3
 8001a08:	4413      	add	r3, r2
 8001a0a:	33a0      	adds	r3, #160	; 0xa0
 8001a0c:	4a11      	ldr	r2, [pc, #68]	; (8001a54 <display_menu+0x2b4>)
 8001a0e:	4413      	add	r3, r2
 8001a10:	4619      	mov	r1, r3
 8001a12:	4620      	mov	r0, r4
 8001a14:	f005 ff43 	bl	800789e <strcpy>
		for (uint8_t i = 0; i < 6; ++i) {
 8001a18:	7cfb      	ldrb	r3, [r7, #19]
 8001a1a:	3301      	adds	r3, #1
 8001a1c:	74fb      	strb	r3, [r7, #19]
 8001a1e:	7cfb      	ldrb	r3, [r7, #19]
 8001a20:	2b05      	cmp	r3, #5
 8001a22:	d9d8      	bls.n	80019d6 <display_menu+0x236>
		}
		strcpy(menu_commands[6], "Prev Page");
 8001a24:	4a0c      	ldr	r2, [pc, #48]	; (8001a58 <display_menu+0x2b8>)
 8001a26:	4b0d      	ldr	r3, [pc, #52]	; (8001a5c <display_menu+0x2bc>)
 8001a28:	cb03      	ldmia	r3!, {r0, r1}
 8001a2a:	6010      	str	r0, [r2, #0]
 8001a2c:	6051      	str	r1, [r2, #4]
 8001a2e:	881b      	ldrh	r3, [r3, #0]
 8001a30:	8113      	strh	r3, [r2, #8]
		strcpy(menu_commands[7], "Devices");
 8001a32:	4a0b      	ldr	r2, [pc, #44]	; (8001a60 <display_menu+0x2c0>)
 8001a34:	4b16      	ldr	r3, [pc, #88]	; (8001a90 <display_menu+0x2f0>)
 8001a36:	cb03      	ldmia	r3!, {r0, r1}
 8001a38:	6010      	str	r0, [r2, #0]
 8001a3a:	6051      	str	r1, [r2, #4]
		strcpy(menu_commands[8], "Next Page");
 8001a3c:	4b0a      	ldr	r3, [pc, #40]	; (8001a68 <display_menu+0x2c8>)
 8001a3e:	4a0b      	ldr	r2, [pc, #44]	; (8001a6c <display_menu+0x2cc>)
 8001a40:	ca07      	ldmia	r2, {r0, r1, r2}
 8001a42:	c303      	stmia	r3!, {r0, r1}
 8001a44:	801a      	strh	r2, [r3, #0]
		break;
 8001a46:	e05f      	b.n	8001b08 <display_menu+0x368>
 8001a48:	20001784 	.word	0x20001784
 8001a4c:	20015b4a 	.word	0x20015b4a
 8001a50:	20015b4c 	.word	0x20015b4c
 8001a54:	20001788 	.word	0x20001788
 8001a58:	20015b8e 	.word	0x20015b8e
 8001a5c:	08007968 	.word	0x08007968
 8001a60:	20015b99 	.word	0x20015b99
 8001a64:	08007974 	.word	0x08007974
 8001a68:	20015ba4 	.word	0x20015ba4
 8001a6c:	08007980 	.word	0x08007980
 8001a70:	0800798c 	.word	0x0800798c
 8001a74:	20015b57 	.word	0x20015b57
 8001a78:	08007998 	.word	0x08007998
 8001a7c:	20015b62 	.word	0x20015b62
 8001a80:	080079a4 	.word	0x080079a4
 8001a84:	080079b0 	.word	0x080079b0
 8001a88:	080079bc 	.word	0x080079bc
 8001a8c:	080079c8 	.word	0x080079c8
 8001a90:	080079d0 	.word	0x080079d0
	case awaiting_menu:
		strcpy(menu_commands[0], "Press");
 8001a94:	4b2f      	ldr	r3, [pc, #188]	; (8001b54 <display_menu+0x3b4>)
 8001a96:	4a30      	ldr	r2, [pc, #192]	; (8001b58 <display_menu+0x3b8>)
 8001a98:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001a9c:	6018      	str	r0, [r3, #0]
 8001a9e:	3304      	adds	r3, #4
 8001aa0:	8019      	strh	r1, [r3, #0]
		strcpy(menu_commands[1], "Button");
 8001aa2:	4b2e      	ldr	r3, [pc, #184]	; (8001b5c <display_menu+0x3bc>)
 8001aa4:	4a2e      	ldr	r2, [pc, #184]	; (8001b60 <display_menu+0x3c0>)
 8001aa6:	6810      	ldr	r0, [r2, #0]
 8001aa8:	6018      	str	r0, [r3, #0]
 8001aaa:	8891      	ldrh	r1, [r2, #4]
 8001aac:	7992      	ldrb	r2, [r2, #6]
 8001aae:	8099      	strh	r1, [r3, #4]
 8001ab0:	719a      	strb	r2, [r3, #6]
		strcpy(menu_commands[2], "On");
 8001ab2:	4b2c      	ldr	r3, [pc, #176]	; (8001b64 <display_menu+0x3c4>)
 8001ab4:	4a2c      	ldr	r2, [pc, #176]	; (8001b68 <display_menu+0x3c8>)
 8001ab6:	8811      	ldrh	r1, [r2, #0]
 8001ab8:	7892      	ldrb	r2, [r2, #2]
 8001aba:	8019      	strh	r1, [r3, #0]
 8001abc:	709a      	strb	r2, [r3, #2]
		strcpy(menu_commands[3], "External");
 8001abe:	4a2b      	ldr	r2, [pc, #172]	; (8001b6c <display_menu+0x3cc>)
 8001ac0:	4b2b      	ldr	r3, [pc, #172]	; (8001b70 <display_menu+0x3d0>)
 8001ac2:	cb03      	ldmia	r3!, {r0, r1}
 8001ac4:	6010      	str	r0, [r2, #0]
 8001ac6:	6051      	str	r1, [r2, #4]
 8001ac8:	781b      	ldrb	r3, [r3, #0]
 8001aca:	7213      	strb	r3, [r2, #8]
		strcpy(menu_commands[4], "Remote");
 8001acc:	4b29      	ldr	r3, [pc, #164]	; (8001b74 <display_menu+0x3d4>)
 8001ace:	4a2a      	ldr	r2, [pc, #168]	; (8001b78 <display_menu+0x3d8>)
 8001ad0:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001ad4:	6018      	str	r0, [r3, #0]
 8001ad6:	3304      	adds	r3, #4
 8001ad8:	8019      	strh	r1, [r3, #0]
 8001ada:	3302      	adds	r3, #2
 8001adc:	0c0a      	lsrs	r2, r1, #16
 8001ade:	701a      	strb	r2, [r3, #0]
		for(int i = 5; i<=8; ++i){
 8001ae0:	2305      	movs	r3, #5
 8001ae2:	60fb      	str	r3, [r7, #12]
 8001ae4:	e00c      	b.n	8001b00 <display_menu+0x360>
			menu_commands[i][0]= '\0';
 8001ae6:	491b      	ldr	r1, [pc, #108]	; (8001b54 <display_menu+0x3b4>)
 8001ae8:	68fa      	ldr	r2, [r7, #12]
 8001aea:	4613      	mov	r3, r2
 8001aec:	009b      	lsls	r3, r3, #2
 8001aee:	4413      	add	r3, r2
 8001af0:	005b      	lsls	r3, r3, #1
 8001af2:	4413      	add	r3, r2
 8001af4:	440b      	add	r3, r1
 8001af6:	2200      	movs	r2, #0
 8001af8:	701a      	strb	r2, [r3, #0]
		for(int i = 5; i<=8; ++i){
 8001afa:	68fb      	ldr	r3, [r7, #12]
 8001afc:	3301      	adds	r3, #1
 8001afe:	60fb      	str	r3, [r7, #12]
 8001b00:	68fb      	ldr	r3, [r7, #12]
 8001b02:	2b08      	cmp	r3, #8
 8001b04:	ddef      	ble.n	8001ae6 <display_menu+0x346>
		}
		break;
 8001b06:	bf00      	nop
	}
	for (uint8_t i = 1; i <= 9; ++i) {
 8001b08:	2301      	movs	r3, #1
 8001b0a:	72fb      	strb	r3, [r7, #11]
 8001b0c:	e015      	b.n	8001b3a <display_menu+0x39a>
		erase_buffer();
 8001b0e:	f000 fca7 	bl	8002460 <erase_buffer>
		draw_string(menu_commands[i-1], white);
 8001b12:	7afb      	ldrb	r3, [r7, #11]
 8001b14:	1e5a      	subs	r2, r3, #1
 8001b16:	4613      	mov	r3, r2
 8001b18:	009b      	lsls	r3, r3, #2
 8001b1a:	4413      	add	r3, r2
 8001b1c:	005b      	lsls	r3, r3, #1
 8001b1e:	4413      	add	r3, r2
 8001b20:	4a0c      	ldr	r2, [pc, #48]	; (8001b54 <display_menu+0x3b4>)
 8001b22:	4413      	add	r3, r2
 8001b24:	2101      	movs	r1, #1
 8001b26:	4618      	mov	r0, r3
 8001b28:	f000 fd9f 	bl	800266a <draw_string>
		update_display(i);
 8001b2c:	7afb      	ldrb	r3, [r7, #11]
 8001b2e:	4618      	mov	r0, r3
 8001b30:	f000 fba2 	bl	8002278 <update_display>
	for (uint8_t i = 1; i <= 9; ++i) {
 8001b34:	7afb      	ldrb	r3, [r7, #11]
 8001b36:	3301      	adds	r3, #1
 8001b38:	72fb      	strb	r3, [r7, #11]
 8001b3a:	7afb      	ldrb	r3, [r7, #11]
 8001b3c:	2b09      	cmp	r3, #9
 8001b3e:	d9e6      	bls.n	8001b0e <display_menu+0x36e>
 8001b40:	e004      	b.n	8001b4c <display_menu+0x3ac>
	if (!page) return;
 8001b42:	bf00      	nop
 8001b44:	e002      	b.n	8001b4c <display_menu+0x3ac>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001b46:	bf00      	nop
 8001b48:	e000      	b.n	8001b4c <display_menu+0x3ac>
		if (page > MAIN_MENU_PAGE_COUNT) return;
 8001b4a:	bf00      	nop
	}
}
 8001b4c:	371c      	adds	r7, #28
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bd90      	pop	{r4, r7, pc}
 8001b52:	bf00      	nop
 8001b54:	20015b4c 	.word	0x20015b4c
 8001b58:	080079d8 	.word	0x080079d8
 8001b5c:	20015b57 	.word	0x20015b57
 8001b60:	080079e0 	.word	0x080079e0
 8001b64:	20015b62 	.word	0x20015b62
 8001b68:	080079e8 	.word	0x080079e8
 8001b6c:	20015b6d 	.word	0x20015b6d
 8001b70:	080079ec 	.word	0x080079ec
 8001b74:	20015b78 	.word	0x20015b78
 8001b78:	080079f8 	.word	0x080079f8

08001b7c <button_pressed>:

void button_pressed(uint8_t button) {
 8001b7c:	b580      	push	{r7, lr}
 8001b7e:	b084      	sub	sp, #16
 8001b80:	af00      	add	r7, sp, #0
 8001b82:	4603      	mov	r3, r0
 8001b84:	71fb      	strb	r3, [r7, #7]
	static uint8_t in_device_menu = 0;
	static uint8_t active_device;
	if (!button || button > 9) return;
 8001b86:	79fb      	ldrb	r3, [r7, #7]
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	f000 821b 	beq.w	8001fc4 <button_pressed+0x448>
 8001b8e:	79fb      	ldrb	r3, [r7, #7]
 8001b90:	2b09      	cmp	r3, #9
 8001b92:	f200 8217 	bhi.w	8001fc4 <button_pressed+0x448>

	switch(current_menu) {
 8001b96:	4bb1      	ldr	r3, [pc, #708]	; (8001e5c <button_pressed+0x2e0>)
 8001b98:	781b      	ldrb	r3, [r3, #0]
 8001b9a:	2b04      	cmp	r3, #4
 8001b9c:	f200 8214 	bhi.w	8001fc8 <button_pressed+0x44c>
 8001ba0:	a201      	add	r2, pc, #4	; (adr r2, 8001ba8 <button_pressed+0x2c>)
 8001ba2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ba6:	bf00      	nop
 8001ba8:	08001bbd 	.word	0x08001bbd
 8001bac:	08001c83 	.word	0x08001c83
 8001bb0:	08001d17 	.word	0x08001d17
 8001bb4:	08001dfd 	.word	0x08001dfd
 8001bb8:	08001edd 	.word	0x08001edd
	case main_menu:
		switch(button) {
 8001bbc:	79fb      	ldrb	r3, [r7, #7]
 8001bbe:	2b09      	cmp	r3, #9
 8001bc0:	d02b      	beq.n	8001c1a <button_pressed+0x9e>
 8001bc2:	2b09      	cmp	r3, #9
 8001bc4:	dc39      	bgt.n	8001c3a <button_pressed+0xbe>
 8001bc6:	2b07      	cmp	r3, #7
 8001bc8:	d002      	beq.n	8001bd0 <button_pressed+0x54>
 8001bca:	2b08      	cmp	r3, #8
 8001bcc:	d010      	beq.n	8001bf0 <button_pressed+0x74>
 8001bce:	e034      	b.n	8001c3a <button_pressed+0xbe>
		case 7: // Previous
			display_menu(main_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 8001bd0:	4ba3      	ldr	r3, [pc, #652]	; (8001e60 <button_pressed+0x2e4>)
 8001bd2:	781b      	ldrb	r3, [r3, #0]
 8001bd4:	2b01      	cmp	r3, #1
 8001bd6:	d004      	beq.n	8001be2 <button_pressed+0x66>
 8001bd8:	4ba1      	ldr	r3, [pc, #644]	; (8001e60 <button_pressed+0x2e4>)
 8001bda:	781b      	ldrb	r3, [r3, #0]
 8001bdc:	3b01      	subs	r3, #1
 8001bde:	b2db      	uxtb	r3, r3
 8001be0:	e000      	b.n	8001be4 <button_pressed+0x68>
 8001be2:	2303      	movs	r3, #3
 8001be4:	2200      	movs	r2, #0
 8001be6:	4619      	mov	r1, r3
 8001be8:	2000      	movs	r0, #0
 8001bea:	f7ff fdd9 	bl	80017a0 <display_menu>
			break;
 8001bee:	e044      	b.n	8001c7a <button_pressed+0xfe>
		case 8: // Settings
			display_menu(settings_menu, 1, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2101      	movs	r1, #1
 8001bf4:	2001      	movs	r0, #1
 8001bf6:	f7ff fdd3 	bl	80017a0 <display_menu>
			for (uint8_t i = 5; i <= 8; ++i) {
 8001bfa:	2305      	movs	r3, #5
 8001bfc:	73fb      	strb	r3, [r7, #15]
 8001bfe:	e006      	b.n	8001c0e <button_pressed+0x92>
				disable_button(i);
 8001c00:	7bfb      	ldrb	r3, [r7, #15]
 8001c02:	4618      	mov	r0, r3
 8001c04:	f7fe fcc6 	bl	8000594 <disable_button>
			for (uint8_t i = 5; i <= 8; ++i) {
 8001c08:	7bfb      	ldrb	r3, [r7, #15]
 8001c0a:	3301      	adds	r3, #1
 8001c0c:	73fb      	strb	r3, [r7, #15]
 8001c0e:	7bfb      	ldrb	r3, [r7, #15]
 8001c10:	2b08      	cmp	r3, #8
 8001c12:	d9f5      	bls.n	8001c00 <button_pressed+0x84>
			}
			update_buttons();
 8001c14:	f7fe fd48 	bl	80006a8 <update_buttons>
			break;
 8001c18:	e02f      	b.n	8001c7a <button_pressed+0xfe>
		case 9: // Next
			display_menu(main_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 8001c1a:	4b91      	ldr	r3, [pc, #580]	; (8001e60 <button_pressed+0x2e4>)
 8001c1c:	781b      	ldrb	r3, [r3, #0]
 8001c1e:	2b03      	cmp	r3, #3
 8001c20:	d004      	beq.n	8001c2c <button_pressed+0xb0>
 8001c22:	4b8f      	ldr	r3, [pc, #572]	; (8001e60 <button_pressed+0x2e4>)
 8001c24:	781b      	ldrb	r3, [r3, #0]
 8001c26:	3301      	adds	r3, #1
 8001c28:	b2db      	uxtb	r3, r3
 8001c2a:	e000      	b.n	8001c2e <button_pressed+0xb2>
 8001c2c:	2301      	movs	r3, #1
 8001c2e:	2200      	movs	r2, #0
 8001c30:	4619      	mov	r1, r3
 8001c32:	2000      	movs	r0, #0
 8001c34:	f7ff fdb4 	bl	80017a0 <display_menu>
			break;
 8001c38:	e01f      	b.n	8001c7a <button_pressed+0xfe>
		default: // Device Selected
			active_device =  button - 1 + (6 * (current_page - 1));
 8001c3a:	4b89      	ldr	r3, [pc, #548]	; (8001e60 <button_pressed+0x2e4>)
 8001c3c:	781b      	ldrb	r3, [r3, #0]
 8001c3e:	461a      	mov	r2, r3
 8001c40:	0052      	lsls	r2, r2, #1
 8001c42:	4413      	add	r3, r2
 8001c44:	005b      	lsls	r3, r3, #1
 8001c46:	b2da      	uxtb	r2, r3
 8001c48:	79fb      	ldrb	r3, [r7, #7]
 8001c4a:	4413      	add	r3, r2
 8001c4c:	b2db      	uxtb	r3, r3
 8001c4e:	3b07      	subs	r3, #7
 8001c50:	b2da      	uxtb	r2, r3
 8001c52:	4b84      	ldr	r3, [pc, #528]	; (8001e64 <button_pressed+0x2e8>)
 8001c54:	701a      	strb	r2, [r3, #0]
			display_menu(device_menu, 1, button - 1 + (6 * (current_page - 1)));
 8001c56:	4b82      	ldr	r3, [pc, #520]	; (8001e60 <button_pressed+0x2e4>)
 8001c58:	781b      	ldrb	r3, [r3, #0]
 8001c5a:	461a      	mov	r2, r3
 8001c5c:	0052      	lsls	r2, r2, #1
 8001c5e:	4413      	add	r3, r2
 8001c60:	005b      	lsls	r3, r3, #1
 8001c62:	b2da      	uxtb	r2, r3
 8001c64:	79fb      	ldrb	r3, [r7, #7]
 8001c66:	4413      	add	r3, r2
 8001c68:	b2db      	uxtb	r3, r3
 8001c6a:	3b07      	subs	r3, #7
 8001c6c:	b2db      	uxtb	r3, r3
 8001c6e:	461a      	mov	r2, r3
 8001c70:	2101      	movs	r1, #1
 8001c72:	2002      	movs	r0, #2
 8001c74:	f7ff fd94 	bl	80017a0 <display_menu>
			break;
 8001c78:	bf00      	nop
		}
		in_device_menu = 0;
 8001c7a:	4b7b      	ldr	r3, [pc, #492]	; (8001e68 <button_pressed+0x2ec>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
		break;
 8001c80:	e1a3      	b.n	8001fca <button_pressed+0x44e>

	case settings_menu:
		switch(button) {
 8001c82:	79fb      	ldrb	r3, [r7, #7]
 8001c84:	3b01      	subs	r3, #1
 8001c86:	2b08      	cmp	r3, #8
 8001c88:	d83d      	bhi.n	8001d06 <button_pressed+0x18a>
 8001c8a:	a201      	add	r2, pc, #4	; (adr r2, 8001c90 <button_pressed+0x114>)
 8001c8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001c90:	08001cb5 	.word	0x08001cb5
 8001c94:	08001cbb 	.word	0x08001cbb
 8001c98:	08001ccb 	.word	0x08001ccb
 8001c9c:	08001ce1 	.word	0x08001ce1
 8001ca0:	08001d07 	.word	0x08001d07
 8001ca4:	08001d07 	.word	0x08001d07
 8001ca8:	08001d07 	.word	0x08001d07
 8001cac:	08001d07 	.word	0x08001d07
 8001cb0:	08001cf7 	.word	0x08001cf7
		case 1:
			init_xbee_communication();
 8001cb4:	f7fe fe12 	bl	80008dc <init_xbee_communication>
			// Inform User that they are in PC mode somehow
			break;
 8001cb8:	e026      	b.n	8001d08 <button_pressed+0x18c>
		case 2:
			// Select Device, then command, possibly while flashing the screens.
			// Prompt user to press remote button.
			display_menu(learn_device_menu, 1, 0);
 8001cba:	2200      	movs	r2, #0
 8001cbc:	2101      	movs	r1, #1
 8001cbe:	2003      	movs	r0, #3
 8001cc0:	f7ff fd6e 	bl	80017a0 <display_menu>
			enable_all_buttons();
 8001cc4:	f7fe fcc6 	bl	8000654 <enable_all_buttons>
			break;
 8001cc8:	e01e      	b.n	8001d08 <button_pressed+0x18c>
		case 3:
			timeoutoff = 0;
 8001cca:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <button_pressed+0x2f0>)
 8001ccc:	2200      	movs	r2, #0
 8001cce:	701a      	strb	r2, [r3, #0]
			display_menu(main_menu, 1,0);
 8001cd0:	2200      	movs	r2, #0
 8001cd2:	2101      	movs	r1, #1
 8001cd4:	2000      	movs	r0, #0
 8001cd6:	f7ff fd63 	bl	80017a0 <display_menu>
			enable_all_buttons();
 8001cda:	f7fe fcbb 	bl	8000654 <enable_all_buttons>
			break;
 8001cde:	e013      	b.n	8001d08 <button_pressed+0x18c>
		case 4:
			timeoutoff = 1;
 8001ce0:	4b62      	ldr	r3, [pc, #392]	; (8001e6c <button_pressed+0x2f0>)
 8001ce2:	2201      	movs	r2, #1
 8001ce4:	701a      	strb	r2, [r3, #0]
			display_menu(main_menu, 1,0);
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	2101      	movs	r1, #1
 8001cea:	2000      	movs	r0, #0
 8001cec:	f7ff fd58 	bl	80017a0 <display_menu>
			enable_all_buttons();	
 8001cf0:	f7fe fcb0 	bl	8000654 <enable_all_buttons>
			break;
 8001cf4:	e008      	b.n	8001d08 <button_pressed+0x18c>
		case 9: // Main Menu
			display_menu(main_menu, 1, 0);
 8001cf6:	2200      	movs	r2, #0
 8001cf8:	2101      	movs	r1, #1
 8001cfa:	2000      	movs	r0, #0
 8001cfc:	f7ff fd50 	bl	80017a0 <display_menu>
			enable_all_buttons();
 8001d00:	f7fe fca8 	bl	8000654 <enable_all_buttons>
			break;
 8001d04:	e000      	b.n	8001d08 <button_pressed+0x18c>
		default:
			break;
 8001d06:	bf00      	nop
		}
		in_device_menu = 0;
 8001d08:	4b57      	ldr	r3, [pc, #348]	; (8001e68 <button_pressed+0x2ec>)
 8001d0a:	2200      	movs	r2, #0
 8001d0c:	701a      	strb	r2, [r3, #0]
		active_device = 0;
 8001d0e:	4b55      	ldr	r3, [pc, #340]	; (8001e64 <button_pressed+0x2e8>)
 8001d10:	2200      	movs	r2, #0
 8001d12:	701a      	strb	r2, [r3, #0]
		break;
 8001d14:	e159      	b.n	8001fca <button_pressed+0x44e>

	case device_menu:
		switch(button) {
 8001d16:	79fb      	ldrb	r3, [r7, #7]
 8001d18:	2b09      	cmp	r3, #9
 8001d1a:	d02e      	beq.n	8001d7a <button_pressed+0x1fe>
 8001d1c:	2b09      	cmp	r3, #9
 8001d1e:	dc4e      	bgt.n	8001dbe <button_pressed+0x242>
 8001d20:	2b07      	cmp	r3, #7
 8001d22:	d002      	beq.n	8001d2a <button_pressed+0x1ae>
 8001d24:	2b08      	cmp	r3, #8
 8001d26:	d022      	beq.n	8001d6e <button_pressed+0x1f2>
 8001d28:	e049      	b.n	8001dbe <button_pressed+0x242>
		case 7: // Previous Page
			display_menu(
					device_menu,
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8001d2a:	4b4d      	ldr	r3, [pc, #308]	; (8001e60 <button_pressed+0x2e4>)
 8001d2c:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001d2e:	2b01      	cmp	r3, #1
 8001d30:	d004      	beq.n	8001d3c <button_pressed+0x1c0>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8001d32:	4b4b      	ldr	r3, [pc, #300]	; (8001e60 <button_pressed+0x2e4>)
 8001d34:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001d36:	3b01      	subs	r3, #1
 8001d38:	b2d9      	uxtb	r1, r3
 8001d3a:	e000      	b.n	8001d3e <button_pressed+0x1c2>
 8001d3c:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001d3e:	4b4a      	ldr	r3, [pc, #296]	; (8001e68 <button_pressed+0x2ec>)
 8001d40:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d10c      	bne.n	8001d60 <button_pressed+0x1e4>
					in_device_menu ? current_page : (button + (6 * (current_page - 1)))
 8001d46:	4b46      	ldr	r3, [pc, #280]	; (8001e60 <button_pressed+0x2e4>)
 8001d48:	781b      	ldrb	r3, [r3, #0]
 8001d4a:	461a      	mov	r2, r3
 8001d4c:	0052      	lsls	r2, r2, #1
 8001d4e:	4413      	add	r3, r2
 8001d50:	005b      	lsls	r3, r3, #1
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	79fb      	ldrb	r3, [r7, #7]
 8001d56:	4413      	add	r3, r2
 8001d58:	b2db      	uxtb	r3, r3
			display_menu(
 8001d5a:	3b06      	subs	r3, #6
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	e001      	b.n	8001d64 <button_pressed+0x1e8>
 8001d60:	4b3f      	ldr	r3, [pc, #252]	; (8001e60 <button_pressed+0x2e4>)
 8001d62:	781b      	ldrb	r3, [r3, #0]
 8001d64:	461a      	mov	r2, r3
 8001d66:	2002      	movs	r0, #2
 8001d68:	f7ff fd1a 	bl	80017a0 <display_menu>
			);
			break;
 8001d6c:	e042      	b.n	8001df4 <button_pressed+0x278>
		case 8: // Main Menu
			display_menu(main_menu, 1, 0);
 8001d6e:	2200      	movs	r2, #0
 8001d70:	2101      	movs	r1, #1
 8001d72:	2000      	movs	r0, #0
 8001d74:	f7ff fd14 	bl	80017a0 <display_menu>
			break;
 8001d78:	e03c      	b.n	8001df4 <button_pressed+0x278>
		case 9: // Next Page
			display_menu(
					device_menu,
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001d7a:	4b39      	ldr	r3, [pc, #228]	; (8001e60 <button_pressed+0x2e4>)
 8001d7c:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001d7e:	2b04      	cmp	r3, #4
 8001d80:	d004      	beq.n	8001d8c <button_pressed+0x210>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001d82:	4b37      	ldr	r3, [pc, #220]	; (8001e60 <button_pressed+0x2e4>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001d86:	3301      	adds	r3, #1
 8001d88:	b2d9      	uxtb	r1, r3
 8001d8a:	e000      	b.n	8001d8e <button_pressed+0x212>
 8001d8c:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button -1 + (6 * (current_page - 1)))
 8001d8e:	4b36      	ldr	r3, [pc, #216]	; (8001e68 <button_pressed+0x2ec>)
 8001d90:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d10c      	bne.n	8001db0 <button_pressed+0x234>
					in_device_menu ? current_page : (button -1 + (6 * (current_page - 1)))
 8001d96:	4b32      	ldr	r3, [pc, #200]	; (8001e60 <button_pressed+0x2e4>)
 8001d98:	781b      	ldrb	r3, [r3, #0]
 8001d9a:	461a      	mov	r2, r3
 8001d9c:	0052      	lsls	r2, r2, #1
 8001d9e:	4413      	add	r3, r2
 8001da0:	005b      	lsls	r3, r3, #1
 8001da2:	b2da      	uxtb	r2, r3
 8001da4:	79fb      	ldrb	r3, [r7, #7]
 8001da6:	4413      	add	r3, r2
 8001da8:	b2db      	uxtb	r3, r3
			display_menu(
 8001daa:	3b07      	subs	r3, #7
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	e001      	b.n	8001db4 <button_pressed+0x238>
 8001db0:	4b2b      	ldr	r3, [pc, #172]	; (8001e60 <button_pressed+0x2e4>)
 8001db2:	781b      	ldrb	r3, [r3, #0]
 8001db4:	461a      	mov	r2, r3
 8001db6:	2002      	movs	r0, #2
 8001db8:	f7ff fcf2 	bl	80017a0 <display_menu>
			);
			break;
 8001dbc:	e01a      	b.n	8001df4 <button_pressed+0x278>
		default: // Transmit IR Signal based on button!
			DeviceTransmit(controller.devices[active_device].commands[button - 1 + (6 * (current_page - 1))].Data);
 8001dbe:	4b29      	ldr	r3, [pc, #164]	; (8001e64 <button_pressed+0x2e8>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	4618      	mov	r0, r3
 8001dc4:	79fb      	ldrb	r3, [r7, #7]
 8001dc6:	1e59      	subs	r1, r3, #1
 8001dc8:	4b25      	ldr	r3, [pc, #148]	; (8001e60 <button_pressed+0x2e4>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	1e5a      	subs	r2, r3, #1
 8001dce:	4613      	mov	r3, r2
 8001dd0:	005b      	lsls	r3, r3, #1
 8001dd2:	4413      	add	r3, r2
 8001dd4:	005b      	lsls	r3, r3, #1
 8001dd6:	440b      	add	r3, r1
 8001dd8:	22ac      	movs	r2, #172	; 0xac
 8001dda:	fb03 f202 	mul.w	r2, r3, r2
 8001dde:	f241 032c 	movw	r3, #4140	; 0x102c
 8001de2:	fb00 f303 	mul.w	r3, r0, r3
 8001de6:	4413      	add	r3, r2
 8001de8:	4a21      	ldr	r2, [pc, #132]	; (8001e70 <button_pressed+0x2f4>)
 8001dea:	4413      	add	r3, r2
 8001dec:	4618      	mov	r0, r3
 8001dee:	f7fe fdf3 	bl	80009d8 <DeviceTransmit>
			break;
 8001df2:	bf00      	nop
		}
		in_device_menu = 1;
 8001df4:	4b1c      	ldr	r3, [pc, #112]	; (8001e68 <button_pressed+0x2ec>)
 8001df6:	2201      	movs	r2, #1
 8001df8:	701a      	strb	r2, [r3, #0]
		break;
 8001dfa:	e0e6      	b.n	8001fca <button_pressed+0x44e>
	case learn_device_menu:
		switch(button) {
 8001dfc:	79fb      	ldrb	r3, [r7, #7]
 8001dfe:	2b09      	cmp	r3, #9
 8001e00:	d038      	beq.n	8001e74 <button_pressed+0x2f8>
 8001e02:	2b09      	cmp	r3, #9
 8001e04:	dc46      	bgt.n	8001e94 <button_pressed+0x318>
 8001e06:	2b07      	cmp	r3, #7
 8001e08:	d002      	beq.n	8001e10 <button_pressed+0x294>
 8001e0a:	2b08      	cmp	r3, #8
 8001e0c:	d010      	beq.n	8001e30 <button_pressed+0x2b4>
 8001e0e:	e041      	b.n	8001e94 <button_pressed+0x318>
		case 7: // Previous
			display_menu(learn_device_menu, (current_page != 1) ? (current_page - 1) : MAIN_MENU_PAGE_COUNT, 0);
 8001e10:	4b13      	ldr	r3, [pc, #76]	; (8001e60 <button_pressed+0x2e4>)
 8001e12:	781b      	ldrb	r3, [r3, #0]
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d004      	beq.n	8001e22 <button_pressed+0x2a6>
 8001e18:	4b11      	ldr	r3, [pc, #68]	; (8001e60 <button_pressed+0x2e4>)
 8001e1a:	781b      	ldrb	r3, [r3, #0]
 8001e1c:	3b01      	subs	r3, #1
 8001e1e:	b2db      	uxtb	r3, r3
 8001e20:	e000      	b.n	8001e24 <button_pressed+0x2a8>
 8001e22:	2303      	movs	r3, #3
 8001e24:	2200      	movs	r2, #0
 8001e26:	4619      	mov	r1, r3
 8001e28:	2003      	movs	r0, #3
 8001e2a:	f7ff fcb9 	bl	80017a0 <display_menu>
			break;
 8001e2e:	e051      	b.n	8001ed4 <button_pressed+0x358>
		case 8: // Settings
			display_menu(settings_menu, 1, 0);
 8001e30:	2200      	movs	r2, #0
 8001e32:	2101      	movs	r1, #1
 8001e34:	2001      	movs	r0, #1
 8001e36:	f7ff fcb3 	bl	80017a0 <display_menu>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001e3a:	2303      	movs	r3, #3
 8001e3c:	73bb      	strb	r3, [r7, #14]
 8001e3e:	e006      	b.n	8001e4e <button_pressed+0x2d2>
				disable_button(i);
 8001e40:	7bbb      	ldrb	r3, [r7, #14]
 8001e42:	4618      	mov	r0, r3
 8001e44:	f7fe fba6 	bl	8000594 <disable_button>
			for (uint8_t i = 3; i <= 8; ++i) {
 8001e48:	7bbb      	ldrb	r3, [r7, #14]
 8001e4a:	3301      	adds	r3, #1
 8001e4c:	73bb      	strb	r3, [r7, #14]
 8001e4e:	7bbb      	ldrb	r3, [r7, #14]
 8001e50:	2b08      	cmp	r3, #8
 8001e52:	d9f5      	bls.n	8001e40 <button_pressed+0x2c4>
			}
			update_buttons();
 8001e54:	f7fe fc28 	bl	80006a8 <update_buttons>
			break;
 8001e58:	e03c      	b.n	8001ed4 <button_pressed+0x358>
 8001e5a:	bf00      	nop
 8001e5c:	20001784 	.word	0x20001784
 8001e60:	20015b4a 	.word	0x20015b4a
 8001e64:	20015baf 	.word	0x20015baf
 8001e68:	20015bb0 	.word	0x20015bb0
 8001e6c:	20015b47 	.word	0x20015b47
 8001e70:	20001788 	.word	0x20001788
		case 9: // Next
			display_menu(learn_device_menu, (current_page != MAIN_MENU_PAGE_COUNT) ? (current_page + 1) : 1, 0);
 8001e74:	4b56      	ldr	r3, [pc, #344]	; (8001fd0 <button_pressed+0x454>)
 8001e76:	781b      	ldrb	r3, [r3, #0]
 8001e78:	2b03      	cmp	r3, #3
 8001e7a:	d004      	beq.n	8001e86 <button_pressed+0x30a>
 8001e7c:	4b54      	ldr	r3, [pc, #336]	; (8001fd0 <button_pressed+0x454>)
 8001e7e:	781b      	ldrb	r3, [r3, #0]
 8001e80:	3301      	adds	r3, #1
 8001e82:	b2db      	uxtb	r3, r3
 8001e84:	e000      	b.n	8001e88 <button_pressed+0x30c>
 8001e86:	2301      	movs	r3, #1
 8001e88:	2200      	movs	r2, #0
 8001e8a:	4619      	mov	r1, r3
 8001e8c:	2003      	movs	r0, #3
 8001e8e:	f7ff fc87 	bl	80017a0 <display_menu>
			break;
 8001e92:	e01f      	b.n	8001ed4 <button_pressed+0x358>
		default: // Device Selected
			active_device =  button - 1 + (6 * (current_page - 1));
 8001e94:	4b4e      	ldr	r3, [pc, #312]	; (8001fd0 <button_pressed+0x454>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	461a      	mov	r2, r3
 8001e9a:	0052      	lsls	r2, r2, #1
 8001e9c:	4413      	add	r3, r2
 8001e9e:	005b      	lsls	r3, r3, #1
 8001ea0:	b2da      	uxtb	r2, r3
 8001ea2:	79fb      	ldrb	r3, [r7, #7]
 8001ea4:	4413      	add	r3, r2
 8001ea6:	b2db      	uxtb	r3, r3
 8001ea8:	3b07      	subs	r3, #7
 8001eaa:	b2da      	uxtb	r2, r3
 8001eac:	4b49      	ldr	r3, [pc, #292]	; (8001fd4 <button_pressed+0x458>)
 8001eae:	701a      	strb	r2, [r3, #0]
			display_menu(learn_command_menu, 1, button - 1 + (6 * (current_page - 1)));
 8001eb0:	4b47      	ldr	r3, [pc, #284]	; (8001fd0 <button_pressed+0x454>)
 8001eb2:	781b      	ldrb	r3, [r3, #0]
 8001eb4:	461a      	mov	r2, r3
 8001eb6:	0052      	lsls	r2, r2, #1
 8001eb8:	4413      	add	r3, r2
 8001eba:	005b      	lsls	r3, r3, #1
 8001ebc:	b2da      	uxtb	r2, r3
 8001ebe:	79fb      	ldrb	r3, [r7, #7]
 8001ec0:	4413      	add	r3, r2
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3b07      	subs	r3, #7
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	461a      	mov	r2, r3
 8001eca:	2101      	movs	r1, #1
 8001ecc:	2004      	movs	r0, #4
 8001ece:	f7ff fc67 	bl	80017a0 <display_menu>
			break;
 8001ed2:	bf00      	nop
		}
		in_device_menu = 0;	
 8001ed4:	4b40      	ldr	r3, [pc, #256]	; (8001fd8 <button_pressed+0x45c>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	701a      	strb	r2, [r3, #0]
		break;
 8001eda:	e076      	b.n	8001fca <button_pressed+0x44e>
	case learn_command_menu:
		switch(button) {
 8001edc:	79fb      	ldrb	r3, [r7, #7]
 8001ede:	2b09      	cmp	r3, #9
 8001ee0:	d02e      	beq.n	8001f40 <button_pressed+0x3c4>
 8001ee2:	2b09      	cmp	r3, #9
 8001ee4:	dc4e      	bgt.n	8001f84 <button_pressed+0x408>
 8001ee6:	2b07      	cmp	r3, #7
 8001ee8:	d002      	beq.n	8001ef0 <button_pressed+0x374>
 8001eea:	2b08      	cmp	r3, #8
 8001eec:	d022      	beq.n	8001f34 <button_pressed+0x3b8>
 8001eee:	e049      	b.n	8001f84 <button_pressed+0x408>
		case 7: // Previous Page
			display_menu(
					learn_command_menu,
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8001ef0:	4b37      	ldr	r3, [pc, #220]	; (8001fd0 <button_pressed+0x454>)
 8001ef2:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001ef4:	2b01      	cmp	r3, #1
 8001ef6:	d004      	beq.n	8001f02 <button_pressed+0x386>
					(current_page != 1) ? (current_page - 1) : DEVICE_MENU_PAGE_COUNT,
 8001ef8:	4b35      	ldr	r3, [pc, #212]	; (8001fd0 <button_pressed+0x454>)
 8001efa:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001efc:	3b01      	subs	r3, #1
 8001efe:	b2d9      	uxtb	r1, r3
 8001f00:	e000      	b.n	8001f04 <button_pressed+0x388>
 8001f02:	2104      	movs	r1, #4
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8001f04:	4b34      	ldr	r3, [pc, #208]	; (8001fd8 <button_pressed+0x45c>)
 8001f06:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001f08:	2b00      	cmp	r3, #0
 8001f0a:	d10c      	bne.n	8001f26 <button_pressed+0x3aa>
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8001f0c:	4b30      	ldr	r3, [pc, #192]	; (8001fd0 <button_pressed+0x454>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	461a      	mov	r2, r3
 8001f12:	0052      	lsls	r2, r2, #1
 8001f14:	4413      	add	r3, r2
 8001f16:	005b      	lsls	r3, r3, #1
 8001f18:	b2da      	uxtb	r2, r3
 8001f1a:	79fb      	ldrb	r3, [r7, #7]
 8001f1c:	4413      	add	r3, r2
 8001f1e:	b2db      	uxtb	r3, r3
			display_menu(
 8001f20:	3b07      	subs	r3, #7
 8001f22:	b2db      	uxtb	r3, r3
 8001f24:	e001      	b.n	8001f2a <button_pressed+0x3ae>
 8001f26:	4b2a      	ldr	r3, [pc, #168]	; (8001fd0 <button_pressed+0x454>)
 8001f28:	781b      	ldrb	r3, [r3, #0]
 8001f2a:	461a      	mov	r2, r3
 8001f2c:	2004      	movs	r0, #4
 8001f2e:	f7ff fc37 	bl	80017a0 <display_menu>
			);
			break;
 8001f32:	e043      	b.n	8001fbc <button_pressed+0x440>
		case 8: // Main Menu
			display_menu(learn_device_menu, 1, 0);
 8001f34:	2200      	movs	r2, #0
 8001f36:	2101      	movs	r1, #1
 8001f38:	2003      	movs	r0, #3
 8001f3a:	f7ff fc31 	bl	80017a0 <display_menu>
			break;
 8001f3e:	e03d      	b.n	8001fbc <button_pressed+0x440>
		case 9: // Next Page
			display_menu(
					learn_command_menu,
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001f40:	4b23      	ldr	r3, [pc, #140]	; (8001fd0 <button_pressed+0x454>)
 8001f42:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001f44:	2b04      	cmp	r3, #4
 8001f46:	d004      	beq.n	8001f52 <button_pressed+0x3d6>
					(current_page != DEVICE_MENU_PAGE_COUNT) ? (current_page + 1) : 1,
 8001f48:	4b21      	ldr	r3, [pc, #132]	; (8001fd0 <button_pressed+0x454>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001f4c:	3301      	adds	r3, #1
 8001f4e:	b2d9      	uxtb	r1, r3
 8001f50:	e000      	b.n	8001f54 <button_pressed+0x3d8>
 8001f52:	2101      	movs	r1, #1
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8001f54:	4b20      	ldr	r3, [pc, #128]	; (8001fd8 <button_pressed+0x45c>)
 8001f56:	781b      	ldrb	r3, [r3, #0]
			display_menu(
 8001f58:	2b00      	cmp	r3, #0
 8001f5a:	d10c      	bne.n	8001f76 <button_pressed+0x3fa>
					in_device_menu ? current_page : (button - 1 + (6 * (current_page - 1)))
 8001f5c:	4b1c      	ldr	r3, [pc, #112]	; (8001fd0 <button_pressed+0x454>)
 8001f5e:	781b      	ldrb	r3, [r3, #0]
 8001f60:	461a      	mov	r2, r3
 8001f62:	0052      	lsls	r2, r2, #1
 8001f64:	4413      	add	r3, r2
 8001f66:	005b      	lsls	r3, r3, #1
 8001f68:	b2da      	uxtb	r2, r3
 8001f6a:	79fb      	ldrb	r3, [r7, #7]
 8001f6c:	4413      	add	r3, r2
 8001f6e:	b2db      	uxtb	r3, r3
			display_menu(
 8001f70:	3b07      	subs	r3, #7
 8001f72:	b2db      	uxtb	r3, r3
 8001f74:	e001      	b.n	8001f7a <button_pressed+0x3fe>
 8001f76:	4b16      	ldr	r3, [pc, #88]	; (8001fd0 <button_pressed+0x454>)
 8001f78:	781b      	ldrb	r3, [r3, #0]
 8001f7a:	461a      	mov	r2, r3
 8001f7c:	2004      	movs	r0, #4
 8001f7e:	f7ff fc0f 	bl	80017a0 <display_menu>
			);
			break;
 8001f82:	e01b      	b.n	8001fbc <button_pressed+0x440>
		default: // Learn IR Signal based on button!
			disable_all_buttons();
 8001f84:	f7fe fb7b 	bl	800067e <disable_all_buttons>
			update_buttons();
 8001f88:	f7fe fb8e 	bl	80006a8 <update_buttons>
			display_menu(awaiting_menu,current_page,0);
 8001f8c:	4b10      	ldr	r3, [pc, #64]	; (8001fd0 <button_pressed+0x454>)
 8001f8e:	781b      	ldrb	r3, [r3, #0]
 8001f90:	2200      	movs	r2, #0
 8001f92:	4619      	mov	r1, r3
 8001f94:	2005      	movs	r0, #5
 8001f96:	f7ff fc03 	bl	80017a0 <display_menu>
			Learn_command(button - 1 + (6 * (current_page - 1)),active_device);
 8001f9a:	79fb      	ldrb	r3, [r7, #7]
 8001f9c:	1e59      	subs	r1, r3, #1
 8001f9e:	4b0c      	ldr	r3, [pc, #48]	; (8001fd0 <button_pressed+0x454>)
 8001fa0:	781b      	ldrb	r3, [r3, #0]
 8001fa2:	1e5a      	subs	r2, r3, #1
 8001fa4:	4613      	mov	r3, r2
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	4413      	add	r3, r2
 8001faa:	005b      	lsls	r3, r3, #1
 8001fac:	440b      	add	r3, r1
 8001fae:	4a09      	ldr	r2, [pc, #36]	; (8001fd4 <button_pressed+0x458>)
 8001fb0:	7812      	ldrb	r2, [r2, #0]
 8001fb2:	4611      	mov	r1, r2
 8001fb4:	4618      	mov	r0, r3
 8001fb6:	f000 f811 	bl	8001fdc <Learn_command>
			break;
 8001fba:	bf00      	nop
		}
		in_device_menu = 1;
 8001fbc:	4b06      	ldr	r3, [pc, #24]	; (8001fd8 <button_pressed+0x45c>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
		break;
 8001fc2:	e002      	b.n	8001fca <button_pressed+0x44e>
	if (!button || button > 9) return;
 8001fc4:	bf00      	nop
 8001fc6:	e000      	b.n	8001fca <button_pressed+0x44e>
	default:	
		break;
 8001fc8:	bf00      	nop
	}
}
 8001fca:	3710      	adds	r7, #16
 8001fcc:	46bd      	mov	sp, r7
 8001fce:	bd80      	pop	{r7, pc}
 8001fd0:	20015b4a 	.word	0x20015b4a
 8001fd4:	20015baf 	.word	0x20015baf
 8001fd8:	20015bb0 	.word	0x20015bb0

08001fdc <Learn_command>:
void Learn_command(uint8_t com,uint8_t device){	
 8001fdc:	b590      	push	{r4, r7, lr}
 8001fde:	b085      	sub	sp, #20
 8001fe0:	af00      	add	r7, sp, #0
 8001fe2:	4603      	mov	r3, r0
 8001fe4:	460a      	mov	r2, r1
 8001fe6:	71fb      	strb	r3, [r7, #7]
 8001fe8:	4613      	mov	r3, r2
 8001fea:	71bb      	strb	r3, [r7, #6]
	received = 0;
 8001fec:	4b1b      	ldr	r3, [pc, #108]	; (800205c <Learn_command+0x80>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_IC_Start_IT(&htim2, TIM_CHANNEL_1); //starts timer 2;
 8001ff2:	2100      	movs	r1, #0
 8001ff4:	481a      	ldr	r0, [pc, #104]	; (8002060 <Learn_command+0x84>)
 8001ff6:	f003 ff43 	bl	8005e80 <HAL_TIM_IC_Start_IT>
	while(!received);
 8001ffa:	bf00      	nop
 8001ffc:	4b17      	ldr	r3, [pc, #92]	; (800205c <Learn_command+0x80>)
 8001ffe:	781b      	ldrb	r3, [r3, #0]
 8002000:	2b00      	cmp	r3, #0
 8002002:	d0fb      	beq.n	8001ffc <Learn_command+0x20>
	//writeback
	for(uint32_t i= 0; i<dataLen;++i)
 8002004:	2300      	movs	r3, #0
 8002006:	60fb      	str	r3, [r7, #12]
 8002008:	e016      	b.n	8002038 <Learn_command+0x5c>
		controller.devices[device].commands[com].Data[i] = data[i];
 800200a:	79bb      	ldrb	r3, [r7, #6]
 800200c:	79fa      	ldrb	r2, [r7, #7]
 800200e:	4815      	ldr	r0, [pc, #84]	; (8002064 <Learn_command+0x88>)
 8002010:	68f9      	ldr	r1, [r7, #12]
 8002012:	f830 4011 	ldrh.w	r4, [r0, r1, lsl #1]
 8002016:	4914      	ldr	r1, [pc, #80]	; (8002068 <Learn_command+0x8c>)
 8002018:	2056      	movs	r0, #86	; 0x56
 800201a:	fb00 f202 	mul.w	r2, r0, r2
 800201e:	f640 0016 	movw	r0, #2070	; 0x816
 8002022:	fb00 f303 	mul.w	r3, r0, r3
 8002026:	441a      	add	r2, r3
 8002028:	68fb      	ldr	r3, [r7, #12]
 800202a:	4413      	add	r3, r2
 800202c:	4622      	mov	r2, r4
 800202e:	f821 2013 	strh.w	r2, [r1, r3, lsl #1]
	for(uint32_t i= 0; i<dataLen;++i)
 8002032:	68fb      	ldr	r3, [r7, #12]
 8002034:	3301      	adds	r3, #1
 8002036:	60fb      	str	r3, [r7, #12]
 8002038:	4b0c      	ldr	r3, [pc, #48]	; (800206c <Learn_command+0x90>)
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	68fa      	ldr	r2, [r7, #12]
 800203e:	429a      	cmp	r2, r3
 8002040:	d3e3      	bcc.n	800200a <Learn_command+0x2e>
	enable_all_buttons();
 8002042:	f7fe fb07 	bl	8000654 <enable_all_buttons>
	update_buttons();
 8002046:	f7fe fb2f 	bl	80006a8 <update_buttons>
	display_menu(main_menu,1,0);
 800204a:	2200      	movs	r2, #0
 800204c:	2101      	movs	r1, #1
 800204e:	2000      	movs	r0, #0
 8002050:	f7ff fba6 	bl	80017a0 <display_menu>
}
 8002054:	bf00      	nop
 8002056:	3714      	adds	r7, #20
 8002058:	46bd      	mov	sp, r7
 800205a:	bd90      	pop	{r4, r7, pc}
 800205c:	20015b44 	.word	0x20015b44
 8002060:	20001620 	.word	0x20001620
 8002064:	20015aa4 	.word	0x20015aa4
 8002068:	20001788 	.word	0x20001788
 800206c:	20000004 	.word	0x20000004

08002070 <disable_OLED_EEPROM_writes>:

extern I2C_HandleTypeDef hi2c1;

#define I2C_SEND() HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, i2c_buffer, 3, HAL_MAX_DELAY);

void disable_OLED_EEPROM_writes(void) {
 8002070:	b580      	push	{r7, lr}
 8002072:	b084      	sub	sp, #16
 8002074:	af02      	add	r7, sp, #8
	uint8_t buf[] = {0xF4, 0x01};
 8002076:	f44f 73fa 	mov.w	r3, #500	; 0x1f4
 800207a:	80bb      	strh	r3, [r7, #4]
	HAL_I2C_Master_Transmit(&hi2c1, PX2_ADDR, buf, 2, HAL_MAX_DELAY);
 800207c:	1d3a      	adds	r2, r7, #4
 800207e:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002082:	9300      	str	r3, [sp, #0]
 8002084:	2302      	movs	r3, #2
 8002086:	21a2      	movs	r1, #162	; 0xa2
 8002088:	4803      	ldr	r0, [pc, #12]	; (8002098 <disable_OLED_EEPROM_writes+0x28>)
 800208a:	f001 ff0f 	bl	8003eac <HAL_I2C_Master_Transmit>
}
 800208e:	bf00      	nop
 8002090:	3708      	adds	r7, #8
 8002092:	46bd      	mov	sp, r7
 8002094:	bd80      	pop	{r7, pc}
 8002096:	bf00      	nop
 8002098:	200014d8 	.word	0x200014d8

0800209c <drop_all_CS>:

void drop_all_CS(void) {
 800209c:	b580      	push	{r7, lr}
 800209e:	b082      	sub	sp, #8
 80020a0:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0x00;
 80020a2:	4b0a      	ldr	r3, [pc, #40]	; (80020cc <drop_all_CS+0x30>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x00;
 80020a8:	4b08      	ldr	r3, [pc, #32]	; (80020cc <drop_all_CS+0x30>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 80020ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020b2:	9300      	str	r3, [sp, #0]
 80020b4:	2303      	movs	r3, #3
 80020b6:	4a05      	ldr	r2, [pc, #20]	; (80020cc <drop_all_CS+0x30>)
 80020b8:	21a2      	movs	r1, #162	; 0xa2
 80020ba:	4805      	ldr	r0, [pc, #20]	; (80020d0 <drop_all_CS+0x34>)
 80020bc:	f001 fef6 	bl	8003eac <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 80020c0:	2001      	movs	r0, #1
 80020c2:	f000 ff15 	bl	8002ef0 <HAL_Delay>
}
 80020c6:	bf00      	nop
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	2000141c 	.word	0x2000141c
 80020d0:	200014d8 	.word	0x200014d8

080020d4 <raise_all_CS>:

void raise_all_CS(void) {
 80020d4:	b580      	push	{r7, lr}
 80020d6:	b082      	sub	sp, #8
 80020d8:	af02      	add	r7, sp, #8
	i2c_buffer[1] = 0xFF;
 80020da:	4b09      	ldr	r3, [pc, #36]	; (8002100 <raise_all_CS+0x2c>)
 80020dc:	22ff      	movs	r2, #255	; 0xff
 80020de:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 80020e0:	4b07      	ldr	r3, [pc, #28]	; (8002100 <raise_all_CS+0x2c>)
 80020e2:	2201      	movs	r2, #1
 80020e4:	709a      	strb	r2, [r3, #2]
	I2C_SEND();
 80020e6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80020ea:	9300      	str	r3, [sp, #0]
 80020ec:	2303      	movs	r3, #3
 80020ee:	4a04      	ldr	r2, [pc, #16]	; (8002100 <raise_all_CS+0x2c>)
 80020f0:	21a2      	movs	r1, #162	; 0xa2
 80020f2:	4804      	ldr	r0, [pc, #16]	; (8002104 <raise_all_CS+0x30>)
 80020f4:	f001 feda 	bl	8003eac <HAL_I2C_Master_Transmit>
}
 80020f8:	bf00      	nop
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	2000141c 	.word	0x2000141c
 8002104:	200014d8 	.word	0x200014d8

08002108 <drop_CS>:

// Only one CS can be dropped at a time.
void drop_CS(uint8_t display) {
 8002108:	b580      	push	{r7, lr}
 800210a:	b084      	sub	sp, #16
 800210c:	af02      	add	r7, sp, #8
 800210e:	4603      	mov	r3, r0
 8002110:	71fb      	strb	r3, [r7, #7]
	// Set all high
	i2c_buffer[1] = 0xFF;
 8002112:	4b1a      	ldr	r3, [pc, #104]	; (800217c <drop_CS+0x74>)
 8002114:	22ff      	movs	r2, #255	; 0xff
 8002116:	705a      	strb	r2, [r3, #1]
	i2c_buffer[2] = 0x01;
 8002118:	4b18      	ldr	r3, [pc, #96]	; (800217c <drop_CS+0x74>)
 800211a:	2201      	movs	r2, #1
 800211c:	709a      	strb	r2, [r3, #2]
	// Set the specified display line low
	if (display == 9) {
 800211e:	79fb      	ldrb	r3, [r7, #7]
 8002120:	2b09      	cmp	r3, #9
 8002122:	d107      	bne.n	8002134 <drop_CS+0x2c>
		i2c_buffer[2] &= ~(0b1);
 8002124:	4b15      	ldr	r3, [pc, #84]	; (800217c <drop_CS+0x74>)
 8002126:	789b      	ldrb	r3, [r3, #2]
 8002128:	f023 0301 	bic.w	r3, r3, #1
 800212c:	b2da      	uxtb	r2, r3
 800212e:	4b13      	ldr	r3, [pc, #76]	; (800217c <drop_CS+0x74>)
 8002130:	709a      	strb	r2, [r3, #2]
 8002132:	e012      	b.n	800215a <drop_CS+0x52>
	} else if (display <= 8) {
 8002134:	79fb      	ldrb	r3, [r7, #7]
 8002136:	2b08      	cmp	r3, #8
 8002138:	d80f      	bhi.n	800215a <drop_CS+0x52>
		i2c_buffer[1] &= ~(0b1 << (display - 1));
 800213a:	4b10      	ldr	r3, [pc, #64]	; (800217c <drop_CS+0x74>)
 800213c:	785b      	ldrb	r3, [r3, #1]
 800213e:	b25a      	sxtb	r2, r3
 8002140:	79fb      	ldrb	r3, [r7, #7]
 8002142:	3b01      	subs	r3, #1
 8002144:	2101      	movs	r1, #1
 8002146:	fa01 f303 	lsl.w	r3, r1, r3
 800214a:	b25b      	sxtb	r3, r3
 800214c:	43db      	mvns	r3, r3
 800214e:	b25b      	sxtb	r3, r3
 8002150:	4013      	ands	r3, r2
 8002152:	b25b      	sxtb	r3, r3
 8002154:	b2da      	uxtb	r2, r3
 8002156:	4b09      	ldr	r3, [pc, #36]	; (800217c <drop_CS+0x74>)
 8002158:	705a      	strb	r2, [r3, #1]
	}
	I2C_SEND();
 800215a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800215e:	9300      	str	r3, [sp, #0]
 8002160:	2303      	movs	r3, #3
 8002162:	4a06      	ldr	r2, [pc, #24]	; (800217c <drop_CS+0x74>)
 8002164:	21a2      	movs	r1, #162	; 0xa2
 8002166:	4806      	ldr	r0, [pc, #24]	; (8002180 <drop_CS+0x78>)
 8002168:	f001 fea0 	bl	8003eac <HAL_I2C_Master_Transmit>
	HAL_Delay(1);
 800216c:	2001      	movs	r0, #1
 800216e:	f000 febf 	bl	8002ef0 <HAL_Delay>
}
 8002172:	bf00      	nop
 8002174:	3708      	adds	r7, #8
 8002176:	46bd      	mov	sp, r7
 8002178:	bd80      	pop	{r7, pc}
 800217a:	bf00      	nop
 800217c:	2000141c 	.word	0x2000141c
 8002180:	200014d8 	.word	0x200014d8

08002184 <init_displays>:

// Initializes the display on startup
void init_displays(void) {
 8002184:	b580      	push	{r7, lr}
 8002186:	b082      	sub	sp, #8
 8002188:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 800218a:	4b37      	ldr	r3, [pc, #220]	; (8002268 <init_displays+0xe4>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a36      	ldr	r2, [pc, #216]	; (8002268 <init_displays+0xe4>)
 8002190:	f023 0301 	bic.w	r3, r3, #1
 8002194:	6013      	str	r3, [r2, #0]
	disable_OLED_EEPROM_writes();
 8002196:	f7ff ff6b 	bl	8002070 <disable_OLED_EEPROM_writes>
	raise_all_CS();
 800219a:	f7ff ff9b 	bl	80020d4 <raise_all_CS>
	DC_HIGH();
 800219e:	2201      	movs	r2, #1
 80021a0:	2101      	movs	r1, #1
 80021a2:	4832      	ldr	r0, [pc, #200]	; (800226c <init_displays+0xe8>)
 80021a4:	f001 fd24 	bl	8003bf0 <HAL_GPIO_WritePin>
	RST_HIGH();
 80021a8:	2201      	movs	r2, #1
 80021aa:	2102      	movs	r1, #2
 80021ac:	482f      	ldr	r0, [pc, #188]	; (800226c <init_displays+0xe8>)
 80021ae:	f001 fd1f 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_Delay(10);
 80021b2:	200a      	movs	r0, #10
 80021b4:	f000 fe9c 	bl	8002ef0 <HAL_Delay>
	RST_LOW();
 80021b8:	2200      	movs	r2, #0
 80021ba:	2102      	movs	r1, #2
 80021bc:	482b      	ldr	r0, [pc, #172]	; (800226c <init_displays+0xe8>)
 80021be:	f001 fd17 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(&hspi2, (uint8_t*) &init_display_cmds, 1, HAL_MAX_DELAY);
 80021c2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80021c6:	2201      	movs	r2, #1
 80021c8:	4929      	ldr	r1, [pc, #164]	; (8002270 <init_displays+0xec>)
 80021ca:	482a      	ldr	r0, [pc, #168]	; (8002274 <init_displays+0xf0>)
 80021cc:	f003 f9e1 	bl	8005592 <HAL_SPI_Transmit>
	HAL_Delay(10);
 80021d0:	200a      	movs	r0, #10
 80021d2:	f000 fe8d 	bl	8002ef0 <HAL_Delay>
	RST_HIGH();
 80021d6:	2201      	movs	r2, #1
 80021d8:	2102      	movs	r1, #2
 80021da:	4824      	ldr	r0, [pc, #144]	; (800226c <init_displays+0xe8>)
 80021dc:	f001 fd08 	bl	8003bf0 <HAL_GPIO_WritePin>

	DC_LOW();
 80021e0:	2200      	movs	r2, #0
 80021e2:	2101      	movs	r1, #1
 80021e4:	4821      	ldr	r0, [pc, #132]	; (800226c <init_displays+0xe8>)
 80021e6:	f001 fd03 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 80021ea:	2001      	movs	r0, #1
 80021ec:	f000 fe80 	bl	8002ef0 <HAL_Delay>

	drop_all_CS();
 80021f0:	f7ff ff54 	bl	800209c <drop_all_CS>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 80021f4:	2300      	movs	r3, #0
 80021f6:	71fb      	strb	r3, [r7, #7]
 80021f8:	e002      	b.n	8002200 <init_displays+0x7c>
 80021fa:	79fb      	ldrb	r3, [r7, #7]
 80021fc:	3301      	adds	r3, #1
 80021fe:	71fb      	strb	r3, [r7, #7]
 8002200:	79fb      	ldrb	r3, [r7, #7]
 8002202:	2b4f      	cmp	r3, #79	; 0x4f
 8002204:	d9f9      	bls.n	80021fa <init_displays+0x76>

	// Send commands
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8002206:	2300      	movs	r3, #0
 8002208:	80bb      	strh	r3, [r7, #4]
 800220a:	e014      	b.n	8002236 <init_displays+0xb2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_display_cmds[i], 1, HAL_MAX_DELAY);
 800220c:	88bb      	ldrh	r3, [r7, #4]
 800220e:	4a18      	ldr	r2, [pc, #96]	; (8002270 <init_displays+0xec>)
 8002210:	1899      	adds	r1, r3, r2
 8002212:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002216:	2201      	movs	r2, #1
 8002218:	4816      	ldr	r0, [pc, #88]	; (8002274 <init_displays+0xf0>)
 800221a:	f003 f9ba 	bl	8005592 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 800221e:	2300      	movs	r3, #0
 8002220:	70fb      	strb	r3, [r7, #3]
 8002222:	e002      	b.n	800222a <init_displays+0xa6>
 8002224:	78fb      	ldrb	r3, [r7, #3]
 8002226:	3301      	adds	r3, #1
 8002228:	70fb      	strb	r3, [r7, #3]
 800222a:	78fb      	ldrb	r3, [r7, #3]
 800222c:	2b09      	cmp	r3, #9
 800222e:	d9f9      	bls.n	8002224 <init_displays+0xa0>
	for (uint16_t i = 0; i < sizeof(init_display_cmds); ++i) {
 8002230:	88bb      	ldrh	r3, [r7, #4]
 8002232:	3301      	adds	r3, #1
 8002234:	80bb      	strh	r3, [r7, #4]
 8002236:	88bb      	ldrh	r3, [r7, #4]
 8002238:	2b19      	cmp	r3, #25
 800223a:	d9e7      	bls.n	800220c <init_displays+0x88>
	}

	raise_all_CS();
 800223c:	f7ff ff4a 	bl	80020d4 <raise_all_CS>

	// Raise D/C# and clear all displays
	DC_HIGH();
 8002240:	2201      	movs	r2, #1
 8002242:	2101      	movs	r1, #1
 8002244:	4809      	ldr	r0, [pc, #36]	; (800226c <init_displays+0xe8>)
 8002246:	f001 fcd3 	bl	8003bf0 <HAL_GPIO_WritePin>
	START_BUTTON_POLL();
 800224a:	4b07      	ldr	r3, [pc, #28]	; (8002268 <init_displays+0xe4>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a06      	ldr	r2, [pc, #24]	; (8002268 <init_displays+0xe4>)
 8002250:	f043 0301 	orr.w	r3, r3, #1
 8002254:	6013      	str	r3, [r2, #0]
	erase_buffer();
 8002256:	f000 f903 	bl	8002460 <erase_buffer>
	update_all_displays();
 800225a:	f000 f889 	bl	8002370 <update_all_displays>
}
 800225e:	bf00      	nop
 8002260:	3708      	adds	r7, #8
 8002262:	46bd      	mov	sp, r7
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	40000c00 	.word	0x40000c00
 800226c:	40020000 	.word	0x40020000
 8002270:	20001420 	.word	0x20001420
 8002274:	20001580 	.word	0x20001580

08002278 <update_display>:

// refreshes a display (1 indexed, left-to-right, top-to-bottom)
void update_display(uint8_t display) {
 8002278:	b580      	push	{r7, lr}
 800227a:	b086      	sub	sp, #24
 800227c:	af00      	add	r7, sp, #0
 800227e:	4603      	mov	r3, r0
 8002280:	71fb      	strb	r3, [r7, #7]
	STOP_BUTTON_POLL();
 8002282:	4b36      	ldr	r3, [pc, #216]	; (800235c <update_display+0xe4>)
 8002284:	681b      	ldr	r3, [r3, #0]
 8002286:	4a35      	ldr	r2, [pc, #212]	; (800235c <update_display+0xe4>)
 8002288:	f023 0301 	bic.w	r3, r3, #1
 800228c:	6013      	str	r3, [r2, #0]
	DC_LOW();
 800228e:	2200      	movs	r2, #0
 8002290:	2101      	movs	r1, #1
 8002292:	4833      	ldr	r0, [pc, #204]	; (8002360 <update_display+0xe8>)
 8002294:	f001 fcac 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8002298:	2001      	movs	r0, #1
 800229a:	f000 fe29 	bl	8002ef0 <HAL_Delay>

	// Drop Chip Select Low
	drop_CS(display);
 800229e:	79fb      	ldrb	r3, [r7, #7]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7ff ff31 	bl	8002108 <drop_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 80022a6:	2300      	movs	r3, #0
 80022a8:	75fb      	strb	r3, [r7, #23]
 80022aa:	e002      	b.n	80022b2 <update_display+0x3a>
 80022ac:	7dfb      	ldrb	r3, [r7, #23]
 80022ae:	3301      	adds	r3, #1
 80022b0:	75fb      	strb	r3, [r7, #23]
 80022b2:	7dfb      	ldrb	r3, [r7, #23]
 80022b4:	2b4f      	cmp	r3, #79	; 0x4f
 80022b6:	d9f9      	bls.n	80022ac <update_display+0x34>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 80022b8:	2300      	movs	r3, #0
 80022ba:	82bb      	strh	r3, [r7, #20]
 80022bc:	e014      	b.n	80022e8 <update_display+0x70>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 80022be:	8abb      	ldrh	r3, [r7, #20]
 80022c0:	4a28      	ldr	r2, [pc, #160]	; (8002364 <update_display+0xec>)
 80022c2:	1899      	adds	r1, r3, r2
 80022c4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80022c8:	2201      	movs	r2, #1
 80022ca:	4827      	ldr	r0, [pc, #156]	; (8002368 <update_display+0xf0>)
 80022cc:	f003 f961 	bl	8005592 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 80022d0:	2300      	movs	r3, #0
 80022d2:	74fb      	strb	r3, [r7, #19]
 80022d4:	e002      	b.n	80022dc <update_display+0x64>
 80022d6:	7cfb      	ldrb	r3, [r7, #19]
 80022d8:	3301      	adds	r3, #1
 80022da:	74fb      	strb	r3, [r7, #19]
 80022dc:	7cfb      	ldrb	r3, [r7, #19]
 80022de:	2b09      	cmp	r3, #9
 80022e0:	d9f9      	bls.n	80022d6 <update_display+0x5e>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 80022e2:	8abb      	ldrh	r3, [r7, #20]
 80022e4:	3301      	adds	r3, #1
 80022e6:	82bb      	strh	r3, [r7, #20]
 80022e8:	8abb      	ldrh	r3, [r7, #20]
 80022ea:	2b05      	cmp	r3, #5
 80022ec:	d9e7      	bls.n	80022be <update_display+0x46>
	}

	DC_HIGH();
 80022ee:	2201      	movs	r2, #1
 80022f0:	2101      	movs	r1, #1
 80022f2:	481b      	ldr	r0, [pc, #108]	; (8002360 <update_display+0xe8>)
 80022f4:	f001 fc7c 	bl	8003bf0 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 80022f8:	2300      	movs	r3, #0
 80022fa:	74bb      	strb	r3, [r7, #18]
 80022fc:	e002      	b.n	8002304 <update_display+0x8c>
 80022fe:	7cbb      	ldrb	r3, [r7, #18]
 8002300:	3301      	adds	r3, #1
 8002302:	74bb      	strb	r3, [r7, #18]
 8002304:	7cbb      	ldrb	r3, [r7, #18]
 8002306:	2b4f      	cmp	r3, #79	; 0x4f
 8002308:	d9f9      	bls.n	80022fe <update_display+0x86>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 800230a:	2300      	movs	r3, #0
 800230c:	823b      	strh	r3, [r7, #16]
 800230e:	e014      	b.n	800233a <update_display+0xc2>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8002310:	8a3b      	ldrh	r3, [r7, #16]
 8002312:	4a16      	ldr	r2, [pc, #88]	; (800236c <update_display+0xf4>)
 8002314:	1899      	adds	r1, r3, r2
 8002316:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800231a:	2201      	movs	r2, #1
 800231c:	4812      	ldr	r0, [pc, #72]	; (8002368 <update_display+0xf0>)
 800231e:	f003 f938 	bl	8005592 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8002322:	2300      	movs	r3, #0
 8002324:	73fb      	strb	r3, [r7, #15]
 8002326:	e002      	b.n	800232e <update_display+0xb6>
 8002328:	7bfb      	ldrb	r3, [r7, #15]
 800232a:	3301      	adds	r3, #1
 800232c:	73fb      	strb	r3, [r7, #15]
 800232e:	7bfb      	ldrb	r3, [r7, #15]
 8002330:	2b09      	cmp	r3, #9
 8002332:	d9f9      	bls.n	8002328 <update_display+0xb0>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002334:	8a3b      	ldrh	r3, [r7, #16]
 8002336:	3301      	adds	r3, #1
 8002338:	823b      	strh	r3, [r7, #16]
 800233a:	8a3b      	ldrh	r3, [r7, #16]
 800233c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002340:	d3e6      	bcc.n	8002310 <update_display+0x98>
	}

	raise_all_CS();
 8002342:	f7ff fec7 	bl	80020d4 <raise_all_CS>
	START_BUTTON_POLL();
 8002346:	4b05      	ldr	r3, [pc, #20]	; (800235c <update_display+0xe4>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4a04      	ldr	r2, [pc, #16]	; (800235c <update_display+0xe4>)
 800234c:	f043 0301 	orr.w	r3, r3, #1
 8002350:	6013      	str	r3, [r2, #0]
}
 8002352:	bf00      	nop
 8002354:	3718      	adds	r7, #24
 8002356:	46bd      	mov	sp, r7
 8002358:	bd80      	pop	{r7, pc}
 800235a:	bf00      	nop
 800235c:	40000c00 	.word	0x40000c00
 8002360:	40020000 	.word	0x40020000
 8002364:	2000143c 	.word	0x2000143c
 8002368:	20001580 	.word	0x20001580
 800236c:	20015bb4 	.word	0x20015bb4

08002370 <update_all_displays>:

void update_all_displays() {
 8002370:	b580      	push	{r7, lr}
 8002372:	b084      	sub	sp, #16
 8002374:	af00      	add	r7, sp, #0
	STOP_BUTTON_POLL();
 8002376:	4b35      	ldr	r3, [pc, #212]	; (800244c <update_all_displays+0xdc>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a34      	ldr	r2, [pc, #208]	; (800244c <update_all_displays+0xdc>)
 800237c:	f023 0301 	bic.w	r3, r3, #1
 8002380:	6013      	str	r3, [r2, #0]
	DC_LOW();
 8002382:	2200      	movs	r2, #0
 8002384:	2101      	movs	r1, #1
 8002386:	4832      	ldr	r0, [pc, #200]	; (8002450 <update_all_displays+0xe0>)
 8002388:	f001 fc32 	bl	8003bf0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 800238c:	2001      	movs	r0, #1
 800238e:	f000 fdaf 	bl	8002ef0 <HAL_Delay>
	drop_all_CS();
 8002392:	f7ff fe83 	bl	800209c <drop_all_CS>

	for (uint8_t j = 0; j < 80; ++j) asm("");
 8002396:	2300      	movs	r3, #0
 8002398:	73fb      	strb	r3, [r7, #15]
 800239a:	e002      	b.n	80023a2 <update_all_displays+0x32>
 800239c:	7bfb      	ldrb	r3, [r7, #15]
 800239e:	3301      	adds	r3, #1
 80023a0:	73fb      	strb	r3, [r7, #15]
 80023a2:	7bfb      	ldrb	r3, [r7, #15]
 80023a4:	2b4f      	cmp	r3, #79	; 0x4f
 80023a6:	d9f9      	bls.n	800239c <update_all_displays+0x2c>

	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 80023a8:	2300      	movs	r3, #0
 80023aa:	81bb      	strh	r3, [r7, #12]
 80023ac:	e014      	b.n	80023d8 <update_all_displays+0x68>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &init_draw_cmds[i], 1, HAL_MAX_DELAY);
 80023ae:	89bb      	ldrh	r3, [r7, #12]
 80023b0:	4a28      	ldr	r2, [pc, #160]	; (8002454 <update_all_displays+0xe4>)
 80023b2:	1899      	adds	r1, r3, r2
 80023b4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80023b8:	2201      	movs	r2, #1
 80023ba:	4827      	ldr	r0, [pc, #156]	; (8002458 <update_all_displays+0xe8>)
 80023bc:	f003 f8e9 	bl	8005592 <HAL_SPI_Transmit>
		for (uint8_t j = 0; j < 10; ++j) asm("");
 80023c0:	2300      	movs	r3, #0
 80023c2:	72fb      	strb	r3, [r7, #11]
 80023c4:	e002      	b.n	80023cc <update_all_displays+0x5c>
 80023c6:	7afb      	ldrb	r3, [r7, #11]
 80023c8:	3301      	adds	r3, #1
 80023ca:	72fb      	strb	r3, [r7, #11]
 80023cc:	7afb      	ldrb	r3, [r7, #11]
 80023ce:	2b09      	cmp	r3, #9
 80023d0:	d9f9      	bls.n	80023c6 <update_all_displays+0x56>
	for (uint16_t i = 0; i < sizeof(init_draw_cmds); ++i) {
 80023d2:	89bb      	ldrh	r3, [r7, #12]
 80023d4:	3301      	adds	r3, #1
 80023d6:	81bb      	strh	r3, [r7, #12]
 80023d8:	89bb      	ldrh	r3, [r7, #12]
 80023da:	2b05      	cmp	r3, #5
 80023dc:	d9e7      	bls.n	80023ae <update_all_displays+0x3e>
	}

	DC_HIGH();
 80023de:	2201      	movs	r2, #1
 80023e0:	2101      	movs	r1, #1
 80023e2:	481b      	ldr	r0, [pc, #108]	; (8002450 <update_all_displays+0xe0>)
 80023e4:	f001 fc04 	bl	8003bf0 <HAL_GPIO_WritePin>
	for (uint8_t j = 0; j < 80; ++j) asm("");
 80023e8:	2300      	movs	r3, #0
 80023ea:	72bb      	strb	r3, [r7, #10]
 80023ec:	e002      	b.n	80023f4 <update_all_displays+0x84>
 80023ee:	7abb      	ldrb	r3, [r7, #10]
 80023f0:	3301      	adds	r3, #1
 80023f2:	72bb      	strb	r3, [r7, #10]
 80023f4:	7abb      	ldrb	r3, [r7, #10]
 80023f6:	2b4f      	cmp	r3, #79	; 0x4f
 80023f8:	d9f9      	bls.n	80023ee <update_all_displays+0x7e>

	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 80023fa:	2300      	movs	r3, #0
 80023fc:	813b      	strh	r3, [r7, #8]
 80023fe:	e014      	b.n	800242a <update_all_displays+0xba>
		HAL_SPI_Transmit(&hspi2, (uint8_t *) &display_buffer[i], 1, HAL_MAX_DELAY);
 8002400:	893b      	ldrh	r3, [r7, #8]
 8002402:	4a16      	ldr	r2, [pc, #88]	; (800245c <update_all_displays+0xec>)
 8002404:	1899      	adds	r1, r3, r2
 8002406:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800240a:	2201      	movs	r2, #1
 800240c:	4812      	ldr	r0, [pc, #72]	; (8002458 <update_all_displays+0xe8>)
 800240e:	f003 f8c0 	bl	8005592 <HAL_SPI_Transmit>
		for (uint8_t k = 0; k < 10; ++k) asm("");
 8002412:	2300      	movs	r3, #0
 8002414:	71fb      	strb	r3, [r7, #7]
 8002416:	e002      	b.n	800241e <update_all_displays+0xae>
 8002418:	79fb      	ldrb	r3, [r7, #7]
 800241a:	3301      	adds	r3, #1
 800241c:	71fb      	strb	r3, [r7, #7]
 800241e:	79fb      	ldrb	r3, [r7, #7]
 8002420:	2b09      	cmp	r3, #9
 8002422:	d9f9      	bls.n	8002418 <update_all_displays+0xa8>
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002424:	893b      	ldrh	r3, [r7, #8]
 8002426:	3301      	adds	r3, #1
 8002428:	813b      	strh	r3, [r7, #8]
 800242a:	893b      	ldrh	r3, [r7, #8]
 800242c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002430:	d3e6      	bcc.n	8002400 <update_all_displays+0x90>
	}
	raise_all_CS();
 8002432:	f7ff fe4f 	bl	80020d4 <raise_all_CS>
	START_BUTTON_POLL();
 8002436:	4b05      	ldr	r3, [pc, #20]	; (800244c <update_all_displays+0xdc>)
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a04      	ldr	r2, [pc, #16]	; (800244c <update_all_displays+0xdc>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6013      	str	r3, [r2, #0]
}
 8002442:	bf00      	nop
 8002444:	3710      	adds	r7, #16
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	40000c00 	.word	0x40000c00
 8002450:	40020000 	.word	0x40020000
 8002454:	2000143c 	.word	0x2000143c
 8002458:	20001580 	.word	0x20001580
 800245c:	20015bb4 	.word	0x20015bb4

08002460 <erase_buffer>:
		display_buffer[i] = ~display_buffer[i];
    }
}

// writes zeroes to all bits in the buffer
void erase_buffer(void) {
 8002460:	b480      	push	{r7}
 8002462:	b083      	sub	sp, #12
 8002464:	af00      	add	r7, sp, #0
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002466:	2300      	movs	r3, #0
 8002468:	80fb      	strh	r3, [r7, #6]
 800246a:	e006      	b.n	800247a <erase_buffer+0x1a>
		display_buffer[i] = 0x00;
 800246c:	88fb      	ldrh	r3, [r7, #6]
 800246e:	4a08      	ldr	r2, [pc, #32]	; (8002490 <erase_buffer+0x30>)
 8002470:	2100      	movs	r1, #0
 8002472:	54d1      	strb	r1, [r2, r3]
	for (uint16_t i = 0; i < DISPLAY_WIDTH * DISPLAY_HEIGHT / 8; ++i) {
 8002474:	88fb      	ldrh	r3, [r7, #6]
 8002476:	3301      	adds	r3, #1
 8002478:	80fb      	strh	r3, [r7, #6]
 800247a:	88fb      	ldrh	r3, [r7, #6]
 800247c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002480:	d3f4      	bcc.n	800246c <erase_buffer+0xc>
	}
}
 8002482:	bf00      	nop
 8002484:	bf00      	nop
 8002486:	370c      	adds	r7, #12
 8002488:	46bd      	mov	sp, r7
 800248a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248e:	4770      	bx	lr
 8002490:	20015bb4 	.word	0x20015bb4

08002494 <draw_pixel>:
	}
}

// Draw a pixel to the buffer
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_pixel(uint8_t x, uint8_t y, Color color) {
 8002494:	b480      	push	{r7}
 8002496:	b083      	sub	sp, #12
 8002498:	af00      	add	r7, sp, #0
 800249a:	4603      	mov	r3, r0
 800249c:	71fb      	strb	r3, [r7, #7]
 800249e:	460b      	mov	r3, r1
 80024a0:	71bb      	strb	r3, [r7, #6]
 80024a2:	4613      	mov	r3, r2
 80024a4:	717b      	strb	r3, [r7, #5]
    // If the pixel is outside of buffer bounds, break.
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 80024a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80024aa:	2b00      	cmp	r3, #0
 80024ac:	db3d      	blt.n	800252a <draw_pixel+0x96>
 80024ae:	79bb      	ldrb	r3, [r7, #6]
 80024b0:	2b1f      	cmp	r3, #31
 80024b2:	d83a      	bhi.n	800252a <draw_pixel+0x96>

    // Clear the bit of the buffer, then write a 0 or 1
    // Depending on the selected color.
	if (color) {
 80024b4:	797b      	ldrb	r3, [r7, #5]
 80024b6:	2b00      	cmp	r3, #0
 80024b8:	d01a      	beq.n	80024f0 <draw_pixel+0x5c>
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] |= (1 << (y & 7));
 80024ba:	79fa      	ldrb	r2, [r7, #7]
 80024bc:	79bb      	ldrb	r3, [r7, #6]
 80024be:	08db      	lsrs	r3, r3, #3
 80024c0:	b2d8      	uxtb	r0, r3
 80024c2:	4603      	mov	r3, r0
 80024c4:	01db      	lsls	r3, r3, #7
 80024c6:	4413      	add	r3, r2
 80024c8:	4a1b      	ldr	r2, [pc, #108]	; (8002538 <draw_pixel+0xa4>)
 80024ca:	5cd3      	ldrb	r3, [r2, r3]
 80024cc:	b25a      	sxtb	r2, r3
 80024ce:	79bb      	ldrb	r3, [r7, #6]
 80024d0:	f003 0307 	and.w	r3, r3, #7
 80024d4:	2101      	movs	r1, #1
 80024d6:	fa01 f303 	lsl.w	r3, r1, r3
 80024da:	b25b      	sxtb	r3, r3
 80024dc:	4313      	orrs	r3, r2
 80024de:	b259      	sxtb	r1, r3
 80024e0:	79fa      	ldrb	r2, [r7, #7]
 80024e2:	4603      	mov	r3, r0
 80024e4:	01db      	lsls	r3, r3, #7
 80024e6:	4413      	add	r3, r2
 80024e8:	b2c9      	uxtb	r1, r1
 80024ea:	4a13      	ldr	r2, [pc, #76]	; (8002538 <draw_pixel+0xa4>)
 80024ec:	54d1      	strb	r1, [r2, r3]
 80024ee:	e01d      	b.n	800252c <draw_pixel+0x98>
	} else {
		display_buffer[x + (y / 8) * DISPLAY_WIDTH] &= ~(1 << (y & 7));
 80024f0:	79fa      	ldrb	r2, [r7, #7]
 80024f2:	79bb      	ldrb	r3, [r7, #6]
 80024f4:	08db      	lsrs	r3, r3, #3
 80024f6:	b2d8      	uxtb	r0, r3
 80024f8:	4603      	mov	r3, r0
 80024fa:	01db      	lsls	r3, r3, #7
 80024fc:	4413      	add	r3, r2
 80024fe:	4a0e      	ldr	r2, [pc, #56]	; (8002538 <draw_pixel+0xa4>)
 8002500:	5cd3      	ldrb	r3, [r2, r3]
 8002502:	b25a      	sxtb	r2, r3
 8002504:	79bb      	ldrb	r3, [r7, #6]
 8002506:	f003 0307 	and.w	r3, r3, #7
 800250a:	2101      	movs	r1, #1
 800250c:	fa01 f303 	lsl.w	r3, r1, r3
 8002510:	b25b      	sxtb	r3, r3
 8002512:	43db      	mvns	r3, r3
 8002514:	b25b      	sxtb	r3, r3
 8002516:	4013      	ands	r3, r2
 8002518:	b259      	sxtb	r1, r3
 800251a:	79fa      	ldrb	r2, [r7, #7]
 800251c:	4603      	mov	r3, r0
 800251e:	01db      	lsls	r3, r3, #7
 8002520:	4413      	add	r3, r2
 8002522:	b2c9      	uxtb	r1, r1
 8002524:	4a04      	ldr	r2, [pc, #16]	; (8002538 <draw_pixel+0xa4>)
 8002526:	54d1      	strb	r1, [r2, r3]
 8002528:	e000      	b.n	800252c <draw_pixel+0x98>
    if (x >= DISPLAY_WIDTH || y >= DISPLAY_HEIGHT) return;
 800252a:	bf00      	nop
	}
}
 800252c:	370c      	adds	r7, #12
 800252e:	46bd      	mov	sp, r7
 8002530:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002534:	4770      	bx	lr
 8002536:	bf00      	nop
 8002538:	20015bb4 	.word	0x20015bb4

0800253c <draw_char>:

// Draw a character to the buffer
// x,y should correspond to top left corner of text
// Adapted from https://github.com/afiskon/stm32-ssd1306/blob/master/ssd1306/ssd1306.c
void draw_char(char ch, uint8_t x, uint8_t y, Color color) {
 800253c:	b590      	push	{r4, r7, lr}
 800253e:	b085      	sub	sp, #20
 8002540:	af02      	add	r7, sp, #8
 8002542:	4604      	mov	r4, r0
 8002544:	4608      	mov	r0, r1
 8002546:	4611      	mov	r1, r2
 8002548:	461a      	mov	r2, r3
 800254a:	4623      	mov	r3, r4
 800254c:	71fb      	strb	r3, [r7, #7]
 800254e:	4603      	mov	r3, r0
 8002550:	71bb      	strb	r3, [r7, #6]
 8002552:	460b      	mov	r3, r1
 8002554:	717b      	strb	r3, [r7, #5]
 8002556:	4613      	mov	r3, r2
 8002558:	713b      	strb	r3, [r7, #4]
    if (ch < 32 || ch > 126) return;
 800255a:	79fb      	ldrb	r3, [r7, #7]
 800255c:	2b1f      	cmp	r3, #31
 800255e:	d913      	bls.n	8002588 <draw_char+0x4c>
 8002560:	79fb      	ldrb	r3, [r7, #7]
 8002562:	2b7e      	cmp	r3, #126	; 0x7e
 8002564:	d810      	bhi.n	8002588 <draw_char+0x4c>
    draw_bmp(&font[54*(ch - 32)], x, y, FONT_WIDTH, FONT_HEIGHT, color);
 8002566:	79fb      	ldrb	r3, [r7, #7]
 8002568:	3b20      	subs	r3, #32
 800256a:	2236      	movs	r2, #54	; 0x36
 800256c:	fb02 f303 	mul.w	r3, r2, r3
 8002570:	4a07      	ldr	r2, [pc, #28]	; (8002590 <draw_char+0x54>)
 8002572:	1898      	adds	r0, r3, r2
 8002574:	797a      	ldrb	r2, [r7, #5]
 8002576:	79b9      	ldrb	r1, [r7, #6]
 8002578:	793b      	ldrb	r3, [r7, #4]
 800257a:	9301      	str	r3, [sp, #4]
 800257c:	231b      	movs	r3, #27
 800257e:	9300      	str	r3, [sp, #0]
 8002580:	230c      	movs	r3, #12
 8002582:	f000 f807 	bl	8002594 <draw_bmp>
 8002586:	e000      	b.n	800258a <draw_char+0x4e>
    if (ch < 32 || ch > 126) return;
 8002588:	bf00      	nop
}
 800258a:	370c      	adds	r7, #12
 800258c:	46bd      	mov	sp, r7
 800258e:	bd90      	pop	{r4, r7, pc}
 8002590:	20000010 	.word	0x20000010

08002594 <draw_bmp>:

// Draw a bitmap to the buffer
// Adapted from https://github.com/adafruit/Adafruit-GFX-Library/blob/master/Adafruit_GFX.cpp
void draw_bmp(uint8_t* bmp, uint8_t x, uint8_t y, uint8_t w, uint8_t h, Color color) {
 8002594:	b580      	push	{r7, lr}
 8002596:	b084      	sub	sp, #16
 8002598:	af00      	add	r7, sp, #0
 800259a:	6078      	str	r0, [r7, #4]
 800259c:	4608      	mov	r0, r1
 800259e:	4611      	mov	r1, r2
 80025a0:	461a      	mov	r2, r3
 80025a2:	4603      	mov	r3, r0
 80025a4:	70fb      	strb	r3, [r7, #3]
 80025a6:	460b      	mov	r3, r1
 80025a8:	70bb      	strb	r3, [r7, #2]
 80025aa:	4613      	mov	r3, r2
 80025ac:	707b      	strb	r3, [r7, #1]
	int16_t byteWidth = (w + 7) / 8;
 80025ae:	787b      	ldrb	r3, [r7, #1]
 80025b0:	3307      	adds	r3, #7
 80025b2:	2b00      	cmp	r3, #0
 80025b4:	da00      	bge.n	80025b8 <draw_bmp+0x24>
 80025b6:	3307      	adds	r3, #7
 80025b8:	10db      	asrs	r3, r3, #3
 80025ba:	813b      	strh	r3, [r7, #8]
	uint8_t b = 0;
 80025bc:	2300      	movs	r3, #0
 80025be:	73fb      	strb	r3, [r7, #15]
	for (int16_t j = 0; j < h; j++, y++) {
 80025c0:	2300      	movs	r3, #0
 80025c2:	81bb      	strh	r3, [r7, #12]
 80025c4:	e047      	b.n	8002656 <draw_bmp+0xc2>
		for (int16_t i = 0; i < w; i++) {
 80025c6:	2300      	movs	r3, #0
 80025c8:	817b      	strh	r3, [r7, #10]
 80025ca:	e036      	b.n	800263a <draw_bmp+0xa6>
			if (i & 7)
 80025cc:	897b      	ldrh	r3, [r7, #10]
 80025ce:	f003 0307 	and.w	r3, r3, #7
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d003      	beq.n	80025de <draw_bmp+0x4a>
				b <<= 1;
 80025d6:	7bfb      	ldrb	r3, [r7, #15]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	73fb      	strb	r3, [r7, #15]
 80025dc:	e012      	b.n	8002604 <draw_bmp+0x70>
			else
				b = bmp[j * byteWidth + i / 8];
 80025de:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 80025e2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 80025e6:	fb03 f202 	mul.w	r2, r3, r2
 80025ea:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	da00      	bge.n	80025f4 <draw_bmp+0x60>
 80025f2:	3307      	adds	r3, #7
 80025f4:	10db      	asrs	r3, r3, #3
 80025f6:	b21b      	sxth	r3, r3
 80025f8:	4413      	add	r3, r2
 80025fa:	461a      	mov	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	4413      	add	r3, r2
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	73fb      	strb	r3, [r7, #15]
			draw_pixel(x + i, y, (b & 0x80) ? color : !color);
 8002604:	897b      	ldrh	r3, [r7, #10]
 8002606:	b2da      	uxtb	r2, r3
 8002608:	78fb      	ldrb	r3, [r7, #3]
 800260a:	4413      	add	r3, r2
 800260c:	b2d8      	uxtb	r0, r3
 800260e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002612:	2b00      	cmp	r3, #0
 8002614:	db06      	blt.n	8002624 <draw_bmp+0x90>
 8002616:	7f3b      	ldrb	r3, [r7, #28]
 8002618:	2b00      	cmp	r3, #0
 800261a:	bf0c      	ite	eq
 800261c:	2301      	moveq	r3, #1
 800261e:	2300      	movne	r3, #0
 8002620:	b2db      	uxtb	r3, r3
 8002622:	e000      	b.n	8002626 <draw_bmp+0x92>
 8002624:	7f3b      	ldrb	r3, [r7, #28]
 8002626:	78b9      	ldrb	r1, [r7, #2]
 8002628:	461a      	mov	r2, r3
 800262a:	f7ff ff33 	bl	8002494 <draw_pixel>
		for (int16_t i = 0; i < w; i++) {
 800262e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002632:	b29b      	uxth	r3, r3
 8002634:	3301      	adds	r3, #1
 8002636:	b29b      	uxth	r3, r3
 8002638:	817b      	strh	r3, [r7, #10]
 800263a:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 800263e:	787b      	ldrb	r3, [r7, #1]
 8002640:	429a      	cmp	r2, r3
 8002642:	dbc3      	blt.n	80025cc <draw_bmp+0x38>
	for (int16_t j = 0; j < h; j++, y++) {
 8002644:	f9b7 300c 	ldrsh.w	r3, [r7, #12]
 8002648:	b29b      	uxth	r3, r3
 800264a:	3301      	adds	r3, #1
 800264c:	b29b      	uxth	r3, r3
 800264e:	81bb      	strh	r3, [r7, #12]
 8002650:	78bb      	ldrb	r3, [r7, #2]
 8002652:	3301      	adds	r3, #1
 8002654:	70bb      	strb	r3, [r7, #2]
 8002656:	f9b7 200c 	ldrsh.w	r2, [r7, #12]
 800265a:	7e3b      	ldrb	r3, [r7, #24]
 800265c:	429a      	cmp	r2, r3
 800265e:	dbb2      	blt.n	80025c6 <draw_bmp+0x32>
		}
	}
}
 8002660:	bf00      	nop
 8002662:	bf00      	nop
 8002664:	3710      	adds	r7, #16
 8002666:	46bd      	mov	sp, r7
 8002668:	bd80      	pop	{r7, pc}

0800266a <draw_string>:

// Draw string centered on display
// maximum size that will fit on display: 10 characters
void draw_string(char* str, Color color) {
 800266a:	b580      	push	{r7, lr}
 800266c:	b084      	sub	sp, #16
 800266e:	af00      	add	r7, sp, #0
 8002670:	6078      	str	r0, [r7, #4]
 8002672:	460b      	mov	r3, r1
 8002674:	70fb      	strb	r3, [r7, #3]
	size_t len = strlen(str);
 8002676:	6878      	ldr	r0, [r7, #4]
 8002678:	f7fd fdac 	bl	80001d4 <strlen>
 800267c:	60f8      	str	r0, [r7, #12]
    if (len <= 0 || len > 10) return;
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	2b00      	cmp	r3, #0
 8002682:	d02c      	beq.n	80026de <draw_string+0x74>
 8002684:	68fb      	ldr	r3, [r7, #12]
 8002686:	2b0a      	cmp	r3, #10
 8002688:	d829      	bhi.n	80026de <draw_string+0x74>

    uint8_t x = DISPLAY_WIDTH/2;
 800268a:	2340      	movs	r3, #64	; 0x40
 800268c:	72fb      	strb	r3, [r7, #11]
    if (len%2) {
 800268e:	68fb      	ldr	r3, [r7, #12]
 8002690:	f003 0301 	and.w	r3, r3, #1
 8002694:	2b00      	cmp	r3, #0
 8002696:	d005      	beq.n	80026a4 <draw_string+0x3a>
        x -= FONT_WIDTH/2;
 8002698:	7afb      	ldrb	r3, [r7, #11]
 800269a:	3b06      	subs	r3, #6
 800269c:	72fb      	strb	r3, [r7, #11]
        len -= 1;
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	3b01      	subs	r3, #1
 80026a2:	60fb      	str	r3, [r7, #12]
    }
    x -= FONT_WIDTH * len/2;
 80026a4:	68fa      	ldr	r2, [r7, #12]
 80026a6:	4613      	mov	r3, r2
 80026a8:	005b      	lsls	r3, r3, #1
 80026aa:	4413      	add	r3, r2
 80026ac:	009b      	lsls	r3, r3, #2
 80026ae:	085b      	lsrs	r3, r3, #1
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	7afa      	ldrb	r2, [r7, #11]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	72fb      	strb	r3, [r7, #11]

    while(*str) {
 80026b8:	e00c      	b.n	80026d4 <draw_string+0x6a>
        draw_char(*str, x, DISPLAY_HEIGHT/2 - FONT_HEIGHT/2, color);
 80026ba:	687b      	ldr	r3, [r7, #4]
 80026bc:	7818      	ldrb	r0, [r3, #0]
 80026be:	78fb      	ldrb	r3, [r7, #3]
 80026c0:	7af9      	ldrb	r1, [r7, #11]
 80026c2:	2203      	movs	r2, #3
 80026c4:	f7ff ff3a 	bl	800253c <draw_char>
        x += FONT_WIDTH;
 80026c8:	7afb      	ldrb	r3, [r7, #11]
 80026ca:	330c      	adds	r3, #12
 80026cc:	72fb      	strb	r3, [r7, #11]
        ++str;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	3301      	adds	r3, #1
 80026d2:	607b      	str	r3, [r7, #4]
    while(*str) {
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	781b      	ldrb	r3, [r3, #0]
 80026d8:	2b00      	cmp	r3, #0
 80026da:	d1ee      	bne.n	80026ba <draw_string+0x50>
 80026dc:	e000      	b.n	80026e0 <draw_string+0x76>
    if (len <= 0 || len > 10) return;
 80026de:	bf00      	nop
    }
}
 80026e0:	3710      	adds	r7, #16
 80026e2:	46bd      	mov	sp, r7
 80026e4:	bd80      	pop	{r7, pc}
	...

080026e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_MspInit+0x4c>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_MspInit+0x4c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002726:	2007      	movs	r0, #7
 8002728:	f001 f884 	bl	8003834 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a17      	ldr	r2, [pc, #92]	; (80027b4 <HAL_ADC_MspInit+0x7c>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d127      	bne.n	80027aa <HAL_ADC_MspInit+0x72>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b16      	ldr	r3, [pc, #88]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 8002760:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002762:	4a15      	ldr	r2, [pc, #84]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 8002764:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002768:	6453      	str	r3, [r2, #68]	; 0x44
 800276a:	4b13      	ldr	r3, [pc, #76]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 800276c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800276e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002776:	2300      	movs	r3, #0
 8002778:	60fb      	str	r3, [r7, #12]
 800277a:	4b0f      	ldr	r3, [pc, #60]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 800277c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800277e:	4a0e      	ldr	r2, [pc, #56]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 8002780:	f043 0301 	orr.w	r3, r3, #1
 8002784:	6313      	str	r3, [r2, #48]	; 0x30
 8002786:	4b0c      	ldr	r3, [pc, #48]	; (80027b8 <HAL_ADC_MspInit+0x80>)
 8002788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800278a:	f003 0301 	and.w	r3, r3, #1
 800278e:	60fb      	str	r3, [r7, #12]
 8002790:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA4     ------> ADC1_IN4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8002792:	2310      	movs	r3, #16
 8002794:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8002796:	2303      	movs	r3, #3
 8002798:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800279a:	2300      	movs	r3, #0
 800279c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800279e:	f107 0314 	add.w	r3, r7, #20
 80027a2:	4619      	mov	r1, r3
 80027a4:	4805      	ldr	r0, [pc, #20]	; (80027bc <HAL_ADC_MspInit+0x84>)
 80027a6:	f001 f887 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80027aa:	bf00      	nop
 80027ac:	3728      	adds	r7, #40	; 0x28
 80027ae:	46bd      	mov	sp, r7
 80027b0:	bd80      	pop	{r7, pc}
 80027b2:	bf00      	nop
 80027b4:	40012000 	.word	0x40012000
 80027b8:	40023800 	.word	0x40023800
 80027bc:	40020000 	.word	0x40020000

080027c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80027c0:	b580      	push	{r7, lr}
 80027c2:	b08c      	sub	sp, #48	; 0x30
 80027c4:	af00      	add	r7, sp, #0
 80027c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027c8:	f107 031c 	add.w	r3, r7, #28
 80027cc:	2200      	movs	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
 80027d0:	605a      	str	r2, [r3, #4]
 80027d2:	609a      	str	r2, [r3, #8]
 80027d4:	60da      	str	r2, [r3, #12]
 80027d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a42      	ldr	r2, [pc, #264]	; (80028e8 <HAL_I2C_MspInit+0x128>)
 80027de:	4293      	cmp	r3, r2
 80027e0:	d12d      	bne.n	800283e <HAL_I2C_MspInit+0x7e>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027e2:	2300      	movs	r3, #0
 80027e4:	61bb      	str	r3, [r7, #24]
 80027e6:	4b41      	ldr	r3, [pc, #260]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 80027e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027ea:	4a40      	ldr	r2, [pc, #256]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 80027ec:	f043 0302 	orr.w	r3, r3, #2
 80027f0:	6313      	str	r3, [r2, #48]	; 0x30
 80027f2:	4b3e      	ldr	r3, [pc, #248]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 80027f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027f6:	f003 0302 	and.w	r3, r3, #2
 80027fa:	61bb      	str	r3, [r7, #24]
 80027fc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80027fe:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002802:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002804:	2312      	movs	r3, #18
 8002806:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002808:	2300      	movs	r3, #0
 800280a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800280c:	2303      	movs	r3, #3
 800280e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002810:	2304      	movs	r3, #4
 8002812:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002814:	f107 031c 	add.w	r3, r7, #28
 8002818:	4619      	mov	r1, r3
 800281a:	4835      	ldr	r0, [pc, #212]	; (80028f0 <HAL_I2C_MspInit+0x130>)
 800281c:	f001 f84c 	bl	80038b8 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002820:	2300      	movs	r3, #0
 8002822:	617b      	str	r3, [r7, #20]
 8002824:	4b31      	ldr	r3, [pc, #196]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 8002826:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002828:	4a30      	ldr	r2, [pc, #192]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 800282a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800282e:	6413      	str	r3, [r2, #64]	; 0x40
 8002830:	4b2e      	ldr	r3, [pc, #184]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 8002832:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002834:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002838:	617b      	str	r3, [r7, #20]
 800283a:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C3_MspInit 1 */

  /* USER CODE END I2C3_MspInit 1 */
  }

}
 800283c:	e050      	b.n	80028e0 <HAL_I2C_MspInit+0x120>
  else if(hi2c->Instance==I2C3)
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	4a2c      	ldr	r2, [pc, #176]	; (80028f4 <HAL_I2C_MspInit+0x134>)
 8002844:	4293      	cmp	r3, r2
 8002846:	d14b      	bne.n	80028e0 <HAL_I2C_MspInit+0x120>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002848:	2300      	movs	r3, #0
 800284a:	613b      	str	r3, [r7, #16]
 800284c:	4b27      	ldr	r3, [pc, #156]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 800284e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002850:	4a26      	ldr	r2, [pc, #152]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 8002852:	f043 0304 	orr.w	r3, r3, #4
 8002856:	6313      	str	r3, [r2, #48]	; 0x30
 8002858:	4b24      	ldr	r3, [pc, #144]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 800285a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	613b      	str	r3, [r7, #16]
 8002862:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	4b20      	ldr	r3, [pc, #128]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 800286a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800286c:	4a1f      	ldr	r2, [pc, #124]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 800286e:	f043 0301 	orr.w	r3, r3, #1
 8002872:	6313      	str	r3, [r2, #48]	; 0x30
 8002874:	4b1d      	ldr	r3, [pc, #116]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 8002876:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002878:	f003 0301 	and.w	r3, r3, #1
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8002880:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002884:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002886:	2312      	movs	r3, #18
 8002888:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800288a:	2300      	movs	r3, #0
 800288c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800288e:	2303      	movs	r3, #3
 8002890:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8002892:	2304      	movs	r3, #4
 8002894:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002896:	f107 031c 	add.w	r3, r7, #28
 800289a:	4619      	mov	r1, r3
 800289c:	4816      	ldr	r0, [pc, #88]	; (80028f8 <HAL_I2C_MspInit+0x138>)
 800289e:	f001 f80b 	bl	80038b8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 80028a2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80028a6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80028a8:	2312      	movs	r3, #18
 80028aa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028ac:	2300      	movs	r3, #0
 80028ae:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028b0:	2303      	movs	r3, #3
 80028b2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 80028b4:	2304      	movs	r3, #4
 80028b6:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80028b8:	f107 031c 	add.w	r3, r7, #28
 80028bc:	4619      	mov	r1, r3
 80028be:	480f      	ldr	r0, [pc, #60]	; (80028fc <HAL_I2C_MspInit+0x13c>)
 80028c0:	f000 fffa 	bl	80038b8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80028c4:	2300      	movs	r3, #0
 80028c6:	60bb      	str	r3, [r7, #8]
 80028c8:	4b08      	ldr	r3, [pc, #32]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 80028ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028cc:	4a07      	ldr	r2, [pc, #28]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 80028ce:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80028d2:	6413      	str	r3, [r2, #64]	; 0x40
 80028d4:	4b05      	ldr	r3, [pc, #20]	; (80028ec <HAL_I2C_MspInit+0x12c>)
 80028d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028d8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80028dc:	60bb      	str	r3, [r7, #8]
 80028de:	68bb      	ldr	r3, [r7, #8]
}
 80028e0:	bf00      	nop
 80028e2:	3730      	adds	r7, #48	; 0x30
 80028e4:	46bd      	mov	sp, r7
 80028e6:	bd80      	pop	{r7, pc}
 80028e8:	40005400 	.word	0x40005400
 80028ec:	40023800 	.word	0x40023800
 80028f0:	40020400 	.word	0x40020400
 80028f4:	40005c00 	.word	0x40005c00
 80028f8:	40020800 	.word	0x40020800
 80028fc:	40020000 	.word	0x40020000

08002900 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002900:	b580      	push	{r7, lr}
 8002902:	b08a      	sub	sp, #40	; 0x28
 8002904:	af00      	add	r7, sp, #0
 8002906:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002908:	f107 0314 	add.w	r3, r7, #20
 800290c:	2200      	movs	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
 8002910:	605a      	str	r2, [r3, #4]
 8002912:	609a      	str	r2, [r3, #8]
 8002914:	60da      	str	r2, [r3, #12]
 8002916:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	681b      	ldr	r3, [r3, #0]
 800291c:	4a28      	ldr	r2, [pc, #160]	; (80029c0 <HAL_SPI_MspInit+0xc0>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d14a      	bne.n	80029b8 <HAL_SPI_MspInit+0xb8>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8002922:	2300      	movs	r3, #0
 8002924:	613b      	str	r3, [r7, #16]
 8002926:	4b27      	ldr	r3, [pc, #156]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002928:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800292a:	4a26      	ldr	r2, [pc, #152]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 800292c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002930:	6413      	str	r3, [r2, #64]	; 0x40
 8002932:	4b24      	ldr	r3, [pc, #144]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002934:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002936:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800293a:	613b      	str	r3, [r7, #16]
 800293c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800293e:	2300      	movs	r3, #0
 8002940:	60fb      	str	r3, [r7, #12]
 8002942:	4b20      	ldr	r3, [pc, #128]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002946:	4a1f      	ldr	r2, [pc, #124]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002948:	f043 0304 	orr.w	r3, r3, #4
 800294c:	6313      	str	r3, [r2, #48]	; 0x30
 800294e:	4b1d      	ldr	r3, [pc, #116]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002952:	f003 0304 	and.w	r3, r3, #4
 8002956:	60fb      	str	r3, [r7, #12]
 8002958:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800295a:	2300      	movs	r3, #0
 800295c:	60bb      	str	r3, [r7, #8]
 800295e:	4b19      	ldr	r3, [pc, #100]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002962:	4a18      	ldr	r2, [pc, #96]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 8002964:	f043 0302 	orr.w	r3, r3, #2
 8002968:	6313      	str	r3, [r2, #48]	; 0x30
 800296a:	4b16      	ldr	r3, [pc, #88]	; (80029c4 <HAL_SPI_MspInit+0xc4>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800296e:	f003 0302 	and.w	r3, r3, #2
 8002972:	60bb      	str	r3, [r7, #8]
 8002974:	68bb      	ldr	r3, [r7, #8]
    /**SPI2 GPIO Configuration
    PC3     ------> SPI2_MOSI
    PB13     ------> SPI2_SCK
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002976:	2308      	movs	r3, #8
 8002978:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800297a:	2302      	movs	r3, #2
 800297c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800297e:	2300      	movs	r3, #0
 8002980:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002982:	2303      	movs	r3, #3
 8002984:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8002986:	2305      	movs	r3, #5
 8002988:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800298a:	f107 0314 	add.w	r3, r7, #20
 800298e:	4619      	mov	r1, r3
 8002990:	480d      	ldr	r0, [pc, #52]	; (80029c8 <HAL_SPI_MspInit+0xc8>)
 8002992:	f000 ff91 	bl	80038b8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8002996:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800299a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800299c:	2302      	movs	r3, #2
 800299e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029a0:	2300      	movs	r3, #0
 80029a2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029a4:	2303      	movs	r3, #3
 80029a6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80029a8:	2305      	movs	r3, #5
 80029aa:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80029ac:	f107 0314 	add.w	r3, r7, #20
 80029b0:	4619      	mov	r1, r3
 80029b2:	4806      	ldr	r0, [pc, #24]	; (80029cc <HAL_SPI_MspInit+0xcc>)
 80029b4:	f000 ff80 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 80029b8:	bf00      	nop
 80029ba:	3728      	adds	r7, #40	; 0x28
 80029bc:	46bd      	mov	sp, r7
 80029be:	bd80      	pop	{r7, pc}
 80029c0:	40003800 	.word	0x40003800
 80029c4:	40023800 	.word	0x40023800
 80029c8:	40020800 	.word	0x40020800
 80029cc:	40020400 	.word	0x40020400

080029d0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80029d0:	b580      	push	{r7, lr}
 80029d2:	b08c      	sub	sp, #48	; 0x30
 80029d4:	af00      	add	r7, sp, #0
 80029d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d8:	f107 031c 	add.w	r3, r7, #28
 80029dc:	2200      	movs	r2, #0
 80029de:	601a      	str	r2, [r3, #0]
 80029e0:	605a      	str	r2, [r3, #4]
 80029e2:	609a      	str	r2, [r3, #8]
 80029e4:	60da      	str	r2, [r3, #12]
 80029e6:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a3f      	ldr	r2, [pc, #252]	; (8002aec <HAL_TIM_Base_MspInit+0x11c>)
 80029ee:	4293      	cmp	r3, r2
 80029f0:	d10e      	bne.n	8002a10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80029f2:	2300      	movs	r3, #0
 80029f4:	61bb      	str	r3, [r7, #24]
 80029f6:	4b3e      	ldr	r3, [pc, #248]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 80029f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fa:	4a3d      	ldr	r2, [pc, #244]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 80029fc:	f043 0301 	orr.w	r3, r3, #1
 8002a00:	6453      	str	r3, [r2, #68]	; 0x44
 8002a02:	4b3b      	ldr	r3, [pc, #236]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a06:	f003 0301 	and.w	r3, r3, #1
 8002a0a:	61bb      	str	r3, [r7, #24]
 8002a0c:	69bb      	ldr	r3, [r7, #24]
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 8002a0e:	e069      	b.n	8002ae4 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM2)
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	681b      	ldr	r3, [r3, #0]
 8002a14:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a18:	d135      	bne.n	8002a86 <HAL_TIM_Base_MspInit+0xb6>
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a1a:	2300      	movs	r3, #0
 8002a1c:	617b      	str	r3, [r7, #20]
 8002a1e:	4b34      	ldr	r3, [pc, #208]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a22:	4a33      	ldr	r2, [pc, #204]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a24:	f043 0301 	orr.w	r3, r3, #1
 8002a28:	6413      	str	r3, [r2, #64]	; 0x40
 8002a2a:	4b31      	ldr	r3, [pc, #196]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a2e:	f003 0301 	and.w	r3, r3, #1
 8002a32:	617b      	str	r3, [r7, #20]
 8002a34:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a36:	2300      	movs	r3, #0
 8002a38:	613b      	str	r3, [r7, #16]
 8002a3a:	4b2d      	ldr	r3, [pc, #180]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a3e:	4a2c      	ldr	r2, [pc, #176]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a40:	f043 0301 	orr.w	r3, r3, #1
 8002a44:	6313      	str	r3, [r2, #48]	; 0x30
 8002a46:	4b2a      	ldr	r3, [pc, #168]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a4a:	f003 0301 	and.w	r3, r3, #1
 8002a4e:	613b      	str	r3, [r7, #16]
 8002a50:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8002a52:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8002a56:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a58:	2302      	movs	r3, #2
 8002a5a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a5c:	2300      	movs	r3, #0
 8002a5e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002a60:	2300      	movs	r3, #0
 8002a62:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8002a64:	2301      	movs	r3, #1
 8002a66:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a68:	f107 031c 	add.w	r3, r7, #28
 8002a6c:	4619      	mov	r1, r3
 8002a6e:	4821      	ldr	r0, [pc, #132]	; (8002af4 <HAL_TIM_Base_MspInit+0x124>)
 8002a70:	f000 ff22 	bl	80038b8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a74:	2200      	movs	r2, #0
 8002a76:	2100      	movs	r1, #0
 8002a78:	201c      	movs	r0, #28
 8002a7a:	f000 fee6 	bl	800384a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a7e:	201c      	movs	r0, #28
 8002a80:	f000 feff 	bl	8003882 <HAL_NVIC_EnableIRQ>
}
 8002a84:	e02e      	b.n	8002ae4 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM3)
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4a1b      	ldr	r2, [pc, #108]	; (8002af8 <HAL_TIM_Base_MspInit+0x128>)
 8002a8c:	4293      	cmp	r3, r2
 8002a8e:	d10e      	bne.n	8002aae <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a90:	2300      	movs	r3, #0
 8002a92:	60fb      	str	r3, [r7, #12]
 8002a94:	4b16      	ldr	r3, [pc, #88]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a96:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a98:	4a15      	ldr	r2, [pc, #84]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002a9a:	f043 0302 	orr.w	r3, r3, #2
 8002a9e:	6413      	str	r3, [r2, #64]	; 0x40
 8002aa0:	4b13      	ldr	r3, [pc, #76]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002aa4:	f003 0302 	and.w	r3, r3, #2
 8002aa8:	60fb      	str	r3, [r7, #12]
 8002aaa:	68fb      	ldr	r3, [r7, #12]
}
 8002aac:	e01a      	b.n	8002ae4 <HAL_TIM_Base_MspInit+0x114>
  else if(htim_base->Instance==TIM5)
 8002aae:	687b      	ldr	r3, [r7, #4]
 8002ab0:	681b      	ldr	r3, [r3, #0]
 8002ab2:	4a12      	ldr	r2, [pc, #72]	; (8002afc <HAL_TIM_Base_MspInit+0x12c>)
 8002ab4:	4293      	cmp	r3, r2
 8002ab6:	d115      	bne.n	8002ae4 <HAL_TIM_Base_MspInit+0x114>
    __HAL_RCC_TIM5_CLK_ENABLE();
 8002ab8:	2300      	movs	r3, #0
 8002aba:	60bb      	str	r3, [r7, #8]
 8002abc:	4b0c      	ldr	r3, [pc, #48]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002abe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ac0:	4a0b      	ldr	r2, [pc, #44]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002ac2:	f043 0308 	orr.w	r3, r3, #8
 8002ac6:	6413      	str	r3, [r2, #64]	; 0x40
 8002ac8:	4b09      	ldr	r3, [pc, #36]	; (8002af0 <HAL_TIM_Base_MspInit+0x120>)
 8002aca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002acc:	f003 0308 	and.w	r3, r3, #8
 8002ad0:	60bb      	str	r3, [r7, #8]
 8002ad2:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM5_IRQn, 0, 0);
 8002ad4:	2200      	movs	r2, #0
 8002ad6:	2100      	movs	r1, #0
 8002ad8:	2032      	movs	r0, #50	; 0x32
 8002ada:	f000 feb6 	bl	800384a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM5_IRQn);
 8002ade:	2032      	movs	r0, #50	; 0x32
 8002ae0:	f000 fecf 	bl	8003882 <HAL_NVIC_EnableIRQ>
}
 8002ae4:	bf00      	nop
 8002ae6:	3730      	adds	r7, #48	; 0x30
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd80      	pop	{r7, pc}
 8002aec:	40010000 	.word	0x40010000
 8002af0:	40023800 	.word	0x40023800
 8002af4:	40020000 	.word	0x40020000
 8002af8:	40000400 	.word	0x40000400
 8002afc:	40000c00 	.word	0x40000c00

08002b00 <HAL_TIM_PWM_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_pwm: TIM_PWM handle pointer
* @retval None
*/
void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* htim_pwm)
{
 8002b00:	b480      	push	{r7}
 8002b02:	b085      	sub	sp, #20
 8002b04:	af00      	add	r7, sp, #0
 8002b06:	6078      	str	r0, [r7, #4]
  if(htim_pwm->Instance==TIM4)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0b      	ldr	r2, [pc, #44]	; (8002b3c <HAL_TIM_PWM_MspInit+0x3c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10d      	bne.n	8002b2e <HAL_TIM_PWM_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8002b12:	2300      	movs	r3, #0
 8002b14:	60fb      	str	r3, [r7, #12]
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <HAL_TIM_PWM_MspInit+0x40>)
 8002b18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b1a:	4a09      	ldr	r2, [pc, #36]	; (8002b40 <HAL_TIM_PWM_MspInit+0x40>)
 8002b1c:	f043 0304 	orr.w	r3, r3, #4
 8002b20:	6413      	str	r3, [r2, #64]	; 0x40
 8002b22:	4b07      	ldr	r3, [pc, #28]	; (8002b40 <HAL_TIM_PWM_MspInit+0x40>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	f003 0304 	and.w	r3, r3, #4
 8002b2a:	60fb      	str	r3, [r7, #12]
 8002b2c:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8002b2e:	bf00      	nop
 8002b30:	3714      	adds	r7, #20
 8002b32:	46bd      	mov	sp, r7
 8002b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b38:	4770      	bx	lr
 8002b3a:	bf00      	nop
 8002b3c:	40000800 	.word	0x40000800
 8002b40:	40023800 	.word	0x40023800

08002b44 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b44:	b580      	push	{r7, lr}
 8002b46:	b08a      	sub	sp, #40	; 0x28
 8002b48:	af00      	add	r7, sp, #0
 8002b4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b4c:	f107 0314 	add.w	r3, r7, #20
 8002b50:	2200      	movs	r2, #0
 8002b52:	601a      	str	r2, [r3, #0]
 8002b54:	605a      	str	r2, [r3, #4]
 8002b56:	609a      	str	r2, [r3, #8]
 8002b58:	60da      	str	r2, [r3, #12]
 8002b5a:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	4a24      	ldr	r2, [pc, #144]	; (8002bf4 <HAL_TIM_MspPostInit+0xb0>)
 8002b62:	4293      	cmp	r3, r2
 8002b64:	d11e      	bne.n	8002ba4 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b66:	2300      	movs	r3, #0
 8002b68:	613b      	str	r3, [r7, #16]
 8002b6a:	4b23      	ldr	r3, [pc, #140]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b6e:	4a22      	ldr	r2, [pc, #136]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002b70:	f043 0304 	orr.w	r3, r3, #4
 8002b74:	6313      	str	r3, [r2, #48]	; 0x30
 8002b76:	4b20      	ldr	r3, [pc, #128]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	f003 0304 	and.w	r3, r3, #4
 8002b7e:	613b      	str	r3, [r7, #16]
 8002b80:	693b      	ldr	r3, [r7, #16]
    /**TIM3 GPIO Configuration
    PC7     ------> TIM3_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002b82:	2380      	movs	r3, #128	; 0x80
 8002b84:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b86:	2302      	movs	r3, #2
 8002b88:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b8a:	2300      	movs	r3, #0
 8002b8c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b8e:	2300      	movs	r3, #0
 8002b90:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002b92:	2302      	movs	r3, #2
 8002b94:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b96:	f107 0314 	add.w	r3, r7, #20
 8002b9a:	4619      	mov	r1, r3
 8002b9c:	4817      	ldr	r0, [pc, #92]	; (8002bfc <HAL_TIM_MspPostInit+0xb8>)
 8002b9e:	f000 fe8b 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8002ba2:	e022      	b.n	8002bea <HAL_TIM_MspPostInit+0xa6>
  else if(htim->Instance==TIM4)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	681b      	ldr	r3, [r3, #0]
 8002ba8:	4a15      	ldr	r2, [pc, #84]	; (8002c00 <HAL_TIM_MspPostInit+0xbc>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d11d      	bne.n	8002bea <HAL_TIM_MspPostInit+0xa6>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002bae:	2300      	movs	r3, #0
 8002bb0:	60fb      	str	r3, [r7, #12]
 8002bb2:	4b11      	ldr	r3, [pc, #68]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002bb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb6:	4a10      	ldr	r2, [pc, #64]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002bb8:	f043 0302 	orr.w	r3, r3, #2
 8002bbc:	6313      	str	r3, [r2, #48]	; 0x30
 8002bbe:	4b0e      	ldr	r3, [pc, #56]	; (8002bf8 <HAL_TIM_MspPostInit+0xb4>)
 8002bc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bc2:	f003 0302 	and.w	r3, r3, #2
 8002bc6:	60fb      	str	r3, [r7, #12]
 8002bc8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_7;
 8002bca:	2380      	movs	r3, #128	; 0x80
 8002bcc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bce:	2302      	movs	r3, #2
 8002bd0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bd2:	2300      	movs	r3, #0
 8002bd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8002bda:	2302      	movs	r3, #2
 8002bdc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bde:	f107 0314 	add.w	r3, r7, #20
 8002be2:	4619      	mov	r1, r3
 8002be4:	4807      	ldr	r0, [pc, #28]	; (8002c04 <HAL_TIM_MspPostInit+0xc0>)
 8002be6:	f000 fe67 	bl	80038b8 <HAL_GPIO_Init>
}
 8002bea:	bf00      	nop
 8002bec:	3728      	adds	r7, #40	; 0x28
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bd80      	pop	{r7, pc}
 8002bf2:	bf00      	nop
 8002bf4:	40000400 	.word	0x40000400
 8002bf8:	40023800 	.word	0x40023800
 8002bfc:	40020800 	.word	0x40020800
 8002c00:	40000800 	.word	0x40000800
 8002c04:	40020400 	.word	0x40020400

08002c08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b08a      	sub	sp, #40	; 0x28
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c10:	f107 0314 	add.w	r3, r7, #20
 8002c14:	2200      	movs	r2, #0
 8002c16:	601a      	str	r2, [r3, #0]
 8002c18:	605a      	str	r2, [r3, #4]
 8002c1a:	609a      	str	r2, [r3, #8]
 8002c1c:	60da      	str	r2, [r3, #12]
 8002c1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART1)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	4a19      	ldr	r2, [pc, #100]	; (8002c8c <HAL_UART_MspInit+0x84>)
 8002c26:	4293      	cmp	r3, r2
 8002c28:	d12c      	bne.n	8002c84 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART1_MspInit 0 */

  /* USER CODE END USART1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8002c2a:	2300      	movs	r3, #0
 8002c2c:	613b      	str	r3, [r7, #16]
 8002c2e:	4b18      	ldr	r3, [pc, #96]	; (8002c90 <HAL_UART_MspInit+0x88>)
 8002c30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c32:	4a17      	ldr	r2, [pc, #92]	; (8002c90 <HAL_UART_MspInit+0x88>)
 8002c34:	f043 0310 	orr.w	r3, r3, #16
 8002c38:	6453      	str	r3, [r2, #68]	; 0x44
 8002c3a:	4b15      	ldr	r3, [pc, #84]	; (8002c90 <HAL_UART_MspInit+0x88>)
 8002c3c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002c3e:	f003 0310 	and.w	r3, r3, #16
 8002c42:	613b      	str	r3, [r7, #16]
 8002c44:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c46:	2300      	movs	r3, #0
 8002c48:	60fb      	str	r3, [r7, #12]
 8002c4a:	4b11      	ldr	r3, [pc, #68]	; (8002c90 <HAL_UART_MspInit+0x88>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4e:	4a10      	ldr	r2, [pc, #64]	; (8002c90 <HAL_UART_MspInit+0x88>)
 8002c50:	f043 0301 	orr.w	r3, r3, #1
 8002c54:	6313      	str	r3, [r2, #48]	; 0x30
 8002c56:	4b0e      	ldr	r3, [pc, #56]	; (8002c90 <HAL_UART_MspInit+0x88>)
 8002c58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5a:	f003 0301 	and.w	r3, r3, #1
 8002c5e:	60fb      	str	r3, [r7, #12]
 8002c60:	68fb      	ldr	r3, [r7, #12]
    /**USART1 GPIO Configuration
    PA9     ------> USART1_TX
    PA10     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002c62:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002c66:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c68:	2302      	movs	r3, #2
 8002c6a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c6c:	2300      	movs	r3, #0
 8002c6e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c70:	2303      	movs	r3, #3
 8002c72:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002c74:	2307      	movs	r3, #7
 8002c76:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c78:	f107 0314 	add.w	r3, r7, #20
 8002c7c:	4619      	mov	r1, r3
 8002c7e:	4805      	ldr	r0, [pc, #20]	; (8002c94 <HAL_UART_MspInit+0x8c>)
 8002c80:	f000 fe1a 	bl	80038b8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8002c84:	bf00      	nop
 8002c86:	3728      	adds	r7, #40	; 0x28
 8002c88:	46bd      	mov	sp, r7
 8002c8a:	bd80      	pop	{r7, pc}
 8002c8c:	40011000 	.word	0x40011000
 8002c90:	40023800 	.word	0x40023800
 8002c94:	40020000 	.word	0x40020000

08002c98 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002c9c:	e7fe      	b.n	8002c9c <NMI_Handler+0x4>

08002c9e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c9e:	b480      	push	{r7}
 8002ca0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002ca2:	e7fe      	b.n	8002ca2 <HardFault_Handler+0x4>

08002ca4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002ca4:	b480      	push	{r7}
 8002ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002ca8:	e7fe      	b.n	8002ca8 <MemManage_Handler+0x4>

08002caa <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002caa:	b480      	push	{r7}
 8002cac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002cae:	e7fe      	b.n	8002cae <BusFault_Handler+0x4>

08002cb0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002cb4:	e7fe      	b.n	8002cb4 <UsageFault_Handler+0x4>

08002cb6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002cb6:	b480      	push	{r7}
 8002cb8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002cba:	bf00      	nop
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr

08002cc4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002cc4:	b480      	push	{r7}
 8002cc6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002cc8:	bf00      	nop
 8002cca:	46bd      	mov	sp, r7
 8002ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd0:	4770      	bx	lr

08002cd2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002cd2:	b480      	push	{r7}
 8002cd4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002cd6:	bf00      	nop
 8002cd8:	46bd      	mov	sp, r7
 8002cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cde:	4770      	bx	lr

08002ce0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002ce0:	b580      	push	{r7, lr}
 8002ce2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ce4:	f000 f8e4 	bl	8002eb0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ce8:	bf00      	nop
 8002cea:	bd80      	pop	{r7, pc}

08002cec <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002cec:	b580      	push	{r7, lr}
 8002cee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	HAL_TIM_IRQHandler(&htim2);
 8002cf0:	481d      	ldr	r0, [pc, #116]	; (8002d68 <TIM2_IRQHandler+0x7c>)
 8002cf2:	f003 fa8d 	bl	8006210 <HAL_TIM_IRQHandler>
	if(firsttime){
 8002cf6:	4b1d      	ldr	r3, [pc, #116]	; (8002d6c <TIM2_IRQHandler+0x80>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d00d      	beq.n	8002d1a <TIM2_IRQHandler+0x2e>
		firsttime =0;
 8002cfe:	4b1b      	ldr	r3, [pc, #108]	; (8002d6c <TIM2_IRQHandler+0x80>)
 8002d00:	2200      	movs	r2, #0
 8002d02:	701a      	strb	r2, [r3, #0]
		TIM2->CNT = 0;
 8002d04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d08:	2200      	movs	r2, #0
 8002d0a:	625a      	str	r2, [r3, #36]	; 0x24
		index = 0;
 8002d0c:	4b18      	ldr	r3, [pc, #96]	; (8002d70 <TIM2_IRQHandler+0x84>)
 8002d0e:	2200      	movs	r2, #0
 8002d10:	601a      	str	r2, [r3, #0]
		HAL_TIM_IRQHandler(&htim2);
 8002d12:	4815      	ldr	r0, [pc, #84]	; (8002d68 <TIM2_IRQHandler+0x7c>)
 8002d14:	f003 fa7c 	bl	8006210 <HAL_TIM_IRQHandler>
		return;
 8002d18:	e024      	b.n	8002d64 <TIM2_IRQHandler+0x78>
	}
	data[index] = TIM2->CNT;
 8002d1a:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d20:	4b13      	ldr	r3, [pc, #76]	; (8002d70 <TIM2_IRQHandler+0x84>)
 8002d22:	681b      	ldr	r3, [r3, #0]
 8002d24:	b291      	uxth	r1, r2
 8002d26:	4a13      	ldr	r2, [pc, #76]	; (8002d74 <TIM2_IRQHandler+0x88>)
 8002d28:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
	TIM2->CNT =0;
 8002d2c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002d30:	2200      	movs	r2, #0
 8002d32:	625a      	str	r2, [r3, #36]	; 0x24
	index++;
 8002d34:	4b0e      	ldr	r3, [pc, #56]	; (8002d70 <TIM2_IRQHandler+0x84>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	3301      	adds	r3, #1
 8002d3a:	4a0d      	ldr	r2, [pc, #52]	; (8002d70 <TIM2_IRQHandler+0x84>)
 8002d3c:	6013      	str	r3, [r2, #0]
	if(index == dataLen){
 8002d3e:	4b0c      	ldr	r3, [pc, #48]	; (8002d70 <TIM2_IRQHandler+0x84>)
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	4b0d      	ldr	r3, [pc, #52]	; (8002d78 <TIM2_IRQHandler+0x8c>)
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	429a      	cmp	r2, r3
 8002d48:	d109      	bne.n	8002d5e <TIM2_IRQHandler+0x72>
		HAL_TIM_IC_Stop_IT(&htim2, TIM_CHANNEL_1);		//Transmit();
 8002d4a:	2100      	movs	r1, #0
 8002d4c:	4806      	ldr	r0, [pc, #24]	; (8002d68 <TIM2_IRQHandler+0x7c>)
 8002d4e:	f003 f9b1 	bl	80060b4 <HAL_TIM_IC_Stop_IT>
    firsttime = 1;
 8002d52:	4b06      	ldr	r3, [pc, #24]	; (8002d6c <TIM2_IRQHandler+0x80>)
 8002d54:	2201      	movs	r2, #1
 8002d56:	701a      	strb	r2, [r3, #0]
    received = 1;
 8002d58:	4b08      	ldr	r3, [pc, #32]	; (8002d7c <TIM2_IRQHandler+0x90>)
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	701a      	strb	r2, [r3, #0]
	}
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002d5e:	4802      	ldr	r0, [pc, #8]	; (8002d68 <TIM2_IRQHandler+0x7c>)
 8002d60:	f003 fa56 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002d64:	bd80      	pop	{r7, pc}
 8002d66:	bf00      	nop
 8002d68:	20001620 	.word	0x20001620
 8002d6c:	20001442 	.word	0x20001442
 8002d70:	20015db4 	.word	0x20015db4
 8002d74:	20015aa4 	.word	0x20015aa4
 8002d78:	20000004 	.word	0x20000004
 8002d7c:	20015b44 	.word	0x20015b44

08002d80 <TIM5_IRQHandler>:

/**
  * @brief This function handles TIM5 global interrupt.
  */
void TIM5_IRQHandler(void)
{
 8002d80:	b580      	push	{r7, lr}
 8002d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM5_IRQn 0 */

  /* USER CODE END TIM5_IRQn 0 */
  HAL_TIM_IRQHandler(&htim5);
 8002d84:	4802      	ldr	r0, [pc, #8]	; (8002d90 <TIM5_IRQHandler+0x10>)
 8002d86:	f003 fa43 	bl	8006210 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM5_IRQn 1 */

  /* USER CODE END TIM5_IRQn 1 */
}
 8002d8a:	bf00      	nop
 8002d8c:	bd80      	pop	{r7, pc}
 8002d8e:	bf00      	nop
 8002d90:	200016f8 	.word	0x200016f8

08002d94 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d98:	4b06      	ldr	r3, [pc, #24]	; (8002db4 <SystemInit+0x20>)
 8002d9a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002d9e:	4a05      	ldr	r2, [pc, #20]	; (8002db4 <SystemInit+0x20>)
 8002da0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002da4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002da8:	bf00      	nop
 8002daa:	46bd      	mov	sp, r7
 8002dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002db0:	4770      	bx	lr
 8002db2:	bf00      	nop
 8002db4:	e000ed00 	.word	0xe000ed00

08002db8 <Reset_Handler>:
 8002db8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002df0 <LoopFillZerobss+0x12>
 8002dbc:	480d      	ldr	r0, [pc, #52]	; (8002df4 <LoopFillZerobss+0x16>)
 8002dbe:	490e      	ldr	r1, [pc, #56]	; (8002df8 <LoopFillZerobss+0x1a>)
 8002dc0:	4a0e      	ldr	r2, [pc, #56]	; (8002dfc <LoopFillZerobss+0x1e>)
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e002      	b.n	8002dcc <LoopCopyDataInit>

08002dc6 <CopyDataInit>:
 8002dc6:	58d4      	ldr	r4, [r2, r3]
 8002dc8:	50c4      	str	r4, [r0, r3]
 8002dca:	3304      	adds	r3, #4

08002dcc <LoopCopyDataInit>:
 8002dcc:	18c4      	adds	r4, r0, r3
 8002dce:	428c      	cmp	r4, r1
 8002dd0:	d3f9      	bcc.n	8002dc6 <CopyDataInit>
 8002dd2:	4a0b      	ldr	r2, [pc, #44]	; (8002e00 <LoopFillZerobss+0x22>)
 8002dd4:	4c0b      	ldr	r4, [pc, #44]	; (8002e04 <LoopFillZerobss+0x26>)
 8002dd6:	2300      	movs	r3, #0
 8002dd8:	e001      	b.n	8002dde <LoopFillZerobss>

08002dda <FillZerobss>:
 8002dda:	6013      	str	r3, [r2, #0]
 8002ddc:	3204      	adds	r2, #4

08002dde <LoopFillZerobss>:
 8002dde:	42a2      	cmp	r2, r4
 8002de0:	d3fb      	bcc.n	8002dda <FillZerobss>
 8002de2:	f7ff ffd7 	bl	8002d94 <SystemInit>
 8002de6:	f004 fd05 	bl	80077f4 <__libc_init_array>
 8002dea:	f7fd ff3f 	bl	8000c6c <main>
 8002dee:	4770      	bx	lr
 8002df0:	20018000 	.word	0x20018000
 8002df4:	20000000 	.word	0x20000000
 8002df8:	20001450 	.word	0x20001450
 8002dfc:	08007a50 	.word	0x08007a50
 8002e00:	20001450 	.word	0x20001450
 8002e04:	20015dbc 	.word	0x20015dbc

08002e08 <ADC_IRQHandler>:
 8002e08:	e7fe      	b.n	8002e08 <ADC_IRQHandler>
	...

08002e0c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002e10:	4b0e      	ldr	r3, [pc, #56]	; (8002e4c <HAL_Init+0x40>)
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	4a0d      	ldr	r2, [pc, #52]	; (8002e4c <HAL_Init+0x40>)
 8002e16:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002e1a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002e1c:	4b0b      	ldr	r3, [pc, #44]	; (8002e4c <HAL_Init+0x40>)
 8002e1e:	681b      	ldr	r3, [r3, #0]
 8002e20:	4a0a      	ldr	r2, [pc, #40]	; (8002e4c <HAL_Init+0x40>)
 8002e22:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002e26:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002e28:	4b08      	ldr	r3, [pc, #32]	; (8002e4c <HAL_Init+0x40>)
 8002e2a:	681b      	ldr	r3, [r3, #0]
 8002e2c:	4a07      	ldr	r2, [pc, #28]	; (8002e4c <HAL_Init+0x40>)
 8002e2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002e32:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002e34:	2003      	movs	r0, #3
 8002e36:	f000 fcfd 	bl	8003834 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002e3a:	2000      	movs	r0, #0
 8002e3c:	f000 f808 	bl	8002e50 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002e40:	f7ff fc52 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002e44:	2300      	movs	r3, #0
}
 8002e46:	4618      	mov	r0, r3
 8002e48:	bd80      	pop	{r7, pc}
 8002e4a:	bf00      	nop
 8002e4c:	40023c00 	.word	0x40023c00

08002e50 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002e50:	b580      	push	{r7, lr}
 8002e52:	b082      	sub	sp, #8
 8002e54:	af00      	add	r7, sp, #0
 8002e56:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002e58:	4b12      	ldr	r3, [pc, #72]	; (8002ea4 <HAL_InitTick+0x54>)
 8002e5a:	681a      	ldr	r2, [r3, #0]
 8002e5c:	4b12      	ldr	r3, [pc, #72]	; (8002ea8 <HAL_InitTick+0x58>)
 8002e5e:	781b      	ldrb	r3, [r3, #0]
 8002e60:	4619      	mov	r1, r3
 8002e62:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002e66:	fbb3 f3f1 	udiv	r3, r3, r1
 8002e6a:	fbb2 f3f3 	udiv	r3, r2, r3
 8002e6e:	4618      	mov	r0, r3
 8002e70:	f000 fd15 	bl	800389e <HAL_SYSTICK_Config>
 8002e74:	4603      	mov	r3, r0
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d001      	beq.n	8002e7e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002e7a:	2301      	movs	r3, #1
 8002e7c:	e00e      	b.n	8002e9c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002e7e:	687b      	ldr	r3, [r7, #4]
 8002e80:	2b0f      	cmp	r3, #15
 8002e82:	d80a      	bhi.n	8002e9a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002e84:	2200      	movs	r2, #0
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002e8c:	f000 fcdd 	bl	800384a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002e90:	4a06      	ldr	r2, [pc, #24]	; (8002eac <HAL_InitTick+0x5c>)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002e96:	2300      	movs	r3, #0
 8002e98:	e000      	b.n	8002e9c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002e9a:	2301      	movs	r3, #1
}
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	3708      	adds	r7, #8
 8002ea0:	46bd      	mov	sp, r7
 8002ea2:	bd80      	pop	{r7, pc}
 8002ea4:	20001444 	.word	0x20001444
 8002ea8:	2000144c 	.word	0x2000144c
 8002eac:	20001448 	.word	0x20001448

08002eb0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002eb4:	4b06      	ldr	r3, [pc, #24]	; (8002ed0 <HAL_IncTick+0x20>)
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	461a      	mov	r2, r3
 8002eba:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_IncTick+0x24>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	4413      	add	r3, r2
 8002ec0:	4a04      	ldr	r2, [pc, #16]	; (8002ed4 <HAL_IncTick+0x24>)
 8002ec2:	6013      	str	r3, [r2, #0]
}
 8002ec4:	bf00      	nop
 8002ec6:	46bd      	mov	sp, r7
 8002ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ecc:	4770      	bx	lr
 8002ece:	bf00      	nop
 8002ed0:	2000144c 	.word	0x2000144c
 8002ed4:	20015db8 	.word	0x20015db8

08002ed8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002ed8:	b480      	push	{r7}
 8002eda:	af00      	add	r7, sp, #0
  return uwTick;
 8002edc:	4b03      	ldr	r3, [pc, #12]	; (8002eec <HAL_GetTick+0x14>)
 8002ede:	681b      	ldr	r3, [r3, #0]
}
 8002ee0:	4618      	mov	r0, r3
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	20015db8 	.word	0x20015db8

08002ef0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	b084      	sub	sp, #16
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002ef8:	f7ff ffee 	bl	8002ed8 <HAL_GetTick>
 8002efc:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002f02:	68fb      	ldr	r3, [r7, #12]
 8002f04:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8002f08:	d005      	beq.n	8002f16 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002f0a:	4b0a      	ldr	r3, [pc, #40]	; (8002f34 <HAL_Delay+0x44>)
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	461a      	mov	r2, r3
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	4413      	add	r3, r2
 8002f14:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002f16:	bf00      	nop
 8002f18:	f7ff ffde 	bl	8002ed8 <HAL_GetTick>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	68bb      	ldr	r3, [r7, #8]
 8002f20:	1ad3      	subs	r3, r2, r3
 8002f22:	68fa      	ldr	r2, [r7, #12]
 8002f24:	429a      	cmp	r2, r3
 8002f26:	d8f7      	bhi.n	8002f18 <HAL_Delay+0x28>
  {
  }
}
 8002f28:	bf00      	nop
 8002f2a:	bf00      	nop
 8002f2c:	3710      	adds	r7, #16
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}
 8002f32:	bf00      	nop
 8002f34:	2000144c 	.word	0x2000144c

08002f38 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8002f38:	b580      	push	{r7, lr}
 8002f3a:	b084      	sub	sp, #16
 8002f3c:	af00      	add	r7, sp, #0
 8002f3e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002f40:	2300      	movs	r3, #0
 8002f42:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8002f44:	687b      	ldr	r3, [r7, #4]
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d101      	bne.n	8002f4e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8002f4a:	2301      	movs	r3, #1
 8002f4c:	e033      	b.n	8002fb6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f52:	2b00      	cmp	r3, #0
 8002f54:	d109      	bne.n	8002f6a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff fbee 	bl	8002738 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	2200      	movs	r2, #0
 8002f60:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	2200      	movs	r2, #0
 8002f66:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f6e:	f003 0310 	and.w	r3, r3, #16
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d118      	bne.n	8002fa8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f7a:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8002f7e:	f023 0302 	bic.w	r3, r3, #2
 8002f82:	f043 0202 	orr.w	r2, r3, #2
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8002f8a:	6878      	ldr	r0, [r7, #4]
 8002f8c:	f000 fa86 	bl	800349c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2200      	movs	r2, #0
 8002f94:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f9a:	f023 0303 	bic.w	r3, r3, #3
 8002f9e:	f043 0201 	orr.w	r2, r3, #1
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	641a      	str	r2, [r3, #64]	; 0x40
 8002fa6:	e001      	b.n	8002fac <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8002fa8:	2301      	movs	r3, #1
 8002faa:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	2200      	movs	r2, #0
 8002fb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8002fb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	3710      	adds	r7, #16
 8002fba:	46bd      	mov	sp, r7
 8002fbc:	bd80      	pop	{r7, pc}
	...

08002fc0 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8002fc0:	b480      	push	{r7}
 8002fc2:	b085      	sub	sp, #20
 8002fc4:	af00      	add	r7, sp, #0
 8002fc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0U;
 8002fc8:	2300      	movs	r3, #0
 8002fca:	60bb      	str	r3, [r7, #8]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002fd2:	2b01      	cmp	r3, #1
 8002fd4:	d101      	bne.n	8002fda <HAL_ADC_Start+0x1a>
 8002fd6:	2302      	movs	r3, #2
 8002fd8:	e097      	b.n	800310a <HAL_ADC_Start+0x14a>
 8002fda:	687b      	ldr	r3, [r7, #4]
 8002fdc:	2201      	movs	r2, #1
 8002fde:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	681b      	ldr	r3, [r3, #0]
 8002fe6:	689b      	ldr	r3, [r3, #8]
 8002fe8:	f003 0301 	and.w	r3, r3, #1
 8002fec:	2b01      	cmp	r3, #1
 8002fee:	d018      	beq.n	8003022 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	689a      	ldr	r2, [r3, #8]
 8002ff6:	687b      	ldr	r3, [r7, #4]
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f042 0201 	orr.w	r2, r2, #1
 8002ffe:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8003000:	4b45      	ldr	r3, [pc, #276]	; (8003118 <HAL_ADC_Start+0x158>)
 8003002:	681b      	ldr	r3, [r3, #0]
 8003004:	4a45      	ldr	r2, [pc, #276]	; (800311c <HAL_ADC_Start+0x15c>)
 8003006:	fba2 2303 	umull	r2, r3, r2, r3
 800300a:	0c9a      	lsrs	r2, r3, #18
 800300c:	4613      	mov	r3, r2
 800300e:	005b      	lsls	r3, r3, #1
 8003010:	4413      	add	r3, r2
 8003012:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 8003014:	e002      	b.n	800301c <HAL_ADC_Start+0x5c>
    {
      counter--;
 8003016:	68bb      	ldr	r3, [r7, #8]
 8003018:	3b01      	subs	r3, #1
 800301a:	60bb      	str	r3, [r7, #8]
    while(counter != 0U)
 800301c:	68bb      	ldr	r3, [r7, #8]
 800301e:	2b00      	cmp	r3, #0
 8003020:	d1f9      	bne.n	8003016 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	689b      	ldr	r3, [r3, #8]
 8003028:	f003 0301 	and.w	r3, r3, #1
 800302c:	2b01      	cmp	r3, #1
 800302e:	d15f      	bne.n	80030f0 <HAL_ADC_Start+0x130>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8003038:	f023 0301 	bic.w	r3, r3, #1
 800303c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800304e:	2b00      	cmp	r3, #0
 8003050:	d007      	beq.n	8003062 <HAL_ADC_Start+0xa2>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003056:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800305a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003066:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800306a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800306e:	d106      	bne.n	800307e <HAL_ADC_Start+0xbe>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003074:	f023 0206 	bic.w	r2, r3, #6
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	645a      	str	r2, [r3, #68]	; 0x44
 800307c:	e002      	b.n	8003084 <HAL_ADC_Start+0xc4>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	2200      	movs	r2, #0
 8003082:	645a      	str	r2, [r3, #68]	; 0x44
    } 

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	2200      	movs	r2, #0
 8003088:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800308c:	4b24      	ldr	r3, [pc, #144]	; (8003120 <HAL_ADC_Start+0x160>)
 800308e:	60fb      	str	r3, [r7, #12]

    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003098:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	685b      	ldr	r3, [r3, #4]
 800309e:	f003 031f 	and.w	r3, r3, #31
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d10f      	bne.n	80030c6 <HAL_ADC_Start+0x106>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d129      	bne.n	8003108 <HAL_ADC_Start+0x148>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	689a      	ldr	r2, [r3, #8]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030c2:	609a      	str	r2, [r3, #8]
 80030c4:	e020      	b.n	8003108 <HAL_ADC_Start+0x148>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	681b      	ldr	r3, [r3, #0]
 80030ca:	4a16      	ldr	r2, [pc, #88]	; (8003124 <HAL_ADC_Start+0x164>)
 80030cc:	4293      	cmp	r3, r2
 80030ce:	d11b      	bne.n	8003108 <HAL_ADC_Start+0x148>
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	689b      	ldr	r3, [r3, #8]
 80030d6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80030da:	2b00      	cmp	r3, #0
 80030dc:	d114      	bne.n	8003108 <HAL_ADC_Start+0x148>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80030de:	687b      	ldr	r3, [r7, #4]
 80030e0:	681b      	ldr	r3, [r3, #0]
 80030e2:	689a      	ldr	r2, [r3, #8]
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80030ec:	609a      	str	r2, [r3, #8]
 80030ee:	e00b      	b.n	8003108 <HAL_ADC_Start+0x148>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f4:	f043 0210 	orr.w	r2, r3, #16
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003100:	f043 0201 	orr.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003108:	2300      	movs	r3, #0
}
 800310a:	4618      	mov	r0, r3
 800310c:	3714      	adds	r7, #20
 800310e:	46bd      	mov	sp, r7
 8003110:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003114:	4770      	bx	lr
 8003116:	bf00      	nop
 8003118:	20001444 	.word	0x20001444
 800311c:	431bde83 	.word	0x431bde83
 8003120:	40012300 	.word	0x40012300
 8003124:	40012000 	.word	0x40012000

08003128 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8003128:	b580      	push	{r7, lr}
 800312a:	b084      	sub	sp, #16
 800312c:	af00      	add	r7, sp, #0
 800312e:	6078      	str	r0, [r7, #4]
 8003130:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0U;
 8003132:	2300      	movs	r3, #0
 8003134:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	681b      	ldr	r3, [r3, #0]
 800313a:	689b      	ldr	r3, [r3, #8]
 800313c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003140:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003144:	d113      	bne.n	800316e <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8003146:	687b      	ldr	r3, [r7, #4]
 8003148:	681b      	ldr	r3, [r3, #0]
 800314a:	689b      	ldr	r3, [r3, #8]
 800314c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8003150:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003154:	d10b      	bne.n	800316e <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800315a:	f043 0220 	orr.w	r2, r3, #32
 800315e:	687b      	ldr	r3, [r7, #4]
 8003160:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	2200      	movs	r2, #0
 8003166:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 800316a:	2301      	movs	r3, #1
 800316c:	e063      	b.n	8003236 <HAL_ADC_PollForConversion+0x10e>
  }

  /* Get tick */ 
  tickstart = HAL_GetTick();
 800316e:	f7ff feb3 	bl	8002ed8 <HAL_GetTick>
 8003172:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003174:	e021      	b.n	80031ba <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 8003176:	683b      	ldr	r3, [r7, #0]
 8003178:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800317c:	d01d      	beq.n	80031ba <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0U) || ((HAL_GetTick() - tickstart ) > Timeout))
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	2b00      	cmp	r3, #0
 8003182:	d007      	beq.n	8003194 <HAL_ADC_PollForConversion+0x6c>
 8003184:	f7ff fea8 	bl	8002ed8 <HAL_GetTick>
 8003188:	4602      	mov	r2, r0
 800318a:	68fb      	ldr	r3, [r7, #12]
 800318c:	1ad3      	subs	r3, r2, r3
 800318e:	683a      	ldr	r2, [r7, #0]
 8003190:	429a      	cmp	r2, r3
 8003192:	d212      	bcs.n	80031ba <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	681b      	ldr	r3, [r3, #0]
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b02      	cmp	r3, #2
 80031a0:	d00b      	beq.n	80031ba <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031a6:	f043 0204 	orr.w	r2, r3, #4
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	2200      	movs	r2, #0
 80031b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 80031b6:	2303      	movs	r3, #3
 80031b8:	e03d      	b.n	8003236 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	f003 0302 	and.w	r3, r3, #2
 80031c4:	2b02      	cmp	r3, #2
 80031c6:	d1d6      	bne.n	8003176 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	681b      	ldr	r3, [r3, #0]
 80031cc:	f06f 0212 	mvn.w	r2, #18
 80031d0:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031d6:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F4, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	689b      	ldr	r3, [r3, #8]
 80031e4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d123      	bne.n	8003234 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	7e1b      	ldrb	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d11f      	bne.n	8003234 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031fa:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d006      	beq.n	8003210 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800320c:	2b00      	cmp	r3, #0
 800320e:	d111      	bne.n	8003234 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003214:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003220:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003224:	2b00      	cmp	r3, #0
 8003226:	d105      	bne.n	8003234 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800322c:	f043 0201 	orr.w	r2, r3, #1
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8003234:	2300      	movs	r3, #0
}
 8003236:	4618      	mov	r0, r3
 8003238:	3710      	adds	r7, #16
 800323a:	46bd      	mov	sp, r7
 800323c:	bd80      	pop	{r7, pc}

0800323e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800323e:	b480      	push	{r7}
 8003240:	b083      	sub	sp, #12
 8003242:	af00      	add	r7, sp, #0
 8003244:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800324c:	4618      	mov	r0, r3
 800324e:	370c      	adds	r7, #12
 8003250:	46bd      	mov	sp, r7
 8003252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003256:	4770      	bx	lr

08003258 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8003258:	b480      	push	{r7}
 800325a:	b085      	sub	sp, #20
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8003262:	2300      	movs	r3, #0
 8003264:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800326c:	2b01      	cmp	r3, #1
 800326e:	d101      	bne.n	8003274 <HAL_ADC_ConfigChannel+0x1c>
 8003270:	2302      	movs	r3, #2
 8003272:	e105      	b.n	8003480 <HAL_ADC_ConfigChannel+0x228>
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	2201      	movs	r2, #1
 8003278:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 800327c:	683b      	ldr	r3, [r7, #0]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	2b09      	cmp	r3, #9
 8003282:	d925      	bls.n	80032d0 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68d9      	ldr	r1, [r3, #12]
 800328a:	683b      	ldr	r3, [r7, #0]
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	b29b      	uxth	r3, r3
 8003290:	461a      	mov	r2, r3
 8003292:	4613      	mov	r3, r2
 8003294:	005b      	lsls	r3, r3, #1
 8003296:	4413      	add	r3, r2
 8003298:	3b1e      	subs	r3, #30
 800329a:	2207      	movs	r2, #7
 800329c:	fa02 f303 	lsl.w	r3, r2, r3
 80032a0:	43da      	mvns	r2, r3
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	400a      	ands	r2, r1
 80032a8:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80032aa:	687b      	ldr	r3, [r7, #4]
 80032ac:	681b      	ldr	r3, [r3, #0]
 80032ae:	68d9      	ldr	r1, [r3, #12]
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	689a      	ldr	r2, [r3, #8]
 80032b4:	683b      	ldr	r3, [r7, #0]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	b29b      	uxth	r3, r3
 80032ba:	4618      	mov	r0, r3
 80032bc:	4603      	mov	r3, r0
 80032be:	005b      	lsls	r3, r3, #1
 80032c0:	4403      	add	r3, r0
 80032c2:	3b1e      	subs	r3, #30
 80032c4:	409a      	lsls	r2, r3
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	430a      	orrs	r2, r1
 80032cc:	60da      	str	r2, [r3, #12]
 80032ce:	e022      	b.n	8003316 <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	6919      	ldr	r1, [r3, #16]
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	b29b      	uxth	r3, r3
 80032dc:	461a      	mov	r2, r3
 80032de:	4613      	mov	r3, r2
 80032e0:	005b      	lsls	r3, r3, #1
 80032e2:	4413      	add	r3, r2
 80032e4:	2207      	movs	r2, #7
 80032e6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ea:	43da      	mvns	r2, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	400a      	ands	r2, r1
 80032f2:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	6919      	ldr	r1, [r3, #16]
 80032fa:	683b      	ldr	r3, [r7, #0]
 80032fc:	689a      	ldr	r2, [r3, #8]
 80032fe:	683b      	ldr	r3, [r7, #0]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	b29b      	uxth	r3, r3
 8003304:	4618      	mov	r0, r3
 8003306:	4603      	mov	r3, r0
 8003308:	005b      	lsls	r3, r3, #1
 800330a:	4403      	add	r3, r0
 800330c:	409a      	lsls	r2, r3
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	430a      	orrs	r2, r1
 8003314:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8003316:	683b      	ldr	r3, [r7, #0]
 8003318:	685b      	ldr	r3, [r3, #4]
 800331a:	2b06      	cmp	r3, #6
 800331c:	d824      	bhi.n	8003368 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003324:	683b      	ldr	r3, [r7, #0]
 8003326:	685a      	ldr	r2, [r3, #4]
 8003328:	4613      	mov	r3, r2
 800332a:	009b      	lsls	r3, r3, #2
 800332c:	4413      	add	r3, r2
 800332e:	3b05      	subs	r3, #5
 8003330:	221f      	movs	r2, #31
 8003332:	fa02 f303 	lsl.w	r3, r2, r3
 8003336:	43da      	mvns	r2, r3
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	400a      	ands	r2, r1
 800333e:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003346:	683b      	ldr	r3, [r7, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	b29b      	uxth	r3, r3
 800334c:	4618      	mov	r0, r3
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685a      	ldr	r2, [r3, #4]
 8003352:	4613      	mov	r3, r2
 8003354:	009b      	lsls	r3, r3, #2
 8003356:	4413      	add	r3, r2
 8003358:	3b05      	subs	r3, #5
 800335a:	fa00 f203 	lsl.w	r2, r0, r3
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	430a      	orrs	r2, r1
 8003364:	635a      	str	r2, [r3, #52]	; 0x34
 8003366:	e04c      	b.n	8003402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8003368:	683b      	ldr	r3, [r7, #0]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	2b0c      	cmp	r3, #12
 800336e:	d824      	bhi.n	80033ba <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685a      	ldr	r2, [r3, #4]
 800337a:	4613      	mov	r3, r2
 800337c:	009b      	lsls	r3, r3, #2
 800337e:	4413      	add	r3, r2
 8003380:	3b23      	subs	r3, #35	; 0x23
 8003382:	221f      	movs	r2, #31
 8003384:	fa02 f303 	lsl.w	r3, r2, r3
 8003388:	43da      	mvns	r2, r3
 800338a:	687b      	ldr	r3, [r7, #4]
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	400a      	ands	r2, r1
 8003390:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003392:	687b      	ldr	r3, [r7, #4]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	b29b      	uxth	r3, r3
 800339e:	4618      	mov	r0, r3
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685a      	ldr	r2, [r3, #4]
 80033a4:	4613      	mov	r3, r2
 80033a6:	009b      	lsls	r3, r3, #2
 80033a8:	4413      	add	r3, r2
 80033aa:	3b23      	subs	r3, #35	; 0x23
 80033ac:	fa00 f203 	lsl.w	r2, r0, r3
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	681b      	ldr	r3, [r3, #0]
 80033b4:	430a      	orrs	r2, r1
 80033b6:	631a      	str	r2, [r3, #48]	; 0x30
 80033b8:	e023      	b.n	8003402 <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033c0:	683b      	ldr	r3, [r7, #0]
 80033c2:	685a      	ldr	r2, [r3, #4]
 80033c4:	4613      	mov	r3, r2
 80033c6:	009b      	lsls	r3, r3, #2
 80033c8:	4413      	add	r3, r2
 80033ca:	3b41      	subs	r3, #65	; 0x41
 80033cc:	221f      	movs	r2, #31
 80033ce:	fa02 f303 	lsl.w	r3, r2, r3
 80033d2:	43da      	mvns	r2, r3
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	400a      	ands	r2, r1
 80033da:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80033e2:	683b      	ldr	r3, [r7, #0]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	b29b      	uxth	r3, r3
 80033e8:	4618      	mov	r0, r3
 80033ea:	683b      	ldr	r3, [r7, #0]
 80033ec:	685a      	ldr	r2, [r3, #4]
 80033ee:	4613      	mov	r3, r2
 80033f0:	009b      	lsls	r3, r3, #2
 80033f2:	4413      	add	r3, r2
 80033f4:	3b41      	subs	r3, #65	; 0x41
 80033f6:	fa00 f203 	lsl.w	r2, r0, r3
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	430a      	orrs	r2, r1
 8003400:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8003402:	4b22      	ldr	r3, [pc, #136]	; (800348c <HAL_ADC_ConfigChannel+0x234>)
 8003404:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4a21      	ldr	r2, [pc, #132]	; (8003490 <HAL_ADC_ConfigChannel+0x238>)
 800340c:	4293      	cmp	r3, r2
 800340e:	d109      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1cc>
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	2b12      	cmp	r3, #18
 8003416:	d105      	bne.n	8003424 <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	685b      	ldr	r3, [r3, #4]
 800341c:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4a19      	ldr	r2, [pc, #100]	; (8003490 <HAL_ADC_ConfigChannel+0x238>)
 800342a:	4293      	cmp	r3, r2
 800342c:	d123      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x21e>
 800342e:	683b      	ldr	r3, [r7, #0]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	2b10      	cmp	r3, #16
 8003434:	d003      	beq.n	800343e <HAL_ADC_ConfigChannel+0x1e6>
 8003436:	683b      	ldr	r3, [r7, #0]
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	2b11      	cmp	r3, #17
 800343c:	d11b      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	685b      	ldr	r3, [r3, #4]
 8003442:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800344a:	683b      	ldr	r3, [r7, #0]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	2b10      	cmp	r3, #16
 8003450:	d111      	bne.n	8003476 <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 8003452:	4b10      	ldr	r3, [pc, #64]	; (8003494 <HAL_ADC_ConfigChannel+0x23c>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	4a10      	ldr	r2, [pc, #64]	; (8003498 <HAL_ADC_ConfigChannel+0x240>)
 8003458:	fba2 2303 	umull	r2, r3, r2, r3
 800345c:	0c9a      	lsrs	r2, r3, #18
 800345e:	4613      	mov	r3, r2
 8003460:	009b      	lsls	r3, r3, #2
 8003462:	4413      	add	r3, r2
 8003464:	005b      	lsls	r3, r3, #1
 8003466:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003468:	e002      	b.n	8003470 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 800346a:	68bb      	ldr	r3, [r7, #8]
 800346c:	3b01      	subs	r3, #1
 800346e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8003470:	68bb      	ldr	r3, [r7, #8]
 8003472:	2b00      	cmp	r3, #0
 8003474:	d1f9      	bne.n	800346a <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	2200      	movs	r2, #0
 800347a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 800347e:	2300      	movs	r3, #0
}
 8003480:	4618      	mov	r0, r3
 8003482:	3714      	adds	r7, #20
 8003484:	46bd      	mov	sp, r7
 8003486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800348a:	4770      	bx	lr
 800348c:	40012300 	.word	0x40012300
 8003490:	40012000 	.word	0x40012000
 8003494:	20001444 	.word	0x20001444
 8003498:	431bde83 	.word	0x431bde83

0800349c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80034a4:	4b79      	ldr	r3, [pc, #484]	; (800368c <ADC_Init+0x1f0>)
 80034a6:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	685b      	ldr	r3, [r3, #4]
 80034ac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	685a      	ldr	r2, [r3, #4]
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	685b      	ldr	r3, [r3, #4]
 80034bc:	431a      	orrs	r2, r3
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	681b      	ldr	r3, [r3, #0]
 80034c6:	685a      	ldr	r2, [r3, #4]
 80034c8:	687b      	ldr	r3, [r7, #4]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80034d0:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	6859      	ldr	r1, [r3, #4]
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	691b      	ldr	r3, [r3, #16]
 80034dc:	021a      	lsls	r2, r3, #8
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	430a      	orrs	r2, r1
 80034e4:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	685a      	ldr	r2, [r3, #4]
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 80034f4:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 80034f6:	687b      	ldr	r3, [r7, #4]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	6859      	ldr	r1, [r3, #4]
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	689a      	ldr	r2, [r3, #8]
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	430a      	orrs	r2, r1
 8003506:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	689a      	ldr	r2, [r3, #8]
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003516:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	6899      	ldr	r1, [r3, #8]
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	68da      	ldr	r2, [r3, #12]
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	430a      	orrs	r2, r1
 8003528:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800352e:	4a58      	ldr	r2, [pc, #352]	; (8003690 <ADC_Init+0x1f4>)
 8003530:	4293      	cmp	r3, r2
 8003532:	d022      	beq.n	800357a <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	689a      	ldr	r2, [r3, #8]
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003542:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	6899      	ldr	r1, [r3, #8]
 800354a:	687b      	ldr	r3, [r7, #4]
 800354c:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	430a      	orrs	r2, r1
 8003554:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	689a      	ldr	r2, [r3, #8]
 800355c:	687b      	ldr	r3, [r7, #4]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003564:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	6899      	ldr	r1, [r3, #8]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	430a      	orrs	r2, r1
 8003576:	609a      	str	r2, [r3, #8]
 8003578:	e00f      	b.n	800359a <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	689a      	ldr	r2, [r3, #8]
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003588:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	689a      	ldr	r2, [r3, #8]
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003598:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	689a      	ldr	r2, [r3, #8]
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	f022 0202 	bic.w	r2, r2, #2
 80035a8:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 80035aa:	687b      	ldr	r3, [r7, #4]
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	6899      	ldr	r1, [r3, #8]
 80035b0:	687b      	ldr	r3, [r7, #4]
 80035b2:	7e1b      	ldrb	r3, [r3, #24]
 80035b4:	005a      	lsls	r2, r3, #1
 80035b6:	687b      	ldr	r3, [r7, #4]
 80035b8:	681b      	ldr	r3, [r3, #0]
 80035ba:	430a      	orrs	r2, r1
 80035bc:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 80035be:	687b      	ldr	r3, [r7, #4]
 80035c0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d01b      	beq.n	8003600 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	685a      	ldr	r2, [r3, #4]
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80035d6:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	685a      	ldr	r2, [r3, #4]
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 80035e6:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	681b      	ldr	r3, [r3, #0]
 80035ec:	6859      	ldr	r1, [r3, #4]
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035f2:	3b01      	subs	r3, #1
 80035f4:	035a      	lsls	r2, r3, #13
 80035f6:	687b      	ldr	r3, [r7, #4]
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	430a      	orrs	r2, r1
 80035fc:	605a      	str	r2, [r3, #4]
 80035fe:	e007      	b.n	8003610 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	685a      	ldr	r2, [r3, #4]
 8003606:	687b      	ldr	r3, [r7, #4]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360e:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	681b      	ldr	r3, [r3, #0]
 8003614:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 800361e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	69db      	ldr	r3, [r3, #28]
 800362a:	3b01      	subs	r3, #1
 800362c:	051a      	lsls	r2, r3, #20
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	430a      	orrs	r2, r1
 8003634:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	689a      	ldr	r2, [r3, #8]
 800363c:	687b      	ldr	r3, [r7, #4]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003644:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6899      	ldr	r1, [r3, #8]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003652:	025a      	lsls	r2, r3, #9
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689a      	ldr	r2, [r3, #8]
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800366a:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	6899      	ldr	r1, [r3, #8]
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	695b      	ldr	r3, [r3, #20]
 8003676:	029a      	lsls	r2, r3, #10
 8003678:	687b      	ldr	r3, [r7, #4]
 800367a:	681b      	ldr	r3, [r3, #0]
 800367c:	430a      	orrs	r2, r1
 800367e:	609a      	str	r2, [r3, #8]
}
 8003680:	bf00      	nop
 8003682:	3714      	adds	r7, #20
 8003684:	46bd      	mov	sp, r7
 8003686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800368a:	4770      	bx	lr
 800368c:	40012300 	.word	0x40012300
 8003690:	0f000001 	.word	0x0f000001

08003694 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003694:	b480      	push	{r7}
 8003696:	b085      	sub	sp, #20
 8003698:	af00      	add	r7, sp, #0
 800369a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	f003 0307 	and.w	r3, r3, #7
 80036a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80036a4:	4b0c      	ldr	r3, [pc, #48]	; (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036a6:	68db      	ldr	r3, [r3, #12]
 80036a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80036aa:	68ba      	ldr	r2, [r7, #8]
 80036ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80036b0:	4013      	ands	r3, r2
 80036b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80036b8:	68bb      	ldr	r3, [r7, #8]
 80036ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80036bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80036c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80036c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80036c6:	4a04      	ldr	r2, [pc, #16]	; (80036d8 <__NVIC_SetPriorityGrouping+0x44>)
 80036c8:	68bb      	ldr	r3, [r7, #8]
 80036ca:	60d3      	str	r3, [r2, #12]
}
 80036cc:	bf00      	nop
 80036ce:	3714      	adds	r7, #20
 80036d0:	46bd      	mov	sp, r7
 80036d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036d6:	4770      	bx	lr
 80036d8:	e000ed00 	.word	0xe000ed00

080036dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80036dc:	b480      	push	{r7}
 80036de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80036e0:	4b04      	ldr	r3, [pc, #16]	; (80036f4 <__NVIC_GetPriorityGrouping+0x18>)
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	0a1b      	lsrs	r3, r3, #8
 80036e6:	f003 0307 	and.w	r3, r3, #7
}
 80036ea:	4618      	mov	r0, r3
 80036ec:	46bd      	mov	sp, r7
 80036ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f2:	4770      	bx	lr
 80036f4:	e000ed00 	.word	0xe000ed00

080036f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80036f8:	b480      	push	{r7}
 80036fa:	b083      	sub	sp, #12
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	4603      	mov	r3, r0
 8003700:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003702:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003706:	2b00      	cmp	r3, #0
 8003708:	db0b      	blt.n	8003722 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800370a:	79fb      	ldrb	r3, [r7, #7]
 800370c:	f003 021f 	and.w	r2, r3, #31
 8003710:	4907      	ldr	r1, [pc, #28]	; (8003730 <__NVIC_EnableIRQ+0x38>)
 8003712:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003716:	095b      	lsrs	r3, r3, #5
 8003718:	2001      	movs	r0, #1
 800371a:	fa00 f202 	lsl.w	r2, r0, r2
 800371e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003722:	bf00      	nop
 8003724:	370c      	adds	r7, #12
 8003726:	46bd      	mov	sp, r7
 8003728:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372c:	4770      	bx	lr
 800372e:	bf00      	nop
 8003730:	e000e100 	.word	0xe000e100

08003734 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	4603      	mov	r3, r0
 800373c:	6039      	str	r1, [r7, #0]
 800373e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003740:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003744:	2b00      	cmp	r3, #0
 8003746:	db0a      	blt.n	800375e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003748:	683b      	ldr	r3, [r7, #0]
 800374a:	b2da      	uxtb	r2, r3
 800374c:	490c      	ldr	r1, [pc, #48]	; (8003780 <__NVIC_SetPriority+0x4c>)
 800374e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003752:	0112      	lsls	r2, r2, #4
 8003754:	b2d2      	uxtb	r2, r2
 8003756:	440b      	add	r3, r1
 8003758:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800375c:	e00a      	b.n	8003774 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	b2da      	uxtb	r2, r3
 8003762:	4908      	ldr	r1, [pc, #32]	; (8003784 <__NVIC_SetPriority+0x50>)
 8003764:	79fb      	ldrb	r3, [r7, #7]
 8003766:	f003 030f 	and.w	r3, r3, #15
 800376a:	3b04      	subs	r3, #4
 800376c:	0112      	lsls	r2, r2, #4
 800376e:	b2d2      	uxtb	r2, r2
 8003770:	440b      	add	r3, r1
 8003772:	761a      	strb	r2, [r3, #24]
}
 8003774:	bf00      	nop
 8003776:	370c      	adds	r7, #12
 8003778:	46bd      	mov	sp, r7
 800377a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800377e:	4770      	bx	lr
 8003780:	e000e100 	.word	0xe000e100
 8003784:	e000ed00 	.word	0xe000ed00

08003788 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003788:	b480      	push	{r7}
 800378a:	b089      	sub	sp, #36	; 0x24
 800378c:	af00      	add	r7, sp, #0
 800378e:	60f8      	str	r0, [r7, #12]
 8003790:	60b9      	str	r1, [r7, #8]
 8003792:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003794:	68fb      	ldr	r3, [r7, #12]
 8003796:	f003 0307 	and.w	r3, r3, #7
 800379a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800379c:	69fb      	ldr	r3, [r7, #28]
 800379e:	f1c3 0307 	rsb	r3, r3, #7
 80037a2:	2b04      	cmp	r3, #4
 80037a4:	bf28      	it	cs
 80037a6:	2304      	movcs	r3, #4
 80037a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80037aa:	69fb      	ldr	r3, [r7, #28]
 80037ac:	3304      	adds	r3, #4
 80037ae:	2b06      	cmp	r3, #6
 80037b0:	d902      	bls.n	80037b8 <NVIC_EncodePriority+0x30>
 80037b2:	69fb      	ldr	r3, [r7, #28]
 80037b4:	3b03      	subs	r3, #3
 80037b6:	e000      	b.n	80037ba <NVIC_EncodePriority+0x32>
 80037b8:	2300      	movs	r3, #0
 80037ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037bc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80037c0:	69bb      	ldr	r3, [r7, #24]
 80037c2:	fa02 f303 	lsl.w	r3, r2, r3
 80037c6:	43da      	mvns	r2, r3
 80037c8:	68bb      	ldr	r3, [r7, #8]
 80037ca:	401a      	ands	r2, r3
 80037cc:	697b      	ldr	r3, [r7, #20]
 80037ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80037d0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80037d4:	697b      	ldr	r3, [r7, #20]
 80037d6:	fa01 f303 	lsl.w	r3, r1, r3
 80037da:	43d9      	mvns	r1, r3
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80037e0:	4313      	orrs	r3, r2
         );
}
 80037e2:	4618      	mov	r0, r3
 80037e4:	3724      	adds	r7, #36	; 0x24
 80037e6:	46bd      	mov	sp, r7
 80037e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037ec:	4770      	bx	lr
	...

080037f0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80037f0:	b580      	push	{r7, lr}
 80037f2:	b082      	sub	sp, #8
 80037f4:	af00      	add	r7, sp, #0
 80037f6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	3b01      	subs	r3, #1
 80037fc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003800:	d301      	bcc.n	8003806 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003802:	2301      	movs	r3, #1
 8003804:	e00f      	b.n	8003826 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003806:	4a0a      	ldr	r2, [pc, #40]	; (8003830 <SysTick_Config+0x40>)
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	3b01      	subs	r3, #1
 800380c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800380e:	210f      	movs	r1, #15
 8003810:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003814:	f7ff ff8e 	bl	8003734 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003818:	4b05      	ldr	r3, [pc, #20]	; (8003830 <SysTick_Config+0x40>)
 800381a:	2200      	movs	r2, #0
 800381c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800381e:	4b04      	ldr	r3, [pc, #16]	; (8003830 <SysTick_Config+0x40>)
 8003820:	2207      	movs	r2, #7
 8003822:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003824:	2300      	movs	r3, #0
}
 8003826:	4618      	mov	r0, r3
 8003828:	3708      	adds	r7, #8
 800382a:	46bd      	mov	sp, r7
 800382c:	bd80      	pop	{r7, pc}
 800382e:	bf00      	nop
 8003830:	e000e010 	.word	0xe000e010

08003834 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b082      	sub	sp, #8
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800383c:	6878      	ldr	r0, [r7, #4]
 800383e:	f7ff ff29 	bl	8003694 <__NVIC_SetPriorityGrouping>
}
 8003842:	bf00      	nop
 8003844:	3708      	adds	r7, #8
 8003846:	46bd      	mov	sp, r7
 8003848:	bd80      	pop	{r7, pc}

0800384a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800384a:	b580      	push	{r7, lr}
 800384c:	b086      	sub	sp, #24
 800384e:	af00      	add	r7, sp, #0
 8003850:	4603      	mov	r3, r0
 8003852:	60b9      	str	r1, [r7, #8]
 8003854:	607a      	str	r2, [r7, #4]
 8003856:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003858:	2300      	movs	r3, #0
 800385a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800385c:	f7ff ff3e 	bl	80036dc <__NVIC_GetPriorityGrouping>
 8003860:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003862:	687a      	ldr	r2, [r7, #4]
 8003864:	68b9      	ldr	r1, [r7, #8]
 8003866:	6978      	ldr	r0, [r7, #20]
 8003868:	f7ff ff8e 	bl	8003788 <NVIC_EncodePriority>
 800386c:	4602      	mov	r2, r0
 800386e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003872:	4611      	mov	r1, r2
 8003874:	4618      	mov	r0, r3
 8003876:	f7ff ff5d 	bl	8003734 <__NVIC_SetPriority>
}
 800387a:	bf00      	nop
 800387c:	3718      	adds	r7, #24
 800387e:	46bd      	mov	sp, r7
 8003880:	bd80      	pop	{r7, pc}

08003882 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003882:	b580      	push	{r7, lr}
 8003884:	b082      	sub	sp, #8
 8003886:	af00      	add	r7, sp, #0
 8003888:	4603      	mov	r3, r0
 800388a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800388c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003890:	4618      	mov	r0, r3
 8003892:	f7ff ff31 	bl	80036f8 <__NVIC_EnableIRQ>
}
 8003896:	bf00      	nop
 8003898:	3708      	adds	r7, #8
 800389a:	46bd      	mov	sp, r7
 800389c:	bd80      	pop	{r7, pc}

0800389e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800389e:	b580      	push	{r7, lr}
 80038a0:	b082      	sub	sp, #8
 80038a2:	af00      	add	r7, sp, #0
 80038a4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80038a6:	6878      	ldr	r0, [r7, #4]
 80038a8:	f7ff ffa2 	bl	80037f0 <SysTick_Config>
 80038ac:	4603      	mov	r3, r0
}
 80038ae:	4618      	mov	r0, r3
 80038b0:	3708      	adds	r7, #8
 80038b2:	46bd      	mov	sp, r7
 80038b4:	bd80      	pop	{r7, pc}
	...

080038b8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80038b8:	b480      	push	{r7}
 80038ba:	b089      	sub	sp, #36	; 0x24
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
 80038c0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80038c2:	2300      	movs	r3, #0
 80038c4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80038c6:	2300      	movs	r3, #0
 80038c8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80038ca:	2300      	movs	r3, #0
 80038cc:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80038ce:	2300      	movs	r3, #0
 80038d0:	61fb      	str	r3, [r7, #28]
 80038d2:	e159      	b.n	8003b88 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80038d4:	2201      	movs	r2, #1
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	fa02 f303 	lsl.w	r3, r2, r3
 80038dc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80038de:	683b      	ldr	r3, [r7, #0]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	697a      	ldr	r2, [r7, #20]
 80038e4:	4013      	ands	r3, r2
 80038e6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80038e8:	693a      	ldr	r2, [r7, #16]
 80038ea:	697b      	ldr	r3, [r7, #20]
 80038ec:	429a      	cmp	r2, r3
 80038ee:	f040 8148 	bne.w	8003b82 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80038f2:	683b      	ldr	r3, [r7, #0]
 80038f4:	685b      	ldr	r3, [r3, #4]
 80038f6:	f003 0303 	and.w	r3, r3, #3
 80038fa:	2b01      	cmp	r3, #1
 80038fc:	d005      	beq.n	800390a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	685b      	ldr	r3, [r3, #4]
 8003902:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003906:	2b02      	cmp	r3, #2
 8003908:	d130      	bne.n	800396c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	689b      	ldr	r3, [r3, #8]
 800390e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003910:	69fb      	ldr	r3, [r7, #28]
 8003912:	005b      	lsls	r3, r3, #1
 8003914:	2203      	movs	r2, #3
 8003916:	fa02 f303 	lsl.w	r3, r2, r3
 800391a:	43db      	mvns	r3, r3
 800391c:	69ba      	ldr	r2, [r7, #24]
 800391e:	4013      	ands	r3, r2
 8003920:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003922:	683b      	ldr	r3, [r7, #0]
 8003924:	68da      	ldr	r2, [r3, #12]
 8003926:	69fb      	ldr	r3, [r7, #28]
 8003928:	005b      	lsls	r3, r3, #1
 800392a:	fa02 f303 	lsl.w	r3, r2, r3
 800392e:	69ba      	ldr	r2, [r7, #24]
 8003930:	4313      	orrs	r3, r2
 8003932:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	69ba      	ldr	r2, [r7, #24]
 8003938:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	685b      	ldr	r3, [r3, #4]
 800393e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003940:	2201      	movs	r2, #1
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	fa02 f303 	lsl.w	r3, r2, r3
 8003948:	43db      	mvns	r3, r3
 800394a:	69ba      	ldr	r2, [r7, #24]
 800394c:	4013      	ands	r3, r2
 800394e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003950:	683b      	ldr	r3, [r7, #0]
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	091b      	lsrs	r3, r3, #4
 8003956:	f003 0201 	and.w	r2, r3, #1
 800395a:	69fb      	ldr	r3, [r7, #28]
 800395c:	fa02 f303 	lsl.w	r3, r2, r3
 8003960:	69ba      	ldr	r2, [r7, #24]
 8003962:	4313      	orrs	r3, r2
 8003964:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	69ba      	ldr	r2, [r7, #24]
 800396a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	685b      	ldr	r3, [r3, #4]
 8003970:	f003 0303 	and.w	r3, r3, #3
 8003974:	2b03      	cmp	r3, #3
 8003976:	d017      	beq.n	80039a8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	68db      	ldr	r3, [r3, #12]
 800397c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800397e:	69fb      	ldr	r3, [r7, #28]
 8003980:	005b      	lsls	r3, r3, #1
 8003982:	2203      	movs	r2, #3
 8003984:	fa02 f303 	lsl.w	r3, r2, r3
 8003988:	43db      	mvns	r3, r3
 800398a:	69ba      	ldr	r2, [r7, #24]
 800398c:	4013      	ands	r3, r2
 800398e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003990:	683b      	ldr	r3, [r7, #0]
 8003992:	689a      	ldr	r2, [r3, #8]
 8003994:	69fb      	ldr	r3, [r7, #28]
 8003996:	005b      	lsls	r3, r3, #1
 8003998:	fa02 f303 	lsl.w	r3, r2, r3
 800399c:	69ba      	ldr	r2, [r7, #24]
 800399e:	4313      	orrs	r3, r2
 80039a0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	69ba      	ldr	r2, [r7, #24]
 80039a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80039a8:	683b      	ldr	r3, [r7, #0]
 80039aa:	685b      	ldr	r3, [r3, #4]
 80039ac:	f003 0303 	and.w	r3, r3, #3
 80039b0:	2b02      	cmp	r3, #2
 80039b2:	d123      	bne.n	80039fc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80039b4:	69fb      	ldr	r3, [r7, #28]
 80039b6:	08da      	lsrs	r2, r3, #3
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	3208      	adds	r2, #8
 80039bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80039c0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80039c2:	69fb      	ldr	r3, [r7, #28]
 80039c4:	f003 0307 	and.w	r3, r3, #7
 80039c8:	009b      	lsls	r3, r3, #2
 80039ca:	220f      	movs	r2, #15
 80039cc:	fa02 f303 	lsl.w	r3, r2, r3
 80039d0:	43db      	mvns	r3, r3
 80039d2:	69ba      	ldr	r2, [r7, #24]
 80039d4:	4013      	ands	r3, r2
 80039d6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80039d8:	683b      	ldr	r3, [r7, #0]
 80039da:	691a      	ldr	r2, [r3, #16]
 80039dc:	69fb      	ldr	r3, [r7, #28]
 80039de:	f003 0307 	and.w	r3, r3, #7
 80039e2:	009b      	lsls	r3, r3, #2
 80039e4:	fa02 f303 	lsl.w	r3, r2, r3
 80039e8:	69ba      	ldr	r2, [r7, #24]
 80039ea:	4313      	orrs	r3, r2
 80039ec:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	08da      	lsrs	r2, r3, #3
 80039f2:	687b      	ldr	r3, [r7, #4]
 80039f4:	3208      	adds	r2, #8
 80039f6:	69b9      	ldr	r1, [r7, #24]
 80039f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	681b      	ldr	r3, [r3, #0]
 8003a00:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003a02:	69fb      	ldr	r3, [r7, #28]
 8003a04:	005b      	lsls	r3, r3, #1
 8003a06:	2203      	movs	r2, #3
 8003a08:	fa02 f303 	lsl.w	r3, r2, r3
 8003a0c:	43db      	mvns	r3, r3
 8003a0e:	69ba      	ldr	r2, [r7, #24]
 8003a10:	4013      	ands	r3, r2
 8003a12:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003a14:	683b      	ldr	r3, [r7, #0]
 8003a16:	685b      	ldr	r3, [r3, #4]
 8003a18:	f003 0203 	and.w	r2, r3, #3
 8003a1c:	69fb      	ldr	r3, [r7, #28]
 8003a1e:	005b      	lsls	r3, r3, #1
 8003a20:	fa02 f303 	lsl.w	r3, r2, r3
 8003a24:	69ba      	ldr	r2, [r7, #24]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003a2a:	687b      	ldr	r3, [r7, #4]
 8003a2c:	69ba      	ldr	r2, [r7, #24]
 8003a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003a30:	683b      	ldr	r3, [r7, #0]
 8003a32:	685b      	ldr	r3, [r3, #4]
 8003a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	f000 80a2 	beq.w	8003b82 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003a3e:	2300      	movs	r3, #0
 8003a40:	60fb      	str	r3, [r7, #12]
 8003a42:	4b57      	ldr	r3, [pc, #348]	; (8003ba0 <HAL_GPIO_Init+0x2e8>)
 8003a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a46:	4a56      	ldr	r2, [pc, #344]	; (8003ba0 <HAL_GPIO_Init+0x2e8>)
 8003a48:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003a4c:	6453      	str	r3, [r2, #68]	; 0x44
 8003a4e:	4b54      	ldr	r3, [pc, #336]	; (8003ba0 <HAL_GPIO_Init+0x2e8>)
 8003a50:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003a56:	60fb      	str	r3, [r7, #12]
 8003a58:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003a5a:	4a52      	ldr	r2, [pc, #328]	; (8003ba4 <HAL_GPIO_Init+0x2ec>)
 8003a5c:	69fb      	ldr	r3, [r7, #28]
 8003a5e:	089b      	lsrs	r3, r3, #2
 8003a60:	3302      	adds	r3, #2
 8003a62:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003a66:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003a68:	69fb      	ldr	r3, [r7, #28]
 8003a6a:	f003 0303 	and.w	r3, r3, #3
 8003a6e:	009b      	lsls	r3, r3, #2
 8003a70:	220f      	movs	r2, #15
 8003a72:	fa02 f303 	lsl.w	r3, r2, r3
 8003a76:	43db      	mvns	r3, r3
 8003a78:	69ba      	ldr	r2, [r7, #24]
 8003a7a:	4013      	ands	r3, r2
 8003a7c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a49      	ldr	r2, [pc, #292]	; (8003ba8 <HAL_GPIO_Init+0x2f0>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d019      	beq.n	8003aba <HAL_GPIO_Init+0x202>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	4a48      	ldr	r2, [pc, #288]	; (8003bac <HAL_GPIO_Init+0x2f4>)
 8003a8a:	4293      	cmp	r3, r2
 8003a8c:	d013      	beq.n	8003ab6 <HAL_GPIO_Init+0x1fe>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a47      	ldr	r2, [pc, #284]	; (8003bb0 <HAL_GPIO_Init+0x2f8>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d00d      	beq.n	8003ab2 <HAL_GPIO_Init+0x1fa>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a46      	ldr	r2, [pc, #280]	; (8003bb4 <HAL_GPIO_Init+0x2fc>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d007      	beq.n	8003aae <HAL_GPIO_Init+0x1f6>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a45      	ldr	r2, [pc, #276]	; (8003bb8 <HAL_GPIO_Init+0x300>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d101      	bne.n	8003aaa <HAL_GPIO_Init+0x1f2>
 8003aa6:	2304      	movs	r3, #4
 8003aa8:	e008      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003aaa:	2307      	movs	r3, #7
 8003aac:	e006      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003aae:	2303      	movs	r3, #3
 8003ab0:	e004      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003ab2:	2302      	movs	r3, #2
 8003ab4:	e002      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <HAL_GPIO_Init+0x204>
 8003aba:	2300      	movs	r3, #0
 8003abc:	69fa      	ldr	r2, [r7, #28]
 8003abe:	f002 0203 	and.w	r2, r2, #3
 8003ac2:	0092      	lsls	r2, r2, #2
 8003ac4:	4093      	lsls	r3, r2
 8003ac6:	69ba      	ldr	r2, [r7, #24]
 8003ac8:	4313      	orrs	r3, r2
 8003aca:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003acc:	4935      	ldr	r1, [pc, #212]	; (8003ba4 <HAL_GPIO_Init+0x2ec>)
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	089b      	lsrs	r3, r3, #2
 8003ad2:	3302      	adds	r3, #2
 8003ad4:	69ba      	ldr	r2, [r7, #24]
 8003ad6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003ada:	4b38      	ldr	r3, [pc, #224]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003adc:	689b      	ldr	r3, [r3, #8]
 8003ade:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003ae0:	693b      	ldr	r3, [r7, #16]
 8003ae2:	43db      	mvns	r3, r3
 8003ae4:	69ba      	ldr	r2, [r7, #24]
 8003ae6:	4013      	ands	r3, r2
 8003ae8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003aea:	683b      	ldr	r3, [r7, #0]
 8003aec:	685b      	ldr	r3, [r3, #4]
 8003aee:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003af2:	2b00      	cmp	r3, #0
 8003af4:	d003      	beq.n	8003afe <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003af6:	69ba      	ldr	r2, [r7, #24]
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003afe:	4a2f      	ldr	r2, [pc, #188]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b00:	69bb      	ldr	r3, [r7, #24]
 8003b02:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003b04:	4b2d      	ldr	r3, [pc, #180]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b06:	68db      	ldr	r3, [r3, #12]
 8003b08:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	43db      	mvns	r3, r3
 8003b0e:	69ba      	ldr	r2, [r7, #24]
 8003b10:	4013      	ands	r3, r2
 8003b12:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003b14:	683b      	ldr	r3, [r7, #0]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003b1c:	2b00      	cmp	r3, #0
 8003b1e:	d003      	beq.n	8003b28 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003b20:	69ba      	ldr	r2, [r7, #24]
 8003b22:	693b      	ldr	r3, [r7, #16]
 8003b24:	4313      	orrs	r3, r2
 8003b26:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003b28:	4a24      	ldr	r2, [pc, #144]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b2a:	69bb      	ldr	r3, [r7, #24]
 8003b2c:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003b2e:	4b23      	ldr	r3, [pc, #140]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b30:	685b      	ldr	r3, [r3, #4]
 8003b32:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b34:	693b      	ldr	r3, [r7, #16]
 8003b36:	43db      	mvns	r3, r3
 8003b38:	69ba      	ldr	r2, [r7, #24]
 8003b3a:	4013      	ands	r3, r2
 8003b3c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003b3e:	683b      	ldr	r3, [r7, #0]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003b46:	2b00      	cmp	r3, #0
 8003b48:	d003      	beq.n	8003b52 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003b4a:	69ba      	ldr	r2, [r7, #24]
 8003b4c:	693b      	ldr	r3, [r7, #16]
 8003b4e:	4313      	orrs	r3, r2
 8003b50:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003b52:	4a1a      	ldr	r2, [pc, #104]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b54:	69bb      	ldr	r3, [r7, #24]
 8003b56:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003b58:	4b18      	ldr	r3, [pc, #96]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	43db      	mvns	r3, r3
 8003b62:	69ba      	ldr	r2, [r7, #24]
 8003b64:	4013      	ands	r3, r2
 8003b66:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003b68:	683b      	ldr	r3, [r7, #0]
 8003b6a:	685b      	ldr	r3, [r3, #4]
 8003b6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d003      	beq.n	8003b7c <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003b74:	69ba      	ldr	r2, [r7, #24]
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	4313      	orrs	r3, r2
 8003b7a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003b7c:	4a0f      	ldr	r2, [pc, #60]	; (8003bbc <HAL_GPIO_Init+0x304>)
 8003b7e:	69bb      	ldr	r3, [r7, #24]
 8003b80:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003b82:	69fb      	ldr	r3, [r7, #28]
 8003b84:	3301      	adds	r3, #1
 8003b86:	61fb      	str	r3, [r7, #28]
 8003b88:	69fb      	ldr	r3, [r7, #28]
 8003b8a:	2b0f      	cmp	r3, #15
 8003b8c:	f67f aea2 	bls.w	80038d4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003b90:	bf00      	nop
 8003b92:	bf00      	nop
 8003b94:	3724      	adds	r7, #36	; 0x24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9c:	4770      	bx	lr
 8003b9e:	bf00      	nop
 8003ba0:	40023800 	.word	0x40023800
 8003ba4:	40013800 	.word	0x40013800
 8003ba8:	40020000 	.word	0x40020000
 8003bac:	40020400 	.word	0x40020400
 8003bb0:	40020800 	.word	0x40020800
 8003bb4:	40020c00 	.word	0x40020c00
 8003bb8:	40021000 	.word	0x40021000
 8003bbc:	40013c00 	.word	0x40013c00

08003bc0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b085      	sub	sp, #20
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
 8003bc8:	460b      	mov	r3, r1
 8003bca:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	691a      	ldr	r2, [r3, #16]
 8003bd0:	887b      	ldrh	r3, [r7, #2]
 8003bd2:	4013      	ands	r3, r2
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	d002      	beq.n	8003bde <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003bd8:	2301      	movs	r3, #1
 8003bda:	73fb      	strb	r3, [r7, #15]
 8003bdc:	e001      	b.n	8003be2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8003bde:	2300      	movs	r3, #0
 8003be0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003be2:	7bfb      	ldrb	r3, [r7, #15]
}
 8003be4:	4618      	mov	r0, r3
 8003be6:	3714      	adds	r7, #20
 8003be8:	46bd      	mov	sp, r7
 8003bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bee:	4770      	bx	lr

08003bf0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003bf0:	b480      	push	{r7}
 8003bf2:	b083      	sub	sp, #12
 8003bf4:	af00      	add	r7, sp, #0
 8003bf6:	6078      	str	r0, [r7, #4]
 8003bf8:	460b      	mov	r3, r1
 8003bfa:	807b      	strh	r3, [r7, #2]
 8003bfc:	4613      	mov	r3, r2
 8003bfe:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003c00:	787b      	ldrb	r3, [r7, #1]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d003      	beq.n	8003c0e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003c06:	887a      	ldrh	r2, [r7, #2]
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003c0c:	e003      	b.n	8003c16 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003c0e:	887b      	ldrh	r3, [r7, #2]
 8003c10:	041a      	lsls	r2, r3, #16
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	619a      	str	r2, [r3, #24]
}
 8003c16:	bf00      	nop
 8003c18:	370c      	adds	r7, #12
 8003c1a:	46bd      	mov	sp, r7
 8003c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c20:	4770      	bx	lr
	...

08003c24 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003c24:	b580      	push	{r7, lr}
 8003c26:	b084      	sub	sp, #16
 8003c28:	af00      	add	r7, sp, #0
 8003c2a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2b00      	cmp	r3, #0
 8003c30:	d101      	bne.n	8003c36 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003c32:	2301      	movs	r3, #1
 8003c34:	e12b      	b.n	8003e8e <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c3c:	b2db      	uxtb	r3, r3
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d106      	bne.n	8003c50 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	2200      	movs	r2, #0
 8003c46:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f7fe fdb8 	bl	80027c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2224      	movs	r2, #36	; 0x24
 8003c54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	681a      	ldr	r2, [r3, #0]
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	f022 0201 	bic.w	r2, r2, #1
 8003c66:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	681b      	ldr	r3, [r3, #0]
 8003c6c:	681a      	ldr	r2, [r3, #0]
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003c76:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	681a      	ldr	r2, [r3, #0]
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003c86:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003c88:	f001 fbd2 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 8003c8c:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	4a81      	ldr	r2, [pc, #516]	; (8003e98 <HAL_I2C_Init+0x274>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d807      	bhi.n	8003ca8 <HAL_I2C_Init+0x84>
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	4a80      	ldr	r2, [pc, #512]	; (8003e9c <HAL_I2C_Init+0x278>)
 8003c9c:	4293      	cmp	r3, r2
 8003c9e:	bf94      	ite	ls
 8003ca0:	2301      	movls	r3, #1
 8003ca2:	2300      	movhi	r3, #0
 8003ca4:	b2db      	uxtb	r3, r3
 8003ca6:	e006      	b.n	8003cb6 <HAL_I2C_Init+0x92>
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	4a7d      	ldr	r2, [pc, #500]	; (8003ea0 <HAL_I2C_Init+0x27c>)
 8003cac:	4293      	cmp	r3, r2
 8003cae:	bf94      	ite	ls
 8003cb0:	2301      	movls	r3, #1
 8003cb2:	2300      	movhi	r3, #0
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d001      	beq.n	8003cbe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e0e7      	b.n	8003e8e <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a78      	ldr	r2, [pc, #480]	; (8003ea4 <HAL_I2C_Init+0x280>)
 8003cc2:	fba2 2303 	umull	r2, r3, r2, r3
 8003cc6:	0c9b      	lsrs	r3, r3, #18
 8003cc8:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	685b      	ldr	r3, [r3, #4]
 8003cd0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	68ba      	ldr	r2, [r7, #8]
 8003cda:	430a      	orrs	r2, r1
 8003cdc:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	6a1b      	ldr	r3, [r3, #32]
 8003ce4:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	685b      	ldr	r3, [r3, #4]
 8003cec:	4a6a      	ldr	r2, [pc, #424]	; (8003e98 <HAL_I2C_Init+0x274>)
 8003cee:	4293      	cmp	r3, r2
 8003cf0:	d802      	bhi.n	8003cf8 <HAL_I2C_Init+0xd4>
 8003cf2:	68bb      	ldr	r3, [r7, #8]
 8003cf4:	3301      	adds	r3, #1
 8003cf6:	e009      	b.n	8003d0c <HAL_I2C_Init+0xe8>
 8003cf8:	68bb      	ldr	r3, [r7, #8]
 8003cfa:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003cfe:	fb02 f303 	mul.w	r3, r2, r3
 8003d02:	4a69      	ldr	r2, [pc, #420]	; (8003ea8 <HAL_I2C_Init+0x284>)
 8003d04:	fba2 2303 	umull	r2, r3, r2, r3
 8003d08:	099b      	lsrs	r3, r3, #6
 8003d0a:	3301      	adds	r3, #1
 8003d0c:	687a      	ldr	r2, [r7, #4]
 8003d0e:	6812      	ldr	r2, [r2, #0]
 8003d10:	430b      	orrs	r3, r1
 8003d12:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	69db      	ldr	r3, [r3, #28]
 8003d1a:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003d1e:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	685b      	ldr	r3, [r3, #4]
 8003d26:	495c      	ldr	r1, [pc, #368]	; (8003e98 <HAL_I2C_Init+0x274>)
 8003d28:	428b      	cmp	r3, r1
 8003d2a:	d819      	bhi.n	8003d60 <HAL_I2C_Init+0x13c>
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	1e59      	subs	r1, r3, #1
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	685b      	ldr	r3, [r3, #4]
 8003d34:	005b      	lsls	r3, r3, #1
 8003d36:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d3a:	1c59      	adds	r1, r3, #1
 8003d3c:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003d40:	400b      	ands	r3, r1
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d00a      	beq.n	8003d5c <HAL_I2C_Init+0x138>
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	1e59      	subs	r1, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	685b      	ldr	r3, [r3, #4]
 8003d4e:	005b      	lsls	r3, r3, #1
 8003d50:	fbb1 f3f3 	udiv	r3, r1, r3
 8003d54:	3301      	adds	r3, #1
 8003d56:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d5a:	e051      	b.n	8003e00 <HAL_I2C_Init+0x1dc>
 8003d5c:	2304      	movs	r3, #4
 8003d5e:	e04f      	b.n	8003e00 <HAL_I2C_Init+0x1dc>
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	689b      	ldr	r3, [r3, #8]
 8003d64:	2b00      	cmp	r3, #0
 8003d66:	d111      	bne.n	8003d8c <HAL_I2C_Init+0x168>
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	1e58      	subs	r0, r3, #1
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	6859      	ldr	r1, [r3, #4]
 8003d70:	460b      	mov	r3, r1
 8003d72:	005b      	lsls	r3, r3, #1
 8003d74:	440b      	add	r3, r1
 8003d76:	fbb0 f3f3 	udiv	r3, r0, r3
 8003d7a:	3301      	adds	r3, #1
 8003d7c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003d80:	2b00      	cmp	r3, #0
 8003d82:	bf0c      	ite	eq
 8003d84:	2301      	moveq	r3, #1
 8003d86:	2300      	movne	r3, #0
 8003d88:	b2db      	uxtb	r3, r3
 8003d8a:	e012      	b.n	8003db2 <HAL_I2C_Init+0x18e>
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	1e58      	subs	r0, r3, #1
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	6859      	ldr	r1, [r3, #4]
 8003d94:	460b      	mov	r3, r1
 8003d96:	009b      	lsls	r3, r3, #2
 8003d98:	440b      	add	r3, r1
 8003d9a:	0099      	lsls	r1, r3, #2
 8003d9c:	440b      	add	r3, r1
 8003d9e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003da2:	3301      	adds	r3, #1
 8003da4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003da8:	2b00      	cmp	r3, #0
 8003daa:	bf0c      	ite	eq
 8003dac:	2301      	moveq	r3, #1
 8003dae:	2300      	movne	r3, #0
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d001      	beq.n	8003dba <HAL_I2C_Init+0x196>
 8003db6:	2301      	movs	r3, #1
 8003db8:	e022      	b.n	8003e00 <HAL_I2C_Init+0x1dc>
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	689b      	ldr	r3, [r3, #8]
 8003dbe:	2b00      	cmp	r3, #0
 8003dc0:	d10e      	bne.n	8003de0 <HAL_I2C_Init+0x1bc>
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	1e58      	subs	r0, r3, #1
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	6859      	ldr	r1, [r3, #4]
 8003dca:	460b      	mov	r3, r1
 8003dcc:	005b      	lsls	r3, r3, #1
 8003dce:	440b      	add	r3, r1
 8003dd0:	fbb0 f3f3 	udiv	r3, r0, r3
 8003dd4:	3301      	adds	r3, #1
 8003dd6:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dda:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003dde:	e00f      	b.n	8003e00 <HAL_I2C_Init+0x1dc>
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	1e58      	subs	r0, r3, #1
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	6859      	ldr	r1, [r3, #4]
 8003de8:	460b      	mov	r3, r1
 8003dea:	009b      	lsls	r3, r3, #2
 8003dec:	440b      	add	r3, r1
 8003dee:	0099      	lsls	r1, r3, #2
 8003df0:	440b      	add	r3, r1
 8003df2:	fbb0 f3f3 	udiv	r3, r0, r3
 8003df6:	3301      	adds	r3, #1
 8003df8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003dfc:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003e00:	6879      	ldr	r1, [r7, #4]
 8003e02:	6809      	ldr	r1, [r1, #0]
 8003e04:	4313      	orrs	r3, r2
 8003e06:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	69da      	ldr	r2, [r3, #28]
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	6a1b      	ldr	r3, [r3, #32]
 8003e1a:	431a      	orrs	r2, r3
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681b      	ldr	r3, [r3, #0]
 8003e20:	430a      	orrs	r2, r1
 8003e22:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	689b      	ldr	r3, [r3, #8]
 8003e2a:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003e2e:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8003e32:	687a      	ldr	r2, [r7, #4]
 8003e34:	6911      	ldr	r1, [r2, #16]
 8003e36:	687a      	ldr	r2, [r7, #4]
 8003e38:	68d2      	ldr	r2, [r2, #12]
 8003e3a:	4311      	orrs	r1, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6812      	ldr	r2, [r2, #0]
 8003e40:	430b      	orrs	r3, r1
 8003e42:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	695a      	ldr	r2, [r3, #20]
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	431a      	orrs	r2, r3
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	681b      	ldr	r3, [r3, #0]
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	681a      	ldr	r2, [r3, #0]
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	f042 0201 	orr.w	r2, r2, #1
 8003e6e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2200      	movs	r2, #0
 8003e74:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	2220      	movs	r2, #32
 8003e7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	2200      	movs	r2, #0
 8003e82:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	2200      	movs	r2, #0
 8003e88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3710      	adds	r7, #16
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	000186a0 	.word	0x000186a0
 8003e9c:	001e847f 	.word	0x001e847f
 8003ea0:	003d08ff 	.word	0x003d08ff
 8003ea4:	431bde83 	.word	0x431bde83
 8003ea8:	10624dd3 	.word	0x10624dd3

08003eac <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003eac:	b580      	push	{r7, lr}
 8003eae:	b088      	sub	sp, #32
 8003eb0:	af02      	add	r7, sp, #8
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	607a      	str	r2, [r7, #4]
 8003eb6:	461a      	mov	r2, r3
 8003eb8:	460b      	mov	r3, r1
 8003eba:	817b      	strh	r3, [r7, #10]
 8003ebc:	4613      	mov	r3, r2
 8003ebe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ec0:	f7ff f80a 	bl	8002ed8 <HAL_GetTick>
 8003ec4:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ecc:	b2db      	uxtb	r3, r3
 8003ece:	2b20      	cmp	r3, #32
 8003ed0:	f040 80e0 	bne.w	8004094 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	2319      	movs	r3, #25
 8003eda:	2201      	movs	r2, #1
 8003edc:	4970      	ldr	r1, [pc, #448]	; (80040a0 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f000 fc58 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8003ee4:	4603      	mov	r3, r0
 8003ee6:	2b00      	cmp	r3, #0
 8003ee8:	d001      	beq.n	8003eee <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003eea:	2302      	movs	r3, #2
 8003eec:	e0d3      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ef4:	2b01      	cmp	r3, #1
 8003ef6:	d101      	bne.n	8003efc <HAL_I2C_Master_Transmit+0x50>
 8003ef8:	2302      	movs	r3, #2
 8003efa:	e0cc      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	2201      	movs	r2, #1
 8003f00:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003f04:	68fb      	ldr	r3, [r7, #12]
 8003f06:	681b      	ldr	r3, [r3, #0]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b01      	cmp	r3, #1
 8003f10:	d007      	beq.n	8003f22 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	681a      	ldr	r2, [r3, #0]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f042 0201 	orr.w	r2, r2, #1
 8003f20:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	681a      	ldr	r2, [r3, #0]
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003f30:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003f32:	68fb      	ldr	r3, [r7, #12]
 8003f34:	2221      	movs	r2, #33	; 0x21
 8003f36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003f3a:	68fb      	ldr	r3, [r7, #12]
 8003f3c:	2210      	movs	r2, #16
 8003f3e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	2200      	movs	r2, #0
 8003f46:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	687a      	ldr	r2, [r7, #4]
 8003f4c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	893a      	ldrh	r2, [r7, #8]
 8003f52:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f58:	b29a      	uxth	r2, r3
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	4a50      	ldr	r2, [pc, #320]	; (80040a4 <HAL_I2C_Master_Transmit+0x1f8>)
 8003f62:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003f64:	8979      	ldrh	r1, [r7, #10]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	6a3a      	ldr	r2, [r7, #32]
 8003f6a:	68f8      	ldr	r0, [r7, #12]
 8003f6c:	f000 fac2 	bl	80044f4 <I2C_MasterRequestWrite>
 8003f70:	4603      	mov	r3, r0
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d001      	beq.n	8003f7a <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003f76:	2301      	movs	r3, #1
 8003f78:	e08d      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003f7a:	2300      	movs	r3, #0
 8003f7c:	613b      	str	r3, [r7, #16]
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	695b      	ldr	r3, [r3, #20]
 8003f84:	613b      	str	r3, [r7, #16]
 8003f86:	68fb      	ldr	r3, [r7, #12]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	699b      	ldr	r3, [r3, #24]
 8003f8c:	613b      	str	r3, [r7, #16]
 8003f8e:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003f90:	e066      	b.n	8004060 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003f92:	697a      	ldr	r2, [r7, #20]
 8003f94:	6a39      	ldr	r1, [r7, #32]
 8003f96:	68f8      	ldr	r0, [r7, #12]
 8003f98:	f000 fcd2 	bl	8004940 <I2C_WaitOnTXEFlagUntilTimeout>
 8003f9c:	4603      	mov	r3, r0
 8003f9e:	2b00      	cmp	r3, #0
 8003fa0:	d00d      	beq.n	8003fbe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fa6:	2b04      	cmp	r3, #4
 8003fa8:	d107      	bne.n	8003fba <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003faa:	68fb      	ldr	r3, [r7, #12]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	681a      	ldr	r2, [r3, #0]
 8003fb0:	68fb      	ldr	r3, [r7, #12]
 8003fb2:	681b      	ldr	r3, [r3, #0]
 8003fb4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fb8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003fba:	2301      	movs	r3, #1
 8003fbc:	e06b      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003fbe:	68fb      	ldr	r3, [r7, #12]
 8003fc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fc2:	781a      	ldrb	r2, [r3, #0]
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fd8:	b29b      	uxth	r3, r3
 8003fda:	3b01      	subs	r3, #1
 8003fdc:	b29a      	uxth	r2, r3
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	695b      	ldr	r3, [r3, #20]
 8003ff4:	f003 0304 	and.w	r3, r3, #4
 8003ff8:	2b04      	cmp	r3, #4
 8003ffa:	d11b      	bne.n	8004034 <HAL_I2C_Master_Transmit+0x188>
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004000:	2b00      	cmp	r3, #0
 8004002:	d017      	beq.n	8004034 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004008:	781a      	ldrb	r2, [r3, #0]
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004014:	1c5a      	adds	r2, r3, #1
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 800401a:	68fb      	ldr	r3, [r7, #12]
 800401c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800401e:	b29b      	uxth	r3, r3
 8004020:	3b01      	subs	r3, #1
 8004022:	b29a      	uxth	r2, r3
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8004028:	68fb      	ldr	r3, [r7, #12]
 800402a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800402c:	3b01      	subs	r3, #1
 800402e:	b29a      	uxth	r2, r3
 8004030:	68fb      	ldr	r3, [r7, #12]
 8004032:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004034:	697a      	ldr	r2, [r7, #20]
 8004036:	6a39      	ldr	r1, [r7, #32]
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 fcc2 	bl	80049c2 <I2C_WaitOnBTFFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d00d      	beq.n	8004060 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004048:	2b04      	cmp	r3, #4
 800404a:	d107      	bne.n	800405c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	681a      	ldr	r2, [r3, #0]
 8004052:	68fb      	ldr	r3, [r7, #12]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800405a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800405c:	2301      	movs	r3, #1
 800405e:	e01a      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8004060:	68fb      	ldr	r3, [r7, #12]
 8004062:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004064:	2b00      	cmp	r3, #0
 8004066:	d194      	bne.n	8003f92 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	681a      	ldr	r2, [r3, #0]
 800406e:	68fb      	ldr	r3, [r7, #12]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004076:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	2220      	movs	r2, #32
 800407c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	2200      	movs	r2, #0
 8004084:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	2200      	movs	r2, #0
 800408c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004090:	2300      	movs	r3, #0
 8004092:	e000      	b.n	8004096 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8004094:	2302      	movs	r3, #2
  }
}
 8004096:	4618      	mov	r0, r3
 8004098:	3718      	adds	r7, #24
 800409a:	46bd      	mov	sp, r7
 800409c:	bd80      	pop	{r7, pc}
 800409e:	bf00      	nop
 80040a0:	00100002 	.word	0x00100002
 80040a4:	ffff0000 	.word	0xffff0000

080040a8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b08c      	sub	sp, #48	; 0x30
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	461a      	mov	r2, r3
 80040b4:	460b      	mov	r3, r1
 80040b6:	817b      	strh	r3, [r7, #10]
 80040b8:	4613      	mov	r3, r2
 80040ba:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80040bc:	f7fe ff0c 	bl	8002ed8 <HAL_GetTick>
 80040c0:	6278      	str	r0, [r7, #36]	; 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040c8:	b2db      	uxtb	r3, r3
 80040ca:	2b20      	cmp	r3, #32
 80040cc:	f040 820b 	bne.w	80044e6 <HAL_I2C_Master_Receive+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80040d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	2319      	movs	r3, #25
 80040d6:	2201      	movs	r2, #1
 80040d8:	497c      	ldr	r1, [pc, #496]	; (80042cc <HAL_I2C_Master_Receive+0x224>)
 80040da:	68f8      	ldr	r0, [r7, #12]
 80040dc:	f000 fb5a 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 80040e0:	4603      	mov	r3, r0
 80040e2:	2b00      	cmp	r3, #0
 80040e4:	d001      	beq.n	80040ea <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
 80040e8:	e1fe      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80040ea:	68fb      	ldr	r3, [r7, #12]
 80040ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80040f0:	2b01      	cmp	r3, #1
 80040f2:	d101      	bne.n	80040f8 <HAL_I2C_Master_Receive+0x50>
 80040f4:	2302      	movs	r3, #2
 80040f6:	e1f7      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	2201      	movs	r2, #1
 80040fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	681b      	ldr	r3, [r3, #0]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f003 0301 	and.w	r3, r3, #1
 800410a:	2b01      	cmp	r3, #1
 800410c:	d007      	beq.n	800411e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	681a      	ldr	r2, [r3, #0]
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	f042 0201 	orr.w	r2, r2, #1
 800411c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800411e:	68fb      	ldr	r3, [r7, #12]
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	681a      	ldr	r2, [r3, #0]
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800412c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2222      	movs	r2, #34	; 0x22
 8004132:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2210      	movs	r2, #16
 800413a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	2200      	movs	r2, #0
 8004142:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	687a      	ldr	r2, [r7, #4]
 8004148:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	893a      	ldrh	r2, [r7, #8]
 800414e:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004154:	b29a      	uxth	r2, r3
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	4a5c      	ldr	r2, [pc, #368]	; (80042d0 <HAL_I2C_Master_Receive+0x228>)
 800415e:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8004160:	8979      	ldrh	r1, [r7, #10]
 8004162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004166:	68f8      	ldr	r0, [r7, #12]
 8004168:	f000 fa46 	bl	80045f8 <I2C_MasterRequestRead>
 800416c:	4603      	mov	r3, r0
 800416e:	2b00      	cmp	r3, #0
 8004170:	d001      	beq.n	8004176 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8004172:	2301      	movs	r3, #1
 8004174:	e1b8      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
    }

    if (hi2c->XferSize == 0U)
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800417a:	2b00      	cmp	r3, #0
 800417c:	d113      	bne.n	80041a6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800417e:	2300      	movs	r3, #0
 8004180:	623b      	str	r3, [r7, #32]
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	695b      	ldr	r3, [r3, #20]
 8004188:	623b      	str	r3, [r7, #32]
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	699b      	ldr	r3, [r3, #24]
 8004190:	623b      	str	r3, [r7, #32]
 8004192:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004194:	68fb      	ldr	r3, [r7, #12]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	681a      	ldr	r2, [r3, #0]
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041a2:	601a      	str	r2, [r3, #0]
 80041a4:	e18c      	b.n	80044c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 1U)
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041aa:	2b01      	cmp	r3, #1
 80041ac:	d11b      	bne.n	80041e6 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	681a      	ldr	r2, [r3, #0]
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041bc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041be:	2300      	movs	r3, #0
 80041c0:	61fb      	str	r3, [r7, #28]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	695b      	ldr	r3, [r3, #20]
 80041c8:	61fb      	str	r3, [r7, #28]
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	699b      	ldr	r3, [r3, #24]
 80041d0:	61fb      	str	r3, [r7, #28]
 80041d2:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	681b      	ldr	r3, [r3, #0]
 80041d8:	681a      	ldr	r2, [r3, #0]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80041e2:	601a      	str	r2, [r3, #0]
 80041e4:	e16c      	b.n	80044c0 <HAL_I2C_Master_Receive+0x418>
    }
    else if (hi2c->XferSize == 2U)
 80041e6:	68fb      	ldr	r3, [r7, #12]
 80041e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80041ea:	2b02      	cmp	r3, #2
 80041ec:	d11b      	bne.n	8004226 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	681a      	ldr	r2, [r3, #0]
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80041fc:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681a      	ldr	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800420e:	2300      	movs	r3, #0
 8004210:	61bb      	str	r3, [r7, #24]
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	695b      	ldr	r3, [r3, #20]
 8004218:	61bb      	str	r3, [r7, #24]
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	699b      	ldr	r3, [r3, #24]
 8004220:	61bb      	str	r3, [r7, #24]
 8004222:	69bb      	ldr	r3, [r7, #24]
 8004224:	e14c      	b.n	80044c0 <HAL_I2C_Master_Receive+0x418>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	681a      	ldr	r2, [r3, #0]
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004234:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004236:	2300      	movs	r3, #0
 8004238:	617b      	str	r3, [r7, #20]
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	695b      	ldr	r3, [r3, #20]
 8004240:	617b      	str	r3, [r7, #20]
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	699b      	ldr	r3, [r3, #24]
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800424c:	e138      	b.n	80044c0 <HAL_I2C_Master_Receive+0x418>
    {
      if (hi2c->XferSize <= 3U)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004252:	2b03      	cmp	r3, #3
 8004254:	f200 80f1 	bhi.w	800443a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800425c:	2b01      	cmp	r3, #1
 800425e:	d123      	bne.n	80042a8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004260:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8004262:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8004264:	68f8      	ldr	r0, [r7, #12]
 8004266:	f000 fbed 	bl	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout>
 800426a:	4603      	mov	r3, r0
 800426c:	2b00      	cmp	r3, #0
 800426e:	d001      	beq.n	8004274 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8004270:	2301      	movs	r3, #1
 8004272:	e139      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	691a      	ldr	r2, [r3, #16]
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800427e:	b2d2      	uxtb	r2, r2
 8004280:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	1c5a      	adds	r2, r3, #1
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004290:	3b01      	subs	r3, #1
 8004292:	b29a      	uxth	r2, r3
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	855a      	strh	r2, [r3, #42]	; 0x2a
 80042a6:	e10b      	b.n	80044c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80042ac:	2b02      	cmp	r3, #2
 80042ae:	d14e      	bne.n	800434e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80042b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80042b2:	9300      	str	r3, [sp, #0]
 80042b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80042b6:	2200      	movs	r2, #0
 80042b8:	4906      	ldr	r1, [pc, #24]	; (80042d4 <HAL_I2C_Master_Receive+0x22c>)
 80042ba:	68f8      	ldr	r0, [r7, #12]
 80042bc:	f000 fa6a 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 80042c0:	4603      	mov	r3, r0
 80042c2:	2b00      	cmp	r3, #0
 80042c4:	d008      	beq.n	80042d8 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 80042c6:	2301      	movs	r3, #1
 80042c8:	e10e      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
 80042ca:	bf00      	nop
 80042cc:	00100002 	.word	0x00100002
 80042d0:	ffff0000 	.word	0xffff0000
 80042d4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042d8:	68fb      	ldr	r3, [r7, #12]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	681a      	ldr	r2, [r3, #0]
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042e6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	691a      	ldr	r2, [r3, #16]
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042f2:	b2d2      	uxtb	r2, r2
 80042f4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042fa:	1c5a      	adds	r2, r3, #1
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004300:	68fb      	ldr	r3, [r7, #12]
 8004302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004304:	3b01      	subs	r3, #1
 8004306:	b29a      	uxth	r2, r3
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004310:	b29b      	uxth	r3, r3
 8004312:	3b01      	subs	r3, #1
 8004314:	b29a      	uxth	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	691a      	ldr	r2, [r3, #16]
 8004320:	68fb      	ldr	r3, [r7, #12]
 8004322:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004324:	b2d2      	uxtb	r2, r2
 8004326:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800432c:	1c5a      	adds	r2, r3, #1
 800432e:	68fb      	ldr	r3, [r7, #12]
 8004330:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004332:	68fb      	ldr	r3, [r7, #12]
 8004334:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004336:	3b01      	subs	r3, #1
 8004338:	b29a      	uxth	r2, r3
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004342:	b29b      	uxth	r3, r3
 8004344:	3b01      	subs	r3, #1
 8004346:	b29a      	uxth	r2, r3
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800434c:	e0b8      	b.n	80044c0 <HAL_I2C_Master_Receive+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800434e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004350:	9300      	str	r3, [sp, #0]
 8004352:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004354:	2200      	movs	r2, #0
 8004356:	4966      	ldr	r1, [pc, #408]	; (80044f0 <HAL_I2C_Master_Receive+0x448>)
 8004358:	68f8      	ldr	r0, [r7, #12]
 800435a:	f000 fa1b 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 800435e:	4603      	mov	r3, r0
 8004360:	2b00      	cmp	r3, #0
 8004362:	d001      	beq.n	8004368 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8004364:	2301      	movs	r3, #1
 8004366:	e0bf      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	68fb      	ldr	r3, [r7, #12]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004376:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004378:	68fb      	ldr	r3, [r7, #12]
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	691a      	ldr	r2, [r3, #16]
 800437e:	68fb      	ldr	r3, [r7, #12]
 8004380:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004382:	b2d2      	uxtb	r2, r2
 8004384:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004386:	68fb      	ldr	r3, [r7, #12]
 8004388:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800438a:	1c5a      	adds	r2, r3, #1
 800438c:	68fb      	ldr	r3, [r7, #12]
 800438e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004394:	3b01      	subs	r3, #1
 8004396:	b29a      	uxth	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043a0:	b29b      	uxth	r3, r3
 80043a2:	3b01      	subs	r3, #1
 80043a4:	b29a      	uxth	r2, r3
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043b0:	2200      	movs	r2, #0
 80043b2:	494f      	ldr	r1, [pc, #316]	; (80044f0 <HAL_I2C_Master_Receive+0x448>)
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f9ed 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d001      	beq.n	80043c4 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 80043c0:	2301      	movs	r3, #1
 80043c2:	e091      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	691a      	ldr	r2, [r3, #16]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043de:	b2d2      	uxtb	r2, r2
 80043e0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80043e6:	1c5a      	adds	r2, r3, #1
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80043f0:	3b01      	subs	r3, #1
 80043f2:	b29a      	uxth	r2, r3
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043fc:	b29b      	uxth	r3, r3
 80043fe:	3b01      	subs	r3, #1
 8004400:	b29a      	uxth	r2, r3
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	691a      	ldr	r2, [r3, #16]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004410:	b2d2      	uxtb	r2, r2
 8004412:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004418:	1c5a      	adds	r2, r3, #1
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004422:	3b01      	subs	r3, #1
 8004424:	b29a      	uxth	r2, r3
 8004426:	68fb      	ldr	r3, [r7, #12]
 8004428:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800442e:	b29b      	uxth	r3, r3
 8004430:	3b01      	subs	r3, #1
 8004432:	b29a      	uxth	r2, r3
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	855a      	strh	r2, [r3, #42]	; 0x2a
 8004438:	e042      	b.n	80044c0 <HAL_I2C_Master_Receive+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800443a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800443c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800443e:	68f8      	ldr	r0, [r7, #12]
 8004440:	f000 fb00 	bl	8004a44 <I2C_WaitOnRXNEFlagUntilTimeout>
 8004444:	4603      	mov	r3, r0
 8004446:	2b00      	cmp	r3, #0
 8004448:	d001      	beq.n	800444e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800444a:	2301      	movs	r3, #1
 800444c:	e04c      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	691a      	ldr	r2, [r3, #16]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004458:	b2d2      	uxtb	r2, r2
 800445a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004460:	1c5a      	adds	r2, r3, #1
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800446a:	3b01      	subs	r3, #1
 800446c:	b29a      	uxth	r2, r3
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004476:	b29b      	uxth	r3, r3
 8004478:	3b01      	subs	r3, #1
 800447a:	b29a      	uxth	r2, r3
 800447c:	68fb      	ldr	r3, [r7, #12]
 800447e:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	695b      	ldr	r3, [r3, #20]
 8004486:	f003 0304 	and.w	r3, r3, #4
 800448a:	2b04      	cmp	r3, #4
 800448c:	d118      	bne.n	80044c0 <HAL_I2C_Master_Receive+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	691a      	ldr	r2, [r3, #16]
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004498:	b2d2      	uxtb	r2, r2
 800449a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a0:	1c5a      	adds	r2, r3, #1
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044aa:	3b01      	subs	r3, #1
 80044ac:	b29a      	uxth	r2, r3
 80044ae:	68fb      	ldr	r3, [r7, #12]
 80044b0:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80044b2:	68fb      	ldr	r3, [r7, #12]
 80044b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	3b01      	subs	r3, #1
 80044ba:	b29a      	uxth	r2, r3
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	f47f aec2 	bne.w	800424e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2220      	movs	r2, #32
 80044ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80044d2:	68fb      	ldr	r3, [r7, #12]
 80044d4:	2200      	movs	r2, #0
 80044d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	2200      	movs	r2, #0
 80044de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 80044e2:	2300      	movs	r3, #0
 80044e4:	e000      	b.n	80044e8 <HAL_I2C_Master_Receive+0x440>
  }
  else
  {
    return HAL_BUSY;
 80044e6:	2302      	movs	r3, #2
  }
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3728      	adds	r7, #40	; 0x28
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}
 80044f0:	00010004 	.word	0x00010004

080044f4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b088      	sub	sp, #32
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	607a      	str	r2, [r7, #4]
 80044fe:	603b      	str	r3, [r7, #0]
 8004500:	460b      	mov	r3, r1
 8004502:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800450a:	697b      	ldr	r3, [r7, #20]
 800450c:	2b08      	cmp	r3, #8
 800450e:	d006      	beq.n	800451e <I2C_MasterRequestWrite+0x2a>
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	2b01      	cmp	r3, #1
 8004514:	d003      	beq.n	800451e <I2C_MasterRequestWrite+0x2a>
 8004516:	697b      	ldr	r3, [r7, #20]
 8004518:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800451c:	d108      	bne.n	8004530 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800452c:	601a      	str	r2, [r3, #0]
 800452e:	e00b      	b.n	8004548 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004534:	2b12      	cmp	r3, #18
 8004536:	d107      	bne.n	8004548 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004538:	68fb      	ldr	r3, [r7, #12]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	681a      	ldr	r2, [r3, #0]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004546:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	9300      	str	r3, [sp, #0]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	2200      	movs	r2, #0
 8004550:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004554:	68f8      	ldr	r0, [r7, #12]
 8004556:	f000 f91d 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 800455a:	4603      	mov	r3, r0
 800455c:	2b00      	cmp	r3, #0
 800455e:	d00d      	beq.n	800457c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800456a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800456e:	d103      	bne.n	8004578 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004570:	68fb      	ldr	r3, [r7, #12]
 8004572:	f44f 7200 	mov.w	r2, #512	; 0x200
 8004576:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8004578:	2303      	movs	r3, #3
 800457a:	e035      	b.n	80045e8 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	691b      	ldr	r3, [r3, #16]
 8004580:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004584:	d108      	bne.n	8004598 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004586:	897b      	ldrh	r3, [r7, #10]
 8004588:	b2db      	uxtb	r3, r3
 800458a:	461a      	mov	r2, r3
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004594:	611a      	str	r2, [r3, #16]
 8004596:	e01b      	b.n	80045d0 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004598:	897b      	ldrh	r3, [r7, #10]
 800459a:	11db      	asrs	r3, r3, #7
 800459c:	b2db      	uxtb	r3, r3
 800459e:	f003 0306 	and.w	r3, r3, #6
 80045a2:	b2db      	uxtb	r3, r3
 80045a4:	f063 030f 	orn	r3, r3, #15
 80045a8:	b2da      	uxtb	r2, r3
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	687a      	ldr	r2, [r7, #4]
 80045b4:	490e      	ldr	r1, [pc, #56]	; (80045f0 <I2C_MasterRequestWrite+0xfc>)
 80045b6:	68f8      	ldr	r0, [r7, #12]
 80045b8:	f000 f943 	bl	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045bc:	4603      	mov	r3, r0
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d001      	beq.n	80045c6 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80045c2:	2301      	movs	r3, #1
 80045c4:	e010      	b.n	80045e8 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80045c6:	897b      	ldrh	r3, [r7, #10]
 80045c8:	b2da      	uxtb	r2, r3
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	687a      	ldr	r2, [r7, #4]
 80045d4:	4907      	ldr	r1, [pc, #28]	; (80045f4 <I2C_MasterRequestWrite+0x100>)
 80045d6:	68f8      	ldr	r0, [r7, #12]
 80045d8:	f000 f933 	bl	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80045dc:	4603      	mov	r3, r0
 80045de:	2b00      	cmp	r3, #0
 80045e0:	d001      	beq.n	80045e6 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 80045e2:	2301      	movs	r3, #1
 80045e4:	e000      	b.n	80045e8 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 80045e6:	2300      	movs	r3, #0
}
 80045e8:	4618      	mov	r0, r3
 80045ea:	3718      	adds	r7, #24
 80045ec:	46bd      	mov	sp, r7
 80045ee:	bd80      	pop	{r7, pc}
 80045f0:	00010008 	.word	0x00010008
 80045f4:	00010002 	.word	0x00010002

080045f8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80045f8:	b580      	push	{r7, lr}
 80045fa:	b088      	sub	sp, #32
 80045fc:	af02      	add	r7, sp, #8
 80045fe:	60f8      	str	r0, [r7, #12]
 8004600:	607a      	str	r2, [r7, #4]
 8004602:	603b      	str	r3, [r7, #0]
 8004604:	460b      	mov	r3, r1
 8004606:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800460c:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	681b      	ldr	r3, [r3, #0]
 8004612:	681a      	ldr	r2, [r3, #0]
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800461c:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 800461e:	697b      	ldr	r3, [r7, #20]
 8004620:	2b08      	cmp	r3, #8
 8004622:	d006      	beq.n	8004632 <I2C_MasterRequestRead+0x3a>
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	2b01      	cmp	r3, #1
 8004628:	d003      	beq.n	8004632 <I2C_MasterRequestRead+0x3a>
 800462a:	697b      	ldr	r3, [r7, #20]
 800462c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004630:	d108      	bne.n	8004644 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004632:	68fb      	ldr	r3, [r7, #12]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	681a      	ldr	r2, [r3, #0]
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004640:	601a      	str	r2, [r3, #0]
 8004642:	e00b      	b.n	800465c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004648:	2b11      	cmp	r3, #17
 800464a:	d107      	bne.n	800465c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	681a      	ldr	r2, [r3, #0]
 8004652:	68fb      	ldr	r3, [r7, #12]
 8004654:	681b      	ldr	r3, [r3, #0]
 8004656:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800465a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	9300      	str	r3, [sp, #0]
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	2200      	movs	r2, #0
 8004664:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8004668:	68f8      	ldr	r0, [r7, #12]
 800466a:	f000 f893 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 800466e:	4603      	mov	r3, r0
 8004670:	2b00      	cmp	r3, #0
 8004672:	d00d      	beq.n	8004690 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800467e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004682:	d103      	bne.n	800468c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	f44f 7200 	mov.w	r2, #512	; 0x200
 800468a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800468c:	2303      	movs	r3, #3
 800468e:	e079      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	691b      	ldr	r3, [r3, #16]
 8004694:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004698:	d108      	bne.n	80046ac <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800469a:	897b      	ldrh	r3, [r7, #10]
 800469c:	b2db      	uxtb	r3, r3
 800469e:	f043 0301 	orr.w	r3, r3, #1
 80046a2:	b2da      	uxtb	r2, r3
 80046a4:	68fb      	ldr	r3, [r7, #12]
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	611a      	str	r2, [r3, #16]
 80046aa:	e05f      	b.n	800476c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80046ac:	897b      	ldrh	r3, [r7, #10]
 80046ae:	11db      	asrs	r3, r3, #7
 80046b0:	b2db      	uxtb	r3, r3
 80046b2:	f003 0306 	and.w	r3, r3, #6
 80046b6:	b2db      	uxtb	r3, r3
 80046b8:	f063 030f 	orn	r3, r3, #15
 80046bc:	b2da      	uxtb	r2, r3
 80046be:	68fb      	ldr	r3, [r7, #12]
 80046c0:	681b      	ldr	r3, [r3, #0]
 80046c2:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80046c4:	683b      	ldr	r3, [r7, #0]
 80046c6:	687a      	ldr	r2, [r7, #4]
 80046c8:	4930      	ldr	r1, [pc, #192]	; (800478c <I2C_MasterRequestRead+0x194>)
 80046ca:	68f8      	ldr	r0, [r7, #12]
 80046cc:	f000 f8b9 	bl	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046d0:	4603      	mov	r3, r0
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	d001      	beq.n	80046da <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 80046d6:	2301      	movs	r3, #1
 80046d8:	e054      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80046da:	897b      	ldrh	r3, [r7, #10]
 80046dc:	b2da      	uxtb	r2, r3
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	4929      	ldr	r1, [pc, #164]	; (8004790 <I2C_MasterRequestRead+0x198>)
 80046ea:	68f8      	ldr	r0, [r7, #12]
 80046ec:	f000 f8a9 	bl	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80046f0:	4603      	mov	r3, r0
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d001      	beq.n	80046fa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	e044      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80046fa:	2300      	movs	r3, #0
 80046fc:	613b      	str	r3, [r7, #16]
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	695b      	ldr	r3, [r3, #20]
 8004704:	613b      	str	r3, [r7, #16]
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	699b      	ldr	r3, [r3, #24]
 800470c:	613b      	str	r3, [r7, #16]
 800470e:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	681b      	ldr	r3, [r3, #0]
 8004714:	681a      	ldr	r2, [r3, #0]
 8004716:	68fb      	ldr	r3, [r7, #12]
 8004718:	681b      	ldr	r3, [r3, #0]
 800471a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800471e:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004720:	683b      	ldr	r3, [r7, #0]
 8004722:	9300      	str	r3, [sp, #0]
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	2200      	movs	r2, #0
 8004728:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800472c:	68f8      	ldr	r0, [r7, #12]
 800472e:	f000 f831 	bl	8004794 <I2C_WaitOnFlagUntilTimeout>
 8004732:	4603      	mov	r3, r0
 8004734:	2b00      	cmp	r3, #0
 8004736:	d00d      	beq.n	8004754 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004738:	68fb      	ldr	r3, [r7, #12]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	681b      	ldr	r3, [r3, #0]
 800473e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004742:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004746:	d103      	bne.n	8004750 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800474e:	641a      	str	r2, [r3, #64]	; 0x40
      }
      return HAL_TIMEOUT;
 8004750:	2303      	movs	r3, #3
 8004752:	e017      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004754:	897b      	ldrh	r3, [r7, #10]
 8004756:	11db      	asrs	r3, r3, #7
 8004758:	b2db      	uxtb	r3, r3
 800475a:	f003 0306 	and.w	r3, r3, #6
 800475e:	b2db      	uxtb	r3, r3
 8004760:	f063 030e 	orn	r3, r3, #14
 8004764:	b2da      	uxtb	r2, r3
 8004766:	68fb      	ldr	r3, [r7, #12]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800476c:	683b      	ldr	r3, [r7, #0]
 800476e:	687a      	ldr	r2, [r7, #4]
 8004770:	4907      	ldr	r1, [pc, #28]	; (8004790 <I2C_MasterRequestRead+0x198>)
 8004772:	68f8      	ldr	r0, [r7, #12]
 8004774:	f000 f865 	bl	8004842 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004778:	4603      	mov	r3, r0
 800477a:	2b00      	cmp	r3, #0
 800477c:	d001      	beq.n	8004782 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800477e:	2301      	movs	r3, #1
 8004780:	e000      	b.n	8004784 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004782:	2300      	movs	r3, #0
}
 8004784:	4618      	mov	r0, r3
 8004786:	3718      	adds	r7, #24
 8004788:	46bd      	mov	sp, r7
 800478a:	bd80      	pop	{r7, pc}
 800478c:	00010008 	.word	0x00010008
 8004790:	00010002 	.word	0x00010002

08004794 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004794:	b580      	push	{r7, lr}
 8004796:	b084      	sub	sp, #16
 8004798:	af00      	add	r7, sp, #0
 800479a:	60f8      	str	r0, [r7, #12]
 800479c:	60b9      	str	r1, [r7, #8]
 800479e:	603b      	str	r3, [r7, #0]
 80047a0:	4613      	mov	r3, r2
 80047a2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047a4:	e025      	b.n	80047f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80047a6:	683b      	ldr	r3, [r7, #0]
 80047a8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80047ac:	d021      	beq.n	80047f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047ae:	f7fe fb93 	bl	8002ed8 <HAL_GetTick>
 80047b2:	4602      	mov	r2, r0
 80047b4:	69bb      	ldr	r3, [r7, #24]
 80047b6:	1ad3      	subs	r3, r2, r3
 80047b8:	683a      	ldr	r2, [r7, #0]
 80047ba:	429a      	cmp	r2, r3
 80047bc:	d302      	bcc.n	80047c4 <I2C_WaitOnFlagUntilTimeout+0x30>
 80047be:	683b      	ldr	r3, [r7, #0]
 80047c0:	2b00      	cmp	r3, #0
 80047c2:	d116      	bne.n	80047f2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2200      	movs	r2, #0
 80047c8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 80047ca:	68fb      	ldr	r3, [r7, #12]
 80047cc:	2220      	movs	r2, #32
 80047ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	2200      	movs	r2, #0
 80047d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80047da:	68fb      	ldr	r3, [r7, #12]
 80047dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047de:	f043 0220 	orr.w	r2, r3, #32
 80047e2:	68fb      	ldr	r3, [r7, #12]
 80047e4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80047e6:	68fb      	ldr	r3, [r7, #12]
 80047e8:	2200      	movs	r2, #0
 80047ea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80047ee:	2301      	movs	r3, #1
 80047f0:	e023      	b.n	800483a <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80047f2:	68bb      	ldr	r3, [r7, #8]
 80047f4:	0c1b      	lsrs	r3, r3, #16
 80047f6:	b2db      	uxtb	r3, r3
 80047f8:	2b01      	cmp	r3, #1
 80047fa:	d10d      	bne.n	8004818 <I2C_WaitOnFlagUntilTimeout+0x84>
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	695b      	ldr	r3, [r3, #20]
 8004802:	43da      	mvns	r2, r3
 8004804:	68bb      	ldr	r3, [r7, #8]
 8004806:	4013      	ands	r3, r2
 8004808:	b29b      	uxth	r3, r3
 800480a:	2b00      	cmp	r3, #0
 800480c:	bf0c      	ite	eq
 800480e:	2301      	moveq	r3, #1
 8004810:	2300      	movne	r3, #0
 8004812:	b2db      	uxtb	r3, r3
 8004814:	461a      	mov	r2, r3
 8004816:	e00c      	b.n	8004832 <I2C_WaitOnFlagUntilTimeout+0x9e>
 8004818:	68fb      	ldr	r3, [r7, #12]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	699b      	ldr	r3, [r3, #24]
 800481e:	43da      	mvns	r2, r3
 8004820:	68bb      	ldr	r3, [r7, #8]
 8004822:	4013      	ands	r3, r2
 8004824:	b29b      	uxth	r3, r3
 8004826:	2b00      	cmp	r3, #0
 8004828:	bf0c      	ite	eq
 800482a:	2301      	moveq	r3, #1
 800482c:	2300      	movne	r3, #0
 800482e:	b2db      	uxtb	r3, r3
 8004830:	461a      	mov	r2, r3
 8004832:	79fb      	ldrb	r3, [r7, #7]
 8004834:	429a      	cmp	r2, r3
 8004836:	d0b6      	beq.n	80047a6 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004838:	2300      	movs	r3, #0
}
 800483a:	4618      	mov	r0, r3
 800483c:	3710      	adds	r7, #16
 800483e:	46bd      	mov	sp, r7
 8004840:	bd80      	pop	{r7, pc}

08004842 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004842:	b580      	push	{r7, lr}
 8004844:	b084      	sub	sp, #16
 8004846:	af00      	add	r7, sp, #0
 8004848:	60f8      	str	r0, [r7, #12]
 800484a:	60b9      	str	r1, [r7, #8]
 800484c:	607a      	str	r2, [r7, #4]
 800484e:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004850:	e051      	b.n	80048f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004852:	68fb      	ldr	r3, [r7, #12]
 8004854:	681b      	ldr	r3, [r3, #0]
 8004856:	695b      	ldr	r3, [r3, #20]
 8004858:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800485c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004860:	d123      	bne.n	80048aa <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	681b      	ldr	r3, [r3, #0]
 8004866:	681a      	ldr	r2, [r3, #0]
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	681b      	ldr	r3, [r3, #0]
 800486c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004870:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	681b      	ldr	r3, [r3, #0]
 8004876:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800487a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	2200      	movs	r2, #0
 8004880:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	2220      	movs	r2, #32
 8004886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	2200      	movs	r2, #0
 800488e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004896:	f043 0204 	orr.w	r2, r3, #4
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2200      	movs	r2, #0
 80048a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 80048a6:	2301      	movs	r3, #1
 80048a8:	e046      	b.n	8004938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80048b0:	d021      	beq.n	80048f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048b2:	f7fe fb11 	bl	8002ed8 <HAL_GetTick>
 80048b6:	4602      	mov	r2, r0
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	1ad3      	subs	r3, r2, r3
 80048bc:	687a      	ldr	r2, [r7, #4]
 80048be:	429a      	cmp	r2, r3
 80048c0:	d302      	bcc.n	80048c8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d116      	bne.n	80048f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80048ce:	68fb      	ldr	r3, [r7, #12]
 80048d0:	2220      	movs	r2, #32
 80048d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	2200      	movs	r2, #0
 80048da:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e2:	f043 0220 	orr.w	r2, r3, #32
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	e020      	b.n	8004938 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80048f6:	68bb      	ldr	r3, [r7, #8]
 80048f8:	0c1b      	lsrs	r3, r3, #16
 80048fa:	b2db      	uxtb	r3, r3
 80048fc:	2b01      	cmp	r3, #1
 80048fe:	d10c      	bne.n	800491a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 8004900:	68fb      	ldr	r3, [r7, #12]
 8004902:	681b      	ldr	r3, [r3, #0]
 8004904:	695b      	ldr	r3, [r3, #20]
 8004906:	43da      	mvns	r2, r3
 8004908:	68bb      	ldr	r3, [r7, #8]
 800490a:	4013      	ands	r3, r2
 800490c:	b29b      	uxth	r3, r3
 800490e:	2b00      	cmp	r3, #0
 8004910:	bf14      	ite	ne
 8004912:	2301      	movne	r3, #1
 8004914:	2300      	moveq	r3, #0
 8004916:	b2db      	uxtb	r3, r3
 8004918:	e00b      	b.n	8004932 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 800491a:	68fb      	ldr	r3, [r7, #12]
 800491c:	681b      	ldr	r3, [r3, #0]
 800491e:	699b      	ldr	r3, [r3, #24]
 8004920:	43da      	mvns	r2, r3
 8004922:	68bb      	ldr	r3, [r7, #8]
 8004924:	4013      	ands	r3, r2
 8004926:	b29b      	uxth	r3, r3
 8004928:	2b00      	cmp	r3, #0
 800492a:	bf14      	ite	ne
 800492c:	2301      	movne	r3, #1
 800492e:	2300      	moveq	r3, #0
 8004930:	b2db      	uxtb	r3, r3
 8004932:	2b00      	cmp	r3, #0
 8004934:	d18d      	bne.n	8004852 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 8004936:	2300      	movs	r3, #0
}
 8004938:	4618      	mov	r0, r3
 800493a:	3710      	adds	r7, #16
 800493c:	46bd      	mov	sp, r7
 800493e:	bd80      	pop	{r7, pc}

08004940 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b084      	sub	sp, #16
 8004944:	af00      	add	r7, sp, #0
 8004946:	60f8      	str	r0, [r7, #12]
 8004948:	60b9      	str	r1, [r7, #8]
 800494a:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800494c:	e02d      	b.n	80049aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 800494e:	68f8      	ldr	r0, [r7, #12]
 8004950:	f000 f8ce 	bl	8004af0 <I2C_IsAcknowledgeFailed>
 8004954:	4603      	mov	r3, r0
 8004956:	2b00      	cmp	r3, #0
 8004958:	d001      	beq.n	800495e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800495a:	2301      	movs	r3, #1
 800495c:	e02d      	b.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800495e:	68bb      	ldr	r3, [r7, #8]
 8004960:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8004964:	d021      	beq.n	80049aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004966:	f7fe fab7 	bl	8002ed8 <HAL_GetTick>
 800496a:	4602      	mov	r2, r0
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	1ad3      	subs	r3, r2, r3
 8004970:	68ba      	ldr	r2, [r7, #8]
 8004972:	429a      	cmp	r2, r3
 8004974:	d302      	bcc.n	800497c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	2b00      	cmp	r3, #0
 800497a:	d116      	bne.n	80049aa <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800497c:	68fb      	ldr	r3, [r7, #12]
 800497e:	2200      	movs	r2, #0
 8004980:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	2220      	movs	r2, #32
 8004986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	2200      	movs	r2, #0
 800498e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004992:	68fb      	ldr	r3, [r7, #12]
 8004994:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004996:	f043 0220 	orr.w	r2, r3, #32
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800499e:	68fb      	ldr	r3, [r7, #12]
 80049a0:	2200      	movs	r2, #0
 80049a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80049a6:	2301      	movs	r3, #1
 80049a8:	e007      	b.n	80049ba <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	695b      	ldr	r3, [r3, #20]
 80049b0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049b4:	2b80      	cmp	r3, #128	; 0x80
 80049b6:	d1ca      	bne.n	800494e <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80049b8:	2300      	movs	r3, #0
}
 80049ba:	4618      	mov	r0, r3
 80049bc:	3710      	adds	r7, #16
 80049be:	46bd      	mov	sp, r7
 80049c0:	bd80      	pop	{r7, pc}

080049c2 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80049c2:	b580      	push	{r7, lr}
 80049c4:	b084      	sub	sp, #16
 80049c6:	af00      	add	r7, sp, #0
 80049c8:	60f8      	str	r0, [r7, #12]
 80049ca:	60b9      	str	r1, [r7, #8]
 80049cc:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80049ce:	e02d      	b.n	8004a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80049d0:	68f8      	ldr	r0, [r7, #12]
 80049d2:	f000 f88d 	bl	8004af0 <I2C_IsAcknowledgeFailed>
 80049d6:	4603      	mov	r3, r0
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d001      	beq.n	80049e0 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80049dc:	2301      	movs	r3, #1
 80049de:	e02d      	b.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80049e0:	68bb      	ldr	r3, [r7, #8]
 80049e2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80049e6:	d021      	beq.n	8004a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80049e8:	f7fe fa76 	bl	8002ed8 <HAL_GetTick>
 80049ec:	4602      	mov	r2, r0
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	1ad3      	subs	r3, r2, r3
 80049f2:	68ba      	ldr	r2, [r7, #8]
 80049f4:	429a      	cmp	r2, r3
 80049f6:	d302      	bcc.n	80049fe <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80049f8:	68bb      	ldr	r3, [r7, #8]
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d116      	bne.n	8004a2c <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80049fe:	68fb      	ldr	r3, [r7, #12]
 8004a00:	2200      	movs	r2, #0
 8004a02:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	2200      	movs	r2, #0
 8004a10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004a14:	68fb      	ldr	r3, [r7, #12]
 8004a16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a18:	f043 0220 	orr.w	r2, r3, #32
 8004a1c:	68fb      	ldr	r3, [r7, #12]
 8004a1e:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	2200      	movs	r2, #0
 8004a24:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004a28:	2301      	movs	r3, #1
 8004a2a:	e007      	b.n	8004a3c <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	681b      	ldr	r3, [r3, #0]
 8004a30:	695b      	ldr	r3, [r3, #20]
 8004a32:	f003 0304 	and.w	r3, r3, #4
 8004a36:	2b04      	cmp	r3, #4
 8004a38:	d1ca      	bne.n	80049d0 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004a3a:	2300      	movs	r3, #0
}
 8004a3c:	4618      	mov	r0, r3
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004a50:	e042      	b.n	8004ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	695b      	ldr	r3, [r3, #20]
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b10      	cmp	r3, #16
 8004a5e:	d119      	bne.n	8004a94 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8004a60:	68fb      	ldr	r3, [r7, #12]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	f06f 0210 	mvn.w	r2, #16
 8004a68:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004a6a:	68fb      	ldr	r3, [r7, #12]
 8004a6c:	2200      	movs	r2, #0
 8004a6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	2220      	movs	r2, #32
 8004a74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004a78:	68fb      	ldr	r3, [r7, #12]
 8004a7a:	2200      	movs	r2, #0
 8004a7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8004a80:	68fb      	ldr	r3, [r7, #12]
 8004a82:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004a84:	68fb      	ldr	r3, [r7, #12]
 8004a86:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004a88:	68fb      	ldr	r3, [r7, #12]
 8004a8a:	2200      	movs	r2, #0
 8004a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004a90:	2301      	movs	r3, #1
 8004a92:	e029      	b.n	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004a94:	f7fe fa20 	bl	8002ed8 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	68ba      	ldr	r2, [r7, #8]
 8004aa0:	429a      	cmp	r2, r3
 8004aa2:	d302      	bcc.n	8004aaa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004aa4:	68bb      	ldr	r3, [r7, #8]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d116      	bne.n	8004ad8 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8004aaa:	68fb      	ldr	r3, [r7, #12]
 8004aac:	2200      	movs	r2, #0
 8004aae:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004ab0:	68fb      	ldr	r3, [r7, #12]
 8004ab2:	2220      	movs	r2, #32
 8004ab4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	2200      	movs	r2, #0
 8004abc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004ac0:	68fb      	ldr	r3, [r7, #12]
 8004ac2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ac4:	f043 0220 	orr.w	r2, r3, #32
 8004ac8:	68fb      	ldr	r3, [r7, #12]
 8004aca:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	2200      	movs	r2, #0
 8004ad0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8004ad4:	2301      	movs	r3, #1
 8004ad6:	e007      	b.n	8004ae8 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004ad8:	68fb      	ldr	r3, [r7, #12]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	695b      	ldr	r3, [r3, #20]
 8004ade:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004ae2:	2b40      	cmp	r3, #64	; 0x40
 8004ae4:	d1b5      	bne.n	8004a52 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8004ae6:	2300      	movs	r3, #0
}
 8004ae8:	4618      	mov	r0, r3
 8004aea:	3710      	adds	r7, #16
 8004aec:	46bd      	mov	sp, r7
 8004aee:	bd80      	pop	{r7, pc}

08004af0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004af0:	b480      	push	{r7}
 8004af2:	b083      	sub	sp, #12
 8004af4:	af00      	add	r7, sp, #0
 8004af6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	695b      	ldr	r3, [r3, #20]
 8004afe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004b02:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b06:	d11b      	bne.n	8004b40 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b10:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	2200      	movs	r2, #0
 8004b16:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	2220      	movs	r2, #32
 8004b1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2200      	movs	r2, #0
 8004b24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b2c:	f043 0204 	orr.w	r2, r3, #4
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e000      	b.n	8004b42 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8004b40:	2300      	movs	r3, #0
}
 8004b42:	4618      	mov	r0, r3
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b086      	sub	sp, #24
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d101      	bne.n	8004b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e267      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	f003 0301 	and.w	r3, r3, #1
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d075      	beq.n	8004c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b6e:	4b88      	ldr	r3, [pc, #544]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004b70:	689b      	ldr	r3, [r3, #8]
 8004b72:	f003 030c 	and.w	r3, r3, #12
 8004b76:	2b04      	cmp	r3, #4
 8004b78:	d00c      	beq.n	8004b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b7a:	4b85      	ldr	r3, [pc, #532]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004b7c:	689b      	ldr	r3, [r3, #8]
 8004b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004b82:	2b08      	cmp	r3, #8
 8004b84:	d112      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004b86:	4b82      	ldr	r3, [pc, #520]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004b88:	685b      	ldr	r3, [r3, #4]
 8004b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004b92:	d10b      	bne.n	8004bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004b94:	4b7e      	ldr	r3, [pc, #504]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d05b      	beq.n	8004c58 <HAL_RCC_OscConfig+0x108>
 8004ba0:	687b      	ldr	r3, [r7, #4]
 8004ba2:	685b      	ldr	r3, [r3, #4]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d157      	bne.n	8004c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e242      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	685b      	ldr	r3, [r3, #4]
 8004bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004bb4:	d106      	bne.n	8004bc4 <HAL_RCC_OscConfig+0x74>
 8004bb6:	4b76      	ldr	r3, [pc, #472]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4a75      	ldr	r2, [pc, #468]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004bc0:	6013      	str	r3, [r2, #0]
 8004bc2:	e01d      	b.n	8004c00 <HAL_RCC_OscConfig+0xb0>
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	685b      	ldr	r3, [r3, #4]
 8004bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004bcc:	d10c      	bne.n	8004be8 <HAL_RCC_OscConfig+0x98>
 8004bce:	4b70      	ldr	r3, [pc, #448]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bd0:	681b      	ldr	r3, [r3, #0]
 8004bd2:	4a6f      	ldr	r2, [pc, #444]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004bd8:	6013      	str	r3, [r2, #0]
 8004bda:	4b6d      	ldr	r3, [pc, #436]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	4a6c      	ldr	r2, [pc, #432]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004be4:	6013      	str	r3, [r2, #0]
 8004be6:	e00b      	b.n	8004c00 <HAL_RCC_OscConfig+0xb0>
 8004be8:	4b69      	ldr	r3, [pc, #420]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bea:	681b      	ldr	r3, [r3, #0]
 8004bec:	4a68      	ldr	r2, [pc, #416]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004bf2:	6013      	str	r3, [r2, #0]
 8004bf4:	4b66      	ldr	r3, [pc, #408]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	4a65      	ldr	r2, [pc, #404]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	685b      	ldr	r3, [r3, #4]
 8004c04:	2b00      	cmp	r3, #0
 8004c06:	d013      	beq.n	8004c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c08:	f7fe f966 	bl	8002ed8 <HAL_GetTick>
 8004c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c0e:	e008      	b.n	8004c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c10:	f7fe f962 	bl	8002ed8 <HAL_GetTick>
 8004c14:	4602      	mov	r2, r0
 8004c16:	693b      	ldr	r3, [r7, #16]
 8004c18:	1ad3      	subs	r3, r2, r3
 8004c1a:	2b64      	cmp	r3, #100	; 0x64
 8004c1c:	d901      	bls.n	8004c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004c1e:	2303      	movs	r3, #3
 8004c20:	e207      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004c22:	4b5b      	ldr	r3, [pc, #364]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c2a:	2b00      	cmp	r3, #0
 8004c2c:	d0f0      	beq.n	8004c10 <HAL_RCC_OscConfig+0xc0>
 8004c2e:	e014      	b.n	8004c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c30:	f7fe f952 	bl	8002ed8 <HAL_GetTick>
 8004c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c36:	e008      	b.n	8004c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004c38:	f7fe f94e 	bl	8002ed8 <HAL_GetTick>
 8004c3c:	4602      	mov	r2, r0
 8004c3e:	693b      	ldr	r3, [r7, #16]
 8004c40:	1ad3      	subs	r3, r2, r3
 8004c42:	2b64      	cmp	r3, #100	; 0x64
 8004c44:	d901      	bls.n	8004c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004c46:	2303      	movs	r3, #3
 8004c48:	e1f3      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004c4a:	4b51      	ldr	r3, [pc, #324]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c4c:	681b      	ldr	r3, [r3, #0]
 8004c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004c52:	2b00      	cmp	r3, #0
 8004c54:	d1f0      	bne.n	8004c38 <HAL_RCC_OscConfig+0xe8>
 8004c56:	e000      	b.n	8004c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	f003 0302 	and.w	r3, r3, #2
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d063      	beq.n	8004d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c66:	4b4a      	ldr	r3, [pc, #296]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c68:	689b      	ldr	r3, [r3, #8]
 8004c6a:	f003 030c 	and.w	r3, r3, #12
 8004c6e:	2b00      	cmp	r3, #0
 8004c70:	d00b      	beq.n	8004c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c72:	4b47      	ldr	r3, [pc, #284]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c74:	689b      	ldr	r3, [r3, #8]
 8004c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004c7a:	2b08      	cmp	r3, #8
 8004c7c:	d11c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004c7e:	4b44      	ldr	r3, [pc, #272]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004c86:	2b00      	cmp	r3, #0
 8004c88:	d116      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004c8a:	4b41      	ldr	r3, [pc, #260]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	f003 0302 	and.w	r3, r3, #2
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d005      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x152>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	68db      	ldr	r3, [r3, #12]
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d001      	beq.n	8004ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004c9e:	2301      	movs	r3, #1
 8004ca0:	e1c7      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ca2:	4b3b      	ldr	r3, [pc, #236]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004ca4:	681b      	ldr	r3, [r3, #0]
 8004ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	691b      	ldr	r3, [r3, #16]
 8004cae:	00db      	lsls	r3, r3, #3
 8004cb0:	4937      	ldr	r1, [pc, #220]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004cb2:	4313      	orrs	r3, r2
 8004cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004cb6:	e03a      	b.n	8004d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004cb8:	687b      	ldr	r3, [r7, #4]
 8004cba:	68db      	ldr	r3, [r3, #12]
 8004cbc:	2b00      	cmp	r3, #0
 8004cbe:	d020      	beq.n	8004d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004cc0:	4b34      	ldr	r3, [pc, #208]	; (8004d94 <HAL_RCC_OscConfig+0x244>)
 8004cc2:	2201      	movs	r2, #1
 8004cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004cc6:	f7fe f907 	bl	8002ed8 <HAL_GetTick>
 8004cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ccc:	e008      	b.n	8004ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004cce:	f7fe f903 	bl	8002ed8 <HAL_GetTick>
 8004cd2:	4602      	mov	r2, r0
 8004cd4:	693b      	ldr	r3, [r7, #16]
 8004cd6:	1ad3      	subs	r3, r2, r3
 8004cd8:	2b02      	cmp	r3, #2
 8004cda:	d901      	bls.n	8004ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004cdc:	2303      	movs	r3, #3
 8004cde:	e1a8      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004ce0:	4b2b      	ldr	r3, [pc, #172]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	f003 0302 	and.w	r3, r3, #2
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d0f0      	beq.n	8004cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004cec:	4b28      	ldr	r3, [pc, #160]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	691b      	ldr	r3, [r3, #16]
 8004cf8:	00db      	lsls	r3, r3, #3
 8004cfa:	4925      	ldr	r1, [pc, #148]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004cfc:	4313      	orrs	r3, r2
 8004cfe:	600b      	str	r3, [r1, #0]
 8004d00:	e015      	b.n	8004d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004d02:	4b24      	ldr	r3, [pc, #144]	; (8004d94 <HAL_RCC_OscConfig+0x244>)
 8004d04:	2200      	movs	r2, #0
 8004d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004d08:	f7fe f8e6 	bl	8002ed8 <HAL_GetTick>
 8004d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d0e:	e008      	b.n	8004d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004d10:	f7fe f8e2 	bl	8002ed8 <HAL_GetTick>
 8004d14:	4602      	mov	r2, r0
 8004d16:	693b      	ldr	r3, [r7, #16]
 8004d18:	1ad3      	subs	r3, r2, r3
 8004d1a:	2b02      	cmp	r3, #2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e187      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004d22:	4b1b      	ldr	r3, [pc, #108]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1f0      	bne.n	8004d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	f003 0308 	and.w	r3, r3, #8
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d036      	beq.n	8004da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	695b      	ldr	r3, [r3, #20]
 8004d3e:	2b00      	cmp	r3, #0
 8004d40:	d016      	beq.n	8004d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004d42:	4b15      	ldr	r3, [pc, #84]	; (8004d98 <HAL_RCC_OscConfig+0x248>)
 8004d44:	2201      	movs	r2, #1
 8004d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004d48:	f7fe f8c6 	bl	8002ed8 <HAL_GetTick>
 8004d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d4e:	e008      	b.n	8004d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d50:	f7fe f8c2 	bl	8002ed8 <HAL_GetTick>
 8004d54:	4602      	mov	r2, r0
 8004d56:	693b      	ldr	r3, [r7, #16]
 8004d58:	1ad3      	subs	r3, r2, r3
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d901      	bls.n	8004d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004d5e:	2303      	movs	r3, #3
 8004d60:	e167      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004d62:	4b0b      	ldr	r3, [pc, #44]	; (8004d90 <HAL_RCC_OscConfig+0x240>)
 8004d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004d66:	f003 0302 	and.w	r3, r3, #2
 8004d6a:	2b00      	cmp	r3, #0
 8004d6c:	d0f0      	beq.n	8004d50 <HAL_RCC_OscConfig+0x200>
 8004d6e:	e01b      	b.n	8004da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004d70:	4b09      	ldr	r3, [pc, #36]	; (8004d98 <HAL_RCC_OscConfig+0x248>)
 8004d72:	2200      	movs	r2, #0
 8004d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d76:	f7fe f8af 	bl	8002ed8 <HAL_GetTick>
 8004d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d7c:	e00e      	b.n	8004d9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004d7e:	f7fe f8ab 	bl	8002ed8 <HAL_GetTick>
 8004d82:	4602      	mov	r2, r0
 8004d84:	693b      	ldr	r3, [r7, #16]
 8004d86:	1ad3      	subs	r3, r2, r3
 8004d88:	2b02      	cmp	r3, #2
 8004d8a:	d907      	bls.n	8004d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004d8c:	2303      	movs	r3, #3
 8004d8e:	e150      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
 8004d90:	40023800 	.word	0x40023800
 8004d94:	42470000 	.word	0x42470000
 8004d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004d9c:	4b88      	ldr	r3, [pc, #544]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004da0:	f003 0302 	and.w	r3, r3, #2
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	d1ea      	bne.n	8004d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f003 0304 	and.w	r3, r3, #4
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	f000 8097 	beq.w	8004ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004db6:	2300      	movs	r3, #0
 8004db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004dba:	4b81      	ldr	r3, [pc, #516]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dc2:	2b00      	cmp	r3, #0
 8004dc4:	d10f      	bne.n	8004de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004dc6:	2300      	movs	r3, #0
 8004dc8:	60bb      	str	r3, [r7, #8]
 8004dca:	4b7d      	ldr	r3, [pc, #500]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dce:	4a7c      	ldr	r2, [pc, #496]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8004dd6:	4b7a      	ldr	r3, [pc, #488]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004dde:	60bb      	str	r3, [r7, #8]
 8004de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004de2:	2301      	movs	r3, #1
 8004de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004de6:	4b77      	ldr	r3, [pc, #476]	; (8004fc4 <HAL_RCC_OscConfig+0x474>)
 8004de8:	681b      	ldr	r3, [r3, #0]
 8004dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004dee:	2b00      	cmp	r3, #0
 8004df0:	d118      	bne.n	8004e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004df2:	4b74      	ldr	r3, [pc, #464]	; (8004fc4 <HAL_RCC_OscConfig+0x474>)
 8004df4:	681b      	ldr	r3, [r3, #0]
 8004df6:	4a73      	ldr	r2, [pc, #460]	; (8004fc4 <HAL_RCC_OscConfig+0x474>)
 8004df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004dfe:	f7fe f86b 	bl	8002ed8 <HAL_GetTick>
 8004e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e04:	e008      	b.n	8004e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004e06:	f7fe f867 	bl	8002ed8 <HAL_GetTick>
 8004e0a:	4602      	mov	r2, r0
 8004e0c:	693b      	ldr	r3, [r7, #16]
 8004e0e:	1ad3      	subs	r3, r2, r3
 8004e10:	2b02      	cmp	r3, #2
 8004e12:	d901      	bls.n	8004e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004e14:	2303      	movs	r3, #3
 8004e16:	e10c      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004e18:	4b6a      	ldr	r3, [pc, #424]	; (8004fc4 <HAL_RCC_OscConfig+0x474>)
 8004e1a:	681b      	ldr	r3, [r3, #0]
 8004e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004e20:	2b00      	cmp	r3, #0
 8004e22:	d0f0      	beq.n	8004e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	689b      	ldr	r3, [r3, #8]
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d106      	bne.n	8004e3a <HAL_RCC_OscConfig+0x2ea>
 8004e2c:	4b64      	ldr	r3, [pc, #400]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e30:	4a63      	ldr	r2, [pc, #396]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e32:	f043 0301 	orr.w	r3, r3, #1
 8004e36:	6713      	str	r3, [r2, #112]	; 0x70
 8004e38:	e01c      	b.n	8004e74 <HAL_RCC_OscConfig+0x324>
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	689b      	ldr	r3, [r3, #8]
 8004e3e:	2b05      	cmp	r3, #5
 8004e40:	d10c      	bne.n	8004e5c <HAL_RCC_OscConfig+0x30c>
 8004e42:	4b5f      	ldr	r3, [pc, #380]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e46:	4a5e      	ldr	r2, [pc, #376]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e48:	f043 0304 	orr.w	r3, r3, #4
 8004e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8004e4e:	4b5c      	ldr	r3, [pc, #368]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e52:	4a5b      	ldr	r2, [pc, #364]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e54:	f043 0301 	orr.w	r3, r3, #1
 8004e58:	6713      	str	r3, [r2, #112]	; 0x70
 8004e5a:	e00b      	b.n	8004e74 <HAL_RCC_OscConfig+0x324>
 8004e5c:	4b58      	ldr	r3, [pc, #352]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e60:	4a57      	ldr	r2, [pc, #348]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e62:	f023 0301 	bic.w	r3, r3, #1
 8004e66:	6713      	str	r3, [r2, #112]	; 0x70
 8004e68:	4b55      	ldr	r3, [pc, #340]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e6c:	4a54      	ldr	r2, [pc, #336]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e6e:	f023 0304 	bic.w	r3, r3, #4
 8004e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004e74:	687b      	ldr	r3, [r7, #4]
 8004e76:	689b      	ldr	r3, [r3, #8]
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d015      	beq.n	8004ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004e7c:	f7fe f82c 	bl	8002ed8 <HAL_GetTick>
 8004e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e82:	e00a      	b.n	8004e9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004e84:	f7fe f828 	bl	8002ed8 <HAL_GetTick>
 8004e88:	4602      	mov	r2, r0
 8004e8a:	693b      	ldr	r3, [r7, #16]
 8004e8c:	1ad3      	subs	r3, r2, r3
 8004e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004e92:	4293      	cmp	r3, r2
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e0cb      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004e9a:	4b49      	ldr	r3, [pc, #292]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004e9e:	f003 0302 	and.w	r3, r3, #2
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0ee      	beq.n	8004e84 <HAL_RCC_OscConfig+0x334>
 8004ea6:	e014      	b.n	8004ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ea8:	f7fe f816 	bl	8002ed8 <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004eae:	e00a      	b.n	8004ec6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8004eb0:	f7fe f812 	bl	8002ed8 <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8004ebe:	4293      	cmp	r3, r2
 8004ec0:	d901      	bls.n	8004ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004ec2:	2303      	movs	r3, #3
 8004ec4:	e0b5      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004ec6:	4b3e      	ldr	r3, [pc, #248]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004eca:	f003 0302 	and.w	r3, r3, #2
 8004ece:	2b00      	cmp	r3, #0
 8004ed0:	d1ee      	bne.n	8004eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004ed2:	7dfb      	ldrb	r3, [r7, #23]
 8004ed4:	2b01      	cmp	r3, #1
 8004ed6:	d105      	bne.n	8004ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004ed8:	4b39      	ldr	r3, [pc, #228]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004edc:	4a38      	ldr	r2, [pc, #224]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004ee2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	699b      	ldr	r3, [r3, #24]
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	f000 80a1 	beq.w	8005030 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004eee:	4b34      	ldr	r3, [pc, #208]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004ef0:	689b      	ldr	r3, [r3, #8]
 8004ef2:	f003 030c 	and.w	r3, r3, #12
 8004ef6:	2b08      	cmp	r3, #8
 8004ef8:	d05c      	beq.n	8004fb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	699b      	ldr	r3, [r3, #24]
 8004efe:	2b02      	cmp	r3, #2
 8004f00:	d141      	bne.n	8004f86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f02:	4b31      	ldr	r3, [pc, #196]	; (8004fc8 <HAL_RCC_OscConfig+0x478>)
 8004f04:	2200      	movs	r2, #0
 8004f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f08:	f7fd ffe6 	bl	8002ed8 <HAL_GetTick>
 8004f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f0e:	e008      	b.n	8004f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f10:	f7fd ffe2 	bl	8002ed8 <HAL_GetTick>
 8004f14:	4602      	mov	r2, r0
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	1ad3      	subs	r3, r2, r3
 8004f1a:	2b02      	cmp	r3, #2
 8004f1c:	d901      	bls.n	8004f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004f1e:	2303      	movs	r3, #3
 8004f20:	e087      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f22:	4b27      	ldr	r3, [pc, #156]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004f24:	681b      	ldr	r3, [r3, #0]
 8004f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f2a:	2b00      	cmp	r3, #0
 8004f2c:	d1f0      	bne.n	8004f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	69da      	ldr	r2, [r3, #28]
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6a1b      	ldr	r3, [r3, #32]
 8004f36:	431a      	orrs	r2, r3
 8004f38:	687b      	ldr	r3, [r7, #4]
 8004f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f3c:	019b      	lsls	r3, r3, #6
 8004f3e:	431a      	orrs	r2, r3
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004f44:	085b      	lsrs	r3, r3, #1
 8004f46:	3b01      	subs	r3, #1
 8004f48:	041b      	lsls	r3, r3, #16
 8004f4a:	431a      	orrs	r2, r3
 8004f4c:	687b      	ldr	r3, [r7, #4]
 8004f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f50:	061b      	lsls	r3, r3, #24
 8004f52:	491b      	ldr	r1, [pc, #108]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004f54:	4313      	orrs	r3, r2
 8004f56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004f58:	4b1b      	ldr	r3, [pc, #108]	; (8004fc8 <HAL_RCC_OscConfig+0x478>)
 8004f5a:	2201      	movs	r2, #1
 8004f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f5e:	f7fd ffbb 	bl	8002ed8 <HAL_GetTick>
 8004f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f64:	e008      	b.n	8004f78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f66:	f7fd ffb7 	bl	8002ed8 <HAL_GetTick>
 8004f6a:	4602      	mov	r2, r0
 8004f6c:	693b      	ldr	r3, [r7, #16]
 8004f6e:	1ad3      	subs	r3, r2, r3
 8004f70:	2b02      	cmp	r3, #2
 8004f72:	d901      	bls.n	8004f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004f74:	2303      	movs	r3, #3
 8004f76:	e05c      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f78:	4b11      	ldr	r3, [pc, #68]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004f80:	2b00      	cmp	r3, #0
 8004f82:	d0f0      	beq.n	8004f66 <HAL_RCC_OscConfig+0x416>
 8004f84:	e054      	b.n	8005030 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004f86:	4b10      	ldr	r3, [pc, #64]	; (8004fc8 <HAL_RCC_OscConfig+0x478>)
 8004f88:	2200      	movs	r2, #0
 8004f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f8c:	f7fd ffa4 	bl	8002ed8 <HAL_GetTick>
 8004f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004f92:	e008      	b.n	8004fa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8004f94:	f7fd ffa0 	bl	8002ed8 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	2b02      	cmp	r3, #2
 8004fa0:	d901      	bls.n	8004fa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004fa2:	2303      	movs	r3, #3
 8004fa4:	e045      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004fa6:	4b06      	ldr	r3, [pc, #24]	; (8004fc0 <HAL_RCC_OscConfig+0x470>)
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d1f0      	bne.n	8004f94 <HAL_RCC_OscConfig+0x444>
 8004fb2:	e03d      	b.n	8005030 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	699b      	ldr	r3, [r3, #24]
 8004fb8:	2b01      	cmp	r3, #1
 8004fba:	d107      	bne.n	8004fcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	e038      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
 8004fc0:	40023800 	.word	0x40023800
 8004fc4:	40007000 	.word	0x40007000
 8004fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004fcc:	4b1b      	ldr	r3, [pc, #108]	; (800503c <HAL_RCC_OscConfig+0x4ec>)
 8004fce:	685b      	ldr	r3, [r3, #4]
 8004fd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	699b      	ldr	r3, [r3, #24]
 8004fd6:	2b01      	cmp	r3, #1
 8004fd8:	d028      	beq.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004fda:	68fb      	ldr	r3, [r7, #12]
 8004fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8004fe0:	687b      	ldr	r3, [r7, #4]
 8004fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004fe4:	429a      	cmp	r2, r3
 8004fe6:	d121      	bne.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004ff2:	429a      	cmp	r2, r3
 8004ff4:	d11a      	bne.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004ff6:	68fa      	ldr	r2, [r7, #12]
 8004ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8004ffc:	4013      	ands	r3, r2
 8004ffe:	687a      	ldr	r2, [r7, #4]
 8005000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8005002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005004:	4293      	cmp	r3, r2
 8005006:	d111      	bne.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005008:	68fb      	ldr	r3, [r7, #12]
 800500a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005012:	085b      	lsrs	r3, r3, #1
 8005014:	3b01      	subs	r3, #1
 8005016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005018:	429a      	cmp	r2, r3
 800501a:	d107      	bne.n	800502c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005028:	429a      	cmp	r2, r3
 800502a:	d001      	beq.n	8005030 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800502c:	2301      	movs	r3, #1
 800502e:	e000      	b.n	8005032 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005030:	2300      	movs	r3, #0
}
 8005032:	4618      	mov	r0, r3
 8005034:	3718      	adds	r7, #24
 8005036:	46bd      	mov	sp, r7
 8005038:	bd80      	pop	{r7, pc}
 800503a:	bf00      	nop
 800503c:	40023800 	.word	0x40023800

08005040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005040:	b580      	push	{r7, lr}
 8005042:	b084      	sub	sp, #16
 8005044:	af00      	add	r7, sp, #0
 8005046:	6078      	str	r0, [r7, #4]
 8005048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	2b00      	cmp	r3, #0
 800504e:	d101      	bne.n	8005054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005050:	2301      	movs	r3, #1
 8005052:	e0cc      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005054:	4b68      	ldr	r3, [pc, #416]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005056:	681b      	ldr	r3, [r3, #0]
 8005058:	f003 0307 	and.w	r3, r3, #7
 800505c:	683a      	ldr	r2, [r7, #0]
 800505e:	429a      	cmp	r2, r3
 8005060:	d90c      	bls.n	800507c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005062:	4b65      	ldr	r3, [pc, #404]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005064:	683a      	ldr	r2, [r7, #0]
 8005066:	b2d2      	uxtb	r2, r2
 8005068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800506a:	4b63      	ldr	r3, [pc, #396]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	f003 0307 	and.w	r3, r3, #7
 8005072:	683a      	ldr	r2, [r7, #0]
 8005074:	429a      	cmp	r2, r3
 8005076:	d001      	beq.n	800507c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005078:	2301      	movs	r3, #1
 800507a:	e0b8      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800507c:	687b      	ldr	r3, [r7, #4]
 800507e:	681b      	ldr	r3, [r3, #0]
 8005080:	f003 0302 	and.w	r3, r3, #2
 8005084:	2b00      	cmp	r3, #0
 8005086:	d020      	beq.n	80050ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	681b      	ldr	r3, [r3, #0]
 800508c:	f003 0304 	and.w	r3, r3, #4
 8005090:	2b00      	cmp	r3, #0
 8005092:	d005      	beq.n	80050a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005094:	4b59      	ldr	r3, [pc, #356]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005096:	689b      	ldr	r3, [r3, #8]
 8005098:	4a58      	ldr	r2, [pc, #352]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 800509a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800509e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	681b      	ldr	r3, [r3, #0]
 80050a4:	f003 0308 	and.w	r3, r3, #8
 80050a8:	2b00      	cmp	r3, #0
 80050aa:	d005      	beq.n	80050b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80050ac:	4b53      	ldr	r3, [pc, #332]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ae:	689b      	ldr	r3, [r3, #8]
 80050b0:	4a52      	ldr	r2, [pc, #328]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80050b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80050b8:	4b50      	ldr	r3, [pc, #320]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80050c0:	687b      	ldr	r3, [r7, #4]
 80050c2:	689b      	ldr	r3, [r3, #8]
 80050c4:	494d      	ldr	r1, [pc, #308]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050c6:	4313      	orrs	r3, r2
 80050c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80050ca:	687b      	ldr	r3, [r7, #4]
 80050cc:	681b      	ldr	r3, [r3, #0]
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d044      	beq.n	8005160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	685b      	ldr	r3, [r3, #4]
 80050da:	2b01      	cmp	r3, #1
 80050dc:	d107      	bne.n	80050ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80050de:	4b47      	ldr	r3, [pc, #284]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e6:	2b00      	cmp	r3, #0
 80050e8:	d119      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80050ea:	2301      	movs	r3, #1
 80050ec:	e07f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	2b02      	cmp	r3, #2
 80050f4:	d003      	beq.n	80050fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80050fa:	2b03      	cmp	r3, #3
 80050fc:	d107      	bne.n	800510e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80050fe:	4b3f      	ldr	r3, [pc, #252]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005106:	2b00      	cmp	r3, #0
 8005108:	d109      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800510a:	2301      	movs	r3, #1
 800510c:	e06f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800510e:	4b3b      	ldr	r3, [pc, #236]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f003 0302 	and.w	r3, r3, #2
 8005116:	2b00      	cmp	r3, #0
 8005118:	d101      	bne.n	800511e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800511a:	2301      	movs	r3, #1
 800511c:	e067      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800511e:	4b37      	ldr	r3, [pc, #220]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005120:	689b      	ldr	r3, [r3, #8]
 8005122:	f023 0203 	bic.w	r2, r3, #3
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	685b      	ldr	r3, [r3, #4]
 800512a:	4934      	ldr	r1, [pc, #208]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 800512c:	4313      	orrs	r3, r2
 800512e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005130:	f7fd fed2 	bl	8002ed8 <HAL_GetTick>
 8005134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005136:	e00a      	b.n	800514e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005138:	f7fd fece 	bl	8002ed8 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	f241 3288 	movw	r2, #5000	; 0x1388
 8005146:	4293      	cmp	r3, r2
 8005148:	d901      	bls.n	800514e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800514a:	2303      	movs	r3, #3
 800514c:	e04f      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800514e:	4b2b      	ldr	r3, [pc, #172]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005150:	689b      	ldr	r3, [r3, #8]
 8005152:	f003 020c 	and.w	r2, r3, #12
 8005156:	687b      	ldr	r3, [r7, #4]
 8005158:	685b      	ldr	r3, [r3, #4]
 800515a:	009b      	lsls	r3, r3, #2
 800515c:	429a      	cmp	r2, r3
 800515e:	d1eb      	bne.n	8005138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005160:	4b25      	ldr	r3, [pc, #148]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005162:	681b      	ldr	r3, [r3, #0]
 8005164:	f003 0307 	and.w	r3, r3, #7
 8005168:	683a      	ldr	r2, [r7, #0]
 800516a:	429a      	cmp	r2, r3
 800516c:	d20c      	bcs.n	8005188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800516e:	4b22      	ldr	r3, [pc, #136]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005170:	683a      	ldr	r2, [r7, #0]
 8005172:	b2d2      	uxtb	r2, r2
 8005174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005176:	4b20      	ldr	r3, [pc, #128]	; (80051f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f003 0307 	and.w	r3, r3, #7
 800517e:	683a      	ldr	r2, [r7, #0]
 8005180:	429a      	cmp	r2, r3
 8005182:	d001      	beq.n	8005188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005184:	2301      	movs	r3, #1
 8005186:	e032      	b.n	80051ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f003 0304 	and.w	r3, r3, #4
 8005190:	2b00      	cmp	r3, #0
 8005192:	d008      	beq.n	80051a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005194:	4b19      	ldr	r3, [pc, #100]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 8005196:	689b      	ldr	r3, [r3, #8]
 8005198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800519c:	687b      	ldr	r3, [r7, #4]
 800519e:	68db      	ldr	r3, [r3, #12]
 80051a0:	4916      	ldr	r1, [pc, #88]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051a2:	4313      	orrs	r3, r2
 80051a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80051a6:	687b      	ldr	r3, [r7, #4]
 80051a8:	681b      	ldr	r3, [r3, #0]
 80051aa:	f003 0308 	and.w	r3, r3, #8
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d009      	beq.n	80051c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80051b2:	4b12      	ldr	r3, [pc, #72]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051b4:	689b      	ldr	r3, [r3, #8]
 80051b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	691b      	ldr	r3, [r3, #16]
 80051be:	00db      	lsls	r3, r3, #3
 80051c0:	490e      	ldr	r1, [pc, #56]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051c2:	4313      	orrs	r3, r2
 80051c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80051c6:	f000 f821 	bl	800520c <HAL_RCC_GetSysClockFreq>
 80051ca:	4602      	mov	r2, r0
 80051cc:	4b0b      	ldr	r3, [pc, #44]	; (80051fc <HAL_RCC_ClockConfig+0x1bc>)
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	091b      	lsrs	r3, r3, #4
 80051d2:	f003 030f 	and.w	r3, r3, #15
 80051d6:	490a      	ldr	r1, [pc, #40]	; (8005200 <HAL_RCC_ClockConfig+0x1c0>)
 80051d8:	5ccb      	ldrb	r3, [r1, r3]
 80051da:	fa22 f303 	lsr.w	r3, r2, r3
 80051de:	4a09      	ldr	r2, [pc, #36]	; (8005204 <HAL_RCC_ClockConfig+0x1c4>)
 80051e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80051e2:	4b09      	ldr	r3, [pc, #36]	; (8005208 <HAL_RCC_ClockConfig+0x1c8>)
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	4618      	mov	r0, r3
 80051e8:	f7fd fe32 	bl	8002e50 <HAL_InitTick>

  return HAL_OK;
 80051ec:	2300      	movs	r3, #0
}
 80051ee:	4618      	mov	r0, r3
 80051f0:	3710      	adds	r7, #16
 80051f2:	46bd      	mov	sp, r7
 80051f4:	bd80      	pop	{r7, pc}
 80051f6:	bf00      	nop
 80051f8:	40023c00 	.word	0x40023c00
 80051fc:	40023800 	.word	0x40023800
 8005200:	08007a00 	.word	0x08007a00
 8005204:	20001444 	.word	0x20001444
 8005208:	20001448 	.word	0x20001448

0800520c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800520c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005210:	b094      	sub	sp, #80	; 0x50
 8005212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005214:	2300      	movs	r3, #0
 8005216:	647b      	str	r3, [r7, #68]	; 0x44
 8005218:	2300      	movs	r3, #0
 800521a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800521c:	2300      	movs	r3, #0
 800521e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0U;
 8005220:	2300      	movs	r3, #0
 8005222:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005224:	4b79      	ldr	r3, [pc, #484]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 8005226:	689b      	ldr	r3, [r3, #8]
 8005228:	f003 030c 	and.w	r3, r3, #12
 800522c:	2b08      	cmp	r3, #8
 800522e:	d00d      	beq.n	800524c <HAL_RCC_GetSysClockFreq+0x40>
 8005230:	2b08      	cmp	r3, #8
 8005232:	f200 80e1 	bhi.w	80053f8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005236:	2b00      	cmp	r3, #0
 8005238:	d002      	beq.n	8005240 <HAL_RCC_GetSysClockFreq+0x34>
 800523a:	2b04      	cmp	r3, #4
 800523c:	d003      	beq.n	8005246 <HAL_RCC_GetSysClockFreq+0x3a>
 800523e:	e0db      	b.n	80053f8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005240:	4b73      	ldr	r3, [pc, #460]	; (8005410 <HAL_RCC_GetSysClockFreq+0x204>)
 8005242:	64bb      	str	r3, [r7, #72]	; 0x48
       break;
 8005244:	e0db      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005246:	4b73      	ldr	r3, [pc, #460]	; (8005414 <HAL_RCC_GetSysClockFreq+0x208>)
 8005248:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 800524a:	e0d8      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800524c:	4b6f      	ldr	r3, [pc, #444]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 800524e:	685b      	ldr	r3, [r3, #4]
 8005250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005254:	647b      	str	r3, [r7, #68]	; 0x44
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005256:	4b6d      	ldr	r3, [pc, #436]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 8005258:	685b      	ldr	r3, [r3, #4]
 800525a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800525e:	2b00      	cmp	r3, #0
 8005260:	d063      	beq.n	800532a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005262:	4b6a      	ldr	r3, [pc, #424]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 8005264:	685b      	ldr	r3, [r3, #4]
 8005266:	099b      	lsrs	r3, r3, #6
 8005268:	2200      	movs	r2, #0
 800526a:	63bb      	str	r3, [r7, #56]	; 0x38
 800526c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800526e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005270:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005274:	633b      	str	r3, [r7, #48]	; 0x30
 8005276:	2300      	movs	r3, #0
 8005278:	637b      	str	r3, [r7, #52]	; 0x34
 800527a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 800527e:	4622      	mov	r2, r4
 8005280:	462b      	mov	r3, r5
 8005282:	f04f 0000 	mov.w	r0, #0
 8005286:	f04f 0100 	mov.w	r1, #0
 800528a:	0159      	lsls	r1, r3, #5
 800528c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005290:	0150      	lsls	r0, r2, #5
 8005292:	4602      	mov	r2, r0
 8005294:	460b      	mov	r3, r1
 8005296:	4621      	mov	r1, r4
 8005298:	1a51      	subs	r1, r2, r1
 800529a:	6139      	str	r1, [r7, #16]
 800529c:	4629      	mov	r1, r5
 800529e:	eb63 0301 	sbc.w	r3, r3, r1
 80052a2:	617b      	str	r3, [r7, #20]
 80052a4:	f04f 0200 	mov.w	r2, #0
 80052a8:	f04f 0300 	mov.w	r3, #0
 80052ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80052b0:	4659      	mov	r1, fp
 80052b2:	018b      	lsls	r3, r1, #6
 80052b4:	4651      	mov	r1, sl
 80052b6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80052ba:	4651      	mov	r1, sl
 80052bc:	018a      	lsls	r2, r1, #6
 80052be:	4651      	mov	r1, sl
 80052c0:	ebb2 0801 	subs.w	r8, r2, r1
 80052c4:	4659      	mov	r1, fp
 80052c6:	eb63 0901 	sbc.w	r9, r3, r1
 80052ca:	f04f 0200 	mov.w	r2, #0
 80052ce:	f04f 0300 	mov.w	r3, #0
 80052d2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80052d6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80052da:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80052de:	4690      	mov	r8, r2
 80052e0:	4699      	mov	r9, r3
 80052e2:	4623      	mov	r3, r4
 80052e4:	eb18 0303 	adds.w	r3, r8, r3
 80052e8:	60bb      	str	r3, [r7, #8]
 80052ea:	462b      	mov	r3, r5
 80052ec:	eb49 0303 	adc.w	r3, r9, r3
 80052f0:	60fb      	str	r3, [r7, #12]
 80052f2:	f04f 0200 	mov.w	r2, #0
 80052f6:	f04f 0300 	mov.w	r3, #0
 80052fa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80052fe:	4629      	mov	r1, r5
 8005300:	024b      	lsls	r3, r1, #9
 8005302:	4621      	mov	r1, r4
 8005304:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005308:	4621      	mov	r1, r4
 800530a:	024a      	lsls	r2, r1, #9
 800530c:	4610      	mov	r0, r2
 800530e:	4619      	mov	r1, r3
 8005310:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005312:	2200      	movs	r2, #0
 8005314:	62bb      	str	r3, [r7, #40]	; 0x28
 8005316:	62fa      	str	r2, [r7, #44]	; 0x2c
 8005318:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800531c:	f7fa ff62 	bl	80001e4 <__aeabi_uldivmod>
 8005320:	4602      	mov	r2, r0
 8005322:	460b      	mov	r3, r1
 8005324:	4613      	mov	r3, r2
 8005326:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005328:	e058      	b.n	80053dc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800532a:	4b38      	ldr	r3, [pc, #224]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 800532c:	685b      	ldr	r3, [r3, #4]
 800532e:	099b      	lsrs	r3, r3, #6
 8005330:	2200      	movs	r2, #0
 8005332:	4618      	mov	r0, r3
 8005334:	4611      	mov	r1, r2
 8005336:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800533a:	623b      	str	r3, [r7, #32]
 800533c:	2300      	movs	r3, #0
 800533e:	627b      	str	r3, [r7, #36]	; 0x24
 8005340:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005344:	4642      	mov	r2, r8
 8005346:	464b      	mov	r3, r9
 8005348:	f04f 0000 	mov.w	r0, #0
 800534c:	f04f 0100 	mov.w	r1, #0
 8005350:	0159      	lsls	r1, r3, #5
 8005352:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005356:	0150      	lsls	r0, r2, #5
 8005358:	4602      	mov	r2, r0
 800535a:	460b      	mov	r3, r1
 800535c:	4641      	mov	r1, r8
 800535e:	ebb2 0a01 	subs.w	sl, r2, r1
 8005362:	4649      	mov	r1, r9
 8005364:	eb63 0b01 	sbc.w	fp, r3, r1
 8005368:	f04f 0200 	mov.w	r2, #0
 800536c:	f04f 0300 	mov.w	r3, #0
 8005370:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005374:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8005378:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800537c:	ebb2 040a 	subs.w	r4, r2, sl
 8005380:	eb63 050b 	sbc.w	r5, r3, fp
 8005384:	f04f 0200 	mov.w	r2, #0
 8005388:	f04f 0300 	mov.w	r3, #0
 800538c:	00eb      	lsls	r3, r5, #3
 800538e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005392:	00e2      	lsls	r2, r4, #3
 8005394:	4614      	mov	r4, r2
 8005396:	461d      	mov	r5, r3
 8005398:	4643      	mov	r3, r8
 800539a:	18e3      	adds	r3, r4, r3
 800539c:	603b      	str	r3, [r7, #0]
 800539e:	464b      	mov	r3, r9
 80053a0:	eb45 0303 	adc.w	r3, r5, r3
 80053a4:	607b      	str	r3, [r7, #4]
 80053a6:	f04f 0200 	mov.w	r2, #0
 80053aa:	f04f 0300 	mov.w	r3, #0
 80053ae:	e9d7 4500 	ldrd	r4, r5, [r7]
 80053b2:	4629      	mov	r1, r5
 80053b4:	028b      	lsls	r3, r1, #10
 80053b6:	4621      	mov	r1, r4
 80053b8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80053bc:	4621      	mov	r1, r4
 80053be:	028a      	lsls	r2, r1, #10
 80053c0:	4610      	mov	r0, r2
 80053c2:	4619      	mov	r1, r3
 80053c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80053c6:	2200      	movs	r2, #0
 80053c8:	61bb      	str	r3, [r7, #24]
 80053ca:	61fa      	str	r2, [r7, #28]
 80053cc:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80053d0:	f7fa ff08 	bl	80001e4 <__aeabi_uldivmod>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4613      	mov	r3, r2
 80053da:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80053dc:	4b0b      	ldr	r3, [pc, #44]	; (800540c <HAL_RCC_GetSysClockFreq+0x200>)
 80053de:	685b      	ldr	r3, [r3, #4]
 80053e0:	0c1b      	lsrs	r3, r3, #16
 80053e2:	f003 0303 	and.w	r3, r3, #3
 80053e6:	3301      	adds	r3, #1
 80053e8:	005b      	lsls	r3, r3, #1
 80053ea:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco/pllp;
 80053ec:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80053ee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80053f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80053f4:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053f6:	e002      	b.n	80053fe <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80053f8:	4b05      	ldr	r3, [pc, #20]	; (8005410 <HAL_RCC_GetSysClockFreq+0x204>)
 80053fa:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 80053fc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80053fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8005400:	4618      	mov	r0, r3
 8005402:	3750      	adds	r7, #80	; 0x50
 8005404:	46bd      	mov	sp, r7
 8005406:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800540a:	bf00      	nop
 800540c:	40023800 	.word	0x40023800
 8005410:	00f42400 	.word	0x00f42400
 8005414:	007a1200 	.word	0x007a1200

08005418 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005418:	b480      	push	{r7}
 800541a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800541c:	4b03      	ldr	r3, [pc, #12]	; (800542c <HAL_RCC_GetHCLKFreq+0x14>)
 800541e:	681b      	ldr	r3, [r3, #0]
}
 8005420:	4618      	mov	r0, r3
 8005422:	46bd      	mov	sp, r7
 8005424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005428:	4770      	bx	lr
 800542a:	bf00      	nop
 800542c:	20001444 	.word	0x20001444

08005430 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005430:	b580      	push	{r7, lr}
 8005432:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005434:	f7ff fff0 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005438:	4602      	mov	r2, r0
 800543a:	4b05      	ldr	r3, [pc, #20]	; (8005450 <HAL_RCC_GetPCLK1Freq+0x20>)
 800543c:	689b      	ldr	r3, [r3, #8]
 800543e:	0a9b      	lsrs	r3, r3, #10
 8005440:	f003 0307 	and.w	r3, r3, #7
 8005444:	4903      	ldr	r1, [pc, #12]	; (8005454 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005446:	5ccb      	ldrb	r3, [r1, r3]
 8005448:	fa22 f303 	lsr.w	r3, r2, r3
}
 800544c:	4618      	mov	r0, r3
 800544e:	bd80      	pop	{r7, pc}
 8005450:	40023800 	.word	0x40023800
 8005454:	08007a10 	.word	0x08007a10

08005458 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005458:	b580      	push	{r7, lr}
 800545a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800545c:	f7ff ffdc 	bl	8005418 <HAL_RCC_GetHCLKFreq>
 8005460:	4602      	mov	r2, r0
 8005462:	4b05      	ldr	r3, [pc, #20]	; (8005478 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005464:	689b      	ldr	r3, [r3, #8]
 8005466:	0b5b      	lsrs	r3, r3, #13
 8005468:	f003 0307 	and.w	r3, r3, #7
 800546c:	4903      	ldr	r1, [pc, #12]	; (800547c <HAL_RCC_GetPCLK2Freq+0x24>)
 800546e:	5ccb      	ldrb	r3, [r1, r3]
 8005470:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005474:	4618      	mov	r0, r3
 8005476:	bd80      	pop	{r7, pc}
 8005478:	40023800 	.word	0x40023800
 800547c:	08007a10 	.word	0x08007a10

08005480 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005480:	b580      	push	{r7, lr}
 8005482:	b082      	sub	sp, #8
 8005484:	af00      	add	r7, sp, #0
 8005486:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	2b00      	cmp	r3, #0
 800548c:	d101      	bne.n	8005492 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800548e:	2301      	movs	r3, #1
 8005490:	e07b      	b.n	800558a <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005496:	2b00      	cmp	r3, #0
 8005498:	d108      	bne.n	80054ac <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800549a:	687b      	ldr	r3, [r7, #4]
 800549c:	685b      	ldr	r3, [r3, #4]
 800549e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80054a2:	d009      	beq.n	80054b8 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	2200      	movs	r2, #0
 80054a8:	61da      	str	r2, [r3, #28]
 80054aa:	e005      	b.n	80054b8 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	2200      	movs	r2, #0
 80054b0:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	2200      	movs	r2, #0
 80054b6:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	2200      	movs	r2, #0
 80054bc:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80054c4:	b2db      	uxtb	r3, r3
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d106      	bne.n	80054d8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	2200      	movs	r2, #0
 80054ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80054d2:	6878      	ldr	r0, [r7, #4]
 80054d4:	f7fd fa14 	bl	8002900 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	2202      	movs	r2, #2
 80054dc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	681a      	ldr	r2, [r3, #0]
 80054e6:	687b      	ldr	r3, [r7, #4]
 80054e8:	681b      	ldr	r3, [r3, #0]
 80054ea:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80054ee:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80054f0:	687b      	ldr	r3, [r7, #4]
 80054f2:	685b      	ldr	r3, [r3, #4]
 80054f4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 80054f8:	687b      	ldr	r3, [r7, #4]
 80054fa:	689b      	ldr	r3, [r3, #8]
 80054fc:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005500:	431a      	orrs	r2, r3
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	68db      	ldr	r3, [r3, #12]
 8005506:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800550a:	431a      	orrs	r2, r3
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	691b      	ldr	r3, [r3, #16]
 8005510:	f003 0302 	and.w	r3, r3, #2
 8005514:	431a      	orrs	r2, r3
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	695b      	ldr	r3, [r3, #20]
 800551a:	f003 0301 	and.w	r3, r3, #1
 800551e:	431a      	orrs	r2, r3
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	699b      	ldr	r3, [r3, #24]
 8005524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005528:	431a      	orrs	r2, r3
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	69db      	ldr	r3, [r3, #28]
 800552e:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005532:	431a      	orrs	r2, r3
 8005534:	687b      	ldr	r3, [r7, #4]
 8005536:	6a1b      	ldr	r3, [r3, #32]
 8005538:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800553c:	ea42 0103 	orr.w	r1, r2, r3
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005544:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	681b      	ldr	r3, [r3, #0]
 800554c:	430a      	orrs	r2, r1
 800554e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	699b      	ldr	r3, [r3, #24]
 8005554:	0c1b      	lsrs	r3, r3, #16
 8005556:	f003 0104 	and.w	r1, r3, #4
 800555a:	687b      	ldr	r3, [r7, #4]
 800555c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555e:	f003 0210 	and.w	r2, r3, #16
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	430a      	orrs	r2, r1
 8005568:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	69da      	ldr	r2, [r3, #28]
 8005570:	687b      	ldr	r3, [r7, #4]
 8005572:	681b      	ldr	r3, [r3, #0]
 8005574:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005578:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	2200      	movs	r2, #0
 800557e:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2201      	movs	r2, #1
 8005584:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8005588:	2300      	movs	r3, #0
}
 800558a:	4618      	mov	r0, r3
 800558c:	3708      	adds	r7, #8
 800558e:	46bd      	mov	sp, r7
 8005590:	bd80      	pop	{r7, pc}

08005592 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005592:	b580      	push	{r7, lr}
 8005594:	b088      	sub	sp, #32
 8005596:	af00      	add	r7, sp, #0
 8005598:	60f8      	str	r0, [r7, #12]
 800559a:	60b9      	str	r1, [r7, #8]
 800559c:	603b      	str	r3, [r7, #0]
 800559e:	4613      	mov	r3, r2
 80055a0:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80055a2:	2300      	movs	r3, #0
 80055a4:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80055a6:	68fb      	ldr	r3, [r7, #12]
 80055a8:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	d101      	bne.n	80055b4 <HAL_SPI_Transmit+0x22>
 80055b0:	2302      	movs	r3, #2
 80055b2:	e126      	b.n	8005802 <HAL_SPI_Transmit+0x270>
 80055b4:	68fb      	ldr	r3, [r7, #12]
 80055b6:	2201      	movs	r2, #1
 80055b8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80055bc:	f7fd fc8c 	bl	8002ed8 <HAL_GetTick>
 80055c0:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 80055c2:	88fb      	ldrh	r3, [r7, #6]
 80055c4:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80055cc:	b2db      	uxtb	r3, r3
 80055ce:	2b01      	cmp	r3, #1
 80055d0:	d002      	beq.n	80055d8 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80055d2:	2302      	movs	r3, #2
 80055d4:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055d6:	e10b      	b.n	80057f0 <HAL_SPI_Transmit+0x25e>
  }

  if ((pData == NULL) || (Size == 0U))
 80055d8:	68bb      	ldr	r3, [r7, #8]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d002      	beq.n	80055e4 <HAL_SPI_Transmit+0x52>
 80055de:	88fb      	ldrh	r3, [r7, #6]
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d102      	bne.n	80055ea <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80055e4:	2301      	movs	r3, #1
 80055e6:	77fb      	strb	r3, [r7, #31]
    goto error;
 80055e8:	e102      	b.n	80057f0 <HAL_SPI_Transmit+0x25e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80055ea:	68fb      	ldr	r3, [r7, #12]
 80055ec:	2203      	movs	r2, #3
 80055ee:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80055f2:	68fb      	ldr	r3, [r7, #12]
 80055f4:	2200      	movs	r2, #0
 80055f6:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80055f8:	68fb      	ldr	r3, [r7, #12]
 80055fa:	68ba      	ldr	r2, [r7, #8]
 80055fc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80055fe:	68fb      	ldr	r3, [r7, #12]
 8005600:	88fa      	ldrh	r2, [r7, #6]
 8005602:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8005604:	68fb      	ldr	r3, [r7, #12]
 8005606:	88fa      	ldrh	r2, [r7, #6]
 8005608:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800560a:	68fb      	ldr	r3, [r7, #12]
 800560c:	2200      	movs	r2, #0
 800560e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	2200      	movs	r2, #0
 8005614:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8005616:	68fb      	ldr	r3, [r7, #12]
 8005618:	2200      	movs	r2, #0
 800561a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800561c:	68fb      	ldr	r3, [r7, #12]
 800561e:	2200      	movs	r2, #0
 8005620:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	2200      	movs	r2, #0
 8005626:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005628:	68fb      	ldr	r3, [r7, #12]
 800562a:	689b      	ldr	r3, [r3, #8]
 800562c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005630:	d10f      	bne.n	8005652 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8005632:	68fb      	ldr	r3, [r7, #12]
 8005634:	681b      	ldr	r3, [r3, #0]
 8005636:	681a      	ldr	r2, [r3, #0]
 8005638:	68fb      	ldr	r3, [r7, #12]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005640:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8005642:	68fb      	ldr	r3, [r7, #12]
 8005644:	681b      	ldr	r3, [r3, #0]
 8005646:	681a      	ldr	r2, [r3, #0]
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005650:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8005652:	68fb      	ldr	r3, [r7, #12]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800565c:	2b40      	cmp	r3, #64	; 0x40
 800565e:	d007      	beq.n	8005670 <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8005660:	68fb      	ldr	r3, [r7, #12]
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	681a      	ldr	r2, [r3, #0]
 8005666:	68fb      	ldr	r3, [r7, #12]
 8005668:	681b      	ldr	r3, [r3, #0]
 800566a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800566e:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8005670:	68fb      	ldr	r3, [r7, #12]
 8005672:	68db      	ldr	r3, [r3, #12]
 8005674:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005678:	d14b      	bne.n	8005712 <HAL_SPI_Transmit+0x180>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	685b      	ldr	r3, [r3, #4]
 800567e:	2b00      	cmp	r3, #0
 8005680:	d002      	beq.n	8005688 <HAL_SPI_Transmit+0xf6>
 8005682:	8afb      	ldrh	r3, [r7, #22]
 8005684:	2b01      	cmp	r3, #1
 8005686:	d13e      	bne.n	8005706 <HAL_SPI_Transmit+0x174>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800568c:	881a      	ldrh	r2, [r3, #0]
 800568e:	68fb      	ldr	r3, [r7, #12]
 8005690:	681b      	ldr	r3, [r3, #0]
 8005692:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8005694:	68fb      	ldr	r3, [r7, #12]
 8005696:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005698:	1c9a      	adds	r2, r3, #2
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800569e:	68fb      	ldr	r3, [r7, #12]
 80056a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056a2:	b29b      	uxth	r3, r3
 80056a4:	3b01      	subs	r3, #1
 80056a6:	b29a      	uxth	r2, r3
 80056a8:	68fb      	ldr	r3, [r7, #12]
 80056aa:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 80056ac:	e02b      	b.n	8005706 <HAL_SPI_Transmit+0x174>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	f003 0302 	and.w	r3, r3, #2
 80056b8:	2b02      	cmp	r3, #2
 80056ba:	d112      	bne.n	80056e2 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056c0:	881a      	ldrh	r2, [r3, #0]
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	681b      	ldr	r3, [r3, #0]
 80056c6:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80056c8:	68fb      	ldr	r3, [r7, #12]
 80056ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80056cc:	1c9a      	adds	r2, r3, #2
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80056d6:	b29b      	uxth	r3, r3
 80056d8:	3b01      	subs	r3, #1
 80056da:	b29a      	uxth	r2, r3
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	86da      	strh	r2, [r3, #54]	; 0x36
 80056e0:	e011      	b.n	8005706 <HAL_SPI_Transmit+0x174>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80056e2:	f7fd fbf9 	bl	8002ed8 <HAL_GetTick>
 80056e6:	4602      	mov	r2, r0
 80056e8:	69bb      	ldr	r3, [r7, #24]
 80056ea:	1ad3      	subs	r3, r2, r3
 80056ec:	683a      	ldr	r2, [r7, #0]
 80056ee:	429a      	cmp	r2, r3
 80056f0:	d803      	bhi.n	80056fa <HAL_SPI_Transmit+0x168>
 80056f2:	683b      	ldr	r3, [r7, #0]
 80056f4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80056f8:	d102      	bne.n	8005700 <HAL_SPI_Transmit+0x16e>
 80056fa:	683b      	ldr	r3, [r7, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d102      	bne.n	8005706 <HAL_SPI_Transmit+0x174>
        {
          errorcode = HAL_TIMEOUT;
 8005700:	2303      	movs	r3, #3
 8005702:	77fb      	strb	r3, [r7, #31]
          goto error;
 8005704:	e074      	b.n	80057f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800570a:	b29b      	uxth	r3, r3
 800570c:	2b00      	cmp	r3, #0
 800570e:	d1ce      	bne.n	80056ae <HAL_SPI_Transmit+0x11c>
 8005710:	e04c      	b.n	80057ac <HAL_SPI_Transmit+0x21a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	2b00      	cmp	r3, #0
 8005718:	d002      	beq.n	8005720 <HAL_SPI_Transmit+0x18e>
 800571a:	8afb      	ldrh	r3, [r7, #22]
 800571c:	2b01      	cmp	r3, #1
 800571e:	d140      	bne.n	80057a2 <HAL_SPI_Transmit+0x210>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	681b      	ldr	r3, [r3, #0]
 8005728:	330c      	adds	r3, #12
 800572a:	7812      	ldrb	r2, [r2, #0]
 800572c:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800572e:	68fb      	ldr	r3, [r7, #12]
 8005730:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005732:	1c5a      	adds	r2, r3, #1
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800573c:	b29b      	uxth	r3, r3
 800573e:	3b01      	subs	r3, #1
 8005740:	b29a      	uxth	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8005746:	e02c      	b.n	80057a2 <HAL_SPI_Transmit+0x210>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8005748:	68fb      	ldr	r3, [r7, #12]
 800574a:	681b      	ldr	r3, [r3, #0]
 800574c:	689b      	ldr	r3, [r3, #8]
 800574e:	f003 0302 	and.w	r3, r3, #2
 8005752:	2b02      	cmp	r3, #2
 8005754:	d113      	bne.n	800577e <HAL_SPI_Transmit+0x1ec>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8005756:	68fb      	ldr	r3, [r7, #12]
 8005758:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800575a:	68fb      	ldr	r3, [r7, #12]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	330c      	adds	r3, #12
 8005760:	7812      	ldrb	r2, [r2, #0]
 8005762:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8005764:	68fb      	ldr	r3, [r7, #12]
 8005766:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	68fb      	ldr	r3, [r7, #12]
 800576c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	68fb      	ldr	r3, [r7, #12]
 800577a:	86da      	strh	r2, [r3, #54]	; 0x36
 800577c:	e011      	b.n	80057a2 <HAL_SPI_Transmit+0x210>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800577e:	f7fd fbab 	bl	8002ed8 <HAL_GetTick>
 8005782:	4602      	mov	r2, r0
 8005784:	69bb      	ldr	r3, [r7, #24]
 8005786:	1ad3      	subs	r3, r2, r3
 8005788:	683a      	ldr	r2, [r7, #0]
 800578a:	429a      	cmp	r2, r3
 800578c:	d803      	bhi.n	8005796 <HAL_SPI_Transmit+0x204>
 800578e:	683b      	ldr	r3, [r7, #0]
 8005790:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8005794:	d102      	bne.n	800579c <HAL_SPI_Transmit+0x20a>
 8005796:	683b      	ldr	r3, [r7, #0]
 8005798:	2b00      	cmp	r3, #0
 800579a:	d102      	bne.n	80057a2 <HAL_SPI_Transmit+0x210>
        {
          errorcode = HAL_TIMEOUT;
 800579c:	2303      	movs	r3, #3
 800579e:	77fb      	strb	r3, [r7, #31]
          goto error;
 80057a0:	e026      	b.n	80057f0 <HAL_SPI_Transmit+0x25e>
    while (hspi->TxXferCount > 0U)
 80057a2:	68fb      	ldr	r3, [r7, #12]
 80057a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80057a6:	b29b      	uxth	r3, r3
 80057a8:	2b00      	cmp	r3, #0
 80057aa:	d1cd      	bne.n	8005748 <HAL_SPI_Transmit+0x1b6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80057ac:	69ba      	ldr	r2, [r7, #24]
 80057ae:	6839      	ldr	r1, [r7, #0]
 80057b0:	68f8      	ldr	r0, [r7, #12]
 80057b2:	f000 f8b3 	bl	800591c <SPI_EndRxTxTransaction>
 80057b6:	4603      	mov	r3, r0
 80057b8:	2b00      	cmp	r3, #0
 80057ba:	d002      	beq.n	80057c2 <HAL_SPI_Transmit+0x230>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80057bc:	68fb      	ldr	r3, [r7, #12]
 80057be:	2220      	movs	r2, #32
 80057c0:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	689b      	ldr	r3, [r3, #8]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d10a      	bne.n	80057e0 <HAL_SPI_Transmit+0x24e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80057ca:	2300      	movs	r3, #0
 80057cc:	613b      	str	r3, [r7, #16]
 80057ce:	68fb      	ldr	r3, [r7, #12]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	68db      	ldr	r3, [r3, #12]
 80057d4:	613b      	str	r3, [r7, #16]
 80057d6:	68fb      	ldr	r3, [r7, #12]
 80057d8:	681b      	ldr	r3, [r3, #0]
 80057da:	689b      	ldr	r3, [r3, #8]
 80057dc:	613b      	str	r3, [r7, #16]
 80057de:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80057e0:	68fb      	ldr	r3, [r7, #12]
 80057e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <HAL_SPI_Transmit+0x25c>
  {
    errorcode = HAL_ERROR;
 80057e8:	2301      	movs	r3, #1
 80057ea:	77fb      	strb	r3, [r7, #31]
 80057ec:	e000      	b.n	80057f0 <HAL_SPI_Transmit+0x25e>
  }

error:
 80057ee:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80057f0:	68fb      	ldr	r3, [r7, #12]
 80057f2:	2201      	movs	r2, #1
 80057f4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80057f8:	68fb      	ldr	r3, [r7, #12]
 80057fa:	2200      	movs	r2, #0
 80057fc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8005800:	7ffb      	ldrb	r3, [r7, #31]
}
 8005802:	4618      	mov	r0, r3
 8005804:	3720      	adds	r7, #32
 8005806:	46bd      	mov	sp, r7
 8005808:	bd80      	pop	{r7, pc}
	...

0800580c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800580c:	b580      	push	{r7, lr}
 800580e:	b088      	sub	sp, #32
 8005810:	af00      	add	r7, sp, #0
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	603b      	str	r3, [r7, #0]
 8005818:	4613      	mov	r3, r2
 800581a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800581c:	f7fd fb5c 	bl	8002ed8 <HAL_GetTick>
 8005820:	4602      	mov	r2, r0
 8005822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005824:	1a9b      	subs	r3, r3, r2
 8005826:	683a      	ldr	r2, [r7, #0]
 8005828:	4413      	add	r3, r2
 800582a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800582c:	f7fd fb54 	bl	8002ed8 <HAL_GetTick>
 8005830:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8005832:	4b39      	ldr	r3, [pc, #228]	; (8005918 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	015b      	lsls	r3, r3, #5
 8005838:	0d1b      	lsrs	r3, r3, #20
 800583a:	69fa      	ldr	r2, [r7, #28]
 800583c:	fb02 f303 	mul.w	r3, r2, r3
 8005840:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8005842:	e054      	b.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8005844:	683b      	ldr	r3, [r7, #0]
 8005846:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800584a:	d050      	beq.n	80058ee <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800584c:	f7fd fb44 	bl	8002ed8 <HAL_GetTick>
 8005850:	4602      	mov	r2, r0
 8005852:	69bb      	ldr	r3, [r7, #24]
 8005854:	1ad3      	subs	r3, r2, r3
 8005856:	69fa      	ldr	r2, [r7, #28]
 8005858:	429a      	cmp	r2, r3
 800585a:	d902      	bls.n	8005862 <SPI_WaitFlagStateUntilTimeout+0x56>
 800585c:	69fb      	ldr	r3, [r7, #28]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d13d      	bne.n	80058de <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8005862:	68fb      	ldr	r3, [r7, #12]
 8005864:	681b      	ldr	r3, [r3, #0]
 8005866:	685a      	ldr	r2, [r3, #4]
 8005868:	68fb      	ldr	r3, [r7, #12]
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8005870:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8005872:	68fb      	ldr	r3, [r7, #12]
 8005874:	685b      	ldr	r3, [r3, #4]
 8005876:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800587a:	d111      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005884:	d004      	beq.n	8005890 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	689b      	ldr	r3, [r3, #8]
 800588a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800588e:	d107      	bne.n	80058a0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	681a      	ldr	r2, [r3, #0]
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	681b      	ldr	r3, [r3, #0]
 800589a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800589e:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80058a0:	68fb      	ldr	r3, [r7, #12]
 80058a2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80058a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80058a8:	d10f      	bne.n	80058ca <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80058aa:	68fb      	ldr	r3, [r7, #12]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	681a      	ldr	r2, [r3, #0]
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80058b8:	601a      	str	r2, [r3, #0]
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	681a      	ldr	r2, [r3, #0]
 80058c0:	68fb      	ldr	r3, [r7, #12]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80058c8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	2201      	movs	r2, #1
 80058ce:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80058d2:	68fb      	ldr	r3, [r7, #12]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 80058da:	2303      	movs	r3, #3
 80058dc:	e017      	b.n	800590e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d101      	bne.n	80058e8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80058e4:	2300      	movs	r3, #0
 80058e6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80058e8:	697b      	ldr	r3, [r7, #20]
 80058ea:	3b01      	subs	r3, #1
 80058ec:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80058ee:	68fb      	ldr	r3, [r7, #12]
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	689a      	ldr	r2, [r3, #8]
 80058f4:	68bb      	ldr	r3, [r7, #8]
 80058f6:	4013      	ands	r3, r2
 80058f8:	68ba      	ldr	r2, [r7, #8]
 80058fa:	429a      	cmp	r2, r3
 80058fc:	bf0c      	ite	eq
 80058fe:	2301      	moveq	r3, #1
 8005900:	2300      	movne	r3, #0
 8005902:	b2db      	uxtb	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	79fb      	ldrb	r3, [r7, #7]
 8005908:	429a      	cmp	r2, r3
 800590a:	d19b      	bne.n	8005844 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800590c:	2300      	movs	r3, #0
}
 800590e:	4618      	mov	r0, r3
 8005910:	3720      	adds	r7, #32
 8005912:	46bd      	mov	sp, r7
 8005914:	bd80      	pop	{r7, pc}
 8005916:	bf00      	nop
 8005918:	20001444 	.word	0x20001444

0800591c <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b088      	sub	sp, #32
 8005920:	af02      	add	r7, sp, #8
 8005922:	60f8      	str	r0, [r7, #12]
 8005924:	60b9      	str	r1, [r7, #8]
 8005926:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8005928:	4b1b      	ldr	r3, [pc, #108]	; (8005998 <SPI_EndRxTxTransaction+0x7c>)
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	4a1b      	ldr	r2, [pc, #108]	; (800599c <SPI_EndRxTxTransaction+0x80>)
 800592e:	fba2 2303 	umull	r2, r3, r2, r3
 8005932:	0d5b      	lsrs	r3, r3, #21
 8005934:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8005938:	fb02 f303 	mul.w	r3, r2, r3
 800593c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	685b      	ldr	r3, [r3, #4]
 8005942:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005946:	d112      	bne.n	800596e <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	9300      	str	r3, [sp, #0]
 800594c:	68bb      	ldr	r3, [r7, #8]
 800594e:	2200      	movs	r2, #0
 8005950:	2180      	movs	r1, #128	; 0x80
 8005952:	68f8      	ldr	r0, [r7, #12]
 8005954:	f7ff ff5a 	bl	800580c <SPI_WaitFlagStateUntilTimeout>
 8005958:	4603      	mov	r3, r0
 800595a:	2b00      	cmp	r3, #0
 800595c:	d016      	beq.n	800598c <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800595e:	68fb      	ldr	r3, [r7, #12]
 8005960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005962:	f043 0220 	orr.w	r2, r3, #32
 8005966:	68fb      	ldr	r3, [r7, #12]
 8005968:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800596a:	2303      	movs	r3, #3
 800596c:	e00f      	b.n	800598e <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800596e:	697b      	ldr	r3, [r7, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d00a      	beq.n	800598a <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8005974:	697b      	ldr	r3, [r7, #20]
 8005976:	3b01      	subs	r3, #1
 8005978:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800597a:	68fb      	ldr	r3, [r7, #12]
 800597c:	681b      	ldr	r3, [r3, #0]
 800597e:	689b      	ldr	r3, [r3, #8]
 8005980:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005984:	2b80      	cmp	r3, #128	; 0x80
 8005986:	d0f2      	beq.n	800596e <SPI_EndRxTxTransaction+0x52>
 8005988:	e000      	b.n	800598c <SPI_EndRxTxTransaction+0x70>
        break;
 800598a:	bf00      	nop
  }

  return HAL_OK;
 800598c:	2300      	movs	r3, #0
}
 800598e:	4618      	mov	r0, r3
 8005990:	3718      	adds	r7, #24
 8005992:	46bd      	mov	sp, r7
 8005994:	bd80      	pop	{r7, pc}
 8005996:	bf00      	nop
 8005998:	20001444 	.word	0x20001444
 800599c:	165e9f81 	.word	0x165e9f81

080059a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80059a0:	b580      	push	{r7, lr}
 80059a2:	b082      	sub	sp, #8
 80059a4:	af00      	add	r7, sp, #0
 80059a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80059a8:	687b      	ldr	r3, [r7, #4]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d101      	bne.n	80059b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80059ae:	2301      	movs	r3, #1
 80059b0:	e041      	b.n	8005a36 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059b8:	b2db      	uxtb	r3, r3
 80059ba:	2b00      	cmp	r3, #0
 80059bc:	d106      	bne.n	80059cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2200      	movs	r2, #0
 80059c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80059c6:	6878      	ldr	r0, [r7, #4]
 80059c8:	f7fd f802 	bl	80029d0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	2202      	movs	r2, #2
 80059d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681a      	ldr	r2, [r3, #0]
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	3304      	adds	r3, #4
 80059dc:	4619      	mov	r1, r3
 80059de:	4610      	mov	r0, r2
 80059e0:	f000 ff6c 	bl	80068bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	2201      	movs	r2, #1
 80059e8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2201      	movs	r2, #1
 80059f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	2201      	movs	r2, #1
 80059f8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	2201      	movs	r2, #1
 8005a00:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	2201      	movs	r2, #1
 8005a08:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	2201      	movs	r2, #1
 8005a10:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	2201      	movs	r2, #1
 8005a18:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	2201      	movs	r2, #1
 8005a20:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2201      	movs	r2, #1
 8005a28:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	2201      	movs	r2, #1
 8005a30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005a34:	2300      	movs	r3, #0
}
 8005a36:	4618      	mov	r0, r3
 8005a38:	3708      	adds	r7, #8
 8005a3a:	46bd      	mov	sp, r7
 8005a3c:	bd80      	pop	{r7, pc}
	...

08005a40 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a40:	b480      	push	{r7}
 8005a42:	b085      	sub	sp, #20
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a4e:	b2db      	uxtb	r3, r3
 8005a50:	2b01      	cmp	r3, #1
 8005a52:	d001      	beq.n	8005a58 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005a54:	2301      	movs	r3, #1
 8005a56:	e044      	b.n	8005ae2 <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	2202      	movs	r2, #2
 8005a5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	68da      	ldr	r2, [r3, #12]
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f042 0201 	orr.w	r2, r2, #1
 8005a6e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	4a1e      	ldr	r2, [pc, #120]	; (8005af0 <HAL_TIM_Base_Start_IT+0xb0>)
 8005a76:	4293      	cmp	r3, r2
 8005a78:	d018      	beq.n	8005aac <HAL_TIM_Base_Start_IT+0x6c>
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a82:	d013      	beq.n	8005aac <HAL_TIM_Base_Start_IT+0x6c>
 8005a84:	687b      	ldr	r3, [r7, #4]
 8005a86:	681b      	ldr	r3, [r3, #0]
 8005a88:	4a1a      	ldr	r2, [pc, #104]	; (8005af4 <HAL_TIM_Base_Start_IT+0xb4>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d00e      	beq.n	8005aac <HAL_TIM_Base_Start_IT+0x6c>
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	4a19      	ldr	r2, [pc, #100]	; (8005af8 <HAL_TIM_Base_Start_IT+0xb8>)
 8005a94:	4293      	cmp	r3, r2
 8005a96:	d009      	beq.n	8005aac <HAL_TIM_Base_Start_IT+0x6c>
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	4a17      	ldr	r2, [pc, #92]	; (8005afc <HAL_TIM_Base_Start_IT+0xbc>)
 8005a9e:	4293      	cmp	r3, r2
 8005aa0:	d004      	beq.n	8005aac <HAL_TIM_Base_Start_IT+0x6c>
 8005aa2:	687b      	ldr	r3, [r7, #4]
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	4a16      	ldr	r2, [pc, #88]	; (8005b00 <HAL_TIM_Base_Start_IT+0xc0>)
 8005aa8:	4293      	cmp	r3, r2
 8005aaa:	d111      	bne.n	8005ad0 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	689b      	ldr	r3, [r3, #8]
 8005ab2:	f003 0307 	and.w	r3, r3, #7
 8005ab6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	2b06      	cmp	r3, #6
 8005abc:	d010      	beq.n	8005ae0 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	681a      	ldr	r2, [r3, #0]
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	f042 0201 	orr.w	r2, r2, #1
 8005acc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005ace:	e007      	b.n	8005ae0 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	681a      	ldr	r2, [r3, #0]
 8005ad6:	687b      	ldr	r3, [r7, #4]
 8005ad8:	681b      	ldr	r3, [r3, #0]
 8005ada:	f042 0201 	orr.w	r2, r2, #1
 8005ade:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ae0:	2300      	movs	r3, #0
}
 8005ae2:	4618      	mov	r0, r3
 8005ae4:	3714      	adds	r7, #20
 8005ae6:	46bd      	mov	sp, r7
 8005ae8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aec:	4770      	bx	lr
 8005aee:	bf00      	nop
 8005af0:	40010000 	.word	0x40010000
 8005af4:	40000400 	.word	0x40000400
 8005af8:	40000800 	.word	0x40000800
 8005afc:	40000c00 	.word	0x40000c00
 8005b00:	40014000 	.word	0x40014000

08005b04 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b04:	b580      	push	{r7, lr}
 8005b06:	b082      	sub	sp, #8
 8005b08:	af00      	add	r7, sp, #0
 8005b0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d101      	bne.n	8005b16 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b12:	2301      	movs	r3, #1
 8005b14:	e041      	b.n	8005b9a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	2b00      	cmp	r3, #0
 8005b20:	d106      	bne.n	8005b30 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	2200      	movs	r2, #0
 8005b26:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b2a:	6878      	ldr	r0, [r7, #4]
 8005b2c:	f7fc ffe8 	bl	8002b00 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	2202      	movs	r2, #2
 8005b34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	681a      	ldr	r2, [r3, #0]
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3304      	adds	r3, #4
 8005b40:	4619      	mov	r1, r3
 8005b42:	4610      	mov	r0, r2
 8005b44:	f000 feba 	bl	80068bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	2201      	movs	r2, #1
 8005b4c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	2201      	movs	r2, #1
 8005b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2201      	movs	r2, #1
 8005b5c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	2201      	movs	r2, #1
 8005b64:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2201      	movs	r2, #1
 8005b6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	2201      	movs	r2, #1
 8005b74:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b78:	687b      	ldr	r3, [r7, #4]
 8005b7a:	2201      	movs	r2, #1
 8005b7c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	2201      	movs	r2, #1
 8005b84:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2201      	movs	r2, #1
 8005b8c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b90:	687b      	ldr	r3, [r7, #4]
 8005b92:	2201      	movs	r2, #1
 8005b94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b98:	2300      	movs	r3, #0
}
 8005b9a:	4618      	mov	r0, r3
 8005b9c:	3708      	adds	r7, #8
 8005b9e:	46bd      	mov	sp, r7
 8005ba0:	bd80      	pop	{r7, pc}
	...

08005ba4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
 8005bac:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005bae:	683b      	ldr	r3, [r7, #0]
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d109      	bne.n	8005bc8 <HAL_TIM_PWM_Start+0x24>
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005bba:	b2db      	uxtb	r3, r3
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	bf14      	ite	ne
 8005bc0:	2301      	movne	r3, #1
 8005bc2:	2300      	moveq	r3, #0
 8005bc4:	b2db      	uxtb	r3, r3
 8005bc6:	e022      	b.n	8005c0e <HAL_TIM_PWM_Start+0x6a>
 8005bc8:	683b      	ldr	r3, [r7, #0]
 8005bca:	2b04      	cmp	r3, #4
 8005bcc:	d109      	bne.n	8005be2 <HAL_TIM_PWM_Start+0x3e>
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005bd4:	b2db      	uxtb	r3, r3
 8005bd6:	2b01      	cmp	r3, #1
 8005bd8:	bf14      	ite	ne
 8005bda:	2301      	movne	r3, #1
 8005bdc:	2300      	moveq	r3, #0
 8005bde:	b2db      	uxtb	r3, r3
 8005be0:	e015      	b.n	8005c0e <HAL_TIM_PWM_Start+0x6a>
 8005be2:	683b      	ldr	r3, [r7, #0]
 8005be4:	2b08      	cmp	r3, #8
 8005be6:	d109      	bne.n	8005bfc <HAL_TIM_PWM_Start+0x58>
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005bee:	b2db      	uxtb	r3, r3
 8005bf0:	2b01      	cmp	r3, #1
 8005bf2:	bf14      	ite	ne
 8005bf4:	2301      	movne	r3, #1
 8005bf6:	2300      	moveq	r3, #0
 8005bf8:	b2db      	uxtb	r3, r3
 8005bfa:	e008      	b.n	8005c0e <HAL_TIM_PWM_Start+0x6a>
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c02:	b2db      	uxtb	r3, r3
 8005c04:	2b01      	cmp	r3, #1
 8005c06:	bf14      	ite	ne
 8005c08:	2301      	movne	r3, #1
 8005c0a:	2300      	moveq	r3, #0
 8005c0c:	b2db      	uxtb	r3, r3
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d001      	beq.n	8005c16 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c12:	2301      	movs	r3, #1
 8005c14:	e068      	b.n	8005ce8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c16:	683b      	ldr	r3, [r7, #0]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d104      	bne.n	8005c26 <HAL_TIM_PWM_Start+0x82>
 8005c1c:	687b      	ldr	r3, [r7, #4]
 8005c1e:	2202      	movs	r2, #2
 8005c20:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c24:	e013      	b.n	8005c4e <HAL_TIM_PWM_Start+0xaa>
 8005c26:	683b      	ldr	r3, [r7, #0]
 8005c28:	2b04      	cmp	r3, #4
 8005c2a:	d104      	bne.n	8005c36 <HAL_TIM_PWM_Start+0x92>
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	2202      	movs	r2, #2
 8005c30:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c34:	e00b      	b.n	8005c4e <HAL_TIM_PWM_Start+0xaa>
 8005c36:	683b      	ldr	r3, [r7, #0]
 8005c38:	2b08      	cmp	r3, #8
 8005c3a:	d104      	bne.n	8005c46 <HAL_TIM_PWM_Start+0xa2>
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	2202      	movs	r2, #2
 8005c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005c44:	e003      	b.n	8005c4e <HAL_TIM_PWM_Start+0xaa>
 8005c46:	687b      	ldr	r3, [r7, #4]
 8005c48:	2202      	movs	r2, #2
 8005c4a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005c4e:	687b      	ldr	r3, [r7, #4]
 8005c50:	681b      	ldr	r3, [r3, #0]
 8005c52:	2201      	movs	r2, #1
 8005c54:	6839      	ldr	r1, [r7, #0]
 8005c56:	4618      	mov	r0, r3
 8005c58:	f001 f9f4 	bl	8007044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	681b      	ldr	r3, [r3, #0]
 8005c60:	4a23      	ldr	r2, [pc, #140]	; (8005cf0 <HAL_TIM_PWM_Start+0x14c>)
 8005c62:	4293      	cmp	r3, r2
 8005c64:	d107      	bne.n	8005c76 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005c66:	687b      	ldr	r3, [r7, #4]
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005c74:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	4a1d      	ldr	r2, [pc, #116]	; (8005cf0 <HAL_TIM_PWM_Start+0x14c>)
 8005c7c:	4293      	cmp	r3, r2
 8005c7e:	d018      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x10e>
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c88:	d013      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x10e>
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	4a19      	ldr	r2, [pc, #100]	; (8005cf4 <HAL_TIM_PWM_Start+0x150>)
 8005c90:	4293      	cmp	r3, r2
 8005c92:	d00e      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x10e>
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	4a17      	ldr	r2, [pc, #92]	; (8005cf8 <HAL_TIM_PWM_Start+0x154>)
 8005c9a:	4293      	cmp	r3, r2
 8005c9c:	d009      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x10e>
 8005c9e:	687b      	ldr	r3, [r7, #4]
 8005ca0:	681b      	ldr	r3, [r3, #0]
 8005ca2:	4a16      	ldr	r2, [pc, #88]	; (8005cfc <HAL_TIM_PWM_Start+0x158>)
 8005ca4:	4293      	cmp	r3, r2
 8005ca6:	d004      	beq.n	8005cb2 <HAL_TIM_PWM_Start+0x10e>
 8005ca8:	687b      	ldr	r3, [r7, #4]
 8005caa:	681b      	ldr	r3, [r3, #0]
 8005cac:	4a14      	ldr	r2, [pc, #80]	; (8005d00 <HAL_TIM_PWM_Start+0x15c>)
 8005cae:	4293      	cmp	r3, r2
 8005cb0:	d111      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	689b      	ldr	r3, [r3, #8]
 8005cb8:	f003 0307 	and.w	r3, r3, #7
 8005cbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cbe:	68fb      	ldr	r3, [r7, #12]
 8005cc0:	2b06      	cmp	r3, #6
 8005cc2:	d010      	beq.n	8005ce6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	681a      	ldr	r2, [r3, #0]
 8005cca:	687b      	ldr	r3, [r7, #4]
 8005ccc:	681b      	ldr	r3, [r3, #0]
 8005cce:	f042 0201 	orr.w	r2, r2, #1
 8005cd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005cd4:	e007      	b.n	8005ce6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	681a      	ldr	r2, [r3, #0]
 8005cdc:	687b      	ldr	r3, [r7, #4]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	f042 0201 	orr.w	r2, r2, #1
 8005ce4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005ce6:	2300      	movs	r3, #0
}
 8005ce8:	4618      	mov	r0, r3
 8005cea:	3710      	adds	r7, #16
 8005cec:	46bd      	mov	sp, r7
 8005cee:	bd80      	pop	{r7, pc}
 8005cf0:	40010000 	.word	0x40010000
 8005cf4:	40000400 	.word	0x40000400
 8005cf8:	40000800 	.word	0x40000800
 8005cfc:	40000c00 	.word	0x40000c00
 8005d00:	40014000 	.word	0x40014000

08005d04 <HAL_TIM_PWM_Stop>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Stop(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b082      	sub	sp, #8
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Disable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	2200      	movs	r2, #0
 8005d14:	6839      	ldr	r1, [r7, #0]
 8005d16:	4618      	mov	r0, r3
 8005d18:	f001 f994 	bl	8007044 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	4a29      	ldr	r2, [pc, #164]	; (8005dc8 <HAL_TIM_PWM_Stop+0xc4>)
 8005d22:	4293      	cmp	r3, r2
 8005d24:	d117      	bne.n	8005d56 <HAL_TIM_PWM_Stop+0x52>
  {
    /* Disable the Main Output */
    __HAL_TIM_MOE_DISABLE(htim);
 8005d26:	687b      	ldr	r3, [r7, #4]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	6a1a      	ldr	r2, [r3, #32]
 8005d2c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d30:	4013      	ands	r3, r2
 8005d32:	2b00      	cmp	r3, #0
 8005d34:	d10f      	bne.n	8005d56 <HAL_TIM_PWM_Stop+0x52>
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	6a1a      	ldr	r2, [r3, #32]
 8005d3c:	f240 4344 	movw	r3, #1092	; 0x444
 8005d40:	4013      	ands	r3, r2
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d107      	bne.n	8005d56 <HAL_TIM_PWM_Stop+0x52>
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	681b      	ldr	r3, [r3, #0]
 8005d50:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8005d54:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	6a1a      	ldr	r2, [r3, #32]
 8005d5c:	f241 1311 	movw	r3, #4369	; 0x1111
 8005d60:	4013      	ands	r3, r2
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d10f      	bne.n	8005d86 <HAL_TIM_PWM_Stop+0x82>
 8005d66:	687b      	ldr	r3, [r7, #4]
 8005d68:	681b      	ldr	r3, [r3, #0]
 8005d6a:	6a1a      	ldr	r2, [r3, #32]
 8005d6c:	f240 4344 	movw	r3, #1092	; 0x444
 8005d70:	4013      	ands	r3, r2
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d107      	bne.n	8005d86 <HAL_TIM_PWM_Stop+0x82>
 8005d76:	687b      	ldr	r3, [r7, #4]
 8005d78:	681b      	ldr	r3, [r3, #0]
 8005d7a:	681a      	ldr	r2, [r3, #0]
 8005d7c:	687b      	ldr	r3, [r7, #4]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f022 0201 	bic.w	r2, r2, #1
 8005d84:	601a      	str	r2, [r3, #0]

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8005d86:	683b      	ldr	r3, [r7, #0]
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d104      	bne.n	8005d96 <HAL_TIM_PWM_Stop+0x92>
 8005d8c:	687b      	ldr	r3, [r7, #4]
 8005d8e:	2201      	movs	r2, #1
 8005d90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005d94:	e013      	b.n	8005dbe <HAL_TIM_PWM_Stop+0xba>
 8005d96:	683b      	ldr	r3, [r7, #0]
 8005d98:	2b04      	cmp	r3, #4
 8005d9a:	d104      	bne.n	8005da6 <HAL_TIM_PWM_Stop+0xa2>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005da4:	e00b      	b.n	8005dbe <HAL_TIM_PWM_Stop+0xba>
 8005da6:	683b      	ldr	r3, [r7, #0]
 8005da8:	2b08      	cmp	r3, #8
 8005daa:	d104      	bne.n	8005db6 <HAL_TIM_PWM_Stop+0xb2>
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	2201      	movs	r2, #1
 8005db0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005db4:	e003      	b.n	8005dbe <HAL_TIM_PWM_Stop+0xba>
 8005db6:	687b      	ldr	r3, [r7, #4]
 8005db8:	2201      	movs	r2, #1
 8005dba:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Return function status */
  return HAL_OK;
 8005dbe:	2300      	movs	r3, #0
}
 8005dc0:	4618      	mov	r0, r3
 8005dc2:	3708      	adds	r7, #8
 8005dc4:	46bd      	mov	sp, r7
 8005dc6:	bd80      	pop	{r7, pc}
 8005dc8:	40010000 	.word	0x40010000

08005dcc <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005dcc:	b580      	push	{r7, lr}
 8005dce:	b082      	sub	sp, #8
 8005dd0:	af00      	add	r7, sp, #0
 8005dd2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d101      	bne.n	8005dde <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005dda:	2301      	movs	r3, #1
 8005ddc:	e041      	b.n	8005e62 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005de4:	b2db      	uxtb	r3, r3
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d106      	bne.n	8005df8 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005df2:	6878      	ldr	r0, [r7, #4]
 8005df4:	f000 f839 	bl	8005e6a <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005df8:	687b      	ldr	r3, [r7, #4]
 8005dfa:	2202      	movs	r2, #2
 8005dfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005e00:	687b      	ldr	r3, [r7, #4]
 8005e02:	681a      	ldr	r2, [r3, #0]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	3304      	adds	r3, #4
 8005e08:	4619      	mov	r1, r3
 8005e0a:	4610      	mov	r0, r2
 8005e0c:	f000 fd56 	bl	80068bc <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	2201      	movs	r2, #1
 8005e14:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	2201      	movs	r2, #1
 8005e1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	2201      	movs	r2, #1
 8005e24:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005e28:	687b      	ldr	r3, [r7, #4]
 8005e2a:	2201      	movs	r2, #1
 8005e2c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	2201      	movs	r2, #1
 8005e34:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	2201      	movs	r2, #1
 8005e3c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	2201      	movs	r2, #1
 8005e44:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2201      	movs	r2, #1
 8005e4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005e50:	687b      	ldr	r3, [r7, #4]
 8005e52:	2201      	movs	r2, #1
 8005e54:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e58:	687b      	ldr	r3, [r7, #4]
 8005e5a:	2201      	movs	r2, #1
 8005e5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005e60:	2300      	movs	r3, #0
}
 8005e62:	4618      	mov	r0, r3
 8005e64:	3708      	adds	r7, #8
 8005e66:	46bd      	mov	sp, r7
 8005e68:	bd80      	pop	{r7, pc}

08005e6a <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005e6a:	b480      	push	{r7}
 8005e6c:	b083      	sub	sp, #12
 8005e6e:	af00      	add	r7, sp, #0
 8005e70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005e72:	bf00      	nop
 8005e74:	370c      	adds	r7, #12
 8005e76:	46bd      	mov	sp, r7
 8005e78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e7c:	4770      	bx	lr
	...

08005e80 <HAL_TIM_IC_Start_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005e80:	b580      	push	{r7, lr}
 8005e82:	b084      	sub	sp, #16
 8005e84:	af00      	add	r7, sp, #0
 8005e86:	6078      	str	r0, [r7, #4]
 8005e88:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005e8a:	2300      	movs	r3, #0
 8005e8c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  HAL_TIM_ChannelStateTypeDef channel_state = TIM_CHANNEL_STATE_GET(htim, Channel);
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d104      	bne.n	8005e9e <HAL_TIM_IC_Start_IT+0x1e>
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005e9a:	b2db      	uxtb	r3, r3
 8005e9c:	e013      	b.n	8005ec6 <HAL_TIM_IC_Start_IT+0x46>
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	2b04      	cmp	r3, #4
 8005ea2:	d104      	bne.n	8005eae <HAL_TIM_IC_Start_IT+0x2e>
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005eaa:	b2db      	uxtb	r3, r3
 8005eac:	e00b      	b.n	8005ec6 <HAL_TIM_IC_Start_IT+0x46>
 8005eae:	683b      	ldr	r3, [r7, #0]
 8005eb0:	2b08      	cmp	r3, #8
 8005eb2:	d104      	bne.n	8005ebe <HAL_TIM_IC_Start_IT+0x3e>
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005eba:	b2db      	uxtb	r3, r3
 8005ebc:	e003      	b.n	8005ec6 <HAL_TIM_IC_Start_IT+0x46>
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005ec4:	b2db      	uxtb	r3, r3
 8005ec6:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_state = TIM_CHANNEL_N_STATE_GET(htim, Channel);
 8005ec8:	683b      	ldr	r3, [r7, #0]
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d104      	bne.n	8005ed8 <HAL_TIM_IC_Start_IT+0x58>
 8005ece:	687b      	ldr	r3, [r7, #4]
 8005ed0:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ed4:	b2db      	uxtb	r3, r3
 8005ed6:	e013      	b.n	8005f00 <HAL_TIM_IC_Start_IT+0x80>
 8005ed8:	683b      	ldr	r3, [r7, #0]
 8005eda:	2b04      	cmp	r3, #4
 8005edc:	d104      	bne.n	8005ee8 <HAL_TIM_IC_Start_IT+0x68>
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ee4:	b2db      	uxtb	r3, r3
 8005ee6:	e00b      	b.n	8005f00 <HAL_TIM_IC_Start_IT+0x80>
 8005ee8:	683b      	ldr	r3, [r7, #0]
 8005eea:	2b08      	cmp	r3, #8
 8005eec:	d104      	bne.n	8005ef8 <HAL_TIM_IC_Start_IT+0x78>
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8005ef4:	b2db      	uxtb	r3, r3
 8005ef6:	e003      	b.n	8005f00 <HAL_TIM_IC_Start_IT+0x80>
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8005efe:	b2db      	uxtb	r3, r3
 8005f00:	737b      	strb	r3, [r7, #13]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if ((channel_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f02:	7bbb      	ldrb	r3, [r7, #14]
 8005f04:	2b01      	cmp	r3, #1
 8005f06:	d102      	bne.n	8005f0e <HAL_TIM_IC_Start_IT+0x8e>
      || (complementary_channel_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f08:	7b7b      	ldrb	r3, [r7, #13]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d001      	beq.n	8005f12 <HAL_TIM_IC_Start_IT+0x92>
  {
    return HAL_ERROR;
 8005f0e:	2301      	movs	r3, #1
 8005f10:	e0c2      	b.n	8006098 <HAL_TIM_IC_Start_IT+0x218>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f12:	683b      	ldr	r3, [r7, #0]
 8005f14:	2b00      	cmp	r3, #0
 8005f16:	d104      	bne.n	8005f22 <HAL_TIM_IC_Start_IT+0xa2>
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005f20:	e013      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0xca>
 8005f22:	683b      	ldr	r3, [r7, #0]
 8005f24:	2b04      	cmp	r3, #4
 8005f26:	d104      	bne.n	8005f32 <HAL_TIM_IC_Start_IT+0xb2>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	2202      	movs	r2, #2
 8005f2c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005f30:	e00b      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0xca>
 8005f32:	683b      	ldr	r3, [r7, #0]
 8005f34:	2b08      	cmp	r3, #8
 8005f36:	d104      	bne.n	8005f42 <HAL_TIM_IC_Start_IT+0xc2>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	2202      	movs	r2, #2
 8005f3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005f40:	e003      	b.n	8005f4a <HAL_TIM_IC_Start_IT+0xca>
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	2202      	movs	r2, #2
 8005f46:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f4a:	683b      	ldr	r3, [r7, #0]
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d104      	bne.n	8005f5a <HAL_TIM_IC_Start_IT+0xda>
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2202      	movs	r2, #2
 8005f54:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f58:	e013      	b.n	8005f82 <HAL_TIM_IC_Start_IT+0x102>
 8005f5a:	683b      	ldr	r3, [r7, #0]
 8005f5c:	2b04      	cmp	r3, #4
 8005f5e:	d104      	bne.n	8005f6a <HAL_TIM_IC_Start_IT+0xea>
 8005f60:	687b      	ldr	r3, [r7, #4]
 8005f62:	2202      	movs	r2, #2
 8005f64:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f68:	e00b      	b.n	8005f82 <HAL_TIM_IC_Start_IT+0x102>
 8005f6a:	683b      	ldr	r3, [r7, #0]
 8005f6c:	2b08      	cmp	r3, #8
 8005f6e:	d104      	bne.n	8005f7a <HAL_TIM_IC_Start_IT+0xfa>
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	2202      	movs	r2, #2
 8005f74:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005f78:	e003      	b.n	8005f82 <HAL_TIM_IC_Start_IT+0x102>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	2202      	movs	r2, #2
 8005f7e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  switch (Channel)
 8005f82:	683b      	ldr	r3, [r7, #0]
 8005f84:	2b0c      	cmp	r3, #12
 8005f86:	d841      	bhi.n	800600c <HAL_TIM_IC_Start_IT+0x18c>
 8005f88:	a201      	add	r2, pc, #4	; (adr r2, 8005f90 <HAL_TIM_IC_Start_IT+0x110>)
 8005f8a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005f8e:	bf00      	nop
 8005f90:	08005fc5 	.word	0x08005fc5
 8005f94:	0800600d 	.word	0x0800600d
 8005f98:	0800600d 	.word	0x0800600d
 8005f9c:	0800600d 	.word	0x0800600d
 8005fa0:	08005fd7 	.word	0x08005fd7
 8005fa4:	0800600d 	.word	0x0800600d
 8005fa8:	0800600d 	.word	0x0800600d
 8005fac:	0800600d 	.word	0x0800600d
 8005fb0:	08005fe9 	.word	0x08005fe9
 8005fb4:	0800600d 	.word	0x0800600d
 8005fb8:	0800600d 	.word	0x0800600d
 8005fbc:	0800600d 	.word	0x0800600d
 8005fc0:	08005ffb 	.word	0x08005ffb
  {
    case TIM_CHANNEL_1:
    {
      /* Enable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	681b      	ldr	r3, [r3, #0]
 8005fc8:	68da      	ldr	r2, [r3, #12]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	681b      	ldr	r3, [r3, #0]
 8005fce:	f042 0202 	orr.w	r2, r2, #2
 8005fd2:	60da      	str	r2, [r3, #12]
      break;
 8005fd4:	e01d      	b.n	8006012 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_2:
    {
      /* Enable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	681b      	ldr	r3, [r3, #0]
 8005fda:	68da      	ldr	r2, [r3, #12]
 8005fdc:	687b      	ldr	r3, [r7, #4]
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	f042 0204 	orr.w	r2, r2, #4
 8005fe4:	60da      	str	r2, [r3, #12]
      break;
 8005fe6:	e014      	b.n	8006012 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_3:
    {
      /* Enable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC3);
 8005fe8:	687b      	ldr	r3, [r7, #4]
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	68da      	ldr	r2, [r3, #12]
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	f042 0208 	orr.w	r2, r2, #8
 8005ff6:	60da      	str	r2, [r3, #12]
      break;
 8005ff8:	e00b      	b.n	8006012 <HAL_TIM_IC_Start_IT+0x192>
    }

    case TIM_CHANNEL_4:
    {
      /* Enable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC4);
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	681b      	ldr	r3, [r3, #0]
 8005ffe:	68da      	ldr	r2, [r3, #12]
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	f042 0210 	orr.w	r2, r2, #16
 8006008:	60da      	str	r2, [r3, #12]
      break;
 800600a:	e002      	b.n	8006012 <HAL_TIM_IC_Start_IT+0x192>
    }

    default:
      status = HAL_ERROR;
 800600c:	2301      	movs	r3, #1
 800600e:	73fb      	strb	r3, [r7, #15]
      break;
 8006010:	bf00      	nop
  }

  if (status == HAL_OK)
 8006012:	7bfb      	ldrb	r3, [r7, #15]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d13e      	bne.n	8006096 <HAL_TIM_IC_Start_IT+0x216>
  {
    /* Enable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	681b      	ldr	r3, [r3, #0]
 800601c:	2201      	movs	r2, #1
 800601e:	6839      	ldr	r1, [r7, #0]
 8006020:	4618      	mov	r0, r3
 8006022:	f001 f80f 	bl	8007044 <TIM_CCxChannelCmd>

    /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
    if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	4a1d      	ldr	r2, [pc, #116]	; (80060a0 <HAL_TIM_IC_Start_IT+0x220>)
 800602c:	4293      	cmp	r3, r2
 800602e:	d018      	beq.n	8006062 <HAL_TIM_IC_Start_IT+0x1e2>
 8006030:	687b      	ldr	r3, [r7, #4]
 8006032:	681b      	ldr	r3, [r3, #0]
 8006034:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006038:	d013      	beq.n	8006062 <HAL_TIM_IC_Start_IT+0x1e2>
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	4a19      	ldr	r2, [pc, #100]	; (80060a4 <HAL_TIM_IC_Start_IT+0x224>)
 8006040:	4293      	cmp	r3, r2
 8006042:	d00e      	beq.n	8006062 <HAL_TIM_IC_Start_IT+0x1e2>
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	4a17      	ldr	r2, [pc, #92]	; (80060a8 <HAL_TIM_IC_Start_IT+0x228>)
 800604a:	4293      	cmp	r3, r2
 800604c:	d009      	beq.n	8006062 <HAL_TIM_IC_Start_IT+0x1e2>
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	681b      	ldr	r3, [r3, #0]
 8006052:	4a16      	ldr	r2, [pc, #88]	; (80060ac <HAL_TIM_IC_Start_IT+0x22c>)
 8006054:	4293      	cmp	r3, r2
 8006056:	d004      	beq.n	8006062 <HAL_TIM_IC_Start_IT+0x1e2>
 8006058:	687b      	ldr	r3, [r7, #4]
 800605a:	681b      	ldr	r3, [r3, #0]
 800605c:	4a14      	ldr	r2, [pc, #80]	; (80060b0 <HAL_TIM_IC_Start_IT+0x230>)
 800605e:	4293      	cmp	r3, r2
 8006060:	d111      	bne.n	8006086 <HAL_TIM_IC_Start_IT+0x206>
    {
      tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006062:	687b      	ldr	r3, [r7, #4]
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	689b      	ldr	r3, [r3, #8]
 8006068:	f003 0307 	and.w	r3, r3, #7
 800606c:	60bb      	str	r3, [r7, #8]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800606e:	68bb      	ldr	r3, [r7, #8]
 8006070:	2b06      	cmp	r3, #6
 8006072:	d010      	beq.n	8006096 <HAL_TIM_IC_Start_IT+0x216>
      {
        __HAL_TIM_ENABLE(htim);
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	681a      	ldr	r2, [r3, #0]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	f042 0201 	orr.w	r2, r2, #1
 8006082:	601a      	str	r2, [r3, #0]
      if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006084:	e007      	b.n	8006096 <HAL_TIM_IC_Start_IT+0x216>
      }
    }
    else
    {
      __HAL_TIM_ENABLE(htim);
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	681b      	ldr	r3, [r3, #0]
 800608a:	681a      	ldr	r2, [r3, #0]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	681b      	ldr	r3, [r3, #0]
 8006090:	f042 0201 	orr.w	r2, r2, #1
 8006094:	601a      	str	r2, [r3, #0]
    }
  }

  /* Return function status */
  return status;
 8006096:	7bfb      	ldrb	r3, [r7, #15]
}
 8006098:	4618      	mov	r0, r3
 800609a:	3710      	adds	r7, #16
 800609c:	46bd      	mov	sp, r7
 800609e:	bd80      	pop	{r7, pc}
 80060a0:	40010000 	.word	0x40010000
 80060a4:	40000400 	.word	0x40000400
 80060a8:	40000800 	.word	0x40000800
 80060ac:	40000c00 	.word	0x40000c00
 80060b0:	40014000 	.word	0x40014000

080060b4 <HAL_TIM_IC_Stop_IT>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Stop_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]
 80060bc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80060be:	2300      	movs	r3, #0
 80060c0:	73fb      	strb	r3, [r7, #15]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  switch (Channel)
 80060c2:	683b      	ldr	r3, [r7, #0]
 80060c4:	2b0c      	cmp	r3, #12
 80060c6:	d841      	bhi.n	800614c <HAL_TIM_IC_Stop_IT+0x98>
 80060c8:	a201      	add	r2, pc, #4	; (adr r2, 80060d0 <HAL_TIM_IC_Stop_IT+0x1c>)
 80060ca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80060ce:	bf00      	nop
 80060d0:	08006105 	.word	0x08006105
 80060d4:	0800614d 	.word	0x0800614d
 80060d8:	0800614d 	.word	0x0800614d
 80060dc:	0800614d 	.word	0x0800614d
 80060e0:	08006117 	.word	0x08006117
 80060e4:	0800614d 	.word	0x0800614d
 80060e8:	0800614d 	.word	0x0800614d
 80060ec:	0800614d 	.word	0x0800614d
 80060f0:	08006129 	.word	0x08006129
 80060f4:	0800614d 	.word	0x0800614d
 80060f8:	0800614d 	.word	0x0800614d
 80060fc:	0800614d 	.word	0x0800614d
 8006100:	0800613b 	.word	0x0800613b
  {
    case TIM_CHANNEL_1:
    {
      /* Disable the TIM Capture/Compare 1 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC1);
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	68da      	ldr	r2, [r3, #12]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	681b      	ldr	r3, [r3, #0]
 800610e:	f022 0202 	bic.w	r2, r2, #2
 8006112:	60da      	str	r2, [r3, #12]
      break;
 8006114:	e01d      	b.n	8006152 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_2:
    {
      /* Disable the TIM Capture/Compare 2 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC2);
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	681b      	ldr	r3, [r3, #0]
 800611a:	68da      	ldr	r2, [r3, #12]
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	f022 0204 	bic.w	r2, r2, #4
 8006124:	60da      	str	r2, [r3, #12]
      break;
 8006126:	e014      	b.n	8006152 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_3:
    {
      /* Disable the TIM Capture/Compare 3 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC3);
 8006128:	687b      	ldr	r3, [r7, #4]
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	68da      	ldr	r2, [r3, #12]
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	681b      	ldr	r3, [r3, #0]
 8006132:	f022 0208 	bic.w	r2, r2, #8
 8006136:	60da      	str	r2, [r3, #12]
      break;
 8006138:	e00b      	b.n	8006152 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    case TIM_CHANNEL_4:
    {
      /* Disable the TIM Capture/Compare 4 interrupt */
      __HAL_TIM_DISABLE_IT(htim, TIM_IT_CC4);
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	681b      	ldr	r3, [r3, #0]
 800613e:	68da      	ldr	r2, [r3, #12]
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f022 0210 	bic.w	r2, r2, #16
 8006148:	60da      	str	r2, [r3, #12]
      break;
 800614a:	e002      	b.n	8006152 <HAL_TIM_IC_Stop_IT+0x9e>
    }

    default:
      status = HAL_ERROR;
 800614c:	2301      	movs	r3, #1
 800614e:	73fb      	strb	r3, [r7, #15]
      break;
 8006150:	bf00      	nop
  }

  if (status == HAL_OK)
 8006152:	7bfb      	ldrb	r3, [r7, #15]
 8006154:	2b00      	cmp	r3, #0
 8006156:	d156      	bne.n	8006206 <HAL_TIM_IC_Stop_IT+0x152>
  {
    /* Disable the Input Capture channel */
    TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_DISABLE);
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	2200      	movs	r2, #0
 800615e:	6839      	ldr	r1, [r7, #0]
 8006160:	4618      	mov	r0, r3
 8006162:	f000 ff6f 	bl	8007044 <TIM_CCxChannelCmd>

    /* Disable the Peripheral */
    __HAL_TIM_DISABLE(htim);
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	681b      	ldr	r3, [r3, #0]
 800616a:	6a1a      	ldr	r2, [r3, #32]
 800616c:	f241 1311 	movw	r3, #4369	; 0x1111
 8006170:	4013      	ands	r3, r2
 8006172:	2b00      	cmp	r3, #0
 8006174:	d10f      	bne.n	8006196 <HAL_TIM_IC_Stop_IT+0xe2>
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	6a1a      	ldr	r2, [r3, #32]
 800617c:	f240 4344 	movw	r3, #1092	; 0x444
 8006180:	4013      	ands	r3, r2
 8006182:	2b00      	cmp	r3, #0
 8006184:	d107      	bne.n	8006196 <HAL_TIM_IC_Stop_IT+0xe2>
 8006186:	687b      	ldr	r3, [r7, #4]
 8006188:	681b      	ldr	r3, [r3, #0]
 800618a:	681a      	ldr	r2, [r3, #0]
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f022 0201 	bic.w	r2, r2, #1
 8006194:	601a      	str	r2, [r3, #0]

    /* Set the TIM channel state */
    TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 8006196:	683b      	ldr	r3, [r7, #0]
 8006198:	2b00      	cmp	r3, #0
 800619a:	d104      	bne.n	80061a6 <HAL_TIM_IC_Stop_IT+0xf2>
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	2201      	movs	r2, #1
 80061a0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80061a4:	e013      	b.n	80061ce <HAL_TIM_IC_Stop_IT+0x11a>
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	2b04      	cmp	r3, #4
 80061aa:	d104      	bne.n	80061b6 <HAL_TIM_IC_Stop_IT+0x102>
 80061ac:	687b      	ldr	r3, [r7, #4]
 80061ae:	2201      	movs	r2, #1
 80061b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80061b4:	e00b      	b.n	80061ce <HAL_TIM_IC_Stop_IT+0x11a>
 80061b6:	683b      	ldr	r3, [r7, #0]
 80061b8:	2b08      	cmp	r3, #8
 80061ba:	d104      	bne.n	80061c6 <HAL_TIM_IC_Stop_IT+0x112>
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	2201      	movs	r2, #1
 80061c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80061c4:	e003      	b.n	80061ce <HAL_TIM_IC_Stop_IT+0x11a>
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	2201      	movs	r2, #1
 80061ca:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    TIM_CHANNEL_N_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_READY);
 80061ce:	683b      	ldr	r3, [r7, #0]
 80061d0:	2b00      	cmp	r3, #0
 80061d2:	d104      	bne.n	80061de <HAL_TIM_IC_Stop_IT+0x12a>
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	2201      	movs	r2, #1
 80061d8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80061dc:	e013      	b.n	8006206 <HAL_TIM_IC_Stop_IT+0x152>
 80061de:	683b      	ldr	r3, [r7, #0]
 80061e0:	2b04      	cmp	r3, #4
 80061e2:	d104      	bne.n	80061ee <HAL_TIM_IC_Stop_IT+0x13a>
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2201      	movs	r2, #1
 80061e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80061ec:	e00b      	b.n	8006206 <HAL_TIM_IC_Stop_IT+0x152>
 80061ee:	683b      	ldr	r3, [r7, #0]
 80061f0:	2b08      	cmp	r3, #8
 80061f2:	d104      	bne.n	80061fe <HAL_TIM_IC_Stop_IT+0x14a>
 80061f4:	687b      	ldr	r3, [r7, #4]
 80061f6:	2201      	movs	r2, #1
 80061f8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80061fc:	e003      	b.n	8006206 <HAL_TIM_IC_Stop_IT+0x152>
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2201      	movs	r2, #1
 8006202:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
  }

  /* Return function status */
  return status;
 8006206:	7bfb      	ldrb	r3, [r7, #15]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3710      	adds	r7, #16
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006210:	b580      	push	{r7, lr}
 8006212:	b082      	sub	sp, #8
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	691b      	ldr	r3, [r3, #16]
 800621e:	f003 0302 	and.w	r3, r3, #2
 8006222:	2b02      	cmp	r3, #2
 8006224:	d122      	bne.n	800626c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	681b      	ldr	r3, [r3, #0]
 800622a:	68db      	ldr	r3, [r3, #12]
 800622c:	f003 0302 	and.w	r3, r3, #2
 8006230:	2b02      	cmp	r3, #2
 8006232:	d11b      	bne.n	800626c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f06f 0202 	mvn.w	r2, #2
 800623c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2201      	movs	r2, #1
 8006242:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	699b      	ldr	r3, [r3, #24]
 800624a:	f003 0303 	and.w	r3, r3, #3
 800624e:	2b00      	cmp	r3, #0
 8006250:	d003      	beq.n	800625a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006252:	6878      	ldr	r0, [r7, #4]
 8006254:	f000 fb13 	bl	800687e <HAL_TIM_IC_CaptureCallback>
 8006258:	e005      	b.n	8006266 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800625a:	6878      	ldr	r0, [r7, #4]
 800625c:	f000 fb05 	bl	800686a <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006260:	6878      	ldr	r0, [r7, #4]
 8006262:	f000 fb16 	bl	8006892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006266:	687b      	ldr	r3, [r7, #4]
 8006268:	2200      	movs	r2, #0
 800626a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	691b      	ldr	r3, [r3, #16]
 8006272:	f003 0304 	and.w	r3, r3, #4
 8006276:	2b04      	cmp	r3, #4
 8006278:	d122      	bne.n	80062c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	681b      	ldr	r3, [r3, #0]
 800627e:	68db      	ldr	r3, [r3, #12]
 8006280:	f003 0304 	and.w	r3, r3, #4
 8006284:	2b04      	cmp	r3, #4
 8006286:	d11b      	bne.n	80062c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	681b      	ldr	r3, [r3, #0]
 800628c:	f06f 0204 	mvn.w	r2, #4
 8006290:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	2202      	movs	r2, #2
 8006296:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	699b      	ldr	r3, [r3, #24]
 800629e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d003      	beq.n	80062ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062a6:	6878      	ldr	r0, [r7, #4]
 80062a8:	f000 fae9 	bl	800687e <HAL_TIM_IC_CaptureCallback>
 80062ac:	e005      	b.n	80062ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80062ae:	6878      	ldr	r0, [r7, #4]
 80062b0:	f000 fadb 	bl	800686a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80062b4:	6878      	ldr	r0, [r7, #4]
 80062b6:	f000 faec 	bl	8006892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2200      	movs	r2, #0
 80062be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691b      	ldr	r3, [r3, #16]
 80062c6:	f003 0308 	and.w	r3, r3, #8
 80062ca:	2b08      	cmp	r3, #8
 80062cc:	d122      	bne.n	8006314 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	68db      	ldr	r3, [r3, #12]
 80062d4:	f003 0308 	and.w	r3, r3, #8
 80062d8:	2b08      	cmp	r3, #8
 80062da:	d11b      	bne.n	8006314 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	681b      	ldr	r3, [r3, #0]
 80062e0:	f06f 0208 	mvn.w	r2, #8
 80062e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2204      	movs	r2, #4
 80062ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	69db      	ldr	r3, [r3, #28]
 80062f2:	f003 0303 	and.w	r3, r3, #3
 80062f6:	2b00      	cmp	r3, #0
 80062f8:	d003      	beq.n	8006302 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80062fa:	6878      	ldr	r0, [r7, #4]
 80062fc:	f000 fabf 	bl	800687e <HAL_TIM_IC_CaptureCallback>
 8006300:	e005      	b.n	800630e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006302:	6878      	ldr	r0, [r7, #4]
 8006304:	f000 fab1 	bl	800686a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006308:	6878      	ldr	r0, [r7, #4]
 800630a:	f000 fac2 	bl	8006892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	2200      	movs	r2, #0
 8006312:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	691b      	ldr	r3, [r3, #16]
 800631a:	f003 0310 	and.w	r3, r3, #16
 800631e:	2b10      	cmp	r3, #16
 8006320:	d122      	bne.n	8006368 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	681b      	ldr	r3, [r3, #0]
 8006326:	68db      	ldr	r3, [r3, #12]
 8006328:	f003 0310 	and.w	r3, r3, #16
 800632c:	2b10      	cmp	r3, #16
 800632e:	d11b      	bne.n	8006368 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	681b      	ldr	r3, [r3, #0]
 8006334:	f06f 0210 	mvn.w	r2, #16
 8006338:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	2208      	movs	r2, #8
 800633e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006340:	687b      	ldr	r3, [r7, #4]
 8006342:	681b      	ldr	r3, [r3, #0]
 8006344:	69db      	ldr	r3, [r3, #28]
 8006346:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800634a:	2b00      	cmp	r3, #0
 800634c:	d003      	beq.n	8006356 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f000 fa95 	bl	800687e <HAL_TIM_IC_CaptureCallback>
 8006354:	e005      	b.n	8006362 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006356:	6878      	ldr	r0, [r7, #4]
 8006358:	f000 fa87 	bl	800686a <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800635c:	6878      	ldr	r0, [r7, #4]
 800635e:	f000 fa98 	bl	8006892 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	2200      	movs	r2, #0
 8006366:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	681b      	ldr	r3, [r3, #0]
 800636c:	691b      	ldr	r3, [r3, #16]
 800636e:	f003 0301 	and.w	r3, r3, #1
 8006372:	2b01      	cmp	r3, #1
 8006374:	d10e      	bne.n	8006394 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	681b      	ldr	r3, [r3, #0]
 800637a:	68db      	ldr	r3, [r3, #12]
 800637c:	f003 0301 	and.w	r3, r3, #1
 8006380:	2b01      	cmp	r3, #1
 8006382:	d107      	bne.n	8006394 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006384:	687b      	ldr	r3, [r7, #4]
 8006386:	681b      	ldr	r3, [r3, #0]
 8006388:	f06f 0201 	mvn.w	r2, #1
 800638c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800638e:	6878      	ldr	r0, [r7, #4]
 8006390:	f7fb f958 	bl	8001644 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006394:	687b      	ldr	r3, [r7, #4]
 8006396:	681b      	ldr	r3, [r3, #0]
 8006398:	691b      	ldr	r3, [r3, #16]
 800639a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800639e:	2b80      	cmp	r3, #128	; 0x80
 80063a0:	d10e      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80063a2:	687b      	ldr	r3, [r7, #4]
 80063a4:	681b      	ldr	r3, [r3, #0]
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80063ac:	2b80      	cmp	r3, #128	; 0x80
 80063ae:	d107      	bne.n	80063c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80063b0:	687b      	ldr	r3, [r7, #4]
 80063b2:	681b      	ldr	r3, [r3, #0]
 80063b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80063b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80063ba:	6878      	ldr	r0, [r7, #4]
 80063bc:	f000 fee0 	bl	8007180 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	681b      	ldr	r3, [r3, #0]
 80063c4:	691b      	ldr	r3, [r3, #16]
 80063c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063ca:	2b40      	cmp	r3, #64	; 0x40
 80063cc:	d10e      	bne.n	80063ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	68db      	ldr	r3, [r3, #12]
 80063d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d107      	bne.n	80063ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80063e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80063e6:	6878      	ldr	r0, [r7, #4]
 80063e8:	f000 fa5d 	bl	80068a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	691b      	ldr	r3, [r3, #16]
 80063f2:	f003 0320 	and.w	r3, r3, #32
 80063f6:	2b20      	cmp	r3, #32
 80063f8:	d10e      	bne.n	8006418 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	681b      	ldr	r3, [r3, #0]
 80063fe:	68db      	ldr	r3, [r3, #12]
 8006400:	f003 0320 	and.w	r3, r3, #32
 8006404:	2b20      	cmp	r3, #32
 8006406:	d107      	bne.n	8006418 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f06f 0220 	mvn.w	r2, #32
 8006410:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f000 feaa 	bl	800716c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006418:	bf00      	nop
 800641a:	3708      	adds	r7, #8
 800641c:	46bd      	mov	sp, r7
 800641e:	bd80      	pop	{r7, pc}

08006420 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8006420:	b580      	push	{r7, lr}
 8006422:	b086      	sub	sp, #24
 8006424:	af00      	add	r7, sp, #0
 8006426:	60f8      	str	r0, [r7, #12]
 8006428:	60b9      	str	r1, [r7, #8]
 800642a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800642c:	2300      	movs	r3, #0
 800642e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006430:	68fb      	ldr	r3, [r7, #12]
 8006432:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006436:	2b01      	cmp	r3, #1
 8006438:	d101      	bne.n	800643e <HAL_TIM_IC_ConfigChannel+0x1e>
 800643a:	2302      	movs	r3, #2
 800643c:	e088      	b.n	8006550 <HAL_TIM_IC_ConfigChannel+0x130>
 800643e:	68fb      	ldr	r3, [r7, #12]
 8006440:	2201      	movs	r2, #1
 8006442:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	2b00      	cmp	r3, #0
 800644a:	d11b      	bne.n	8006484 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	6818      	ldr	r0, [r3, #0]
 8006450:	68bb      	ldr	r3, [r7, #8]
 8006452:	6819      	ldr	r1, [r3, #0]
 8006454:	68bb      	ldr	r3, [r7, #8]
 8006456:	685a      	ldr	r2, [r3, #4]
 8006458:	68bb      	ldr	r3, [r7, #8]
 800645a:	68db      	ldr	r3, [r3, #12]
 800645c:	f000 fc3a 	bl	8006cd4 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	699a      	ldr	r2, [r3, #24]
 8006466:	68fb      	ldr	r3, [r7, #12]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	f022 020c 	bic.w	r2, r2, #12
 800646e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8006470:	68fb      	ldr	r3, [r7, #12]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	6999      	ldr	r1, [r3, #24]
 8006476:	68bb      	ldr	r3, [r7, #8]
 8006478:	689a      	ldr	r2, [r3, #8]
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	430a      	orrs	r2, r1
 8006480:	619a      	str	r2, [r3, #24]
 8006482:	e060      	b.n	8006546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	2b04      	cmp	r3, #4
 8006488:	d11c      	bne.n	80064c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	6818      	ldr	r0, [r3, #0]
 800648e:	68bb      	ldr	r3, [r7, #8]
 8006490:	6819      	ldr	r1, [r3, #0]
 8006492:	68bb      	ldr	r3, [r7, #8]
 8006494:	685a      	ldr	r2, [r3, #4]
 8006496:	68bb      	ldr	r3, [r7, #8]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	f000 fcb2 	bl	8006e02 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	699a      	ldr	r2, [r3, #24]
 80064a4:	68fb      	ldr	r3, [r7, #12]
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80064ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	681b      	ldr	r3, [r3, #0]
 80064b2:	6999      	ldr	r1, [r3, #24]
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	689b      	ldr	r3, [r3, #8]
 80064b8:	021a      	lsls	r2, r3, #8
 80064ba:	68fb      	ldr	r3, [r7, #12]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	430a      	orrs	r2, r1
 80064c0:	619a      	str	r2, [r3, #24]
 80064c2:	e040      	b.n	8006546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	2b08      	cmp	r3, #8
 80064c8:	d11b      	bne.n	8006502 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80064ca:	68fb      	ldr	r3, [r7, #12]
 80064cc:	6818      	ldr	r0, [r3, #0]
 80064ce:	68bb      	ldr	r3, [r7, #8]
 80064d0:	6819      	ldr	r1, [r3, #0]
 80064d2:	68bb      	ldr	r3, [r7, #8]
 80064d4:	685a      	ldr	r2, [r3, #4]
 80064d6:	68bb      	ldr	r3, [r7, #8]
 80064d8:	68db      	ldr	r3, [r3, #12]
 80064da:	f000 fcff 	bl	8006edc <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80064de:	68fb      	ldr	r3, [r7, #12]
 80064e0:	681b      	ldr	r3, [r3, #0]
 80064e2:	69da      	ldr	r2, [r3, #28]
 80064e4:	68fb      	ldr	r3, [r7, #12]
 80064e6:	681b      	ldr	r3, [r3, #0]
 80064e8:	f022 020c 	bic.w	r2, r2, #12
 80064ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80064ee:	68fb      	ldr	r3, [r7, #12]
 80064f0:	681b      	ldr	r3, [r3, #0]
 80064f2:	69d9      	ldr	r1, [r3, #28]
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	689a      	ldr	r2, [r3, #8]
 80064f8:	68fb      	ldr	r3, [r7, #12]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	430a      	orrs	r2, r1
 80064fe:	61da      	str	r2, [r3, #28]
 8006500:	e021      	b.n	8006546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006502:	687b      	ldr	r3, [r7, #4]
 8006504:	2b0c      	cmp	r3, #12
 8006506:	d11c      	bne.n	8006542 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	6818      	ldr	r0, [r3, #0]
 800650c:	68bb      	ldr	r3, [r7, #8]
 800650e:	6819      	ldr	r1, [r3, #0]
 8006510:	68bb      	ldr	r3, [r7, #8]
 8006512:	685a      	ldr	r2, [r3, #4]
 8006514:	68bb      	ldr	r3, [r7, #8]
 8006516:	68db      	ldr	r3, [r3, #12]
 8006518:	f000 fd1c 	bl	8006f54 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800651c:	68fb      	ldr	r3, [r7, #12]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	69da      	ldr	r2, [r3, #28]
 8006522:	68fb      	ldr	r3, [r7, #12]
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800652a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	69d9      	ldr	r1, [r3, #28]
 8006532:	68bb      	ldr	r3, [r7, #8]
 8006534:	689b      	ldr	r3, [r3, #8]
 8006536:	021a      	lsls	r2, r3, #8
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	430a      	orrs	r2, r1
 800653e:	61da      	str	r2, [r3, #28]
 8006540:	e001      	b.n	8006546 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006542:	2301      	movs	r3, #1
 8006544:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	2200      	movs	r2, #0
 800654a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800654e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3718      	adds	r7, #24
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006558:	b580      	push	{r7, lr}
 800655a:	b086      	sub	sp, #24
 800655c:	af00      	add	r7, sp, #0
 800655e:	60f8      	str	r0, [r7, #12]
 8006560:	60b9      	str	r1, [r7, #8]
 8006562:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006564:	2300      	movs	r3, #0
 8006566:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800656e:	2b01      	cmp	r3, #1
 8006570:	d101      	bne.n	8006576 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006572:	2302      	movs	r3, #2
 8006574:	e0ae      	b.n	80066d4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	2201      	movs	r2, #1
 800657a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2b0c      	cmp	r3, #12
 8006582:	f200 809f 	bhi.w	80066c4 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006586:	a201      	add	r2, pc, #4	; (adr r2, 800658c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006588:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800658c:	080065c1 	.word	0x080065c1
 8006590:	080066c5 	.word	0x080066c5
 8006594:	080066c5 	.word	0x080066c5
 8006598:	080066c5 	.word	0x080066c5
 800659c:	08006601 	.word	0x08006601
 80065a0:	080066c5 	.word	0x080066c5
 80065a4:	080066c5 	.word	0x080066c5
 80065a8:	080066c5 	.word	0x080066c5
 80065ac:	08006643 	.word	0x08006643
 80065b0:	080066c5 	.word	0x080066c5
 80065b4:	080066c5 	.word	0x080066c5
 80065b8:	080066c5 	.word	0x080066c5
 80065bc:	08006683 	.word	0x08006683
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80065c0:	68fb      	ldr	r3, [r7, #12]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	68b9      	ldr	r1, [r7, #8]
 80065c6:	4618      	mov	r0, r3
 80065c8:	f000 f9f8 	bl	80069bc <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	681b      	ldr	r3, [r3, #0]
 80065d0:	699a      	ldr	r2, [r3, #24]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	f042 0208 	orr.w	r2, r2, #8
 80065da:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80065dc:	68fb      	ldr	r3, [r7, #12]
 80065de:	681b      	ldr	r3, [r3, #0]
 80065e0:	699a      	ldr	r2, [r3, #24]
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	f022 0204 	bic.w	r2, r2, #4
 80065ea:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	6999      	ldr	r1, [r3, #24]
 80065f2:	68bb      	ldr	r3, [r7, #8]
 80065f4:	691a      	ldr	r2, [r3, #16]
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	430a      	orrs	r2, r1
 80065fc:	619a      	str	r2, [r3, #24]
      break;
 80065fe:	e064      	b.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006600:	68fb      	ldr	r3, [r7, #12]
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	68b9      	ldr	r1, [r7, #8]
 8006606:	4618      	mov	r0, r3
 8006608:	f000 fa3e 	bl	8006a88 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800660c:	68fb      	ldr	r3, [r7, #12]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	699a      	ldr	r2, [r3, #24]
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	681b      	ldr	r3, [r3, #0]
 8006616:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800661a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	699a      	ldr	r2, [r3, #24]
 8006622:	68fb      	ldr	r3, [r7, #12]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800662a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	6999      	ldr	r1, [r3, #24]
 8006632:	68bb      	ldr	r3, [r7, #8]
 8006634:	691b      	ldr	r3, [r3, #16]
 8006636:	021a      	lsls	r2, r3, #8
 8006638:	68fb      	ldr	r3, [r7, #12]
 800663a:	681b      	ldr	r3, [r3, #0]
 800663c:	430a      	orrs	r2, r1
 800663e:	619a      	str	r2, [r3, #24]
      break;
 8006640:	e043      	b.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	68b9      	ldr	r1, [r7, #8]
 8006648:	4618      	mov	r0, r3
 800664a:	f000 fa89 	bl	8006b60 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	681b      	ldr	r3, [r3, #0]
 8006652:	69da      	ldr	r2, [r3, #28]
 8006654:	68fb      	ldr	r3, [r7, #12]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	f042 0208 	orr.w	r2, r2, #8
 800665c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800665e:	68fb      	ldr	r3, [r7, #12]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	69da      	ldr	r2, [r3, #28]
 8006664:	68fb      	ldr	r3, [r7, #12]
 8006666:	681b      	ldr	r3, [r3, #0]
 8006668:	f022 0204 	bic.w	r2, r2, #4
 800666c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	681b      	ldr	r3, [r3, #0]
 8006672:	69d9      	ldr	r1, [r3, #28]
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	691a      	ldr	r2, [r3, #16]
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	430a      	orrs	r2, r1
 800667e:	61da      	str	r2, [r3, #28]
      break;
 8006680:	e023      	b.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006682:	68fb      	ldr	r3, [r7, #12]
 8006684:	681b      	ldr	r3, [r3, #0]
 8006686:	68b9      	ldr	r1, [r7, #8]
 8006688:	4618      	mov	r0, r3
 800668a:	f000 fad3 	bl	8006c34 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800668e:	68fb      	ldr	r3, [r7, #12]
 8006690:	681b      	ldr	r3, [r3, #0]
 8006692:	69da      	ldr	r2, [r3, #28]
 8006694:	68fb      	ldr	r3, [r7, #12]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800669c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800669e:	68fb      	ldr	r3, [r7, #12]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	69da      	ldr	r2, [r3, #28]
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	681b      	ldr	r3, [r3, #0]
 80066a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80066ac:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80066ae:	68fb      	ldr	r3, [r7, #12]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	69d9      	ldr	r1, [r3, #28]
 80066b4:	68bb      	ldr	r3, [r7, #8]
 80066b6:	691b      	ldr	r3, [r3, #16]
 80066b8:	021a      	lsls	r2, r3, #8
 80066ba:	68fb      	ldr	r3, [r7, #12]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	430a      	orrs	r2, r1
 80066c0:	61da      	str	r2, [r3, #28]
      break;
 80066c2:	e002      	b.n	80066ca <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80066c4:	2301      	movs	r3, #1
 80066c6:	75fb      	strb	r3, [r7, #23]
      break;
 80066c8:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	2200      	movs	r2, #0
 80066ce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80066d2:	7dfb      	ldrb	r3, [r7, #23]
}
 80066d4:	4618      	mov	r0, r3
 80066d6:	3718      	adds	r7, #24
 80066d8:	46bd      	mov	sp, r7
 80066da:	bd80      	pop	{r7, pc}

080066dc <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	b084      	sub	sp, #16
 80066e0:	af00      	add	r7, sp, #0
 80066e2:	6078      	str	r0, [r7, #4]
 80066e4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80066e6:	2300      	movs	r3, #0
 80066e8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066f0:	2b01      	cmp	r3, #1
 80066f2:	d101      	bne.n	80066f8 <HAL_TIM_ConfigClockSource+0x1c>
 80066f4:	2302      	movs	r3, #2
 80066f6:	e0b4      	b.n	8006862 <HAL_TIM_ConfigClockSource+0x186>
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	2201      	movs	r2, #1
 80066fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006700:	687b      	ldr	r3, [r7, #4]
 8006702:	2202      	movs	r2, #2
 8006704:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	681b      	ldr	r3, [r3, #0]
 800670c:	689b      	ldr	r3, [r3, #8]
 800670e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006710:	68bb      	ldr	r3, [r7, #8]
 8006712:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006716:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006718:	68bb      	ldr	r3, [r7, #8]
 800671a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800671e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	68ba      	ldr	r2, [r7, #8]
 8006726:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006728:	683b      	ldr	r3, [r7, #0]
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006730:	d03e      	beq.n	80067b0 <HAL_TIM_ConfigClockSource+0xd4>
 8006732:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006736:	f200 8087 	bhi.w	8006848 <HAL_TIM_ConfigClockSource+0x16c>
 800673a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800673e:	f000 8086 	beq.w	800684e <HAL_TIM_ConfigClockSource+0x172>
 8006742:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006746:	d87f      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x16c>
 8006748:	2b70      	cmp	r3, #112	; 0x70
 800674a:	d01a      	beq.n	8006782 <HAL_TIM_ConfigClockSource+0xa6>
 800674c:	2b70      	cmp	r3, #112	; 0x70
 800674e:	d87b      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x16c>
 8006750:	2b60      	cmp	r3, #96	; 0x60
 8006752:	d050      	beq.n	80067f6 <HAL_TIM_ConfigClockSource+0x11a>
 8006754:	2b60      	cmp	r3, #96	; 0x60
 8006756:	d877      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x16c>
 8006758:	2b50      	cmp	r3, #80	; 0x50
 800675a:	d03c      	beq.n	80067d6 <HAL_TIM_ConfigClockSource+0xfa>
 800675c:	2b50      	cmp	r3, #80	; 0x50
 800675e:	d873      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x16c>
 8006760:	2b40      	cmp	r3, #64	; 0x40
 8006762:	d058      	beq.n	8006816 <HAL_TIM_ConfigClockSource+0x13a>
 8006764:	2b40      	cmp	r3, #64	; 0x40
 8006766:	d86f      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x16c>
 8006768:	2b30      	cmp	r3, #48	; 0x30
 800676a:	d064      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x15a>
 800676c:	2b30      	cmp	r3, #48	; 0x30
 800676e:	d86b      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x16c>
 8006770:	2b20      	cmp	r3, #32
 8006772:	d060      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x15a>
 8006774:	2b20      	cmp	r3, #32
 8006776:	d867      	bhi.n	8006848 <HAL_TIM_ConfigClockSource+0x16c>
 8006778:	2b00      	cmp	r3, #0
 800677a:	d05c      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x15a>
 800677c:	2b10      	cmp	r3, #16
 800677e:	d05a      	beq.n	8006836 <HAL_TIM_ConfigClockSource+0x15a>
 8006780:	e062      	b.n	8006848 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	6818      	ldr	r0, [r3, #0]
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	6899      	ldr	r1, [r3, #8]
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	685a      	ldr	r2, [r3, #4]
 800678e:	683b      	ldr	r3, [r7, #0]
 8006790:	68db      	ldr	r3, [r3, #12]
 8006792:	f000 fc37 	bl	8007004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	689b      	ldr	r3, [r3, #8]
 800679c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800679e:	68bb      	ldr	r3, [r7, #8]
 80067a0:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80067a4:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	68ba      	ldr	r2, [r7, #8]
 80067ac:	609a      	str	r2, [r3, #8]
      break;
 80067ae:	e04f      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	6818      	ldr	r0, [r3, #0]
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	6899      	ldr	r1, [r3, #8]
 80067b8:	683b      	ldr	r3, [r7, #0]
 80067ba:	685a      	ldr	r2, [r3, #4]
 80067bc:	683b      	ldr	r3, [r7, #0]
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f000 fc20 	bl	8007004 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	689a      	ldr	r2, [r3, #8]
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80067d2:	609a      	str	r2, [r3, #8]
      break;
 80067d4:	e03c      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	6818      	ldr	r0, [r3, #0]
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	6859      	ldr	r1, [r3, #4]
 80067de:	683b      	ldr	r3, [r7, #0]
 80067e0:	68db      	ldr	r3, [r3, #12]
 80067e2:	461a      	mov	r2, r3
 80067e4:	f000 fade 	bl	8006da4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	2150      	movs	r1, #80	; 0x50
 80067ee:	4618      	mov	r0, r3
 80067f0:	f000 fbed 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 80067f4:	e02c      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	683b      	ldr	r3, [r7, #0]
 80067fc:	6859      	ldr	r1, [r3, #4]
 80067fe:	683b      	ldr	r3, [r7, #0]
 8006800:	68db      	ldr	r3, [r3, #12]
 8006802:	461a      	mov	r2, r3
 8006804:	f000 fb3a 	bl	8006e7c <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	2160      	movs	r1, #96	; 0x60
 800680e:	4618      	mov	r0, r3
 8006810:	f000 fbdd 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006814:	e01c      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	6818      	ldr	r0, [r3, #0]
 800681a:	683b      	ldr	r3, [r7, #0]
 800681c:	6859      	ldr	r1, [r3, #4]
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	68db      	ldr	r3, [r3, #12]
 8006822:	461a      	mov	r2, r3
 8006824:	f000 fabe 	bl	8006da4 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006828:	687b      	ldr	r3, [r7, #4]
 800682a:	681b      	ldr	r3, [r3, #0]
 800682c:	2140      	movs	r1, #64	; 0x40
 800682e:	4618      	mov	r0, r3
 8006830:	f000 fbcd 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006834:	e00c      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	681a      	ldr	r2, [r3, #0]
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	681b      	ldr	r3, [r3, #0]
 800683e:	4619      	mov	r1, r3
 8006840:	4610      	mov	r0, r2
 8006842:	f000 fbc4 	bl	8006fce <TIM_ITRx_SetConfig>
      break;
 8006846:	e003      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006848:	2301      	movs	r3, #1
 800684a:	73fb      	strb	r3, [r7, #15]
      break;
 800684c:	e000      	b.n	8006850 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800684e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006850:	687b      	ldr	r3, [r7, #4]
 8006852:	2201      	movs	r2, #1
 8006854:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2200      	movs	r2, #0
 800685c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006860:	7bfb      	ldrb	r3, [r7, #15]
}
 8006862:	4618      	mov	r0, r3
 8006864:	3710      	adds	r7, #16
 8006866:	46bd      	mov	sp, r7
 8006868:	bd80      	pop	{r7, pc}

0800686a <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800686a:	b480      	push	{r7}
 800686c:	b083      	sub	sp, #12
 800686e:	af00      	add	r7, sp, #0
 8006870:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8006872:	bf00      	nop
 8006874:	370c      	adds	r7, #12
 8006876:	46bd      	mov	sp, r7
 8006878:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687c:	4770      	bx	lr

0800687e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800687e:	b480      	push	{r7}
 8006880:	b083      	sub	sp, #12
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006886:	bf00      	nop
 8006888:	370c      	adds	r7, #12
 800688a:	46bd      	mov	sp, r7
 800688c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006890:	4770      	bx	lr

08006892 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006892:	b480      	push	{r7}
 8006894:	b083      	sub	sp, #12
 8006896:	af00      	add	r7, sp, #0
 8006898:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800689a:	bf00      	nop
 800689c:	370c      	adds	r7, #12
 800689e:	46bd      	mov	sp, r7
 80068a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a4:	4770      	bx	lr

080068a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80068a6:	b480      	push	{r7}
 80068a8:	b083      	sub	sp, #12
 80068aa:	af00      	add	r7, sp, #0
 80068ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80068ae:	bf00      	nop
 80068b0:	370c      	adds	r7, #12
 80068b2:	46bd      	mov	sp, r7
 80068b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068b8:	4770      	bx	lr
	...

080068bc <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80068bc:	b480      	push	{r7}
 80068be:	b085      	sub	sp, #20
 80068c0:	af00      	add	r7, sp, #0
 80068c2:	6078      	str	r0, [r7, #4]
 80068c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80068c6:	687b      	ldr	r3, [r7, #4]
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	4a34      	ldr	r2, [pc, #208]	; (80069a0 <TIM_Base_SetConfig+0xe4>)
 80068d0:	4293      	cmp	r3, r2
 80068d2:	d00f      	beq.n	80068f4 <TIM_Base_SetConfig+0x38>
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80068da:	d00b      	beq.n	80068f4 <TIM_Base_SetConfig+0x38>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	4a31      	ldr	r2, [pc, #196]	; (80069a4 <TIM_Base_SetConfig+0xe8>)
 80068e0:	4293      	cmp	r3, r2
 80068e2:	d007      	beq.n	80068f4 <TIM_Base_SetConfig+0x38>
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	4a30      	ldr	r2, [pc, #192]	; (80069a8 <TIM_Base_SetConfig+0xec>)
 80068e8:	4293      	cmp	r3, r2
 80068ea:	d003      	beq.n	80068f4 <TIM_Base_SetConfig+0x38>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	4a2f      	ldr	r2, [pc, #188]	; (80069ac <TIM_Base_SetConfig+0xf0>)
 80068f0:	4293      	cmp	r3, r2
 80068f2:	d108      	bne.n	8006906 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80068f4:	68fb      	ldr	r3, [r7, #12]
 80068f6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80068fa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80068fc:	683b      	ldr	r3, [r7, #0]
 80068fe:	685b      	ldr	r3, [r3, #4]
 8006900:	68fa      	ldr	r2, [r7, #12]
 8006902:	4313      	orrs	r3, r2
 8006904:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	4a25      	ldr	r2, [pc, #148]	; (80069a0 <TIM_Base_SetConfig+0xe4>)
 800690a:	4293      	cmp	r3, r2
 800690c:	d01b      	beq.n	8006946 <TIM_Base_SetConfig+0x8a>
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006914:	d017      	beq.n	8006946 <TIM_Base_SetConfig+0x8a>
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	4a22      	ldr	r2, [pc, #136]	; (80069a4 <TIM_Base_SetConfig+0xe8>)
 800691a:	4293      	cmp	r3, r2
 800691c:	d013      	beq.n	8006946 <TIM_Base_SetConfig+0x8a>
 800691e:	687b      	ldr	r3, [r7, #4]
 8006920:	4a21      	ldr	r2, [pc, #132]	; (80069a8 <TIM_Base_SetConfig+0xec>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d00f      	beq.n	8006946 <TIM_Base_SetConfig+0x8a>
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	4a20      	ldr	r2, [pc, #128]	; (80069ac <TIM_Base_SetConfig+0xf0>)
 800692a:	4293      	cmp	r3, r2
 800692c:	d00b      	beq.n	8006946 <TIM_Base_SetConfig+0x8a>
 800692e:	687b      	ldr	r3, [r7, #4]
 8006930:	4a1f      	ldr	r2, [pc, #124]	; (80069b0 <TIM_Base_SetConfig+0xf4>)
 8006932:	4293      	cmp	r3, r2
 8006934:	d007      	beq.n	8006946 <TIM_Base_SetConfig+0x8a>
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	4a1e      	ldr	r2, [pc, #120]	; (80069b4 <TIM_Base_SetConfig+0xf8>)
 800693a:	4293      	cmp	r3, r2
 800693c:	d003      	beq.n	8006946 <TIM_Base_SetConfig+0x8a>
 800693e:	687b      	ldr	r3, [r7, #4]
 8006940:	4a1d      	ldr	r2, [pc, #116]	; (80069b8 <TIM_Base_SetConfig+0xfc>)
 8006942:	4293      	cmp	r3, r2
 8006944:	d108      	bne.n	8006958 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800694c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800694e:	683b      	ldr	r3, [r7, #0]
 8006950:	68db      	ldr	r3, [r3, #12]
 8006952:	68fa      	ldr	r2, [r7, #12]
 8006954:	4313      	orrs	r3, r2
 8006956:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8006958:	68fb      	ldr	r3, [r7, #12]
 800695a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800695e:	683b      	ldr	r3, [r7, #0]
 8006960:	695b      	ldr	r3, [r3, #20]
 8006962:	4313      	orrs	r3, r2
 8006964:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	68fa      	ldr	r2, [r7, #12]
 800696a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800696c:	683b      	ldr	r3, [r7, #0]
 800696e:	689a      	ldr	r2, [r3, #8]
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006974:	683b      	ldr	r3, [r7, #0]
 8006976:	681a      	ldr	r2, [r3, #0]
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	4a08      	ldr	r2, [pc, #32]	; (80069a0 <TIM_Base_SetConfig+0xe4>)
 8006980:	4293      	cmp	r3, r2
 8006982:	d103      	bne.n	800698c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006984:	683b      	ldr	r3, [r7, #0]
 8006986:	691a      	ldr	r2, [r3, #16]
 8006988:	687b      	ldr	r3, [r7, #4]
 800698a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2201      	movs	r2, #1
 8006990:	615a      	str	r2, [r3, #20]
}
 8006992:	bf00      	nop
 8006994:	3714      	adds	r7, #20
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40010000 	.word	0x40010000
 80069a4:	40000400 	.word	0x40000400
 80069a8:	40000800 	.word	0x40000800
 80069ac:	40000c00 	.word	0x40000c00
 80069b0:	40014000 	.word	0x40014000
 80069b4:	40014400 	.word	0x40014400
 80069b8:	40014800 	.word	0x40014800

080069bc <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80069bc:	b480      	push	{r7}
 80069be:	b087      	sub	sp, #28
 80069c0:	af00      	add	r7, sp, #0
 80069c2:	6078      	str	r0, [r7, #4]
 80069c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80069c6:	687b      	ldr	r3, [r7, #4]
 80069c8:	6a1b      	ldr	r3, [r3, #32]
 80069ca:	f023 0201 	bic.w	r2, r3, #1
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	6a1b      	ldr	r3, [r3, #32]
 80069d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	685b      	ldr	r3, [r3, #4]
 80069dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80069de:	687b      	ldr	r3, [r7, #4]
 80069e0:	699b      	ldr	r3, [r3, #24]
 80069e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80069e4:	68fb      	ldr	r3, [r7, #12]
 80069e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80069ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80069ec:	68fb      	ldr	r3, [r7, #12]
 80069ee:	f023 0303 	bic.w	r3, r3, #3
 80069f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80069f4:	683b      	ldr	r3, [r7, #0]
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	68fa      	ldr	r2, [r7, #12]
 80069fa:	4313      	orrs	r3, r2
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80069fe:	697b      	ldr	r3, [r7, #20]
 8006a00:	f023 0302 	bic.w	r3, r3, #2
 8006a04:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8006a06:	683b      	ldr	r3, [r7, #0]
 8006a08:	689b      	ldr	r3, [r3, #8]
 8006a0a:	697a      	ldr	r2, [r7, #20]
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	4a1c      	ldr	r2, [pc, #112]	; (8006a84 <TIM_OC1_SetConfig+0xc8>)
 8006a14:	4293      	cmp	r3, r2
 8006a16:	d10c      	bne.n	8006a32 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8006a18:	697b      	ldr	r3, [r7, #20]
 8006a1a:	f023 0308 	bic.w	r3, r3, #8
 8006a1e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006a20:	683b      	ldr	r3, [r7, #0]
 8006a22:	68db      	ldr	r3, [r3, #12]
 8006a24:	697a      	ldr	r2, [r7, #20]
 8006a26:	4313      	orrs	r3, r2
 8006a28:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8006a2a:	697b      	ldr	r3, [r7, #20]
 8006a2c:	f023 0304 	bic.w	r3, r3, #4
 8006a30:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	4a13      	ldr	r2, [pc, #76]	; (8006a84 <TIM_OC1_SetConfig+0xc8>)
 8006a36:	4293      	cmp	r3, r2
 8006a38:	d111      	bne.n	8006a5e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8006a3a:	693b      	ldr	r3, [r7, #16]
 8006a3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006a40:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8006a42:	693b      	ldr	r3, [r7, #16]
 8006a44:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006a48:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8006a4a:	683b      	ldr	r3, [r7, #0]
 8006a4c:	695b      	ldr	r3, [r3, #20]
 8006a4e:	693a      	ldr	r2, [r7, #16]
 8006a50:	4313      	orrs	r3, r2
 8006a52:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	699b      	ldr	r3, [r3, #24]
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006a5e:	687b      	ldr	r3, [r7, #4]
 8006a60:	693a      	ldr	r2, [r7, #16]
 8006a62:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	68fa      	ldr	r2, [r7, #12]
 8006a68:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8006a6a:	683b      	ldr	r3, [r7, #0]
 8006a6c:	685a      	ldr	r2, [r3, #4]
 8006a6e:	687b      	ldr	r3, [r7, #4]
 8006a70:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	697a      	ldr	r2, [r7, #20]
 8006a76:	621a      	str	r2, [r3, #32]
}
 8006a78:	bf00      	nop
 8006a7a:	371c      	adds	r7, #28
 8006a7c:	46bd      	mov	sp, r7
 8006a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a82:	4770      	bx	lr
 8006a84:	40010000 	.word	0x40010000

08006a88 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006a88:	b480      	push	{r7}
 8006a8a:	b087      	sub	sp, #28
 8006a8c:	af00      	add	r7, sp, #0
 8006a8e:	6078      	str	r0, [r7, #4]
 8006a90:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	6a1b      	ldr	r3, [r3, #32]
 8006a96:	f023 0210 	bic.w	r2, r3, #16
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	6a1b      	ldr	r3, [r3, #32]
 8006aa2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	685b      	ldr	r3, [r3, #4]
 8006aa8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	699b      	ldr	r3, [r3, #24]
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006ab6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006ab8:	68fb      	ldr	r3, [r7, #12]
 8006aba:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006abe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006ac0:	683b      	ldr	r3, [r7, #0]
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	021b      	lsls	r3, r3, #8
 8006ac6:	68fa      	ldr	r2, [r7, #12]
 8006ac8:	4313      	orrs	r3, r2
 8006aca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006acc:	697b      	ldr	r3, [r7, #20]
 8006ace:	f023 0320 	bic.w	r3, r3, #32
 8006ad2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006ad4:	683b      	ldr	r3, [r7, #0]
 8006ad6:	689b      	ldr	r3, [r3, #8]
 8006ad8:	011b      	lsls	r3, r3, #4
 8006ada:	697a      	ldr	r2, [r7, #20]
 8006adc:	4313      	orrs	r3, r2
 8006ade:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	4a1e      	ldr	r2, [pc, #120]	; (8006b5c <TIM_OC2_SetConfig+0xd4>)
 8006ae4:	4293      	cmp	r3, r2
 8006ae6:	d10d      	bne.n	8006b04 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006ae8:	697b      	ldr	r3, [r7, #20]
 8006aea:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006aee:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006af0:	683b      	ldr	r3, [r7, #0]
 8006af2:	68db      	ldr	r3, [r3, #12]
 8006af4:	011b      	lsls	r3, r3, #4
 8006af6:	697a      	ldr	r2, [r7, #20]
 8006af8:	4313      	orrs	r3, r2
 8006afa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006afc:	697b      	ldr	r3, [r7, #20]
 8006afe:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006b02:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	4a15      	ldr	r2, [pc, #84]	; (8006b5c <TIM_OC2_SetConfig+0xd4>)
 8006b08:	4293      	cmp	r3, r2
 8006b0a:	d113      	bne.n	8006b34 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006b12:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006b14:	693b      	ldr	r3, [r7, #16]
 8006b16:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006b1a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006b1c:	683b      	ldr	r3, [r7, #0]
 8006b1e:	695b      	ldr	r3, [r3, #20]
 8006b20:	009b      	lsls	r3, r3, #2
 8006b22:	693a      	ldr	r2, [r7, #16]
 8006b24:	4313      	orrs	r3, r2
 8006b26:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8006b28:	683b      	ldr	r3, [r7, #0]
 8006b2a:	699b      	ldr	r3, [r3, #24]
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	693a      	ldr	r2, [r7, #16]
 8006b30:	4313      	orrs	r3, r2
 8006b32:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006b34:	687b      	ldr	r3, [r7, #4]
 8006b36:	693a      	ldr	r2, [r7, #16]
 8006b38:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	68fa      	ldr	r2, [r7, #12]
 8006b3e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8006b40:	683b      	ldr	r3, [r7, #0]
 8006b42:	685a      	ldr	r2, [r3, #4]
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	697a      	ldr	r2, [r7, #20]
 8006b4c:	621a      	str	r2, [r3, #32]
}
 8006b4e:	bf00      	nop
 8006b50:	371c      	adds	r7, #28
 8006b52:	46bd      	mov	sp, r7
 8006b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b58:	4770      	bx	lr
 8006b5a:	bf00      	nop
 8006b5c:	40010000 	.word	0x40010000

08006b60 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006b60:	b480      	push	{r7}
 8006b62:	b087      	sub	sp, #28
 8006b64:	af00      	add	r7, sp, #0
 8006b66:	6078      	str	r0, [r7, #4]
 8006b68:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	6a1b      	ldr	r3, [r3, #32]
 8006b6e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006b72:	687b      	ldr	r3, [r7, #4]
 8006b74:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006b76:	687b      	ldr	r3, [r7, #4]
 8006b78:	6a1b      	ldr	r3, [r3, #32]
 8006b7a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	685b      	ldr	r3, [r3, #4]
 8006b80:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	69db      	ldr	r3, [r3, #28]
 8006b86:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006b88:	68fb      	ldr	r3, [r7, #12]
 8006b8a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b8e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006b90:	68fb      	ldr	r3, [r7, #12]
 8006b92:	f023 0303 	bic.w	r3, r3, #3
 8006b96:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006b98:	683b      	ldr	r3, [r7, #0]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	68fa      	ldr	r2, [r7, #12]
 8006b9e:	4313      	orrs	r3, r2
 8006ba0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006ba2:	697b      	ldr	r3, [r7, #20]
 8006ba4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8006baa:	683b      	ldr	r3, [r7, #0]
 8006bac:	689b      	ldr	r3, [r3, #8]
 8006bae:	021b      	lsls	r3, r3, #8
 8006bb0:	697a      	ldr	r2, [r7, #20]
 8006bb2:	4313      	orrs	r3, r2
 8006bb4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	4a1d      	ldr	r2, [pc, #116]	; (8006c30 <TIM_OC3_SetConfig+0xd0>)
 8006bba:	4293      	cmp	r3, r2
 8006bbc:	d10d      	bne.n	8006bda <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006bbe:	697b      	ldr	r3, [r7, #20]
 8006bc0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bc4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	68db      	ldr	r3, [r3, #12]
 8006bca:	021b      	lsls	r3, r3, #8
 8006bcc:	697a      	ldr	r2, [r7, #20]
 8006bce:	4313      	orrs	r3, r2
 8006bd0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006bd2:	697b      	ldr	r3, [r7, #20]
 8006bd4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006bd8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	4a14      	ldr	r2, [pc, #80]	; (8006c30 <TIM_OC3_SetConfig+0xd0>)
 8006bde:	4293      	cmp	r3, r2
 8006be0:	d113      	bne.n	8006c0a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006be2:	693b      	ldr	r3, [r7, #16]
 8006be4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006be8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006bf0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006bf2:	683b      	ldr	r3, [r7, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	011b      	lsls	r3, r3, #4
 8006bf8:	693a      	ldr	r2, [r7, #16]
 8006bfa:	4313      	orrs	r3, r2
 8006bfc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006bfe:	683b      	ldr	r3, [r7, #0]
 8006c00:	699b      	ldr	r3, [r3, #24]
 8006c02:	011b      	lsls	r3, r3, #4
 8006c04:	693a      	ldr	r2, [r7, #16]
 8006c06:	4313      	orrs	r3, r2
 8006c08:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006c0a:	687b      	ldr	r3, [r7, #4]
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006c10:	687b      	ldr	r3, [r7, #4]
 8006c12:	68fa      	ldr	r2, [r7, #12]
 8006c14:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	685a      	ldr	r2, [r3, #4]
 8006c1a:	687b      	ldr	r3, [r7, #4]
 8006c1c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006c1e:	687b      	ldr	r3, [r7, #4]
 8006c20:	697a      	ldr	r2, [r7, #20]
 8006c22:	621a      	str	r2, [r3, #32]
}
 8006c24:	bf00      	nop
 8006c26:	371c      	adds	r7, #28
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c2e:	4770      	bx	lr
 8006c30:	40010000 	.word	0x40010000

08006c34 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b087      	sub	sp, #28
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006c3e:	687b      	ldr	r3, [r7, #4]
 8006c40:	6a1b      	ldr	r3, [r3, #32]
 8006c42:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6a1b      	ldr	r3, [r3, #32]
 8006c4e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006c56:	687b      	ldr	r3, [r7, #4]
 8006c58:	69db      	ldr	r3, [r3, #28]
 8006c5a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006c62:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006c64:	68fb      	ldr	r3, [r7, #12]
 8006c66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c6a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006c6c:	683b      	ldr	r3, [r7, #0]
 8006c6e:	681b      	ldr	r3, [r3, #0]
 8006c70:	021b      	lsls	r3, r3, #8
 8006c72:	68fa      	ldr	r2, [r7, #12]
 8006c74:	4313      	orrs	r3, r2
 8006c76:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006c78:	693b      	ldr	r3, [r7, #16]
 8006c7a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006c7e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006c80:	683b      	ldr	r3, [r7, #0]
 8006c82:	689b      	ldr	r3, [r3, #8]
 8006c84:	031b      	lsls	r3, r3, #12
 8006c86:	693a      	ldr	r2, [r7, #16]
 8006c88:	4313      	orrs	r3, r2
 8006c8a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006c8c:	687b      	ldr	r3, [r7, #4]
 8006c8e:	4a10      	ldr	r2, [pc, #64]	; (8006cd0 <TIM_OC4_SetConfig+0x9c>)
 8006c90:	4293      	cmp	r3, r2
 8006c92:	d109      	bne.n	8006ca8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006c94:	697b      	ldr	r3, [r7, #20]
 8006c96:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006c9a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006c9c:	683b      	ldr	r3, [r7, #0]
 8006c9e:	695b      	ldr	r3, [r3, #20]
 8006ca0:	019b      	lsls	r3, r3, #6
 8006ca2:	697a      	ldr	r2, [r7, #20]
 8006ca4:	4313      	orrs	r3, r2
 8006ca6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	697a      	ldr	r2, [r7, #20]
 8006cac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	68fa      	ldr	r2, [r7, #12]
 8006cb2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006cb4:	683b      	ldr	r3, [r7, #0]
 8006cb6:	685a      	ldr	r2, [r3, #4]
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	693a      	ldr	r2, [r7, #16]
 8006cc0:	621a      	str	r2, [r3, #32]
}
 8006cc2:	bf00      	nop
 8006cc4:	371c      	adds	r7, #28
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ccc:	4770      	bx	lr
 8006cce:	bf00      	nop
 8006cd0:	40010000 	.word	0x40010000

08006cd4 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006cd4:	b480      	push	{r7}
 8006cd6:	b087      	sub	sp, #28
 8006cd8:	af00      	add	r7, sp, #0
 8006cda:	60f8      	str	r0, [r7, #12]
 8006cdc:	60b9      	str	r1, [r7, #8]
 8006cde:	607a      	str	r2, [r7, #4]
 8006ce0:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6a1b      	ldr	r3, [r3, #32]
 8006ce6:	f023 0201 	bic.w	r2, r3, #1
 8006cea:	68fb      	ldr	r3, [r7, #12]
 8006cec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006cee:	68fb      	ldr	r3, [r7, #12]
 8006cf0:	699b      	ldr	r3, [r3, #24]
 8006cf2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006cf4:	68fb      	ldr	r3, [r7, #12]
 8006cf6:	6a1b      	ldr	r3, [r3, #32]
 8006cf8:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006cfa:	68fb      	ldr	r3, [r7, #12]
 8006cfc:	4a24      	ldr	r2, [pc, #144]	; (8006d90 <TIM_TI1_SetConfig+0xbc>)
 8006cfe:	4293      	cmp	r3, r2
 8006d00:	d013      	beq.n	8006d2a <TIM_TI1_SetConfig+0x56>
 8006d02:	68fb      	ldr	r3, [r7, #12]
 8006d04:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006d08:	d00f      	beq.n	8006d2a <TIM_TI1_SetConfig+0x56>
 8006d0a:	68fb      	ldr	r3, [r7, #12]
 8006d0c:	4a21      	ldr	r2, [pc, #132]	; (8006d94 <TIM_TI1_SetConfig+0xc0>)
 8006d0e:	4293      	cmp	r3, r2
 8006d10:	d00b      	beq.n	8006d2a <TIM_TI1_SetConfig+0x56>
 8006d12:	68fb      	ldr	r3, [r7, #12]
 8006d14:	4a20      	ldr	r2, [pc, #128]	; (8006d98 <TIM_TI1_SetConfig+0xc4>)
 8006d16:	4293      	cmp	r3, r2
 8006d18:	d007      	beq.n	8006d2a <TIM_TI1_SetConfig+0x56>
 8006d1a:	68fb      	ldr	r3, [r7, #12]
 8006d1c:	4a1f      	ldr	r2, [pc, #124]	; (8006d9c <TIM_TI1_SetConfig+0xc8>)
 8006d1e:	4293      	cmp	r3, r2
 8006d20:	d003      	beq.n	8006d2a <TIM_TI1_SetConfig+0x56>
 8006d22:	68fb      	ldr	r3, [r7, #12]
 8006d24:	4a1e      	ldr	r2, [pc, #120]	; (8006da0 <TIM_TI1_SetConfig+0xcc>)
 8006d26:	4293      	cmp	r3, r2
 8006d28:	d101      	bne.n	8006d2e <TIM_TI1_SetConfig+0x5a>
 8006d2a:	2301      	movs	r3, #1
 8006d2c:	e000      	b.n	8006d30 <TIM_TI1_SetConfig+0x5c>
 8006d2e:	2300      	movs	r3, #0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d008      	beq.n	8006d46 <TIM_TI1_SetConfig+0x72>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006d34:	697b      	ldr	r3, [r7, #20]
 8006d36:	f023 0303 	bic.w	r3, r3, #3
 8006d3a:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006d3c:	697a      	ldr	r2, [r7, #20]
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	4313      	orrs	r3, r2
 8006d42:	617b      	str	r3, [r7, #20]
 8006d44:	e003      	b.n	8006d4e <TIM_TI1_SetConfig+0x7a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8006d46:	697b      	ldr	r3, [r7, #20]
 8006d48:	f043 0301 	orr.w	r3, r3, #1
 8006d4c:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006d4e:	697b      	ldr	r3, [r7, #20]
 8006d50:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006d54:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8006d56:	683b      	ldr	r3, [r7, #0]
 8006d58:	011b      	lsls	r3, r3, #4
 8006d5a:	b2db      	uxtb	r3, r3
 8006d5c:	697a      	ldr	r2, [r7, #20]
 8006d5e:	4313      	orrs	r3, r2
 8006d60:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	f023 030a 	bic.w	r3, r3, #10
 8006d68:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8006d6a:	68bb      	ldr	r3, [r7, #8]
 8006d6c:	f003 030a 	and.w	r3, r3, #10
 8006d70:	693a      	ldr	r2, [r7, #16]
 8006d72:	4313      	orrs	r3, r2
 8006d74:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	697a      	ldr	r2, [r7, #20]
 8006d7a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006d7c:	68fb      	ldr	r3, [r7, #12]
 8006d7e:	693a      	ldr	r2, [r7, #16]
 8006d80:	621a      	str	r2, [r3, #32]
}
 8006d82:	bf00      	nop
 8006d84:	371c      	adds	r7, #28
 8006d86:	46bd      	mov	sp, r7
 8006d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d8c:	4770      	bx	lr
 8006d8e:	bf00      	nop
 8006d90:	40010000 	.word	0x40010000
 8006d94:	40000400 	.word	0x40000400
 8006d98:	40000800 	.word	0x40000800
 8006d9c:	40000c00 	.word	0x40000c00
 8006da0:	40014000 	.word	0x40014000

08006da4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006da4:	b480      	push	{r7}
 8006da6:	b087      	sub	sp, #28
 8006da8:	af00      	add	r7, sp, #0
 8006daa:	60f8      	str	r0, [r7, #12]
 8006dac:	60b9      	str	r1, [r7, #8]
 8006dae:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006db0:	68fb      	ldr	r3, [r7, #12]
 8006db2:	6a1b      	ldr	r3, [r3, #32]
 8006db4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	6a1b      	ldr	r3, [r3, #32]
 8006dba:	f023 0201 	bic.w	r2, r3, #1
 8006dbe:	68fb      	ldr	r3, [r7, #12]
 8006dc0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006dc2:	68fb      	ldr	r3, [r7, #12]
 8006dc4:	699b      	ldr	r3, [r3, #24]
 8006dc6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006dc8:	693b      	ldr	r3, [r7, #16]
 8006dca:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006dce:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	011b      	lsls	r3, r3, #4
 8006dd4:	693a      	ldr	r2, [r7, #16]
 8006dd6:	4313      	orrs	r3, r2
 8006dd8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006dda:	697b      	ldr	r3, [r7, #20]
 8006ddc:	f023 030a 	bic.w	r3, r3, #10
 8006de0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006de2:	697a      	ldr	r2, [r7, #20]
 8006de4:	68bb      	ldr	r3, [r7, #8]
 8006de6:	4313      	orrs	r3, r2
 8006de8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006dea:	68fb      	ldr	r3, [r7, #12]
 8006dec:	693a      	ldr	r2, [r7, #16]
 8006dee:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006df0:	68fb      	ldr	r3, [r7, #12]
 8006df2:	697a      	ldr	r2, [r7, #20]
 8006df4:	621a      	str	r2, [r3, #32]
}
 8006df6:	bf00      	nop
 8006df8:	371c      	adds	r7, #28
 8006dfa:	46bd      	mov	sp, r7
 8006dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e00:	4770      	bx	lr

08006e02 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006e02:	b480      	push	{r7}
 8006e04:	b087      	sub	sp, #28
 8006e06:	af00      	add	r7, sp, #0
 8006e08:	60f8      	str	r0, [r7, #12]
 8006e0a:	60b9      	str	r1, [r7, #8]
 8006e0c:	607a      	str	r2, [r7, #4]
 8006e0e:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e10:	68fb      	ldr	r3, [r7, #12]
 8006e12:	6a1b      	ldr	r3, [r3, #32]
 8006e14:	f023 0210 	bic.w	r2, r3, #16
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	699b      	ldr	r3, [r3, #24]
 8006e20:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e22:	68fb      	ldr	r3, [r7, #12]
 8006e24:	6a1b      	ldr	r3, [r3, #32]
 8006e26:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006e28:	697b      	ldr	r3, [r7, #20]
 8006e2a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006e2e:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	021b      	lsls	r3, r3, #8
 8006e34:	697a      	ldr	r2, [r7, #20]
 8006e36:	4313      	orrs	r3, r2
 8006e38:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006e3a:	697b      	ldr	r3, [r7, #20]
 8006e3c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006e40:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8006e42:	683b      	ldr	r3, [r7, #0]
 8006e44:	031b      	lsls	r3, r3, #12
 8006e46:	b29b      	uxth	r3, r3
 8006e48:	697a      	ldr	r2, [r7, #20]
 8006e4a:	4313      	orrs	r3, r2
 8006e4c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006e4e:	693b      	ldr	r3, [r7, #16]
 8006e50:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006e54:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006e56:	68bb      	ldr	r3, [r7, #8]
 8006e58:	011b      	lsls	r3, r3, #4
 8006e5a:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8006e5e:	693a      	ldr	r2, [r7, #16]
 8006e60:	4313      	orrs	r3, r2
 8006e62:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006e64:	68fb      	ldr	r3, [r7, #12]
 8006e66:	697a      	ldr	r2, [r7, #20]
 8006e68:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006e6a:	68fb      	ldr	r3, [r7, #12]
 8006e6c:	693a      	ldr	r2, [r7, #16]
 8006e6e:	621a      	str	r2, [r3, #32]
}
 8006e70:	bf00      	nop
 8006e72:	371c      	adds	r7, #28
 8006e74:	46bd      	mov	sp, r7
 8006e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e7a:	4770      	bx	lr

08006e7c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006e7c:	b480      	push	{r7}
 8006e7e:	b087      	sub	sp, #28
 8006e80:	af00      	add	r7, sp, #0
 8006e82:	60f8      	str	r0, [r7, #12]
 8006e84:	60b9      	str	r1, [r7, #8]
 8006e86:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006e88:	68fb      	ldr	r3, [r7, #12]
 8006e8a:	6a1b      	ldr	r3, [r3, #32]
 8006e8c:	f023 0210 	bic.w	r2, r3, #16
 8006e90:	68fb      	ldr	r3, [r7, #12]
 8006e92:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006e94:	68fb      	ldr	r3, [r7, #12]
 8006e96:	699b      	ldr	r3, [r3, #24]
 8006e98:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	6a1b      	ldr	r3, [r3, #32]
 8006e9e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006ea0:	697b      	ldr	r3, [r7, #20]
 8006ea2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006ea6:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	031b      	lsls	r3, r3, #12
 8006eac:	697a      	ldr	r2, [r7, #20]
 8006eae:	4313      	orrs	r3, r2
 8006eb0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006eb2:	693b      	ldr	r3, [r7, #16]
 8006eb4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006eb8:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006eba:	68bb      	ldr	r3, [r7, #8]
 8006ebc:	011b      	lsls	r3, r3, #4
 8006ebe:	693a      	ldr	r2, [r7, #16]
 8006ec0:	4313      	orrs	r3, r2
 8006ec2:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006ec4:	68fb      	ldr	r3, [r7, #12]
 8006ec6:	697a      	ldr	r2, [r7, #20]
 8006ec8:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006eca:	68fb      	ldr	r3, [r7, #12]
 8006ecc:	693a      	ldr	r2, [r7, #16]
 8006ece:	621a      	str	r2, [r3, #32]
}
 8006ed0:	bf00      	nop
 8006ed2:	371c      	adds	r7, #28
 8006ed4:	46bd      	mov	sp, r7
 8006ed6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eda:	4770      	bx	lr

08006edc <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006edc:	b480      	push	{r7}
 8006ede:	b087      	sub	sp, #28
 8006ee0:	af00      	add	r7, sp, #0
 8006ee2:	60f8      	str	r0, [r7, #12]
 8006ee4:	60b9      	str	r1, [r7, #8]
 8006ee6:	607a      	str	r2, [r7, #4]
 8006ee8:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	6a1b      	ldr	r3, [r3, #32]
 8006eee:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	69db      	ldr	r3, [r3, #28]
 8006efa:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	6a1b      	ldr	r3, [r3, #32]
 8006f00:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006f02:	697b      	ldr	r3, [r7, #20]
 8006f04:	f023 0303 	bic.w	r3, r3, #3
 8006f08:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8006f0a:	697a      	ldr	r2, [r7, #20]
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	4313      	orrs	r3, r2
 8006f10:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8006f12:	697b      	ldr	r3, [r7, #20]
 8006f14:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006f18:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006f1a:	683b      	ldr	r3, [r7, #0]
 8006f1c:	011b      	lsls	r3, r3, #4
 8006f1e:	b2db      	uxtb	r3, r3
 8006f20:	697a      	ldr	r2, [r7, #20]
 8006f22:	4313      	orrs	r3, r2
 8006f24:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006f26:	693b      	ldr	r3, [r7, #16]
 8006f28:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006f2c:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8006f2e:	68bb      	ldr	r3, [r7, #8]
 8006f30:	021b      	lsls	r3, r3, #8
 8006f32:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006f36:	693a      	ldr	r2, [r7, #16]
 8006f38:	4313      	orrs	r3, r2
 8006f3a:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006f3c:	68fb      	ldr	r3, [r7, #12]
 8006f3e:	697a      	ldr	r2, [r7, #20]
 8006f40:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8006f42:	68fb      	ldr	r3, [r7, #12]
 8006f44:	693a      	ldr	r2, [r7, #16]
 8006f46:	621a      	str	r2, [r3, #32]
}
 8006f48:	bf00      	nop
 8006f4a:	371c      	adds	r7, #28
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr

08006f54 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b087      	sub	sp, #28
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	60b9      	str	r1, [r7, #8]
 8006f5e:	607a      	str	r2, [r7, #4]
 8006f60:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	6a1b      	ldr	r3, [r3, #32]
 8006f66:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006f6a:	68fb      	ldr	r3, [r7, #12]
 8006f6c:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	69db      	ldr	r3, [r3, #28]
 8006f72:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	6a1b      	ldr	r3, [r3, #32]
 8006f78:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006f7a:	697b      	ldr	r3, [r7, #20]
 8006f7c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f80:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006f82:	687b      	ldr	r3, [r7, #4]
 8006f84:	021b      	lsls	r3, r3, #8
 8006f86:	697a      	ldr	r2, [r7, #20]
 8006f88:	4313      	orrs	r3, r2
 8006f8a:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006f92:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	031b      	lsls	r3, r3, #12
 8006f98:	b29b      	uxth	r3, r3
 8006f9a:	697a      	ldr	r2, [r7, #20]
 8006f9c:	4313      	orrs	r3, r2
 8006f9e:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006fa0:	693b      	ldr	r3, [r7, #16]
 8006fa2:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006fa6:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006fa8:	68bb      	ldr	r3, [r7, #8]
 8006faa:	031b      	lsls	r3, r3, #12
 8006fac:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006fb0:	693a      	ldr	r2, [r7, #16]
 8006fb2:	4313      	orrs	r3, r2
 8006fb4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006fb6:	68fb      	ldr	r3, [r7, #12]
 8006fb8:	697a      	ldr	r2, [r7, #20]
 8006fba:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	693a      	ldr	r2, [r7, #16]
 8006fc0:	621a      	str	r2, [r3, #32]
}
 8006fc2:	bf00      	nop
 8006fc4:	371c      	adds	r7, #28
 8006fc6:	46bd      	mov	sp, r7
 8006fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fcc:	4770      	bx	lr

08006fce <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006fce:	b480      	push	{r7}
 8006fd0:	b085      	sub	sp, #20
 8006fd2:	af00      	add	r7, sp, #0
 8006fd4:	6078      	str	r0, [r7, #4]
 8006fd6:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	689b      	ldr	r3, [r3, #8]
 8006fdc:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006fde:	68fb      	ldr	r3, [r7, #12]
 8006fe0:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006fe4:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4313      	orrs	r3, r2
 8006fec:	f043 0307 	orr.w	r3, r3, #7
 8006ff0:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006ff2:	687b      	ldr	r3, [r7, #4]
 8006ff4:	68fa      	ldr	r2, [r7, #12]
 8006ff6:	609a      	str	r2, [r3, #8]
}
 8006ff8:	bf00      	nop
 8006ffa:	3714      	adds	r7, #20
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007002:	4770      	bx	lr

08007004 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8007004:	b480      	push	{r7}
 8007006:	b087      	sub	sp, #28
 8007008:	af00      	add	r7, sp, #0
 800700a:	60f8      	str	r0, [r7, #12]
 800700c:	60b9      	str	r1, [r7, #8]
 800700e:	607a      	str	r2, [r7, #4]
 8007010:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8007012:	68fb      	ldr	r3, [r7, #12]
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007018:	697b      	ldr	r3, [r7, #20]
 800701a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800701e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007020:	683b      	ldr	r3, [r7, #0]
 8007022:	021a      	lsls	r2, r3, #8
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	431a      	orrs	r2, r3
 8007028:	68bb      	ldr	r3, [r7, #8]
 800702a:	4313      	orrs	r3, r2
 800702c:	697a      	ldr	r2, [r7, #20]
 800702e:	4313      	orrs	r3, r2
 8007030:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8007032:	68fb      	ldr	r3, [r7, #12]
 8007034:	697a      	ldr	r2, [r7, #20]
 8007036:	609a      	str	r2, [r3, #8]
}
 8007038:	bf00      	nop
 800703a:	371c      	adds	r7, #28
 800703c:	46bd      	mov	sp, r7
 800703e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007042:	4770      	bx	lr

08007044 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8007044:	b480      	push	{r7}
 8007046:	b087      	sub	sp, #28
 8007048:	af00      	add	r7, sp, #0
 800704a:	60f8      	str	r0, [r7, #12]
 800704c:	60b9      	str	r1, [r7, #8]
 800704e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007050:	68bb      	ldr	r3, [r7, #8]
 8007052:	f003 031f 	and.w	r3, r3, #31
 8007056:	2201      	movs	r2, #1
 8007058:	fa02 f303 	lsl.w	r3, r2, r3
 800705c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800705e:	68fb      	ldr	r3, [r7, #12]
 8007060:	6a1a      	ldr	r2, [r3, #32]
 8007062:	697b      	ldr	r3, [r7, #20]
 8007064:	43db      	mvns	r3, r3
 8007066:	401a      	ands	r2, r3
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	6a1a      	ldr	r2, [r3, #32]
 8007070:	68bb      	ldr	r3, [r7, #8]
 8007072:	f003 031f 	and.w	r3, r3, #31
 8007076:	6879      	ldr	r1, [r7, #4]
 8007078:	fa01 f303 	lsl.w	r3, r1, r3
 800707c:	431a      	orrs	r2, r3
 800707e:	68fb      	ldr	r3, [r7, #12]
 8007080:	621a      	str	r2, [r3, #32]
}
 8007082:	bf00      	nop
 8007084:	371c      	adds	r7, #28
 8007086:	46bd      	mov	sp, r7
 8007088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708c:	4770      	bx	lr
	...

08007090 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007090:	b480      	push	{r7}
 8007092:	b085      	sub	sp, #20
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
 8007098:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80070a0:	2b01      	cmp	r3, #1
 80070a2:	d101      	bne.n	80070a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80070a4:	2302      	movs	r3, #2
 80070a6:	e050      	b.n	800714a <HAL_TIMEx_MasterConfigSynchronization+0xba>
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	2201      	movs	r2, #1
 80070ac:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2202      	movs	r2, #2
 80070b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	685b      	ldr	r3, [r3, #4]
 80070be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	689b      	ldr	r3, [r3, #8]
 80070c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80070d0:	683b      	ldr	r3, [r7, #0]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	68fa      	ldr	r2, [r7, #12]
 80070d6:	4313      	orrs	r3, r2
 80070d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	681b      	ldr	r3, [r3, #0]
 80070de:	68fa      	ldr	r2, [r7, #12]
 80070e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80070e2:	687b      	ldr	r3, [r7, #4]
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	4a1c      	ldr	r2, [pc, #112]	; (8007158 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80070e8:	4293      	cmp	r3, r2
 80070ea:	d018      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070ec:	687b      	ldr	r3, [r7, #4]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070f4:	d013      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80070f6:	687b      	ldr	r3, [r7, #4]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	4a18      	ldr	r2, [pc, #96]	; (800715c <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80070fc:	4293      	cmp	r3, r2
 80070fe:	d00e      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	4a16      	ldr	r2, [pc, #88]	; (8007160 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8007106:	4293      	cmp	r3, r2
 8007108:	d009      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	4a15      	ldr	r2, [pc, #84]	; (8007164 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8007110:	4293      	cmp	r3, r2
 8007112:	d004      	beq.n	800711e <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007114:	687b      	ldr	r3, [r7, #4]
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	4a13      	ldr	r2, [pc, #76]	; (8007168 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800711a:	4293      	cmp	r3, r2
 800711c:	d10c      	bne.n	8007138 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007124:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007126:	683b      	ldr	r3, [r7, #0]
 8007128:	685b      	ldr	r3, [r3, #4]
 800712a:	68ba      	ldr	r2, [r7, #8]
 800712c:	4313      	orrs	r3, r2
 800712e:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8007130:	687b      	ldr	r3, [r7, #4]
 8007132:	681b      	ldr	r3, [r3, #0]
 8007134:	68ba      	ldr	r2, [r7, #8]
 8007136:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007138:	687b      	ldr	r3, [r7, #4]
 800713a:	2201      	movs	r2, #1
 800713c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007140:	687b      	ldr	r3, [r7, #4]
 8007142:	2200      	movs	r2, #0
 8007144:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007148:	2300      	movs	r3, #0
}
 800714a:	4618      	mov	r0, r3
 800714c:	3714      	adds	r7, #20
 800714e:	46bd      	mov	sp, r7
 8007150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007154:	4770      	bx	lr
 8007156:	bf00      	nop
 8007158:	40010000 	.word	0x40010000
 800715c:	40000400 	.word	0x40000400
 8007160:	40000800 	.word	0x40000800
 8007164:	40000c00 	.word	0x40000c00
 8007168:	40014000 	.word	0x40014000

0800716c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800716c:	b480      	push	{r7}
 800716e:	b083      	sub	sp, #12
 8007170:	af00      	add	r7, sp, #0
 8007172:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8007174:	bf00      	nop
 8007176:	370c      	adds	r7, #12
 8007178:	46bd      	mov	sp, r7
 800717a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717e:	4770      	bx	lr

08007180 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007180:	b480      	push	{r7}
 8007182:	b083      	sub	sp, #12
 8007184:	af00      	add	r7, sp, #0
 8007186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007188:	bf00      	nop
 800718a:	370c      	adds	r7, #12
 800718c:	46bd      	mov	sp, r7
 800718e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007192:	4770      	bx	lr

08007194 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8007194:	b580      	push	{r7, lr}
 8007196:	b082      	sub	sp, #8
 8007198:	af00      	add	r7, sp, #0
 800719a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	2b00      	cmp	r3, #0
 80071a0:	d101      	bne.n	80071a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80071a2:	2301      	movs	r3, #1
 80071a4:	e03f      	b.n	8007226 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b00      	cmp	r3, #0
 80071b0:	d106      	bne.n	80071c0 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	2200      	movs	r2, #0
 80071b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80071ba:	6878      	ldr	r0, [r7, #4]
 80071bc:	f7fb fd24 	bl	8002c08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2224      	movs	r2, #36	; 0x24
 80071c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80071c8:	687b      	ldr	r3, [r7, #4]
 80071ca:	681b      	ldr	r3, [r3, #0]
 80071cc:	68da      	ldr	r2, [r3, #12]
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	681b      	ldr	r3, [r3, #0]
 80071d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80071d6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80071d8:	6878      	ldr	r0, [r7, #4]
 80071da:	f000 f897 	bl	800730c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80071de:	687b      	ldr	r3, [r7, #4]
 80071e0:	681b      	ldr	r3, [r3, #0]
 80071e2:	691a      	ldr	r2, [r3, #16]
 80071e4:	687b      	ldr	r3, [r7, #4]
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80071ec:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	695a      	ldr	r2, [r3, #20]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80071fc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80071fe:	687b      	ldr	r3, [r7, #4]
 8007200:	681b      	ldr	r3, [r3, #0]
 8007202:	68da      	ldr	r2, [r3, #12]
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800720c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	2200      	movs	r2, #0
 8007212:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2220      	movs	r2, #32
 8007218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2220      	movs	r2, #32
 8007220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8007224:	2300      	movs	r3, #0
}
 8007226:	4618      	mov	r0, r3
 8007228:	3708      	adds	r7, #8
 800722a:	46bd      	mov	sp, r7
 800722c:	bd80      	pop	{r7, pc}

0800722e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800722e:	b580      	push	{r7, lr}
 8007230:	b084      	sub	sp, #16
 8007232:	af00      	add	r7, sp, #0
 8007234:	60f8      	str	r0, [r7, #12]
 8007236:	60b9      	str	r1, [r7, #8]
 8007238:	4613      	mov	r3, r2
 800723a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800723c:	68fb      	ldr	r3, [r7, #12]
 800723e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007242:	b2db      	uxtb	r3, r3
 8007244:	2b20      	cmp	r3, #32
 8007246:	d11d      	bne.n	8007284 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007248:	68bb      	ldr	r3, [r7, #8]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d002      	beq.n	8007254 <HAL_UART_Receive_IT+0x26>
 800724e:	88fb      	ldrh	r3, [r7, #6]
 8007250:	2b00      	cmp	r3, #0
 8007252:	d101      	bne.n	8007258 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007254:	2301      	movs	r3, #1
 8007256:	e016      	b.n	8007286 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007258:	68fb      	ldr	r3, [r7, #12]
 800725a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800725e:	2b01      	cmp	r3, #1
 8007260:	d101      	bne.n	8007266 <HAL_UART_Receive_IT+0x38>
 8007262:	2302      	movs	r3, #2
 8007264:	e00f      	b.n	8007286 <HAL_UART_Receive_IT+0x58>
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	2201      	movs	r2, #1
 800726a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800726e:	68fb      	ldr	r3, [r7, #12]
 8007270:	2200      	movs	r2, #0
 8007272:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007274:	88fb      	ldrh	r3, [r7, #6]
 8007276:	461a      	mov	r2, r3
 8007278:	68b9      	ldr	r1, [r7, #8]
 800727a:	68f8      	ldr	r0, [r7, #12]
 800727c:	f000 f807 	bl	800728e <UART_Start_Receive_IT>
 8007280:	4603      	mov	r3, r0
 8007282:	e000      	b.n	8007286 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007284:	2302      	movs	r3, #2
  }
}
 8007286:	4618      	mov	r0, r3
 8007288:	3710      	adds	r7, #16
 800728a:	46bd      	mov	sp, r7
 800728c:	bd80      	pop	{r7, pc}

0800728e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800728e:	b480      	push	{r7}
 8007290:	b085      	sub	sp, #20
 8007292:	af00      	add	r7, sp, #0
 8007294:	60f8      	str	r0, [r7, #12]
 8007296:	60b9      	str	r1, [r7, #8]
 8007298:	4613      	mov	r3, r2
 800729a:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800729c:	68fb      	ldr	r3, [r7, #12]
 800729e:	68ba      	ldr	r2, [r7, #8]
 80072a0:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80072a2:	68fb      	ldr	r3, [r7, #12]
 80072a4:	88fa      	ldrh	r2, [r7, #6]
 80072a6:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	88fa      	ldrh	r2, [r7, #6]
 80072ac:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	2200      	movs	r2, #0
 80072b2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2222      	movs	r2, #34	; 0x22
 80072b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	2200      	movs	r2, #0
 80072c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80072c4:	68fb      	ldr	r3, [r7, #12]
 80072c6:	691b      	ldr	r3, [r3, #16]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d007      	beq.n	80072dc <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68da      	ldr	r2, [r3, #12]
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80072da:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80072dc:	68fb      	ldr	r3, [r7, #12]
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	695a      	ldr	r2, [r3, #20]
 80072e2:	68fb      	ldr	r3, [r7, #12]
 80072e4:	681b      	ldr	r3, [r3, #0]
 80072e6:	f042 0201 	orr.w	r2, r2, #1
 80072ea:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80072ec:	68fb      	ldr	r3, [r7, #12]
 80072ee:	681b      	ldr	r3, [r3, #0]
 80072f0:	68da      	ldr	r2, [r3, #12]
 80072f2:	68fb      	ldr	r3, [r7, #12]
 80072f4:	681b      	ldr	r3, [r3, #0]
 80072f6:	f042 0220 	orr.w	r2, r2, #32
 80072fa:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80072fc:	2300      	movs	r3, #0
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3714      	adds	r7, #20
 8007302:	46bd      	mov	sp, r7
 8007304:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007308:	4770      	bx	lr
	...

0800730c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800730c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007310:	b0c0      	sub	sp, #256	; 0x100
 8007312:	af00      	add	r7, sp, #0
 8007314:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007318:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007328:	68d9      	ldr	r1, [r3, #12]
 800732a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800732e:	681a      	ldr	r2, [r3, #0]
 8007330:	ea40 0301 	orr.w	r3, r0, r1
 8007334:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800733a:	689a      	ldr	r2, [r3, #8]
 800733c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007340:	691b      	ldr	r3, [r3, #16]
 8007342:	431a      	orrs	r2, r3
 8007344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007348:	695b      	ldr	r3, [r3, #20]
 800734a:	431a      	orrs	r2, r3
 800734c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007350:	69db      	ldr	r3, [r3, #28]
 8007352:	4313      	orrs	r3, r2
 8007354:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8007358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800735c:	681b      	ldr	r3, [r3, #0]
 800735e:	68db      	ldr	r3, [r3, #12]
 8007360:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007364:	f021 010c 	bic.w	r1, r1, #12
 8007368:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007372:	430b      	orrs	r3, r1
 8007374:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8007376:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	695b      	ldr	r3, [r3, #20]
 800737e:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007386:	6999      	ldr	r1, [r3, #24]
 8007388:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800738c:	681a      	ldr	r2, [r3, #0]
 800738e:	ea40 0301 	orr.w	r3, r0, r1
 8007392:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007398:	681a      	ldr	r2, [r3, #0]
 800739a:	4b8f      	ldr	r3, [pc, #572]	; (80075d8 <UART_SetConfig+0x2cc>)
 800739c:	429a      	cmp	r2, r3
 800739e:	d005      	beq.n	80073ac <UART_SetConfig+0xa0>
 80073a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073a4:	681a      	ldr	r2, [r3, #0]
 80073a6:	4b8d      	ldr	r3, [pc, #564]	; (80075dc <UART_SetConfig+0x2d0>)
 80073a8:	429a      	cmp	r2, r3
 80073aa:	d104      	bne.n	80073b6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80073ac:	f7fe f854 	bl	8005458 <HAL_RCC_GetPCLK2Freq>
 80073b0:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80073b4:	e003      	b.n	80073be <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80073b6:	f7fe f83b 	bl	8005430 <HAL_RCC_GetPCLK1Freq>
 80073ba:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c2:	69db      	ldr	r3, [r3, #28]
 80073c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80073c8:	f040 810c 	bne.w	80075e4 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80073cc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073d0:	2200      	movs	r2, #0
 80073d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80073d6:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80073da:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80073de:	4622      	mov	r2, r4
 80073e0:	462b      	mov	r3, r5
 80073e2:	1891      	adds	r1, r2, r2
 80073e4:	65b9      	str	r1, [r7, #88]	; 0x58
 80073e6:	415b      	adcs	r3, r3
 80073e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 80073ea:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80073ee:	4621      	mov	r1, r4
 80073f0:	eb12 0801 	adds.w	r8, r2, r1
 80073f4:	4629      	mov	r1, r5
 80073f6:	eb43 0901 	adc.w	r9, r3, r1
 80073fa:	f04f 0200 	mov.w	r2, #0
 80073fe:	f04f 0300 	mov.w	r3, #0
 8007402:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007406:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800740a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800740e:	4690      	mov	r8, r2
 8007410:	4699      	mov	r9, r3
 8007412:	4623      	mov	r3, r4
 8007414:	eb18 0303 	adds.w	r3, r8, r3
 8007418:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800741c:	462b      	mov	r3, r5
 800741e:	eb49 0303 	adc.w	r3, r9, r3
 8007422:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007426:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742a:	685b      	ldr	r3, [r3, #4]
 800742c:	2200      	movs	r2, #0
 800742e:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007432:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007436:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800743a:	460b      	mov	r3, r1
 800743c:	18db      	adds	r3, r3, r3
 800743e:	653b      	str	r3, [r7, #80]	; 0x50
 8007440:	4613      	mov	r3, r2
 8007442:	eb42 0303 	adc.w	r3, r2, r3
 8007446:	657b      	str	r3, [r7, #84]	; 0x54
 8007448:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800744c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007450:	f7f8 fec8 	bl	80001e4 <__aeabi_uldivmod>
 8007454:	4602      	mov	r2, r0
 8007456:	460b      	mov	r3, r1
 8007458:	4b61      	ldr	r3, [pc, #388]	; (80075e0 <UART_SetConfig+0x2d4>)
 800745a:	fba3 2302 	umull	r2, r3, r3, r2
 800745e:	095b      	lsrs	r3, r3, #5
 8007460:	011c      	lsls	r4, r3, #4
 8007462:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007466:	2200      	movs	r2, #0
 8007468:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800746c:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007470:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007474:	4642      	mov	r2, r8
 8007476:	464b      	mov	r3, r9
 8007478:	1891      	adds	r1, r2, r2
 800747a:	64b9      	str	r1, [r7, #72]	; 0x48
 800747c:	415b      	adcs	r3, r3
 800747e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007480:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007484:	4641      	mov	r1, r8
 8007486:	eb12 0a01 	adds.w	sl, r2, r1
 800748a:	4649      	mov	r1, r9
 800748c:	eb43 0b01 	adc.w	fp, r3, r1
 8007490:	f04f 0200 	mov.w	r2, #0
 8007494:	f04f 0300 	mov.w	r3, #0
 8007498:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800749c:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80074a0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80074a4:	4692      	mov	sl, r2
 80074a6:	469b      	mov	fp, r3
 80074a8:	4643      	mov	r3, r8
 80074aa:	eb1a 0303 	adds.w	r3, sl, r3
 80074ae:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80074b2:	464b      	mov	r3, r9
 80074b4:	eb4b 0303 	adc.w	r3, fp, r3
 80074b8:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80074bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c0:	685b      	ldr	r3, [r3, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80074c8:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80074cc:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80074d0:	460b      	mov	r3, r1
 80074d2:	18db      	adds	r3, r3, r3
 80074d4:	643b      	str	r3, [r7, #64]	; 0x40
 80074d6:	4613      	mov	r3, r2
 80074d8:	eb42 0303 	adc.w	r3, r2, r3
 80074dc:	647b      	str	r3, [r7, #68]	; 0x44
 80074de:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80074e2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80074e6:	f7f8 fe7d 	bl	80001e4 <__aeabi_uldivmod>
 80074ea:	4602      	mov	r2, r0
 80074ec:	460b      	mov	r3, r1
 80074ee:	4611      	mov	r1, r2
 80074f0:	4b3b      	ldr	r3, [pc, #236]	; (80075e0 <UART_SetConfig+0x2d4>)
 80074f2:	fba3 2301 	umull	r2, r3, r3, r1
 80074f6:	095b      	lsrs	r3, r3, #5
 80074f8:	2264      	movs	r2, #100	; 0x64
 80074fa:	fb02 f303 	mul.w	r3, r2, r3
 80074fe:	1acb      	subs	r3, r1, r3
 8007500:	00db      	lsls	r3, r3, #3
 8007502:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007506:	4b36      	ldr	r3, [pc, #216]	; (80075e0 <UART_SetConfig+0x2d4>)
 8007508:	fba3 2302 	umull	r2, r3, r3, r2
 800750c:	095b      	lsrs	r3, r3, #5
 800750e:	005b      	lsls	r3, r3, #1
 8007510:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007514:	441c      	add	r4, r3
 8007516:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800751a:	2200      	movs	r2, #0
 800751c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007520:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007524:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007528:	4642      	mov	r2, r8
 800752a:	464b      	mov	r3, r9
 800752c:	1891      	adds	r1, r2, r2
 800752e:	63b9      	str	r1, [r7, #56]	; 0x38
 8007530:	415b      	adcs	r3, r3
 8007532:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007534:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007538:	4641      	mov	r1, r8
 800753a:	1851      	adds	r1, r2, r1
 800753c:	6339      	str	r1, [r7, #48]	; 0x30
 800753e:	4649      	mov	r1, r9
 8007540:	414b      	adcs	r3, r1
 8007542:	637b      	str	r3, [r7, #52]	; 0x34
 8007544:	f04f 0200 	mov.w	r2, #0
 8007548:	f04f 0300 	mov.w	r3, #0
 800754c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007550:	4659      	mov	r1, fp
 8007552:	00cb      	lsls	r3, r1, #3
 8007554:	4651      	mov	r1, sl
 8007556:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800755a:	4651      	mov	r1, sl
 800755c:	00ca      	lsls	r2, r1, #3
 800755e:	4610      	mov	r0, r2
 8007560:	4619      	mov	r1, r3
 8007562:	4603      	mov	r3, r0
 8007564:	4642      	mov	r2, r8
 8007566:	189b      	adds	r3, r3, r2
 8007568:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800756c:	464b      	mov	r3, r9
 800756e:	460a      	mov	r2, r1
 8007570:	eb42 0303 	adc.w	r3, r2, r3
 8007574:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007578:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757c:	685b      	ldr	r3, [r3, #4]
 800757e:	2200      	movs	r2, #0
 8007580:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007584:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8007588:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800758c:	460b      	mov	r3, r1
 800758e:	18db      	adds	r3, r3, r3
 8007590:	62bb      	str	r3, [r7, #40]	; 0x28
 8007592:	4613      	mov	r3, r2
 8007594:	eb42 0303 	adc.w	r3, r2, r3
 8007598:	62fb      	str	r3, [r7, #44]	; 0x2c
 800759a:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800759e:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80075a2:	f7f8 fe1f 	bl	80001e4 <__aeabi_uldivmod>
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4b0d      	ldr	r3, [pc, #52]	; (80075e0 <UART_SetConfig+0x2d4>)
 80075ac:	fba3 1302 	umull	r1, r3, r3, r2
 80075b0:	095b      	lsrs	r3, r3, #5
 80075b2:	2164      	movs	r1, #100	; 0x64
 80075b4:	fb01 f303 	mul.w	r3, r1, r3
 80075b8:	1ad3      	subs	r3, r2, r3
 80075ba:	00db      	lsls	r3, r3, #3
 80075bc:	3332      	adds	r3, #50	; 0x32
 80075be:	4a08      	ldr	r2, [pc, #32]	; (80075e0 <UART_SetConfig+0x2d4>)
 80075c0:	fba2 2303 	umull	r2, r3, r2, r3
 80075c4:	095b      	lsrs	r3, r3, #5
 80075c6:	f003 0207 	and.w	r2, r3, #7
 80075ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075ce:	681b      	ldr	r3, [r3, #0]
 80075d0:	4422      	add	r2, r4
 80075d2:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80075d4:	e105      	b.n	80077e2 <UART_SetConfig+0x4d6>
 80075d6:	bf00      	nop
 80075d8:	40011000 	.word	0x40011000
 80075dc:	40011400 	.word	0x40011400
 80075e0:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80075e4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075e8:	2200      	movs	r2, #0
 80075ea:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80075ee:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80075f2:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80075f6:	4642      	mov	r2, r8
 80075f8:	464b      	mov	r3, r9
 80075fa:	1891      	adds	r1, r2, r2
 80075fc:	6239      	str	r1, [r7, #32]
 80075fe:	415b      	adcs	r3, r3
 8007600:	627b      	str	r3, [r7, #36]	; 0x24
 8007602:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007606:	4641      	mov	r1, r8
 8007608:	1854      	adds	r4, r2, r1
 800760a:	4649      	mov	r1, r9
 800760c:	eb43 0501 	adc.w	r5, r3, r1
 8007610:	f04f 0200 	mov.w	r2, #0
 8007614:	f04f 0300 	mov.w	r3, #0
 8007618:	00eb      	lsls	r3, r5, #3
 800761a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800761e:	00e2      	lsls	r2, r4, #3
 8007620:	4614      	mov	r4, r2
 8007622:	461d      	mov	r5, r3
 8007624:	4643      	mov	r3, r8
 8007626:	18e3      	adds	r3, r4, r3
 8007628:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800762c:	464b      	mov	r3, r9
 800762e:	eb45 0303 	adc.w	r3, r5, r3
 8007632:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007636:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800763a:	685b      	ldr	r3, [r3, #4]
 800763c:	2200      	movs	r2, #0
 800763e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007642:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007646:	f04f 0200 	mov.w	r2, #0
 800764a:	f04f 0300 	mov.w	r3, #0
 800764e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007652:	4629      	mov	r1, r5
 8007654:	008b      	lsls	r3, r1, #2
 8007656:	4621      	mov	r1, r4
 8007658:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800765c:	4621      	mov	r1, r4
 800765e:	008a      	lsls	r2, r1, #2
 8007660:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007664:	f7f8 fdbe 	bl	80001e4 <__aeabi_uldivmod>
 8007668:	4602      	mov	r2, r0
 800766a:	460b      	mov	r3, r1
 800766c:	4b60      	ldr	r3, [pc, #384]	; (80077f0 <UART_SetConfig+0x4e4>)
 800766e:	fba3 2302 	umull	r2, r3, r3, r2
 8007672:	095b      	lsrs	r3, r3, #5
 8007674:	011c      	lsls	r4, r3, #4
 8007676:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800767a:	2200      	movs	r2, #0
 800767c:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007680:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007684:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8007688:	4642      	mov	r2, r8
 800768a:	464b      	mov	r3, r9
 800768c:	1891      	adds	r1, r2, r2
 800768e:	61b9      	str	r1, [r7, #24]
 8007690:	415b      	adcs	r3, r3
 8007692:	61fb      	str	r3, [r7, #28]
 8007694:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007698:	4641      	mov	r1, r8
 800769a:	1851      	adds	r1, r2, r1
 800769c:	6139      	str	r1, [r7, #16]
 800769e:	4649      	mov	r1, r9
 80076a0:	414b      	adcs	r3, r1
 80076a2:	617b      	str	r3, [r7, #20]
 80076a4:	f04f 0200 	mov.w	r2, #0
 80076a8:	f04f 0300 	mov.w	r3, #0
 80076ac:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80076b0:	4659      	mov	r1, fp
 80076b2:	00cb      	lsls	r3, r1, #3
 80076b4:	4651      	mov	r1, sl
 80076b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076ba:	4651      	mov	r1, sl
 80076bc:	00ca      	lsls	r2, r1, #3
 80076be:	4610      	mov	r0, r2
 80076c0:	4619      	mov	r1, r3
 80076c2:	4603      	mov	r3, r0
 80076c4:	4642      	mov	r2, r8
 80076c6:	189b      	adds	r3, r3, r2
 80076c8:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80076cc:	464b      	mov	r3, r9
 80076ce:	460a      	mov	r2, r1
 80076d0:	eb42 0303 	adc.w	r3, r2, r3
 80076d4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80076d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076dc:	685b      	ldr	r3, [r3, #4]
 80076de:	2200      	movs	r2, #0
 80076e0:	67bb      	str	r3, [r7, #120]	; 0x78
 80076e2:	67fa      	str	r2, [r7, #124]	; 0x7c
 80076e4:	f04f 0200 	mov.w	r2, #0
 80076e8:	f04f 0300 	mov.w	r3, #0
 80076ec:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80076f0:	4649      	mov	r1, r9
 80076f2:	008b      	lsls	r3, r1, #2
 80076f4:	4641      	mov	r1, r8
 80076f6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80076fa:	4641      	mov	r1, r8
 80076fc:	008a      	lsls	r2, r1, #2
 80076fe:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8007702:	f7f8 fd6f 	bl	80001e4 <__aeabi_uldivmod>
 8007706:	4602      	mov	r2, r0
 8007708:	460b      	mov	r3, r1
 800770a:	4b39      	ldr	r3, [pc, #228]	; (80077f0 <UART_SetConfig+0x4e4>)
 800770c:	fba3 1302 	umull	r1, r3, r3, r2
 8007710:	095b      	lsrs	r3, r3, #5
 8007712:	2164      	movs	r1, #100	; 0x64
 8007714:	fb01 f303 	mul.w	r3, r1, r3
 8007718:	1ad3      	subs	r3, r2, r3
 800771a:	011b      	lsls	r3, r3, #4
 800771c:	3332      	adds	r3, #50	; 0x32
 800771e:	4a34      	ldr	r2, [pc, #208]	; (80077f0 <UART_SetConfig+0x4e4>)
 8007720:	fba2 2303 	umull	r2, r3, r2, r3
 8007724:	095b      	lsrs	r3, r3, #5
 8007726:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800772a:	441c      	add	r4, r3
 800772c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007730:	2200      	movs	r2, #0
 8007732:	673b      	str	r3, [r7, #112]	; 0x70
 8007734:	677a      	str	r2, [r7, #116]	; 0x74
 8007736:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800773a:	4642      	mov	r2, r8
 800773c:	464b      	mov	r3, r9
 800773e:	1891      	adds	r1, r2, r2
 8007740:	60b9      	str	r1, [r7, #8]
 8007742:	415b      	adcs	r3, r3
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800774a:	4641      	mov	r1, r8
 800774c:	1851      	adds	r1, r2, r1
 800774e:	6039      	str	r1, [r7, #0]
 8007750:	4649      	mov	r1, r9
 8007752:	414b      	adcs	r3, r1
 8007754:	607b      	str	r3, [r7, #4]
 8007756:	f04f 0200 	mov.w	r2, #0
 800775a:	f04f 0300 	mov.w	r3, #0
 800775e:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007762:	4659      	mov	r1, fp
 8007764:	00cb      	lsls	r3, r1, #3
 8007766:	4651      	mov	r1, sl
 8007768:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800776c:	4651      	mov	r1, sl
 800776e:	00ca      	lsls	r2, r1, #3
 8007770:	4610      	mov	r0, r2
 8007772:	4619      	mov	r1, r3
 8007774:	4603      	mov	r3, r0
 8007776:	4642      	mov	r2, r8
 8007778:	189b      	adds	r3, r3, r2
 800777a:	66bb      	str	r3, [r7, #104]	; 0x68
 800777c:	464b      	mov	r3, r9
 800777e:	460a      	mov	r2, r1
 8007780:	eb42 0303 	adc.w	r3, r2, r3
 8007784:	66fb      	str	r3, [r7, #108]	; 0x6c
 8007786:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800778a:	685b      	ldr	r3, [r3, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	663b      	str	r3, [r7, #96]	; 0x60
 8007790:	667a      	str	r2, [r7, #100]	; 0x64
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800779e:	4649      	mov	r1, r9
 80077a0:	008b      	lsls	r3, r1, #2
 80077a2:	4641      	mov	r1, r8
 80077a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077a8:	4641      	mov	r1, r8
 80077aa:	008a      	lsls	r2, r1, #2
 80077ac:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80077b0:	f7f8 fd18 	bl	80001e4 <__aeabi_uldivmod>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4b0d      	ldr	r3, [pc, #52]	; (80077f0 <UART_SetConfig+0x4e4>)
 80077ba:	fba3 1302 	umull	r1, r3, r3, r2
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	2164      	movs	r1, #100	; 0x64
 80077c2:	fb01 f303 	mul.w	r3, r1, r3
 80077c6:	1ad3      	subs	r3, r2, r3
 80077c8:	011b      	lsls	r3, r3, #4
 80077ca:	3332      	adds	r3, #50	; 0x32
 80077cc:	4a08      	ldr	r2, [pc, #32]	; (80077f0 <UART_SetConfig+0x4e4>)
 80077ce:	fba2 2303 	umull	r2, r3, r2, r3
 80077d2:	095b      	lsrs	r3, r3, #5
 80077d4:	f003 020f 	and.w	r2, r3, #15
 80077d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80077dc:	681b      	ldr	r3, [r3, #0]
 80077de:	4422      	add	r2, r4
 80077e0:	609a      	str	r2, [r3, #8]
}
 80077e2:	bf00      	nop
 80077e4:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80077e8:	46bd      	mov	sp, r7
 80077ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80077ee:	bf00      	nop
 80077f0:	51eb851f 	.word	0x51eb851f

080077f4 <__libc_init_array>:
 80077f4:	b570      	push	{r4, r5, r6, lr}
 80077f6:	4d0d      	ldr	r5, [pc, #52]	; (800782c <__libc_init_array+0x38>)
 80077f8:	4c0d      	ldr	r4, [pc, #52]	; (8007830 <__libc_init_array+0x3c>)
 80077fa:	1b64      	subs	r4, r4, r5
 80077fc:	10a4      	asrs	r4, r4, #2
 80077fe:	2600      	movs	r6, #0
 8007800:	42a6      	cmp	r6, r4
 8007802:	d109      	bne.n	8007818 <__libc_init_array+0x24>
 8007804:	4d0b      	ldr	r5, [pc, #44]	; (8007834 <__libc_init_array+0x40>)
 8007806:	4c0c      	ldr	r4, [pc, #48]	; (8007838 <__libc_init_array+0x44>)
 8007808:	f000 f894 	bl	8007934 <_init>
 800780c:	1b64      	subs	r4, r4, r5
 800780e:	10a4      	asrs	r4, r4, #2
 8007810:	2600      	movs	r6, #0
 8007812:	42a6      	cmp	r6, r4
 8007814:	d105      	bne.n	8007822 <__libc_init_array+0x2e>
 8007816:	bd70      	pop	{r4, r5, r6, pc}
 8007818:	f855 3b04 	ldr.w	r3, [r5], #4
 800781c:	4798      	blx	r3
 800781e:	3601      	adds	r6, #1
 8007820:	e7ee      	b.n	8007800 <__libc_init_array+0xc>
 8007822:	f855 3b04 	ldr.w	r3, [r5], #4
 8007826:	4798      	blx	r3
 8007828:	3601      	adds	r6, #1
 800782a:	e7f2      	b.n	8007812 <__libc_init_array+0x1e>
 800782c:	08007a48 	.word	0x08007a48
 8007830:	08007a48 	.word	0x08007a48
 8007834:	08007a48 	.word	0x08007a48
 8007838:	08007a4c 	.word	0x08007a4c

0800783c <__itoa>:
 800783c:	1e93      	subs	r3, r2, #2
 800783e:	2b22      	cmp	r3, #34	; 0x22
 8007840:	b510      	push	{r4, lr}
 8007842:	460c      	mov	r4, r1
 8007844:	d904      	bls.n	8007850 <__itoa+0x14>
 8007846:	2300      	movs	r3, #0
 8007848:	700b      	strb	r3, [r1, #0]
 800784a:	461c      	mov	r4, r3
 800784c:	4620      	mov	r0, r4
 800784e:	bd10      	pop	{r4, pc}
 8007850:	2a0a      	cmp	r2, #10
 8007852:	d109      	bne.n	8007868 <__itoa+0x2c>
 8007854:	2800      	cmp	r0, #0
 8007856:	da07      	bge.n	8007868 <__itoa+0x2c>
 8007858:	232d      	movs	r3, #45	; 0x2d
 800785a:	700b      	strb	r3, [r1, #0]
 800785c:	4240      	negs	r0, r0
 800785e:	2101      	movs	r1, #1
 8007860:	4421      	add	r1, r4
 8007862:	f000 f825 	bl	80078b0 <__utoa>
 8007866:	e7f1      	b.n	800784c <__itoa+0x10>
 8007868:	2100      	movs	r1, #0
 800786a:	e7f9      	b.n	8007860 <__itoa+0x24>

0800786c <itoa>:
 800786c:	f7ff bfe6 	b.w	800783c <__itoa>

08007870 <memset>:
 8007870:	4402      	add	r2, r0
 8007872:	4603      	mov	r3, r0
 8007874:	4293      	cmp	r3, r2
 8007876:	d100      	bne.n	800787a <memset+0xa>
 8007878:	4770      	bx	lr
 800787a:	f803 1b01 	strb.w	r1, [r3], #1
 800787e:	e7f9      	b.n	8007874 <memset+0x4>

08007880 <strcat>:
 8007880:	b510      	push	{r4, lr}
 8007882:	4602      	mov	r2, r0
 8007884:	7814      	ldrb	r4, [r2, #0]
 8007886:	4613      	mov	r3, r2
 8007888:	3201      	adds	r2, #1
 800788a:	2c00      	cmp	r4, #0
 800788c:	d1fa      	bne.n	8007884 <strcat+0x4>
 800788e:	3b01      	subs	r3, #1
 8007890:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007894:	f803 2f01 	strb.w	r2, [r3, #1]!
 8007898:	2a00      	cmp	r2, #0
 800789a:	d1f9      	bne.n	8007890 <strcat+0x10>
 800789c:	bd10      	pop	{r4, pc}

0800789e <strcpy>:
 800789e:	4603      	mov	r3, r0
 80078a0:	f811 2b01 	ldrb.w	r2, [r1], #1
 80078a4:	f803 2b01 	strb.w	r2, [r3], #1
 80078a8:	2a00      	cmp	r2, #0
 80078aa:	d1f9      	bne.n	80078a0 <strcpy+0x2>
 80078ac:	4770      	bx	lr
	...

080078b0 <__utoa>:
 80078b0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80078b2:	4c1f      	ldr	r4, [pc, #124]	; (8007930 <__utoa+0x80>)
 80078b4:	b08b      	sub	sp, #44	; 0x2c
 80078b6:	4605      	mov	r5, r0
 80078b8:	460b      	mov	r3, r1
 80078ba:	466e      	mov	r6, sp
 80078bc:	f104 0c20 	add.w	ip, r4, #32
 80078c0:	6820      	ldr	r0, [r4, #0]
 80078c2:	6861      	ldr	r1, [r4, #4]
 80078c4:	4637      	mov	r7, r6
 80078c6:	c703      	stmia	r7!, {r0, r1}
 80078c8:	3408      	adds	r4, #8
 80078ca:	4564      	cmp	r4, ip
 80078cc:	463e      	mov	r6, r7
 80078ce:	d1f7      	bne.n	80078c0 <__utoa+0x10>
 80078d0:	7921      	ldrb	r1, [r4, #4]
 80078d2:	7139      	strb	r1, [r7, #4]
 80078d4:	1e91      	subs	r1, r2, #2
 80078d6:	6820      	ldr	r0, [r4, #0]
 80078d8:	6038      	str	r0, [r7, #0]
 80078da:	2922      	cmp	r1, #34	; 0x22
 80078dc:	f04f 0100 	mov.w	r1, #0
 80078e0:	d904      	bls.n	80078ec <__utoa+0x3c>
 80078e2:	7019      	strb	r1, [r3, #0]
 80078e4:	460b      	mov	r3, r1
 80078e6:	4618      	mov	r0, r3
 80078e8:	b00b      	add	sp, #44	; 0x2c
 80078ea:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80078ec:	1e58      	subs	r0, r3, #1
 80078ee:	4684      	mov	ip, r0
 80078f0:	fbb5 f7f2 	udiv	r7, r5, r2
 80078f4:	fb02 5617 	mls	r6, r2, r7, r5
 80078f8:	3628      	adds	r6, #40	; 0x28
 80078fa:	446e      	add	r6, sp
 80078fc:	460c      	mov	r4, r1
 80078fe:	f816 6c28 	ldrb.w	r6, [r6, #-40]
 8007902:	f80c 6f01 	strb.w	r6, [ip, #1]!
 8007906:	462e      	mov	r6, r5
 8007908:	42b2      	cmp	r2, r6
 800790a:	f101 0101 	add.w	r1, r1, #1
 800790e:	463d      	mov	r5, r7
 8007910:	d9ee      	bls.n	80078f0 <__utoa+0x40>
 8007912:	2200      	movs	r2, #0
 8007914:	545a      	strb	r2, [r3, r1]
 8007916:	1919      	adds	r1, r3, r4
 8007918:	1aa5      	subs	r5, r4, r2
 800791a:	42aa      	cmp	r2, r5
 800791c:	dae3      	bge.n	80078e6 <__utoa+0x36>
 800791e:	f810 5f01 	ldrb.w	r5, [r0, #1]!
 8007922:	780e      	ldrb	r6, [r1, #0]
 8007924:	7006      	strb	r6, [r0, #0]
 8007926:	3201      	adds	r2, #1
 8007928:	f801 5901 	strb.w	r5, [r1], #-1
 800792c:	e7f4      	b.n	8007918 <__utoa+0x68>
 800792e:	bf00      	nop
 8007930:	08007a18 	.word	0x08007a18

08007934 <_init>:
 8007934:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007936:	bf00      	nop
 8007938:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800793a:	bc08      	pop	{r3}
 800793c:	469e      	mov	lr, r3
 800793e:	4770      	bx	lr

08007940 <_fini>:
 8007940:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007942:	bf00      	nop
 8007944:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007946:	bc08      	pop	{r3}
 8007948:	469e      	mov	lr, r3
 800794a:	4770      	bx	lr
